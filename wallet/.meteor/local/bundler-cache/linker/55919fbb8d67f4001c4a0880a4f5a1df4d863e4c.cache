[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar module, numeral;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/numeral_numeral/meteor-pre.js                                                                          //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nmodule = {};                                                                                                       // 1\nmodule.exports = {};                                                                                               // 2\n                                                                                                                   // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/numeral_numeral/upstream/numeral.js                                                                    //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n/*!                                                                                                                // 1\n * numeral.js                                                                                                      // 2\n * version : 1.5.3                                                                                                 // 3\n * author : Adam Draper                                                                                            // 4\n * license : MIT                                                                                                   // 5\n * http://adamwdraper.github.com/Numeral-js/                                                                       // 6\n */                                                                                                                // 7\n                                                                                                                   // 8\n(function () {                                                                                                     // 9\n                                                                                                                   // 10\n    /************************************                                                                          // 11\n        Constants                                                                                                  // 12\n    ************************************/                                                                          // 13\n                                                                                                                   // 14\n    var numeral,                                                                                                   // 15\n        VERSION = '1.5.3',                                                                                         // 16\n        // internal storage for language config files                                                              // 17\n        languages = {},                                                                                            // 18\n        currentLanguage = 'en',                                                                                    // 19\n        zeroFormat = null,                                                                                         // 20\n        defaultFormat = '0,0',                                                                                     // 21\n        // check for nodeJS                                                                                        // 22\n        hasModule = (typeof module !== 'undefined' && module.exports);                                             // 23\n                                                                                                                   // 24\n                                                                                                                   // 25\n    /************************************                                                                          // 26\n        Constructors                                                                                               // 27\n    ************************************/                                                                          // 28\n                                                                                                                   // 29\n                                                                                                                   // 30\n    // Numeral prototype object                                                                                    // 31\n    function Numeral (number) {                                                                                    // 32\n        this._value = number;                                                                                      // 33\n    }                                                                                                              // 34\n                                                                                                                   // 35\n    /**                                                                                                            // 36\n     * Implementation of toFixed() that treats floats more like decimals                                           // 37\n     *                                                                                                             // 38\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present                               // 39\n     * problems for accounting- and finance-related software.                                                      // 40\n     */                                                                                                            // 41\n    function toFixed (value, precision, roundingFunction, optionals) {                                             // 42\n        var power = Math.pow(10, precision),                                                                       // 43\n            optionalsRegExp,                                                                                       // 44\n            output;                                                                                                // 45\n                                                                                                                   // 46\n        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);                     // 47\n        // Multiply up by precision, round accurately, then divide and use native toFixed():                       // 48\n        output = (roundingFunction(value * power) / power).toFixed(precision);                                     // 49\n                                                                                                                   // 50\n        if (optionals) {                                                                                           // 51\n            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');                                               // 52\n            output = output.replace(optionalsRegExp, '');                                                          // 53\n        }                                                                                                          // 54\n                                                                                                                   // 55\n        return output;                                                                                             // 56\n    }                                                                                                              // 57\n                                                                                                                   // 58\n    /************************************                                                                          // 59\n        Formatting                                                                                                 // 60\n    ************************************/                                                                          // 61\n                                                                                                                   // 62\n    // determine what type of formatting we need to do                                                             // 63\n    function formatNumeral (n, format, roundingFunction) {                                                         // 64\n        var output;                                                                                                // 65\n                                                                                                                   // 66\n        // figure out what kind of format we are dealing with                                                      // 67\n        if (format.indexOf('$') > -1) { // currency!!!!!                                                           // 68\n            output = formatCurrency(n, format, roundingFunction);                                                  // 69\n        } else if (format.indexOf('%') > -1) { // percentage                                                       // 70\n            output = formatPercentage(n, format, roundingFunction);                                                // 71\n        } else if (format.indexOf(':') > -1) { // time                                                             // 72\n            output = formatTime(n, format);                                                                        // 73\n        } else { // plain ol' numbers or bytes                                                                     // 74\n            output = formatNumber(n._value, format, roundingFunction);                                             // 75\n        }                                                                                                          // 76\n                                                                                                                   // 77\n        // return string                                                                                           // 78\n        return output;                                                                                             // 79\n    }                                                                                                              // 80\n                                                                                                                   // 81\n    // revert to number                                                                                            // 82\n    function unformatNumeral (n, string) {                                                                         // 83\n        var stringOriginal = string,                                                                               // 84\n            thousandRegExp,                                                                                        // 85\n            millionRegExp,                                                                                         // 86\n            billionRegExp,                                                                                         // 87\n            trillionRegExp,                                                                                        // 88\n            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],                                           // 89\n            bytesMultiplier = false,                                                                               // 90\n            power;                                                                                                 // 91\n                                                                                                                   // 92\n        if (string.indexOf(':') > -1) {                                                                            // 93\n            n._value = unformatTime(string);                                                                       // 94\n        } else {                                                                                                   // 95\n            if (string === zeroFormat) {                                                                           // 96\n                n._value = 0;                                                                                      // 97\n            } else {                                                                                               // 98\n                if (languages[currentLanguage].delimiters.decimal !== '.') {                                       // 99\n                    string = string.replace(/\\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');\n                }                                                                                                  // 101\n                                                                                                                   // 102\n                // see if abbreviations are there so that we can multiply to the correct number                    // 103\n                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                                                                                                                   // 108\n                // see if bytes are there so that we can multiply to the correct number                            // 109\n                for (power = 0; power <= suffixes.length; power++) {                                               // 110\n                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;  // 111\n                                                                                                                   // 112\n                    if (bytesMultiplier) {                                                                         // 113\n                        break;                                                                                     // 114\n                    }                                                                                              // 115\n                }                                                                                                  // 116\n                                                                                                                   // 117\n                // do some math to create our number                                                               // 118\n                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\\.]+/g, ''));\n                                                                                                                   // 120\n                // round if we are talking about bytes                                                             // 121\n                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;                                     // 122\n            }                                                                                                      // 123\n        }                                                                                                          // 124\n        return n._value;                                                                                           // 125\n    }                                                                                                              // 126\n                                                                                                                   // 127\n    function formatCurrency (n, format, roundingFunction) {                                                        // 128\n        var symbolIndex = format.indexOf('$'),                                                                     // 129\n            openParenIndex = format.indexOf('('),                                                                  // 130\n            minusSignIndex = format.indexOf('-'),                                                                  // 131\n            space = '',                                                                                            // 132\n            spliceIndex,                                                                                           // 133\n            output;                                                                                                // 134\n                                                                                                                   // 135\n        // check for space before or after currency                                                                // 136\n        if (format.indexOf(' $') > -1) {                                                                           // 137\n            space = ' ';                                                                                           // 138\n            format = format.replace(' $', '');                                                                     // 139\n        } else if (format.indexOf('$ ') > -1) {                                                                    // 140\n            space = ' ';                                                                                           // 141\n            format = format.replace('$ ', '');                                                                     // 142\n        } else {                                                                                                   // 143\n            format = format.replace('$', '');                                                                      // 144\n        }                                                                                                          // 145\n                                                                                                                   // 146\n        // format the number                                                                                       // 147\n        output = formatNumber(n._value, format, roundingFunction);                                                 // 148\n                                                                                                                   // 149\n        // position the symbol                                                                                     // 150\n        if (symbolIndex <= 1) {                                                                                    // 151\n            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {                                            // 152\n                output = output.split('');                                                                         // 153\n                spliceIndex = 1;                                                                                   // 154\n                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){                                 // 155\n                    // the symbol appears before the \"(\" or \"-\"                                                    // 156\n                    spliceIndex = 0;                                                                               // 157\n                }                                                                                                  // 158\n                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);                 // 159\n                output = output.join('');                                                                          // 160\n            } else {                                                                                               // 161\n                output = languages[currentLanguage].currency.symbol + space + output;                              // 162\n            }                                                                                                      // 163\n        } else {                                                                                                   // 164\n            if (output.indexOf(')') > -1) {                                                                        // 165\n                output = output.split('');                                                                         // 166\n                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);                          // 167\n                output = output.join('');                                                                          // 168\n            } else {                                                                                               // 169\n                output = output + space + languages[currentLanguage].currency.symbol;                              // 170\n            }                                                                                                      // 171\n        }                                                                                                          // 172\n                                                                                                                   // 173\n        return output;                                                                                             // 174\n    }                                                                                                              // 175\n                                                                                                                   // 176\n    function formatPercentage (n, format, roundingFunction) {                                                      // 177\n        var space = '',                                                                                            // 178\n            output,                                                                                                // 179\n            value = n._value * 100;                                                                                // 180\n                                                                                                                   // 181\n        // check for space before %                                                                                // 182\n        if (format.indexOf(' %') > -1) {                                                                           // 183\n            space = ' ';                                                                                           // 184\n            format = format.replace(' %', '');                                                                     // 185\n        } else {                                                                                                   // 186\n            format = format.replace('%', '');                                                                      // 187\n        }                                                                                                          // 188\n                                                                                                                   // 189\n        output = formatNumber(value, format, roundingFunction);                                                    // 190\n                                                                                                                   // 191\n        if (output.indexOf(')') > -1 ) {                                                                           // 192\n            output = output.split('');                                                                             // 193\n            output.splice(-1, 0, space + '%');                                                                     // 194\n            output = output.join('');                                                                              // 195\n        } else {                                                                                                   // 196\n            output = output + space + '%';                                                                         // 197\n        }                                                                                                          // 198\n                                                                                                                   // 199\n        return output;                                                                                             // 200\n    }                                                                                                              // 201\n                                                                                                                   // 202\n    function formatTime (n) {                                                                                      // 203\n        var hours = Math.floor(n._value/60/60),                                                                    // 204\n            minutes = Math.floor((n._value - (hours * 60 * 60))/60),                                               // 205\n            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));                                   // 206\n        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n    }                                                                                                              // 208\n                                                                                                                   // 209\n    function unformatTime (string) {                                                                               // 210\n        var timeArray = string.split(':'),                                                                         // 211\n            seconds = 0;                                                                                           // 212\n        // turn hours and minutes into seconds and add them all up                                                 // 213\n        if (timeArray.length === 3) {                                                                              // 214\n            // hours                                                                                               // 215\n            seconds = seconds + (Number(timeArray[0]) * 60 * 60);                                                  // 216\n            // minutes                                                                                             // 217\n            seconds = seconds + (Number(timeArray[1]) * 60);                                                       // 218\n            // seconds                                                                                             // 219\n            seconds = seconds + Number(timeArray[2]);                                                              // 220\n        } else if (timeArray.length === 2) {                                                                       // 221\n            // minutes                                                                                             // 222\n            seconds = seconds + (Number(timeArray[0]) * 60);                                                       // 223\n            // seconds                                                                                             // 224\n            seconds = seconds + Number(timeArray[1]);                                                              // 225\n        }                                                                                                          // 226\n        return Number(seconds);                                                                                    // 227\n    }                                                                                                              // 228\n                                                                                                                   // 229\n    function formatNumber (value, format, roundingFunction) {                                                      // 230\n        var negP = false,                                                                                          // 231\n            signed = false,                                                                                        // 232\n            optDec = false,                                                                                        // 233\n            abbr = '',                                                                                             // 234\n            abbrK = false, // force abbreviation to thousands                                                      // 235\n            abbrM = false, // force abbreviation to millions                                                       // 236\n            abbrB = false, // force abbreviation to billions                                                       // 237\n            abbrT = false, // force abbreviation to trillions                                                      // 238\n            abbrForce = false, // force abbreviation                                                               // 239\n            bytes = '',                                                                                            // 240\n            ord = '',                                                                                              // 241\n            abs = Math.abs(value),                                                                                 // 242\n            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],                                      // 243\n            min,                                                                                                   // 244\n            max,                                                                                                   // 245\n            power,                                                                                                 // 246\n            w,                                                                                                     // 247\n            precision,                                                                                             // 248\n            thousands,                                                                                             // 249\n            d = '',                                                                                                // 250\n            neg = false;                                                                                           // 251\n                                                                                                                   // 252\n        // check if number is zero and a custom zero format has been set                                           // 253\n        if (value === 0 && zeroFormat !== null) {                                                                  // 254\n            return zeroFormat;                                                                                     // 255\n        } else {                                                                                                   // 256\n            // see if we should use parentheses for negative number or if we should prefix with a sign             // 257\n            // if both are present we default to parentheses                                                       // 258\n            if (format.indexOf('(') > -1) {                                                                        // 259\n                negP = true;                                                                                       // 260\n                format = format.slice(1, -1);                                                                      // 261\n            } else if (format.indexOf('+') > -1) {                                                                 // 262\n                signed = true;                                                                                     // 263\n                format = format.replace(/\\+/g, '');                                                                // 264\n            }                                                                                                      // 265\n                                                                                                                   // 266\n            // see if abbreviation is wanted                                                                       // 267\n            if (format.indexOf('a') > -1) {                                                                        // 268\n                // check if abbreviation is specified                                                              // 269\n                abbrK = format.indexOf('aK') >= 0;                                                                 // 270\n                abbrM = format.indexOf('aM') >= 0;                                                                 // 271\n                abbrB = format.indexOf('aB') >= 0;                                                                 // 272\n                abbrT = format.indexOf('aT') >= 0;                                                                 // 273\n                abbrForce = abbrK || abbrM || abbrB || abbrT;                                                      // 274\n                                                                                                                   // 275\n                // check for space before abbreviation                                                             // 276\n                if (format.indexOf(' a') > -1) {                                                                   // 277\n                    abbr = ' ';                                                                                    // 278\n                    format = format.replace(' a', '');                                                             // 279\n                } else {                                                                                           // 280\n                    format = format.replace('a', '');                                                              // 281\n                }                                                                                                  // 282\n                                                                                                                   // 283\n                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {                                              // 284\n                    // trillion                                                                                    // 285\n                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;                               // 286\n                    value = value / Math.pow(10, 12);                                                              // 287\n                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {              // 288\n                    // billion                                                                                     // 289\n                    abbr = abbr + languages[currentLanguage].abbreviations.billion;                                // 290\n                    value = value / Math.pow(10, 9);                                                               // 291\n                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {               // 292\n                    // million                                                                                     // 293\n                    abbr = abbr + languages[currentLanguage].abbreviations.million;                                // 294\n                    value = value / Math.pow(10, 6);                                                               // 295\n                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {               // 296\n                    // thousand                                                                                    // 297\n                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;                               // 298\n                    value = value / Math.pow(10, 3);                                                               // 299\n                }                                                                                                  // 300\n            }                                                                                                      // 301\n                                                                                                                   // 302\n            // see if we are formatting bytes                                                                      // 303\n            if (format.indexOf('b') > -1) {                                                                        // 304\n                // check for space before                                                                          // 305\n                if (format.indexOf(' b') > -1) {                                                                   // 306\n                    bytes = ' ';                                                                                   // 307\n                    format = format.replace(' b', '');                                                             // 308\n                } else {                                                                                           // 309\n                    format = format.replace('b', '');                                                              // 310\n                }                                                                                                  // 311\n                                                                                                                   // 312\n                for (power = 0; power <= suffixes.length; power++) {                                               // 313\n                    min = Math.pow(1024, power);                                                                   // 314\n                    max = Math.pow(1024, power+1);                                                                 // 315\n                                                                                                                   // 316\n                    if (value >= min && value < max) {                                                             // 317\n                        bytes = bytes + suffixes[power];                                                           // 318\n                        if (min > 0) {                                                                             // 319\n                            value = value / min;                                                                   // 320\n                        }                                                                                          // 321\n                        break;                                                                                     // 322\n                    }                                                                                              // 323\n                }                                                                                                  // 324\n            }                                                                                                      // 325\n                                                                                                                   // 326\n            // see if ordinal is wanted                                                                            // 327\n            if (format.indexOf('o') > -1) {                                                                        // 328\n                // check for space before                                                                          // 329\n                if (format.indexOf(' o') > -1) {                                                                   // 330\n                    ord = ' ';                                                                                     // 331\n                    format = format.replace(' o', '');                                                             // 332\n                } else {                                                                                           // 333\n                    format = format.replace('o', '');                                                              // 334\n                }                                                                                                  // 335\n                                                                                                                   // 336\n                ord = ord + languages[currentLanguage].ordinal(value);                                             // 337\n            }                                                                                                      // 338\n                                                                                                                   // 339\n            if (format.indexOf('[.]') > -1) {                                                                      // 340\n                optDec = true;                                                                                     // 341\n                format = format.replace('[.]', '.');                                                               // 342\n            }                                                                                                      // 343\n                                                                                                                   // 344\n            w = value.toString().split('.')[0];                                                                    // 345\n            precision = format.split('.')[1];                                                                      // 346\n            thousands = format.indexOf(',');                                                                       // 347\n                                                                                                                   // 348\n            if (precision) {                                                                                       // 349\n                if (precision.indexOf('[') > -1) {                                                                 // 350\n                    precision = precision.replace(']', '');                                                        // 351\n                    precision = precision.split('[');                                                              // 352\n                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {                                                                                           // 354\n                    d = toFixed(value, precision.length, roundingFunction);                                        // 355\n                }                                                                                                  // 356\n                                                                                                                   // 357\n                w = d.split('.')[0];                                                                               // 358\n                                                                                                                   // 359\n                if (d.split('.')[1].length) {                                                                      // 360\n                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];                           // 361\n                } else {                                                                                           // 362\n                    d = '';                                                                                        // 363\n                }                                                                                                  // 364\n                                                                                                                   // 365\n                if (optDec && Number(d.slice(1)) === 0) {                                                          // 366\n                    d = '';                                                                                        // 367\n                }                                                                                                  // 368\n            } else {                                                                                               // 369\n                w = toFixed(value, null, roundingFunction);                                                        // 370\n            }                                                                                                      // 371\n                                                                                                                   // 372\n            // format number                                                                                       // 373\n            if (w.indexOf('-') > -1) {                                                                             // 374\n                w = w.slice(1);                                                                                    // 375\n                neg = true;                                                                                        // 376\n            }                                                                                                      // 377\n                                                                                                                   // 378\n            if (thousands > -1) {                                                                                  // 379\n                w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);\n            }                                                                                                      // 381\n                                                                                                                   // 382\n            if (format.indexOf('.') === 0) {                                                                       // 383\n                w = '';                                                                                            // 384\n            }                                                                                                      // 385\n                                                                                                                   // 386\n            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');\n        }                                                                                                          // 388\n    }                                                                                                              // 389\n                                                                                                                   // 390\n    /************************************                                                                          // 391\n        Top Level Functions                                                                                        // 392\n    ************************************/                                                                          // 393\n                                                                                                                   // 394\n    numeral = function (input) {                                                                                   // 395\n        if (numeral.isNumeral(input)) {                                                                            // 396\n            input = input.value();                                                                                 // 397\n        } else if (input === 0 || typeof input === 'undefined') {                                                  // 398\n            input = 0;                                                                                             // 399\n        } else if (!Number(input)) {                                                                               // 400\n            input = numeral.fn.unformat(input);                                                                    // 401\n        }                                                                                                          // 402\n                                                                                                                   // 403\n        return new Numeral(Number(input));                                                                         // 404\n    };                                                                                                             // 405\n                                                                                                                   // 406\n    // version number                                                                                              // 407\n    numeral.version = VERSION;                                                                                     // 408\n                                                                                                                   // 409\n    // compare numeral object                                                                                      // 410\n    numeral.isNumeral = function (obj) {                                                                           // 411\n        return obj instanceof Numeral;                                                                             // 412\n    };                                                                                                             // 413\n                                                                                                                   // 414\n    // This function will load languages and then set the global language.  If                                     // 415\n    // no arguments are passed in, it will simply return the current global                                        // 416\n    // language key.                                                                                               // 417\n    numeral.language = function (key, values) {                                                                    // 418\n        if (!key) {                                                                                                // 419\n            return currentLanguage;                                                                                // 420\n        }                                                                                                          // 421\n                                                                                                                   // 422\n        if (key && !values) {                                                                                      // 423\n            if(!languages[key]) {                                                                                  // 424\n                throw new Error('Unknown language : ' + key);                                                      // 425\n            }                                                                                                      // 426\n            currentLanguage = key;                                                                                 // 427\n        }                                                                                                          // 428\n                                                                                                                   // 429\n        if (values || !languages[key]) {                                                                           // 430\n            loadLanguage(key, values);                                                                             // 431\n        }                                                                                                          // 432\n                                                                                                                   // 433\n        return numeral;                                                                                            // 434\n    };                                                                                                             // 435\n                                                                                                                   // 436\n    // This function provides access to the loaded language data.  If                                              // 437\n    // no arguments are passed in, it will simply return the current                                               // 438\n    // global language object.                                                                                     // 439\n    numeral.languageData = function (key) {                                                                        // 440\n        if (!key) {                                                                                                // 441\n            return languages[currentLanguage];                                                                     // 442\n        }                                                                                                          // 443\n                                                                                                                   // 444\n        if (!languages[key]) {                                                                                     // 445\n            throw new Error('Unknown language : ' + key);                                                          // 446\n        }                                                                                                          // 447\n                                                                                                                   // 448\n        return languages[key];                                                                                     // 449\n    };                                                                                                             // 450\n                                                                                                                   // 451\n    numeral.language('en', {                                                                                       // 452\n        delimiters: {                                                                                              // 453\n            thousands: ',',                                                                                        // 454\n            decimal: '.'                                                                                           // 455\n        },                                                                                                         // 456\n        abbreviations: {                                                                                           // 457\n            thousand: 'k',                                                                                         // 458\n            million: 'm',                                                                                          // 459\n            billion: 'b',                                                                                          // 460\n            trillion: 't'                                                                                          // 461\n        },                                                                                                         // 462\n        ordinal: function (number) {                                                                               // 463\n            var b = number % 10;                                                                                   // 464\n            return (~~ (number % 100 / 10) === 1) ? 'th' :                                                         // 465\n                (b === 1) ? 'st' :                                                                                 // 466\n                (b === 2) ? 'nd' :                                                                                 // 467\n                (b === 3) ? 'rd' : 'th';                                                                           // 468\n        },                                                                                                         // 469\n        currency: {                                                                                                // 470\n            symbol: '$'                                                                                            // 471\n        }                                                                                                          // 472\n    });                                                                                                            // 473\n                                                                                                                   // 474\n    numeral.zeroFormat = function (format) {                                                                       // 475\n        zeroFormat = typeof(format) === 'string' ? format : null;                                                  // 476\n    };                                                                                                             // 477\n                                                                                                                   // 478\n    numeral.defaultFormat = function (format) {                                                                    // 479\n        defaultFormat = typeof(format) === 'string' ? format : '0.0';                                              // 480\n    };                                                                                                             // 481\n                                                                                                                   // 482\n    /************************************                                                                          // 483\n        Helpers                                                                                                    // 484\n    ************************************/                                                                          // 485\n                                                                                                                   // 486\n    function loadLanguage(key, values) {                                                                           // 487\n        languages[key] = values;                                                                                   // 488\n    }                                                                                                              // 489\n                                                                                                                   // 490\n    /************************************                                                                          // 491\n        Floating-point helpers                                                                                     // 492\n    ************************************/                                                                          // 493\n                                                                                                                   // 494\n    // The floating-point helper functions and implementation                                                      // 495\n    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/                                           // 496\n                                                                                                                   // 497\n    /**                                                                                                            // 498\n     * Array.prototype.reduce for browsers that don't support it                                                   // 499\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility\n     */                                                                                                            // 501\n    if ('function' !== typeof Array.prototype.reduce) {                                                            // 502\n        Array.prototype.reduce = function (callback, opt_initialValue) {                                           // 503\n            'use strict';                                                                                          // 504\n                                                                                                                   // 505\n            if (null === this || 'undefined' === typeof this) {                                                    // 506\n                // At the moment all modern browsers, that support strict mode, have                               // 507\n                // native implementation of Array.prototype.reduce. For instance, IE8                              // 508\n                // does not support strict mode, so this check is actually useless.                                // 509\n                throw new TypeError('Array.prototype.reduce called on null or undefined');                         // 510\n            }                                                                                                      // 511\n                                                                                                                   // 512\n            if ('function' !== typeof callback) {                                                                  // 513\n                throw new TypeError(callback + ' is not a function');                                              // 514\n            }                                                                                                      // 515\n                                                                                                                   // 516\n            var index,                                                                                             // 517\n                value,                                                                                             // 518\n                length = this.length >>> 0,                                                                        // 519\n                isValueSet = false;                                                                                // 520\n                                                                                                                   // 521\n            if (1 < arguments.length) {                                                                            // 522\n                value = opt_initialValue;                                                                          // 523\n                isValueSet = true;                                                                                 // 524\n            }                                                                                                      // 525\n                                                                                                                   // 526\n            for (index = 0; length > index; ++index) {                                                             // 527\n                if (this.hasOwnProperty(index)) {                                                                  // 528\n                    if (isValueSet) {                                                                              // 529\n                        value = callback(value, this[index], index, this);                                         // 530\n                    } else {                                                                                       // 531\n                        value = this[index];                                                                       // 532\n                        isValueSet = true;                                                                         // 533\n                    }                                                                                              // 534\n                }                                                                                                  // 535\n            }                                                                                                      // 536\n                                                                                                                   // 537\n            if (!isValueSet) {                                                                                     // 538\n                throw new TypeError('Reduce of empty array with no initial value');                                // 539\n            }                                                                                                      // 540\n                                                                                                                   // 541\n            return value;                                                                                          // 542\n        };                                                                                                         // 543\n    }                                                                                                              // 544\n                                                                                                                   // 545\n                                                                                                                   // 546\n    /**                                                                                                            // 547\n     * Computes the multiplier necessary to make x >= 1,                                                           // 548\n     * effectively eliminating miscalculations caused by                                                           // 549\n     * finite precision.                                                                                           // 550\n     */                                                                                                            // 551\n    function multiplier(x) {                                                                                       // 552\n        var parts = x.toString().split('.');                                                                       // 553\n        if (parts.length < 2) {                                                                                    // 554\n            return 1;                                                                                              // 555\n        }                                                                                                          // 556\n        return Math.pow(10, parts[1].length);                                                                      // 557\n    }                                                                                                              // 558\n                                                                                                                   // 559\n    /**                                                                                                            // 560\n     * Given a variable number of arguments, returns the maximum                                                   // 561\n     * multiplier that must be used to normalize an operation involving                                            // 562\n     * all of them.                                                                                                // 563\n     */                                                                                                            // 564\n    function correctionFactor() {                                                                                  // 565\n        var args = Array.prototype.slice.call(arguments);                                                          // 566\n        return args.reduce(function (prev, next) {                                                                 // 567\n            var mp = multiplier(prev),                                                                             // 568\n                mn = multiplier(next);                                                                             // 569\n        return mp > mn ? mp : mn;                                                                                  // 570\n        }, -Infinity);                                                                                             // 571\n    }                                                                                                              // 572\n                                                                                                                   // 573\n                                                                                                                   // 574\n    /************************************                                                                          // 575\n        Numeral Prototype                                                                                          // 576\n    ************************************/                                                                          // 577\n                                                                                                                   // 578\n                                                                                                                   // 579\n    numeral.fn = Numeral.prototype = {                                                                             // 580\n                                                                                                                   // 581\n        clone : function () {                                                                                      // 582\n            return numeral(this);                                                                                  // 583\n        },                                                                                                         // 584\n                                                                                                                   // 585\n        format : function (inputString, roundingFunction) {                                                        // 586\n            return formatNumeral(this,                                                                             // 587\n                  inputString ? inputString : defaultFormat,                                                       // 588\n                  (roundingFunction !== undefined) ? roundingFunction : Math.round                                 // 589\n              );                                                                                                   // 590\n        },                                                                                                         // 591\n                                                                                                                   // 592\n        unformat : function (inputString) {                                                                        // 593\n            if (Object.prototype.toString.call(inputString) === '[object Number]') {                               // 594\n                return inputString;                                                                                // 595\n            }                                                                                                      // 596\n            return unformatNumeral(this, inputString ? inputString : defaultFormat);                               // 597\n        },                                                                                                         // 598\n                                                                                                                   // 599\n        value : function () {                                                                                      // 600\n            return this._value;                                                                                    // 601\n        },                                                                                                         // 602\n                                                                                                                   // 603\n        valueOf : function () {                                                                                    // 604\n            return this._value;                                                                                    // 605\n        },                                                                                                         // 606\n                                                                                                                   // 607\n        set : function (value) {                                                                                   // 608\n            this._value = Number(value);                                                                           // 609\n            return this;                                                                                           // 610\n        },                                                                                                         // 611\n                                                                                                                   // 612\n        add : function (value) {                                                                                   // 613\n            var corrFactor = correctionFactor.call(null, this._value, value);                                      // 614\n            function cback(accum, curr, currI, O) {                                                                // 615\n                return accum + corrFactor * curr;                                                                  // 616\n            }                                                                                                      // 617\n            this._value = [this._value, value].reduce(cback, 0) / corrFactor;                                      // 618\n            return this;                                                                                           // 619\n        },                                                                                                         // 620\n                                                                                                                   // 621\n        subtract : function (value) {                                                                              // 622\n            var corrFactor = correctionFactor.call(null, this._value, value);                                      // 623\n            function cback(accum, curr, currI, O) {                                                                // 624\n                return accum - corrFactor * curr;                                                                  // 625\n            }                                                                                                      // 626\n            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;                            // 627\n            return this;                                                                                           // 628\n        },                                                                                                         // 629\n                                                                                                                   // 630\n        multiply : function (value) {                                                                              // 631\n            function cback(accum, curr, currI, O) {                                                                // 632\n                var corrFactor = correctionFactor(accum, curr);                                                    // 633\n                return (accum * corrFactor) * (curr * corrFactor) /                                                // 634\n                    (corrFactor * corrFactor);                                                                     // 635\n            }                                                                                                      // 636\n            this._value = [this._value, value].reduce(cback, 1);                                                   // 637\n            return this;                                                                                           // 638\n        },                                                                                                         // 639\n                                                                                                                   // 640\n        divide : function (value) {                                                                                // 641\n            function cback(accum, curr, currI, O) {                                                                // 642\n                var corrFactor = correctionFactor(accum, curr);                                                    // 643\n                return (accum * corrFactor) / (curr * corrFactor);                                                 // 644\n            }                                                                                                      // 645\n            this._value = [this._value, value].reduce(cback);                                                      // 646\n            return this;                                                                                           // 647\n        },                                                                                                         // 648\n                                                                                                                   // 649\n        difference : function (value) {                                                                            // 650\n            return Math.abs(numeral(this._value).subtract(value).value());                                         // 651\n        }                                                                                                          // 652\n                                                                                                                   // 653\n    };                                                                                                             // 654\n                                                                                                                   // 655\n    /************************************                                                                          // 656\n        Exposing Numeral                                                                                           // 657\n    ************************************/                                                                          // 658\n                                                                                                                   // 659\n    // CommonJS module is defined                                                                                  // 660\n    if (hasModule) {                                                                                               // 661\n        module.exports = numeral;                                                                                  // 662\n    }                                                                                                              // 663\n                                                                                                                   // 664\n    /*global ender:false */                                                                                        // 665\n    if (typeof ender === 'undefined') {                                                                            // 666\n        // here, `this` means `window` in the browser, or `global` on the server                                   // 667\n        // add `numeral` as a global object via a string identifier,                                               // 668\n        // for Closure Compiler 'advanced' mode                                                                    // 669\n        this['numeral'] = numeral;                                                                                 // 670\n    }                                                                                                              // 671\n                                                                                                                   // 672\n    /*global define:false */                                                                                       // 673\n    if (typeof define === 'function' && define.amd) {                                                              // 674\n        define([], function () {                                                                                   // 675\n            return numeral;                                                                                        // 676\n        });                                                                                                        // 677\n    }                                                                                                              // 678\n}).call(this);                                                                                                     // 679\n                                                                                                                   // 680\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/numeral_numeral/meteor-post.js                                                                         //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nnumeral = module.exports;                                                                                          // 1\n                                                                                                                   // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['numeral:numeral'] = {\n  numeral: numeral\n};\n\n})();\n","servePath":"/packages/numeral_numeral.js","sourceMap":{"version":3,"sources":["/packages/numeral_numeral/meteor-pre.js","/packages/numeral_numeral/upstream/numeral.js","/packages/numeral_numeral/meteor-post.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA,uyH;;;;;;;;;;;;;;;;;;ACvqBA;AACA,uH","file":"/packages/numeral_numeral.js","sourcesContent":["module = {};\nmodule.exports = {};\n","/*!\n * numeral.js\n * version : 1.5.3\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function () {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var numeral,\n        VERSION = '1.5.3',\n        // internal storage for language config files\n        languages = {},\n        currentLanguage = 'en',\n        zeroFormat = null,\n        defaultFormat = '0,0',\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Numeral prototype object\n    function Numeral (number) {\n        this._value = number;\n    }\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    function toFixed (value, precision, roundingFunction, optionals) {\n        var power = Math.pow(10, precision),\n            optionalsRegExp,\n            output;\n            \n        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n        // Multiply up by precision, round accurately, then divide and use native toFixed():\n        output = (roundingFunction(value * power) / power).toFixed(precision);\n\n        if (optionals) {\n            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n            output = output.replace(optionalsRegExp, '');\n        }\n\n        return output;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n    // determine what type of formatting we need to do\n    function formatNumeral (n, format, roundingFunction) {\n        var output;\n\n        // figure out what kind of format we are dealing with\n        if (format.indexOf('$') > -1) { // currency!!!!!\n            output = formatCurrency(n, format, roundingFunction);\n        } else if (format.indexOf('%') > -1) { // percentage\n            output = formatPercentage(n, format, roundingFunction);\n        } else if (format.indexOf(':') > -1) { // time\n            output = formatTime(n, format);\n        } else { // plain ol' numbers or bytes\n            output = formatNumber(n._value, format, roundingFunction);\n        }\n\n        // return string\n        return output;\n    }\n\n    // revert to number\n    function unformatNumeral (n, string) {\n        var stringOriginal = string,\n            thousandRegExp,\n            millionRegExp,\n            billionRegExp,\n            trillionRegExp,\n            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            bytesMultiplier = false,\n            power;\n\n        if (string.indexOf(':') > -1) {\n            n._value = unformatTime(string);\n        } else {\n            if (string === zeroFormat) {\n                n._value = 0;\n            } else {\n                if (languages[currentLanguage].delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');\n                }\n\n                // see if abbreviations are there so that we can multiply to the correct number\n                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\n                // see if bytes are there so that we can multiply to the correct number\n                for (power = 0; power <= suffixes.length; power++) {\n                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;\n\n                    if (bytesMultiplier) {\n                        break;\n                    }\n                }\n\n                // do some math to create our number\n                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\\.]+/g, ''));\n\n                // round if we are talking about bytes\n                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;\n            }\n        }\n        return n._value;\n    }\n\n    function formatCurrency (n, format, roundingFunction) {\n        var symbolIndex = format.indexOf('$'),\n            openParenIndex = format.indexOf('('),\n            minusSignIndex = format.indexOf('-'),\n            space = '',\n            spliceIndex,\n            output;\n\n        // check for space before or after currency\n        if (format.indexOf(' $') > -1) {\n            space = ' ';\n            format = format.replace(' $', '');\n        } else if (format.indexOf('$ ') > -1) {\n            space = ' ';\n            format = format.replace('$ ', '');\n        } else {\n            format = format.replace('$', '');\n        }\n\n        // format the number\n        output = formatNumber(n._value, format, roundingFunction);\n\n        // position the symbol\n        if (symbolIndex <= 1) {\n            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n                output = output.split('');\n                spliceIndex = 1;\n                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){\n                    // the symbol appears before the \"(\" or \"-\"\n                    spliceIndex = 0;\n                }\n                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);\n                output = output.join('');\n            } else {\n                output = languages[currentLanguage].currency.symbol + space + output;\n            }\n        } else {\n            if (output.indexOf(')') > -1) {\n                output = output.split('');\n                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);\n                output = output.join('');\n            } else {\n                output = output + space + languages[currentLanguage].currency.symbol;\n            }\n        }\n\n        return output;\n    }\n\n    function formatPercentage (n, format, roundingFunction) {\n        var space = '',\n            output,\n            value = n._value * 100;\n\n        // check for space before %\n        if (format.indexOf(' %') > -1) {\n            space = ' ';\n            format = format.replace(' %', '');\n        } else {\n            format = format.replace('%', '');\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n        \n        if (output.indexOf(')') > -1 ) {\n            output = output.split('');\n            output.splice(-1, 0, space + '%');\n            output = output.join('');\n        } else {\n            output = output + space + '%';\n        }\n\n        return output;\n    }\n\n    function formatTime (n) {\n        var hours = Math.floor(n._value/60/60),\n            minutes = Math.floor((n._value - (hours * 60 * 60))/60),\n            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));\n        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n    }\n\n    function unformatTime (string) {\n        var timeArray = string.split(':'),\n            seconds = 0;\n        // turn hours and minutes into seconds and add them all up\n        if (timeArray.length === 3) {\n            // hours\n            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n            // minutes\n            seconds = seconds + (Number(timeArray[1]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n            // minutes\n            seconds = seconds + (Number(timeArray[0]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[1]);\n        }\n        return Number(seconds);\n    }\n\n    function formatNumber (value, format, roundingFunction) {\n        var negP = false,\n            signed = false,\n            optDec = false,\n            abbr = '',\n            abbrK = false, // force abbreviation to thousands\n            abbrM = false, // force abbreviation to millions\n            abbrB = false, // force abbreviation to billions\n            abbrT = false, // force abbreviation to trillions\n            abbrForce = false, // force abbreviation\n            bytes = '',\n            ord = '',\n            abs = Math.abs(value),\n            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            min,\n            max,\n            power,\n            w,\n            precision,\n            thousands,\n            d = '',\n            neg = false;\n\n        // check if number is zero and a custom zero format has been set\n        if (value === 0 && zeroFormat !== null) {\n            return zeroFormat;\n        } else {\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (format.indexOf('(') > -1) {\n                negP = true;\n                format = format.slice(1, -1);\n            } else if (format.indexOf('+') > -1) {\n                signed = true;\n                format = format.replace(/\\+/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (format.indexOf('a') > -1) {\n                // check if abbreviation is specified\n                abbrK = format.indexOf('aK') >= 0;\n                abbrM = format.indexOf('aM') >= 0;\n                abbrB = format.indexOf('aB') >= 0;\n                abbrT = format.indexOf('aT') >= 0;\n                abbrForce = abbrK || abbrM || abbrB || abbrT;\n\n                // check for space before abbreviation\n                if (format.indexOf(' a') > -1) {\n                    abbr = ' ';\n                    format = format.replace(' a', '');\n                } else {\n                    format = format.replace('a', '');\n                }\n\n                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n                    // trillion\n                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;\n                    value = value / Math.pow(10, 12);\n                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n                    // billion\n                    abbr = abbr + languages[currentLanguage].abbreviations.billion;\n                    value = value / Math.pow(10, 9);\n                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n                    // million\n                    abbr = abbr + languages[currentLanguage].abbreviations.million;\n                    value = value / Math.pow(10, 6);\n                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n                    // thousand\n                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;\n                    value = value / Math.pow(10, 3);\n                }\n            }\n\n            // see if we are formatting bytes\n            if (format.indexOf('b') > -1) {\n                // check for space before\n                if (format.indexOf(' b') > -1) {\n                    bytes = ' ';\n                    format = format.replace(' b', '');\n                } else {\n                    format = format.replace('b', '');\n                }\n\n                for (power = 0; power <= suffixes.length; power++) {\n                    min = Math.pow(1024, power);\n                    max = Math.pow(1024, power+1);\n\n                    if (value >= min && value < max) {\n                        bytes = bytes + suffixes[power];\n                        if (min > 0) {\n                            value = value / min;\n                        }\n                        break;\n                    }\n                }\n            }\n\n            // see if ordinal is wanted\n            if (format.indexOf('o') > -1) {\n                // check for space before\n                if (format.indexOf(' o') > -1) {\n                    ord = ' ';\n                    format = format.replace(' o', '');\n                } else {\n                    format = format.replace('o', '');\n                }\n\n                ord = ord + languages[currentLanguage].ordinal(value);\n            }\n\n            if (format.indexOf('[.]') > -1) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            w = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n\n            if (precision) {\n                if (precision.indexOf('[') > -1) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    d = toFixed(value, precision.length, roundingFunction);\n                }\n\n                w = d.split('.')[0];\n\n                if (d.split('.')[1].length) {\n                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];\n                } else {\n                    d = '';\n                }\n\n                if (optDec && Number(d.slice(1)) === 0) {\n                    d = '';\n                }\n            } else {\n                w = toFixed(value, null, roundingFunction);\n            }\n\n            // format number\n            if (w.indexOf('-') > -1) {\n                w = w.slice(1);\n                neg = true;\n            }\n\n            if (thousands > -1) {\n                w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                w = '';\n            }\n\n            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');\n        }\n    }\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    numeral = function (input) {\n        if (numeral.isNumeral(input)) {\n            input = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            input = 0;\n        } else if (!Number(input)) {\n            input = numeral.fn.unformat(input);\n        }\n\n        return new Numeral(Number(input));\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function (obj) {\n        return obj instanceof Numeral;\n    };\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    numeral.language = function (key, values) {\n        if (!key) {\n            return currentLanguage;\n        }\n\n        if (key && !values) {\n            if(!languages[key]) {\n                throw new Error('Unknown language : ' + key);\n            }\n            currentLanguage = key;\n        }\n\n        if (values || !languages[key]) {\n            loadLanguage(key, values);\n        }\n\n        return numeral;\n    };\n    \n    // This function provides access to the loaded language data.  If\n    // no arguments are passed in, it will simply return the current\n    // global language object.\n    numeral.languageData = function (key) {\n        if (!key) {\n            return languages[currentLanguage];\n        }\n        \n        if (!languages[key]) {\n            throw new Error('Unknown language : ' + key);\n        }\n        \n        return languages[key];\n    };\n\n    numeral.language('en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    numeral.zeroFormat = function (format) {\n        zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function (format) {\n        defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    /************************************\n        Helpers\n    ************************************/\n\n    function loadLanguage(key, values) {\n        languages[key] = values;\n    }\n\n    /************************************\n        Floating-point helpers\n    ************************************/\n\n    // The floating-point helper functions and implementation\n    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/\n\n    /**\n     * Array.prototype.reduce for browsers that don't support it\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility\n     */\n    if ('function' !== typeof Array.prototype.reduce) {\n        Array.prototype.reduce = function (callback, opt_initialValue) {\n            'use strict';\n            \n            if (null === this || 'undefined' === typeof this) {\n                // At the moment all modern browsers, that support strict mode, have\n                // native implementation of Array.prototype.reduce. For instance, IE8\n                // does not support strict mode, so this check is actually useless.\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n            \n            if ('function' !== typeof callback) {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var index,\n                value,\n                length = this.length >>> 0,\n                isValueSet = false;\n\n            if (1 < arguments.length) {\n                value = opt_initialValue;\n                isValueSet = true;\n            }\n\n            for (index = 0; length > index; ++index) {\n                if (this.hasOwnProperty(index)) {\n                    if (isValueSet) {\n                        value = callback(value, this[index], index, this);\n                    } else {\n                        value = this[index];\n                        isValueSet = true;\n                    }\n                }\n            }\n\n            if (!isValueSet) {\n                throw new TypeError('Reduce of empty array with no initial value');\n            }\n\n            return value;\n        };\n    }\n\n    \n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    function multiplier(x) {\n        var parts = x.toString().split('.');\n        if (parts.length < 2) {\n            return 1;\n        }\n        return Math.pow(10, parts[1].length);\n    }\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    function correctionFactor() {\n        var args = Array.prototype.slice.call(arguments);\n        return args.reduce(function (prev, next) {\n            var mp = multiplier(prev),\n                mn = multiplier(next);\n        return mp > mn ? mp : mn;\n        }, -Infinity);\n    }        \n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n\n    numeral.fn = Numeral.prototype = {\n\n        clone : function () {\n            return numeral(this);\n        },\n\n        format : function (inputString, roundingFunction) {\n            return formatNumeral(this, \n                  inputString ? inputString : defaultFormat, \n                  (roundingFunction !== undefined) ? roundingFunction : Math.round\n              );\n        },\n\n        unformat : function (inputString) {\n            if (Object.prototype.toString.call(inputString) === '[object Number]') { \n                return inputString; \n            }\n            return unformatNumeral(this, inputString ? inputString : defaultFormat);\n        },\n\n        value : function () {\n            return this._value;\n        },\n\n        valueOf : function () {\n            return this._value;\n        },\n\n        set : function (value) {\n            this._value = Number(value);\n            return this;\n        },\n\n        add : function (value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n            function cback(accum, curr, currI, O) {\n                return accum + corrFactor * curr;\n            }\n            this._value = [this._value, value].reduce(cback, 0) / corrFactor;\n            return this;\n        },\n\n        subtract : function (value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n            function cback(accum, curr, currI, O) {\n                return accum - corrFactor * curr;\n            }\n            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            \n            return this;\n        },\n\n        multiply : function (value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) * (curr * corrFactor) /\n                    (corrFactor * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback, 1);\n            return this;\n        },\n\n        divide : function (value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) / (curr * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback);            \n            return this;\n        },\n\n        difference : function (value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n\n    };\n\n    /************************************\n        Exposing Numeral\n    ************************************/\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = numeral;\n    }\n\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `numeral` as a global object via a string identifier,\n        // for Closure Compiler 'advanced' mode\n        this['numeral'] = numeral;\n    }\n\n    /*global define:false */\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return numeral;\n        });\n    }\n}).call(this);\n","numeral = module.exports;\n"]}}]