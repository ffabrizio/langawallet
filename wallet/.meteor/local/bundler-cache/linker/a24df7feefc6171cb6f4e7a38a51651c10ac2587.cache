[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar numeral = Package['numeral:numeral'].numeral;\nvar Web3 = Package['ethereum:web3'].Web3;\nvar BigNumber = Package['ethereum:web3'].BigNumber;\n\n/* Package-scope variables */\nvar LocalStore, Tracker, EthTools;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ethereum_tools/ethtools.js                                                                     //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n/**                                                                                                        // 1\nTemplate Controllers                                                                                       // 2\n                                                                                                           // 3\n@module Packages                                                                                           // 4\n*/                                                                                                         // 5\n                                                                                                           // 6\n                                                                                                           // 7\n/**                                                                                                        // 8\nHelper functions for ethereum dapps                                                                        // 9\n                                                                                                           // 10\n@class [packages] ethereum:tools                                                                           // 11\n@constructor                                                                                               // 12\n*/                                                                                                         // 13\n                                                                                                           // 14\nvar isMeteorPackage = true;                                                                                // 15\n                                                                                                           // 16\n// setup LocalStore if not available                                                                       // 17\nif(typeof LocalStore === 'undefined') {                                                                    // 18\n    isMeteorPackage = false;                                                                               // 19\n    LocalStore = {                                                                                         // 20\n        get: function(){},                                                                                 // 21\n        set: function(){}                                                                                  // 22\n    };                                                                                                     // 23\n}                                                                                                          // 24\n                                                                                                           // 25\n// stup Tracker if not available                                                                           // 26\nif(typeof Tracker === 'undefined')                                                                         // 27\n    Tracker = {                                                                                            // 28\n        Dependency: function(){                                                                            // 29\n            return {                                                                                       // 30\n                depend: function(){},                                                                      // 31\n                changed: function(){}                                                                      // 32\n            }                                                                                              // 33\n        }                                                                                                  // 34\n    };                                                                                                     // 35\n                                                                                                           // 36\nvar dependency = new Tracker.Dependency;                                                                   // 37\n                                                                                                           // 38\n/**                                                                                                        // 39\nCheck for supported currencies                                                                             // 40\n                                                                                                           // 41\n@method supportedCurrencies                                                                                // 42\n@param {String} unit                                                                                       // 43\n@return {String}                                                                                           // 44\n*/                                                                                                         // 45\nvar supportedCurrencies = function(unit){                                                                  // 46\n    return (unit === 'usd' ||                                                                              // 47\n           unit === 'eur' ||                                                                               // 48\n           unit === 'cad' ||                                                                               // 49\n           unit === 'gbp' ||                                                                               // 50\n           unit === 'jpy' ||                                                                               // 51\n           unit === 'btc');                                                                                // 52\n};                                                                                                         // 53\n                                                                                                           // 54\n/**                                                                                                        // 55\nGets the ether unit if not set from localstorage                                                           // 56\n                                                                                                           // 57\n@method getUnit                                                                                            // 58\n@param {String} unit                                                                                       // 59\n@return {String}                                                                                           // 60\n*/                                                                                                         // 61\nvar getUnit = function(unit){                                                                              // 62\n    if(!_.isString(unit)) {                                                                                // 63\n        unit = LocalStore.get('dapp_etherUnit');                                                           // 64\n                                                                                                           // 65\n        if(!unit) {                                                                                        // 66\n            unit = 'ether';                                                                                // 67\n            LocalStore.set('dapp_etherUnit', unit);                                                        // 68\n        }                                                                                                  // 69\n    }                                                                                                      // 70\n                                                                                                           // 71\n    return unit;                                                                                           // 72\n};                                                                                                         // 73\n                                                                                                           // 74\n                                                                                                           // 75\n                                                                                                           // 76\n/**                                                                                                        // 77\nHelper functions for ethereum dapps                                                                        // 78\n                                                                                                           // 79\n@class EthTools                                                                                            // 80\n@constructor                                                                                               // 81\n*/                                                                                                         // 82\n                                                                                                           // 83\nEthTools = {};                                                                                             // 84\n                                                                                                           // 85\nif(isMeteorPackage) {                                                                                      // 86\n                                                                                                           // 87\n    /**                                                                                                    // 88\n    Sets the default unit used by all EthTools functions, if no unit is provided.                          // 89\n                                                                                                           // 90\n        EthTools.setUnit('ether')                                                                          // 91\n                                                                                                           // 92\n    @method setUnit                                                                                        // 93\n    @param {String} unit the unit like 'ether', or 'eur'                                                   // 94\n    @param {Boolean}                                                                                       // 95\n    **/                                                                                                    // 96\n    EthTools.setUnit = function(unit){                                                                     // 97\n        if(supportedCurrencies(unit)) {                                                                    // 98\n            LocalStore.set('dapp_etherUnit', unit);                                                        // 99\n            return true;                                                                                   // 100\n        } else {                                                                                           // 101\n            try {                                                                                          // 102\n                web3.toWei(1, unit);                                                                       // 103\n                LocalStore.set('dapp_etherUnit', unit);                                                    // 104\n                return true;                                                                               // 105\n            } catch(e) {                                                                                   // 106\n                return false;                                                                              // 107\n            }                                                                                              // 108\n        }                                                                                                  // 109\n    };                                                                                                     // 110\n                                                                                                           // 111\n    /**                                                                                                    // 112\n    Get the default unit used by all EthTools functions, if no unit is provided.                           // 113\n                                                                                                           // 114\n        EthTools.getUnit()                                                                                 // 115\n                                                                                                           // 116\n    @method getUnit                                                                                        // 117\n    @return {String} unit the unit like 'ether', or 'eur'                                                  // 118\n    **/                                                                                                    // 119\n    EthTools.getUnit = function(){                                                                         // 120\n        return LocalStore.get('dapp_etherUnit');                                                           // 121\n    };                                                                                                     // 122\n}                                                                                                          // 123\n                                                                                                           // 124\n/**                                                                                                        // 125\nSets the locale to display numbers in different formats.                                                   // 126\n                                                                                                           // 127\n    EthTools.setLocale('de')                                                                               // 128\n                                                                                                           // 129\n@method language                                                                                           // 130\n@param {String} lang the locale like \"de\" or \"de-DE\"                                                       // 131\n**/                                                                                                        // 132\nEthTools.setLocale = function(lang){                                                                       // 133\n    var lang = lang.substr(0,2);                                                                           // 134\n    numeral.language(lang);                                                                                // 135\n    dependency.changed();                                                                                  // 136\n                                                                                                           // 137\n    return lang;                                                                                           // 138\n};                                                                                                         // 139\n                                                                                                           // 140\n/**                                                                                                        // 141\nFormats a given number                                                                                     // 142\n                                                                                                           // 143\n    EthTools.formatNumber(10000, \"0.0[000]\")                                                               // 144\n                                                                                                           // 145\n@method formatNumber                                                                                       // 146\n@param {Number|String|BigNumber} number the number to format                                               // 147\n@param {String} format           the format string e.g. \"0.0[000]\" see http://numeraljs.com for more.      // 148\n@return {String} The formated time                                                                         // 149\n**/                                                                                                        // 150\nEthTools.formatNumber = function(number, format){                                                          // 151\n    dependency.depend();                                                                                   // 152\n                                                                                                           // 153\n    if(!_.isFinite(number) && !(number instanceof BigNumber))                                              // 154\n        number = 0;                                                                                        // 155\n                                                                                                           // 156\n    if(format instanceof Spacebars.kw)                                                                     // 157\n        format = null;                                                                                     // 158\n                                                                                                           // 159\n    if(number instanceof BigNumber || _.isObject(number))                                                  // 160\n        number = number.toString(10);                                                                      // 161\n                                                                                                           // 162\n    format = format || '0,0.[00000000]';                                                                   // 163\n                                                                                                           // 164\n    if(!_.isFinite(number))                                                                                // 165\n        number = numeral().unformat(number);                                                               // 166\n                                                                                                           // 167\n    if(_.isFinite(number))                                                                                 // 168\n        return numeral(number).format(format);                                                             // 169\n};                                                                                                         // 170\n                                                                                                           // 171\n/**                                                                                                        // 172\nFormats a number of wei to a balance.                                                                      // 173\n                                                                                                           // 174\n    EthTools.formatBalance(myNumber, \"0,0.0[0000] unit\")                                                   // 175\n                                                                                                           // 176\n@method (formatBalance)                                                                                    // 177\n@param {String} number                                                                                     // 178\n@param {String} format       the format string                                                             // 179\n@return {String} The formatted number                                                                      // 180\n**/                                                                                                        // 181\nEthTools.formatBalance = function(number, format, unit){                                                   // 182\n    dependency.depend();                                                                                   // 183\n                                                                                                           // 184\n    if(!_.isFinite(number) && !(number instanceof BigNumber))                                              // 185\n        number = 0;                                                                                        // 186\n                                                                                                           // 187\n    format = format || '0,0.[00000000]';                                                                   // 188\n                                                                                                           // 189\n    unit = getUnit(unit);                                                                                  // 190\n                                                                                                           // 191\n    if(typeof EthTools.ticker !== 'undefined' && supportedCurrencies(unit)) {                              // 192\n        var ticker = EthTools.ticker.findOne(unit, {fields: {price: 1}});                                  // 193\n                                                                                                           // 194\n        // convert first to ether                                                                          // 195\n        number = web3.fromWei(number, 'ether');                                                            // 196\n                                                                                                           // 197\n        // then times the currency                                                                         // 198\n        if(ticker) {                                                                                       // 199\n            number = (number instanceof BigNumber || _.isObject(number))                                   // 200\n                ? number.times(ticker.price)                                                               // 201\n                : new BigNumber(String(number), 10).times(ticker.price);                                   // 202\n                                                                                                           // 203\n        } else {                                                                                           // 204\n            number = '0';                                                                                  // 205\n        }                                                                                                  // 206\n                                                                                                           // 207\n    } else {                                                                                               // 208\n        number = web3.fromWei(number, unit.toLowerCase());                                                 // 209\n    }                                                                                                      // 210\n                                                                                                           // 211\n    var isUppercase = (format.indexOf('UNIT') !== -1);                                                     // 212\n                                                                                                           // 213\n    var cleanedFormat = format.replace(/ *unit */i,'').replace(/ +/,'');                                   // 214\n    var format = format.replace(cleanedFormat, '__format__');                                              // 215\n                                                                                                           // 216\n    if(format.toLowerCase().indexOf('unit') !== -1) {                                                      // 217\n        return format.replace('__format__', EthTools.formatNumber(number, cleanedFormat)).replace(/unit/i, (isUppercase ? unit.toUpperCase() : unit));\n    } else                                                                                                 // 219\n        return EthTools.formatNumber(number, cleanedFormat);                                               // 220\n};                                                                                                         // 221\n                                                                                                           // 222\n                                                                                                           // 223\n/**                                                                                                        // 224\nFormats any of the supported currency to ethereum wei.                                                     // 225\n                                                                                                           // 226\n    EthTools.toWei(myNumber, unit)                                                                         // 227\n                                                                                                           // 228\n@method (toWei)                                                                                            // 229\n@param {String} number                                                                                     // 230\n@return {String} unit                                                                                      // 231\n**/                                                                                                        // 232\nEthTools.toWei = function(number, unit){                                                                   // 233\n                                                                                                           // 234\n    if(!_.isFinite(number) && !(number instanceof BigNumber))                                              // 235\n        return number;                                                                                     // 236\n                                                                                                           // 237\n    unit = getUnit(unit);                                                                                  // 238\n                                                                                                           // 239\n    if(typeof EthTools.ticker !== 'undefined' && supportedCurrencies(unit)) {                              // 240\n        var ticker = EthTools.ticker.findOne(unit, {fields: {price: 1}});                                  // 241\n                                                                                                           // 242\n        // convert first to ether                                                                          // 243\n        number = web3.toWei(number, 'ether');                                                              // 244\n                                                                                                           // 245\n        // then times the currency                                                                         // 246\n        if(ticker) {                                                                                       // 247\n            number = (number instanceof BigNumber || _.isObject(number))                                   // 248\n                ? number.dividedBy(ticker.price)                                                           // 249\n                : new BigNumber(String(number), 10).dividedBy(ticker.price);                               // 250\n                                                                                                           // 251\n            // make sure the number is flat                                                                // 252\n            number = number.round(0).toString(10);                                                         // 253\n        } else {                                                                                           // 254\n            number = '0';                                                                                  // 255\n        }                                                                                                  // 256\n                                                                                                           // 257\n    } else {                                                                                               // 258\n        number = web3.toWei(number, unit.toLowerCase());                                                   // 259\n    }                                                                                                      // 260\n                                                                                                           // 261\n    return number;                                                                                         // 262\n};                                                                                                         // 263\n                                                                                                           // 264\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ethereum_tools/ticker.js                                                                       //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n// Price ticker                                                                                            // 1\nEthTools.ticker = new Mongo.Collection('ethereum_price_ticker', {connection: null});                       // 2\nif(Meteor.isClient)                                                                                        // 3\n    new PersistentMinimongo(EthTools.ticker);                                                              // 4\n                                                                                                           // 5\nvar updatePrice = function(e, res){                                                                        // 6\n                                                                                                           // 7\n    if(!e && res && res.statusCode === 200) {                                                              // 8\n        var content = JSON.parse(res.content);                                                             // 9\n                                                                                                           // 10\n        if(content && content.Response === 'Success' && content.Data){                                     // 11\n            _.each(content.Data, function(item){                                                           // 12\n                var name = item.Symbol.toLowerCase();                                                      // 13\n                                                                                                           // 14\n                // make sure its a number and nothing else!                                                // 15\n                if(_.isFinite(item.Price)) {                                                               // 16\n                    EthTools.ticker.upsert(name, {$set: {                                                  // 17\n                        price: String(item.Price),                                                         // 18\n                        timestamp: item.LastUpdateTS                                                       // 19\n                    }});                                                                                   // 20\n                }                                                                                          // 21\n                                                                                                           // 22\n            });                                                                                            // 23\n        }                                                                                                  // 24\n    } else {                                                                                               // 25\n        console.warn('Can not connect to https://www.cryptocompare.com/api to get price ticker data, please check your internet connection.');\n    }                                                                                                      // 27\n};                                                                                                         // 28\n                                                                                                           // 29\n// update right away                                                                                       // 30\nHTTP.get('https://www.cryptocompare.com/api/data/price?fsym=ETH&tsyms=BTC,USD,EUR', updatePrice);          // 31\n                                                                                                           // 32\n                                                                                                           // 33\n// update prices                                                                                           // 34\nMeteor.setInterval(function(){                                                                             // 35\n    HTTP.get(' https://www.cryptocompare.com/api/data/price?fsym=ETH&tsyms=BTC,USD,EUR', updatePrice);    \n}, 1000 * 30);                                                                                             // 37\n                                                                                                           // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ethereum:tools'] = {\n  EthTools: EthTools\n};\n\n})();\n","servePath":"/packages/ethereum_tools.js","sourceMap":{"version":3,"sources":["/packages/ethereum_tools/ethtools.js","/packages/ethereum_tools/ticker.js"],"names":[],"mappingsiH;;;;;;;;;;;;;;;;;;ACvQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gH","file":"/packages/ethereum_tools.js","sourcesContent":["/**\nTemplate Controllers\n\n@module Packages\n*/\n\n\n/**\nHelper functions for ethereum dapps\n\n@class [packages] ethereum:tools\n@constructor\n*/\n\nvar isMeteorPackage = true;\n\n// setup LocalStore if not available\nif(typeof LocalStore === 'undefined') {\n    isMeteorPackage = false;\n    LocalStore = {\n        get: function(){},\n        set: function(){}\n    };\n}\n\n// stup Tracker if not available\nif(typeof Tracker === 'undefined')\n    Tracker = {\n        Dependency: function(){\n            return {\n                depend: function(){},\n                changed: function(){}\n            }\n        }\n    };\n\nvar dependency = new Tracker.Dependency;\n\n/**\nCheck for supported currencies\n\n@method supportedCurrencies\n@param {String} unit\n@return {String}\n*/\nvar supportedCurrencies = function(unit){\n    return (unit === 'usd' ||\n           unit === 'eur' ||\n           unit === 'cad' ||\n           unit === 'gbp' ||\n           unit === 'jpy' ||\n           unit === 'btc');\n};\n\n/**\nGets the ether unit if not set from localstorage\n\n@method getUnit\n@param {String} unit\n@return {String}\n*/\nvar getUnit = function(unit){\n    if(!_.isString(unit)) {\n        unit = LocalStore.get('dapp_etherUnit');\n\n        if(!unit) {\n            unit = 'ether';\n            LocalStore.set('dapp_etherUnit', unit);        \n        }\n    }\n\n    return unit;\n};\n\n\n\n/**\nHelper functions for ethereum dapps\n\n@class EthTools\n@constructor\n*/\n\nEthTools = {};\n\nif(isMeteorPackage) {\n\n    /**\n    Sets the default unit used by all EthTools functions, if no unit is provided.\n\n        EthTools.setUnit('ether')\n\n    @method setUnit\n    @param {String} unit the unit like 'ether', or 'eur'\n    @param {Boolean}\n    **/\n    EthTools.setUnit = function(unit){\n        if(supportedCurrencies(unit)) {\n            LocalStore.set('dapp_etherUnit', unit);\n            return true;\n        } else {\n            try {\n                web3.toWei(1, unit);\n                LocalStore.set('dapp_etherUnit', unit);\n                return true;\n            } catch(e) {\n                return false;\n            }\n        }\n    };\n\n    /**\n    Get the default unit used by all EthTools functions, if no unit is provided.\n\n        EthTools.getUnit()\n\n    @method getUnit\n    @return {String} unit the unit like 'ether', or 'eur'\n    **/\n    EthTools.getUnit = function(){\n        return LocalStore.get('dapp_etherUnit');\n    };\n}\n\n/**\nSets the locale to display numbers in different formats.\n\n    EthTools.setLocale('de')\n\n@method language\n@param {String} lang the locale like \"de\" or \"de-DE\"\n**/\nEthTools.setLocale = function(lang){\n    var lang = lang.substr(0,2);\n    numeral.language(lang);\n    dependency.changed();\n\n    return lang;\n};\n\n/**\nFormats a given number\n\n    EthTools.formatNumber(10000, \"0.0[000]\")\n\n@method formatNumber\n@param {Number|String|BigNumber} number the number to format\n@param {String} format           the format string e.g. \"0.0[000]\" see http://numeraljs.com for more.\n@return {String} The formated time\n**/\nEthTools.formatNumber = function(number, format){\n    dependency.depend();\n\n    if(!_.isFinite(number) && !(number instanceof BigNumber))\n        number = 0;\n\n    if(format instanceof Spacebars.kw)\n        format = null;\n\n    if(number instanceof BigNumber || _.isObject(number))\n        number = number.toString(10);\n\n    format = format || '0,0.[00000000]';\n\n    if(!_.isFinite(number))\n        number = numeral().unformat(number);\n\n    if(_.isFinite(number))\n        return numeral(number).format(format);\n};\n\n/**\nFormats a number of wei to a balance.\n\n    EthTools.formatBalance(myNumber, \"0,0.0[0000] unit\")\n\n@method (formatBalance)\n@param {String} number\n@param {String} format       the format string\n@return {String} The formatted number\n**/\nEthTools.formatBalance = function(number, format, unit){\n    dependency.depend();\n\n    if(!_.isFinite(number) && !(number instanceof BigNumber))\n        number = 0;\n\n    format = format || '0,0.[00000000]';\n    \n    unit = getUnit(unit);\n\n    if(typeof EthTools.ticker !== 'undefined' && supportedCurrencies(unit)) {\n        var ticker = EthTools.ticker.findOne(unit, {fields: {price: 1}});\n\n        // convert first to ether\n        number = web3.fromWei(number, 'ether');\n\n        // then times the currency\n        if(ticker) {\n            number = (number instanceof BigNumber || _.isObject(number))\n                ? number.times(ticker.price)\n                : new BigNumber(String(number), 10).times(ticker.price);\n\n        } else {\n            number = '0';\n        }\n\n    } else {\n        number = web3.fromWei(number, unit.toLowerCase());\n    }\n\n    var isUppercase = (format.indexOf('UNIT') !== -1);\n\n    var cleanedFormat = format.replace(/ *unit */i,'').replace(/ +/,'');\n    var format = format.replace(cleanedFormat, '__format__');\n\n    if(format.toLowerCase().indexOf('unit') !== -1) {\n        return format.replace('__format__', EthTools.formatNumber(number, cleanedFormat)).replace(/unit/i, (isUppercase ? unit.toUpperCase() : unit));\n    } else\n        return EthTools.formatNumber(number, cleanedFormat);\n};\n\n\n/**\nFormats any of the supported currency to ethereum wei.\n\n    EthTools.toWei(myNumber, unit)\n\n@method (toWei)\n@param {String} number\n@return {String} unit\n**/\nEthTools.toWei = function(number, unit){\n\n    if(!_.isFinite(number) && !(number instanceof BigNumber))\n        return number;\n\n    unit = getUnit(unit);\n\n    if(typeof EthTools.ticker !== 'undefined' && supportedCurrencies(unit)) {\n        var ticker = EthTools.ticker.findOne(unit, {fields: {price: 1}});\n\n        // convert first to ether\n        number = web3.toWei(number, 'ether');\n\n        // then times the currency\n        if(ticker) {\n            number = (number instanceof BigNumber || _.isObject(number))\n                ? number.dividedBy(ticker.price)\n                : new BigNumber(String(number), 10).dividedBy(ticker.price);\n\n            // make sure the number is flat\n            number = number.round(0).toString(10);\n        } else {\n            number = '0';\n        }\n\n    } else {\n        number = web3.toWei(number, unit.toLowerCase());\n    }\n\n    return number;\n};\n","// Price ticker\nEthTools.ticker = new Mongo.Collection('ethereum_price_ticker', {connection: null});\nif(Meteor.isClient)\n    new PersistentMinimongo(EthTools.ticker);\n\nvar updatePrice = function(e, res){\n\n    if(!e && res && res.statusCode === 200) {\n        var content = JSON.parse(res.content);\n\n        if(content && content.Response === 'Success' && content.Data){\n            _.each(content.Data, function(item){\n                var name = item.Symbol.toLowerCase();\n\n                // make sure its a number and nothing else!\n                if(_.isFinite(item.Price)) {\n                    EthTools.ticker.upsert(name, {$set: {\n                        price: String(item.Price),\n                        timestamp: item.LastUpdateTS\n                    }});\n                }\n\n            });\n        }\n    } else {\n        console.warn('Can not connect to https://www.cryptocompare.com/api to get price ticker data, please check your internet connection.');\n    }\n};\n\n// update right away\nHTTP.get('https://www.cryptocompare.com/api/data/price?fsym=ETH&tsyms=BTC,USD,EUR', updatePrice);\n    \n\n// update prices\nMeteor.setInterval(function(){\n    HTTP.get(' https://www.cryptocompare.com/api/data/price?fsym=ETH&tsyms=BTC,USD,EUR', updatePrice);    \n}, 1000 * 30);\n"]}}]