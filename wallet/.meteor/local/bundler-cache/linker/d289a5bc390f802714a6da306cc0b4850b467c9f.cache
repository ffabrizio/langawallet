[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Mongo = Package.mongo.Mongo;\nvar Web3 = Package['ethereum:web3'].Web3;\nvar BigNumber = Package['ethereum:web3'].BigNumber;\n\n/* Package-scope variables */\nvar EthBlocks;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/ethereum_blocks/blocks.js                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n/**                                                                                                             // 1\n                                                                                                                // 2\n@module Ethereum:blocks                                                                                         // 3\n*/                                                                                                              // 4\n                                                                                                                // 5\n                                                                                                                // 6\n                                                                                                                // 7\n/**                                                                                                             // 8\nThe EthBlocks collection, with some ethereum additions.                                                         // 9\n                                                                                                                // 10\n@class EthBlocks                                                                                                // 11\n@constructor                                                                                                    // 12\n*/                                                                                                              // 13\n                                                                                                                // 14\n                                                                                                                // 15\n                                                                                                                // 16\nEthBlocks = new Mongo.Collection('ethereum_blocks', {connection: null});                                        // 17\n                                                                                                                // 18\n// if(typeof PersistentMinimongo !== 'undefined')                                                               // 19\n//     new PersistentMinimongo(EthBlocks);                                                                      // 20\n                                                                                                                // 21\n                                                                                                                // 22\n/**                                                                                                             // 23\nGives you reactively the lates block.                                                                           // 24\n                                                                                                                // 25\n@property latest                                                                                                // 26\n*/                                                                                                              // 27\nObject.defineProperty(EthBlocks, 'latest', {                                                                    // 28\n    get: function () {                                                                                          // 29\n        return EthBlocks.findOne({}, {sort: {number: -1}}) || {};                                               // 30\n    },                                                                                                          // 31\n    set: function (values) {                                                                                    // 32\n        var block = EthBlocks.findOne({}, {sort: {number: -1}}) || {};                                          // 33\n        values = values || {};                                                                                  // 34\n        EthBlocks.update(block._id, {$set: values});                                                            // 35\n    }                                                                                                           // 36\n});                                                                                                             // 37\n                                                                                                                // 38\n/**                                                                                                             // 39\nStores all the callbacks                                                                                        // 40\n                                                                                                                // 41\n@property _forkCallbacks                                                                                        // 42\n*/                                                                                                              // 43\nEthBlocks._forkCallbacks = [];                                                                                  // 44\n                                                                                                                // 45\n                                                                                                                // 46\n/**                                                                                                             // 47\nStart looking for new blocks                                                                                    // 48\n                                                                                                                // 49\n@method init                                                                                                    // 50\n*/                                                                                                              // 51\nEthBlocks.init = function(){                                                                                    // 52\n                                                                                                                // 53\n    if(typeof web3 === 'undefined') {                                                                           // 54\n        console.warn('EthBlocks couldn\\'t find web3, please make sure to instantiate a web3 object before calling EthBlocks.init()');\n        return;                                                                                                 // 56\n    }                                                                                                           // 57\n                                                                                                                // 58\n    Tracker.nonreactive(function() {                                                                            // 59\n        observeLatestBlocks();                                                                                  // 60\n    });                                                                                                         // 61\n};                                                                                                              // 62\n                                                                                                                // 63\n/**                                                                                                             // 64\nAdd callbacks to detect forks                                                                                   // 65\n                                                                                                                // 66\n@method detectFork                                                                                              // 67\n*/                                                                                                              // 68\nEthBlocks.detectFork = function(cb){                                                                            // 69\n    EthBlocks._forkCallbacks.push(cb);                                                                          // 70\n};                                                                                                              // 71\n                                                                                                                // 72\n/**                                                                                                             // 73\nClear all blocks                                                                                                // 74\n                                                                                                                // 75\n@method clear                                                                                                   // 76\n*/                                                                                                              // 77\nEthBlocks.clear = function(){                                                                                   // 78\n    _.each(EthBlocks.find({}).fetch(), function(block){                                                         // 79\n        EthBlocks.remove(block._id);                                                                            // 80\n    });                                                                                                         // 81\n};                                                                                                              // 82\n                                                                                                                // 83\n                                                                                                                // 84\n/**                                                                                                             // 85\nThe global block filter instance.                                                                               // 86\n                                                                                                                // 87\n@property filter                                                                                                // 88\n*/                                                                                                              // 89\nvar filter = null;                                                                                              // 90\n                                                                                                                // 91\n/**                                                                                                             // 92\nUpdate the block info and adds additional properties.                                                           // 93\n                                                                                                                // 94\n@method updateBlock                                                                                             // 95\n@param {Object} block                                                                                           // 96\n*/                                                                                                              // 97\nfunction updateBlock(block){                                                                                    // 98\n                                                                                                                // 99\n    // reset the chain, if the current blocknumber is 100 blocks less                                           // 100\n    if(block.number + 10 < EthBlocks.latest.number)                                                             // 101\n        EthBlocks.clear();                                                                                      // 102\n                                                                                                                // 103\n    block.difficulty = block.difficulty.toString(10);                                                           // 104\n    block.totalDifficulty = block.totalDifficulty.toString(10);                                                 // 105\n                                                                                                                // 106\n    web3.eth.getGasPrice(function(e, gasPrice){                                                                 // 107\n        if(!e) {                                                                                                // 108\n            block.gasPrice = gasPrice.toString(10);                                                             // 109\n            EthBlocks.upsert('bl_'+ block.hash.replace('0x','').substr(0,20), block);                           // 110\n        }                                                                                                       // 111\n    });                                                                                                         // 112\n};                                                                                                              // 113\n                                                                                                                // 114\n/**                                                                                                             // 115\nObserve the latest blocks and store them in the Blocks collection.                                              // 116\nAdditionally cap the collection to 50 blocks                                                                    // 117\n                                                                                                                // 118\n@method observeLatestBlocks                                                                                     // 119\n*/                                                                                                              // 120\nfunction observeLatestBlocks(){                                                                                 // 121\n                                                                                                                // 122\n    // get the latest block immediately                                                                         // 123\n    web3.eth.getBlock('latest', function(e, block){                                                             // 124\n        if(!e) {                                                                                                // 125\n            updateBlock(block);                                                                                 // 126\n        }                                                                                                       // 127\n    });                                                                                                         // 128\n                                                                                                                // 129\n    // GET the latest blockchain information                                                                    // 130\n    filter = web3.eth.filter('latest').watch(checkLatestBlocks);                                                // 131\n                                                                                                                // 132\n};                                                                                                              // 133\n                                                                                                                // 134\n/**                                                                                                             // 135\nThe observeLatestBlocks callback used in the block filter.                                                      // 136\n                                                                                                                // 137\n@method checkLatestBlocks                                                                                       // 138\n*/                                                                                                              // 139\nvar checkLatestBlocks = function(e, hash){                                                                      // 140\n    if(!e) {                                                                                                    // 141\n        web3.eth.getBlock(hash, function(e, block){                                                             // 142\n            if(!e) {                                                                                            // 143\n                var oldBlock = EthBlocks.latest;                                                                // 144\n                                                                                                                // 145\n                // console.log('BLOCK', block.number);                                                          // 146\n                                                                                                                // 147\n                // if(!oldBlock)                                                                                // 148\n                //     console.log('No previous block found: '+ --block.number);                                // 149\n                                                                                                                // 150\n                // CHECK for FORK                                                                               // 151\n                if(oldBlock && oldBlock.hash !== block.parentHash) {                                            // 152\n                    // console.log('FORK detected from Block #'+ oldBlock.number + ' -> #'+ block.number +'!');\n                                                                                                                // 154\n                    _.each(EthBlocks._forkCallbacks, function(cb){                                              // 155\n                        if(_.isFunction(cb))                                                                    // 156\n                            cb(oldBlock, block);                                                                // 157\n                    });                                                                                         // 158\n                }                                                                                               // 159\n                                                                                                                // 160\n                updateBlock(block);                                                                             // 161\n                                                                                                                // 162\n                // drop the 50th block                                                                          // 163\n                var blocks = EthBlocks.find({}, {sort: {number: -1}}).fetch();                                  // 164\n                if(blocks.length >= 5) {                                                                        // 165\n                    var count = 0;                                                                              // 166\n                    _.each(blocks, function(bl){                                                                // 167\n                        count++;                                                                                // 168\n                        if(count >= 5)                                                                          // 169\n                            EthBlocks.remove({_id: bl._id});                                                    // 170\n                    });                                                                                         // 171\n                }                                                                                               // 172\n            }                                                                                                   // 173\n        });                                                                                                     // 174\n                                                                                                                // 175\n    // try to re-create the filter on error                                                                     // 176\n    // TODO: want to do this?                                                                                   // 177\n    } else {                                                                                                    // 178\n        filter.stopWatching();                                                                                  // 179\n        filter = web3.eth.filter('latest').watch(checkLatestBlocks);                                            // 180\n    }                                                                                                           // 181\n};                                                                                                              // 182\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ethereum:blocks'] = {\n  EthBlocks: EthBlocks\n};\n\n})();\n","servePath":"/packages/ethereum_blocks.js","sourceMap":{"version":3,"sources":["/packages/ethereum_blocks/blocks.js"],"names":[],"mappingssH","file":"/packages/ethereum_blocks.js","sourcesContent":["/**\n\n@module Ethereum:blocks\n*/\n\n\n\n/**\nThe EthBlocks collection, with some ethereum additions.\n\n@class EthBlocks\n@constructor\n*/\n\n\n\nEthBlocks = new Mongo.Collection('ethereum_blocks', {connection: null});\n\n// if(typeof PersistentMinimongo !== 'undefined')\n//     new PersistentMinimongo(EthBlocks);\n\n\n/**\nGives you reactively the lates block.\n\n@property latest\n*/\nObject.defineProperty(EthBlocks, 'latest', {\n    get: function () {\n        return EthBlocks.findOne({}, {sort: {number: -1}}) || {};\n    },\n    set: function (values) {\n        var block = EthBlocks.findOne({}, {sort: {number: -1}}) || {};\n        values = values || {};\n        EthBlocks.update(block._id, {$set: values});\n    }\n});\n\n/**\nStores all the callbacks\n\n@property _forkCallbacks\n*/\nEthBlocks._forkCallbacks = [];\n\n\n/**\nStart looking for new blocks\n\n@method init\n*/\nEthBlocks.init = function(){\n\n    if(typeof web3 === 'undefined') {\n        console.warn('EthBlocks couldn\\'t find web3, please make sure to instantiate a web3 object before calling EthBlocks.init()');\n        return;\n    }\n\n    Tracker.nonreactive(function() {\n        observeLatestBlocks();\n    });\n};\n\n/**\nAdd callbacks to detect forks\n\n@method detectFork\n*/\nEthBlocks.detectFork = function(cb){\n    EthBlocks._forkCallbacks.push(cb);\n};\n\n/**\nClear all blocks\n\n@method clear\n*/\nEthBlocks.clear = function(){\n    _.each(EthBlocks.find({}).fetch(), function(block){\n        EthBlocks.remove(block._id);\n    });\n};\n\n\n/**\nThe global block filter instance.\n\n@property filter\n*/\nvar filter = null;\n\n/**\nUpdate the block info and adds additional properties.\n\n@method updateBlock\n@param {Object} block\n*/\nfunction updateBlock(block){\n\n    // reset the chain, if the current blocknumber is 100 blocks less \n    if(block.number + 10 < EthBlocks.latest.number)\n        EthBlocks.clear();\n\n    block.difficulty = block.difficulty.toString(10);\n    block.totalDifficulty = block.totalDifficulty.toString(10);\n\n    web3.eth.getGasPrice(function(e, gasPrice){\n        if(!e) {\n            block.gasPrice = gasPrice.toString(10);\n            EthBlocks.upsert('bl_'+ block.hash.replace('0x','').substr(0,20), block);\n        }\n    });\n};\n\n/**\nObserve the latest blocks and store them in the Blocks collection.\nAdditionally cap the collection to 50 blocks\n\n@method observeLatestBlocks\n*/\nfunction observeLatestBlocks(){\n\n    // get the latest block immediately\n    web3.eth.getBlock('latest', function(e, block){\n        if(!e) {\n            updateBlock(block);\n        }\n    });\n\n    // GET the latest blockchain information\n    filter = web3.eth.filter('latest').watch(checkLatestBlocks);\n\n};\n\n/**\nThe observeLatestBlocks callback used in the block filter.\n\n@method checkLatestBlocks\n*/\nvar checkLatestBlocks = function(e, hash){\n    if(!e) {\n        web3.eth.getBlock(hash, function(e, block){\n            if(!e) {\n                var oldBlock = EthBlocks.latest;\n\n                // console.log('BLOCK', block.number);\n\n                // if(!oldBlock)\n                //     console.log('No previous block found: '+ --block.number);\n\n                // CHECK for FORK\n                if(oldBlock && oldBlock.hash !== block.parentHash) {\n                    // console.log('FORK detected from Block #'+ oldBlock.number + ' -> #'+ block.number +'!');\n\n                    _.each(EthBlocks._forkCallbacks, function(cb){\n                        if(_.isFunction(cb))\n                            cb(oldBlock, block);\n                    });\n                }\n\n                updateBlock(block);\n\n                // drop the 50th block\n                var blocks = EthBlocks.find({}, {sort: {number: -1}}).fetch();\n                if(blocks.length >= 5) {\n                    var count = 0;\n                    _.each(blocks, function(bl){\n                        count++;\n                        if(count >= 5)\n                            EthBlocks.remove({_id: bl._id});\n                    });\n                }\n            }\n        });\n\n    // try to re-create the filter on error\n    // TODO: want to do this?\n    } else {\n        filter.stopWatching();\n        filter = web3.eth.filter('latest').watch(checkLatestBlocks);\n    }\n};"]}}]