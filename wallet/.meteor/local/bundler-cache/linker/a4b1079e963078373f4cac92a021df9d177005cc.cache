[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Mongo = Package.mongo.Mongo;\nvar PersistentMinimongo = Package['frozeman:persistent-minimongo'].PersistentMinimongo;\nvar Web3 = Package['ethereum:web3'].Web3;\nvar BigNumber = Package['ethereum:web3'].BigNumber;\n\n/* Package-scope variables */\nvar EthAccounts;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ethereum_accounts/accounts.js                                                                  //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n/**                                                                                                        // 1\n                                                                                                           // 2\n@module Ethereum:accounts                                                                                  // 3\n*/                                                                                                         // 4\n                                                                                                           // 5\n                                                                                                           // 6\n                                                                                                           // 7\n/**                                                                                                        // 8\nThe accounts collection, with some ethereum additions.                                                     // 9\n                                                                                                           // 10\n@class EthAccounts                                                                                         // 11\n@constructor                                                                                               // 12\n*/                                                                                                         // 13\nvar collection = new Mongo.Collection('ethereum_accounts', {connection: null});                            // 14\nEthAccounts = _.clone(collection);                                                                         // 15\nEthAccounts._collection = collection;                                                                      // 16\n                                                                                                           // 17\n                                                                                                           // 18\nif(typeof PersistentMinimongo !== 'undefined')                                                             // 19\n    new PersistentMinimongo(EthAccounts._collection);                                                      // 20\n                                                                                                           // 21\n                                                                                                           // 22\nEthAccounts._watching = false;                                                                             // 23\n                                                                                                           // 24\n/**                                                                                                        // 25\nUpdates the accounts balances, by watching for new blocks and checking the balance.                        // 26\n                                                                                                           // 27\n@method _watchBalance                                                                                      // 28\n*/                                                                                                         // 29\nEthAccounts._watchBalance = function(){                                                                    // 30\n    var _this = this;                                                                                      // 31\n                                                                                                           // 32\n    this._watching = true;                                                                                 // 33\n                                                                                                           // 34\n    // UPDATE SIMPLE ACCOUNTS balance on each new block                                                    // 35\n    web3.eth.filter('latest').watch(function(e, res){                                                      // 36\n        if(!e) {                                                                                           // 37\n            _this._updateBalance();                                                                        // 38\n        }                                                                                                  // 39\n    });                                                                                                    // 40\n};                                                                                                         // 41\n                                                                                                           // 42\n/**                                                                                                        // 43\nUpdates the accounts balances.                                                                             // 44\n                                                                                                           // 45\n@method _updateBalance                                                                                     // 46\n*/                                                                                                         // 47\nEthAccounts._updateBalance = function(){                                                                   // 48\n    _.each(EthAccounts.find().fetch(), function(account){                                                  // 49\n        web3.eth.getBalance(account.address, function(err, res){                                           // 50\n            if(!err) {                                                                                     // 51\n                EthAccounts.update(account._id, {$set: {                                                   // 52\n                    balance: res.toString(10)                                                              // 53\n                }});                                                                                       // 54\n            }                                                                                              // 55\n        });                                                                                                // 56\n    });                                                                                                    // 57\n}                                                                                                          // 58\n                                                                                                           // 59\n/**                                                                                                        // 60\nUpdates the accounts list,                                                                                 // 61\nif its finds a difference between the accounts in the collection and the accounts in the accounts array.   // 62\n                                                                                                           // 63\n@method _addAccounts                                                                                       // 64\n*/                                                                                                         // 65\nEthAccounts._addAccounts = function(){                                                                     // 66\n    var _this = this;                                                                                      // 67\n                                                                                                           // 68\n    // UPDATE normal accounts on start                                                                     // 69\n    web3.eth.getAccounts(function(e, accounts){                                                            // 70\n        if(!e) {                                                                                           // 71\n            var visibleAccounts = _.pluck(EthAccounts.find().fetch(), 'address');                          // 72\n                                                                                                           // 73\n                                                                                                           // 74\n            if(!_.isEmpty(accounts) &&                                                                     // 75\n                _.difference(accounts, visibleAccounts).length === 0 &&                                    // 76\n                _.difference(visibleAccounts, accounts).length === 0)                                      // 77\n                return;                                                                                    // 78\n                                                                                                           // 79\n                                                                                                           // 80\n            var localAccounts = EthAccounts.findAll().fetch();                                             // 81\n                                                                                                           // 82\n            // if the accounts are different, update the local ones                                        // 83\n            _.each(localAccounts, function(account){                                                       // 84\n                                                                                                           // 85\n                // needs to have the balance                                                               // 86\n                if(!account.balance)                                                                       // 87\n                    return;                                                                                // 88\n                                                                                                           // 89\n                // set status deactivated, if it seem to be gone                                           // 90\n                if(!_.contains(accounts, account.address)) {                                               // 91\n                    EthAccounts.updateAll(account._id, {$set: {                                            // 92\n                        deactivated: true                                                                  // 93\n                    }});                                                                                   // 94\n                } else {                                                                                   // 95\n                    EthAccounts.updateAll(account._id, {$unset: {                                          // 96\n                        deactivated: ''                                                                    // 97\n                    }});                                                                                   // 98\n                }                                                                                          // 99\n                                                                                                           // 100\n                accounts = _.without(accounts, account.address);                                           // 101\n            });                                                                                            // 102\n                                                                                                           // 103\n            // ADD missing accounts                                                                        // 104\n            var accountsCount = visibleAccounts.length + 1;                                                // 105\n            _.each(accounts, function(address){                                                            // 106\n                                                                                                           // 107\n                web3.eth.getBalance(address, function(e, balance){                                         // 108\n                    if(!e) {                                                                               // 109\n                        web3.eth.getCoinbase(function(e, coinbase){                                        // 110\n                            var doc = EthAccounts.findAll({address: address}).fetch()[0];                  // 111\n                                                                                                           // 112\n                            var insert = {                                                                 // 113\n                                    type: 'account',                                                       // 114\n                                    address: address,                                                      // 115\n                                    balance: balance.toString(10),                                         // 116\n                                    name: (address === coinbase) ? 'Etherbase' : 'Account '+ accountsCount\n                                };                                                                         // 118\n                                                                                                           // 119\n                            if(doc) {                                                                      // 120\n                                EthAccounts.updateAll({_id: doc._id}, {$set: insert});                     // 121\n                            } else {                                                                       // 122\n                                EthAccounts.insert(insert);                                                // 123\n                            }                                                                              // 124\n                                                                                                           // 125\n                            if(address !== coinbase)                                                       // 126\n                                accountsCount++;                                                           // 127\n                        });                                                                                // 128\n                    }                                                                                      // 129\n                });                                                                                        // 130\n                                                                                                           // 131\n            });                                                                                            // 132\n        }                                                                                                  // 133\n    });                                                                                                    // 134\n};                                                                                                         // 135\n                                                                                                           // 136\n                                                                                                           // 137\n                                                                                                           // 138\n/**                                                                                                        // 139\nBuilds the query with the addition of \"{deactivated: {$exists: false}}\"                                    // 140\n                                                                                                           // 141\n@method _addToQuery                                                                                        // 142\n@param {Mixed} arg                                                                                         // 143\n@return {Object} The query                                                                                 // 144\n*/                                                                                                         // 145\nEthAccounts._addToQuery = function(args){                                                                  // 146\n    var args = Array.prototype.slice.call(args);                                                           // 147\n                                                                                                           // 148\n    if(_.isObject(args[0]))                                                                                // 149\n        args[0] = _.extend(args[0], {deactivated: {$exists: false}});                                      // 150\n    else if(_.isString(args[0]))                                                                           // 151\n        args[0] = {_id: args[0], deactivated: {$exists: false}};                                           // 152\n    else                                                                                                   // 153\n        args[0] = {deactivated: {$exists: false}};                                                         // 154\n                                                                                                           // 155\n    return args;                                                                                           // 156\n};                                                                                                         // 157\n                                                                                                           // 158\n                                                                                                           // 159\n/**                                                                                                        // 160\nFind all accounts, besides the deactivated ones                                                            // 161\n                                                                                                           // 162\n@method find                                                                                               // 163\n@return {Object} cursor                                                                                    // 164\n*/                                                                                                         // 165\nEthAccounts.find = function(){                                                                             // 166\n    return this._collection.find.apply(this, this._addToQuery(arguments));                                 // 167\n};                                                                                                         // 168\n                                                                                                           // 169\n/**                                                                                                        // 170\nFind all accounts, including the deactivated ones                                                          // 171\n                                                                                                           // 172\n@method findAll                                                                                            // 173\n@return {Object} cursor                                                                                    // 174\n*/                                                                                                         // 175\nEthAccounts.findAll = EthAccounts._collection.find;                                                        // 176\n                                                                                                           // 177\n/**                                                                                                        // 178\nFind one accounts, besides the deactivated ones                                                            // 179\n                                                                                                           // 180\n@method findOne                                                                                            // 181\n@return {Object} cursor                                                                                    // 182\n*/                                                                                                         // 183\nEthAccounts.findOne = function(){                                                                          // 184\n    return this._collection.findOne.apply(this, this._addToQuery(arguments));                              // 185\n};                                                                                                         // 186\n                                                                                                           // 187\n/**                                                                                                        // 188\nUpdate accounts, besides the deactivated ones                                                              // 189\n                                                                                                           // 190\n@method update                                                                                             // 191\n@return {Object} cursor                                                                                    // 192\n*/                                                                                                         // 193\nEthAccounts.update = function(){                                                                           // 194\n    return this._collection.update.apply(this, this._addToQuery(arguments));                               // 195\n};                                                                                                         // 196\n                                                                                                           // 197\n/**                                                                                                        // 198\nUpdate accounts, including the deactivated ones                                                            // 199\n                                                                                                           // 200\n@method updateAll                                                                                          // 201\n@return {Object} cursor                                                                                    // 202\n*/                                                                                                         // 203\nEthAccounts.updateAll = EthAccounts._collection.update;                                                    // 204\n                                                                                                           // 205\n/**                                                                                                        // 206\nUpdate accounts, including the deactivated ones                                                            // 207\n                                                                                                           // 208\n@method upsert                                                                                             // 209\n@return {Object} cursor                                                                                    // 210\n*/                                                                                                         // 211\nEthAccounts.upsert = EthAccounts._collection.upsert;                                                       // 212\n                                                                                                           // 213\n/**                                                                                                        // 214\nStarts fetching and watching the accounts                                                                  // 215\n                                                                                                           // 216\n@method init                                                                                               // 217\n*/                                                                                                         // 218\nEthAccounts.init = function(){                                                                             // 219\n    var _this = this;                                                                                      // 220\n                                                                                                           // 221\n    if(typeof web3 === 'undefined') {                                                                      // 222\n        console.warn('EthAccounts couldn\\'t find web3, please make sure to instantiate a web3 object before calling EthAccounts.init()');\n        return;                                                                                            // 224\n    }                                                                                                      // 225\n                                                                                                           // 226\n    /**                                                                                                    // 227\n    Overwrite web3.reset, to also stop the interval                                                        // 228\n                                                                                                           // 229\n    @method web3.reset                                                                                     // 230\n    */                                                                                                     // 231\n    web3._reset = Web3.prototype.reset;                                                                    // 232\n    web3.reset = function(keepIsSyncing){                                                                  // 233\n        Meteor.clearInterval(_this._intervalId);                                                           // 234\n        _this._watching = false;                                                                           // 235\n        web3._reset(keepIsSyncing);                                                                        // 236\n    };                                                                                                     // 237\n                                                                                                           // 238\n    Tracker.nonreactive(function(){                                                                        // 239\n                                                                                                           // 240\n        _this._addAccounts();                                                                              // 241\n                                                                                                           // 242\n        if(!_this._watching) {                                                                             // 243\n            _this._updateBalance();                                                                        // 244\n            _this._watchBalance();                                                                         // 245\n                                                                                                           // 246\n            // check for new accounts every 2s                                                             // 247\n            Meteor.clearInterval(_this._intervalId);                                                       // 248\n            _this._intervalId = Meteor.setInterval(function(){                                             // 249\n                _this._addAccounts();                                                                      // 250\n            }, 2000);                                                                                      // 251\n        }                                                                                                  // 252\n    });                                                                                                    // 253\n};                                                                                                         // 254\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ethereum:accounts'] = {\n  EthAccounts: EthAccounts\n};\n\n})();\n","servePath":"/packages/ethereum_accounts.js","sourceMap":{"version":3,"sources":["/packages/ethereum_accounts/accounts.js"],"names":[],"mappingsiH","file":"/packages/ethereum_accounts.js","sourcesContent":["/**\n\n@module Ethereum:accounts\n*/\n\n\n\n/**\nThe accounts collection, with some ethereum additions.\n\n@class EthAccounts\n@constructor\n*/\nvar collection = new Mongo.Collection('ethereum_accounts', {connection: null});\nEthAccounts = _.clone(collection);\nEthAccounts._collection = collection;\n\n\nif(typeof PersistentMinimongo !== 'undefined')\n    new PersistentMinimongo(EthAccounts._collection);\n\n\nEthAccounts._watching = false;\n\n/**\nUpdates the accounts balances, by watching for new blocks and checking the balance.\n\n@method _watchBalance\n*/\nEthAccounts._watchBalance = function(){\n    var _this = this;\n\n    this._watching = true;\n\n    // UPDATE SIMPLE ACCOUNTS balance on each new block\n    web3.eth.filter('latest').watch(function(e, res){\n        if(!e) {\n            _this._updateBalance();\n        }\n    });\n};\n\n/**\nUpdates the accounts balances.\n\n@method _updateBalance\n*/\nEthAccounts._updateBalance = function(){\n    _.each(EthAccounts.find().fetch(), function(account){\n        web3.eth.getBalance(account.address, function(err, res){\n            if(!err) {\n                EthAccounts.update(account._id, {$set: {\n                    balance: res.toString(10)\n                }});\n            }\n        });\n    });\n}\n\n/**\nUpdates the accounts list,\nif its finds a difference between the accounts in the collection and the accounts in the accounts array.\n\n@method _addAccounts\n*/\nEthAccounts._addAccounts = function(){\n    var _this = this;\n\n    // UPDATE normal accounts on start\n    web3.eth.getAccounts(function(e, accounts){\n        if(!e) {\n            var visibleAccounts = _.pluck(EthAccounts.find().fetch(), 'address');\n\n\n            if(!_.isEmpty(accounts) &&\n                _.difference(accounts, visibleAccounts).length === 0 &&\n                _.difference(visibleAccounts, accounts).length === 0)\n                return;\n\n\n            var localAccounts = EthAccounts.findAll().fetch();\n\n            // if the accounts are different, update the local ones\n            _.each(localAccounts, function(account){\n\n                // needs to have the balance\n                if(!account.balance)\n                    return;\n\n                // set status deactivated, if it seem to be gone\n                if(!_.contains(accounts, account.address)) {\n                    EthAccounts.updateAll(account._id, {$set: {\n                        deactivated: true\n                    }});\n                } else {\n                    EthAccounts.updateAll(account._id, {$unset: {\n                        deactivated: ''\n                    }});\n                }\n\n                accounts = _.without(accounts, account.address);\n            });\n\n            // ADD missing accounts\n            var accountsCount = visibleAccounts.length + 1;\n            _.each(accounts, function(address){\n\n                web3.eth.getBalance(address, function(e, balance){\n                    if(!e) {\n                        web3.eth.getCoinbase(function(e, coinbase){\n                            var doc = EthAccounts.findAll({address: address}).fetch()[0];\n\n                            var insert = {\n                                    type: 'account',\n                                    address: address,\n                                    balance: balance.toString(10),\n                                    name: (address === coinbase) ? 'Etherbase' : 'Account '+ accountsCount\n                                };\n\n                            if(doc) {\n                                EthAccounts.updateAll({_id: doc._id}, {$set: insert});\n                            } else {\n                                EthAccounts.insert(insert);\n                            }\n\n                            if(address !== coinbase)\n                                accountsCount++;\n                        });\n                    }\n                });\n\n            });\n        }\n    });\n};\n\n\n\n/**\nBuilds the query with the addition of \"{deactivated: {$exists: false}}\"\n\n@method _addToQuery\n@param {Mixed} arg\n@return {Object} The query\n*/\nEthAccounts._addToQuery = function(args){\n    var args = Array.prototype.slice.call(args);\n\n    if(_.isObject(args[0]))\n        args[0] = _.extend(args[0], {deactivated: {$exists: false}});\n    else if(_.isString(args[0]))\n        args[0] = {_id: args[0], deactivated: {$exists: false}};\n    else\n        args[0] = {deactivated: {$exists: false}};\n\n    return args;\n};\n\n\n/**\nFind all accounts, besides the deactivated ones\n\n@method find\n@return {Object} cursor\n*/\nEthAccounts.find = function(){    \n    return this._collection.find.apply(this, this._addToQuery(arguments));\n};\n\n/**\nFind all accounts, including the deactivated ones\n\n@method findAll\n@return {Object} cursor\n*/\nEthAccounts.findAll = EthAccounts._collection.find;\n\n/**\nFind one accounts, besides the deactivated ones\n\n@method findOne\n@return {Object} cursor\n*/\nEthAccounts.findOne = function(){\n    return this._collection.findOne.apply(this, this._addToQuery(arguments));\n};\n\n/**\nUpdate accounts, besides the deactivated ones\n\n@method update\n@return {Object} cursor\n*/\nEthAccounts.update = function(){\n    return this._collection.update.apply(this, this._addToQuery(arguments));\n};\n\n/**\nUpdate accounts, including the deactivated ones\n\n@method updateAll\n@return {Object} cursor\n*/\nEthAccounts.updateAll = EthAccounts._collection.update;\n\n/**\nUpdate accounts, including the deactivated ones\n\n@method upsert\n@return {Object} cursor\n*/\nEthAccounts.upsert = EthAccounts._collection.upsert;\n\n/**\nStarts fetching and watching the accounts\n\n@method init\n*/\nEthAccounts.init = function(){\n    var _this = this;\n\n    if(typeof web3 === 'undefined') {\n        console.warn('EthAccounts couldn\\'t find web3, please make sure to instantiate a web3 object before calling EthAccounts.init()');\n        return;\n    }\n\n    /**\n    Overwrite web3.reset, to also stop the interval\n\n    @method web3.reset\n    */\n    web3._reset = Web3.prototype.reset;\n    web3.reset = function(keepIsSyncing){\n        Meteor.clearInterval(_this._intervalId);\n        _this._watching = false;\n        web3._reset(keepIsSyncing);\n    };\n\n    Tracker.nonreactive(function(){\n\n        _this._addAccounts();\n\n        if(!_this._watching) {\n            _this._updateBalance();\n            _this._watchBalance();\n\n            // check for new accounts every 2s\n            Meteor.clearInterval(_this._intervalId);\n            _this._intervalId = Meteor.setInterval(function(){\n                _this._addAccounts();\n            }, 2000);\n        }\n    });\n};"]}}]