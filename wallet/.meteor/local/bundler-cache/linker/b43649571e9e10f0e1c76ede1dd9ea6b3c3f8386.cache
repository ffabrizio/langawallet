[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar result, rem, BigNumber;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/3stack_bignumber/packages/3stack_bignumber.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n(function () {                                                                                                        // 1\n                                                                                                                      // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/3stack:bignumber/bignumber.browserify.js                                                               //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n                                                                                                                      // 10\n},{}],2:[function(require,module,exports){                                                                            // 11\n/*!                                                                                                                   // 12\n * The buffer module from node.js, for the browser.                                                                   // 13\n *                                                                                                                    // 14\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                              // 15\n * @license  MIT                                                                                                      // 16\n */                                                                                                                   // 17\n                                                                                                                      // 18\nvar base64 = require('base64-js')                                                                                     // 19\nvar ieee754 = require('ieee754')                                                                                      // 20\nvar isArray = require('is-array')                                                                                     // 21\n                                                                                                                      // 22\nexports.Buffer = Buffer                                                                                               // 23\nexports.SlowBuffer = SlowBuffer                                                                                       // 24\nexports.INSPECT_MAX_BYTES = 50                                                                                        // 25\nBuffer.poolSize = 8192 // not used by this implementation                                                             // 26\n                                                                                                                      // 27\nvar kMaxLength = 0x3fffffff                                                                                           // 28\nvar rootParent = {}                                                                                                   // 29\n                                                                                                                      // 30\n/**                                                                                                                   // 31\n * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                   // 32\n *   === true    Use Uint8Array implementation (fastest)                                                              // 33\n *   === false   Use Object implementation (most compatible, even IE6)                                                // 34\n *                                                                                                                    // 35\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                                 // 36\n * Opera 11.6+, iOS 4.2+.                                                                                             // 37\n *                                                                                                                    // 38\n * Note:                                                                                                              // 39\n *                                                                                                                    // 40\n * - Implementation must support adding new properties to `Uint8Array` instances.                                     // 41\n *   Firefox 4-29 lacked support, fixed in Firefox 30+.                                                               // 42\n *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                        // 43\n *                                                                                                                    // 44\n *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                            // 45\n *                                                                                                                    // 46\n *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                              // 47\n *    incorrect length in some situations.                                                                            // 48\n *                                                                                                                    // 49\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will                        // 50\n * get the Object implementation, which is slower but will work correctly.                                            // 51\n */                                                                                                                   // 52\nBuffer.TYPED_ARRAY_SUPPORT = (function () {                                                                           // 53\n  try {                                                                                                               // 54\n    var buf = new ArrayBuffer(0)                                                                                      // 55\n    var arr = new Uint8Array(buf)                                                                                     // 56\n    arr.foo = function () { return 42 }                                                                               // 57\n    return arr.foo() === 42 && // typed array instances can be augmented                                              // 58\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                          // 59\n        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                               // 60\n  } catch (e) {                                                                                                       // 61\n    return false                                                                                                      // 62\n  }                                                                                                                   // 63\n})()                                                                                                                  // 64\n                                                                                                                      // 65\n/**                                                                                                                   // 66\n * Class: Buffer                                                                                                      // 67\n * =============                                                                                                      // 68\n *                                                                                                                    // 69\n * The Buffer constructor returns instances of `Uint8Array` that are augmented                                        // 70\n * with function properties for all the node `Buffer` API functions. We use                                           // 71\n * `Uint8Array` so that square bracket notation works as expected -- it returns                                       // 72\n * a single octet.                                                                                                    // 73\n *                                                                                                                    // 74\n * By augmenting the instances, we can avoid modifying the `Uint8Array`                                               // 75\n * prototype.                                                                                                         // 76\n */                                                                                                                   // 77\nfunction Buffer (arg) {                                                                                               // 78\n  if (!(this instanceof Buffer)) {                                                                                    // 79\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.                                          // 80\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])                                                    // 81\n    return new Buffer(arg)                                                                                            // 82\n  }                                                                                                                   // 83\n                                                                                                                      // 84\n  this.length = 0                                                                                                     // 85\n  this.parent = undefined                                                                                             // 86\n                                                                                                                      // 87\n  // Common case.                                                                                                     // 88\n  if (typeof arg === 'number') {                                                                                      // 89\n    return fromNumber(this, arg)                                                                                      // 90\n  }                                                                                                                   // 91\n                                                                                                                      // 92\n  // Slightly less common case.                                                                                       // 93\n  if (typeof arg === 'string') {                                                                                      // 94\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')                                        // 95\n  }                                                                                                                   // 96\n                                                                                                                      // 97\n  // Unusual.                                                                                                         // 98\n  return fromObject(this, arg)                                                                                        // 99\n}                                                                                                                     // 100\n                                                                                                                      // 101\nfunction fromNumber (that, length) {                                                                                  // 102\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)                                                         // 103\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                  // 104\n    for (var i = 0; i < length; i++) {                                                                                // 105\n      that[i] = 0                                                                                                     // 106\n    }                                                                                                                 // 107\n  }                                                                                                                   // 108\n  return that                                                                                                         // 109\n}                                                                                                                     // 110\n                                                                                                                      // 111\nfunction fromString (that, string, encoding) {                                                                        // 112\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'                                              // 113\n                                                                                                                      // 114\n  // Assumption: byteLength() return value is always < kMaxLength.                                                    // 115\n  var length = byteLength(string, encoding) | 0                                                                       // 116\n  that = allocate(that, length)                                                                                       // 117\n                                                                                                                      // 118\n  that.write(string, encoding)                                                                                        // 119\n  return that                                                                                                         // 120\n}                                                                                                                     // 121\n                                                                                                                      // 122\nfunction fromObject (that, object) {                                                                                  // 123\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)                                                        // 124\n                                                                                                                      // 125\n  if (isArray(object)) return fromArray(that, object)                                                                 // 126\n                                                                                                                      // 127\n  if (object == null) {                                                                                               // 128\n    throw new TypeError('must start with number, buffer, array or string')                                            // 129\n  }                                                                                                                   // 130\n                                                                                                                      // 131\n  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {                                   // 132\n    return fromTypedArray(that, object)                                                                               // 133\n  }                                                                                                                   // 134\n                                                                                                                      // 135\n  if (object.length) return fromArrayLike(that, object)                                                               // 136\n                                                                                                                      // 137\n  return fromJsonObject(that, object)                                                                                 // 138\n}                                                                                                                     // 139\n                                                                                                                      // 140\nfunction fromBuffer (that, buffer) {                                                                                  // 141\n  var length = checked(buffer.length) | 0                                                                             // 142\n  that = allocate(that, length)                                                                                       // 143\n  buffer.copy(that, 0, 0, length)                                                                                     // 144\n  return that                                                                                                         // 145\n}                                                                                                                     // 146\n                                                                                                                      // 147\nfunction fromArray (that, array) {                                                                                    // 148\n  var length = checked(array.length) | 0                                                                              // 149\n  that = allocate(that, length)                                                                                       // 150\n  for (var i = 0; i < length; i += 1) {                                                                               // 151\n    that[i] = array[i] & 255                                                                                          // 152\n  }                                                                                                                   // 153\n  return that                                                                                                         // 154\n}                                                                                                                     // 155\n                                                                                                                      // 156\n// Duplicate of fromArray() to keep fromArray() monomorphic.                                                          // 157\nfunction fromTypedArray (that, array) {                                                                               // 158\n  var length = checked(array.length) | 0                                                                              // 159\n  that = allocate(that, length)                                                                                       // 160\n  // Truncating the elements is probably not what people expect from typed                                            // 161\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior                                          // 162\n  // of the old Buffer constructor.                                                                                   // 163\n  for (var i = 0; i < length; i += 1) {                                                                               // 164\n    that[i] = array[i] & 255                                                                                          // 165\n  }                                                                                                                   // 166\n  return that                                                                                                         // 167\n}                                                                                                                     // 168\n                                                                                                                      // 169\nfunction fromArrayLike (that, array) {                                                                                // 170\n  var length = checked(array.length) | 0                                                                              // 171\n  that = allocate(that, length)                                                                                       // 172\n  for (var i = 0; i < length; i += 1) {                                                                               // 173\n    that[i] = array[i] & 255                                                                                          // 174\n  }                                                                                                                   // 175\n  return that                                                                                                         // 176\n}                                                                                                                     // 177\n                                                                                                                      // 178\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.                                            // 179\n// Returns a zero-length buffer for inputs that don't conform to the spec.                                            // 180\nfunction fromJsonObject (that, object) {                                                                              // 181\n  var array                                                                                                           // 182\n  var length = 0                                                                                                      // 183\n                                                                                                                      // 184\n  if (object.type === 'Buffer' && isArray(object.data)) {                                                             // 185\n    array = object.data                                                                                               // 186\n    length = checked(array.length) | 0                                                                                // 187\n  }                                                                                                                   // 188\n  that = allocate(that, length)                                                                                       // 189\n                                                                                                                      // 190\n  for (var i = 0; i < length; i += 1) {                                                                               // 191\n    that[i] = array[i] & 255                                                                                          // 192\n  }                                                                                                                   // 193\n  return that                                                                                                         // 194\n}                                                                                                                     // 195\n                                                                                                                      // 196\nfunction allocate (that, length) {                                                                                    // 197\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 198\n    // Return an augmented `Uint8Array` instance, for best performance                                                // 199\n    that = Buffer._augment(new Uint8Array(length))                                                                    // 200\n  } else {                                                                                                            // 201\n    // Fallback: Return an object instance of the Buffer class                                                        // 202\n    that.length = length                                                                                              // 203\n    that._isBuffer = true                                                                                             // 204\n  }                                                                                                                   // 205\n                                                                                                                      // 206\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1                                                      // 207\n  if (fromPool) that.parent = rootParent                                                                              // 208\n                                                                                                                      // 209\n  return that                                                                                                         // 210\n}                                                                                                                     // 211\n                                                                                                                      // 212\nfunction checked (length) {                                                                                           // 213\n  // Note: cannot use `length < kMaxLength` here because that fails when                                              // 214\n  // length is NaN (which is otherwise coerced to zero.)                                                              // 215\n  if (length >= kMaxLength) {                                                                                         // 216\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                          // 217\n                         'size: 0x' + kMaxLength.toString(16) + ' bytes')                                             // 218\n  }                                                                                                                   // 219\n  return length | 0                                                                                                   // 220\n}                                                                                                                     // 221\n                                                                                                                      // 222\nfunction SlowBuffer (subject, encoding) {                                                                             // 223\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)                                         // 224\n                                                                                                                      // 225\n  var buf = new Buffer(subject, encoding)                                                                             // 226\n  delete buf.parent                                                                                                   // 227\n  return buf                                                                                                          // 228\n}                                                                                                                     // 229\n                                                                                                                      // 230\nBuffer.isBuffer = function isBuffer (b) {                                                                             // 231\n  return !!(b != null && b._isBuffer)                                                                                 // 232\n}                                                                                                                     // 233\n                                                                                                                      // 234\nBuffer.compare = function compare (a, b) {                                                                            // 235\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                   // 236\n    throw new TypeError('Arguments must be Buffers')                                                                  // 237\n  }                                                                                                                   // 238\n                                                                                                                      // 239\n  if (a === b) return 0                                                                                               // 240\n                                                                                                                      // 241\n  var x = a.length                                                                                                    // 242\n  var y = b.length                                                                                                    // 243\n                                                                                                                      // 244\n  var i = 0                                                                                                           // 245\n  var len = Math.min(x, y)                                                                                            // 246\n  while (i < len) {                                                                                                   // 247\n    if (a[i] !== b[i]) break                                                                                          // 248\n                                                                                                                      // 249\n    ++i                                                                                                               // 250\n  }                                                                                                                   // 251\n                                                                                                                      // 252\n  if (i !== len) {                                                                                                    // 253\n    x = a[i]                                                                                                          // 254\n    y = b[i]                                                                                                          // 255\n  }                                                                                                                   // 256\n                                                                                                                      // 257\n  if (x < y) return -1                                                                                                // 258\n  if (y < x) return 1                                                                                                 // 259\n  return 0                                                                                                            // 260\n}                                                                                                                     // 261\n                                                                                                                      // 262\nBuffer.isEncoding = function isEncoding (encoding) {                                                                  // 263\n  switch (String(encoding).toLowerCase()) {                                                                           // 264\n    case 'hex':                                                                                                       // 265\n    case 'utf8':                                                                                                      // 266\n    case 'utf-8':                                                                                                     // 267\n    case 'ascii':                                                                                                     // 268\n    case 'binary':                                                                                                    // 269\n    case 'base64':                                                                                                    // 270\n    case 'raw':                                                                                                       // 271\n    case 'ucs2':                                                                                                      // 272\n    case 'ucs-2':                                                                                                     // 273\n    case 'utf16le':                                                                                                   // 274\n    case 'utf-16le':                                                                                                  // 275\n      return true                                                                                                     // 276\n    default:                                                                                                          // 277\n      return false                                                                                                    // 278\n  }                                                                                                                   // 279\n}                                                                                                                     // 280\n                                                                                                                      // 281\nBuffer.concat = function concat (list, length) {                                                                      // 282\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')                               // 283\n                                                                                                                      // 284\n  if (list.length === 0) {                                                                                            // 285\n    return new Buffer(0)                                                                                              // 286\n  } else if (list.length === 1) {                                                                                     // 287\n    return list[0]                                                                                                    // 288\n  }                                                                                                                   // 289\n                                                                                                                      // 290\n  var i                                                                                                               // 291\n  if (length === undefined) {                                                                                         // 292\n    length = 0                                                                                                        // 293\n    for (i = 0; i < list.length; i++) {                                                                               // 294\n      length += list[i].length                                                                                        // 295\n    }                                                                                                                 // 296\n  }                                                                                                                   // 297\n                                                                                                                      // 298\n  var buf = new Buffer(length)                                                                                        // 299\n  var pos = 0                                                                                                         // 300\n  for (i = 0; i < list.length; i++) {                                                                                 // 301\n    var item = list[i]                                                                                                // 302\n    item.copy(buf, pos)                                                                                               // 303\n    pos += item.length                                                                                                // 304\n  }                                                                                                                   // 305\n  return buf                                                                                                          // 306\n}                                                                                                                     // 307\n                                                                                                                      // 308\nfunction byteLength (string, encoding) {                                                                              // 309\n  if (typeof string !== 'string') string = String(string)                                                             // 310\n                                                                                                                      // 311\n  if (string.length === 0) return 0                                                                                   // 312\n                                                                                                                      // 313\n  switch (encoding || 'utf8') {                                                                                       // 314\n    case 'ascii':                                                                                                     // 315\n    case 'binary':                                                                                                    // 316\n    case 'raw':                                                                                                       // 317\n      return string.length                                                                                            // 318\n    case 'ucs2':                                                                                                      // 319\n    case 'ucs-2':                                                                                                     // 320\n    case 'utf16le':                                                                                                   // 321\n    case 'utf-16le':                                                                                                  // 322\n      return string.length * 2                                                                                        // 323\n    case 'hex':                                                                                                       // 324\n      return string.length >>> 1                                                                                      // 325\n    case 'utf8':                                                                                                      // 326\n    case 'utf-8':                                                                                                     // 327\n      return utf8ToBytes(string).length                                                                               // 328\n    case 'base64':                                                                                                    // 329\n      return base64ToBytes(string).length                                                                             // 330\n    default:                                                                                                          // 331\n      return string.length                                                                                            // 332\n  }                                                                                                                   // 333\n}                                                                                                                     // 334\nBuffer.byteLength = byteLength                                                                                        // 335\n                                                                                                                      // 336\n// pre-set for values that may exist in the future                                                                    // 337\nBuffer.prototype.length = undefined                                                                                   // 338\nBuffer.prototype.parent = undefined                                                                                   // 339\n                                                                                                                      // 340\n// toString(encoding, start=0, end=buffer.length)                                                                     // 341\nBuffer.prototype.toString = function toString (encoding, start, end) {                                                // 342\n  var loweredCase = false                                                                                             // 343\n                                                                                                                      // 344\n  start = start | 0                                                                                                   // 345\n  end = end === undefined || end === Infinity ? this.length : end | 0                                                 // 346\n                                                                                                                      // 347\n  if (!encoding) encoding = 'utf8'                                                                                    // 348\n  if (start < 0) start = 0                                                                                            // 349\n  if (end > this.length) end = this.length                                                                            // 350\n  if (end <= start) return ''                                                                                         // 351\n                                                                                                                      // 352\n  while (true) {                                                                                                      // 353\n    switch (encoding) {                                                                                               // 354\n      case 'hex':                                                                                                     // 355\n        return hexSlice(this, start, end)                                                                             // 356\n                                                                                                                      // 357\n      case 'utf8':                                                                                                    // 358\n      case 'utf-8':                                                                                                   // 359\n        return utf8Slice(this, start, end)                                                                            // 360\n                                                                                                                      // 361\n      case 'ascii':                                                                                                   // 362\n        return asciiSlice(this, start, end)                                                                           // 363\n                                                                                                                      // 364\n      case 'binary':                                                                                                  // 365\n        return binarySlice(this, start, end)                                                                          // 366\n                                                                                                                      // 367\n      case 'base64':                                                                                                  // 368\n        return base64Slice(this, start, end)                                                                          // 369\n                                                                                                                      // 370\n      case 'ucs2':                                                                                                    // 371\n      case 'ucs-2':                                                                                                   // 372\n      case 'utf16le':                                                                                                 // 373\n      case 'utf-16le':                                                                                                // 374\n        return utf16leSlice(this, start, end)                                                                         // 375\n                                                                                                                      // 376\n      default:                                                                                                        // 377\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                         // 378\n        encoding = (encoding + '').toLowerCase()                                                                      // 379\n        loweredCase = true                                                                                            // 380\n    }                                                                                                                 // 381\n  }                                                                                                                   // 382\n}                                                                                                                     // 383\n                                                                                                                      // 384\nBuffer.prototype.equals = function equals (b) {                                                                       // 385\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                           // 386\n  if (this === b) return true                                                                                         // 387\n  return Buffer.compare(this, b) === 0                                                                                // 388\n}                                                                                                                     // 389\n                                                                                                                      // 390\nBuffer.prototype.inspect = function inspect () {                                                                      // 391\n  var str = ''                                                                                                        // 392\n  var max = exports.INSPECT_MAX_BYTES                                                                                 // 393\n  if (this.length > 0) {                                                                                              // 394\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                       // 395\n    if (this.length > max) str += ' ... '                                                                             // 396\n  }                                                                                                                   // 397\n  return '<Buffer ' + str + '>'                                                                                       // 398\n}                                                                                                                     // 399\n                                                                                                                      // 400\nBuffer.prototype.compare = function compare (b) {                                                                     // 401\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                           // 402\n  if (this === b) return 0                                                                                            // 403\n  return Buffer.compare(this, b)                                                                                      // 404\n}                                                                                                                     // 405\n                                                                                                                      // 406\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {                                                       // 407\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff                                                                // 408\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000                                                         // 409\n  byteOffset >>= 0                                                                                                    // 410\n                                                                                                                      // 411\n  if (this.length === 0) return -1                                                                                    // 412\n  if (byteOffset >= this.length) return -1                                                                            // 413\n                                                                                                                      // 414\n  // Negative offsets start from the end of the buffer                                                                // 415\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)                                              // 416\n                                                                                                                      // 417\n  if (typeof val === 'string') {                                                                                      // 418\n    if (val.length === 0) return -1 // special case: looking for empty string always fails                            // 419\n    return String.prototype.indexOf.call(this, val, byteOffset)                                                       // 420\n  }                                                                                                                   // 421\n  if (Buffer.isBuffer(val)) {                                                                                         // 422\n    return arrayIndexOf(this, val, byteOffset)                                                                        // 423\n  }                                                                                                                   // 424\n  if (typeof val === 'number') {                                                                                      // 425\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {                                  // 426\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)                                                 // 427\n    }                                                                                                                 // 428\n    return arrayIndexOf(this, [ val ], byteOffset)                                                                    // 429\n  }                                                                                                                   // 430\n                                                                                                                      // 431\n  function arrayIndexOf (arr, val, byteOffset) {                                                                      // 432\n    var foundIndex = -1                                                                                               // 433\n    for (var i = 0; byteOffset + i < arr.length; i++) {                                                               // 434\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {                                      // 435\n        if (foundIndex === -1) foundIndex = i                                                                         // 436\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex                                         // 437\n      } else {                                                                                                        // 438\n        foundIndex = -1                                                                                               // 439\n      }                                                                                                               // 440\n    }                                                                                                                 // 441\n    return -1                                                                                                         // 442\n  }                                                                                                                   // 443\n                                                                                                                      // 444\n  throw new TypeError('val must be string, number or Buffer')                                                         // 445\n}                                                                                                                     // 446\n                                                                                                                      // 447\n// `get` will be removed in Node 0.13+                                                                                // 448\nBuffer.prototype.get = function get (offset) {                                                                        // 449\n  console.log('.get() is deprecated. Access using array indexes instead.')                                            // 450\n  return this.readUInt8(offset)                                                                                       // 451\n}                                                                                                                     // 452\n                                                                                                                      // 453\n// `set` will be removed in Node 0.13+                                                                                // 454\nBuffer.prototype.set = function set (v, offset) {                                                                     // 455\n  console.log('.set() is deprecated. Access using array indexes instead.')                                            // 456\n  return this.writeUInt8(v, offset)                                                                                   // 457\n}                                                                                                                     // 458\n                                                                                                                      // 459\nfunction hexWrite (buf, string, offset, length) {                                                                     // 460\n  offset = Number(offset) || 0                                                                                        // 461\n  var remaining = buf.length - offset                                                                                 // 462\n  if (!length) {                                                                                                      // 463\n    length = remaining                                                                                                // 464\n  } else {                                                                                                            // 465\n    length = Number(length)                                                                                           // 466\n    if (length > remaining) {                                                                                         // 467\n      length = remaining                                                                                              // 468\n    }                                                                                                                 // 469\n  }                                                                                                                   // 470\n                                                                                                                      // 471\n  // must be an even number of digits                                                                                 // 472\n  var strLen = string.length                                                                                          // 473\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')                                                         // 474\n                                                                                                                      // 475\n  if (length > strLen / 2) {                                                                                          // 476\n    length = strLen / 2                                                                                               // 477\n  }                                                                                                                   // 478\n  for (var i = 0; i < length; i++) {                                                                                  // 479\n    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                                // 480\n    if (isNaN(parsed)) throw new Error('Invalid hex string')                                                          // 481\n    buf[offset + i] = parsed                                                                                          // 482\n  }                                                                                                                   // 483\n  return i                                                                                                            // 484\n}                                                                                                                     // 485\n                                                                                                                      // 486\nfunction utf8Write (buf, string, offset, length) {                                                                    // 487\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                    // 488\n}                                                                                                                     // 489\n                                                                                                                      // 490\nfunction asciiWrite (buf, string, offset, length) {                                                                   // 491\n  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                        // 492\n}                                                                                                                     // 493\n                                                                                                                      // 494\nfunction binaryWrite (buf, string, offset, length) {                                                                  // 495\n  return asciiWrite(buf, string, offset, length)                                                                      // 496\n}                                                                                                                     // 497\n                                                                                                                      // 498\nfunction base64Write (buf, string, offset, length) {                                                                  // 499\n  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                       // 500\n}                                                                                                                     // 501\n                                                                                                                      // 502\nfunction ucs2Write (buf, string, offset, length) {                                                                    // 503\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                                 // 504\n}                                                                                                                     // 505\n                                                                                                                      // 506\nBuffer.prototype.write = function write (string, offset, length, encoding) {                                          // 507\n  // Buffer#write(string)                                                                                             // 508\n  if (offset === undefined) {                                                                                         // 509\n    encoding = 'utf8'                                                                                                 // 510\n    length = this.length                                                                                              // 511\n    offset = 0                                                                                                        // 512\n  // Buffer#write(string, encoding)                                                                                   // 513\n  } else if (length === undefined && typeof offset === 'string') {                                                    // 514\n    encoding = offset                                                                                                 // 515\n    length = this.length                                                                                              // 516\n    offset = 0                                                                                                        // 517\n  // Buffer#write(string, offset[, length][, encoding])                                                               // 518\n  } else if (isFinite(offset)) {                                                                                      // 519\n    offset = offset | 0                                                                                               // 520\n    if (isFinite(length)) {                                                                                           // 521\n      length = length | 0                                                                                             // 522\n      if (encoding === undefined) encoding = 'utf8'                                                                   // 523\n    } else {                                                                                                          // 524\n      encoding = length                                                                                               // 525\n      length = undefined                                                                                              // 526\n    }                                                                                                                 // 527\n  // legacy write(string, encoding, offset, length) - remove in v0.13                                                 // 528\n  } else {                                                                                                            // 529\n    var swap = encoding                                                                                               // 530\n    encoding = offset                                                                                                 // 531\n    offset = length | 0                                                                                               // 532\n    length = swap                                                                                                     // 533\n  }                                                                                                                   // 534\n                                                                                                                      // 535\n  var remaining = this.length - offset                                                                                // 536\n  if (length === undefined || length > remaining) length = remaining                                                  // 537\n                                                                                                                      // 538\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                    // 539\n    throw new RangeError('attempt to write outside buffer bounds')                                                    // 540\n  }                                                                                                                   // 541\n                                                                                                                      // 542\n  if (!encoding) encoding = 'utf8'                                                                                    // 543\n                                                                                                                      // 544\n  var loweredCase = false                                                                                             // 545\n  for (;;) {                                                                                                          // 546\n    switch (encoding) {                                                                                               // 547\n      case 'hex':                                                                                                     // 548\n        return hexWrite(this, string, offset, length)                                                                 // 549\n                                                                                                                      // 550\n      case 'utf8':                                                                                                    // 551\n      case 'utf-8':                                                                                                   // 552\n        return utf8Write(this, string, offset, length)                                                                // 553\n                                                                                                                      // 554\n      case 'ascii':                                                                                                   // 555\n        return asciiWrite(this, string, offset, length)                                                               // 556\n                                                                                                                      // 557\n      case 'binary':                                                                                                  // 558\n        return binaryWrite(this, string, offset, length)                                                              // 559\n                                                                                                                      // 560\n      case 'base64':                                                                                                  // 561\n        // Warning: maxLength not taken into account in base64Write                                                   // 562\n        return base64Write(this, string, offset, length)                                                              // 563\n                                                                                                                      // 564\n      case 'ucs2':                                                                                                    // 565\n      case 'ucs-2':                                                                                                   // 566\n      case 'utf16le':                                                                                                 // 567\n      case 'utf-16le':                                                                                                // 568\n        return ucs2Write(this, string, offset, length)                                                                // 569\n                                                                                                                      // 570\n      default:                                                                                                        // 571\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                         // 572\n        encoding = ('' + encoding).toLowerCase()                                                                      // 573\n        loweredCase = true                                                                                            // 574\n    }                                                                                                                 // 575\n  }                                                                                                                   // 576\n}                                                                                                                     // 577\n                                                                                                                      // 578\nBuffer.prototype.toJSON = function toJSON () {                                                                        // 579\n  return {                                                                                                            // 580\n    type: 'Buffer',                                                                                                   // 581\n    data: Array.prototype.slice.call(this._arr || this, 0)                                                            // 582\n  }                                                                                                                   // 583\n}                                                                                                                     // 584\n                                                                                                                      // 585\nfunction base64Slice (buf, start, end) {                                                                              // 586\n  if (start === 0 && end === buf.length) {                                                                            // 587\n    return base64.fromByteArray(buf)                                                                                  // 588\n  } else {                                                                                                            // 589\n    return base64.fromByteArray(buf.slice(start, end))                                                                // 590\n  }                                                                                                                   // 591\n}                                                                                                                     // 592\n                                                                                                                      // 593\nfunction utf8Slice (buf, start, end) {                                                                                // 594\n  var res = ''                                                                                                        // 595\n  var tmp = ''                                                                                                        // 596\n  end = Math.min(buf.length, end)                                                                                     // 597\n                                                                                                                      // 598\n  for (var i = start; i < end; i++) {                                                                                 // 599\n    if (buf[i] <= 0x7F) {                                                                                             // 600\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])                                                        // 601\n      tmp = ''                                                                                                        // 602\n    } else {                                                                                                          // 603\n      tmp += '%' + buf[i].toString(16)                                                                                // 604\n    }                                                                                                                 // 605\n  }                                                                                                                   // 606\n                                                                                                                      // 607\n  return res + decodeUtf8Char(tmp)                                                                                    // 608\n}                                                                                                                     // 609\n                                                                                                                      // 610\nfunction asciiSlice (buf, start, end) {                                                                               // 611\n  var ret = ''                                                                                                        // 612\n  end = Math.min(buf.length, end)                                                                                     // 613\n                                                                                                                      // 614\n  for (var i = start; i < end; i++) {                                                                                 // 615\n    ret += String.fromCharCode(buf[i] & 0x7F)                                                                         // 616\n  }                                                                                                                   // 617\n  return ret                                                                                                          // 618\n}                                                                                                                     // 619\n                                                                                                                      // 620\nfunction binarySlice (buf, start, end) {                                                                              // 621\n  var ret = ''                                                                                                        // 622\n  end = Math.min(buf.length, end)                                                                                     // 623\n                                                                                                                      // 624\n  for (var i = start; i < end; i++) {                                                                                 // 625\n    ret += String.fromCharCode(buf[i])                                                                                // 626\n  }                                                                                                                   // 627\n  return ret                                                                                                          // 628\n}                                                                                                                     // 629\n                                                                                                                      // 630\nfunction hexSlice (buf, start, end) {                                                                                 // 631\n  var len = buf.length                                                                                                // 632\n                                                                                                                      // 633\n  if (!start || start < 0) start = 0                                                                                  // 634\n  if (!end || end < 0 || end > len) end = len                                                                         // 635\n                                                                                                                      // 636\n  var out = ''                                                                                                        // 637\n  for (var i = start; i < end; i++) {                                                                                 // 638\n    out += toHex(buf[i])                                                                                              // 639\n  }                                                                                                                   // 640\n  return out                                                                                                          // 641\n}                                                                                                                     // 642\n                                                                                                                      // 643\nfunction utf16leSlice (buf, start, end) {                                                                             // 644\n  var bytes = buf.slice(start, end)                                                                                   // 645\n  var res = ''                                                                                                        // 646\n  for (var i = 0; i < bytes.length; i += 2) {                                                                         // 647\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                         // 648\n  }                                                                                                                   // 649\n  return res                                                                                                          // 650\n}                                                                                                                     // 651\n                                                                                                                      // 652\nBuffer.prototype.slice = function slice (start, end) {                                                                // 653\n  var len = this.length                                                                                               // 654\n  start = ~~start                                                                                                     // 655\n  end = end === undefined ? len : ~~end                                                                               // 656\n                                                                                                                      // 657\n  if (start < 0) {                                                                                                    // 658\n    start += len                                                                                                      // 659\n    if (start < 0) start = 0                                                                                          // 660\n  } else if (start > len) {                                                                                           // 661\n    start = len                                                                                                       // 662\n  }                                                                                                                   // 663\n                                                                                                                      // 664\n  if (end < 0) {                                                                                                      // 665\n    end += len                                                                                                        // 666\n    if (end < 0) end = 0                                                                                              // 667\n  } else if (end > len) {                                                                                             // 668\n    end = len                                                                                                         // 669\n  }                                                                                                                   // 670\n                                                                                                                      // 671\n  if (end < start) end = start                                                                                        // 672\n                                                                                                                      // 673\n  var newBuf                                                                                                          // 674\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 675\n    newBuf = Buffer._augment(this.subarray(start, end))                                                               // 676\n  } else {                                                                                                            // 677\n    var sliceLen = end - start                                                                                        // 678\n    newBuf = new Buffer(sliceLen, undefined)                                                                          // 679\n    for (var i = 0; i < sliceLen; i++) {                                                                              // 680\n      newBuf[i] = this[i + start]                                                                                     // 681\n    }                                                                                                                 // 682\n  }                                                                                                                   // 683\n                                                                                                                      // 684\n  if (newBuf.length) newBuf.parent = this.parent || this                                                              // 685\n                                                                                                                      // 686\n  return newBuf                                                                                                       // 687\n}                                                                                                                     // 688\n                                                                                                                      // 689\n/*                                                                                                                    // 690\n * Need to make sure that buffer isn't trying to write out of bounds.                                                 // 691\n */                                                                                                                   // 692\nfunction checkOffset (offset, ext, length) {                                                                          // 693\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                    // 694\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                            // 695\n}                                                                                                                     // 696\n                                                                                                                      // 697\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                    // 698\n  offset = offset | 0                                                                                                 // 699\n  byteLength = byteLength | 0                                                                                         // 700\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                         // 701\n                                                                                                                      // 702\n  var val = this[offset]                                                                                              // 703\n  var mul = 1                                                                                                         // 704\n  var i = 0                                                                                                           // 705\n  while (++i < byteLength && (mul *= 0x100)) {                                                                        // 706\n    val += this[offset + i] * mul                                                                                     // 707\n  }                                                                                                                   // 708\n                                                                                                                      // 709\n  return val                                                                                                          // 710\n}                                                                                                                     // 711\n                                                                                                                      // 712\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                    // 713\n  offset = offset | 0                                                                                                 // 714\n  byteLength = byteLength | 0                                                                                         // 715\n  if (!noAssert) {                                                                                                    // 716\n    checkOffset(offset, byteLength, this.length)                                                                      // 717\n  }                                                                                                                   // 718\n                                                                                                                      // 719\n  var val = this[offset + --byteLength]                                                                               // 720\n  var mul = 1                                                                                                         // 721\n  while (byteLength > 0 && (mul *= 0x100)) {                                                                          // 722\n    val += this[offset + --byteLength] * mul                                                                          // 723\n  }                                                                                                                   // 724\n                                                                                                                      // 725\n  return val                                                                                                          // 726\n}                                                                                                                     // 727\n                                                                                                                      // 728\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                  // 729\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                  // 730\n  return this[offset]                                                                                                 // 731\n}                                                                                                                     // 732\n                                                                                                                      // 733\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                            // 734\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                  // 735\n  return this[offset] | (this[offset + 1] << 8)                                                                       // 736\n}                                                                                                                     // 737\n                                                                                                                      // 738\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                            // 739\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                  // 740\n  return (this[offset] << 8) | this[offset + 1]                                                                       // 741\n}                                                                                                                     // 742\n                                                                                                                      // 743\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                            // 744\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 745\n                                                                                                                      // 746\n  return ((this[offset]) |                                                                                            // 747\n      (this[offset + 1] << 8) |                                                                                       // 748\n      (this[offset + 2] << 16)) +                                                                                     // 749\n      (this[offset + 3] * 0x1000000)                                                                                  // 750\n}                                                                                                                     // 751\n                                                                                                                      // 752\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                            // 753\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 754\n                                                                                                                      // 755\n  return (this[offset] * 0x1000000) +                                                                                 // 756\n    ((this[offset + 1] << 16) |                                                                                       // 757\n    (this[offset + 2] << 8) |                                                                                         // 758\n    this[offset + 3])                                                                                                 // 759\n}                                                                                                                     // 760\n                                                                                                                      // 761\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                      // 762\n  offset = offset | 0                                                                                                 // 763\n  byteLength = byteLength | 0                                                                                         // 764\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                         // 765\n                                                                                                                      // 766\n  var val = this[offset]                                                                                              // 767\n  var mul = 1                                                                                                         // 768\n  var i = 0                                                                                                           // 769\n  while (++i < byteLength && (mul *= 0x100)) {                                                                        // 770\n    val += this[offset + i] * mul                                                                                     // 771\n  }                                                                                                                   // 772\n  mul *= 0x80                                                                                                         // 773\n                                                                                                                      // 774\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                  // 775\n                                                                                                                      // 776\n  return val                                                                                                          // 777\n}                                                                                                                     // 778\n                                                                                                                      // 779\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                      // 780\n  offset = offset | 0                                                                                                 // 781\n  byteLength = byteLength | 0                                                                                         // 782\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                         // 783\n                                                                                                                      // 784\n  var i = byteLength                                                                                                  // 785\n  var mul = 1                                                                                                         // 786\n  var val = this[offset + --i]                                                                                        // 787\n  while (i > 0 && (mul *= 0x100)) {                                                                                   // 788\n    val += this[offset + --i] * mul                                                                                   // 789\n  }                                                                                                                   // 790\n  mul *= 0x80                                                                                                         // 791\n                                                                                                                      // 792\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                  // 793\n                                                                                                                      // 794\n  return val                                                                                                          // 795\n}                                                                                                                     // 796\n                                                                                                                      // 797\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                    // 798\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                  // 799\n  if (!(this[offset] & 0x80)) return (this[offset])                                                                   // 800\n  return ((0xff - this[offset] + 1) * -1)                                                                             // 801\n}                                                                                                                     // 802\n                                                                                                                      // 803\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                              // 804\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                  // 805\n  var val = this[offset] | (this[offset + 1] << 8)                                                                    // 806\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                      // 807\n}                                                                                                                     // 808\n                                                                                                                      // 809\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                              // 810\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                  // 811\n  var val = this[offset + 1] | (this[offset] << 8)                                                                    // 812\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                      // 813\n}                                                                                                                     // 814\n                                                                                                                      // 815\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                              // 816\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 817\n                                                                                                                      // 818\n  return (this[offset]) |                                                                                             // 819\n    (this[offset + 1] << 8) |                                                                                         // 820\n    (this[offset + 2] << 16) |                                                                                        // 821\n    (this[offset + 3] << 24)                                                                                          // 822\n}                                                                                                                     // 823\n                                                                                                                      // 824\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                              // 825\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 826\n                                                                                                                      // 827\n  return (this[offset] << 24) |                                                                                       // 828\n    (this[offset + 1] << 16) |                                                                                        // 829\n    (this[offset + 2] << 8) |                                                                                         // 830\n    (this[offset + 3])                                                                                                // 831\n}                                                                                                                     // 832\n                                                                                                                      // 833\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                              // 834\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 835\n  return ieee754.read(this, offset, true, 23, 4)                                                                      // 836\n}                                                                                                                     // 837\n                                                                                                                      // 838\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                              // 839\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 840\n  return ieee754.read(this, offset, false, 23, 4)                                                                     // 841\n}                                                                                                                     // 842\n                                                                                                                      // 843\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                            // 844\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                  // 845\n  return ieee754.read(this, offset, true, 52, 8)                                                                      // 846\n}                                                                                                                     // 847\n                                                                                                                      // 848\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                            // 849\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                  // 850\n  return ieee754.read(this, offset, false, 52, 8)                                                                     // 851\n}                                                                                                                     // 852\n                                                                                                                      // 853\nfunction checkInt (buf, value, offset, ext, max, min) {                                                               // 854\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')                                  // 855\n  if (value > max || value < min) throw new RangeError('value is out of bounds')                                      // 856\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                           // 857\n}                                                                                                                     // 858\n                                                                                                                      // 859\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                           // 860\n  value = +value                                                                                                      // 861\n  offset = offset | 0                                                                                                 // 862\n  byteLength = byteLength | 0                                                                                         // 863\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                            // 864\n                                                                                                                      // 865\n  var mul = 1                                                                                                         // 866\n  var i = 0                                                                                                           // 867\n  this[offset] = value & 0xFF                                                                                         // 868\n  while (++i < byteLength && (mul *= 0x100)) {                                                                        // 869\n    this[offset + i] = (value / mul) & 0xFF                                                                           // 870\n  }                                                                                                                   // 871\n                                                                                                                      // 872\n  return offset + byteLength                                                                                          // 873\n}                                                                                                                     // 874\n                                                                                                                      // 875\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                           // 876\n  value = +value                                                                                                      // 877\n  offset = offset | 0                                                                                                 // 878\n  byteLength = byteLength | 0                                                                                         // 879\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                            // 880\n                                                                                                                      // 881\n  var i = byteLength - 1                                                                                              // 882\n  var mul = 1                                                                                                         // 883\n  this[offset + i] = value & 0xFF                                                                                     // 884\n  while (--i >= 0 && (mul *= 0x100)) {                                                                                // 885\n    this[offset + i] = (value / mul) & 0xFF                                                                           // 886\n  }                                                                                                                   // 887\n                                                                                                                      // 888\n  return offset + byteLength                                                                                          // 889\n}                                                                                                                     // 890\n                                                                                                                      // 891\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                         // 892\n  value = +value                                                                                                      // 893\n  offset = offset | 0                                                                                                 // 894\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                            // 895\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                          // 896\n  this[offset] = value                                                                                                // 897\n  return offset + 1                                                                                                   // 898\n}                                                                                                                     // 899\n                                                                                                                      // 900\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {                                                       // 901\n  if (value < 0) value = 0xffff + value + 1                                                                           // 902\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {                                                 // 903\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                        // 904\n      (littleEndian ? i : 1 - i) * 8                                                                                  // 905\n  }                                                                                                                   // 906\n}                                                                                                                     // 907\n                                                                                                                      // 908\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                   // 909\n  value = +value                                                                                                      // 910\n  offset = offset | 0                                                                                                 // 911\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                          // 912\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 913\n    this[offset] = value                                                                                              // 914\n    this[offset + 1] = (value >>> 8)                                                                                  // 915\n  } else {                                                                                                            // 916\n    objectWriteUInt16(this, value, offset, true)                                                                      // 917\n  }                                                                                                                   // 918\n  return offset + 2                                                                                                   // 919\n}                                                                                                                     // 920\n                                                                                                                      // 921\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                   // 922\n  value = +value                                                                                                      // 923\n  offset = offset | 0                                                                                                 // 924\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                          // 925\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 926\n    this[offset] = (value >>> 8)                                                                                      // 927\n    this[offset + 1] = value                                                                                          // 928\n  } else {                                                                                                            // 929\n    objectWriteUInt16(this, value, offset, false)                                                                     // 930\n  }                                                                                                                   // 931\n  return offset + 2                                                                                                   // 932\n}                                                                                                                     // 933\n                                                                                                                      // 934\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {                                                       // 935\n  if (value < 0) value = 0xffffffff + value + 1                                                                       // 936\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {                                                 // 937\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                               // 938\n  }                                                                                                                   // 939\n}                                                                                                                     // 940\n                                                                                                                      // 941\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                   // 942\n  value = +value                                                                                                      // 943\n  offset = offset | 0                                                                                                 // 944\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                      // 945\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 946\n    this[offset + 3] = (value >>> 24)                                                                                 // 947\n    this[offset + 2] = (value >>> 16)                                                                                 // 948\n    this[offset + 1] = (value >>> 8)                                                                                  // 949\n    this[offset] = value                                                                                              // 950\n  } else {                                                                                                            // 951\n    objectWriteUInt32(this, value, offset, true)                                                                      // 952\n  }                                                                                                                   // 953\n  return offset + 4                                                                                                   // 954\n}                                                                                                                     // 955\n                                                                                                                      // 956\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                   // 957\n  value = +value                                                                                                      // 958\n  offset = offset | 0                                                                                                 // 959\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                      // 960\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 961\n    this[offset] = (value >>> 24)                                                                                     // 962\n    this[offset + 1] = (value >>> 16)                                                                                 // 963\n    this[offset + 2] = (value >>> 8)                                                                                  // 964\n    this[offset + 3] = value                                                                                          // 965\n  } else {                                                                                                            // 966\n    objectWriteUInt32(this, value, offset, false)                                                                     // 967\n  }                                                                                                                   // 968\n  return offset + 4                                                                                                   // 969\n}                                                                                                                     // 970\n                                                                                                                      // 971\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                             // 972\n  value = +value                                                                                                      // 973\n  offset = offset | 0                                                                                                 // 974\n  if (!noAssert) {                                                                                                    // 975\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                       // 976\n                                                                                                                      // 977\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                      // 978\n  }                                                                                                                   // 979\n                                                                                                                      // 980\n  var i = 0                                                                                                           // 981\n  var mul = 1                                                                                                         // 982\n  var sub = value < 0 ? 1 : 0                                                                                         // 983\n  this[offset] = value & 0xFF                                                                                         // 984\n  while (++i < byteLength && (mul *= 0x100)) {                                                                        // 985\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                              // 986\n  }                                                                                                                   // 987\n                                                                                                                      // 988\n  return offset + byteLength                                                                                          // 989\n}                                                                                                                     // 990\n                                                                                                                      // 991\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                             // 992\n  value = +value                                                                                                      // 993\n  offset = offset | 0                                                                                                 // 994\n  if (!noAssert) {                                                                                                    // 995\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                       // 996\n                                                                                                                      // 997\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                      // 998\n  }                                                                                                                   // 999\n                                                                                                                      // 1000\n  var i = byteLength - 1                                                                                              // 1001\n  var mul = 1                                                                                                         // 1002\n  var sub = value < 0 ? 1 : 0                                                                                         // 1003\n  this[offset + i] = value & 0xFF                                                                                     // 1004\n  while (--i >= 0 && (mul *= 0x100)) {                                                                                // 1005\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                              // 1006\n  }                                                                                                                   // 1007\n                                                                                                                      // 1008\n  return offset + byteLength                                                                                          // 1009\n}                                                                                                                     // 1010\n                                                                                                                      // 1011\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                           // 1012\n  value = +value                                                                                                      // 1013\n  offset = offset | 0                                                                                                 // 1014\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                        // 1015\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                          // 1016\n  if (value < 0) value = 0xff + value + 1                                                                             // 1017\n  this[offset] = value                                                                                                // 1018\n  return offset + 1                                                                                                   // 1019\n}                                                                                                                     // 1020\n                                                                                                                      // 1021\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                     // 1022\n  value = +value                                                                                                      // 1023\n  offset = offset | 0                                                                                                 // 1024\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                    // 1025\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 1026\n    this[offset] = value                                                                                              // 1027\n    this[offset + 1] = (value >>> 8)                                                                                  // 1028\n  } else {                                                                                                            // 1029\n    objectWriteUInt16(this, value, offset, true)                                                                      // 1030\n  }                                                                                                                   // 1031\n  return offset + 2                                                                                                   // 1032\n}                                                                                                                     // 1033\n                                                                                                                      // 1034\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                     // 1035\n  value = +value                                                                                                      // 1036\n  offset = offset | 0                                                                                                 // 1037\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                    // 1038\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 1039\n    this[offset] = (value >>> 8)                                                                                      // 1040\n    this[offset + 1] = value                                                                                          // 1041\n  } else {                                                                                                            // 1042\n    objectWriteUInt16(this, value, offset, false)                                                                     // 1043\n  }                                                                                                                   // 1044\n  return offset + 2                                                                                                   // 1045\n}                                                                                                                     // 1046\n                                                                                                                      // 1047\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                     // 1048\n  value = +value                                                                                                      // 1049\n  offset = offset | 0                                                                                                 // 1050\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                            // 1051\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 1052\n    this[offset] = value                                                                                              // 1053\n    this[offset + 1] = (value >>> 8)                                                                                  // 1054\n    this[offset + 2] = (value >>> 16)                                                                                 // 1055\n    this[offset + 3] = (value >>> 24)                                                                                 // 1056\n  } else {                                                                                                            // 1057\n    objectWriteUInt32(this, value, offset, true)                                                                      // 1058\n  }                                                                                                                   // 1059\n  return offset + 4                                                                                                   // 1060\n}                                                                                                                     // 1061\n                                                                                                                      // 1062\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                     // 1063\n  value = +value                                                                                                      // 1064\n  offset = offset | 0                                                                                                 // 1065\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                            // 1066\n  if (value < 0) value = 0xffffffff + value + 1                                                                       // 1067\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 1068\n    this[offset] = (value >>> 24)                                                                                     // 1069\n    this[offset + 1] = (value >>> 16)                                                                                 // 1070\n    this[offset + 2] = (value >>> 8)                                                                                  // 1071\n    this[offset + 3] = value                                                                                          // 1072\n  } else {                                                                                                            // 1073\n    objectWriteUInt32(this, value, offset, false)                                                                     // 1074\n  }                                                                                                                   // 1075\n  return offset + 4                                                                                                   // 1076\n}                                                                                                                     // 1077\n                                                                                                                      // 1078\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {                                                           // 1079\n  if (value > max || value < min) throw new RangeError('value is out of bounds')                                      // 1080\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                           // 1081\n  if (offset < 0) throw new RangeError('index out of range')                                                          // 1082\n}                                                                                                                     // 1083\n                                                                                                                      // 1084\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {                                                    // 1085\n  if (!noAssert) {                                                                                                    // 1086\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                              // 1087\n  }                                                                                                                   // 1088\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                              // 1089\n  return offset + 4                                                                                                   // 1090\n}                                                                                                                     // 1091\n                                                                                                                      // 1092\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                     // 1093\n  return writeFloat(this, value, offset, true, noAssert)                                                              // 1094\n}                                                                                                                     // 1095\n                                                                                                                      // 1096\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                     // 1097\n  return writeFloat(this, value, offset, false, noAssert)                                                             // 1098\n}                                                                                                                     // 1099\n                                                                                                                      // 1100\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {                                                   // 1101\n  if (!noAssert) {                                                                                                    // 1102\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                            // 1103\n  }                                                                                                                   // 1104\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                              // 1105\n  return offset + 8                                                                                                   // 1106\n}                                                                                                                     // 1107\n                                                                                                                      // 1108\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                   // 1109\n  return writeDouble(this, value, offset, true, noAssert)                                                             // 1110\n}                                                                                                                     // 1111\n                                                                                                                      // 1112\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                   // 1113\n  return writeDouble(this, value, offset, false, noAssert)                                                            // 1114\n}                                                                                                                     // 1115\n                                                                                                                      // 1116\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                          // 1117\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {                                             // 1118\n  if (!start) start = 0                                                                                               // 1119\n  if (!end && end !== 0) end = this.length                                                                            // 1120\n  if (targetStart >= target.length) targetStart = target.length                                                       // 1121\n  if (!targetStart) targetStart = 0                                                                                   // 1122\n  if (end > 0 && end < start) end = start                                                                             // 1123\n                                                                                                                      // 1124\n  // Copy 0 bytes; we're done                                                                                         // 1125\n  if (end === start) return 0                                                                                         // 1126\n  if (target.length === 0 || this.length === 0) return 0                                                              // 1127\n                                                                                                                      // 1128\n  // Fatal error conditions                                                                                           // 1129\n  if (targetStart < 0) {                                                                                              // 1130\n    throw new RangeError('targetStart out of bounds')                                                                 // 1131\n  }                                                                                                                   // 1132\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                            // 1133\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                        // 1134\n                                                                                                                      // 1135\n  // Are we oob?                                                                                                      // 1136\n  if (end > this.length) end = this.length                                                                            // 1137\n  if (target.length - targetStart < end - start) {                                                                    // 1138\n    end = target.length - targetStart + start                                                                         // 1139\n  }                                                                                                                   // 1140\n                                                                                                                      // 1141\n  var len = end - start                                                                                               // 1142\n                                                                                                                      // 1143\n  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                                    // 1144\n    for (var i = 0; i < len; i++) {                                                                                   // 1145\n      target[i + targetStart] = this[i + start]                                                                       // 1146\n    }                                                                                                                 // 1147\n  } else {                                                                                                            // 1148\n    target._set(this.subarray(start, start + len), targetStart)                                                       // 1149\n  }                                                                                                                   // 1150\n                                                                                                                      // 1151\n  return len                                                                                                          // 1152\n}                                                                                                                     // 1153\n                                                                                                                      // 1154\n// fill(value, start=0, end=buffer.length)                                                                            // 1155\nBuffer.prototype.fill = function fill (value, start, end) {                                                           // 1156\n  if (!value) value = 0                                                                                               // 1157\n  if (!start) start = 0                                                                                               // 1158\n  if (!end) end = this.length                                                                                         // 1159\n                                                                                                                      // 1160\n  if (end < start) throw new RangeError('end < start')                                                                // 1161\n                                                                                                                      // 1162\n  // Fill 0 bytes; we're done                                                                                         // 1163\n  if (end === start) return                                                                                           // 1164\n  if (this.length === 0) return                                                                                       // 1165\n                                                                                                                      // 1166\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')                                  // 1167\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')                                         // 1168\n                                                                                                                      // 1169\n  var i                                                                                                               // 1170\n  if (typeof value === 'number') {                                                                                    // 1171\n    for (i = start; i < end; i++) {                                                                                   // 1172\n      this[i] = value                                                                                                 // 1173\n    }                                                                                                                 // 1174\n  } else {                                                                                                            // 1175\n    var bytes = utf8ToBytes(value.toString())                                                                         // 1176\n    var len = bytes.length                                                                                            // 1177\n    for (i = start; i < end; i++) {                                                                                   // 1178\n      this[i] = bytes[i % len]                                                                                        // 1179\n    }                                                                                                                 // 1180\n  }                                                                                                                   // 1181\n                                                                                                                      // 1182\n  return this                                                                                                         // 1183\n}                                                                                                                     // 1184\n                                                                                                                      // 1185\n/**                                                                                                                   // 1186\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.                                       // 1187\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.                                           // 1188\n */                                                                                                                   // 1189\nBuffer.prototype.toArrayBuffer = function toArrayBuffer () {                                                          // 1190\n  if (typeof Uint8Array !== 'undefined') {                                                                            // 1191\n    if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 1192\n      return (new Buffer(this)).buffer                                                                                // 1193\n    } else {                                                                                                          // 1194\n      var buf = new Uint8Array(this.length)                                                                           // 1195\n      for (var i = 0, len = buf.length; i < len; i += 1) {                                                            // 1196\n        buf[i] = this[i]                                                                                              // 1197\n      }                                                                                                               // 1198\n      return buf.buffer                                                                                               // 1199\n    }                                                                                                                 // 1200\n  } else {                                                                                                            // 1201\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')                                         // 1202\n  }                                                                                                                   // 1203\n}                                                                                                                     // 1204\n                                                                                                                      // 1205\n// HELPER FUNCTIONS                                                                                                   // 1206\n// ================                                                                                                   // 1207\n                                                                                                                      // 1208\nvar BP = Buffer.prototype                                                                                             // 1209\n                                                                                                                      // 1210\n/**                                                                                                                   // 1211\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods                                    // 1212\n */                                                                                                                   // 1213\nBuffer._augment = function _augment (arr) {                                                                           // 1214\n  arr.constructor = Buffer                                                                                            // 1215\n  arr._isBuffer = true                                                                                                // 1216\n                                                                                                                      // 1217\n  // save reference to original Uint8Array set method before overwriting                                              // 1218\n  arr._set = arr.set                                                                                                  // 1219\n                                                                                                                      // 1220\n  // deprecated, will be removed in node 0.13+                                                                        // 1221\n  arr.get = BP.get                                                                                                    // 1222\n  arr.set = BP.set                                                                                                    // 1223\n                                                                                                                      // 1224\n  arr.write = BP.write                                                                                                // 1225\n  arr.toString = BP.toString                                                                                          // 1226\n  arr.toLocaleString = BP.toString                                                                                    // 1227\n  arr.toJSON = BP.toJSON                                                                                              // 1228\n  arr.equals = BP.equals                                                                                              // 1229\n  arr.compare = BP.compare                                                                                            // 1230\n  arr.indexOf = BP.indexOf                                                                                            // 1231\n  arr.copy = BP.copy                                                                                                  // 1232\n  arr.slice = BP.slice                                                                                                // 1233\n  arr.readUIntLE = BP.readUIntLE                                                                                      // 1234\n  arr.readUIntBE = BP.readUIntBE                                                                                      // 1235\n  arr.readUInt8 = BP.readUInt8                                                                                        // 1236\n  arr.readUInt16LE = BP.readUInt16LE                                                                                  // 1237\n  arr.readUInt16BE = BP.readUInt16BE                                                                                  // 1238\n  arr.readUInt32LE = BP.readUInt32LE                                                                                  // 1239\n  arr.readUInt32BE = BP.readUInt32BE                                                                                  // 1240\n  arr.readIntLE = BP.readIntLE                                                                                        // 1241\n  arr.readIntBE = BP.readIntBE                                                                                        // 1242\n  arr.readInt8 = BP.readInt8                                                                                          // 1243\n  arr.readInt16LE = BP.readInt16LE                                                                                    // 1244\n  arr.readInt16BE = BP.readInt16BE                                                                                    // 1245\n  arr.readInt32LE = BP.readInt32LE                                                                                    // 1246\n  arr.readInt32BE = BP.readInt32BE                                                                                    // 1247\n  arr.readFloatLE = BP.readFloatLE                                                                                    // 1248\n  arr.readFloatBE = BP.readFloatBE                                                                                    // 1249\n  arr.readDoubleLE = BP.readDoubleLE                                                                                  // 1250\n  arr.readDoubleBE = BP.readDoubleBE                                                                                  // 1251\n  arr.writeUInt8 = BP.writeUInt8                                                                                      // 1252\n  arr.writeUIntLE = BP.writeUIntLE                                                                                    // 1253\n  arr.writeUIntBE = BP.writeUIntBE                                                                                    // 1254\n  arr.writeUInt16LE = BP.writeUInt16LE                                                                                // 1255\n  arr.writeUInt16BE = BP.writeUInt16BE                                                                                // 1256\n  arr.writeUInt32LE = BP.writeUInt32LE                                                                                // 1257\n  arr.writeUInt32BE = BP.writeUInt32BE                                                                                // 1258\n  arr.writeIntLE = BP.writeIntLE                                                                                      // 1259\n  arr.writeIntBE = BP.writeIntBE                                                                                      // 1260\n  arr.writeInt8 = BP.writeInt8                                                                                        // 1261\n  arr.writeInt16LE = BP.writeInt16LE                                                                                  // 1262\n  arr.writeInt16BE = BP.writeInt16BE                                                                                  // 1263\n  arr.writeInt32LE = BP.writeInt32LE                                                                                  // 1264\n  arr.writeInt32BE = BP.writeInt32BE                                                                                  // 1265\n  arr.writeFloatLE = BP.writeFloatLE                                                                                  // 1266\n  arr.writeFloatBE = BP.writeFloatBE                                                                                  // 1267\n  arr.writeDoubleLE = BP.writeDoubleLE                                                                                // 1268\n  arr.writeDoubleBE = BP.writeDoubleBE                                                                                // 1269\n  arr.fill = BP.fill                                                                                                  // 1270\n  arr.inspect = BP.inspect                                                                                            // 1271\n  arr.toArrayBuffer = BP.toArrayBuffer                                                                                // 1272\n                                                                                                                      // 1273\n  return arr                                                                                                          // 1274\n}                                                                                                                     // 1275\n                                                                                                                      // 1276\nvar INVALID_BASE64_RE = /[^+\\/0-9A-z\\-]/g                                                                             // 1277\n                                                                                                                      // 1278\nfunction base64clean (str) {                                                                                          // 1279\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not                            // 1280\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                                // 1281\n  // Node converts strings with length < 2 to ''                                                                      // 1282\n  if (str.length < 2) return ''                                                                                       // 1283\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                             // 1284\n  while (str.length % 4 !== 0) {                                                                                      // 1285\n    str = str + '='                                                                                                   // 1286\n  }                                                                                                                   // 1287\n  return str                                                                                                          // 1288\n}                                                                                                                     // 1289\n                                                                                                                      // 1290\nfunction stringtrim (str) {                                                                                           // 1291\n  if (str.trim) return str.trim()                                                                                     // 1292\n  return str.replace(/^\\s+|\\s+$/g, '')                                                                                // 1293\n}                                                                                                                     // 1294\n                                                                                                                      // 1295\nfunction toHex (n) {                                                                                                  // 1296\n  if (n < 16) return '0' + n.toString(16)                                                                             // 1297\n  return n.toString(16)                                                                                               // 1298\n}                                                                                                                     // 1299\n                                                                                                                      // 1300\nfunction utf8ToBytes (string, units) {                                                                                // 1301\n  units = units || Infinity                                                                                           // 1302\n  var codePoint                                                                                                       // 1303\n  var length = string.length                                                                                          // 1304\n  var leadSurrogate = null                                                                                            // 1305\n  var bytes = []                                                                                                      // 1306\n  var i = 0                                                                                                           // 1307\n                                                                                                                      // 1308\n  for (; i < length; i++) {                                                                                           // 1309\n    codePoint = string.charCodeAt(i)                                                                                  // 1310\n                                                                                                                      // 1311\n    // is surrogate component                                                                                         // 1312\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                   // 1313\n      // last char was a lead                                                                                         // 1314\n      if (leadSurrogate) {                                                                                            // 1315\n        // 2 leads in a row                                                                                           // 1316\n        if (codePoint < 0xDC00) {                                                                                     // 1317\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                         // 1318\n          leadSurrogate = codePoint                                                                                   // 1319\n          continue                                                                                                    // 1320\n        } else {                                                                                                      // 1321\n          // valid surrogate pair                                                                                     // 1322\n          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000                                     // 1323\n          leadSurrogate = null                                                                                        // 1324\n        }                                                                                                             // 1325\n      } else {                                                                                                        // 1326\n        // no lead yet                                                                                                // 1327\n                                                                                                                      // 1328\n        if (codePoint > 0xDBFF) {                                                                                     // 1329\n          // unexpected trail                                                                                         // 1330\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                         // 1331\n          continue                                                                                                    // 1332\n        } else if (i + 1 === length) {                                                                                // 1333\n          // unpaired lead                                                                                            // 1334\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                         // 1335\n          continue                                                                                                    // 1336\n        } else {                                                                                                      // 1337\n          // valid lead                                                                                               // 1338\n          leadSurrogate = codePoint                                                                                   // 1339\n          continue                                                                                                    // 1340\n        }                                                                                                             // 1341\n      }                                                                                                               // 1342\n    } else if (leadSurrogate) {                                                                                       // 1343\n      // valid bmp char, but last char was a lead                                                                     // 1344\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                             // 1345\n      leadSurrogate = null                                                                                            // 1346\n    }                                                                                                                 // 1347\n                                                                                                                      // 1348\n    // encode utf8                                                                                                    // 1349\n    if (codePoint < 0x80) {                                                                                           // 1350\n      if ((units -= 1) < 0) break                                                                                     // 1351\n      bytes.push(codePoint)                                                                                           // 1352\n    } else if (codePoint < 0x800) {                                                                                   // 1353\n      if ((units -= 2) < 0) break                                                                                     // 1354\n      bytes.push(                                                                                                     // 1355\n        codePoint >> 0x6 | 0xC0,                                                                                      // 1356\n        codePoint & 0x3F | 0x80                                                                                       // 1357\n      )                                                                                                               // 1358\n    } else if (codePoint < 0x10000) {                                                                                 // 1359\n      if ((units -= 3) < 0) break                                                                                     // 1360\n      bytes.push(                                                                                                     // 1361\n        codePoint >> 0xC | 0xE0,                                                                                      // 1362\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                               // 1363\n        codePoint & 0x3F | 0x80                                                                                       // 1364\n      )                                                                                                               // 1365\n    } else if (codePoint < 0x200000) {                                                                                // 1366\n      if ((units -= 4) < 0) break                                                                                     // 1367\n      bytes.push(                                                                                                     // 1368\n        codePoint >> 0x12 | 0xF0,                                                                                     // 1369\n        codePoint >> 0xC & 0x3F | 0x80,                                                                               // 1370\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                               // 1371\n        codePoint & 0x3F | 0x80                                                                                       // 1372\n      )                                                                                                               // 1373\n    } else {                                                                                                          // 1374\n      throw new Error('Invalid code point')                                                                           // 1375\n    }                                                                                                                 // 1376\n  }                                                                                                                   // 1377\n                                                                                                                      // 1378\n  return bytes                                                                                                        // 1379\n}                                                                                                                     // 1380\n                                                                                                                      // 1381\nfunction asciiToBytes (str) {                                                                                         // 1382\n  var byteArray = []                                                                                                  // 1383\n  for (var i = 0; i < str.length; i++) {                                                                              // 1384\n    // Node's code seems to be doing this and not & 0x7F..                                                            // 1385\n    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                          // 1386\n  }                                                                                                                   // 1387\n  return byteArray                                                                                                    // 1388\n}                                                                                                                     // 1389\n                                                                                                                      // 1390\nfunction utf16leToBytes (str, units) {                                                                                // 1391\n  var c, hi, lo                                                                                                       // 1392\n  var byteArray = []                                                                                                  // 1393\n  for (var i = 0; i < str.length; i++) {                                                                              // 1394\n    if ((units -= 2) < 0) break                                                                                       // 1395\n                                                                                                                      // 1396\n    c = str.charCodeAt(i)                                                                                             // 1397\n    hi = c >> 8                                                                                                       // 1398\n    lo = c % 256                                                                                                      // 1399\n    byteArray.push(lo)                                                                                                // 1400\n    byteArray.push(hi)                                                                                                // 1401\n  }                                                                                                                   // 1402\n                                                                                                                      // 1403\n  return byteArray                                                                                                    // 1404\n}                                                                                                                     // 1405\n                                                                                                                      // 1406\nfunction base64ToBytes (str) {                                                                                        // 1407\n  return base64.toByteArray(base64clean(str))                                                                         // 1408\n}                                                                                                                     // 1409\n                                                                                                                      // 1410\nfunction blitBuffer (src, dst, offset, length) {                                                                      // 1411\n  for (var i = 0; i < length; i++) {                                                                                  // 1412\n    if ((i + offset >= dst.length) || (i >= src.length)) break                                                        // 1413\n    dst[i + offset] = src[i]                                                                                          // 1414\n  }                                                                                                                   // 1415\n  return i                                                                                                            // 1416\n}                                                                                                                     // 1417\n                                                                                                                      // 1418\nfunction decodeUtf8Char (str) {                                                                                       // 1419\n  try {                                                                                                               // 1420\n    return decodeURIComponent(str)                                                                                    // 1421\n  } catch (err) {                                                                                                     // 1422\n    return String.fromCharCode(0xFFFD) // UTF 8 invalid char                                                          // 1423\n  }                                                                                                                   // 1424\n}                                                                                                                     // 1425\n                                                                                                                      // 1426\n},{\"base64-js\":3,\"ieee754\":4,\"is-array\":5}],3:[function(require,module,exports){                                      // 1427\nvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';                                      // 1428\n                                                                                                                      // 1429\n;(function (exports) {                                                                                                // 1430\n\t'use strict';                                                                                                        // 1431\n                                                                                                                      // 1432\n  var Arr = (typeof Uint8Array !== 'undefined')                                                                       // 1433\n    ? Uint8Array                                                                                                      // 1434\n    : Array                                                                                                           // 1435\n                                                                                                                      // 1436\n\tvar PLUS   = '+'.charCodeAt(0)                                                                                       // 1437\n\tvar SLASH  = '/'.charCodeAt(0)                                                                                       // 1438\n\tvar NUMBER = '0'.charCodeAt(0)                                                                                       // 1439\n\tvar LOWER  = 'a'.charCodeAt(0)                                                                                       // 1440\n\tvar UPPER  = 'A'.charCodeAt(0)                                                                                       // 1441\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)                                                                                // 1442\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)                                                                               // 1443\n                                                                                                                      // 1444\n\tfunction decode (elt) {                                                                                              // 1445\n\t\tvar code = elt.charCodeAt(0)                                                                                        // 1446\n\t\tif (code === PLUS ||                                                                                                // 1447\n\t\t    code === PLUS_URL_SAFE)                                                                                         // 1448\n\t\t\treturn 62 // '+'                                                                                                   // 1449\n\t\tif (code === SLASH ||                                                                                               // 1450\n\t\t    code === SLASH_URL_SAFE)                                                                                        // 1451\n\t\t\treturn 63 // '/'                                                                                                   // 1452\n\t\tif (code < NUMBER)                                                                                                  // 1453\n\t\t\treturn -1 //no match                                                                                               // 1454\n\t\tif (code < NUMBER + 10)                                                                                             // 1455\n\t\t\treturn code - NUMBER + 26 + 26                                                                                     // 1456\n\t\tif (code < UPPER + 26)                                                                                              // 1457\n\t\t\treturn code - UPPER                                                                                                // 1458\n\t\tif (code < LOWER + 26)                                                                                              // 1459\n\t\t\treturn code - LOWER + 26                                                                                           // 1460\n\t}                                                                                                                    // 1461\n                                                                                                                      // 1462\n\tfunction b64ToByteArray (b64) {                                                                                      // 1463\n\t\tvar i, j, l, tmp, placeHolders, arr                                                                                 // 1464\n                                                                                                                      // 1465\n\t\tif (b64.length % 4 > 0) {                                                                                           // 1466\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')                                                  // 1467\n\t\t}                                                                                                                   // 1468\n                                                                                                                      // 1469\n\t\t// the number of equal signs (place holders)                                                                        // 1470\n\t\t// if there are two placeholders, than the two characters before it                                                 // 1471\n\t\t// represent one byte                                                                                               // 1472\n\t\t// if there is only one, then the three characters before it represent 2 bytes                                      // 1473\n\t\t// this is just a cheap hack to not do indexOf twice                                                                // 1474\n\t\tvar len = b64.length                                                                                                // 1475\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0                                // 1476\n                                                                                                                      // 1477\n\t\t// base64 is 4/3 + up to two characters of the original data                                                        // 1478\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)                                                                    // 1479\n                                                                                                                      // 1480\n\t\t// if there are placeholders, only get up to the last complete 4 chars                                              // 1481\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length                                                                  // 1482\n                                                                                                                      // 1483\n\t\tvar L = 0                                                                                                           // 1484\n                                                                                                                      // 1485\n\t\tfunction push (v) {                                                                                                 // 1486\n\t\t\tarr[L++] = v                                                                                                       // 1487\n\t\t}                                                                                                                   // 1488\n                                                                                                                      // 1489\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                         // 1490\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)                                                                                       // 1492\n\t\t\tpush((tmp & 0xFF00) >> 8)                                                                                          // 1493\n\t\t\tpush(tmp & 0xFF)                                                                                                   // 1494\n\t\t}                                                                                                                   // 1495\n                                                                                                                      // 1496\n\t\tif (placeHolders === 2) {                                                                                           // 1497\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)                                              // 1498\n\t\t\tpush(tmp & 0xFF)                                                                                                   // 1499\n\t\t} else if (placeHolders === 1) {                                                                                    // 1500\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)          // 1501\n\t\t\tpush((tmp >> 8) & 0xFF)                                                                                            // 1502\n\t\t\tpush(tmp & 0xFF)                                                                                                   // 1503\n\t\t}                                                                                                                   // 1504\n                                                                                                                      // 1505\n\t\treturn arr                                                                                                          // 1506\n\t}                                                                                                                    // 1507\n                                                                                                                      // 1508\n\tfunction uint8ToBase64 (uint8) {                                                                                     // 1509\n\t\tvar i,                                                                                                              // 1510\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes                                              // 1511\n\t\t\toutput = \"\",                                                                                                       // 1512\n\t\t\ttemp, length                                                                                                       // 1513\n                                                                                                                      // 1514\n\t\tfunction encode (num) {                                                                                             // 1515\n\t\t\treturn lookup.charAt(num)                                                                                          // 1516\n\t\t}                                                                                                                   // 1517\n                                                                                                                      // 1518\n\t\tfunction tripletToBase64 (num) {                                                                                    // 1519\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)          // 1520\n\t\t}                                                                                                                   // 1521\n                                                                                                                      // 1522\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later                                     // 1523\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {                                               // 1524\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                     // 1525\n\t\t\toutput += tripletToBase64(temp)                                                                                    // 1526\n\t\t}                                                                                                                   // 1527\n                                                                                                                      // 1528\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes                                              // 1529\n\t\tswitch (extraBytes) {                                                                                               // 1530\n\t\t\tcase 1:                                                                                                            // 1531\n\t\t\t\ttemp = uint8[uint8.length - 1]                                                                                    // 1532\n\t\t\t\toutput += encode(temp >> 2)                                                                                       // 1533\n\t\t\t\toutput += encode((temp << 4) & 0x3F)                                                                              // 1534\n\t\t\t\toutput += '=='                                                                                                    // 1535\n\t\t\t\tbreak                                                                                                             // 1536\n\t\t\tcase 2:                                                                                                            // 1537\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])                                                 // 1538\n\t\t\t\toutput += encode(temp >> 10)                                                                                      // 1539\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)                                                                              // 1540\n\t\t\t\toutput += encode((temp << 2) & 0x3F)                                                                              // 1541\n\t\t\t\toutput += '='                                                                                                     // 1542\n\t\t\t\tbreak                                                                                                             // 1543\n\t\t}                                                                                                                   // 1544\n                                                                                                                      // 1545\n\t\treturn output                                                                                                       // 1546\n\t}                                                                                                                    // 1547\n                                                                                                                      // 1548\n\texports.toByteArray = b64ToByteArray                                                                                 // 1549\n\texports.fromByteArray = uint8ToBase64                                                                                // 1550\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))                                                   // 1551\n                                                                                                                      // 1552\n},{}],4:[function(require,module,exports){                                                                            // 1553\nexports.read = function(buffer, offset, isLE, mLen, nBytes) {                                                         // 1554\n  var e, m,                                                                                                           // 1555\n      eLen = nBytes * 8 - mLen - 1,                                                                                   // 1556\n      eMax = (1 << eLen) - 1,                                                                                         // 1557\n      eBias = eMax >> 1,                                                                                              // 1558\n      nBits = -7,                                                                                                     // 1559\n      i = isLE ? (nBytes - 1) : 0,                                                                                    // 1560\n      d = isLE ? -1 : 1,                                                                                              // 1561\n      s = buffer[offset + i];                                                                                         // 1562\n                                                                                                                      // 1563\n  i += d;                                                                                                             // 1564\n                                                                                                                      // 1565\n  e = s & ((1 << (-nBits)) - 1);                                                                                      // 1566\n  s >>= (-nBits);                                                                                                     // 1567\n  nBits += eLen;                                                                                                      // 1568\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);                                            // 1569\n                                                                                                                      // 1570\n  m = e & ((1 << (-nBits)) - 1);                                                                                      // 1571\n  e >>= (-nBits);                                                                                                     // 1572\n  nBits += mLen;                                                                                                      // 1573\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);                                            // 1574\n                                                                                                                      // 1575\n  if (e === 0) {                                                                                                      // 1576\n    e = 1 - eBias;                                                                                                    // 1577\n  } else if (e === eMax) {                                                                                            // 1578\n    return m ? NaN : ((s ? -1 : 1) * Infinity);                                                                       // 1579\n  } else {                                                                                                            // 1580\n    m = m + Math.pow(2, mLen);                                                                                        // 1581\n    e = e - eBias;                                                                                                    // 1582\n  }                                                                                                                   // 1583\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);                                                                    // 1584\n};                                                                                                                    // 1585\n                                                                                                                      // 1586\nexports.write = function(buffer, value, offset, isLE, mLen, nBytes) {                                                 // 1587\n  var e, m, c,                                                                                                        // 1588\n      eLen = nBytes * 8 - mLen - 1,                                                                                   // 1589\n      eMax = (1 << eLen) - 1,                                                                                         // 1590\n      eBias = eMax >> 1,                                                                                              // 1591\n      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),                                                   // 1592\n      i = isLE ? 0 : (nBytes - 1),                                                                                    // 1593\n      d = isLE ? 1 : -1,                                                                                              // 1594\n      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;                                                        // 1595\n                                                                                                                      // 1596\n  value = Math.abs(value);                                                                                            // 1597\n                                                                                                                      // 1598\n  if (isNaN(value) || value === Infinity) {                                                                           // 1599\n    m = isNaN(value) ? 1 : 0;                                                                                         // 1600\n    e = eMax;                                                                                                         // 1601\n  } else {                                                                                                            // 1602\n    e = Math.floor(Math.log(value) / Math.LN2);                                                                       // 1603\n    if (value * (c = Math.pow(2, -e)) < 1) {                                                                          // 1604\n      e--;                                                                                                            // 1605\n      c *= 2;                                                                                                         // 1606\n    }                                                                                                                 // 1607\n    if (e + eBias >= 1) {                                                                                             // 1608\n      value += rt / c;                                                                                                // 1609\n    } else {                                                                                                          // 1610\n      value += rt * Math.pow(2, 1 - eBias);                                                                           // 1611\n    }                                                                                                                 // 1612\n    if (value * c >= 2) {                                                                                             // 1613\n      e++;                                                                                                            // 1614\n      c /= 2;                                                                                                         // 1615\n    }                                                                                                                 // 1616\n                                                                                                                      // 1617\n    if (e + eBias >= eMax) {                                                                                          // 1618\n      m = 0;                                                                                                          // 1619\n      e = eMax;                                                                                                       // 1620\n    } else if (e + eBias >= 1) {                                                                                      // 1621\n      m = (value * c - 1) * Math.pow(2, mLen);                                                                        // 1622\n      e = e + eBias;                                                                                                  // 1623\n    } else {                                                                                                          // 1624\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);                                                         // 1625\n      e = 0;                                                                                                          // 1626\n    }                                                                                                                 // 1627\n  }                                                                                                                   // 1628\n                                                                                                                      // 1629\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);                                      // 1630\n                                                                                                                      // 1631\n  e = (e << mLen) | m;                                                                                                // 1632\n  eLen += mLen;                                                                                                       // 1633\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);                                       // 1634\n                                                                                                                      // 1635\n  buffer[offset + i - d] |= s * 128;                                                                                  // 1636\n};                                                                                                                    // 1637\n                                                                                                                      // 1638\n},{}],5:[function(require,module,exports){                                                                            // 1639\n                                                                                                                      // 1640\n/**                                                                                                                   // 1641\n * isArray                                                                                                            // 1642\n */                                                                                                                   // 1643\n                                                                                                                      // 1644\nvar isArray = Array.isArray;                                                                                          // 1645\n                                                                                                                      // 1646\n/**                                                                                                                   // 1647\n * toString                                                                                                           // 1648\n */                                                                                                                   // 1649\n                                                                                                                      // 1650\nvar str = Object.prototype.toString;                                                                                  // 1651\n                                                                                                                      // 1652\n/**                                                                                                                   // 1653\n * Whether or not the given `val`                                                                                     // 1654\n * is an array.                                                                                                       // 1655\n *                                                                                                                    // 1656\n * example:                                                                                                           // 1657\n *                                                                                                                    // 1658\n *        isArray([]);                                                                                                // 1659\n *        // > true                                                                                                   // 1660\n *        isArray(arguments);                                                                                         // 1661\n *        // > false                                                                                                  // 1662\n *        isArray('');                                                                                                // 1663\n *        // > false                                                                                                  // 1664\n *                                                                                                                    // 1665\n * @param {mixed} val                                                                                                 // 1666\n * @return {bool}                                                                                                     // 1667\n */                                                                                                                   // 1668\n                                                                                                                      // 1669\nmodule.exports = isArray || function (val) {                                                                          // 1670\n  return !! val && '[object Array]' == str.call(val);                                                                 // 1671\n};                                                                                                                    // 1672\n                                                                                                                      // 1673\n},{}],6:[function(require,module,exports){                                                                            // 1674\n'use strict';                                                                                                         // 1675\n                                                                                                                      // 1676\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')                 // 1677\n                                                                                                                      // 1678\nexports.createHash = exports.Hash = require('create-hash')                                                            // 1679\n                                                                                                                      // 1680\nexports.createHmac = exports.Hmac = require('create-hmac')                                                            // 1681\n                                                                                                                      // 1682\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))\nexports.getHashes = function () {                                                                                     // 1684\n  return hashes;                                                                                                      // 1685\n}                                                                                                                     // 1686\n                                                                                                                      // 1687\nvar p = require('pbkdf2')                                                                                             // 1688\nexports.pbkdf2 = p.pbkdf2                                                                                             // 1689\nexports.pbkdf2Sync = p.pbkdf2Sync                                                                                     // 1690\n                                                                                                                      // 1691\nvar aes = require('browserify-aes');                                                                                  // 1692\n[                                                                                                                     // 1693\n  'Cipher',                                                                                                           // 1694\n  'createCipher',                                                                                                     // 1695\n  'Cipheriv',                                                                                                         // 1696\n  'createCipheriv',                                                                                                   // 1697\n  'Decipher',                                                                                                         // 1698\n  'createDecipher',                                                                                                   // 1699\n  'Decipheriv',                                                                                                       // 1700\n  'createDecipheriv',                                                                                                 // 1701\n  'getCiphers',                                                                                                       // 1702\n  'listCiphers'                                                                                                       // 1703\n].forEach(function (key) {                                                                                            // 1704\n  exports[key] = aes[key];                                                                                            // 1705\n})                                                                                                                    // 1706\n                                                                                                                      // 1707\nvar dh = require('diffie-hellman');                                                                                   // 1708\n[                                                                                                                     // 1709\n  'DiffieHellmanGroup',                                                                                               // 1710\n  'createDiffieHellmanGroup',                                                                                         // 1711\n  'getDiffieHellman',                                                                                                 // 1712\n  'createDiffieHellman',                                                                                              // 1713\n  'DiffieHellman'                                                                                                     // 1714\n].forEach(function (key) {                                                                                            // 1715\n  exports[key] = dh[key];                                                                                             // 1716\n})                                                                                                                    // 1717\n                                                                                                                      // 1718\nvar sign = require('browserify-sign');                                                                                // 1719\n[                                                                                                                     // 1720\n  'createSign',                                                                                                       // 1721\n  'Sign',                                                                                                             // 1722\n  'createVerify',                                                                                                     // 1723\n  'Verify'                                                                                                            // 1724\n].forEach(function (key) {                                                                                            // 1725\n  exports[key] = sign[key];                                                                                           // 1726\n})                                                                                                                    // 1727\n                                                                                                                      // 1728\nexports.createECDH = require('create-ecdh')                                                                           // 1729\n                                                                                                                      // 1730\nvar publicEncrypt = require('public-encrypt');                                                                        // 1731\n                                                                                                                      // 1732\n[                                                                                                                     // 1733\n  'publicEncrypt',                                                                                                    // 1734\n  'privateEncrypt',                                                                                                   // 1735\n  'publicDecrypt',                                                                                                    // 1736\n  'privateDecrypt'                                                                                                    // 1737\n].forEach(function (key) {                                                                                            // 1738\n  exports[key] = publicEncrypt[key];                                                                                  // 1739\n})                                                                                                                    // 1740\n                                                                                                                      // 1741\n// the least I can do is make error messages for the rest of the node.js/crypto api.                                  // 1742\n;[                                                                                                                    // 1743\n  'createCredentials'                                                                                                 // 1744\n].forEach(function (name) {                                                                                           // 1745\n  exports[name] = function () {                                                                                       // 1746\n    throw new Error([                                                                                                 // 1747\n      'sorry, ' + name + ' is not implemented yet',                                                                   // 1748\n      'we accept pull requests',                                                                                      // 1749\n      'https://github.com/crypto-browserify/crypto-browserify'                                                        // 1750\n    ].join('\\n'));                                                                                                    // 1751\n  }                                                                                                                   // 1752\n})                                                                                                                    // 1753\n                                                                                                                      // 1754\n},{\"browserify-aes\":10,\"browserify-sign\":26,\"browserify-sign/algos\":25,\"create-ecdh\":72,\"create-hash\":94,\"create-hmac\":106,\"diffie-hellman\":107,\"pbkdf2\":114,\"public-encrypt\":115,\"randombytes\":142}],7:[function(require,module,exports){\n(function (Buffer){                                                                                                   // 1756\nvar md5 = require('create-hash/md5');                                                                                 // 1757\nmodule.exports = EVP_BytesToKey;                                                                                      // 1758\nfunction EVP_BytesToKey(password, keyLen, ivLen) {                                                                    // 1759\n  if (!Buffer.isBuffer(password)) {                                                                                   // 1760\n    password = new Buffer(password, 'binary');                                                                        // 1761\n  }                                                                                                                   // 1762\n  keyLen = keyLen/8;                                                                                                  // 1763\n  ivLen = ivLen || 0;                                                                                                 // 1764\n  var ki = 0;                                                                                                         // 1765\n  var ii = 0;                                                                                                         // 1766\n  var key = new Buffer(keyLen);                                                                                       // 1767\n  var iv = new Buffer(ivLen);                                                                                         // 1768\n  var addmd = 0;                                                                                                      // 1769\n  var md_buf;                                                                                                         // 1770\n  var i;                                                                                                              // 1771\n  var bufs =  [];                                                                                                     // 1772\n  while (true) {                                                                                                      // 1773\n    if(addmd++ > 0) {                                                                                                 // 1774\n       bufs.push(md_buf);                                                                                             // 1775\n    }                                                                                                                 // 1776\n    bufs.push(password);                                                                                              // 1777\n    md_buf = md5(Buffer.concat(bufs));                                                                                // 1778\n    bufs = [];                                                                                                        // 1779\n    i = 0;                                                                                                            // 1780\n    if(keyLen > 0) {                                                                                                  // 1781\n      while(true) {                                                                                                   // 1782\n        if(keyLen === 0) {                                                                                            // 1783\n          break;                                                                                                      // 1784\n        }                                                                                                             // 1785\n        if(i === md_buf.length) {                                                                                     // 1786\n          break;                                                                                                      // 1787\n        }                                                                                                             // 1788\n        key[ki++] = md_buf[i];                                                                                        // 1789\n        keyLen--;                                                                                                     // 1790\n        i++;                                                                                                          // 1791\n       }                                                                                                              // 1792\n    }                                                                                                                 // 1793\n    if(ivLen > 0 && i !== md_buf.length) {                                                                            // 1794\n      while(true) {                                                                                                   // 1795\n        if(ivLen === 0) {                                                                                             // 1796\n          break;                                                                                                      // 1797\n        }                                                                                                             // 1798\n        if(i === md_buf.length) {                                                                                     // 1799\n          break;                                                                                                      // 1800\n        }                                                                                                             // 1801\n       iv[ii++] = md_buf[i];                                                                                          // 1802\n       ivLen--;                                                                                                       // 1803\n       i++;                                                                                                           // 1804\n     }                                                                                                                // 1805\n   }                                                                                                                  // 1806\n   if(keyLen === 0 && ivLen === 0) {                                                                                  // 1807\n      break;                                                                                                          // 1808\n    }                                                                                                                 // 1809\n  }                                                                                                                   // 1810\n  for(i=0;i<md_buf.length;i++) {                                                                                      // 1811\n    md_buf[i] = 0;                                                                                                    // 1812\n  }                                                                                                                   // 1813\n  return {                                                                                                            // 1814\n    key: key,                                                                                                         // 1815\n    iv: iv                                                                                                            // 1816\n  };                                                                                                                  // 1817\n}                                                                                                                     // 1818\n}).call(this,require(\"buffer\").Buffer)                                                                                // 1819\n                                                                                                                      // 1820\n},{\"buffer\":2,\"create-hash/md5\":96}],8:[function(require,module,exports){                                             // 1821\n(function (Buffer){                                                                                                   // 1822\n// based on the aes implimentation in triple sec                                                                      // 1823\n// https://github.com/keybase/triplesec                                                                               // 1824\n                                                                                                                      // 1825\n// which is in turn based on the one from crypto-js                                                                   // 1826\n// https://code.google.com/p/crypto-js/                                                                               // 1827\n                                                                                                                      // 1828\nvar uint_max = Math.pow(2, 32);                                                                                       // 1829\nfunction fixup_uint32(x) {                                                                                            // 1830\n    var ret, x_pos;                                                                                                   // 1831\n    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;             // 1832\n    return ret;                                                                                                       // 1833\n}                                                                                                                     // 1834\nfunction scrub_vec(v) {                                                                                               // 1835\n  var i, _i, _ref;                                                                                                    // 1836\n  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {                 // 1837\n    v[i] = 0;                                                                                                         // 1838\n  }                                                                                                                   // 1839\n  return false;                                                                                                       // 1840\n}                                                                                                                     // 1841\n                                                                                                                      // 1842\nfunction Global() {                                                                                                   // 1843\n  var i;                                                                                                              // 1844\n  this.SBOX = [];                                                                                                     // 1845\n  this.INV_SBOX = [];                                                                                                 // 1846\n  this.SUB_MIX = (function() {                                                                                        // 1847\n    var _i, _results;                                                                                                 // 1848\n    _results = [];                                                                                                    // 1849\n    for (i = _i = 0; _i < 4; i = ++_i) {                                                                              // 1850\n      _results.push([]);                                                                                              // 1851\n    }                                                                                                                 // 1852\n    return _results;                                                                                                  // 1853\n  })();                                                                                                               // 1854\n  this.INV_SUB_MIX = (function() {                                                                                    // 1855\n    var _i, _results;                                                                                                 // 1856\n    _results = [];                                                                                                    // 1857\n    for (i = _i = 0; _i < 4; i = ++_i) {                                                                              // 1858\n      _results.push([]);                                                                                              // 1859\n    }                                                                                                                 // 1860\n    return _results;                                                                                                  // 1861\n  })();                                                                                                               // 1862\n  this.init();                                                                                                        // 1863\n  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];                                     // 1864\n}                                                                                                                     // 1865\n                                                                                                                      // 1866\nGlobal.prototype.init = function() {                                                                                  // 1867\n  var d, i, sx, t, x, x2, x4, x8, xi, _i;                                                                             // 1868\n  d = (function() {                                                                                                   // 1869\n    var _i, _results;                                                                                                 // 1870\n    _results = [];                                                                                                    // 1871\n    for (i = _i = 0; _i < 256; i = ++_i) {                                                                            // 1872\n      if (i < 128) {                                                                                                  // 1873\n        _results.push(i << 1);                                                                                        // 1874\n      } else {                                                                                                        // 1875\n        _results.push((i << 1) ^ 0x11b);                                                                              // 1876\n      }                                                                                                               // 1877\n    }                                                                                                                 // 1878\n    return _results;                                                                                                  // 1879\n  })();                                                                                                               // 1880\n  x = 0;                                                                                                              // 1881\n  xi = 0;                                                                                                             // 1882\n  for (i = _i = 0; _i < 256; i = ++_i) {                                                                              // 1883\n    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);                                                          // 1884\n    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;                                                                             // 1885\n    this.SBOX[x] = sx;                                                                                                // 1886\n    this.INV_SBOX[sx] = x;                                                                                            // 1887\n    x2 = d[x];                                                                                                        // 1888\n    x4 = d[x2];                                                                                                       // 1889\n    x8 = d[x4];                                                                                                       // 1890\n    t = (d[sx] * 0x101) ^ (sx * 0x1010100);                                                                           // 1891\n    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);                                                                       // 1892\n    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);                                                                      // 1893\n    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);                                                                       // 1894\n    this.SUB_MIX[3][x] = t;                                                                                           // 1895\n    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);                                           // 1896\n    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);                                                                  // 1897\n    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);                                                                 // 1898\n    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);                                                                  // 1899\n    this.INV_SUB_MIX[3][sx] = t;                                                                                      // 1900\n    if (x === 0) {                                                                                                    // 1901\n      x = xi = 1;                                                                                                     // 1902\n    } else {                                                                                                          // 1903\n      x = x2 ^ d[d[d[x8 ^ x2]]];                                                                                      // 1904\n      xi ^= d[d[xi]];                                                                                                 // 1905\n    }                                                                                                                 // 1906\n  }                                                                                                                   // 1907\n  return true;                                                                                                        // 1908\n};                                                                                                                    // 1909\n                                                                                                                      // 1910\nvar G = new Global();                                                                                                 // 1911\n                                                                                                                      // 1912\n                                                                                                                      // 1913\nAES.blockSize = 4 * 4;                                                                                                // 1914\n                                                                                                                      // 1915\nAES.prototype.blockSize = AES.blockSize;                                                                              // 1916\n                                                                                                                      // 1917\nAES.keySize = 256 / 8;                                                                                                // 1918\n                                                                                                                      // 1919\nAES.prototype.keySize = AES.keySize;                                                                                  // 1920\n                                                                                                                      // 1921\n function bufferToArray(buf) {                                                                                        // 1922\n  var len = buf.length/4;                                                                                             // 1923\n  var out = new Array(len);                                                                                           // 1924\n  var i = -1;                                                                                                         // 1925\n  while (++i < len) {                                                                                                 // 1926\n    out[i] = buf.readUInt32BE(i * 4);                                                                                 // 1927\n  }                                                                                                                   // 1928\n  return out;                                                                                                         // 1929\n }                                                                                                                    // 1930\nfunction AES(key) {                                                                                                   // 1931\n  this._key = bufferToArray(key);                                                                                     // 1932\n  this._doReset();                                                                                                    // 1933\n}                                                                                                                     // 1934\n                                                                                                                      // 1935\nAES.prototype._doReset = function() {                                                                                 // 1936\n  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;                                                          // 1937\n  keyWords = this._key;                                                                                               // 1938\n  keySize = keyWords.length;                                                                                          // 1939\n  this._nRounds = keySize + 6;                                                                                        // 1940\n  ksRows = (this._nRounds + 1) * 4;                                                                                   // 1941\n  this._keySchedule = [];                                                                                             // 1942\n  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {                  // 1943\n    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);\n  }                                                                                                                   // 1945\n  this._invKeySchedule = [];                                                                                          // 1946\n  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {            // 1947\n    ksRow = ksRows - invKsRow;                                                                                        // 1948\n    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];                                                            // 1949\n    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];\n  }                                                                                                                   // 1951\n  return true;                                                                                                        // 1952\n};                                                                                                                    // 1953\n                                                                                                                      // 1954\nAES.prototype.encryptBlock = function(M) {                                                                            // 1955\n  M = bufferToArray(new Buffer(M));                                                                                   // 1956\n  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);                                              // 1957\n  var buf = new Buffer(16);                                                                                           // 1958\n  buf.writeUInt32BE(out[0], 0);                                                                                       // 1959\n  buf.writeUInt32BE(out[1], 4);                                                                                       // 1960\n  buf.writeUInt32BE(out[2], 8);                                                                                       // 1961\n  buf.writeUInt32BE(out[3], 12);                                                                                      // 1962\n  return buf;                                                                                                         // 1963\n};                                                                                                                    // 1964\n                                                                                                                      // 1965\nAES.prototype.decryptBlock = function(M) {                                                                            // 1966\n  M = bufferToArray(new Buffer(M));                                                                                   // 1967\n  var temp = [M[3], M[1]];                                                                                            // 1968\n  M[1] = temp[0];                                                                                                     // 1969\n  M[3] = temp[1];                                                                                                     // 1970\n  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);                                   // 1971\n  var buf = new Buffer(16);                                                                                           // 1972\n  buf.writeUInt32BE(out[0], 0);                                                                                       // 1973\n  buf.writeUInt32BE(out[3], 4);                                                                                       // 1974\n  buf.writeUInt32BE(out[2], 8);                                                                                       // 1975\n  buf.writeUInt32BE(out[1], 12);                                                                                      // 1976\n  return buf;                                                                                                         // 1977\n};                                                                                                                    // 1978\n                                                                                                                      // 1979\nAES.prototype.scrub = function() {                                                                                    // 1980\n  scrub_vec(this._keySchedule);                                                                                       // 1981\n  scrub_vec(this._invKeySchedule);                                                                                    // 1982\n  scrub_vec(this._key);                                                                                               // 1983\n};                                                                                                                    // 1984\n                                                                                                                      // 1985\nAES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {                                               // 1986\n  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;                                                         // 1987\n                                                                                                                      // 1988\n  s0 = M[0] ^ keySchedule[0];                                                                                         // 1989\n  s1 = M[1] ^ keySchedule[1];                                                                                         // 1990\n  s2 = M[2] ^ keySchedule[2];                                                                                         // 1991\n  s3 = M[3] ^ keySchedule[3];                                                                                         // 1992\n  ksRow = 4;                                                                                                          // 1993\n  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {    // 1994\n    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];\n    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];\n    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];\n    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];\n    s0 = t0;                                                                                                          // 1999\n    s1 = t1;                                                                                                          // 2000\n    s2 = t2;                                                                                                          // 2001\n    s3 = t3;                                                                                                          // 2002\n  }                                                                                                                   // 2003\n  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n  return [                                                                                                            // 2008\n    fixup_uint32(t0),                                                                                                 // 2009\n    fixup_uint32(t1),                                                                                                 // 2010\n    fixup_uint32(t2),                                                                                                 // 2011\n    fixup_uint32(t3)                                                                                                  // 2012\n  ];                                                                                                                  // 2013\n                                                                                                                      // 2014\n};                                                                                                                    // 2015\n                                                                                                                      // 2016\n                                                                                                                      // 2017\n                                                                                                                      // 2018\n                                                                                                                      // 2019\n  exports.AES = AES;                                                                                                  // 2020\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2021\n                                                                                                                      // 2022\n},{\"buffer\":2}],9:[function(require,module,exports){                                                                  // 2023\n(function (Buffer){                                                                                                   // 2024\nvar aes = require('./aes');                                                                                           // 2025\nvar Transform = require('./cipherBase');                                                                              // 2026\nvar inherits = require('inherits');                                                                                   // 2027\nvar GHASH = require('./ghash');                                                                                       // 2028\nvar xor = require('./xor');                                                                                           // 2029\ninherits(StreamCipher, Transform);                                                                                    // 2030\nmodule.exports = StreamCipher;                                                                                        // 2031\n                                                                                                                      // 2032\nfunction StreamCipher(mode, key, iv, decrypt) {                                                                       // 2033\n  if (!(this instanceof StreamCipher)) {                                                                              // 2034\n    return new StreamCipher(mode, key, iv);                                                                           // 2035\n  }                                                                                                                   // 2036\n  Transform.call(this);                                                                                               // 2037\n  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])]);                                                        // 2038\n  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])]);                                                                 // 2039\n  this._cipher = new aes.AES(key);                                                                                    // 2040\n  this._prev = new Buffer(iv.length);                                                                                 // 2041\n  this._cache = new Buffer('');                                                                                       // 2042\n  this._secCache = new Buffer('');                                                                                    // 2043\n  this._decrypt = decrypt;                                                                                            // 2044\n  this._alen = 0;                                                                                                     // 2045\n  this._len = 0;                                                                                                      // 2046\n  iv.copy(this._prev);                                                                                                // 2047\n  this._mode = mode;                                                                                                  // 2048\n  var h = new Buffer(4);                                                                                              // 2049\n  h.fill(0);                                                                                                          // 2050\n  this._ghash = new GHASH(this._cipher.encryptBlock(h));                                                              // 2051\n  this._authTag = null;                                                                                               // 2052\n  this._called = false;                                                                                               // 2053\n}                                                                                                                     // 2054\nStreamCipher.prototype._update = function (chunk) {                                                                   // 2055\n  if (!this._called && this._alen) {                                                                                  // 2056\n    var rump = 16 - (this._alen % 16);                                                                                // 2057\n    if (rump <16) {                                                                                                   // 2058\n      rump = new Buffer(rump);                                                                                        // 2059\n      rump.fill(0);                                                                                                   // 2060\n      this._ghash.update(rump);                                                                                       // 2061\n    }                                                                                                                 // 2062\n  }                                                                                                                   // 2063\n  this._called = true;                                                                                                // 2064\n  var out = this._mode.encrypt(this, chunk);                                                                          // 2065\n  if (this._decrypt) {                                                                                                // 2066\n    this._ghash.update(chunk);                                                                                        // 2067\n  } else {                                                                                                            // 2068\n    this._ghash.update(out);                                                                                          // 2069\n  }                                                                                                                   // 2070\n  this._len += chunk.length;                                                                                          // 2071\n  return out;                                                                                                         // 2072\n};                                                                                                                    // 2073\nStreamCipher.prototype._final = function () {                                                                         // 2074\n  if (this._decrypt && !this._authTag) {                                                                              // 2075\n    throw new Error('Unsupported state or unable to authenticate data');                                              // 2076\n  }                                                                                                                   // 2077\n  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));            // 2078\n  if (this._decrypt) {                                                                                                // 2079\n    if (xorTest(tag, this._authTag)) {                                                                                // 2080\n      throw new Error('Unsupported state or unable to authenticate data');                                            // 2081\n    }                                                                                                                 // 2082\n  } else {                                                                                                            // 2083\n    this._authTag = tag;                                                                                              // 2084\n  }                                                                                                                   // 2085\n  this._cipher.scrub();                                                                                               // 2086\n};                                                                                                                    // 2087\nStreamCipher.prototype.getAuthTag = function getAuthTag () {                                                          // 2088\n  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {                                                             // 2089\n    return this._authTag;                                                                                             // 2090\n  } else {                                                                                                            // 2091\n    throw new Error('Attempting to get auth tag in unsupported state');                                               // 2092\n  }                                                                                                                   // 2093\n};                                                                                                                    // 2094\nStreamCipher.prototype.setAuthTag = function setAuthTag (tag) {                                                       // 2095\n  if (this._decrypt) {                                                                                                // 2096\n    this._authTag = tag;                                                                                              // 2097\n  } else {                                                                                                            // 2098\n    throw new Error('Attempting to set auth tag in unsupported state');                                               // 2099\n  }                                                                                                                   // 2100\n};                                                                                                                    // 2101\nStreamCipher.prototype.setAAD = function setAAD (buf) {                                                               // 2102\n  if (!this._called) {                                                                                                // 2103\n    this._ghash.update(buf);                                                                                          // 2104\n    this._alen += buf.length;                                                                                         // 2105\n  } else {                                                                                                            // 2106\n    throw new Error('Attempting to set AAD in unsupported state');                                                    // 2107\n  }                                                                                                                   // 2108\n};                                                                                                                    // 2109\nfunction xorTest(a, b) {                                                                                              // 2110\n  var out = 0;                                                                                                        // 2111\n  if (a.length !== b.length) {                                                                                        // 2112\n    out++;                                                                                                            // 2113\n  }                                                                                                                   // 2114\n  var len = Math.min(a.length, b.length);                                                                             // 2115\n  var i = -1;                                                                                                         // 2116\n  while (++i < len) {                                                                                                 // 2117\n    out += (a[i] ^ b[i]);                                                                                             // 2118\n  }                                                                                                                   // 2119\n  return out;                                                                                                         // 2120\n}                                                                                                                     // 2121\n                                                                                                                      // 2122\n                                                                                                                      // 2123\n                                                                                                                      // 2124\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2125\n                                                                                                                      // 2126\n},{\"./aes\":8,\"./cipherBase\":11,\"./ghash\":14,\"./xor\":24,\"buffer\":2,\"inherits\":144}],10:[function(require,module,exports){\nvar ciphers = require('./encrypter');                                                                                 // 2128\nexports.createCipher = exports.Cipher = ciphers.createCipher;                                                         // 2129\nexports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;                                                   // 2130\nvar deciphers = require('./decrypter');                                                                               // 2131\nexports.createDecipher = exports.Decipher = deciphers.createDecipher;                                                 // 2132\nexports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;                                           // 2133\nvar modes = require('./modes');                                                                                       // 2134\nfunction getCiphers () {                                                                                              // 2135\n  return Object.keys(modes);                                                                                          // 2136\n}                                                                                                                     // 2137\nexports.listCiphers = exports.getCiphers = getCiphers;                                                                // 2138\n                                                                                                                      // 2139\n},{\"./decrypter\":12,\"./encrypter\":13,\"./modes\":15}],11:[function(require,module,exports){                             // 2140\n(function (Buffer){                                                                                                   // 2141\nvar Transform = require('stream').Transform;                                                                          // 2142\nvar inherits = require('inherits');                                                                                   // 2143\n                                                                                                                      // 2144\nmodule.exports = CipherBase;                                                                                          // 2145\ninherits(CipherBase, Transform);                                                                                      // 2146\nfunction CipherBase() {                                                                                               // 2147\n  Transform.call(this);                                                                                               // 2148\n}                                                                                                                     // 2149\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {                                                  // 2150\n  if (typeof data === 'string') {                                                                                     // 2151\n    data = new Buffer(data, inputEnc);                                                                                // 2152\n  }                                                                                                                   // 2153\n  var outData = this._update(data);                                                                                   // 2154\n  if (outputEnc) {                                                                                                    // 2155\n    outData = outData.toString(outputEnc);                                                                            // 2156\n  }                                                                                                                   // 2157\n  return outData;                                                                                                     // 2158\n};                                                                                                                    // 2159\nCipherBase.prototype._transform = function (data, _, next) {                                                          // 2160\n  this.push(this._update(data));                                                                                      // 2161\n  next();                                                                                                             // 2162\n};                                                                                                                    // 2163\nCipherBase.prototype._flush = function (next) {                                                                       // 2164\n  try {                                                                                                               // 2165\n    this.push(this._final());                                                                                         // 2166\n  } catch(e) {                                                                                                        // 2167\n    return next(e);                                                                                                   // 2168\n  }                                                                                                                   // 2169\n  next();                                                                                                             // 2170\n};                                                                                                                    // 2171\nCipherBase.prototype.final = function (outputEnc) {                                                                   // 2172\n  var outData = this._final() || new Buffer('');                                                                      // 2173\n  if (outputEnc) {                                                                                                    // 2174\n    outData = outData.toString(outputEnc);                                                                            // 2175\n  }                                                                                                                   // 2176\n  return outData;                                                                                                     // 2177\n};                                                                                                                    // 2178\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2179\n                                                                                                                      // 2180\n},{\"buffer\":2,\"inherits\":144,\"stream\":158}],12:[function(require,module,exports){                                     // 2181\n(function (Buffer){                                                                                                   // 2182\nvar aes = require('./aes');                                                                                           // 2183\nvar Transform = require('./cipherBase');                                                                              // 2184\nvar inherits = require('inherits');                                                                                   // 2185\nvar modes = require('./modes');                                                                                       // 2186\nvar StreamCipher = require('./streamCipher');                                                                         // 2187\nvar AuthCipher = require('./authCipher');                                                                             // 2188\nvar ebtk = require('./EVP_BytesToKey');                                                                               // 2189\n                                                                                                                      // 2190\ninherits(Decipher, Transform);                                                                                        // 2191\nfunction Decipher(mode, key, iv) {                                                                                    // 2192\n  if (!(this instanceof Decipher)) {                                                                                  // 2193\n    return new Decipher(mode, key, iv);                                                                               // 2194\n  }                                                                                                                   // 2195\n  Transform.call(this);                                                                                               // 2196\n  this._cache = new Splitter();                                                                                       // 2197\n  this._last = void 0;                                                                                                // 2198\n  this._cipher = new aes.AES(key);                                                                                    // 2199\n  this._prev = new Buffer(iv.length);                                                                                 // 2200\n  iv.copy(this._prev);                                                                                                // 2201\n  this._mode = mode;                                                                                                  // 2202\n  this._autopadding = true;                                                                                           // 2203\n}                                                                                                                     // 2204\nDecipher.prototype._update = function (data) {                                                                        // 2205\n  this._cache.add(data);                                                                                              // 2206\n  var chunk;                                                                                                          // 2207\n  var thing;                                                                                                          // 2208\n  var out = [];                                                                                                       // 2209\n  while ((chunk = this._cache.get(this._autopadding))) {                                                              // 2210\n    thing = this._mode.decrypt(this, chunk);                                                                          // 2211\n    out.push(thing);                                                                                                  // 2212\n  }                                                                                                                   // 2213\n  return Buffer.concat(out);                                                                                          // 2214\n};                                                                                                                    // 2215\nDecipher.prototype._final = function () {                                                                             // 2216\n  var chunk = this._cache.flush();                                                                                    // 2217\n  if (this._autopadding) {                                                                                            // 2218\n    return unpad(this._mode.decrypt(this, chunk));                                                                    // 2219\n  } else if (chunk) {                                                                                                 // 2220\n    throw new Error('data not multiple of block length');                                                             // 2221\n  }                                                                                                                   // 2222\n};                                                                                                                    // 2223\nDecipher.prototype.setAutoPadding = function (setTo) {                                                                // 2224\n  this._autopadding = !!setTo;                                                                                        // 2225\n};                                                                                                                    // 2226\nfunction Splitter() {                                                                                                 // 2227\n   if (!(this instanceof Splitter)) {                                                                                 // 2228\n    return new Splitter();                                                                                            // 2229\n  }                                                                                                                   // 2230\n  this.cache = new Buffer('');                                                                                        // 2231\n}                                                                                                                     // 2232\nSplitter.prototype.add = function (data) {                                                                            // 2233\n  this.cache = Buffer.concat([this.cache, data]);                                                                     // 2234\n};                                                                                                                    // 2235\n                                                                                                                      // 2236\nSplitter.prototype.get = function (autoPadding) {                                                                     // 2237\n  var out;                                                                                                            // 2238\n  if (autoPadding) {                                                                                                  // 2239\n    if (this.cache.length > 16) {                                                                                     // 2240\n      out = this.cache.slice(0, 16);                                                                                  // 2241\n      this.cache = this.cache.slice(16);                                                                              // 2242\n      return out;                                                                                                     // 2243\n    }                                                                                                                 // 2244\n  } else {                                                                                                            // 2245\n    if (this.cache.length >= 16) {                                                                                    // 2246\n      out = this.cache.slice(0, 16);                                                                                  // 2247\n      this.cache = this.cache.slice(16);                                                                              // 2248\n      return out;                                                                                                     // 2249\n    }                                                                                                                 // 2250\n  }                                                                                                                   // 2251\n  return null;                                                                                                        // 2252\n};                                                                                                                    // 2253\nSplitter.prototype.flush = function () {                                                                              // 2254\n  if (this.cache.length) {                                                                                            // 2255\n    return this.cache;                                                                                                // 2256\n  }                                                                                                                   // 2257\n};                                                                                                                    // 2258\nfunction unpad(last) {                                                                                                // 2259\n  var padded = last[15];                                                                                              // 2260\n  var i = -1;                                                                                                         // 2261\n  while (++i < padded) {                                                                                              // 2262\n    if (last[(i + (16 - padded))] !== padded) {                                                                       // 2263\n      throw new Error('unable to decrypt data');                                                                      // 2264\n    }                                                                                                                 // 2265\n  }                                                                                                                   // 2266\n  if (padded === 16) {                                                                                                // 2267\n    return;                                                                                                           // 2268\n  }                                                                                                                   // 2269\n  return last.slice(0, 16 - padded);                                                                                  // 2270\n}                                                                                                                     // 2271\n                                                                                                                      // 2272\nvar modelist = {                                                                                                      // 2273\n  ECB: require('./modes/ecb'),                                                                                        // 2274\n  CBC: require('./modes/cbc'),                                                                                        // 2275\n  CFB: require('./modes/cfb'),                                                                                        // 2276\n  CFB8: require('./modes/cfb8'),                                                                                      // 2277\n  CFB1: require('./modes/cfb1'),                                                                                      // 2278\n  OFB: require('./modes/ofb'),                                                                                        // 2279\n  CTR: require('./modes/ctr'),                                                                                        // 2280\n  GCM: require('./modes/ctr')                                                                                         // 2281\n};                                                                                                                    // 2282\n                                                                                                                      // 2283\n                                                                                                                      // 2284\nfunction createDecipheriv(suite, password, iv) {                                                                      // 2285\n  var config = modes[suite.toLowerCase()];                                                                            // 2286\n  if (!config) {                                                                                                      // 2287\n    throw new TypeError('invalid suite type');                                                                        // 2288\n  }                                                                                                                   // 2289\n  if (typeof iv === 'string') {                                                                                       // 2290\n    iv = new Buffer(iv);                                                                                              // 2291\n  }                                                                                                                   // 2292\n  if (typeof password === 'string') {                                                                                 // 2293\n    password = new Buffer(password);                                                                                  // 2294\n  }                                                                                                                   // 2295\n  if (password.length !== config.key/8) {                                                                             // 2296\n    throw new TypeError('invalid key length ' + password.length);                                                     // 2297\n  }                                                                                                                   // 2298\n  if (iv.length !== config.iv) {                                                                                      // 2299\n    throw new TypeError('invalid iv length ' + iv.length);                                                            // 2300\n  }                                                                                                                   // 2301\n  if (config.type === 'stream') {                                                                                     // 2302\n    return new StreamCipher(modelist[config.mode], password, iv, true);                                               // 2303\n  } else if (config.type === 'auth') {                                                                                // 2304\n    return new AuthCipher(modelist[config.mode], password, iv, true);                                                 // 2305\n  }                                                                                                                   // 2306\n  return new Decipher(modelist[config.mode], password, iv);                                                           // 2307\n}                                                                                                                     // 2308\n                                                                                                                      // 2309\nfunction createDecipher (suite, password) {                                                                           // 2310\n  var config = modes[suite.toLowerCase()];                                                                            // 2311\n  if (!config) {                                                                                                      // 2312\n    throw new TypeError('invalid suite type');                                                                        // 2313\n  }                                                                                                                   // 2314\n  var keys = ebtk(password, config.key, config.iv);                                                                   // 2315\n  return createDecipheriv(suite, keys.key, keys.iv);                                                                  // 2316\n}                                                                                                                     // 2317\nexports.createDecipher = createDecipher;                                                                              // 2318\nexports.createDecipheriv = createDecipheriv;                                                                          // 2319\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2320\n                                                                                                                      // 2321\n},{\"./EVP_BytesToKey\":7,\"./aes\":8,\"./authCipher\":9,\"./cipherBase\":11,\"./modes\":15,\"./modes/cbc\":16,\"./modes/cfb\":17,\"./modes/cfb1\":18,\"./modes/cfb8\":19,\"./modes/ctr\":20,\"./modes/ecb\":21,\"./modes/ofb\":22,\"./streamCipher\":23,\"buffer\":2,\"inherits\":144}],13:[function(require,module,exports){\n(function (Buffer){                                                                                                   // 2323\nvar aes = require('./aes');                                                                                           // 2324\nvar Transform = require('./cipherBase');                                                                              // 2325\nvar inherits = require('inherits');                                                                                   // 2326\nvar modes = require('./modes');                                                                                       // 2327\nvar ebtk = require('./EVP_BytesToKey');                                                                               // 2328\nvar StreamCipher = require('./streamCipher');                                                                         // 2329\nvar AuthCipher = require('./authCipher');                                                                             // 2330\ninherits(Cipher, Transform);                                                                                          // 2331\nfunction Cipher(mode, key, iv) {                                                                                      // 2332\n  if (!(this instanceof Cipher)) {                                                                                    // 2333\n    return new Cipher(mode, key, iv);                                                                                 // 2334\n  }                                                                                                                   // 2335\n  Transform.call(this);                                                                                               // 2336\n  this._cache = new Splitter();                                                                                       // 2337\n  this._cipher = new aes.AES(key);                                                                                    // 2338\n  this._prev = new Buffer(iv.length);                                                                                 // 2339\n  iv.copy(this._prev);                                                                                                // 2340\n  this._mode = mode;                                                                                                  // 2341\n  this._autopadding = true;                                                                                           // 2342\n}                                                                                                                     // 2343\nCipher.prototype._update = function (data) {                                                                          // 2344\n  this._cache.add(data);                                                                                              // 2345\n  var chunk;                                                                                                          // 2346\n  var thing;                                                                                                          // 2347\n  var out = [];                                                                                                       // 2348\n  while ((chunk = this._cache.get())) {                                                                               // 2349\n    thing = this._mode.encrypt(this, chunk);                                                                          // 2350\n    out.push(thing);                                                                                                  // 2351\n  }                                                                                                                   // 2352\n  return Buffer.concat(out);                                                                                          // 2353\n};                                                                                                                    // 2354\nCipher.prototype._final = function () {                                                                               // 2355\n  var chunk = this._cache.flush();                                                                                    // 2356\n  if (this._autopadding) {                                                                                            // 2357\n    chunk = this._mode.encrypt(this, chunk);                                                                          // 2358\n    this._cipher.scrub();                                                                                             // 2359\n    return chunk;                                                                                                     // 2360\n  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {                                          // 2361\n    this._cipher.scrub();                                                                                             // 2362\n    throw new Error('data not multiple of block length');                                                             // 2363\n  }                                                                                                                   // 2364\n};                                                                                                                    // 2365\nCipher.prototype.setAutoPadding = function (setTo) {                                                                  // 2366\n  this._autopadding = !!setTo;                                                                                        // 2367\n};                                                                                                                    // 2368\n                                                                                                                      // 2369\nfunction Splitter() {                                                                                                 // 2370\n   if (!(this instanceof Splitter)) {                                                                                 // 2371\n    return new Splitter();                                                                                            // 2372\n  }                                                                                                                   // 2373\n  this.cache = new Buffer('');                                                                                        // 2374\n}                                                                                                                     // 2375\nSplitter.prototype.add = function (data) {                                                                            // 2376\n  this.cache = Buffer.concat([this.cache, data]);                                                                     // 2377\n};                                                                                                                    // 2378\n                                                                                                                      // 2379\nSplitter.prototype.get = function () {                                                                                // 2380\n  if (this.cache.length > 15) {                                                                                       // 2381\n    var out = this.cache.slice(0, 16);                                                                                // 2382\n    this.cache = this.cache.slice(16);                                                                                // 2383\n    return out;                                                                                                       // 2384\n  }                                                                                                                   // 2385\n  return null;                                                                                                        // 2386\n};                                                                                                                    // 2387\nSplitter.prototype.flush = function () {                                                                              // 2388\n  var len = 16 - this.cache.length;                                                                                   // 2389\n  var padBuff = new Buffer(len);                                                                                      // 2390\n                                                                                                                      // 2391\n  var i = -1;                                                                                                         // 2392\n  while (++i < len) {                                                                                                 // 2393\n    padBuff.writeUInt8(len, i);                                                                                       // 2394\n  }                                                                                                                   // 2395\n  var out = Buffer.concat([this.cache, padBuff]);                                                                     // 2396\n  return out;                                                                                                         // 2397\n};                                                                                                                    // 2398\nvar modelist = {                                                                                                      // 2399\n  ECB: require('./modes/ecb'),                                                                                        // 2400\n  CBC: require('./modes/cbc'),                                                                                        // 2401\n  CFB: require('./modes/cfb'),                                                                                        // 2402\n  CFB8: require('./modes/cfb8'),                                                                                      // 2403\n  CFB1: require('./modes/cfb1'),                                                                                      // 2404\n  OFB: require('./modes/ofb'),                                                                                        // 2405\n  CTR: require('./modes/ctr'),                                                                                        // 2406\n  GCM: require('./modes/ctr')                                                                                         // 2407\n};                                                                                                                    // 2408\n                                                                                                                      // 2409\nfunction createCipheriv(suite, password, iv) {                                                                        // 2410\n  var config = modes[suite.toLowerCase()];                                                                            // 2411\n  if (!config) {                                                                                                      // 2412\n    throw new TypeError('invalid suite type');                                                                        // 2413\n  }                                                                                                                   // 2414\n  if (typeof iv === 'string') {                                                                                       // 2415\n    iv = new Buffer(iv);                                                                                              // 2416\n  }                                                                                                                   // 2417\n  if (typeof password === 'string') {                                                                                 // 2418\n    password = new Buffer(password);                                                                                  // 2419\n  }                                                                                                                   // 2420\n  if (password.length !== config.key/8) {                                                                             // 2421\n    throw new TypeError('invalid key length ' + password.length);                                                     // 2422\n  }                                                                                                                   // 2423\n  if (iv.length !== config.iv) {                                                                                      // 2424\n    throw new TypeError('invalid iv length ' + iv.length);                                                            // 2425\n  }                                                                                                                   // 2426\n  if (config.type === 'stream') {                                                                                     // 2427\n    return new StreamCipher(modelist[config.mode], password, iv);                                                     // 2428\n  } else if (config.type === 'auth') {                                                                                // 2429\n    return new AuthCipher(modelist[config.mode], password, iv);                                                       // 2430\n  }                                                                                                                   // 2431\n  return new Cipher(modelist[config.mode], password, iv);                                                             // 2432\n}                                                                                                                     // 2433\nfunction createCipher (suite, password) {                                                                             // 2434\n  var config = modes[suite.toLowerCase()];                                                                            // 2435\n  if (!config) {                                                                                                      // 2436\n    throw new TypeError('invalid suite type');                                                                        // 2437\n  }                                                                                                                   // 2438\n  var keys = ebtk(password, config.key, config.iv);                                                                   // 2439\n  return createCipheriv(suite, keys.key, keys.iv);                                                                    // 2440\n}                                                                                                                     // 2441\n                                                                                                                      // 2442\nexports.createCipheriv = createCipheriv;                                                                              // 2443\nexports.createCipher = createCipher;                                                                                  // 2444\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2445\n                                                                                                                      // 2446\n},{\"./EVP_BytesToKey\":7,\"./aes\":8,\"./authCipher\":9,\"./cipherBase\":11,\"./modes\":15,\"./modes/cbc\":16,\"./modes/cfb\":17,\"./modes/cfb1\":18,\"./modes/cfb8\":19,\"./modes/ctr\":20,\"./modes/ecb\":21,\"./modes/ofb\":22,\"./streamCipher\":23,\"buffer\":2,\"inherits\":144}],14:[function(require,module,exports){\n(function (Buffer){                                                                                                   // 2448\nvar zeros = new Buffer(16);                                                                                           // 2449\nzeros.fill(0);                                                                                                        // 2450\nmodule.exports = GHASH;                                                                                               // 2451\nfunction GHASH(key){                                                                                                  // 2452\n  this.h = key;                                                                                                       // 2453\n  this.state = new Buffer(16);                                                                                        // 2454\n  this.state.fill(0);                                                                                                 // 2455\n  this.cache = new Buffer('');                                                                                        // 2456\n}                                                                                                                     // 2457\n// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html                                       // 2458\n// by Juho Vähä-Herttua                                                                                               // 2459\nGHASH.prototype.ghash = function (block) {                                                                            // 2460\n  var i = -1;                                                                                                         // 2461\n  while (++i < block.length) {                                                                                        // 2462\n   this.state[i] ^= block[i];                                                                                         // 2463\n  }                                                                                                                   // 2464\n  this._multiply();                                                                                                   // 2465\n};                                                                                                                    // 2466\n                                                                                                                      // 2467\nGHASH.prototype._multiply = function () {                                                                             // 2468\n  var Vi = toArray(this.h);                                                                                           // 2469\n  var Zi = [0, 0, 0, 0];                                                                                              // 2470\n  var j, xi, lsb_Vi;                                                                                                  // 2471\n  var i = -1;                                                                                                         // 2472\n  while (++i < 128) {                                                                                                 // 2473\n    xi = (this.state[~~(i/8)] & (1 << (7-i%8))) !== 0;                                                                // 2474\n    if (xi) {                                                                                                         // 2475\n      // Z_i+1 = Z_i ^ V_i                                                                                            // 2476\n      Zi = xor(Zi, Vi);                                                                                               // 2477\n    }                                                                                                                 // 2478\n                                                                                                                      // 2479\n    // Store the value of LSB(V_i)                                                                                    // 2480\n    lsb_Vi = (Vi[3] & 1) !== 0;                                                                                       // 2481\n                                                                                                                      // 2482\n    // V_i+1 = V_i >> 1                                                                                               // 2483\n    for (j=3; j>0; j--) {                                                                                             // 2484\n      Vi[j] = (Vi[j] >>> 1) | ((Vi[j-1]&1) << 31);                                                                    // 2485\n    }                                                                                                                 // 2486\n    Vi[0] = Vi[0] >>> 1;                                                                                              // 2487\n                                                                                                                      // 2488\n    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R                                                                       // 2489\n    if (lsb_Vi) {                                                                                                     // 2490\n      Vi[0] = Vi[0] ^ (0xe1 << 24);                                                                                   // 2491\n    }                                                                                                                 // 2492\n  }                                                                                                                   // 2493\n  this.state = fromArray(Zi);                                                                                         // 2494\n};                                                                                                                    // 2495\nGHASH.prototype.update = function (buf) {                                                                             // 2496\n  this.cache = Buffer.concat([this.cache, buf]);                                                                      // 2497\n  var chunk;                                                                                                          // 2498\n  while (this.cache.length >= 16) {                                                                                   // 2499\n    chunk = this.cache.slice(0, 16);                                                                                  // 2500\n    this.cache = this.cache.slice(16);                                                                                // 2501\n    this.ghash(chunk);                                                                                                // 2502\n  }                                                                                                                   // 2503\n};                                                                                                                    // 2504\nGHASH.prototype.final = function (abl, bl) {                                                                          // 2505\n  if (this.cache.length) {                                                                                            // 2506\n    this.ghash(Buffer.concat([this.cache, zeros], 16));                                                               // 2507\n  }                                                                                                                   // 2508\n  this.ghash(fromArray([                                                                                              // 2509\n     0, abl,                                                                                                          // 2510\n     0, bl                                                                                                            // 2511\n   ]));                                                                                                               // 2512\n  return this.state;                                                                                                  // 2513\n};                                                                                                                    // 2514\n                                                                                                                      // 2515\nfunction toArray(buf) {                                                                                               // 2516\n  return [                                                                                                            // 2517\n    buf.readUInt32BE(0),                                                                                              // 2518\n    buf.readUInt32BE(4),                                                                                              // 2519\n    buf.readUInt32BE(8),                                                                                              // 2520\n    buf.readUInt32BE(12)                                                                                              // 2521\n  ];                                                                                                                  // 2522\n}                                                                                                                     // 2523\nfunction fromArray(out) {                                                                                             // 2524\n  out = out.map(fixup_uint32);                                                                                        // 2525\n  var buf = new Buffer(16);                                                                                           // 2526\n  buf.writeUInt32BE(out[0], 0);                                                                                       // 2527\n  buf.writeUInt32BE(out[1], 4);                                                                                       // 2528\n  buf.writeUInt32BE(out[2], 8);                                                                                       // 2529\n  buf.writeUInt32BE(out[3], 12);                                                                                      // 2530\n  return buf;                                                                                                         // 2531\n}                                                                                                                     // 2532\nvar uint_max = Math.pow(2, 32);                                                                                       // 2533\nfunction fixup_uint32(x) {                                                                                            // 2534\n    var ret, x_pos;                                                                                                   // 2535\n    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;             // 2536\n    return ret;                                                                                                       // 2537\n}                                                                                                                     // 2538\nfunction xor(a, b) {                                                                                                  // 2539\n  return [                                                                                                            // 2540\n    a[0] ^ b[0],                                                                                                      // 2541\n    a[1] ^ b[1],                                                                                                      // 2542\n    a[2] ^ b[2],                                                                                                      // 2543\n    a[3] ^ b[3],                                                                                                      // 2544\n  ];                                                                                                                  // 2545\n}                                                                                                                     // 2546\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2547\n                                                                                                                      // 2548\n},{\"buffer\":2}],15:[function(require,module,exports){                                                                 // 2549\nexports['aes-128-ecb'] = {                                                                                            // 2550\n  cipher: 'AES',                                                                                                      // 2551\n  key: 128,                                                                                                           // 2552\n  iv: 0,                                                                                                              // 2553\n  mode: 'ECB',                                                                                                        // 2554\n  type: 'block'                                                                                                       // 2555\n};                                                                                                                    // 2556\nexports['aes-192-ecb'] = {                                                                                            // 2557\n  cipher: 'AES',                                                                                                      // 2558\n  key: 192,                                                                                                           // 2559\n  iv: 0,                                                                                                              // 2560\n  mode: 'ECB',                                                                                                        // 2561\n  type: 'block'                                                                                                       // 2562\n};                                                                                                                    // 2563\nexports['aes-256-ecb'] = {                                                                                            // 2564\n  cipher: 'AES',                                                                                                      // 2565\n  key: 256,                                                                                                           // 2566\n  iv: 0,                                                                                                              // 2567\n  mode: 'ECB',                                                                                                        // 2568\n  type: 'block'                                                                                                       // 2569\n};                                                                                                                    // 2570\nexports['aes-128-cbc'] = {                                                                                            // 2571\n  cipher: 'AES',                                                                                                      // 2572\n  key: 128,                                                                                                           // 2573\n  iv: 16,                                                                                                             // 2574\n  mode: 'CBC',                                                                                                        // 2575\n  type: 'block'                                                                                                       // 2576\n};                                                                                                                    // 2577\nexports['aes-192-cbc'] = {                                                                                            // 2578\n  cipher: 'AES',                                                                                                      // 2579\n  key: 192,                                                                                                           // 2580\n  iv: 16,                                                                                                             // 2581\n  mode: 'CBC',                                                                                                        // 2582\n  type: 'block'                                                                                                       // 2583\n};                                                                                                                    // 2584\nexports['aes-256-cbc'] = {                                                                                            // 2585\n  cipher: 'AES',                                                                                                      // 2586\n  key: 256,                                                                                                           // 2587\n  iv: 16,                                                                                                             // 2588\n  mode: 'CBC',                                                                                                        // 2589\n  type: 'block'                                                                                                       // 2590\n};                                                                                                                    // 2591\nexports['aes128'] = exports['aes-128-cbc'];                                                                           // 2592\nexports['aes192'] = exports['aes-192-cbc'];                                                                           // 2593\nexports['aes256'] = exports['aes-256-cbc'];                                                                           // 2594\nexports['aes-128-cfb'] = {                                                                                            // 2595\n  cipher: 'AES',                                                                                                      // 2596\n  key: 128,                                                                                                           // 2597\n  iv: 16,                                                                                                             // 2598\n  mode: 'CFB',                                                                                                        // 2599\n  type: 'stream'                                                                                                      // 2600\n};                                                                                                                    // 2601\nexports['aes-192-cfb'] = {                                                                                            // 2602\n  cipher: 'AES',                                                                                                      // 2603\n  key: 192,                                                                                                           // 2604\n  iv: 16,                                                                                                             // 2605\n  mode: 'CFB',                                                                                                        // 2606\n  type: 'stream'                                                                                                      // 2607\n};                                                                                                                    // 2608\nexports['aes-256-cfb'] = {                                                                                            // 2609\n  cipher: 'AES',                                                                                                      // 2610\n  key: 256,                                                                                                           // 2611\n  iv: 16,                                                                                                             // 2612\n  mode: 'CFB',                                                                                                        // 2613\n  type: 'stream'                                                                                                      // 2614\n};                                                                                                                    // 2615\nexports['aes-128-cfb8'] = {                                                                                           // 2616\n  cipher: 'AES',                                                                                                      // 2617\n  key: 128,                                                                                                           // 2618\n  iv: 16,                                                                                                             // 2619\n  mode: 'CFB8',                                                                                                       // 2620\n  type: 'stream'                                                                                                      // 2621\n};                                                                                                                    // 2622\nexports['aes-192-cfb8'] = {                                                                                           // 2623\n  cipher: 'AES',                                                                                                      // 2624\n  key: 192,                                                                                                           // 2625\n  iv: 16,                                                                                                             // 2626\n  mode: 'CFB8',                                                                                                       // 2627\n  type: 'stream'                                                                                                      // 2628\n};                                                                                                                    // 2629\nexports['aes-256-cfb8'] = {                                                                                           // 2630\n  cipher: 'AES',                                                                                                      // 2631\n  key: 256,                                                                                                           // 2632\n  iv: 16,                                                                                                             // 2633\n  mode: 'CFB8',                                                                                                       // 2634\n  type: 'stream'                                                                                                      // 2635\n};                                                                                                                    // 2636\nexports['aes-128-cfb1'] = {                                                                                           // 2637\n  cipher: 'AES',                                                                                                      // 2638\n  key: 128,                                                                                                           // 2639\n  iv: 16,                                                                                                             // 2640\n  mode: 'CFB1',                                                                                                       // 2641\n  type: 'stream'                                                                                                      // 2642\n};                                                                                                                    // 2643\nexports['aes-192-cfb1'] = {                                                                                           // 2644\n  cipher: 'AES',                                                                                                      // 2645\n  key: 192,                                                                                                           // 2646\n  iv: 16,                                                                                                             // 2647\n  mode: 'CFB1',                                                                                                       // 2648\n  type: 'stream'                                                                                                      // 2649\n};                                                                                                                    // 2650\nexports['aes-256-cfb1'] = {                                                                                           // 2651\n  cipher: 'AES',                                                                                                      // 2652\n  key: 256,                                                                                                           // 2653\n  iv: 16,                                                                                                             // 2654\n  mode: 'CFB1',                                                                                                       // 2655\n  type: 'stream'                                                                                                      // 2656\n};                                                                                                                    // 2657\nexports['aes-128-ofb'] = {                                                                                            // 2658\n  cipher: 'AES',                                                                                                      // 2659\n  key: 128,                                                                                                           // 2660\n  iv: 16,                                                                                                             // 2661\n  mode: 'OFB',                                                                                                        // 2662\n  type: 'stream'                                                                                                      // 2663\n};                                                                                                                    // 2664\nexports['aes-192-ofb'] = {                                                                                            // 2665\n  cipher: 'AES',                                                                                                      // 2666\n  key: 192,                                                                                                           // 2667\n  iv: 16,                                                                                                             // 2668\n  mode: 'OFB',                                                                                                        // 2669\n  type: 'stream'                                                                                                      // 2670\n};                                                                                                                    // 2671\nexports['aes-256-ofb'] = {                                                                                            // 2672\n  cipher: 'AES',                                                                                                      // 2673\n  key: 256,                                                                                                           // 2674\n  iv: 16,                                                                                                             // 2675\n  mode: 'OFB',                                                                                                        // 2676\n  type: 'stream'                                                                                                      // 2677\n};                                                                                                                    // 2678\nexports['aes-128-ctr'] = {                                                                                            // 2679\n  cipher: 'AES',                                                                                                      // 2680\n  key: 128,                                                                                                           // 2681\n  iv: 16,                                                                                                             // 2682\n  mode: 'CTR',                                                                                                        // 2683\n  type: 'stream'                                                                                                      // 2684\n};                                                                                                                    // 2685\nexports['aes-192-ctr'] = {                                                                                            // 2686\n  cipher: 'AES',                                                                                                      // 2687\n  key: 192,                                                                                                           // 2688\n  iv: 16,                                                                                                             // 2689\n  mode: 'CTR',                                                                                                        // 2690\n  type: 'stream'                                                                                                      // 2691\n};                                                                                                                    // 2692\nexports['aes-256-ctr'] = {                                                                                            // 2693\n  cipher: 'AES',                                                                                                      // 2694\n  key: 256,                                                                                                           // 2695\n  iv: 16,                                                                                                             // 2696\n  mode: 'CTR',                                                                                                        // 2697\n  type: 'stream'                                                                                                      // 2698\n};                                                                                                                    // 2699\nexports['aes-128-gcm'] = {                                                                                            // 2700\n  cipher: 'AES',                                                                                                      // 2701\n  key: 128,                                                                                                           // 2702\n  iv: 12,                                                                                                             // 2703\n  mode: 'GCM',                                                                                                        // 2704\n  type: 'auth'                                                                                                        // 2705\n};                                                                                                                    // 2706\nexports['aes-192-gcm'] = {                                                                                            // 2707\n  cipher: 'AES',                                                                                                      // 2708\n  key: 192,                                                                                                           // 2709\n  iv: 12,                                                                                                             // 2710\n  mode: 'GCM',                                                                                                        // 2711\n  type: 'auth'                                                                                                        // 2712\n};                                                                                                                    // 2713\nexports['aes-256-gcm'] = {                                                                                            // 2714\n  cipher: 'AES',                                                                                                      // 2715\n  key: 256,                                                                                                           // 2716\n  iv: 12,                                                                                                             // 2717\n  mode: 'GCM',                                                                                                        // 2718\n  type: 'auth'                                                                                                        // 2719\n};                                                                                                                    // 2720\n},{}],16:[function(require,module,exports){                                                                           // 2721\nvar xor = require('../xor');                                                                                          // 2722\nexports.encrypt = function (self, block) {                                                                            // 2723\n  var data = xor(block, self._prev);                                                                                  // 2724\n  self._prev = self._cipher.encryptBlock(data);                                                                       // 2725\n  return self._prev;                                                                                                  // 2726\n};                                                                                                                    // 2727\nexports.decrypt = function (self, block) {                                                                            // 2728\n  var pad = self._prev;                                                                                               // 2729\n  self._prev = block;                                                                                                 // 2730\n  var out = self._cipher.decryptBlock(block);                                                                         // 2731\n  return xor(out, pad);                                                                                               // 2732\n};                                                                                                                    // 2733\n},{\"../xor\":24}],17:[function(require,module,exports){                                                                // 2734\n(function (Buffer){                                                                                                   // 2735\nvar xor = require('../xor');                                                                                          // 2736\nexports.encrypt = function (self, data, decrypt) {                                                                    // 2737\n  var out = new Buffer('');                                                                                           // 2738\n  var len;                                                                                                            // 2739\n  while (data.length) {                                                                                               // 2740\n    if (self._cache.length === 0) {                                                                                   // 2741\n      self._cache = self._cipher.encryptBlock(self._prev);                                                            // 2742\n      self._prev = new Buffer('');                                                                                    // 2743\n    }                                                                                                                 // 2744\n    if (self._cache.length <= data.length) {                                                                          // 2745\n      len = self._cache.length;                                                                                       // 2746\n      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);                                    // 2747\n      data = data.slice(len);                                                                                         // 2748\n    } else {                                                                                                          // 2749\n      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);                                                  // 2750\n      break;                                                                                                          // 2751\n    }                                                                                                                 // 2752\n  }                                                                                                                   // 2753\n  return out;                                                                                                         // 2754\n};                                                                                                                    // 2755\nfunction encryptStart(self, data, decrypt) {                                                                          // 2756\n  var len = data.length;                                                                                              // 2757\n  var out = xor(data, self._cache);                                                                                   // 2758\n  self._cache = self._cache.slice(len);                                                                               // 2759\n  self._prev = Buffer.concat([self._prev, decrypt?data:out]);                                                         // 2760\n  return out;                                                                                                         // 2761\n}                                                                                                                     // 2762\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2763\n                                                                                                                      // 2764\n},{\"../xor\":24,\"buffer\":2}],18:[function(require,module,exports){                                                     // 2765\n(function (Buffer){                                                                                                   // 2766\n                                                                                                                      // 2767\nfunction encryptByte(self, byte, decrypt) {                                                                           // 2768\n  var pad;                                                                                                            // 2769\n  var i = -1;                                                                                                         // 2770\n  var len = 8;                                                                                                        // 2771\n  var out = 0;                                                                                                        // 2772\n  var bit, value;                                                                                                     // 2773\n  while (++i < len) {                                                                                                 // 2774\n    pad = self._cipher.encryptBlock(self._prev);                                                                      // 2775\n    bit = (byte & (1 << (7-i))) ? 0x80:0;                                                                             // 2776\n    value = pad[0] ^ bit;                                                                                             // 2777\n    out += ((value&0x80) >> (i%8));                                                                                   // 2778\n    self._prev = shiftIn(self._prev, decrypt?bit:value);                                                              // 2779\n  }                                                                                                                   // 2780\n  return out;                                                                                                         // 2781\n}                                                                                                                     // 2782\nexports.encrypt = function (self, chunk, decrypt) {                                                                   // 2783\n  var len = chunk.length;                                                                                             // 2784\n  var out = new Buffer(len);                                                                                          // 2785\n  var i = -1;                                                                                                         // 2786\n  while (++i < len) {                                                                                                 // 2787\n    out[i] = encryptByte(self, chunk[i], decrypt);                                                                    // 2788\n  }                                                                                                                   // 2789\n  return out;                                                                                                         // 2790\n};                                                                                                                    // 2791\nfunction shiftIn(buffer, value) {                                                                                     // 2792\n  var len = buffer.length;                                                                                            // 2793\n  var i = -1;                                                                                                         // 2794\n  var out = new Buffer(buffer.length);                                                                                // 2795\n  buffer = Buffer.concat([buffer, new Buffer([value])]);                                                              // 2796\n  while(++i < len) {                                                                                                  // 2797\n    out[i] = buffer[i]<<1 | buffer[i+1]>>(7);                                                                         // 2798\n  }                                                                                                                   // 2799\n  return out;                                                                                                         // 2800\n}                                                                                                                     // 2801\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2802\n                                                                                                                      // 2803\n},{\"buffer\":2}],19:[function(require,module,exports){                                                                 // 2804\n(function (Buffer){                                                                                                   // 2805\nfunction encryptByte(self, byte, decrypt) {                                                                           // 2806\n  var pad = self._cipher.encryptBlock(self._prev);                                                                    // 2807\n  var out = pad[0] ^ byte;                                                                                            // 2808\n  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt?byte:out])]);                                  // 2809\n  return out;                                                                                                         // 2810\n}                                                                                                                     // 2811\nexports.encrypt = function (self, chunk, decrypt) {                                                                   // 2812\n  var len = chunk.length;                                                                                             // 2813\n  var out = new Buffer(len);                                                                                          // 2814\n  var i = -1;                                                                                                         // 2815\n  while (++i < len) {                                                                                                 // 2816\n    out[i] = encryptByte(self, chunk[i], decrypt);                                                                    // 2817\n  }                                                                                                                   // 2818\n  return out;                                                                                                         // 2819\n};                                                                                                                    // 2820\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2821\n                                                                                                                      // 2822\n},{\"buffer\":2}],20:[function(require,module,exports){                                                                 // 2823\n(function (Buffer){                                                                                                   // 2824\nvar xor = require('../xor');                                                                                          // 2825\nfunction getBlock(self) {                                                                                             // 2826\n  var out = self._cipher.encryptBlock(self._prev);                                                                    // 2827\n  incr32(self._prev);                                                                                                 // 2828\n  return out;                                                                                                         // 2829\n}                                                                                                                     // 2830\nexports.encrypt = function (self, chunk) {                                                                            // 2831\n  while (self._cache.length < chunk.length) {                                                                         // 2832\n    self._cache = Buffer.concat([self._cache, getBlock(self)]);                                                       // 2833\n  }                                                                                                                   // 2834\n  var pad = self._cache.slice(0, chunk.length);                                                                       // 2835\n  self._cache = self._cache.slice(chunk.length);                                                                      // 2836\n  return xor(chunk, pad);                                                                                             // 2837\n};                                                                                                                    // 2838\nfunction incr32(iv) {                                                                                                 // 2839\n  var len = iv.length;                                                                                                // 2840\n  var item;                                                                                                           // 2841\n  while (len--) {                                                                                                     // 2842\n    item = iv.readUInt8(len);                                                                                         // 2843\n    if (item === 255) {                                                                                               // 2844\n      iv.writeUInt8(0, len);                                                                                          // 2845\n    } else {                                                                                                          // 2846\n      item++;                                                                                                         // 2847\n      iv.writeUInt8(item, len);                                                                                       // 2848\n      break;                                                                                                          // 2849\n    }                                                                                                                 // 2850\n  }                                                                                                                   // 2851\n}                                                                                                                     // 2852\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2853\n                                                                                                                      // 2854\n},{\"../xor\":24,\"buffer\":2}],21:[function(require,module,exports){                                                     // 2855\nexports.encrypt = function (self, block) {                                                                            // 2856\n  return self._cipher.encryptBlock(block);                                                                            // 2857\n};                                                                                                                    // 2858\nexports.decrypt = function (self, block) {                                                                            // 2859\n  return self._cipher.decryptBlock(block);                                                                            // 2860\n};                                                                                                                    // 2861\n},{}],22:[function(require,module,exports){                                                                           // 2862\n(function (Buffer){                                                                                                   // 2863\nvar xor = require('../xor');                                                                                          // 2864\nfunction getBlock(self) {                                                                                             // 2865\n  self._prev = self._cipher.encryptBlock(self._prev);                                                                 // 2866\n  return self._prev;                                                                                                  // 2867\n}                                                                                                                     // 2868\nexports.encrypt = function (self, chunk) {                                                                            // 2869\n  while (self._cache.length < chunk.length) {                                                                         // 2870\n    self._cache = Buffer.concat([self._cache, getBlock(self)]);                                                       // 2871\n  }                                                                                                                   // 2872\n  var pad = self._cache.slice(0, chunk.length);                                                                       // 2873\n  self._cache = self._cache.slice(chunk.length);                                                                      // 2874\n  return xor(chunk, pad);                                                                                             // 2875\n};                                                                                                                    // 2876\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2877\n                                                                                                                      // 2878\n},{\"../xor\":24,\"buffer\":2}],23:[function(require,module,exports){                                                     // 2879\n(function (Buffer){                                                                                                   // 2880\nvar aes = require('./aes');                                                                                           // 2881\nvar Transform = require('./cipherBase');                                                                              // 2882\nvar inherits = require('inherits');                                                                                   // 2883\n                                                                                                                      // 2884\ninherits(StreamCipher, Transform);                                                                                    // 2885\nmodule.exports = StreamCipher;                                                                                        // 2886\nfunction StreamCipher(mode, key, iv, decrypt) {                                                                       // 2887\n  if (!(this instanceof StreamCipher)) {                                                                              // 2888\n    return new StreamCipher(mode, key, iv);                                                                           // 2889\n  }                                                                                                                   // 2890\n  Transform.call(this);                                                                                               // 2891\n  this._cipher = new aes.AES(key);                                                                                    // 2892\n  this._prev = new Buffer(iv.length);                                                                                 // 2893\n  this._cache = new Buffer('');                                                                                       // 2894\n  this._secCache = new Buffer('');                                                                                    // 2895\n  this._decrypt = decrypt;                                                                                            // 2896\n  iv.copy(this._prev);                                                                                                // 2897\n  this._mode = mode;                                                                                                  // 2898\n}                                                                                                                     // 2899\nStreamCipher.prototype._update = function (chunk) {                                                                   // 2900\n  return this._mode.encrypt(this, chunk, this._decrypt);                                                              // 2901\n};                                                                                                                    // 2902\nStreamCipher.prototype._final = function () {                                                                         // 2903\n  this._cipher.scrub();                                                                                               // 2904\n};                                                                                                                    // 2905\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2906\n                                                                                                                      // 2907\n},{\"./aes\":8,\"./cipherBase\":11,\"buffer\":2,\"inherits\":144}],24:[function(require,module,exports){                      // 2908\n(function (Buffer){                                                                                                   // 2909\nmodule.exports = xor;                                                                                                 // 2910\nfunction xor(a, b) {                                                                                                  // 2911\n  var len = Math.min(a.length, b.length);                                                                             // 2912\n  var out = new Buffer(len);                                                                                          // 2913\n  var i = -1;                                                                                                         // 2914\n  while (++i < len) {                                                                                                 // 2915\n    out.writeUInt8(a[i] ^ b[i], i);                                                                                   // 2916\n  }                                                                                                                   // 2917\n  return out;                                                                                                         // 2918\n}                                                                                                                     // 2919\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2920\n                                                                                                                      // 2921\n},{\"buffer\":2}],25:[function(require,module,exports){                                                                 // 2922\n(function (Buffer){                                                                                                   // 2923\n'use strict'                                                                                                          // 2924\nexports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {                                                           // 2925\n  sign: 'rsa',                                                                                                        // 2926\n  hash: 'sha224',                                                                                                     // 2927\n  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')                                                     // 2928\n}                                                                                                                     // 2929\nexports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {                                                           // 2930\n  sign: 'rsa',                                                                                                        // 2931\n  hash: 'sha256',                                                                                                     // 2932\n  id: new Buffer('3031300d060960864801650304020105000420', 'hex')                                                     // 2933\n}                                                                                                                     // 2934\nexports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {                                                           // 2935\n  sign: 'rsa',                                                                                                        // 2936\n  hash: 'sha384',                                                                                                     // 2937\n  id: new Buffer('3041300d060960864801650304020205000430', 'hex')                                                     // 2938\n}                                                                                                                     // 2939\nexports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {                                                           // 2940\n  sign: 'rsa',                                                                                                        // 2941\n  hash: 'sha512',                                                                                                     // 2942\n  id: new Buffer('3051300d060960864801650304020305000440', 'hex')                                                     // 2943\n}                                                                                                                     // 2944\nexports['RSA-SHA1'] = {                                                                                               // 2945\n\tsign: 'rsa',                                                                                                         // 2946\n\thash: 'sha1',                                                                                                        // 2947\n\tid: new Buffer('3021300906052b0e03021a05000414', 'hex')                                                              // 2948\n}                                                                                                                     // 2949\nexports['ecdsa-with-SHA1'] = {                                                                                        // 2950\n\tsign: 'ecdsa',                                                                                                       // 2951\n\thash: 'sha1',                                                                                                        // 2952\n\tid: new Buffer('', 'hex')                                                                                            // 2953\n}                                                                                                                     // 2954\nexports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {                                                            // 2955\n  sign: 'dsa',                                                                                                        // 2956\n  hash: 'sha1',                                                                                                       // 2957\n  id: new Buffer('', 'hex')                                                                                           // 2958\n}                                                                                                                     // 2959\nexports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {                                                                // 2960\n  sign: 'dsa',                                                                                                        // 2961\n  hash: 'sha224',                                                                                                     // 2962\n  id: new Buffer('', 'hex')                                                                                           // 2963\n}                                                                                                                     // 2964\nexports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {                                                                // 2965\n  sign: 'dsa',                                                                                                        // 2966\n  hash: 'sha256',                                                                                                     // 2967\n  id: new Buffer('', 'hex')                                                                                           // 2968\n}                                                                                                                     // 2969\nexports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {                                                                // 2970\n  sign: 'dsa',                                                                                                        // 2971\n  hash: 'sha384',                                                                                                     // 2972\n  id: new Buffer('', 'hex')                                                                                           // 2973\n}                                                                                                                     // 2974\nexports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {                                                                // 2975\n  sign: 'dsa',                                                                                                        // 2976\n  hash: 'sha512',                                                                                                     // 2977\n  id: new Buffer('', 'hex')                                                                                           // 2978\n}                                                                                                                     // 2979\nexports['DSA-RIPEMD160'] = {                                                                                          // 2980\n  sign: 'dsa',                                                                                                        // 2981\n  hash: 'rmd160',                                                                                                     // 2982\n  id: new Buffer('', 'hex')                                                                                           // 2983\n}                                                                                                                     // 2984\nexports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {                                                               // 2985\n  sign: 'rsa',                                                                                                        // 2986\n  hash: 'rmd160',                                                                                                     // 2987\n  id: new Buffer('3021300906052b2403020105000414', 'hex')                                                             // 2988\n}                                                                                                                     // 2989\nexports['RSA-MD5'] = exports.md5WithRSAEncryption = {                                                                 // 2990\n  sign: 'rsa',                                                                                                        // 2991\n  hash: 'md5',                                                                                                        // 2992\n  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')                                                       // 2993\n}                                                                                                                     // 2994\n                                                                                                                      // 2995\n}).call(this,require(\"buffer\").Buffer)                                                                                // 2996\n                                                                                                                      // 2997\n},{\"buffer\":2}],26:[function(require,module,exports){                                                                 // 2998\n(function (Buffer){                                                                                                   // 2999\n'use strict'                                                                                                          // 3000\nvar sign = require('./sign')                                                                                          // 3001\nvar verify = require('./verify')                                                                                      // 3002\nvar stream = require('stream')                                                                                        // 3003\nvar inherits = require('inherits')                                                                                    // 3004\nvar _algos = require('./algos')                                                                                       // 3005\nvar createHash = require('create-hash')                                                                               // 3006\nvar algos = {}                                                                                                        // 3007\nObject.keys(_algos).forEach(function (key) {                                                                          // 3008\n  algos[key] = algos[key.toLowerCase()] = _algos[key]                                                                 // 3009\n})                                                                                                                    // 3010\n                                                                                                                      // 3011\nexports.createSign = exports.Sign = createSign                                                                        // 3012\n                                                                                                                      // 3013\nfunction createSign (algorithm) {                                                                                     // 3014\n  return new Sign(algorithm)                                                                                          // 3015\n}                                                                                                                     // 3016\n                                                                                                                      // 3017\nexports.createVerify = exports.Verify = createVerify                                                                  // 3018\n                                                                                                                      // 3019\nfunction createVerify (algorithm) {                                                                                   // 3020\n  return new Verify(algorithm)                                                                                        // 3021\n}                                                                                                                     // 3022\n                                                                                                                      // 3023\ninherits(Sign, stream.Writable)                                                                                       // 3024\n                                                                                                                      // 3025\nfunction Sign (algorithm) {                                                                                           // 3026\n  stream.Writable.call(this)                                                                                          // 3027\n  var data = algos[algorithm]                                                                                         // 3028\n  if (!data)                                                                                                          // 3029\n    throw new Error('Unknown message digest')                                                                         // 3030\n                                                                                                                      // 3031\n  this._hashType = data.hash                                                                                          // 3032\n  this._hash = createHash(data.hash)                                                                                  // 3033\n  this._tag = data.id                                                                                                 // 3034\n  this._signType = data.sign                                                                                          // 3035\n}                                                                                                                     // 3036\n                                                                                                                      // 3037\nSign.prototype._write = function _write (data, _, done) {                                                             // 3038\n  this._hash.update(data)                                                                                             // 3039\n  done()                                                                                                              // 3040\n}                                                                                                                     // 3041\n                                                                                                                      // 3042\nSign.prototype.update = function update (data, enc) {                                                                 // 3043\n  if (typeof data === 'string')                                                                                       // 3044\n    data = new Buffer(data, enc)                                                                                      // 3045\n  this._hash.update(data)                                                                                             // 3046\n  return this                                                                                                         // 3047\n}                                                                                                                     // 3048\n                                                                                                                      // 3049\nSign.prototype.sign = function signMethod (key, enc) {                                                                // 3050\n  this.end()                                                                                                          // 3051\n  var hash = this._hash.digest()                                                                                      // 3052\n  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)                               // 3053\n  if (enc) {                                                                                                          // 3054\n    sig = sig.toString(enc)                                                                                           // 3055\n  }                                                                                                                   // 3056\n  return sig                                                                                                          // 3057\n}                                                                                                                     // 3058\n                                                                                                                      // 3059\ninherits(Verify, stream.Writable)                                                                                     // 3060\nfunction Verify (algorithm) {                                                                                         // 3061\n  stream.Writable.call(this)                                                                                          // 3062\n  var data = algos[algorithm]                                                                                         // 3063\n  if (!data)                                                                                                          // 3064\n    throw new Error('Unknown message digest')                                                                         // 3065\n                                                                                                                      // 3066\n  this._hash = createHash(data.hash)                                                                                  // 3067\n  this._tag = data.id                                                                                                 // 3068\n  this._signType = data.sign                                                                                          // 3069\n}                                                                                                                     // 3070\n                                                                                                                      // 3071\nVerify.prototype._write = function _write (data, _, done) {                                                           // 3072\n  this._hash.update(data)                                                                                             // 3073\n  done()                                                                                                              // 3074\n}                                                                                                                     // 3075\n                                                                                                                      // 3076\nVerify.prototype.update = function update (data, enc) {                                                               // 3077\n  if (typeof data === 'string')                                                                                       // 3078\n    data = new Buffer(data, enc)                                                                                      // 3079\n                                                                                                                      // 3080\n  this._hash.update(data)                                                                                             // 3081\n  return this                                                                                                         // 3082\n}                                                                                                                     // 3083\n                                                                                                                      // 3084\nVerify.prototype.verify = function verifyMethod (key, sig, enc) {                                                     // 3085\n  this.end()                                                                                                          // 3086\n  var hash = this._hash.digest()                                                                                      // 3087\n  if (typeof sig === 'string')                                                                                        // 3088\n    sig = new Buffer(sig, enc)                                                                                        // 3089\n                                                                                                                      // 3090\n  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)                                           // 3091\n}                                                                                                                     // 3092\n                                                                                                                      // 3093\n}).call(this,require(\"buffer\").Buffer)                                                                                // 3094\n                                                                                                                      // 3095\n},{\"./algos\":25,\"./sign\":69,\"./verify\":70,\"buffer\":2,\"create-hash\":94,\"inherits\":144,\"stream\":158}],27:[function(require,module,exports){\n'use strict'                                                                                                          // 3097\nexports['1.3.132.0.10'] = 'secp256k1'                                                                                 // 3098\n                                                                                                                      // 3099\nexports['1.3.132.0.33'] = 'p224'                                                                                      // 3100\n                                                                                                                      // 3101\nexports['1.2.840.10045.3.1.1'] = 'p192'                                                                               // 3102\n                                                                                                                      // 3103\nexports['1.2.840.10045.3.1.7'] = 'p256'                                                                               // 3104\n                                                                                                                      // 3105\n},{}],28:[function(require,module,exports){                                                                           // 3106\n(function(module, exports) {                                                                                          // 3107\n                                                                                                                      // 3108\n'use strict';                                                                                                         // 3109\n                                                                                                                      // 3110\n// Utils                                                                                                              // 3111\n                                                                                                                      // 3112\nfunction assert(val, msg) {                                                                                           // 3113\n  if (!val)                                                                                                           // 3114\n    throw new Error(msg || 'Assertion failed');                                                                       // 3115\n}                                                                                                                     // 3116\n                                                                                                                      // 3117\n// Could use `inherits` module, but don't want to move from single file                                               // 3118\n// architecture yet.                                                                                                  // 3119\nfunction inherits(ctor, superCtor) {                                                                                  // 3120\n  ctor.super_ = superCtor;                                                                                            // 3121\n  var TempCtor = function () {};                                                                                      // 3122\n  TempCtor.prototype = superCtor.prototype;                                                                           // 3123\n  ctor.prototype = new TempCtor();                                                                                    // 3124\n  ctor.prototype.constructor = ctor;                                                                                  // 3125\n}                                                                                                                     // 3126\n                                                                                                                      // 3127\n// BN                                                                                                                 // 3128\n                                                                                                                      // 3129\nfunction BN(number, base, endian) {                                                                                   // 3130\n  // May be `new BN(bn)` ?                                                                                            // 3131\n  if (number !== null &&                                                                                              // 3132\n      typeof number === 'object' &&                                                                                   // 3133\n      Array.isArray(number.words)) {                                                                                  // 3134\n    return number;                                                                                                    // 3135\n  }                                                                                                                   // 3136\n                                                                                                                      // 3137\n  this.sign = false;                                                                                                  // 3138\n  this.words = null;                                                                                                  // 3139\n  this.length = 0;                                                                                                    // 3140\n                                                                                                                      // 3141\n  // Reduction context                                                                                                // 3142\n  this.red = null;                                                                                                    // 3143\n                                                                                                                      // 3144\n  if (base === 'le' || base === 'be') {                                                                               // 3145\n    endian = base;                                                                                                    // 3146\n    base = 10;                                                                                                        // 3147\n  }                                                                                                                   // 3148\n                                                                                                                      // 3149\n  if (number !== null)                                                                                                // 3150\n    this._init(number || 0, base || 10, endian || 'be');                                                              // 3151\n}                                                                                                                     // 3152\nif (typeof module === 'object')                                                                                       // 3153\n  module.exports = BN;                                                                                                // 3154\nelse                                                                                                                  // 3155\n  exports.BN = BN;                                                                                                    // 3156\n                                                                                                                      // 3157\nBN.BN = BN;                                                                                                           // 3158\nBN.wordSize = 26;                                                                                                     // 3159\n                                                                                                                      // 3160\nBN.prototype._init = function init(number, base, endian) {                                                            // 3161\n  if (typeof number === 'number') {                                                                                   // 3162\n    if (number < 0) {                                                                                                 // 3163\n      this.sign = true;                                                                                               // 3164\n      number = -number;                                                                                               // 3165\n    }                                                                                                                 // 3166\n    if (number < 0x4000000) {                                                                                         // 3167\n      this.words = [ number & 0x3ffffff ];                                                                            // 3168\n      this.length = 1;                                                                                                // 3169\n    } else {                                                                                                          // 3170\n      this.words = [                                                                                                  // 3171\n        number & 0x3ffffff,                                                                                           // 3172\n        (number / 0x4000000) & 0x3ffffff                                                                              // 3173\n      ];                                                                                                              // 3174\n      this.length = 2;                                                                                                // 3175\n    }                                                                                                                 // 3176\n    return;                                                                                                           // 3177\n  } else if (typeof number === 'object') {                                                                            // 3178\n    return this._initArray(number, base, endian);                                                                     // 3179\n  }                                                                                                                   // 3180\n  if (base === 'hex')                                                                                                 // 3181\n    base = 16;                                                                                                        // 3182\n  assert(base === (base | 0) && base >= 2 && base <= 36);                                                             // 3183\n                                                                                                                      // 3184\n  number = number.toString().replace(/\\s+/g, '');                                                                     // 3185\n  var start = 0;                                                                                                      // 3186\n  if (number[0] === '-')                                                                                              // 3187\n    start++;                                                                                                          // 3188\n                                                                                                                      // 3189\n  if (base === 16)                                                                                                    // 3190\n    this._parseHex(number, start);                                                                                    // 3191\n  else                                                                                                                // 3192\n    this._parseBase(number, base, start);                                                                             // 3193\n                                                                                                                      // 3194\n  if (number[0] === '-')                                                                                              // 3195\n    this.sign = true;                                                                                                 // 3196\n                                                                                                                      // 3197\n  this.strip();                                                                                                       // 3198\n};                                                                                                                    // 3199\n                                                                                                                      // 3200\nBN.prototype._initArray = function _initArray(number, base, endian) {                                                 // 3201\n  // Perhaps a Uint8Array                                                                                             // 3202\n  assert(typeof number.length === 'number');                                                                          // 3203\n  this.length = Math.ceil(number.length / 3);                                                                         // 3204\n  this.words = new Array(this.length);                                                                                // 3205\n  for (var i = 0; i < this.length; i++)                                                                               // 3206\n    this.words[i] = 0;                                                                                                // 3207\n                                                                                                                      // 3208\n  var off = 0;                                                                                                        // 3209\n  if (endian === 'be') {                                                                                              // 3210\n    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {                                                          // 3211\n      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);                                               // 3212\n      this.words[j] |= (w << off) & 0x3ffffff;                                                                        // 3213\n      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;                                                             // 3214\n      off += 24;                                                                                                      // 3215\n      if (off >= 26) {                                                                                                // 3216\n        off -= 26;                                                                                                    // 3217\n        j++;                                                                                                          // 3218\n      }                                                                                                               // 3219\n    }                                                                                                                 // 3220\n  } else if (endian === 'le') {                                                                                       // 3221\n    for (var i = 0, j = 0; i < number.length; i += 3) {                                                               // 3222\n      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);                                               // 3223\n      this.words[j] |= (w << off) & 0x3ffffff;                                                                        // 3224\n      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;                                                             // 3225\n      off += 24;                                                                                                      // 3226\n      if (off >= 26) {                                                                                                // 3227\n        off -= 26;                                                                                                    // 3228\n        j++;                                                                                                          // 3229\n      }                                                                                                               // 3230\n    }                                                                                                                 // 3231\n  }                                                                                                                   // 3232\n  return this.strip();                                                                                                // 3233\n};                                                                                                                    // 3234\n                                                                                                                      // 3235\nfunction parseHex(str, start, end) {                                                                                  // 3236\n  var r = 0;                                                                                                          // 3237\n  var len = Math.min(str.length, end);                                                                                // 3238\n  for (var i = start; i < len; i++) {                                                                                 // 3239\n    var c = str.charCodeAt(i) - 48;                                                                                   // 3240\n                                                                                                                      // 3241\n    r <<= 4;                                                                                                          // 3242\n                                                                                                                      // 3243\n    // 'a' - 'f'                                                                                                      // 3244\n    if (c >= 49 && c <= 54)                                                                                           // 3245\n      r |= c - 49 + 0xa;                                                                                              // 3246\n                                                                                                                      // 3247\n    // 'A' - 'F'                                                                                                      // 3248\n    else if (c >= 17 && c <= 22)                                                                                      // 3249\n      r |= c - 17 + 0xa;                                                                                              // 3250\n                                                                                                                      // 3251\n    // '0' - '9'                                                                                                      // 3252\n    else                                                                                                              // 3253\n      r |= c & 0xf;                                                                                                   // 3254\n  }                                                                                                                   // 3255\n  return r;                                                                                                           // 3256\n}                                                                                                                     // 3257\n                                                                                                                      // 3258\nBN.prototype._parseHex = function _parseHex(number, start) {                                                          // 3259\n  // Create possibly bigger array to ensure that it fits the number                                                   // 3260\n  this.length = Math.ceil((number.length - start) / 6);                                                               // 3261\n  this.words = new Array(this.length);                                                                                // 3262\n  for (var i = 0; i < this.length; i++)                                                                               // 3263\n    this.words[i] = 0;                                                                                                // 3264\n                                                                                                                      // 3265\n  // Scan 24-bit chunks and add them to the number                                                                    // 3266\n  var off = 0;                                                                                                        // 3267\n  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {                                                        // 3268\n    var w = parseHex(number, i, i + 6);                                                                               // 3269\n    this.words[j] |= (w << off) & 0x3ffffff;                                                                          // 3270\n    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;                                                                 // 3271\n    off += 24;                                                                                                        // 3272\n    if (off >= 26) {                                                                                                  // 3273\n      off -= 26;                                                                                                      // 3274\n      j++;                                                                                                            // 3275\n    }                                                                                                                 // 3276\n  }                                                                                                                   // 3277\n  if (i + 6 !== start) {                                                                                              // 3278\n    var w = parseHex(number, start, i + 6);                                                                           // 3279\n    this.words[j] |= (w << off) & 0x3ffffff;                                                                          // 3280\n    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;                                                                 // 3281\n  }                                                                                                                   // 3282\n  this.strip();                                                                                                       // 3283\n};                                                                                                                    // 3284\n                                                                                                                      // 3285\nfunction parseBase(str, start, end, mul) {                                                                            // 3286\n  var r = 0;                                                                                                          // 3287\n  var len = Math.min(str.length, end);                                                                                // 3288\n  for (var i = start; i < len; i++) {                                                                                 // 3289\n    var c = str.charCodeAt(i) - 48;                                                                                   // 3290\n                                                                                                                      // 3291\n    r *= mul;                                                                                                         // 3292\n                                                                                                                      // 3293\n    // 'a'                                                                                                            // 3294\n    if (c >= 49)                                                                                                      // 3295\n      r += c - 49 + 0xa;                                                                                              // 3296\n                                                                                                                      // 3297\n    // 'A'                                                                                                            // 3298\n    else if (c >= 17)                                                                                                 // 3299\n      r += c - 17 + 0xa;                                                                                              // 3300\n                                                                                                                      // 3301\n    // '0' - '9'                                                                                                      // 3302\n    else                                                                                                              // 3303\n      r += c;                                                                                                         // 3304\n  }                                                                                                                   // 3305\n  return r;                                                                                                           // 3306\n}                                                                                                                     // 3307\n                                                                                                                      // 3308\nBN.prototype._parseBase = function _parseBase(number, base, start) {                                                  // 3309\n  // Initialize as zero                                                                                               // 3310\n  this.words = [ 0 ];                                                                                                 // 3311\n  this.length = 1;                                                                                                    // 3312\n                                                                                                                      // 3313\n  // Find length of limb in base                                                                                      // 3314\n  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)                                           // 3315\n    limbLen++;                                                                                                        // 3316\n  limbLen--;                                                                                                          // 3317\n  limbPow = (limbPow / base) | 0;                                                                                     // 3318\n                                                                                                                      // 3319\n  var total = number.length - start;                                                                                  // 3320\n  var mod = total % limbLen;                                                                                          // 3321\n  var end = Math.min(total, total - mod) + start;                                                                     // 3322\n                                                                                                                      // 3323\n  var word = 0;                                                                                                       // 3324\n  for (var i = start; i < end; i += limbLen) {                                                                        // 3325\n    word = parseBase(number, i, i + limbLen, base);                                                                   // 3326\n                                                                                                                      // 3327\n    this.imuln(limbPow);                                                                                              // 3328\n    if (this.words[0] + word < 0x4000000)                                                                             // 3329\n      this.words[0] += word;                                                                                          // 3330\n    else                                                                                                              // 3331\n      this._iaddn(word);                                                                                              // 3332\n  }                                                                                                                   // 3333\n                                                                                                                      // 3334\n  if (mod !== 0) {                                                                                                    // 3335\n    var pow = 1;                                                                                                      // 3336\n    var word = parseBase(number, i, number.length, base);                                                             // 3337\n                                                                                                                      // 3338\n    for (var i = 0; i < mod; i++)                                                                                     // 3339\n      pow *= base;                                                                                                    // 3340\n    this.imuln(pow);                                                                                                  // 3341\n    if (this.words[0] + word < 0x4000000)                                                                             // 3342\n      this.words[0] += word;                                                                                          // 3343\n    else                                                                                                              // 3344\n      this._iaddn(word);                                                                                              // 3345\n  }                                                                                                                   // 3346\n};                                                                                                                    // 3347\n                                                                                                                      // 3348\nBN.prototype.copy = function copy(dest) {                                                                             // 3349\n  dest.words = new Array(this.length);                                                                                // 3350\n  for (var i = 0; i < this.length; i++)                                                                               // 3351\n    dest.words[i] = this.words[i];                                                                                    // 3352\n  dest.length = this.length;                                                                                          // 3353\n  dest.sign = this.sign;                                                                                              // 3354\n  dest.red = this.red;                                                                                                // 3355\n};                                                                                                                    // 3356\n                                                                                                                      // 3357\nBN.prototype.clone = function clone() {                                                                               // 3358\n  var r = new BN(null);                                                                                               // 3359\n  this.copy(r);                                                                                                       // 3360\n  return r;                                                                                                           // 3361\n};                                                                                                                    // 3362\n                                                                                                                      // 3363\n// Remove leading `0` from `this`                                                                                     // 3364\nBN.prototype.strip = function strip() {                                                                               // 3365\n  while (this.length > 1 && this.words[this.length - 1] === 0)                                                        // 3366\n    this.length--;                                                                                                    // 3367\n  return this._normSign();                                                                                            // 3368\n};                                                                                                                    // 3369\n                                                                                                                      // 3370\nBN.prototype._normSign = function _normSign() {                                                                       // 3371\n  // -0 = 0                                                                                                           // 3372\n  if (this.length === 1 && this.words[0] === 0)                                                                       // 3373\n    this.sign = false;                                                                                                // 3374\n  return this;                                                                                                        // 3375\n};                                                                                                                    // 3376\n                                                                                                                      // 3377\nBN.prototype.inspect = function inspect() {                                                                           // 3378\n  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';                                                  // 3379\n};                                                                                                                    // 3380\n                                                                                                                      // 3381\n/*                                                                                                                    // 3382\n                                                                                                                      // 3383\nvar zeros = [];                                                                                                       // 3384\nvar groupSizes = [];                                                                                                  // 3385\nvar groupBases = [];                                                                                                  // 3386\n                                                                                                                      // 3387\nvar s = '';                                                                                                           // 3388\nvar i = -1;                                                                                                           // 3389\nwhile (++i < BN.wordSize) {                                                                                           // 3390\n  zeros[i] = s;                                                                                                       // 3391\n  s += '0';                                                                                                           // 3392\n}                                                                                                                     // 3393\ngroupSizes[0] = 0;                                                                                                    // 3394\ngroupSizes[1] = 0;                                                                                                    // 3395\ngroupBases[0] = 0;                                                                                                    // 3396\ngroupBases[1] = 0;                                                                                                    // 3397\nvar base = 2 - 1;                                                                                                     // 3398\nwhile (++base < 36 + 1) {                                                                                             // 3399\n  var groupSize = 0;                                                                                                  // 3400\n  var groupBase = 1;                                                                                                  // 3401\n  while (groupBase < (1 << BN.wordSize) / base) {                                                                     // 3402\n    groupBase *= base;                                                                                                // 3403\n    groupSize += 1;                                                                                                   // 3404\n  }                                                                                                                   // 3405\n  groupSizes[base] = groupSize;                                                                                       // 3406\n  groupBases[base] = groupBase;                                                                                       // 3407\n}                                                                                                                     // 3408\n                                                                                                                      // 3409\n*/                                                                                                                    // 3410\n                                                                                                                      // 3411\nvar zeros = [                                                                                                         // 3412\n  '',                                                                                                                 // 3413\n  '0',                                                                                                                // 3414\n  '00',                                                                                                               // 3415\n  '000',                                                                                                              // 3416\n  '0000',                                                                                                             // 3417\n  '00000',                                                                                                            // 3418\n  '000000',                                                                                                           // 3419\n  '0000000',                                                                                                          // 3420\n  '00000000',                                                                                                         // 3421\n  '000000000',                                                                                                        // 3422\n  '0000000000',                                                                                                       // 3423\n  '00000000000',                                                                                                      // 3424\n  '000000000000',                                                                                                     // 3425\n  '0000000000000',                                                                                                    // 3426\n  '00000000000000',                                                                                                   // 3427\n  '000000000000000',                                                                                                  // 3428\n  '0000000000000000',                                                                                                 // 3429\n  '00000000000000000',                                                                                                // 3430\n  '000000000000000000',                                                                                               // 3431\n  '0000000000000000000',                                                                                              // 3432\n  '00000000000000000000',                                                                                             // 3433\n  '000000000000000000000',                                                                                            // 3434\n  '0000000000000000000000',                                                                                           // 3435\n  '00000000000000000000000',                                                                                          // 3436\n  '000000000000000000000000',                                                                                         // 3437\n  '0000000000000000000000000'                                                                                         // 3438\n];                                                                                                                    // 3439\n                                                                                                                      // 3440\nvar groupSizes = [                                                                                                    // 3441\n  0, 0,                                                                                                               // 3442\n  25, 16, 12, 11, 10, 9, 8,                                                                                           // 3443\n  8, 7, 7, 7, 7, 6, 6,                                                                                                // 3444\n  6, 6, 6, 6, 6, 5, 5,                                                                                                // 3445\n  5, 5, 5, 5, 5, 5, 5,                                                                                                // 3446\n  5, 5, 5, 5, 5, 5, 5                                                                                                 // 3447\n];                                                                                                                    // 3448\n                                                                                                                      // 3449\nvar groupBases = [                                                                                                    // 3450\n  0, 0,                                                                                                               // 3451\n  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,                                               // 3452\n  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,                                                // 3453\n  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,                                                 // 3454\n  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,                                                  // 3455\n  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176                                                // 3456\n];                                                                                                                    // 3457\n                                                                                                                      // 3458\nBN.prototype.toString = function toString(base, padding) {                                                            // 3459\n  base = base || 10;                                                                                                  // 3460\n  if (base === 16 || base === 'hex') {                                                                                // 3461\n    var out = '';                                                                                                     // 3462\n    var off = 0;                                                                                                      // 3463\n    var padding = padding | 0 || 1;                                                                                   // 3464\n    var carry = 0;                                                                                                    // 3465\n    for (var i = 0; i < this.length; i++) {                                                                           // 3466\n      var w = this.words[i];                                                                                          // 3467\n      var word = (((w << off) | carry) & 0xffffff).toString(16);                                                      // 3468\n      carry = (w >>> (24 - off)) & 0xffffff;                                                                          // 3469\n      if (carry !== 0 || i !== this.length - 1)                                                                       // 3470\n        out = zeros[6 - word.length] + word + out;                                                                    // 3471\n      else                                                                                                            // 3472\n        out = word + out;                                                                                             // 3473\n      off += 2;                                                                                                       // 3474\n      if (off >= 26) {                                                                                                // 3475\n        off -= 26;                                                                                                    // 3476\n        i--;                                                                                                          // 3477\n      }                                                                                                               // 3478\n    }                                                                                                                 // 3479\n    if (carry !== 0)                                                                                                  // 3480\n      out = carry.toString(16) + out;                                                                                 // 3481\n    while (out.length % padding !== 0)                                                                                // 3482\n      out = '0' + out;                                                                                                // 3483\n    if (this.sign)                                                                                                    // 3484\n      out = '-' + out;                                                                                                // 3485\n    return out;                                                                                                       // 3486\n  } else if (base === (base | 0) && base >= 2 && base <= 36) {                                                        // 3487\n    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));                                           // 3488\n    var groupSize = groupSizes[base];                                                                                 // 3489\n    // var groupBase = Math.pow(base, groupSize);                                                                     // 3490\n    var groupBase = groupBases[base];                                                                                 // 3491\n    var out = '';                                                                                                     // 3492\n    var c = this.clone();                                                                                             // 3493\n    c.sign = false;                                                                                                   // 3494\n    while (c.cmpn(0) !== 0) {                                                                                         // 3495\n      var r = c.modn(groupBase).toString(base);                                                                       // 3496\n      c = c.idivn(groupBase);                                                                                         // 3497\n                                                                                                                      // 3498\n      if (c.cmpn(0) !== 0)                                                                                            // 3499\n        out = zeros[groupSize - r.length] + r + out;                                                                  // 3500\n      else                                                                                                            // 3501\n        out = r + out;                                                                                                // 3502\n    }                                                                                                                 // 3503\n    if (this.cmpn(0) === 0)                                                                                           // 3504\n      out = '0' + out;                                                                                                // 3505\n    if (this.sign)                                                                                                    // 3506\n      out = '-' + out;                                                                                                // 3507\n    return out;                                                                                                       // 3508\n  } else {                                                                                                            // 3509\n    assert(false, 'Base should be between 2 and 36');                                                                 // 3510\n  }                                                                                                                   // 3511\n};                                                                                                                    // 3512\n                                                                                                                      // 3513\nBN.prototype.toJSON = function toJSON() {                                                                             // 3514\n  return this.toString(16);                                                                                           // 3515\n};                                                                                                                    // 3516\n                                                                                                                      // 3517\nBN.prototype.toArray = function toArray() {                                                                           // 3518\n  this.strip();                                                                                                       // 3519\n  var res = new Array(this.byteLength());                                                                             // 3520\n  res[0] = 0;                                                                                                         // 3521\n                                                                                                                      // 3522\n  var q = this.clone();                                                                                               // 3523\n  for (var i = 0; q.cmpn(0) !== 0; i++) {                                                                             // 3524\n    var b = q.andln(0xff);                                                                                            // 3525\n    q.ishrn(8);                                                                                                       // 3526\n                                                                                                                      // 3527\n    // Assume big-endian                                                                                              // 3528\n    res[res.length - i - 1] = b;                                                                                      // 3529\n  }                                                                                                                   // 3530\n                                                                                                                      // 3531\n  return res;                                                                                                         // 3532\n};                                                                                                                    // 3533\n                                                                                                                      // 3534\n/*                                                                                                                    // 3535\nfunction genCountBits(bits) {                                                                                         // 3536\n  var arr = [];                                                                                                       // 3537\n                                                                                                                      // 3538\n  for (var i = bits - 1; i >= 0; i--) {                                                                               // 3539\n    var bit = '0x' + (1 << i).toString(16);                                                                           // 3540\n    arr.push('w >= ' + bit + ' ? ' + (i + 1));                                                                        // 3541\n  }                                                                                                                   // 3542\n                                                                                                                      // 3543\n  return new Function('w', 'return ' + arr.join(' :\\n') + ' :\\n0;');                                                  // 3544\n};                                                                                                                    // 3545\n                                                                                                                      // 3546\nBN.prototype._countBits = genCountBits(26);                                                                           // 3547\n*/                                                                                                                    // 3548\n                                                                                                                      // 3549\n// Sadly chrome apps could not contain `new Function()` calls                                                         // 3550\nBN.prototype._countBits = function _countBits(w) {                                                                    // 3551\n  return w >= 0x2000000 ? 26 :                                                                                        // 3552\n         w >= 0x1000000 ? 25 :                                                                                        // 3553\n         w >= 0x800000 ? 24 :                                                                                         // 3554\n         w >= 0x400000 ? 23 :                                                                                         // 3555\n         w >= 0x200000 ? 22 :                                                                                         // 3556\n         w >= 0x100000 ? 21 :                                                                                         // 3557\n         w >= 0x80000 ? 20 :                                                                                          // 3558\n         w >= 0x40000 ? 19 :                                                                                          // 3559\n         w >= 0x20000 ? 18 :                                                                                          // 3560\n         w >= 0x10000 ? 17 :                                                                                          // 3561\n         w >= 0x8000 ? 16 :                                                                                           // 3562\n         w >= 0x4000 ? 15 :                                                                                           // 3563\n         w >= 0x2000 ? 14 :                                                                                           // 3564\n         w >= 0x1000 ? 13 :                                                                                           // 3565\n         w >= 0x800 ? 12 :                                                                                            // 3566\n         w >= 0x400 ? 11 :                                                                                            // 3567\n         w >= 0x200 ? 10 :                                                                                            // 3568\n         w >= 0x100 ? 9 :                                                                                             // 3569\n         w >= 0x80 ? 8 :                                                                                              // 3570\n         w >= 0x40 ? 7 :                                                                                              // 3571\n         w >= 0x20 ? 6 :                                                                                              // 3572\n         w >= 0x10 ? 5 :                                                                                              // 3573\n         w >= 0x8 ? 4 :                                                                                               // 3574\n         w >= 0x4 ? 3 :                                                                                               // 3575\n         w >= 0x2 ? 2 :                                                                                               // 3576\n         w >= 0x1 ? 1 :                                                                                               // 3577\n         0;                                                                                                           // 3578\n};                                                                                                                    // 3579\n                                                                                                                      // 3580\n// Return number of used bits in a BN                                                                                 // 3581\nBN.prototype.bitLength = function bitLength() {                                                                       // 3582\n  var hi = 0;                                                                                                         // 3583\n  var w = this.words[this.length - 1];                                                                                // 3584\n  var hi = this._countBits(w);                                                                                        // 3585\n  return (this.length - 1) * 26 + hi;                                                                                 // 3586\n};                                                                                                                    // 3587\n                                                                                                                      // 3588\nBN.prototype.byteLength = function byteLength() {                                                                     // 3589\n  return Math.ceil(this.bitLength() / 8);                                                                             // 3590\n};                                                                                                                    // 3591\n                                                                                                                      // 3592\n// Return negative clone of `this`                                                                                    // 3593\nBN.prototype.neg = function neg() {                                                                                   // 3594\n  if (this.cmpn(0) === 0)                                                                                             // 3595\n    return this.clone();                                                                                              // 3596\n                                                                                                                      // 3597\n  var r = this.clone();                                                                                               // 3598\n  r.sign = !this.sign;                                                                                                // 3599\n  return r;                                                                                                           // 3600\n};                                                                                                                    // 3601\n                                                                                                                      // 3602\n                                                                                                                      // 3603\n// Or `num` with `this` in-place                                                                                      // 3604\nBN.prototype.ior = function ior(num) {                                                                                // 3605\n  this.sign = this.sign || num.sign;                                                                                  // 3606\n                                                                                                                      // 3607\n  while (this.length < num.length)                                                                                    // 3608\n    this.words[this.length++] = 0;                                                                                    // 3609\n                                                                                                                      // 3610\n  for (var i = 0; i < num.length; i++)                                                                                // 3611\n    this.words[i] = this.words[i] | num.words[i];                                                                     // 3612\n                                                                                                                      // 3613\n  return this.strip();                                                                                                // 3614\n};                                                                                                                    // 3615\n                                                                                                                      // 3616\n                                                                                                                      // 3617\n// Or `num` with `this`                                                                                               // 3618\nBN.prototype.or = function or(num) {                                                                                  // 3619\n  if (this.length > num.length)                                                                                       // 3620\n    return this.clone().ior(num);                                                                                     // 3621\n  else                                                                                                                // 3622\n    return num.clone().ior(this);                                                                                     // 3623\n};                                                                                                                    // 3624\n                                                                                                                      // 3625\n                                                                                                                      // 3626\n// And `num` with `this` in-place                                                                                     // 3627\nBN.prototype.iand = function iand(num) {                                                                              // 3628\n  this.sign = this.sign && num.sign;                                                                                  // 3629\n                                                                                                                      // 3630\n  // b = min-length(num, this)                                                                                        // 3631\n  var b;                                                                                                              // 3632\n  if (this.length > num.length)                                                                                       // 3633\n    b = num;                                                                                                          // 3634\n  else                                                                                                                // 3635\n    b = this;                                                                                                         // 3636\n                                                                                                                      // 3637\n  for (var i = 0; i < b.length; i++)                                                                                  // 3638\n    this.words[i] = this.words[i] & num.words[i];                                                                     // 3639\n                                                                                                                      // 3640\n  this.length = b.length;                                                                                             // 3641\n                                                                                                                      // 3642\n  return this.strip();                                                                                                // 3643\n};                                                                                                                    // 3644\n                                                                                                                      // 3645\n                                                                                                                      // 3646\n// And `num` with `this`                                                                                              // 3647\nBN.prototype.and = function and(num) {                                                                                // 3648\n  if (this.length > num.length)                                                                                       // 3649\n    return this.clone().iand(num);                                                                                    // 3650\n  else                                                                                                                // 3651\n    return num.clone().iand(this);                                                                                    // 3652\n};                                                                                                                    // 3653\n                                                                                                                      // 3654\n                                                                                                                      // 3655\n// Xor `num` with `this` in-place                                                                                     // 3656\nBN.prototype.ixor = function ixor(num) {                                                                              // 3657\n  this.sign = this.sign || num.sign;                                                                                  // 3658\n                                                                                                                      // 3659\n  // a.length > b.length                                                                                              // 3660\n  var a;                                                                                                              // 3661\n  var b;                                                                                                              // 3662\n  if (this.length > num.length) {                                                                                     // 3663\n    a = this;                                                                                                         // 3664\n    b = num;                                                                                                          // 3665\n  } else {                                                                                                            // 3666\n    a = num;                                                                                                          // 3667\n    b = this;                                                                                                         // 3668\n  }                                                                                                                   // 3669\n                                                                                                                      // 3670\n  for (var i = 0; i < b.length; i++)                                                                                  // 3671\n    this.words[i] = a.words[i] ^ b.words[i];                                                                          // 3672\n                                                                                                                      // 3673\n  if (this !== a)                                                                                                     // 3674\n    for (; i < a.length; i++)                                                                                         // 3675\n      this.words[i] = a.words[i];                                                                                     // 3676\n                                                                                                                      // 3677\n  this.length = a.length;                                                                                             // 3678\n                                                                                                                      // 3679\n  return this.strip();                                                                                                // 3680\n};                                                                                                                    // 3681\n                                                                                                                      // 3682\n                                                                                                                      // 3683\n// Xor `num` with `this`                                                                                              // 3684\nBN.prototype.xor = function xor(num) {                                                                                // 3685\n  if (this.length > num.length)                                                                                       // 3686\n    return this.clone().ixor(num);                                                                                    // 3687\n  else                                                                                                                // 3688\n    return num.clone().ixor(this);                                                                                    // 3689\n};                                                                                                                    // 3690\n                                                                                                                      // 3691\n                                                                                                                      // 3692\n// Set `bit` of `this`                                                                                                // 3693\nBN.prototype.setn = function setn(bit, val) {                                                                         // 3694\n  assert(typeof bit === 'number' && bit >= 0);                                                                        // 3695\n                                                                                                                      // 3696\n  var off = (bit / 26) | 0;                                                                                           // 3697\n  var wbit = bit % 26;                                                                                                // 3698\n                                                                                                                      // 3699\n  while (this.length <= off)                                                                                          // 3700\n    this.words[this.length++] = 0;                                                                                    // 3701\n                                                                                                                      // 3702\n  if (val)                                                                                                            // 3703\n    this.words[off] = this.words[off] | (1 << wbit);                                                                  // 3704\n  else                                                                                                                // 3705\n    this.words[off] = this.words[off] & ~(1 << wbit);                                                                 // 3706\n                                                                                                                      // 3707\n  return this.strip();                                                                                                // 3708\n};                                                                                                                    // 3709\n                                                                                                                      // 3710\n                                                                                                                      // 3711\n// Add `num` to `this` in-place                                                                                       // 3712\nBN.prototype.iadd = function iadd(num) {                                                                              // 3713\n  // negative + positive                                                                                              // 3714\n  if (this.sign && !num.sign) {                                                                                       // 3715\n    this.sign = false;                                                                                                // 3716\n    var r = this.isub(num);                                                                                           // 3717\n    this.sign = !this.sign;                                                                                           // 3718\n    return this._normSign();                                                                                          // 3719\n                                                                                                                      // 3720\n  // positive + negative                                                                                              // 3721\n  } else if (!this.sign && num.sign) {                                                                                // 3722\n    num.sign = false;                                                                                                 // 3723\n    var r = this.isub(num);                                                                                           // 3724\n    num.sign = true;                                                                                                  // 3725\n    return r._normSign();                                                                                             // 3726\n  }                                                                                                                   // 3727\n                                                                                                                      // 3728\n  // a.length > b.length                                                                                              // 3729\n  var a;                                                                                                              // 3730\n  var b;                                                                                                              // 3731\n  if (this.length > num.length) {                                                                                     // 3732\n    a = this;                                                                                                         // 3733\n    b = num;                                                                                                          // 3734\n  } else {                                                                                                            // 3735\n    a = num;                                                                                                          // 3736\n    b = this;                                                                                                         // 3737\n  }                                                                                                                   // 3738\n                                                                                                                      // 3739\n  var carry = 0;                                                                                                      // 3740\n  for (var i = 0; i < b.length; i++) {                                                                                // 3741\n    var r = a.words[i] + b.words[i] + carry;                                                                          // 3742\n    this.words[i] = r & 0x3ffffff;                                                                                    // 3743\n    carry = r >>> 26;                                                                                                 // 3744\n  }                                                                                                                   // 3745\n  for (; carry !== 0 && i < a.length; i++) {                                                                          // 3746\n    var r = a.words[i] + carry;                                                                                       // 3747\n    this.words[i] = r & 0x3ffffff;                                                                                    // 3748\n    carry = r >>> 26;                                                                                                 // 3749\n  }                                                                                                                   // 3750\n                                                                                                                      // 3751\n  this.length = a.length;                                                                                             // 3752\n  if (carry !== 0) {                                                                                                  // 3753\n    this.words[this.length] = carry;                                                                                  // 3754\n    this.length++;                                                                                                    // 3755\n  // Copy the rest of the words                                                                                       // 3756\n  } else if (a !== this) {                                                                                            // 3757\n    for (; i < a.length; i++)                                                                                         // 3758\n      this.words[i] = a.words[i];                                                                                     // 3759\n  }                                                                                                                   // 3760\n                                                                                                                      // 3761\n  return this;                                                                                                        // 3762\n};                                                                                                                    // 3763\n                                                                                                                      // 3764\n// Add `num` to `this`                                                                                                // 3765\nBN.prototype.add = function add(num) {                                                                                // 3766\n  if (num.sign && !this.sign) {                                                                                       // 3767\n    num.sign = false;                                                                                                 // 3768\n    var res = this.sub(num);                                                                                          // 3769\n    num.sign = true;                                                                                                  // 3770\n    return res;                                                                                                       // 3771\n  } else if (!num.sign && this.sign) {                                                                                // 3772\n    this.sign = false;                                                                                                // 3773\n    var res = num.sub(this);                                                                                          // 3774\n    this.sign = true;                                                                                                 // 3775\n    return res;                                                                                                       // 3776\n  }                                                                                                                   // 3777\n                                                                                                                      // 3778\n  if (this.length > num.length)                                                                                       // 3779\n    return this.clone().iadd(num);                                                                                    // 3780\n  else                                                                                                                // 3781\n    return num.clone().iadd(this);                                                                                    // 3782\n};                                                                                                                    // 3783\n                                                                                                                      // 3784\n// Subtract `num` from `this` in-place                                                                                // 3785\nBN.prototype.isub = function isub(num) {                                                                              // 3786\n  // this - (-num) = this + num                                                                                       // 3787\n  if (num.sign) {                                                                                                     // 3788\n    num.sign = false;                                                                                                 // 3789\n    var r = this.iadd(num);                                                                                           // 3790\n    num.sign = true;                                                                                                  // 3791\n    return r._normSign();                                                                                             // 3792\n                                                                                                                      // 3793\n  // -this - num = -(this + num)                                                                                      // 3794\n  } else if (this.sign) {                                                                                             // 3795\n    this.sign = false;                                                                                                // 3796\n    this.iadd(num);                                                                                                   // 3797\n    this.sign = true;                                                                                                 // 3798\n    return this._normSign();                                                                                          // 3799\n  }                                                                                                                   // 3800\n                                                                                                                      // 3801\n  // At this point both numbers are positive                                                                          // 3802\n  var cmp = this.cmp(num);                                                                                            // 3803\n                                                                                                                      // 3804\n  // Optimization - zeroify                                                                                           // 3805\n  if (cmp === 0) {                                                                                                    // 3806\n    this.sign = false;                                                                                                // 3807\n    this.length = 1;                                                                                                  // 3808\n    this.words[0] = 0;                                                                                                // 3809\n    return this;                                                                                                      // 3810\n  }                                                                                                                   // 3811\n                                                                                                                      // 3812\n  // a > b                                                                                                            // 3813\n  var a;                                                                                                              // 3814\n  var b;                                                                                                              // 3815\n  if (cmp > 0) {                                                                                                      // 3816\n    a = this;                                                                                                         // 3817\n    b = num;                                                                                                          // 3818\n  } else {                                                                                                            // 3819\n    a = num;                                                                                                          // 3820\n    b = this;                                                                                                         // 3821\n  }                                                                                                                   // 3822\n                                                                                                                      // 3823\n  var carry = 0;                                                                                                      // 3824\n  for (var i = 0; i < b.length; i++) {                                                                                // 3825\n    var r = a.words[i] - b.words[i] + carry;                                                                          // 3826\n    carry = r >> 26;                                                                                                  // 3827\n    this.words[i] = r & 0x3ffffff;                                                                                    // 3828\n  }                                                                                                                   // 3829\n  for (; carry !== 0 && i < a.length; i++) {                                                                          // 3830\n    var r = a.words[i] + carry;                                                                                       // 3831\n    carry = r >> 26;                                                                                                  // 3832\n    this.words[i] = r & 0x3ffffff;                                                                                    // 3833\n  }                                                                                                                   // 3834\n                                                                                                                      // 3835\n  // Copy rest of the words                                                                                           // 3836\n  if (carry === 0 && i < a.length && a !== this)                                                                      // 3837\n    for (; i < a.length; i++)                                                                                         // 3838\n      this.words[i] = a.words[i];                                                                                     // 3839\n  this.length = Math.max(this.length, i);                                                                             // 3840\n                                                                                                                      // 3841\n  if (a !== this)                                                                                                     // 3842\n    this.sign = true;                                                                                                 // 3843\n                                                                                                                      // 3844\n  return this.strip();                                                                                                // 3845\n};                                                                                                                    // 3846\n                                                                                                                      // 3847\n// Subtract `num` from `this`                                                                                         // 3848\nBN.prototype.sub = function sub(num) {                                                                                // 3849\n  return this.clone().isub(num);                                                                                      // 3850\n};                                                                                                                    // 3851\n                                                                                                                      // 3852\n/*                                                                                                                    // 3853\n// NOTE: This could be potentionally used to generate loop-less multiplications                                       // 3854\nfunction _genCombMulTo(alen, blen) {                                                                                  // 3855\n  var len = alen + blen - 1;                                                                                          // 3856\n  var src = [                                                                                                         // 3857\n    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +                                                  // 3858\n        'mask = 0x3ffffff, shift = 0x4000000;',                                                                       // 3859\n    'out.length = ' + len + ';'                                                                                       // 3860\n  ];                                                                                                                  // 3861\n  for (var k = 0; k < len; k++) {                                                                                     // 3862\n    var minJ = Math.max(0, k - alen + 1);                                                                             // 3863\n    var maxJ = Math.min(k, blen - 1);                                                                                 // 3864\n                                                                                                                      // 3865\n    for (var j = minJ; j <= maxJ; j++) {                                                                              // 3866\n      var i = k - j;                                                                                                  // 3867\n      var mul = 'a[' + i + '] * b[' + j + ']';                                                                        // 3868\n                                                                                                                      // 3869\n      if (j === minJ) {                                                                                               // 3870\n        src.push('w = ' + mul + ' + c;');                                                                             // 3871\n        src.push('c = (w / shift) | 0;');                                                                             // 3872\n      } else {                                                                                                        // 3873\n        src.push('w += ' + mul + ';');                                                                                // 3874\n        src.push('c += (w / shift) | 0;');                                                                            // 3875\n      }                                                                                                               // 3876\n      src.push('w &= mask;');                                                                                         // 3877\n    }                                                                                                                 // 3878\n    src.push('o[' + k + '] = w;');                                                                                    // 3879\n  }                                                                                                                   // 3880\n  src.push('if (c !== 0) {',                                                                                          // 3881\n           '  o[' + k + '] = c;',                                                                                     // 3882\n           '  out.length++;',                                                                                         // 3883\n           '}',                                                                                                       // 3884\n           'return out;');                                                                                            // 3885\n                                                                                                                      // 3886\n  return src.join('\\n');                                                                                              // 3887\n}                                                                                                                     // 3888\n*/                                                                                                                    // 3889\n                                                                                                                      // 3890\nBN.prototype._smallMulTo = function _smallMulTo(num, out) {                                                           // 3891\n  out.sign = num.sign !== this.sign;                                                                                  // 3892\n  out.length = this.length + num.length;                                                                              // 3893\n                                                                                                                      // 3894\n  var carry = 0;                                                                                                      // 3895\n  for (var k = 0; k < out.length - 1; k++) {                                                                          // 3896\n    // Sum all words with the same `i + j = k` and accumulate `ncarry`,                                               // 3897\n    // note that ncarry could be >= 0x3ffffff                                                                         // 3898\n    var ncarry = carry >>> 26;                                                                                        // 3899\n    var rword = carry & 0x3ffffff;                                                                                    // 3900\n    var maxJ = Math.min(k, num.length - 1);                                                                           // 3901\n    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {                                                  // 3902\n      var i = k - j;                                                                                                  // 3903\n      var a = this.words[i] | 0;                                                                                      // 3904\n      var b = num.words[j] | 0;                                                                                       // 3905\n      var r = a * b;                                                                                                  // 3906\n                                                                                                                      // 3907\n      var lo = r & 0x3ffffff;                                                                                         // 3908\n      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;                                                                  // 3909\n      lo = (lo + rword) | 0;                                                                                          // 3910\n      rword = lo & 0x3ffffff;                                                                                         // 3911\n      ncarry = (ncarry + (lo >>> 26)) | 0;                                                                            // 3912\n    }                                                                                                                 // 3913\n    out.words[k] = rword;                                                                                             // 3914\n    carry = ncarry;                                                                                                   // 3915\n  }                                                                                                                   // 3916\n  if (carry !== 0) {                                                                                                  // 3917\n    out.words[k] = carry;                                                                                             // 3918\n  } else {                                                                                                            // 3919\n    out.length--;                                                                                                     // 3920\n  }                                                                                                                   // 3921\n                                                                                                                      // 3922\n  return out.strip();                                                                                                 // 3923\n};                                                                                                                    // 3924\n                                                                                                                      // 3925\nBN.prototype._bigMulTo = function _bigMulTo(num, out) {                                                               // 3926\n  out.sign = num.sign !== this.sign;                                                                                  // 3927\n  out.length = this.length + num.length;                                                                              // 3928\n                                                                                                                      // 3929\n  var carry = 0;                                                                                                      // 3930\n  var hncarry = 0;                                                                                                    // 3931\n  for (var k = 0; k < out.length - 1; k++) {                                                                          // 3932\n    // Sum all words with the same `i + j = k` and accumulate `ncarry`,                                               // 3933\n    // note that ncarry could be >= 0x3ffffff                                                                         // 3934\n    var ncarry = hncarry;                                                                                             // 3935\n    hncarry = 0;                                                                                                      // 3936\n    var rword = carry & 0x3ffffff;                                                                                    // 3937\n    var maxJ = Math.min(k, num.length - 1);                                                                           // 3938\n    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {                                                  // 3939\n      var i = k - j;                                                                                                  // 3940\n      var a = this.words[i] | 0;                                                                                      // 3941\n      var b = num.words[j] | 0;                                                                                       // 3942\n      var r = a * b;                                                                                                  // 3943\n                                                                                                                      // 3944\n      var lo = r & 0x3ffffff;                                                                                         // 3945\n      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;                                                                  // 3946\n      lo = (lo + rword) | 0;                                                                                          // 3947\n      rword = lo & 0x3ffffff;                                                                                         // 3948\n      ncarry = (ncarry + (lo >>> 26)) | 0;                                                                            // 3949\n                                                                                                                      // 3950\n      hncarry += ncarry >>> 26;                                                                                       // 3951\n      ncarry &= 0x3ffffff;                                                                                            // 3952\n    }                                                                                                                 // 3953\n    out.words[k] = rword;                                                                                             // 3954\n    carry = ncarry;                                                                                                   // 3955\n    ncarry = hncarry;                                                                                                 // 3956\n  }                                                                                                                   // 3957\n  if (carry !== 0) {                                                                                                  // 3958\n    out.words[k] = carry;                                                                                             // 3959\n  } else {                                                                                                            // 3960\n    out.length--;                                                                                                     // 3961\n  }                                                                                                                   // 3962\n                                                                                                                      // 3963\n  return out.strip();                                                                                                 // 3964\n};                                                                                                                    // 3965\n                                                                                                                      // 3966\nBN.prototype.mulTo = function mulTo(num, out) {                                                                       // 3967\n  var res;                                                                                                            // 3968\n  if (this.length + num.length < 63)                                                                                  // 3969\n    res = this._smallMulTo(num, out);                                                                                 // 3970\n  else                                                                                                                // 3971\n    res = this._bigMulTo(num, out);                                                                                   // 3972\n  return res;                                                                                                         // 3973\n};                                                                                                                    // 3974\n                                                                                                                      // 3975\n// Multiply `this` by `num`                                                                                           // 3976\nBN.prototype.mul = function mul(num) {                                                                                // 3977\n  var out = new BN(null);                                                                                             // 3978\n  out.words = new Array(this.length + num.length);                                                                    // 3979\n  return this.mulTo(num, out);                                                                                        // 3980\n};                                                                                                                    // 3981\n                                                                                                                      // 3982\n// In-place Multiplication                                                                                            // 3983\nBN.prototype.imul = function imul(num) {                                                                              // 3984\n  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {                                                                      // 3985\n    this.words[0] = 0;                                                                                                // 3986\n    this.length = 1;                                                                                                  // 3987\n    return this;                                                                                                      // 3988\n  }                                                                                                                   // 3989\n                                                                                                                      // 3990\n  var tlen = this.length;                                                                                             // 3991\n  var nlen = num.length;                                                                                              // 3992\n                                                                                                                      // 3993\n  this.sign = num.sign !== this.sign;                                                                                 // 3994\n  this.length = this.length + num.length;                                                                             // 3995\n  this.words[this.length - 1] = 0;                                                                                    // 3996\n                                                                                                                      // 3997\n  for (var k = this.length - 2; k >= 0; k--) {                                                                        // 3998\n    // Sum all words with the same `i + j = k` and accumulate `carry`,                                                // 3999\n    // note that carry could be >= 0x3ffffff                                                                          // 4000\n    var carry = 0;                                                                                                    // 4001\n    var rword = 0;                                                                                                    // 4002\n    var maxJ = Math.min(k, nlen - 1);                                                                                 // 4003\n    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {                                                         // 4004\n      var i = k - j;                                                                                                  // 4005\n      var a = this.words[i];                                                                                          // 4006\n      var b = num.words[j];                                                                                           // 4007\n      var r = a * b;                                                                                                  // 4008\n                                                                                                                      // 4009\n      var lo = r & 0x3ffffff;                                                                                         // 4010\n      carry += (r / 0x4000000) | 0;                                                                                   // 4011\n      lo += rword;                                                                                                    // 4012\n      rword = lo & 0x3ffffff;                                                                                         // 4013\n      carry += lo >>> 26;                                                                                             // 4014\n    }                                                                                                                 // 4015\n    this.words[k] = rword;                                                                                            // 4016\n    this.words[k + 1] += carry;                                                                                       // 4017\n    carry = 0;                                                                                                        // 4018\n  }                                                                                                                   // 4019\n                                                                                                                      // 4020\n  // Propagate overflows                                                                                              // 4021\n  var carry = 0;                                                                                                      // 4022\n  for (var i = 1; i < this.length; i++) {                                                                             // 4023\n    var w = this.words[i] + carry;                                                                                    // 4024\n    this.words[i] = w & 0x3ffffff;                                                                                    // 4025\n    carry = w >>> 26;                                                                                                 // 4026\n  }                                                                                                                   // 4027\n                                                                                                                      // 4028\n  return this.strip();                                                                                                // 4029\n};                                                                                                                    // 4030\n                                                                                                                      // 4031\nBN.prototype.imuln = function imuln(num) {                                                                            // 4032\n  assert(typeof num === 'number');                                                                                    // 4033\n                                                                                                                      // 4034\n  // Carry                                                                                                            // 4035\n  var carry = 0;                                                                                                      // 4036\n  for (var i = 0; i < this.length; i++) {                                                                             // 4037\n    var w = this.words[i] * num;                                                                                      // 4038\n    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);                                                                   // 4039\n    carry >>= 26;                                                                                                     // 4040\n    carry += (w / 0x4000000) | 0;                                                                                     // 4041\n    // NOTE: lo is 27bit maximum                                                                                      // 4042\n    carry += lo >>> 26;                                                                                               // 4043\n    this.words[i] = lo & 0x3ffffff;                                                                                   // 4044\n  }                                                                                                                   // 4045\n                                                                                                                      // 4046\n  if (carry !== 0) {                                                                                                  // 4047\n    this.words[i] = carry;                                                                                            // 4048\n    this.length++;                                                                                                    // 4049\n  }                                                                                                                   // 4050\n                                                                                                                      // 4051\n  return this;                                                                                                        // 4052\n};                                                                                                                    // 4053\n                                                                                                                      // 4054\n// `this` * `this`                                                                                                    // 4055\nBN.prototype.sqr = function sqr() {                                                                                   // 4056\n  return this.mul(this);                                                                                              // 4057\n};                                                                                                                    // 4058\n                                                                                                                      // 4059\n// `this` * `this` in-place                                                                                           // 4060\nBN.prototype.isqr = function isqr() {                                                                                 // 4061\n  return this.mul(this);                                                                                              // 4062\n};                                                                                                                    // 4063\n                                                                                                                      // 4064\n// Shift-left in-place                                                                                                // 4065\nBN.prototype.ishln = function ishln(bits) {                                                                           // 4066\n  assert(typeof bits === 'number' && bits >= 0);                                                                      // 4067\n  var r = bits % 26;                                                                                                  // 4068\n  var s = (bits - r) / 26;                                                                                            // 4069\n  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);                                                               // 4070\n                                                                                                                      // 4071\n  if (r !== 0) {                                                                                                      // 4072\n    var carry = 0;                                                                                                    // 4073\n    for (var i = 0; i < this.length; i++) {                                                                           // 4074\n      var newCarry = this.words[i] & carryMask;                                                                       // 4075\n      var c = (this.words[i] - newCarry) << r;                                                                        // 4076\n      this.words[i] = c | carry;                                                                                      // 4077\n      carry = newCarry >>> (26 - r);                                                                                  // 4078\n    }                                                                                                                 // 4079\n    if (carry) {                                                                                                      // 4080\n      this.words[i] = carry;                                                                                          // 4081\n      this.length++;                                                                                                  // 4082\n    }                                                                                                                 // 4083\n  }                                                                                                                   // 4084\n                                                                                                                      // 4085\n  if (s !== 0) {                                                                                                      // 4086\n    for (var i = this.length - 1; i >= 0; i--)                                                                        // 4087\n      this.words[i + s] = this.words[i];                                                                              // 4088\n    for (var i = 0; i < s; i++)                                                                                       // 4089\n      this.words[i] = 0;                                                                                              // 4090\n    this.length += s;                                                                                                 // 4091\n  }                                                                                                                   // 4092\n                                                                                                                      // 4093\n  return this.strip();                                                                                                // 4094\n};                                                                                                                    // 4095\n                                                                                                                      // 4096\n// Shift-right in-place                                                                                               // 4097\n// NOTE: `hint` is a lowest bit before trailing zeroes                                                                // 4098\n// NOTE: if `extended` is true - { lo: ..., hi: } object will be returned                                             // 4099\nBN.prototype.ishrn = function ishrn(bits, hint, extended) {                                                           // 4100\n  assert(typeof bits === 'number' && bits >= 0);                                                                      // 4101\n  if (hint)                                                                                                           // 4102\n    hint = (hint - (hint % 26)) / 26;                                                                                 // 4103\n  else                                                                                                                // 4104\n    hint = 0;                                                                                                         // 4105\n                                                                                                                      // 4106\n  var r = bits % 26;                                                                                                  // 4107\n  var s = Math.min((bits - r) / 26, this.length);                                                                     // 4108\n  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);                                                                    // 4109\n  var maskedWords = extended;                                                                                         // 4110\n                                                                                                                      // 4111\n  hint -= s;                                                                                                          // 4112\n  hint = Math.max(0, hint);                                                                                           // 4113\n                                                                                                                      // 4114\n  // Extended mode, copy masked part                                                                                  // 4115\n  if (maskedWords) {                                                                                                  // 4116\n    for (var i = 0; i < s; i++)                                                                                       // 4117\n      maskedWords.words[i] = this.words[i];                                                                           // 4118\n    maskedWords.length = s;                                                                                           // 4119\n  }                                                                                                                   // 4120\n                                                                                                                      // 4121\n  if (s === 0) {                                                                                                      // 4122\n    // No-op, we should not move anything at all                                                                      // 4123\n  } else if (this.length > s) {                                                                                       // 4124\n    this.length -= s;                                                                                                 // 4125\n    for (var i = 0; i < this.length; i++)                                                                             // 4126\n      this.words[i] = this.words[i + s];                                                                              // 4127\n  } else {                                                                                                            // 4128\n    this.words[0] = 0;                                                                                                // 4129\n    this.length = 1;                                                                                                  // 4130\n  }                                                                                                                   // 4131\n                                                                                                                      // 4132\n  var carry = 0;                                                                                                      // 4133\n  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= hint); i--) {                                          // 4134\n    var word = this.words[i];                                                                                         // 4135\n    this.words[i] = (carry << (26 - r)) | (word >>> r);                                                               // 4136\n    carry = word & mask;                                                                                              // 4137\n  }                                                                                                                   // 4138\n                                                                                                                      // 4139\n  // Push carried bits as a mask                                                                                      // 4140\n  if (maskedWords && carry !== 0)                                                                                     // 4141\n    maskedWords.words[maskedWords.length++] = carry;                                                                  // 4142\n                                                                                                                      // 4143\n  if (this.length === 0) {                                                                                            // 4144\n    this.words[0] = 0;                                                                                                // 4145\n    this.length = 1;                                                                                                  // 4146\n  }                                                                                                                   // 4147\n                                                                                                                      // 4148\n  this.strip();                                                                                                       // 4149\n  if (extended)                                                                                                       // 4150\n    return { hi: this, lo: maskedWords };                                                                             // 4151\n                                                                                                                      // 4152\n  return this;                                                                                                        // 4153\n};                                                                                                                    // 4154\n                                                                                                                      // 4155\n// Shift-left                                                                                                         // 4156\nBN.prototype.shln = function shln(bits) {                                                                             // 4157\n  return this.clone().ishln(bits);                                                                                    // 4158\n};                                                                                                                    // 4159\n                                                                                                                      // 4160\n// Shift-right                                                                                                        // 4161\nBN.prototype.shrn = function shrn(bits) {                                                                             // 4162\n  return this.clone().ishrn(bits);                                                                                    // 4163\n};                                                                                                                    // 4164\n                                                                                                                      // 4165\n// Test if n bit is set                                                                                               // 4166\nBN.prototype.testn = function testn(bit) {                                                                            // 4167\n  assert(typeof bit === 'number' && bit >= 0);                                                                        // 4168\n  var r = bit % 26;                                                                                                   // 4169\n  var s = (bit - r) / 26;                                                                                             // 4170\n  var q = 1 << r;                                                                                                     // 4171\n                                                                                                                      // 4172\n  // Fast case: bit is much higher than all existing words                                                            // 4173\n  if (this.length <= s) {                                                                                             // 4174\n    return false;                                                                                                     // 4175\n  }                                                                                                                   // 4176\n                                                                                                                      // 4177\n  // Check bit and return                                                                                             // 4178\n  var w = this.words[s];                                                                                              // 4179\n                                                                                                                      // 4180\n  return !!(w & q);                                                                                                   // 4181\n};                                                                                                                    // 4182\n                                                                                                                      // 4183\n// Return only lowers bits of number (in-place)                                                                       // 4184\nBN.prototype.imaskn = function imaskn(bits) {                                                                         // 4185\n  assert(typeof bits === 'number' && bits >= 0);                                                                      // 4186\n  var r = bits % 26;                                                                                                  // 4187\n  var s = (bits - r) / 26;                                                                                            // 4188\n                                                                                                                      // 4189\n  assert(!this.sign, 'imaskn works only with positive numbers');                                                      // 4190\n                                                                                                                      // 4191\n  if (r !== 0)                                                                                                        // 4192\n    s++;                                                                                                              // 4193\n  this.length = Math.min(s, this.length);                                                                             // 4194\n                                                                                                                      // 4195\n  if (r !== 0) {                                                                                                      // 4196\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);                                                                  // 4197\n    this.words[this.length - 1] &= mask;                                                                              // 4198\n  }                                                                                                                   // 4199\n                                                                                                                      // 4200\n  return this.strip();                                                                                                // 4201\n};                                                                                                                    // 4202\n                                                                                                                      // 4203\n// Return only lowers bits of number                                                                                  // 4204\nBN.prototype.maskn = function maskn(bits) {                                                                           // 4205\n  return this.clone().imaskn(bits);                                                                                   // 4206\n};                                                                                                                    // 4207\n                                                                                                                      // 4208\n// Add plain number `num` to `this`                                                                                   // 4209\nBN.prototype.iaddn = function iaddn(num) {                                                                            // 4210\n  assert(typeof num === 'number');                                                                                    // 4211\n  if (num < 0)                                                                                                        // 4212\n    return this.isubn(-num);                                                                                          // 4213\n                                                                                                                      // 4214\n  // Possible sign change                                                                                             // 4215\n  if (this.sign) {                                                                                                    // 4216\n    if (this.length === 1 && this.words[0] < num) {                                                                   // 4217\n      this.words[0] = num - this.words[0];                                                                            // 4218\n      this.sign = false;                                                                                              // 4219\n      return this;                                                                                                    // 4220\n    }                                                                                                                 // 4221\n                                                                                                                      // 4222\n    this.sign = false;                                                                                                // 4223\n    this.isubn(num);                                                                                                  // 4224\n    this.sign = true;                                                                                                 // 4225\n    return this;                                                                                                      // 4226\n  }                                                                                                                   // 4227\n                                                                                                                      // 4228\n  // Add without checks                                                                                               // 4229\n  return this._iaddn(num);                                                                                            // 4230\n};                                                                                                                    // 4231\n                                                                                                                      // 4232\nBN.prototype._iaddn = function _iaddn(num) {                                                                          // 4233\n  this.words[0] += num;                                                                                               // 4234\n                                                                                                                      // 4235\n  // Carry                                                                                                            // 4236\n  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {                                               // 4237\n    this.words[i] -= 0x4000000;                                                                                       // 4238\n    if (i === this.length - 1)                                                                                        // 4239\n      this.words[i + 1] = 1;                                                                                          // 4240\n    else                                                                                                              // 4241\n      this.words[i + 1]++;                                                                                            // 4242\n  }                                                                                                                   // 4243\n  this.length = Math.max(this.length, i + 1);                                                                         // 4244\n                                                                                                                      // 4245\n  return this;                                                                                                        // 4246\n};                                                                                                                    // 4247\n                                                                                                                      // 4248\n// Subtract plain number `num` from `this`                                                                            // 4249\nBN.prototype.isubn = function isubn(num) {                                                                            // 4250\n  assert(typeof num === 'number');                                                                                    // 4251\n  if (num < 0)                                                                                                        // 4252\n    return this.iaddn(-num);                                                                                          // 4253\n                                                                                                                      // 4254\n  if (this.sign) {                                                                                                    // 4255\n    this.sign = false;                                                                                                // 4256\n    this.iaddn(num);                                                                                                  // 4257\n    this.sign = true;                                                                                                 // 4258\n    return this;                                                                                                      // 4259\n  }                                                                                                                   // 4260\n                                                                                                                      // 4261\n  this.words[0] -= num;                                                                                               // 4262\n                                                                                                                      // 4263\n  // Carry                                                                                                            // 4264\n  for (var i = 0; i < this.length && this.words[i] < 0; i++) {                                                        // 4265\n    this.words[i] += 0x4000000;                                                                                       // 4266\n    this.words[i + 1] -= 1;                                                                                           // 4267\n  }                                                                                                                   // 4268\n                                                                                                                      // 4269\n  return this.strip();                                                                                                // 4270\n};                                                                                                                    // 4271\n                                                                                                                      // 4272\nBN.prototype.addn = function addn(num) {                                                                              // 4273\n  return this.clone().iaddn(num);                                                                                     // 4274\n};                                                                                                                    // 4275\n                                                                                                                      // 4276\nBN.prototype.subn = function subn(num) {                                                                              // 4277\n  return this.clone().isubn(num);                                                                                     // 4278\n};                                                                                                                    // 4279\n                                                                                                                      // 4280\nBN.prototype.iabs = function iabs() {                                                                                 // 4281\n  this.sign = false;                                                                                                  // 4282\n                                                                                                                      // 4283\n  return this;                                                                                                        // 4284\n};                                                                                                                    // 4285\n                                                                                                                      // 4286\nBN.prototype.abs = function abs() {                                                                                   // 4287\n  return this.clone().iabs();                                                                                         // 4288\n};                                                                                                                    // 4289\n                                                                                                                      // 4290\nBN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {                                                  // 4291\n  // Bigger storage is needed                                                                                         // 4292\n  var len = num.length + shift;                                                                                       // 4293\n  var i;                                                                                                              // 4294\n  if (this.words.length < len) {                                                                                      // 4295\n    var t = new Array(len);                                                                                           // 4296\n    for (var i = 0; i < this.length; i++)                                                                             // 4297\n      t[i] = this.words[i];                                                                                           // 4298\n    this.words = t;                                                                                                   // 4299\n  } else {                                                                                                            // 4300\n    i = this.length;                                                                                                  // 4301\n  }                                                                                                                   // 4302\n                                                                                                                      // 4303\n  // Zeroify rest                                                                                                     // 4304\n  this.length = Math.max(this.length, len);                                                                           // 4305\n  for (; i < this.length; i++)                                                                                        // 4306\n    this.words[i] = 0;                                                                                                // 4307\n                                                                                                                      // 4308\n  var carry = 0;                                                                                                      // 4309\n  for (var i = 0; i < num.length; i++) {                                                                              // 4310\n    var w = this.words[i + shift] + carry;                                                                            // 4311\n    var right = num.words[i] * mul;                                                                                   // 4312\n    w -= right & 0x3ffffff;                                                                                           // 4313\n    carry = (w >> 26) - ((right / 0x4000000) | 0);                                                                    // 4314\n    this.words[i + shift] = w & 0x3ffffff;                                                                            // 4315\n  }                                                                                                                   // 4316\n  for (; i < this.length - shift; i++) {                                                                              // 4317\n    var w = this.words[i + shift] + carry;                                                                            // 4318\n    carry = w >> 26;                                                                                                  // 4319\n    this.words[i + shift] = w & 0x3ffffff;                                                                            // 4320\n  }                                                                                                                   // 4321\n                                                                                                                      // 4322\n  if (carry === 0)                                                                                                    // 4323\n    return this.strip();                                                                                              // 4324\n                                                                                                                      // 4325\n  // Subtraction overflow                                                                                             // 4326\n  assert(carry === -1);                                                                                               // 4327\n  carry = 0;                                                                                                          // 4328\n  for (var i = 0; i < this.length; i++) {                                                                             // 4329\n    var w = -this.words[i] + carry;                                                                                   // 4330\n    carry = w >> 26;                                                                                                  // 4331\n    this.words[i] = w & 0x3ffffff;                                                                                    // 4332\n  }                                                                                                                   // 4333\n  this.sign = true;                                                                                                   // 4334\n                                                                                                                      // 4335\n  return this.strip();                                                                                                // 4336\n};                                                                                                                    // 4337\n                                                                                                                      // 4338\nBN.prototype._wordDiv = function _wordDiv(num, mode) {                                                                // 4339\n  var shift = this.length - num.length;                                                                               // 4340\n                                                                                                                      // 4341\n  var a = this.clone();                                                                                               // 4342\n  var b = num;                                                                                                        // 4343\n                                                                                                                      // 4344\n  // Normalize                                                                                                        // 4345\n  var bhi = b.words[b.length - 1];                                                                                    // 4346\n  for (var shift = 0; bhi < 0x2000000; shift++)                                                                       // 4347\n    bhi <<= 1;                                                                                                        // 4348\n  if (shift !== 0) {                                                                                                  // 4349\n    b = b.shln(shift);                                                                                                // 4350\n    a.ishln(shift);                                                                                                   // 4351\n    bhi = b.words[b.length - 1];                                                                                      // 4352\n  }                                                                                                                   // 4353\n                                                                                                                      // 4354\n  // Initialize quotient                                                                                              // 4355\n  var m = a.length - b.length;                                                                                        // 4356\n  var q;                                                                                                              // 4357\n                                                                                                                      // 4358\n  if (mode !== 'mod') {                                                                                               // 4359\n    q = new BN(null);                                                                                                 // 4360\n    q.length = m + 1;                                                                                                 // 4361\n    q.words = new Array(q.length);                                                                                    // 4362\n    for (var i = 0; i < q.length; i++)                                                                                // 4363\n      q.words[i] = 0;                                                                                                 // 4364\n  }                                                                                                                   // 4365\n                                                                                                                      // 4366\n  var diff = a.clone()._ishlnsubmul(b, 1, m);                                                                         // 4367\n  if (!diff.sign) {                                                                                                   // 4368\n    a = diff;                                                                                                         // 4369\n    if (q)                                                                                                            // 4370\n      q.words[m] = 1;                                                                                                 // 4371\n  }                                                                                                                   // 4372\n                                                                                                                      // 4373\n  for (var j = m - 1; j >= 0; j--) {                                                                                  // 4374\n    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];                                           // 4375\n                                                                                                                      // 4376\n    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max                                        // 4377\n    // (0x7ffffff)                                                                                                    // 4378\n    qj = Math.min((qj / bhi) | 0, 0x3ffffff);                                                                         // 4379\n                                                                                                                      // 4380\n    a._ishlnsubmul(b, qj, j);                                                                                         // 4381\n    while (a.sign) {                                                                                                  // 4382\n      qj--;                                                                                                           // 4383\n      a.sign = false;                                                                                                 // 4384\n      a._ishlnsubmul(b, 1, j);                                                                                        // 4385\n      a.sign = !a.sign;                                                                                               // 4386\n    }                                                                                                                 // 4387\n    if (q)                                                                                                            // 4388\n      q.words[j] = qj;                                                                                                // 4389\n  }                                                                                                                   // 4390\n  if (q)                                                                                                              // 4391\n    q.strip();                                                                                                        // 4392\n  a.strip();                                                                                                          // 4393\n                                                                                                                      // 4394\n  // Denormalize                                                                                                      // 4395\n  if (mode !== 'div' && shift !== 0)                                                                                  // 4396\n    a.ishrn(shift);                                                                                                   // 4397\n  return { div: q ? q : null, mod: a };                                                                               // 4398\n};                                                                                                                    // 4399\n                                                                                                                      // 4400\nBN.prototype.divmod = function divmod(num, mode) {                                                                    // 4401\n  assert(num.cmpn(0) !== 0);                                                                                          // 4402\n                                                                                                                      // 4403\n  if (this.sign && !num.sign) {                                                                                       // 4404\n    var res = this.neg().divmod(num, mode);                                                                           // 4405\n    var div;                                                                                                          // 4406\n    var mod;                                                                                                          // 4407\n    if (mode !== 'mod')                                                                                               // 4408\n      div = res.div.neg();                                                                                            // 4409\n    if (mode !== 'div')                                                                                               // 4410\n      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);                                                       // 4411\n    return {                                                                                                          // 4412\n      div: div,                                                                                                       // 4413\n      mod: mod                                                                                                        // 4414\n    };                                                                                                                // 4415\n  } else if (!this.sign && num.sign) {                                                                                // 4416\n    var res = this.divmod(num.neg(), mode);                                                                           // 4417\n    var div;                                                                                                          // 4418\n    if (mode !== 'mod')                                                                                               // 4419\n      div = res.div.neg();                                                                                            // 4420\n    return { div: div, mod: res.mod };                                                                                // 4421\n  } else if (this.sign && num.sign) {                                                                                 // 4422\n    return this.neg().divmod(num.neg(), mode);                                                                        // 4423\n  }                                                                                                                   // 4424\n                                                                                                                      // 4425\n  // Both numbers are positive at this point                                                                          // 4426\n                                                                                                                      // 4427\n  // Strip both numbers to approximate shift value                                                                    // 4428\n  if (num.length > this.length || this.cmp(num) < 0)                                                                  // 4429\n    return { div: new BN(0), mod: this };                                                                             // 4430\n                                                                                                                      // 4431\n  // Very short reduction                                                                                             // 4432\n  if (num.length === 1) {                                                                                             // 4433\n    if (mode === 'div')                                                                                               // 4434\n      return { div: this.divn(num.words[0]), mod: null };                                                             // 4435\n    else if (mode === 'mod')                                                                                          // 4436\n      return { div: null, mod: new BN(this.modn(num.words[0])) };                                                     // 4437\n    return {                                                                                                          // 4438\n      div: this.divn(num.words[0]),                                                                                   // 4439\n      mod: new BN(this.modn(num.words[0]))                                                                            // 4440\n    };                                                                                                                // 4441\n  }                                                                                                                   // 4442\n                                                                                                                      // 4443\n  return this._wordDiv(num, mode);                                                                                    // 4444\n};                                                                                                                    // 4445\n                                                                                                                      // 4446\n// Find `this` / `num`                                                                                                // 4447\nBN.prototype.div = function div(num) {                                                                                // 4448\n  return this.divmod(num, 'div').div;                                                                                 // 4449\n};                                                                                                                    // 4450\n                                                                                                                      // 4451\n// Find `this` % `num`                                                                                                // 4452\nBN.prototype.mod = function mod(num) {                                                                                // 4453\n  return this.divmod(num, 'mod').mod;                                                                                 // 4454\n};                                                                                                                    // 4455\n                                                                                                                      // 4456\n// Find Round(`this` / `num`)                                                                                         // 4457\nBN.prototype.divRound = function divRound(num) {                                                                      // 4458\n  var dm = this.divmod(num);                                                                                          // 4459\n                                                                                                                      // 4460\n  // Fast case - exact division                                                                                       // 4461\n  if (dm.mod.cmpn(0) === 0)                                                                                           // 4462\n    return dm.div;                                                                                                    // 4463\n                                                                                                                      // 4464\n  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;                                                                  // 4465\n                                                                                                                      // 4466\n  var half = num.shrn(1);                                                                                             // 4467\n  var r2 = num.andln(1);                                                                                              // 4468\n  var cmp = mod.cmp(half);                                                                                            // 4469\n                                                                                                                      // 4470\n  // Round down                                                                                                       // 4471\n  if (cmp < 0 || r2 === 1 && cmp === 0)                                                                               // 4472\n    return dm.div;                                                                                                    // 4473\n                                                                                                                      // 4474\n  // Round up                                                                                                         // 4475\n  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);                                                             // 4476\n};                                                                                                                    // 4477\n                                                                                                                      // 4478\nBN.prototype.modn = function modn(num) {                                                                              // 4479\n  assert(num <= 0x3ffffff);                                                                                           // 4480\n  var p = (1 << 26) % num;                                                                                            // 4481\n                                                                                                                      // 4482\n  var acc = 0;                                                                                                        // 4483\n  for (var i = this.length - 1; i >= 0; i--)                                                                          // 4484\n    acc = (p * acc + this.words[i]) % num;                                                                            // 4485\n                                                                                                                      // 4486\n  return acc;                                                                                                         // 4487\n};                                                                                                                    // 4488\n                                                                                                                      // 4489\n// In-place division by number                                                                                        // 4490\nBN.prototype.idivn = function idivn(num) {                                                                            // 4491\n  assert(num <= 0x3ffffff);                                                                                           // 4492\n                                                                                                                      // 4493\n  var carry = 0;                                                                                                      // 4494\n  for (var i = this.length - 1; i >= 0; i--) {                                                                        // 4495\n    var w = this.words[i] + carry * 0x4000000;                                                                        // 4496\n    this.words[i] = (w / num) | 0;                                                                                    // 4497\n    carry = w % num;                                                                                                  // 4498\n  }                                                                                                                   // 4499\n                                                                                                                      // 4500\n  return this.strip();                                                                                                // 4501\n};                                                                                                                    // 4502\n                                                                                                                      // 4503\nBN.prototype.divn = function divn(num) {                                                                              // 4504\n  return this.clone().idivn(num);                                                                                     // 4505\n};                                                                                                                    // 4506\n                                                                                                                      // 4507\nBN.prototype._egcd = function _egcd(x1, p) {                                                                          // 4508\n  assert(!p.sign);                                                                                                    // 4509\n  assert(p.cmpn(0) !== 0);                                                                                            // 4510\n                                                                                                                      // 4511\n  var a = this;                                                                                                       // 4512\n  var b = p.clone();                                                                                                  // 4513\n                                                                                                                      // 4514\n  if (a.sign)                                                                                                         // 4515\n    a = a.mod(p);                                                                                                     // 4516\n  else                                                                                                                // 4517\n    a = a.clone();                                                                                                    // 4518\n                                                                                                                      // 4519\n  var x2 = new BN(0);                                                                                                 // 4520\n  while (b.isEven())                                                                                                  // 4521\n    b.ishrn(1);                                                                                                       // 4522\n  var delta = b.clone();                                                                                              // 4523\n  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {                                                                            // 4524\n    while (a.isEven()) {                                                                                              // 4525\n      a.ishrn(1);                                                                                                     // 4526\n      if (x1.isEven())                                                                                                // 4527\n        x1.ishrn(1);                                                                                                  // 4528\n      else                                                                                                            // 4529\n        x1.iadd(delta).ishrn(1);                                                                                      // 4530\n    }                                                                                                                 // 4531\n    while (b.isEven()) {                                                                                              // 4532\n      b.ishrn(1);                                                                                                     // 4533\n      if (x2.isEven())                                                                                                // 4534\n        x2.ishrn(1);                                                                                                  // 4535\n      else                                                                                                            // 4536\n        x2.iadd(delta).ishrn(1);                                                                                      // 4537\n    }                                                                                                                 // 4538\n    if (a.cmp(b) >= 0) {                                                                                              // 4539\n      a.isub(b);                                                                                                      // 4540\n      x1.isub(x2);                                                                                                    // 4541\n    } else {                                                                                                          // 4542\n      b.isub(a);                                                                                                      // 4543\n      x2.isub(x1);                                                                                                    // 4544\n    }                                                                                                                 // 4545\n  }                                                                                                                   // 4546\n  if (a.cmpn(1) === 0)                                                                                                // 4547\n    return x1;                                                                                                        // 4548\n  else                                                                                                                // 4549\n    return x2;                                                                                                        // 4550\n};                                                                                                                    // 4551\n                                                                                                                      // 4552\nBN.prototype.gcd = function gcd(num) {                                                                                // 4553\n  if (this.cmpn(0) === 0)                                                                                             // 4554\n    return num.clone();                                                                                               // 4555\n  if (num.cmpn(0) === 0)                                                                                              // 4556\n    return this.clone();                                                                                              // 4557\n                                                                                                                      // 4558\n  var a = this.clone();                                                                                               // 4559\n  var b = num.clone();                                                                                                // 4560\n  a.sign = false;                                                                                                     // 4561\n  b.sign = false;                                                                                                     // 4562\n                                                                                                                      // 4563\n  // Remove common factor of two                                                                                      // 4564\n  for (var shift = 0; a.isEven() && b.isEven(); shift++) {                                                            // 4565\n    a.ishrn(1);                                                                                                       // 4566\n    b.ishrn(1);                                                                                                       // 4567\n  }                                                                                                                   // 4568\n                                                                                                                      // 4569\n  while (a.isEven())                                                                                                  // 4570\n    a.ishrn(1);                                                                                                       // 4571\n                                                                                                                      // 4572\n  do {                                                                                                                // 4573\n    while (b.isEven())                                                                                                // 4574\n      b.ishrn(1);                                                                                                     // 4575\n                                                                                                                      // 4576\n    // Swap `a` and `b` to make `a` always bigger than `b`                                                            // 4577\n    if (a.cmp(b) < 0) {                                                                                               // 4578\n      var t = a;                                                                                                      // 4579\n      a = b;                                                                                                          // 4580\n      b = t;                                                                                                          // 4581\n    }                                                                                                                 // 4582\n    a.isub(a.div(b).mul(b));                                                                                          // 4583\n  } while (a.cmpn(0) !== 0 && b.cmpn(0) !== 0);                                                                       // 4584\n  if (a.cmpn(0) === 0)                                                                                                // 4585\n    return b.ishln(shift);                                                                                            // 4586\n  else                                                                                                                // 4587\n    return a.ishln(shift);                                                                                            // 4588\n};                                                                                                                    // 4589\n                                                                                                                      // 4590\n// Invert number in the field F(num)                                                                                  // 4591\nBN.prototype.invm = function invm(num) {                                                                              // 4592\n  return this._egcd(new BN(1), num).mod(num);                                                                         // 4593\n};                                                                                                                    // 4594\n                                                                                                                      // 4595\nBN.prototype.isEven = function isEven() {                                                                             // 4596\n  return (this.words[0] & 1) === 0;                                                                                   // 4597\n};                                                                                                                    // 4598\n                                                                                                                      // 4599\nBN.prototype.isOdd = function isOdd() {                                                                               // 4600\n  return (this.words[0] & 1) === 1;                                                                                   // 4601\n};                                                                                                                    // 4602\n                                                                                                                      // 4603\n// And first word and num                                                                                             // 4604\nBN.prototype.andln = function andln(num) {                                                                            // 4605\n  return this.words[0] & num;                                                                                         // 4606\n};                                                                                                                    // 4607\n                                                                                                                      // 4608\n// Increment at the bit position in-line                                                                              // 4609\nBN.prototype.bincn = function bincn(bit) {                                                                            // 4610\n  assert(typeof bit === 'number');                                                                                    // 4611\n  var r = bit % 26;                                                                                                   // 4612\n  var s = (bit - r) / 26;                                                                                             // 4613\n  var q = 1 << r;                                                                                                     // 4614\n                                                                                                                      // 4615\n  // Fast case: bit is much higher than all existing words                                                            // 4616\n  if (this.length <= s) {                                                                                             // 4617\n    for (var i = this.length; i < s + 1; i++)                                                                         // 4618\n      this.words[i] = 0;                                                                                              // 4619\n    this.words[s] |= q;                                                                                               // 4620\n    this.length = s + 1;                                                                                              // 4621\n    return this;                                                                                                      // 4622\n  }                                                                                                                   // 4623\n                                                                                                                      // 4624\n  // Add bit and propagate, if needed                                                                                 // 4625\n  var carry = q;                                                                                                      // 4626\n  for (var i = s; carry !== 0 && i < this.length; i++) {                                                              // 4627\n    var w = this.words[i];                                                                                            // 4628\n    w += carry;                                                                                                       // 4629\n    carry = w >>> 26;                                                                                                 // 4630\n    w &= 0x3ffffff;                                                                                                   // 4631\n    this.words[i] = w;                                                                                                // 4632\n  }                                                                                                                   // 4633\n  if (carry !== 0) {                                                                                                  // 4634\n    this.words[i] = carry;                                                                                            // 4635\n    this.length++;                                                                                                    // 4636\n  }                                                                                                                   // 4637\n  return this;                                                                                                        // 4638\n};                                                                                                                    // 4639\n                                                                                                                      // 4640\nBN.prototype.cmpn = function cmpn(num) {                                                                              // 4641\n  var sign = num < 0;                                                                                                 // 4642\n  if (sign)                                                                                                           // 4643\n    num = -num;                                                                                                       // 4644\n                                                                                                                      // 4645\n  if (this.sign && !sign)                                                                                             // 4646\n    return -1;                                                                                                        // 4647\n  else if (!this.sign && sign)                                                                                        // 4648\n    return 1;                                                                                                         // 4649\n                                                                                                                      // 4650\n  num &= 0x3ffffff;                                                                                                   // 4651\n  this.strip();                                                                                                       // 4652\n                                                                                                                      // 4653\n  var res;                                                                                                            // 4654\n  if (this.length > 1) {                                                                                              // 4655\n    res = 1;                                                                                                          // 4656\n  } else {                                                                                                            // 4657\n    var w = this.words[0];                                                                                            // 4658\n    res = w === num ? 0 : w < num ? -1 : 1;                                                                           // 4659\n  }                                                                                                                   // 4660\n  if (this.sign)                                                                                                      // 4661\n    res = -res;                                                                                                       // 4662\n  return res;                                                                                                         // 4663\n};                                                                                                                    // 4664\n                                                                                                                      // 4665\n// Compare two numbers and return:                                                                                    // 4666\n// 1 - if `this` > `num`                                                                                              // 4667\n// 0 - if `this` == `num`                                                                                             // 4668\n// -1 - if `this` < `num`                                                                                             // 4669\nBN.prototype.cmp = function cmp(num) {                                                                                // 4670\n  if (this.sign && !num.sign)                                                                                         // 4671\n    return -1;                                                                                                        // 4672\n  else if (!this.sign && num.sign)                                                                                    // 4673\n    return 1;                                                                                                         // 4674\n                                                                                                                      // 4675\n  var res = this.ucmp(num);                                                                                           // 4676\n  if (this.sign)                                                                                                      // 4677\n    return -res;                                                                                                      // 4678\n  else                                                                                                                // 4679\n    return res;                                                                                                       // 4680\n};                                                                                                                    // 4681\n                                                                                                                      // 4682\n// Unsigned comparison                                                                                                // 4683\nBN.prototype.ucmp = function ucmp(num) {                                                                              // 4684\n  // At this point both numbers have the same sign                                                                    // 4685\n  if (this.length > num.length)                                                                                       // 4686\n    return 1;                                                                                                         // 4687\n  else if (this.length < num.length)                                                                                  // 4688\n    return -1;                                                                                                        // 4689\n                                                                                                                      // 4690\n  var res = 0;                                                                                                        // 4691\n  for (var i = this.length - 1; i >= 0; i--) {                                                                        // 4692\n    var a = this.words[i];                                                                                            // 4693\n    var b = num.words[i];                                                                                             // 4694\n                                                                                                                      // 4695\n    if (a === b)                                                                                                      // 4696\n      continue;                                                                                                       // 4697\n    if (a < b)                                                                                                        // 4698\n      res = -1;                                                                                                       // 4699\n    else if (a > b)                                                                                                   // 4700\n      res = 1;                                                                                                        // 4701\n    break;                                                                                                            // 4702\n  }                                                                                                                   // 4703\n  return res;                                                                                                         // 4704\n};                                                                                                                    // 4705\n                                                                                                                      // 4706\n//                                                                                                                    // 4707\n// A reduce context, could be using montgomery or something better, depending                                         // 4708\n// on the `m` itself.                                                                                                 // 4709\n//                                                                                                                    // 4710\nBN.red = function red(num) {                                                                                          // 4711\n  return new Red(num);                                                                                                // 4712\n};                                                                                                                    // 4713\n                                                                                                                      // 4714\nBN.prototype.toRed = function toRed(ctx) {                                                                            // 4715\n  assert(!this.red, 'Already a number in reduction context');                                                         // 4716\n  assert(!this.sign, 'red works only with positives');                                                                // 4717\n  return ctx.convertTo(this)._forceRed(ctx);                                                                          // 4718\n};                                                                                                                    // 4719\n                                                                                                                      // 4720\nBN.prototype.fromRed = function fromRed() {                                                                           // 4721\n  assert(this.red, 'fromRed works only with numbers in reduction context');                                           // 4722\n  return this.red.convertFrom(this);                                                                                  // 4723\n};                                                                                                                    // 4724\n                                                                                                                      // 4725\nBN.prototype._forceRed = function _forceRed(ctx) {                                                                    // 4726\n  this.red = ctx;                                                                                                     // 4727\n  return this;                                                                                                        // 4728\n};                                                                                                                    // 4729\n                                                                                                                      // 4730\nBN.prototype.forceRed = function forceRed(ctx) {                                                                      // 4731\n  assert(!this.red, 'Already a number in reduction context');                                                         // 4732\n  return this._forceRed(ctx);                                                                                         // 4733\n};                                                                                                                    // 4734\n                                                                                                                      // 4735\nBN.prototype.redAdd = function redAdd(num) {                                                                          // 4736\n  assert(this.red, 'redAdd works only with red numbers');                                                             // 4737\n  return this.red.add(this, num);                                                                                     // 4738\n};                                                                                                                    // 4739\n                                                                                                                      // 4740\nBN.prototype.redIAdd = function redIAdd(num) {                                                                        // 4741\n  assert(this.red, 'redIAdd works only with red numbers');                                                            // 4742\n  return this.red.iadd(this, num);                                                                                    // 4743\n};                                                                                                                    // 4744\n                                                                                                                      // 4745\nBN.prototype.redSub = function redSub(num) {                                                                          // 4746\n  assert(this.red, 'redSub works only with red numbers');                                                             // 4747\n  return this.red.sub(this, num);                                                                                     // 4748\n};                                                                                                                    // 4749\n                                                                                                                      // 4750\nBN.prototype.redISub = function redISub(num) {                                                                        // 4751\n  assert(this.red, 'redISub works only with red numbers');                                                            // 4752\n  return this.red.isub(this, num);                                                                                    // 4753\n};                                                                                                                    // 4754\n                                                                                                                      // 4755\nBN.prototype.redShl = function redShl(num) {                                                                          // 4756\n  assert(this.red, 'redShl works only with red numbers');                                                             // 4757\n  return this.red.shl(this, num);                                                                                     // 4758\n};                                                                                                                    // 4759\n                                                                                                                      // 4760\nBN.prototype.redMul = function redMul(num) {                                                                          // 4761\n  assert(this.red, 'redMul works only with red numbers');                                                             // 4762\n  this.red._verify2(this, num);                                                                                       // 4763\n  return this.red.mul(this, num);                                                                                     // 4764\n};                                                                                                                    // 4765\n                                                                                                                      // 4766\nBN.prototype.redIMul = function redIMul(num) {                                                                        // 4767\n  assert(this.red, 'redMul works only with red numbers');                                                             // 4768\n  this.red._verify2(this, num);                                                                                       // 4769\n  return this.red.imul(this, num);                                                                                    // 4770\n};                                                                                                                    // 4771\n                                                                                                                      // 4772\nBN.prototype.redSqr = function redSqr() {                                                                             // 4773\n  assert(this.red, 'redSqr works only with red numbers');                                                             // 4774\n  this.red._verify1(this);                                                                                            // 4775\n  return this.red.sqr(this);                                                                                          // 4776\n};                                                                                                                    // 4777\n                                                                                                                      // 4778\nBN.prototype.redISqr = function redISqr() {                                                                           // 4779\n  assert(this.red, 'redISqr works only with red numbers');                                                            // 4780\n  this.red._verify1(this);                                                                                            // 4781\n  return this.red.isqr(this);                                                                                         // 4782\n};                                                                                                                    // 4783\n                                                                                                                      // 4784\n// Square root over p                                                                                                 // 4785\nBN.prototype.redSqrt = function redSqrt() {                                                                           // 4786\n  assert(this.red, 'redSqrt works only with red numbers');                                                            // 4787\n  this.red._verify1(this);                                                                                            // 4788\n  return this.red.sqrt(this);                                                                                         // 4789\n};                                                                                                                    // 4790\n                                                                                                                      // 4791\nBN.prototype.redInvm = function redInvm() {                                                                           // 4792\n  assert(this.red, 'redInvm works only with red numbers');                                                            // 4793\n  this.red._verify1(this);                                                                                            // 4794\n  return this.red.invm(this);                                                                                         // 4795\n};                                                                                                                    // 4796\n                                                                                                                      // 4797\n// Return negative clone of `this` % `red modulo`                                                                     // 4798\nBN.prototype.redNeg = function redNeg() {                                                                             // 4799\n  assert(this.red, 'redNeg works only with red numbers');                                                             // 4800\n  this.red._verify1(this);                                                                                            // 4801\n  return this.red.neg(this);                                                                                          // 4802\n};                                                                                                                    // 4803\n                                                                                                                      // 4804\nBN.prototype.redPow = function redPow(num) {                                                                          // 4805\n  assert(this.red && !num.red, 'redPow(normalNum)');                                                                  // 4806\n  this.red._verify1(this);                                                                                            // 4807\n  return this.red.pow(this, num);                                                                                     // 4808\n};                                                                                                                    // 4809\n                                                                                                                      // 4810\n// Prime numbers with efficient reduction                                                                             // 4811\nvar primes = {                                                                                                        // 4812\n  k256: null,                                                                                                         // 4813\n  p224: null,                                                                                                         // 4814\n  p192: null,                                                                                                         // 4815\n  p25519: null                                                                                                        // 4816\n};                                                                                                                    // 4817\n                                                                                                                      // 4818\n// Pseudo-Mersenne prime                                                                                              // 4819\nfunction MPrime(name, p) {                                                                                            // 4820\n  // P = 2 ^ N - K                                                                                                    // 4821\n  this.name = name;                                                                                                   // 4822\n  this.p = new BN(p, 16);                                                                                             // 4823\n  this.n = this.p.bitLength();                                                                                        // 4824\n  this.k = new BN(1).ishln(this.n).isub(this.p);                                                                      // 4825\n                                                                                                                      // 4826\n  this.tmp = this._tmp();                                                                                             // 4827\n}                                                                                                                     // 4828\n                                                                                                                      // 4829\nMPrime.prototype._tmp = function _tmp() {                                                                             // 4830\n  var tmp = new BN(null);                                                                                             // 4831\n  tmp.words = new Array(Math.ceil(this.n / 13));                                                                      // 4832\n  return tmp;                                                                                                         // 4833\n};                                                                                                                    // 4834\n                                                                                                                      // 4835\nMPrime.prototype.ireduce = function ireduce(num) {                                                                    // 4836\n  // Assumes that `num` is less than `P^2`                                                                            // 4837\n  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)                                                       // 4838\n  var r = num;                                                                                                        // 4839\n  var rlen;                                                                                                           // 4840\n                                                                                                                      // 4841\n  do {                                                                                                                // 4842\n    var pair = r.ishrn(this.n, 0, this.tmp);                                                                          // 4843\n    r = this.imulK(pair.hi);                                                                                          // 4844\n    r = r.iadd(pair.lo);                                                                                              // 4845\n    rlen = r.bitLength();                                                                                             // 4846\n  } while (rlen > this.n);                                                                                            // 4847\n                                                                                                                      // 4848\n  var cmp = rlen < this.n ? -1 : r.cmp(this.p);                                                                       // 4849\n  if (cmp === 0) {                                                                                                    // 4850\n    r.words[0] = 0;                                                                                                   // 4851\n    r.length = 1;                                                                                                     // 4852\n  } else if (cmp > 0) {                                                                                               // 4853\n    r.isub(this.p);                                                                                                   // 4854\n  } else {                                                                                                            // 4855\n    r.strip();                                                                                                        // 4856\n  }                                                                                                                   // 4857\n                                                                                                                      // 4858\n  return r;                                                                                                           // 4859\n};                                                                                                                    // 4860\n                                                                                                                      // 4861\nMPrime.prototype.imulK = function imulK(num) {                                                                        // 4862\n  return num.imul(this.k);                                                                                            // 4863\n};                                                                                                                    // 4864\n                                                                                                                      // 4865\nfunction K256() {                                                                                                     // 4866\n  MPrime.call(                                                                                                        // 4867\n    this,                                                                                                             // 4868\n    'k256',                                                                                                           // 4869\n    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');                                       // 4870\n}                                                                                                                     // 4871\ninherits(K256, MPrime);                                                                                               // 4872\n                                                                                                                      // 4873\nK256.prototype.imulK = function imulK(num) {                                                                          // 4874\n  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]                                                                                // 4875\n  num.words[num.length] = 0;                                                                                          // 4876\n  num.words[num.length + 1] = 0;                                                                                      // 4877\n  num.length += 2;                                                                                                    // 4878\n                                                                                                                      // 4879\n  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390                                                               // 4880\n  var hi;                                                                                                             // 4881\n  var lo = 0;                                                                                                         // 4882\n  for (var i = 0; i < num.length; i++) {                                                                              // 4883\n    var w = num.words[i];                                                                                             // 4884\n    hi = w * 0x40;                                                                                                    // 4885\n    lo += w * 0x3d1;                                                                                                  // 4886\n    hi += (lo / 0x4000000) | 0;                                                                                       // 4887\n    lo &= 0x3ffffff;                                                                                                  // 4888\n                                                                                                                      // 4889\n    num.words[i] = lo;                                                                                                // 4890\n                                                                                                                      // 4891\n    lo = hi;                                                                                                          // 4892\n  }                                                                                                                   // 4893\n                                                                                                                      // 4894\n  // Fast length reduction                                                                                            // 4895\n  if (num.words[num.length - 1] === 0) {                                                                              // 4896\n    num.length--;                                                                                                     // 4897\n    if (num.words[num.length - 1] === 0)                                                                              // 4898\n      num.length--;                                                                                                   // 4899\n  }                                                                                                                   // 4900\n  return num;                                                                                                         // 4901\n};                                                                                                                    // 4902\n                                                                                                                      // 4903\nfunction P224() {                                                                                                     // 4904\n  MPrime.call(                                                                                                        // 4905\n    this,                                                                                                             // 4906\n    'p224',                                                                                                           // 4907\n    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');                                                // 4908\n}                                                                                                                     // 4909\ninherits(P224, MPrime);                                                                                               // 4910\n                                                                                                                      // 4911\nfunction P192() {                                                                                                     // 4912\n  MPrime.call(                                                                                                        // 4913\n    this,                                                                                                             // 4914\n    'p192',                                                                                                           // 4915\n    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');                                                         // 4916\n}                                                                                                                     // 4917\ninherits(P192, MPrime);                                                                                               // 4918\n                                                                                                                      // 4919\nfunction P25519() {                                                                                                   // 4920\n  // 2 ^ 255 - 19                                                                                                     // 4921\n  MPrime.call(                                                                                                        // 4922\n    this,                                                                                                             // 4923\n    '25519',                                                                                                          // 4924\n    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');                                           // 4925\n}                                                                                                                     // 4926\ninherits(P25519, MPrime);                                                                                             // 4927\n                                                                                                                      // 4928\nP25519.prototype.imulK = function imulK(num) {                                                                        // 4929\n  // K = 0x13                                                                                                         // 4930\n  var carry = 0;                                                                                                      // 4931\n  for (var i = 0; i < num.length; i++) {                                                                              // 4932\n    var hi = num.words[i] * 0x13 + carry;                                                                             // 4933\n    var lo = hi & 0x3ffffff;                                                                                          // 4934\n    hi >>>= 26;                                                                                                       // 4935\n                                                                                                                      // 4936\n    num.words[i] = lo;                                                                                                // 4937\n    carry = hi;                                                                                                       // 4938\n  }                                                                                                                   // 4939\n  if (carry !== 0)                                                                                                    // 4940\n    num.words[num.length++] = carry;                                                                                  // 4941\n  return num;                                                                                                         // 4942\n};                                                                                                                    // 4943\n                                                                                                                      // 4944\n// Exported mostly for testing purposes, use plain name instead                                                       // 4945\nBN._prime = function prime(name) {                                                                                    // 4946\n  // Cached version of prime                                                                                          // 4947\n  if (primes[name])                                                                                                   // 4948\n    return primes[name];                                                                                              // 4949\n                                                                                                                      // 4950\n  var prime;                                                                                                          // 4951\n  if (name === 'k256')                                                                                                // 4952\n    prime = new K256();                                                                                               // 4953\n  else if (name === 'p224')                                                                                           // 4954\n    prime = new P224();                                                                                               // 4955\n  else if (name === 'p192')                                                                                           // 4956\n    prime = new P192();                                                                                               // 4957\n  else if (name === 'p25519')                                                                                         // 4958\n    prime = new P25519();                                                                                             // 4959\n  else                                                                                                                // 4960\n    throw new Error('Unknown prime ' + name);                                                                         // 4961\n  primes[name] = prime;                                                                                               // 4962\n                                                                                                                      // 4963\n  return prime;                                                                                                       // 4964\n};                                                                                                                    // 4965\n                                                                                                                      // 4966\n//                                                                                                                    // 4967\n// Base reduction engine                                                                                              // 4968\n//                                                                                                                    // 4969\nfunction Red(m) {                                                                                                     // 4970\n  if (typeof m === 'string') {                                                                                        // 4971\n    var prime = BN._prime(m);                                                                                         // 4972\n    this.m = prime.p;                                                                                                 // 4973\n    this.prime = prime;                                                                                               // 4974\n  } else {                                                                                                            // 4975\n    this.m = m;                                                                                                       // 4976\n    this.prime = null;                                                                                                // 4977\n  }                                                                                                                   // 4978\n}                                                                                                                     // 4979\n                                                                                                                      // 4980\nRed.prototype._verify1 = function _verify1(a) {                                                                       // 4981\n  assert(!a.sign, 'red works only with positives');                                                                   // 4982\n  assert(a.red, 'red works only with red numbers');                                                                   // 4983\n};                                                                                                                    // 4984\n                                                                                                                      // 4985\nRed.prototype._verify2 = function _verify2(a, b) {                                                                    // 4986\n  assert(!a.sign && !b.sign, 'red works only with positives');                                                        // 4987\n  assert(a.red && a.red === b.red,                                                                                    // 4988\n         'red works only with red numbers');                                                                          // 4989\n};                                                                                                                    // 4990\n                                                                                                                      // 4991\nRed.prototype.imod = function imod(a) {                                                                               // 4992\n  if (this.prime)                                                                                                     // 4993\n    return this.prime.ireduce(a)._forceRed(this);                                                                     // 4994\n  return a.mod(this.m)._forceRed(this);                                                                               // 4995\n};                                                                                                                    // 4996\n                                                                                                                      // 4997\nRed.prototype.neg = function neg(a) {                                                                                 // 4998\n  var r = a.clone();                                                                                                  // 4999\n  r.sign = !r.sign;                                                                                                   // 5000\n  return r.iadd(this.m)._forceRed(this);                                                                              // 5001\n};                                                                                                                    // 5002\n                                                                                                                      // 5003\nRed.prototype.add = function add(a, b) {                                                                              // 5004\n  this._verify2(a, b);                                                                                                // 5005\n                                                                                                                      // 5006\n  var res = a.add(b);                                                                                                 // 5007\n  if (res.cmp(this.m) >= 0)                                                                                           // 5008\n    res.isub(this.m);                                                                                                 // 5009\n  return res._forceRed(this);                                                                                         // 5010\n};                                                                                                                    // 5011\n                                                                                                                      // 5012\nRed.prototype.iadd = function iadd(a, b) {                                                                            // 5013\n  this._verify2(a, b);                                                                                                // 5014\n                                                                                                                      // 5015\n  var res = a.iadd(b);                                                                                                // 5016\n  if (res.cmp(this.m) >= 0)                                                                                           // 5017\n    res.isub(this.m);                                                                                                 // 5018\n  return res;                                                                                                         // 5019\n};                                                                                                                    // 5020\n                                                                                                                      // 5021\nRed.prototype.sub = function sub(a, b) {                                                                              // 5022\n  this._verify2(a, b);                                                                                                // 5023\n                                                                                                                      // 5024\n  var res = a.sub(b);                                                                                                 // 5025\n  if (res.cmpn(0) < 0)                                                                                                // 5026\n    res.iadd(this.m);                                                                                                 // 5027\n  return res._forceRed(this);                                                                                         // 5028\n};                                                                                                                    // 5029\n                                                                                                                      // 5030\nRed.prototype.isub = function isub(a, b) {                                                                            // 5031\n  this._verify2(a, b);                                                                                                // 5032\n                                                                                                                      // 5033\n  var res = a.isub(b);                                                                                                // 5034\n  if (res.cmpn(0) < 0)                                                                                                // 5035\n    res.iadd(this.m);                                                                                                 // 5036\n  return res;                                                                                                         // 5037\n};                                                                                                                    // 5038\n                                                                                                                      // 5039\nRed.prototype.shl = function shl(a, num) {                                                                            // 5040\n  this._verify1(a);                                                                                                   // 5041\n  return this.imod(a.shln(num));                                                                                      // 5042\n};                                                                                                                    // 5043\n                                                                                                                      // 5044\nRed.prototype.imul = function imul(a, b) {                                                                            // 5045\n  this._verify2(a, b);                                                                                                // 5046\n  return this.imod(a.imul(b));                                                                                        // 5047\n};                                                                                                                    // 5048\n                                                                                                                      // 5049\nRed.prototype.mul = function mul(a, b) {                                                                              // 5050\n  this._verify2(a, b);                                                                                                // 5051\n  return this.imod(a.mul(b));                                                                                         // 5052\n};                                                                                                                    // 5053\n                                                                                                                      // 5054\nRed.prototype.isqr = function isqr(a) {                                                                               // 5055\n  return this.imul(a, a);                                                                                             // 5056\n};                                                                                                                    // 5057\n                                                                                                                      // 5058\nRed.prototype.sqr = function sqr(a) {                                                                                 // 5059\n  return this.mul(a, a);                                                                                              // 5060\n};                                                                                                                    // 5061\n                                                                                                                      // 5062\nRed.prototype.sqrt = function sqrt(a) {                                                                               // 5063\n  if (a.cmpn(0) === 0)                                                                                                // 5064\n    return a.clone();                                                                                                 // 5065\n                                                                                                                      // 5066\n  var mod3 = this.m.andln(3);                                                                                         // 5067\n  assert(mod3 % 2 === 1);                                                                                             // 5068\n                                                                                                                      // 5069\n  // Fast case                                                                                                        // 5070\n  if (mod3 === 3) {                                                                                                   // 5071\n    var pow = this.m.add(new BN(1)).ishrn(2);                                                                         // 5072\n    var r = this.pow(a, pow);                                                                                         // 5073\n    return r;                                                                                                         // 5074\n  }                                                                                                                   // 5075\n                                                                                                                      // 5076\n  // Tonelli-Shanks algorithm (Totally unoptimized and slow)                                                          // 5077\n  //                                                                                                                  // 5078\n  // Find Q and S, that Q * 2 ^ S = (P - 1)                                                                           // 5079\n  var q = this.m.subn(1);                                                                                             // 5080\n  var s = 0;                                                                                                          // 5081\n  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {                                                                       // 5082\n    s++;                                                                                                              // 5083\n    q.ishrn(1);                                                                                                       // 5084\n  }                                                                                                                   // 5085\n  assert(q.cmpn(0) !== 0);                                                                                            // 5086\n                                                                                                                      // 5087\n  var one = new BN(1).toRed(this);                                                                                    // 5088\n  var nOne = one.redNeg();                                                                                            // 5089\n                                                                                                                      // 5090\n  // Find quadratic non-residue                                                                                       // 5091\n  // NOTE: Max is such because of generalized Riemann hypothesis.                                                     // 5092\n  var lpow = this.m.subn(1).ishrn(1);                                                                                 // 5093\n  var z = this.m.bitLength();                                                                                         // 5094\n  z = new BN(2 * z * z).toRed(this);                                                                                  // 5095\n  while (this.pow(z, lpow).cmp(nOne) !== 0)                                                                           // 5096\n    z.redIAdd(nOne);                                                                                                  // 5097\n                                                                                                                      // 5098\n  var c = this.pow(z, q);                                                                                             // 5099\n  var r = this.pow(a, q.addn(1).ishrn(1));                                                                            // 5100\n  var t = this.pow(a, q);                                                                                             // 5101\n  var m = s;                                                                                                          // 5102\n  while (t.cmp(one) !== 0) {                                                                                          // 5103\n    var tmp = t;                                                                                                      // 5104\n    for (var i = 0; tmp.cmp(one) !== 0; i++)                                                                          // 5105\n      tmp = tmp.redSqr();                                                                                             // 5106\n    assert(i < m);                                                                                                    // 5107\n    var b = this.pow(c, new BN(1).ishln(m - i - 1));                                                                  // 5108\n                                                                                                                      // 5109\n    r = r.redMul(b);                                                                                                  // 5110\n    c = b.redSqr();                                                                                                   // 5111\n    t = t.redMul(c);                                                                                                  // 5112\n    m = i;                                                                                                            // 5113\n  }                                                                                                                   // 5114\n                                                                                                                      // 5115\n  return r;                                                                                                           // 5116\n};                                                                                                                    // 5117\n                                                                                                                      // 5118\nRed.prototype.invm = function invm(a) {                                                                               // 5119\n  var inv = a._egcd(new BN(1), this.m);                                                                               // 5120\n  if (inv.sign) {                                                                                                     // 5121\n    inv.sign = false;                                                                                                 // 5122\n    return this.imod(inv).redNeg();                                                                                   // 5123\n  } else {                                                                                                            // 5124\n    return this.imod(inv);                                                                                            // 5125\n  }                                                                                                                   // 5126\n};                                                                                                                    // 5127\n                                                                                                                      // 5128\nRed.prototype.pow = function pow(a, num) {                                                                            // 5129\n  var w = [];                                                                                                         // 5130\n  var q = num.clone();                                                                                                // 5131\n  while (q.cmpn(0) !== 0) {                                                                                           // 5132\n    w.push(q.andln(1));                                                                                               // 5133\n    q.ishrn(1);                                                                                                       // 5134\n  }                                                                                                                   // 5135\n                                                                                                                      // 5136\n  // Skip leading zeroes                                                                                              // 5137\n  var res = a;                                                                                                        // 5138\n  for (var i = 0; i < w.length; i++, res = this.sqr(res))                                                             // 5139\n    if (w[i] !== 0)                                                                                                   // 5140\n      break;                                                                                                          // 5141\n                                                                                                                      // 5142\n  if (++i < w.length) {                                                                                               // 5143\n    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {                                                 // 5144\n      if (w[i] === 0)                                                                                                 // 5145\n        continue;                                                                                                     // 5146\n      res = this.mul(res, q);                                                                                         // 5147\n    }                                                                                                                 // 5148\n  }                                                                                                                   // 5149\n                                                                                                                      // 5150\n  return res;                                                                                                         // 5151\n};                                                                                                                    // 5152\n                                                                                                                      // 5153\nRed.prototype.convertTo = function convertTo(num) {                                                                   // 5154\n  return num.clone();                                                                                                 // 5155\n};                                                                                                                    // 5156\n                                                                                                                      // 5157\nRed.prototype.convertFrom = function convertFrom(num) {                                                               // 5158\n  var res = num.clone();                                                                                              // 5159\n  res.red = null;                                                                                                     // 5160\n  return res;                                                                                                         // 5161\n};                                                                                                                    // 5162\n                                                                                                                      // 5163\n//                                                                                                                    // 5164\n// Montgomery method engine                                                                                           // 5165\n//                                                                                                                    // 5166\n                                                                                                                      // 5167\nBN.mont = function mont(num) {                                                                                        // 5168\n  return new Mont(num);                                                                                               // 5169\n};                                                                                                                    // 5170\n                                                                                                                      // 5171\nfunction Mont(m) {                                                                                                    // 5172\n  Red.call(this, m);                                                                                                  // 5173\n                                                                                                                      // 5174\n  this.shift = this.m.bitLength();                                                                                    // 5175\n  if (this.shift % 26 !== 0)                                                                                          // 5176\n    this.shift += 26 - (this.shift % 26);                                                                             // 5177\n  this.r = new BN(1).ishln(this.shift);                                                                               // 5178\n  this.r2 = this.imod(this.r.sqr());                                                                                  // 5179\n  this.rinv = this.r.invm(this.m);                                                                                    // 5180\n                                                                                                                      // 5181\n  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);                                                             // 5182\n  this.minv.sign = true;                                                                                              // 5183\n  this.minv = this.minv.mod(this.r);                                                                                  // 5184\n}                                                                                                                     // 5185\ninherits(Mont, Red);                                                                                                  // 5186\n                                                                                                                      // 5187\nMont.prototype.convertTo = function convertTo(num) {                                                                  // 5188\n  return this.imod(num.shln(this.shift));                                                                             // 5189\n};                                                                                                                    // 5190\n                                                                                                                      // 5191\nMont.prototype.convertFrom = function convertFrom(num) {                                                              // 5192\n  var r = this.imod(num.mul(this.rinv));                                                                              // 5193\n  r.red = null;                                                                                                       // 5194\n  return r;                                                                                                           // 5195\n};                                                                                                                    // 5196\n                                                                                                                      // 5197\nMont.prototype.imul = function imul(a, b) {                                                                           // 5198\n  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {                                                                           // 5199\n    a.words[0] = 0;                                                                                                   // 5200\n    a.length = 1;                                                                                                     // 5201\n    return a;                                                                                                         // 5202\n  }                                                                                                                   // 5203\n                                                                                                                      // 5204\n  var t = a.imul(b);                                                                                                  // 5205\n  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);                                          // 5206\n  var u = t.isub(c).ishrn(this.shift);                                                                                // 5207\n  var res = u;                                                                                                        // 5208\n  if (u.cmp(this.m) >= 0)                                                                                             // 5209\n    res = u.isub(this.m);                                                                                             // 5210\n  else if (u.cmpn(0) < 0)                                                                                             // 5211\n    res = u.iadd(this.m);                                                                                             // 5212\n                                                                                                                      // 5213\n  return res._forceRed(this);                                                                                         // 5214\n};                                                                                                                    // 5215\n                                                                                                                      // 5216\nMont.prototype.mul = function mul(a, b) {                                                                             // 5217\n  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)                                                                             // 5218\n    return new BN(0)._forceRed(this);                                                                                 // 5219\n                                                                                                                      // 5220\n  var t = a.mul(b);                                                                                                   // 5221\n  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);                                          // 5222\n  var u = t.isub(c).ishrn(this.shift);                                                                                // 5223\n  var res = u;                                                                                                        // 5224\n  if (u.cmp(this.m) >= 0)                                                                                             // 5225\n    res = u.isub(this.m);                                                                                             // 5226\n  else if (u.cmpn(0) < 0)                                                                                             // 5227\n    res = u.iadd(this.m);                                                                                             // 5228\n                                                                                                                      // 5229\n  return res._forceRed(this);                                                                                         // 5230\n};                                                                                                                    // 5231\n                                                                                                                      // 5232\nMont.prototype.invm = function invm(a) {                                                                              // 5233\n  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R                                                                   // 5234\n  var res = this.imod(a.invm(this.m).mul(this.r2));                                                                   // 5235\n  return res._forceRed(this);                                                                                         // 5236\n};                                                                                                                    // 5237\n                                                                                                                      // 5238\n})(typeof module === 'undefined' || module, this);                                                                    // 5239\n                                                                                                                      // 5240\n},{}],29:[function(require,module,exports){                                                                           // 5241\n(function (Buffer){                                                                                                   // 5242\nvar bn = require('bn.js');                                                                                            // 5243\nvar randomBytes = require('randombytes');                                                                             // 5244\nmodule.exports = crt;                                                                                                 // 5245\nfunction blind(priv) {                                                                                                // 5246\n  var r = getr(priv);                                                                                                 // 5247\n  var blinder = r.toRed(bn.mont(priv.modulus))                                                                        // 5248\n  .redPow(new bn(priv.publicExponent)).fromRed();                                                                     // 5249\n  return {                                                                                                            // 5250\n    blinder: blinder,                                                                                                 // 5251\n    unblinder:r.invm(priv.modulus)                                                                                    // 5252\n  };                                                                                                                  // 5253\n}                                                                                                                     // 5254\nfunction crt(msg, priv) {                                                                                             // 5255\n  var blinds = blind(priv);                                                                                           // 5256\n  var len = priv.modulus.byteLength();                                                                                // 5257\n  var mod = bn.mont(priv.modulus);                                                                                    // 5258\n  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);                                                    // 5259\n  var c1 = blinded.toRed(bn.mont(priv.prime1));                                                                       // 5260\n  var c2 = blinded.toRed(bn.mont(priv.prime2));                                                                       // 5261\n  var qinv = priv.coefficient;                                                                                        // 5262\n  var p = priv.prime1;                                                                                                // 5263\n  var q = priv.prime2;                                                                                                // 5264\n  var m1 = c1.redPow(priv.exponent1);                                                                                 // 5265\n  var m2 = c2.redPow(priv.exponent2);                                                                                 // 5266\n  m1 = m1.fromRed();                                                                                                  // 5267\n  m2 = m2.fromRed();                                                                                                  // 5268\n  var h = m1.isub(m2).imul(qinv).mod(p);                                                                              // 5269\n  h.imul(q);                                                                                                          // 5270\n  m2.iadd(h);                                                                                                         // 5271\n  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());                                        // 5272\n  if (out.length < len) {                                                                                             // 5273\n    var prefix = new Buffer(len - out.length);                                                                        // 5274\n    prefix.fill(0);                                                                                                   // 5275\n    out = Buffer.concat([prefix, out], len);                                                                          // 5276\n  }                                                                                                                   // 5277\n  return out;                                                                                                         // 5278\n}                                                                                                                     // 5279\ncrt.getr = getr;                                                                                                      // 5280\nfunction getr(priv) {                                                                                                 // 5281\n  var len = priv.modulus.byteLength();                                                                                // 5282\n  var r = new bn(randomBytes(len));                                                                                   // 5283\n  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {                                   // 5284\n    r = new bn(randomBytes(len));                                                                                     // 5285\n  }                                                                                                                   // 5286\n  return r;                                                                                                           // 5287\n}                                                                                                                     // 5288\n}).call(this,require(\"buffer\").Buffer)                                                                                // 5289\n                                                                                                                      // 5290\n},{\"bn.js\":28,\"buffer\":2,\"randombytes\":142}],30:[function(require,module,exports){                                    // 5291\nvar elliptic = exports;                                                                                               // 5292\n                                                                                                                      // 5293\nelliptic.version = require('../package.json').version;                                                                // 5294\nelliptic.utils = require('./elliptic/utils');                                                                         // 5295\nelliptic.rand = require('brorand');                                                                                   // 5296\nelliptic.hmacDRBG = require('./elliptic/hmac-drbg');                                                                  // 5297\nelliptic.curve = require('./elliptic/curve');                                                                         // 5298\nelliptic.curves = require('./elliptic/curves');                                                                       // 5299\n                                                                                                                      // 5300\n// Protocols                                                                                                          // 5301\nelliptic.ec = require('./elliptic/ec');                                                                               // 5302\n                                                                                                                      // 5303\n},{\"../package.json\":49,\"./elliptic/curve\":33,\"./elliptic/curves\":36,\"./elliptic/ec\":37,\"./elliptic/hmac-drbg\":40,\"./elliptic/utils\":41,\"brorand\":42}],31:[function(require,module,exports){\nvar bn = require('bn.js');                                                                                            // 5305\nvar elliptic = require('../../elliptic');                                                                             // 5306\n                                                                                                                      // 5307\nvar getNAF = elliptic.utils.getNAF;                                                                                   // 5308\nvar getJSF = elliptic.utils.getJSF;                                                                                   // 5309\nvar assert = elliptic.utils.assert;                                                                                   // 5310\n                                                                                                                      // 5311\nfunction BaseCurve(type, conf) {                                                                                      // 5312\n  this.type = type;                                                                                                   // 5313\n  this.p = new bn(conf.p, 16);                                                                                        // 5314\n                                                                                                                      // 5315\n  // Use Montgomery, when there is no fast reduction for the prime                                                    // 5316\n  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);                                                       // 5317\n                                                                                                                      // 5318\n  // Useful for many curves                                                                                           // 5319\n  this.zero = new bn(0).toRed(this.red);                                                                              // 5320\n  this.one = new bn(1).toRed(this.red);                                                                               // 5321\n  this.two = new bn(2).toRed(this.red);                                                                               // 5322\n                                                                                                                      // 5323\n  // Curve configuration, optional                                                                                    // 5324\n  this.n = conf.n && new bn(conf.n, 16);                                                                              // 5325\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);                                                           // 5326\n                                                                                                                      // 5327\n  // Temporary arrays                                                                                                 // 5328\n  this._wnafT1 = new Array(4);                                                                                        // 5329\n  this._wnafT2 = new Array(4);                                                                                        // 5330\n  this._wnafT3 = new Array(4);                                                                                        // 5331\n  this._wnafT4 = new Array(4);                                                                                        // 5332\n}                                                                                                                     // 5333\nmodule.exports = BaseCurve;                                                                                           // 5334\n                                                                                                                      // 5335\nBaseCurve.prototype.point = function point() {                                                                        // 5336\n  throw new Error('Not implemented');                                                                                 // 5337\n};                                                                                                                    // 5338\n                                                                                                                      // 5339\nBaseCurve.prototype.validate = function validate(point) {                                                             // 5340\n  throw new Error('Not implemented');                                                                                 // 5341\n};                                                                                                                    // 5342\n                                                                                                                      // 5343\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {                                                      // 5344\n  var doubles = p._getDoubles();                                                                                      // 5345\n                                                                                                                      // 5346\n  var naf = getNAF(k, 1);                                                                                             // 5347\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);                                               // 5348\n  I /= 3;                                                                                                             // 5349\n                                                                                                                      // 5350\n  // Translate into more windowed form                                                                                // 5351\n  var repr = [];                                                                                                      // 5352\n  for (var j = 0; j < naf.length; j += doubles.step) {                                                                // 5353\n    var nafW = 0;                                                                                                     // 5354\n    for (var k = j + doubles.step - 1; k >= j; k--)                                                                   // 5355\n      nafW = (nafW << 1) + naf[k];                                                                                    // 5356\n    repr.push(nafW);                                                                                                  // 5357\n  }                                                                                                                   // 5358\n                                                                                                                      // 5359\n  var a = this.jpoint(null, null, null);                                                                              // 5360\n  var b = this.jpoint(null, null, null);                                                                              // 5361\n  for (var i = I; i > 0; i--) {                                                                                       // 5362\n    for (var j = 0; j < repr.length; j++) {                                                                           // 5363\n      var nafW = repr[j];                                                                                             // 5364\n      if (nafW === i)                                                                                                 // 5365\n        b = b.mixedAdd(doubles.points[j]);                                                                            // 5366\n      else if (nafW === -i)                                                                                           // 5367\n        b = b.mixedAdd(doubles.points[j].neg());                                                                      // 5368\n    }                                                                                                                 // 5369\n    a = a.add(b);                                                                                                     // 5370\n  }                                                                                                                   // 5371\n  return a.toP();                                                                                                     // 5372\n};                                                                                                                    // 5373\n                                                                                                                      // 5374\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {                                                              // 5375\n  var w = 4;                                                                                                          // 5376\n                                                                                                                      // 5377\n  // Precompute window                                                                                                // 5378\n  var nafPoints = p._getNAFPoints(w);                                                                                 // 5379\n  w = nafPoints.wnd;                                                                                                  // 5380\n  var wnd = nafPoints.points;                                                                                         // 5381\n                                                                                                                      // 5382\n  // Get NAF form                                                                                                     // 5383\n  var naf = getNAF(k, w);                                                                                             // 5384\n                                                                                                                      // 5385\n  // Add `this`*(N+1) for every w-NAF index                                                                           // 5386\n  var acc = this.jpoint(null, null, null);                                                                            // 5387\n  for (var i = naf.length - 1; i >= 0; i--) {                                                                         // 5388\n    // Count zeroes                                                                                                   // 5389\n    for (var k = 0; i >= 0 && naf[i] === 0; i--)                                                                      // 5390\n      k++;                                                                                                            // 5391\n    if (i >= 0)                                                                                                       // 5392\n      k++;                                                                                                            // 5393\n    acc = acc.dblp(k);                                                                                                // 5394\n                                                                                                                      // 5395\n    if (i < 0)                                                                                                        // 5396\n      break;                                                                                                          // 5397\n    var z = naf[i];                                                                                                   // 5398\n    assert(z !== 0);                                                                                                  // 5399\n    if (p.type === 'affine') {                                                                                        // 5400\n      // J +- P                                                                                                       // 5401\n      if (z > 0)                                                                                                      // 5402\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);                                                                        // 5403\n      else                                                                                                            // 5404\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());                                                                 // 5405\n    } else {                                                                                                          // 5406\n      // J +- J                                                                                                       // 5407\n      if (z > 0)                                                                                                      // 5408\n        acc = acc.add(wnd[(z - 1) >> 1]);                                                                             // 5409\n      else                                                                                                            // 5410\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());                                                                      // 5411\n    }                                                                                                                 // 5412\n  }                                                                                                                   // 5413\n  return p.type === 'affine' ? acc.toP() : acc;                                                                       // 5414\n};                                                                                                                    // 5415\n                                                                                                                      // 5416\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,                                                          // 5417\n                                                       points,                                                        // 5418\n                                                       coeffs,                                                        // 5419\n                                                       len) {                                                         // 5420\n  var wndWidth = this._wnafT1;                                                                                        // 5421\n  var wnd = this._wnafT2;                                                                                             // 5422\n  var naf = this._wnafT3;                                                                                             // 5423\n                                                                                                                      // 5424\n  // Fill all arrays                                                                                                  // 5425\n  var max = 0;                                                                                                        // 5426\n  for (var i = 0; i < len; i++) {                                                                                     // 5427\n    var p = points[i];                                                                                                // 5428\n    var nafPoints = p._getNAFPoints(defW);                                                                            // 5429\n    wndWidth[i] = nafPoints.wnd;                                                                                      // 5430\n    wnd[i] = nafPoints.points;                                                                                        // 5431\n  }                                                                                                                   // 5432\n                                                                                                                      // 5433\n  // Comb small window NAFs                                                                                           // 5434\n  for (var i = len - 1; i >= 1; i -= 2) {                                                                             // 5435\n    var a = i - 1;                                                                                                    // 5436\n    var b = i;                                                                                                        // 5437\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {                                                                     // 5438\n      naf[a] = getNAF(coeffs[a], wndWidth[a]);                                                                        // 5439\n      naf[b] = getNAF(coeffs[b], wndWidth[b]);                                                                        // 5440\n      max = Math.max(naf[a].length, max);                                                                             // 5441\n      max = Math.max(naf[b].length, max);                                                                             // 5442\n      continue;                                                                                                       // 5443\n    }                                                                                                                 // 5444\n                                                                                                                      // 5445\n    var comb = [                                                                                                      // 5446\n      points[a], /* 1 */                                                                                              // 5447\n      null, /* 3 */                                                                                                   // 5448\n      null, /* 5 */                                                                                                   // 5449\n      points[b] /* 7 */                                                                                               // 5450\n    ];                                                                                                                // 5451\n                                                                                                                      // 5452\n    // Try to avoid Projective points, if possible                                                                    // 5453\n    if (points[a].y.cmp(points[b].y) === 0) {                                                                         // 5454\n      comb[1] = points[a].add(points[b]);                                                                             // 5455\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());                                                            // 5456\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {                                                         // 5457\n      comb[1] = points[a].toJ().mixedAdd(points[b]);                                                                  // 5458\n      comb[2] = points[a].add(points[b].neg());                                                                       // 5459\n    } else {                                                                                                          // 5460\n      comb[1] = points[a].toJ().mixedAdd(points[b]);                                                                  // 5461\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());                                                            // 5462\n    }                                                                                                                 // 5463\n                                                                                                                      // 5464\n    var index = [                                                                                                     // 5465\n      -3, /* -1 -1 */                                                                                                 // 5466\n      -1, /* -1 0 */                                                                                                  // 5467\n      -5, /* -1 1 */                                                                                                  // 5468\n      -7, /* 0 -1 */                                                                                                  // 5469\n      0, /* 0 0 */                                                                                                    // 5470\n      7, /* 0 1 */                                                                                                    // 5471\n      5, /* 1 -1 */                                                                                                   // 5472\n      1, /* 1 0 */                                                                                                    // 5473\n      3  /* 1 1 */                                                                                                    // 5474\n    ];                                                                                                                // 5475\n                                                                                                                      // 5476\n    var jsf = getJSF(coeffs[a], coeffs[b]);                                                                           // 5477\n    max = Math.max(jsf[0].length, max);                                                                               // 5478\n    naf[a] = new Array(max);                                                                                          // 5479\n    naf[b] = new Array(max);                                                                                          // 5480\n    for (var j = 0; j < max; j++) {                                                                                   // 5481\n      var ja = jsf[0][j] | 0;                                                                                         // 5482\n      var jb = jsf[1][j] | 0;                                                                                         // 5483\n                                                                                                                      // 5484\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];                                                                     // 5485\n      naf[b][j] = 0;                                                                                                  // 5486\n      wnd[a] = comb;                                                                                                  // 5487\n    }                                                                                                                 // 5488\n  }                                                                                                                   // 5489\n                                                                                                                      // 5490\n  var acc = this.jpoint(null, null, null);                                                                            // 5491\n  var tmp = this._wnafT4;                                                                                             // 5492\n  for (var i = max; i >= 0; i--) {                                                                                    // 5493\n    var k = 0;                                                                                                        // 5494\n                                                                                                                      // 5495\n    while (i >= 0) {                                                                                                  // 5496\n      var zero = true;                                                                                                // 5497\n      for (var j = 0; j < len; j++) {                                                                                 // 5498\n        tmp[j] = naf[j][i] | 0;                                                                                       // 5499\n        if (tmp[j] !== 0)                                                                                             // 5500\n          zero = false;                                                                                               // 5501\n      }                                                                                                               // 5502\n      if (!zero)                                                                                                      // 5503\n        break;                                                                                                        // 5504\n      k++;                                                                                                            // 5505\n      i--;                                                                                                            // 5506\n    }                                                                                                                 // 5507\n    if (i >= 0)                                                                                                       // 5508\n      k++;                                                                                                            // 5509\n    acc = acc.dblp(k);                                                                                                // 5510\n    if (i < 0)                                                                                                        // 5511\n      break;                                                                                                          // 5512\n                                                                                                                      // 5513\n    for (var j = 0; j < len; j++) {                                                                                   // 5514\n      var z = tmp[j];                                                                                                 // 5515\n      var p;                                                                                                          // 5516\n      if (z === 0)                                                                                                    // 5517\n        continue;                                                                                                     // 5518\n      else if (z > 0)                                                                                                 // 5519\n        p = wnd[j][(z - 1) >> 1];                                                                                     // 5520\n      else if (z < 0)                                                                                                 // 5521\n        p = wnd[j][(-z - 1) >> 1].neg();                                                                              // 5522\n                                                                                                                      // 5523\n      if (p.type === 'affine')                                                                                        // 5524\n        acc = acc.mixedAdd(p);                                                                                        // 5525\n      else                                                                                                            // 5526\n        acc = acc.add(p);                                                                                             // 5527\n    }                                                                                                                 // 5528\n  }                                                                                                                   // 5529\n  // Zeroify references                                                                                               // 5530\n  for (var i = 0; i < len; i++)                                                                                       // 5531\n    wnd[i] = null;                                                                                                    // 5532\n  return acc.toP();                                                                                                   // 5533\n};                                                                                                                    // 5534\n                                                                                                                      // 5535\nBaseCurve.BasePoint = BasePoint;                                                                                      // 5536\n                                                                                                                      // 5537\nfunction BasePoint(curve, type) {                                                                                     // 5538\n  this.curve = curve;                                                                                                 // 5539\n  this.type = type;                                                                                                   // 5540\n  this.precomputed = null;                                                                                            // 5541\n}                                                                                                                     // 5542\n                                                                                                                      // 5543\nBasePoint.prototype.validate = function validate() {                                                                  // 5544\n  return this.curve.validate(this);                                                                                   // 5545\n};                                                                                                                    // 5546\n                                                                                                                      // 5547\nBasePoint.prototype.precompute = function precompute(power, _beta) {                                                  // 5548\n  if (this.precomputed)                                                                                               // 5549\n    return this;                                                                                                      // 5550\n                                                                                                                      // 5551\n  var precomputed = {                                                                                                 // 5552\n    doubles: null,                                                                                                    // 5553\n    naf: null,                                                                                                        // 5554\n    beta: null                                                                                                        // 5555\n  };                                                                                                                  // 5556\n  precomputed.naf = this._getNAFPoints(8);                                                                            // 5557\n  precomputed.doubles = this._getDoubles(4, power);                                                                   // 5558\n  precomputed.beta = this._getBeta();                                                                                 // 5559\n  this.precomputed = precomputed;                                                                                     // 5560\n                                                                                                                      // 5561\n  return this;                                                                                                        // 5562\n};                                                                                                                    // 5563\n                                                                                                                      // 5564\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {                                                 // 5565\n  if (this.precomputed && this.precomputed.doubles)                                                                   // 5566\n    return this.precomputed.doubles;                                                                                  // 5567\n                                                                                                                      // 5568\n  var doubles = [ this ];                                                                                             // 5569\n  var acc = this;                                                                                                     // 5570\n  for (var i = 0; i < power; i += step) {                                                                             // 5571\n    for (var j = 0; j < step; j++)                                                                                    // 5572\n      acc = acc.dbl();                                                                                                // 5573\n    doubles.push(acc);                                                                                                // 5574\n  }                                                                                                                   // 5575\n  return {                                                                                                            // 5576\n    step: step,                                                                                                       // 5577\n    points: doubles                                                                                                   // 5578\n  };                                                                                                                  // 5579\n};                                                                                                                    // 5580\n                                                                                                                      // 5581\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {                                                     // 5582\n  if (this.precomputed && this.precomputed.naf)                                                                       // 5583\n    return this.precomputed.naf;                                                                                      // 5584\n                                                                                                                      // 5585\n  var res = [ this ];                                                                                                 // 5586\n  var max = (1 << wnd) - 1;                                                                                           // 5587\n  var dbl = max === 1 ? null : this.dbl();                                                                            // 5588\n  for (var i = 1; i < max; i++)                                                                                       // 5589\n    res[i] = res[i - 1].add(dbl);                                                                                     // 5590\n  return {                                                                                                            // 5591\n    wnd: wnd,                                                                                                         // 5592\n    points: res                                                                                                       // 5593\n  };                                                                                                                  // 5594\n};                                                                                                                    // 5595\n                                                                                                                      // 5596\nBasePoint.prototype._getBeta = function _getBeta() {                                                                  // 5597\n  return null;                                                                                                        // 5598\n};                                                                                                                    // 5599\n                                                                                                                      // 5600\nBasePoint.prototype.dblp = function dblp(k) {                                                                         // 5601\n  var r = this;                                                                                                       // 5602\n  for (var i = 0; i < k; i++)                                                                                         // 5603\n    r = r.dbl();                                                                                                      // 5604\n  return r;                                                                                                           // 5605\n};                                                                                                                    // 5606\n                                                                                                                      // 5607\n},{\"../../elliptic\":30,\"bn.js\":28}],32:[function(require,module,exports){                                             // 5608\nvar curve = require('../curve');                                                                                      // 5609\nvar elliptic = require('../../elliptic');                                                                             // 5610\nvar bn = require('bn.js');                                                                                            // 5611\nvar inherits = require('inherits');                                                                                   // 5612\nvar Base = curve.base;                                                                                                // 5613\n                                                                                                                      // 5614\nvar getNAF = elliptic.utils.getNAF;                                                                                   // 5615\nvar assert = elliptic.utils.assert;                                                                                   // 5616\n                                                                                                                      // 5617\nfunction EdwardsCurve(conf) {                                                                                         // 5618\n  // NOTE: Important as we are creating point in Base.call()                                                          // 5619\n  this.twisted = conf.a != 1;                                                                                         // 5620\n  this.mOneA = this.twisted && conf.a == -1;                                                                          // 5621\n  this.extended = this.mOneA;                                                                                         // 5622\n                                                                                                                      // 5623\n  Base.call(this, 'mont', conf);                                                                                      // 5624\n                                                                                                                      // 5625\n  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);                                                        // 5626\n  this.c = new bn(conf.c, 16).toRed(this.red);                                                                        // 5627\n  this.c2 = this.c.redSqr();                                                                                          // 5628\n  this.d = new bn(conf.d, 16).toRed(this.red);                                                                        // 5629\n  this.dd = this.d.redAdd(this.d);                                                                                    // 5630\n                                                                                                                      // 5631\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);                                                            // 5632\n  this.oneC = conf.c == 1;                                                                                            // 5633\n}                                                                                                                     // 5634\ninherits(EdwardsCurve, Base);                                                                                         // 5635\nmodule.exports = EdwardsCurve;                                                                                        // 5636\n                                                                                                                      // 5637\nEdwardsCurve.prototype._mulA = function _mulA(num) {                                                                  // 5638\n  if (this.mOneA)                                                                                                     // 5639\n    return num.redNeg();                                                                                              // 5640\n  else                                                                                                                // 5641\n    return this.a.redMul(num);                                                                                        // 5642\n};                                                                                                                    // 5643\n                                                                                                                      // 5644\nEdwardsCurve.prototype._mulC = function _mulC(num) {                                                                  // 5645\n  if (this.oneC)                                                                                                      // 5646\n    return num;                                                                                                       // 5647\n  else                                                                                                                // 5648\n    return this.c.redMul(num);                                                                                        // 5649\n};                                                                                                                    // 5650\n                                                                                                                      // 5651\nEdwardsCurve.prototype.point = function point(x, y, z, t) {                                                           // 5652\n  return new Point(this, x, y, z, t);                                                                                 // 5653\n};                                                                                                                    // 5654\n                                                                                                                      // 5655\n// Just for compatibility with Short curve                                                                            // 5656\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {                                                         // 5657\n  return this.point(x, y, z, t);                                                                                      // 5658\n};                                                                                                                    // 5659\n                                                                                                                      // 5660\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {                                                  // 5661\n  return Point.fromJSON(this, obj);                                                                                   // 5662\n};                                                                                                                    // 5663\n                                                                                                                      // 5664\nEdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {                                                     // 5665\n  x = new bn(x, 16);                                                                                                  // 5666\n  if (!x.red)                                                                                                         // 5667\n    x = x.toRed(this.red);                                                                                            // 5668\n                                                                                                                      // 5669\n  var x2 = x.redSqr();                                                                                                // 5670\n  var rhs = this.c2.redSub(this.a.redMul(x2));                                                                        // 5671\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));                                                       // 5672\n                                                                                                                      // 5673\n  var y = rhs.redMul(lhs.redInvm()).redSqrt();                                                                        // 5674\n  var isOdd = y.fromRed().isOdd();                                                                                    // 5675\n  if (odd && !isOdd || !odd && isOdd)                                                                                 // 5676\n    y = y.redNeg();                                                                                                   // 5677\n                                                                                                                      // 5678\n  return this.point(x, y, curve.one);                                                                                 // 5679\n};                                                                                                                    // 5680\n                                                                                                                      // 5681\nEdwardsCurve.prototype.validate = function validate(point) {                                                          // 5682\n  if (point.isInfinity())                                                                                             // 5683\n    return true;                                                                                                      // 5684\n                                                                                                                      // 5685\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)                                                                 // 5686\n  point.normalize();                                                                                                  // 5687\n                                                                                                                      // 5688\n  var x2 = point.x.redSqr();                                                                                          // 5689\n  var y2 = point.y.redSqr();                                                                                          // 5690\n  var lhs = x2.redMul(this.a).redAdd(y2);                                                                             // 5691\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));                                            // 5692\n                                                                                                                      // 5693\n  return lhs.cmp(rhs) === 0;                                                                                          // 5694\n};                                                                                                                    // 5695\n                                                                                                                      // 5696\nfunction Point(curve, x, y, z, t) {                                                                                   // 5697\n  Base.BasePoint.call(this, curve, 'projective');                                                                     // 5698\n  if (x === null && y === null && z === null) {                                                                       // 5699\n    this.x = this.curve.zero;                                                                                         // 5700\n    this.y = this.curve.one;                                                                                          // 5701\n    this.z = this.curve.one;                                                                                          // 5702\n    this.t = this.curve.zero;                                                                                         // 5703\n    this.zOne = true;                                                                                                 // 5704\n  } else {                                                                                                            // 5705\n    this.x = new bn(x, 16);                                                                                           // 5706\n    this.y = new bn(y, 16);                                                                                           // 5707\n    this.z = z ? new bn(z, 16) : this.curve.one;                                                                      // 5708\n    this.t = t && new bn(t, 16);                                                                                      // 5709\n    if (!this.x.red)                                                                                                  // 5710\n      this.x = this.x.toRed(this.curve.red);                                                                          // 5711\n    if (!this.y.red)                                                                                                  // 5712\n      this.y = this.y.toRed(this.curve.red);                                                                          // 5713\n    if (!this.z.red)                                                                                                  // 5714\n      this.z = this.z.toRed(this.curve.red);                                                                          // 5715\n    if (this.t && !this.t.red)                                                                                        // 5716\n      this.t = this.t.toRed(this.curve.red);                                                                          // 5717\n    this.zOne = this.z === this.curve.one;                                                                            // 5718\n                                                                                                                      // 5719\n    // Use extended coordinates                                                                                       // 5720\n    if (this.curve.extended && !this.t) {                                                                             // 5721\n      this.t = this.x.redMul(this.y);                                                                                 // 5722\n      if (!this.zOne)                                                                                                 // 5723\n        this.t = this.t.redMul(this.z.redInvm());                                                                     // 5724\n    }                                                                                                                 // 5725\n  }                                                                                                                   // 5726\n}                                                                                                                     // 5727\ninherits(Point, Base.BasePoint);                                                                                      // 5728\n                                                                                                                      // 5729\nPoint.fromJSON = function fromJSON(curve, obj) {                                                                      // 5730\n  return new Point(curve, obj[0], obj[1], obj[2]);                                                                    // 5731\n};                                                                                                                    // 5732\n                                                                                                                      // 5733\nPoint.prototype.inspect = function inspect() {                                                                        // 5734\n  if (this.isInfinity())                                                                                              // 5735\n    return '<EC Point Infinity>';                                                                                     // 5736\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +                                                         // 5737\n      ' y: ' + this.y.fromRed().toString(16, 2) +                                                                     // 5738\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';                                                                // 5739\n};                                                                                                                    // 5740\n                                                                                                                      // 5741\nPoint.prototype.isInfinity = function isInfinity() {                                                                  // 5742\n  // XXX This code assumes that zero is always zero in red                                                            // 5743\n  return this.x.cmpn(0) === 0 &&                                                                                      // 5744\n         this.y.cmp(this.z) === 0;                                                                                    // 5745\n};                                                                                                                    // 5746\n                                                                                                                      // 5747\nPoint.prototype._extDbl = function _extDbl() {                                                                        // 5748\n  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#doubling-dbl-2008-hwcd                             // 5749\n  // 4M + 4S                                                                                                          // 5750\n                                                                                                                      // 5751\n  // A = X1^2                                                                                                         // 5752\n  var a = this.x.redSqr();                                                                                            // 5753\n  // B = Y1^2                                                                                                         // 5754\n  var b = this.y.redSqr();                                                                                            // 5755\n  // C = 2 * Z1^2                                                                                                     // 5756\n  var c = this.z.redSqr();                                                                                            // 5757\n  c = c.redIAdd(c);                                                                                                   // 5758\n  // D = a * A                                                                                                        // 5759\n  var d = this.curve._mulA(a);                                                                                        // 5760\n  // E = (X1 + Y1)^2 - A - B                                                                                          // 5761\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);                                                       // 5762\n  // G = D + B                                                                                                        // 5763\n  var g = d.redAdd(b);                                                                                                // 5764\n  // F = G - C                                                                                                        // 5765\n  var f = g.redSub(c);                                                                                                // 5766\n  // H = D - B                                                                                                        // 5767\n  var h = d.redSub(b);                                                                                                // 5768\n  // X3 = E * F                                                                                                       // 5769\n  var nx = e.redMul(f);                                                                                               // 5770\n  // Y3 = G * H                                                                                                       // 5771\n  var ny = g.redMul(h);                                                                                               // 5772\n  // T3 = E * H                                                                                                       // 5773\n  var nt = e.redMul(h);                                                                                               // 5774\n  // Z3 = F * G                                                                                                       // 5775\n  var nz = f.redMul(g);                                                                                               // 5776\n  return this.curve.point(nx, ny, nz, nt);                                                                            // 5777\n};                                                                                                                    // 5778\n                                                                                                                      // 5779\nPoint.prototype._projDbl = function _projDbl() {                                                                      // 5780\n  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#doubling-dbl-2008-bbjlp                            // 5781\n  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#doubling-dbl-2007-bl                               // 5782\n  // and others                                                                                                       // 5783\n  // Generally 3M + 4S or 2M + 4S                                                                                     // 5784\n                                                                                                                      // 5785\n  // B = (X1 + Y1)^2                                                                                                  // 5786\n  var b = this.x.redAdd(this.y).redSqr();                                                                             // 5787\n  // C = X1^2                                                                                                         // 5788\n  var c = this.x.redSqr();                                                                                            // 5789\n  // D = Y1^2                                                                                                         // 5790\n  var d = this.y.redSqr();                                                                                            // 5791\n                                                                                                                      // 5792\n  if (this.curve.twisted) {                                                                                           // 5793\n    // E = a * C                                                                                                      // 5794\n    var e = this.curve._mulA(c);                                                                                      // 5795\n    // F = E + D                                                                                                      // 5796\n    var f = e.redAdd(d);                                                                                              // 5797\n    if (this.zOne) {                                                                                                  // 5798\n      // X3 = (B - C - D) * (F - 2)                                                                                   // 5799\n      var nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));                                                // 5800\n      // Y3 = F * (E - D)                                                                                             // 5801\n      var ny = f.redMul(e.redSub(d));                                                                                 // 5802\n      // Z3 = F^2 - 2 * F                                                                                             // 5803\n      var nz = f.redSqr().redSub(f).redSub(f);                                                                        // 5804\n    } else {                                                                                                          // 5805\n      // H = Z1^2                                                                                                     // 5806\n      var h = this.z.redSqr();                                                                                        // 5807\n      // J = F - 2 * H                                                                                                // 5808\n      var j = f.redSub(h).redISub(h);                                                                                 // 5809\n      // X3 = (B-C-D)*J                                                                                               // 5810\n      var nx = b.redSub(c).redISub(d).redMul(j);                                                                      // 5811\n      // Y3 = F * (E - D)                                                                                             // 5812\n      var ny = f.redMul(e.redSub(d));                                                                                 // 5813\n      // Z3 = F * J                                                                                                   // 5814\n      var nz = f.redMul(j);                                                                                           // 5815\n    }                                                                                                                 // 5816\n  } else {                                                                                                            // 5817\n    // E = C + D                                                                                                      // 5818\n    var e = c.redAdd(d);                                                                                              // 5819\n    // H = (c * Z1)^2                                                                                                 // 5820\n    var h = this.curve._mulC(redMul(this.z)).redSqr();                                                                // 5821\n    // J = E - 2 * H                                                                                                  // 5822\n    var j = e.redSub(h).redSub(h);                                                                                    // 5823\n    // X3 = c * (B - E) * J                                                                                           // 5824\n    var nx = this.curve._mulC(b.redISub(e)).redMul(j);                                                                // 5825\n    // Y3 = c * E * (C - D)                                                                                           // 5826\n    var ny = this.curve._mulC(e).redMul(c.redISub(d));                                                                // 5827\n    // Z3 = E * J                                                                                                     // 5828\n    var nz = e.redMul(j);                                                                                             // 5829\n  }                                                                                                                   // 5830\n  return this.curve.point(nx, ny, nz);                                                                                // 5831\n};                                                                                                                    // 5832\n                                                                                                                      // 5833\nPoint.prototype.dbl = function dbl() {                                                                                // 5834\n  if (this.isInfinity())                                                                                              // 5835\n    return this;                                                                                                      // 5836\n                                                                                                                      // 5837\n  // Double in extended coordinates                                                                                   // 5838\n  if (this.curve.extended)                                                                                            // 5839\n    return this._extDbl();                                                                                            // 5840\n  else                                                                                                                // 5841\n    return this._projDbl();                                                                                           // 5842\n};                                                                                                                    // 5843\n                                                                                                                      // 5844\nPoint.prototype._extAdd = function _extAdd(p) {                                                                       // 5845\n  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3                           // 5846\n  // 8M                                                                                                               // 5847\n                                                                                                                      // 5848\n  // A = (Y1 - X1) * (Y2 - X2)                                                                                        // 5849\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));                                                              // 5850\n  // B = (Y1 + X1) * (Y2 + X2)                                                                                        // 5851\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));                                                              // 5852\n  // C = T1 * k * T2                                                                                                  // 5853\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);                                                                   // 5854\n  // D = Z1 * 2 * Z2                                                                                                  // 5855\n  var d = this.z.redMul(p.z.redAdd(p.z));                                                                             // 5856\n  // E = B - A                                                                                                        // 5857\n  var e = b.redSub(a);                                                                                                // 5858\n  // F = D - C                                                                                                        // 5859\n  var f = d.redSub(c);                                                                                                // 5860\n  // G = D + C                                                                                                        // 5861\n  var g = d.redAdd(c);                                                                                                // 5862\n  // H = B + A                                                                                                        // 5863\n  var h = b.redAdd(a);                                                                                                // 5864\n  // X3 = E * F                                                                                                       // 5865\n  var nx = e.redMul(f);                                                                                               // 5866\n  // Y3 = G * H                                                                                                       // 5867\n  var ny = g.redMul(h);                                                                                               // 5868\n  // T3 = E * H                                                                                                       // 5869\n  var nt = e.redMul(h);                                                                                               // 5870\n  // Z3 = F * G                                                                                                       // 5871\n  var nz = f.redMul(g);                                                                                               // 5872\n  return this.curve.point(nx, ny, nz, nt);                                                                            // 5873\n};                                                                                                                    // 5874\n                                                                                                                      // 5875\nPoint.prototype._projAdd = function _projAdd(p) {                                                                     // 5876\n  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#addition-add-2008-bbjlp                            // 5877\n  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#addition-add-2007-bl                               // 5878\n  // 10M + 1S                                                                                                         // 5879\n                                                                                                                      // 5880\n  // A = Z1 * Z2                                                                                                      // 5881\n  var a = this.z.redMul(p.z);                                                                                         // 5882\n  // B = A^2                                                                                                          // 5883\n  var b = a.redSqr();                                                                                                 // 5884\n  // C = X1 * X2                                                                                                      // 5885\n  var c = this.x.redMul(p.x);                                                                                         // 5886\n  // D = Y1 * Y2                                                                                                      // 5887\n  var d = this.y.redMul(p.y);                                                                                         // 5888\n  // E = d * C * D                                                                                                    // 5889\n  var e = this.curve.d.redMul(c).redMul(d);                                                                           // 5890\n  // F = B - E                                                                                                        // 5891\n  var f = b.redSub(e);                                                                                                // 5892\n  // G = B + E                                                                                                        // 5893\n  var g = b.redAdd(e);                                                                                                // 5894\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)                                                                     // 5895\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);                                      // 5896\n  var nx = a.redMul(f).redMul(tmp);                                                                                   // 5897\n  if (this.curve.twisted) {                                                                                           // 5898\n    // Y3 = A * G * (D - a * C)                                                                                       // 5899\n    var ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));                                                       // 5900\n    // Z3 = F * G                                                                                                     // 5901\n    var nz = f.redMul(g);                                                                                             // 5902\n  } else {                                                                                                            // 5903\n    // Y3 = A * G * (D - C)                                                                                           // 5904\n    var ny = a.redMul(g).redMul(d.redSub(c));                                                                         // 5905\n    // Z3 = c * F * G                                                                                                 // 5906\n    var nz = this.curve._mulC(f).redMul(g);                                                                           // 5907\n  }                                                                                                                   // 5908\n  return this.curve.point(nx, ny, nz);                                                                                // 5909\n};                                                                                                                    // 5910\n                                                                                                                      // 5911\nPoint.prototype.add = function add(p) {                                                                               // 5912\n  if (this.isInfinity())                                                                                              // 5913\n    return p;                                                                                                         // 5914\n  if (p.isInfinity())                                                                                                 // 5915\n    return this;                                                                                                      // 5916\n                                                                                                                      // 5917\n  if (this.curve.extended)                                                                                            // 5918\n    return this._extAdd(p);                                                                                           // 5919\n  else                                                                                                                // 5920\n    return this._projAdd(p);                                                                                          // 5921\n};                                                                                                                    // 5922\n                                                                                                                      // 5923\nPoint.prototype.mul = function mul(k) {                                                                               // 5924\n  if (this.precomputed && this.precomputed.doubles)                                                                   // 5925\n    return this.curve._fixedNafMul(this, k);                                                                          // 5926\n  else                                                                                                                // 5927\n    return this.curve._wnafMul(this, k);                                                                              // 5928\n};                                                                                                                    // 5929\n                                                                                                                      // 5930\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {                                                                 // 5931\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);                                                       // 5932\n};                                                                                                                    // 5933\n                                                                                                                      // 5934\nPoint.prototype.normalize = function normalize() {                                                                    // 5935\n  if (this.zOne)                                                                                                      // 5936\n    return this;                                                                                                      // 5937\n                                                                                                                      // 5938\n  // Normalize coordinates                                                                                            // 5939\n  var zi = this.z.redInvm();                                                                                          // 5940\n  this.x = this.x.redMul(zi);                                                                                         // 5941\n  this.y = this.y.redMul(zi);                                                                                         // 5942\n  if (this.t)                                                                                                         // 5943\n    this.t = this.t.redMul(zi);                                                                                       // 5944\n  this.z = this.curve.one;                                                                                            // 5945\n  this.zOne = true;                                                                                                   // 5946\n  return this;                                                                                                        // 5947\n};                                                                                                                    // 5948\n                                                                                                                      // 5949\nPoint.prototype.neg = function neg() {                                                                                // 5950\n  return this.curve.point(this.x.redNeg(),                                                                            // 5951\n                          this.y,                                                                                     // 5952\n                          this.z,                                                                                     // 5953\n                          this.t && this.t.redNeg());                                                                 // 5954\n};                                                                                                                    // 5955\n                                                                                                                      // 5956\nPoint.prototype.getX = function getX() {                                                                              // 5957\n  this.normalize();                                                                                                   // 5958\n  return this.x.fromRed();                                                                                            // 5959\n};                                                                                                                    // 5960\n                                                                                                                      // 5961\nPoint.prototype.getY = function getY() {                                                                              // 5962\n  this.normalize();                                                                                                   // 5963\n  return this.y.fromRed();                                                                                            // 5964\n};                                                                                                                    // 5965\n                                                                                                                      // 5966\n// Compatibility with BaseCurve                                                                                       // 5967\nPoint.prototype.toP = Point.prototype.normalize;                                                                      // 5968\nPoint.prototype.mixedAdd = Point.prototype.add;                                                                       // 5969\n                                                                                                                      // 5970\n},{\"../../elliptic\":30,\"../curve\":33,\"bn.js\":28,\"inherits\":144}],33:[function(require,module,exports){                // 5971\nvar curve = exports;                                                                                                  // 5972\n                                                                                                                      // 5973\ncurve.base = require('./base');                                                                                       // 5974\ncurve.short = require('./short');                                                                                     // 5975\ncurve.mont = require('./mont');                                                                                       // 5976\ncurve.edwards = require('./edwards');                                                                                 // 5977\n                                                                                                                      // 5978\n},{\"./base\":31,\"./edwards\":32,\"./mont\":34,\"./short\":35}],34:[function(require,module,exports){                        // 5979\nvar curve = require('../curve');                                                                                      // 5980\nvar elliptic = require('../../elliptic');                                                                             // 5981\nvar bn = require('bn.js');                                                                                            // 5982\nvar inherits = require('inherits');                                                                                   // 5983\nvar Base = curve.base;                                                                                                // 5984\n                                                                                                                      // 5985\nvar getNAF = elliptic.utils.getNAF;                                                                                   // 5986\nvar assert = elliptic.utils.assert;                                                                                   // 5987\n                                                                                                                      // 5988\nfunction MontCurve(conf) {                                                                                            // 5989\n  Base.call(this, 'mont', conf);                                                                                      // 5990\n                                                                                                                      // 5991\n  this.a = new bn(conf.a, 16).toRed(this.red);                                                                        // 5992\n  this.b = new bn(conf.b, 16).toRed(this.red);                                                                        // 5993\n  this.i4 = new bn(4).toRed(this.red).redInvm();                                                                      // 5994\n  this.two = new bn(2).toRed(this.red);                                                                               // 5995\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));                                                                 // 5996\n}                                                                                                                     // 5997\ninherits(MontCurve, Base);                                                                                            // 5998\nmodule.exports = MontCurve;                                                                                           // 5999\n                                                                                                                      // 6000\nMontCurve.prototype.point = function point(x, z) {                                                                    // 6001\n  return new Point(this, x, z);                                                                                       // 6002\n};                                                                                                                    // 6003\n                                                                                                                      // 6004\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {                                                     // 6005\n  return Point.fromJSON(this, obj);                                                                                   // 6006\n}                                                                                                                     // 6007\n                                                                                                                      // 6008\nMontCurve.prototype.validate = function validate(point) {                                                             // 6009\n  var x = point.normalize().x;                                                                                        // 6010\n  var x2 = x.redSqr();                                                                                                // 6011\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);                                                         // 6012\n  var y = rhs.redSqrt();                                                                                              // 6013\n                                                                                                                      // 6014\n  return y.redSqr().cmp(rhs) === 0;                                                                                   // 6015\n};                                                                                                                    // 6016\n                                                                                                                      // 6017\nfunction Point(curve, x, z) {                                                                                         // 6018\n  Base.BasePoint.call(this, curve, 'projective');                                                                     // 6019\n  if (x === null && z === null) {                                                                                     // 6020\n    this.x = this.curve.one;                                                                                          // 6021\n    this.z = this.curve.zero;                                                                                         // 6022\n  } else {                                                                                                            // 6023\n    this.x = new bn(x, 16);                                                                                           // 6024\n    this.z = new bn(z, 16);                                                                                           // 6025\n    if (!this.x.red)                                                                                                  // 6026\n      this.x = this.x.toRed(this.curve.red);                                                                          // 6027\n    if (!this.z.red)                                                                                                  // 6028\n      this.z = this.z.toRed(this.curve.red);                                                                          // 6029\n  }                                                                                                                   // 6030\n}                                                                                                                     // 6031\ninherits(Point, Base.BasePoint);                                                                                      // 6032\n                                                                                                                      // 6033\nPoint.prototype.precompute = function precompute() {                                                                  // 6034\n  // No-op                                                                                                            // 6035\n};                                                                                                                    // 6036\n                                                                                                                      // 6037\nPoint.fromJSON = function fromJSON(curve, obj) {                                                                      // 6038\n  return new Point(curve, obj[0], obj[1] || curve.one);                                                               // 6039\n};                                                                                                                    // 6040\n                                                                                                                      // 6041\nPoint.prototype.inspect = function inspect() {                                                                        // 6042\n  if (this.isInfinity())                                                                                              // 6043\n    return '<EC Point Infinity>';                                                                                     // 6044\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +                                                         // 6045\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';                                                                // 6046\n};                                                                                                                    // 6047\n                                                                                                                      // 6048\nPoint.prototype.isInfinity = function isInfinity() {                                                                  // 6049\n  // XXX This code assumes that zero is always zero in red                                                            // 6050\n  return this.z.cmpn(0) === 0;                                                                                        // 6051\n};                                                                                                                    // 6052\n                                                                                                                      // 6053\nPoint.prototype.dbl = function dbl() {                                                                                // 6054\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3                                      // 6055\n  // 2M + 2S + 4A                                                                                                     // 6056\n                                                                                                                      // 6057\n  // A = X1 + Z1                                                                                                      // 6058\n  var a = this.x.redAdd(this.z);                                                                                      // 6059\n  // AA = A^2                                                                                                         // 6060\n  var aa = a.redSqr();                                                                                                // 6061\n  // B = X1 - Z1                                                                                                      // 6062\n  var b = this.x.redSub(this.z);                                                                                      // 6063\n  // BB = B^2                                                                                                         // 6064\n  var bb = b.redSqr();                                                                                                // 6065\n  // C = AA - BB                                                                                                      // 6066\n  var c = aa.redSub(bb);                                                                                              // 6067\n  // X3 = AA * BB                                                                                                     // 6068\n  var nx = aa.redMul(bb);                                                                                             // 6069\n  // Z3 = C * (BB + A24 * C)                                                                                          // 6070\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));                                                             // 6071\n  return this.curve.point(nx, nz);                                                                                    // 6072\n};                                                                                                                    // 6073\n                                                                                                                      // 6074\nPoint.prototype.add = function add(p) {                                                                               // 6075\n  throw new Error('Not supported on Montgomery curve');                                                               // 6076\n};                                                                                                                    // 6077\n                                                                                                                      // 6078\nPoint.prototype.diffAdd = function diffAdd(p, diff) {                                                                 // 6079\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3                                      // 6080\n  // 4M + 2S + 6A                                                                                                     // 6081\n                                                                                                                      // 6082\n  // A = X2 + Z2                                                                                                      // 6083\n  var a = this.x.redAdd(this.z);                                                                                      // 6084\n  // B = X2 - Z2                                                                                                      // 6085\n  var b = this.x.redSub(this.z);                                                                                      // 6086\n  // C = X3 + Z3                                                                                                      // 6087\n  var c = p.x.redAdd(p.z);                                                                                            // 6088\n  // D = X3 - Z3                                                                                                      // 6089\n  var d = p.x.redSub(p.z);                                                                                            // 6090\n  // DA = D * A                                                                                                       // 6091\n  var da = d.redMul(a);                                                                                               // 6092\n  // CB = C * B                                                                                                       // 6093\n  var cb = c.redMul(b);                                                                                               // 6094\n  // X5 = Z1 * (DA + CB)^2                                                                                            // 6095\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());                                                                     // 6096\n  // Z5 = X1 * (DA - CB)^2                                                                                            // 6097\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());                                                                    // 6098\n  return this.curve.point(nx, nz);                                                                                    // 6099\n};                                                                                                                    // 6100\n                                                                                                                      // 6101\nPoint.prototype.mul = function mul(k) {                                                                               // 6102\n  var t = k.clone();                                                                                                  // 6103\n  var a = this; // (N / 2) * Q + Q                                                                                    // 6104\n  var b = this.curve.point(null, null); // (N / 2) * Q                                                                // 6105\n  var c = this; // Q                                                                                                  // 6106\n                                                                                                                      // 6107\n  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))                                                                    // 6108\n    bits.push(t.andln(1));                                                                                            // 6109\n                                                                                                                      // 6110\n  for (var i = bits.length - 1; i >= 0; i--) {                                                                        // 6111\n    if (bits[i] === 0) {                                                                                              // 6112\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q                                                                 // 6113\n      a = a.diffAdd(b, c);                                                                                            // 6114\n      // N * Q = 2 * ((N / 2) * Q + Q))                                                                               // 6115\n      b = b.dbl();                                                                                                    // 6116\n    } else {                                                                                                          // 6117\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)                                                                    // 6118\n      b = a.diffAdd(b, c);                                                                                            // 6119\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)                                                                            // 6120\n      a = a.dbl();                                                                                                    // 6121\n    }                                                                                                                 // 6122\n  }                                                                                                                   // 6123\n  return b;                                                                                                           // 6124\n};                                                                                                                    // 6125\n                                                                                                                      // 6126\nPoint.prototype.mulAdd = function mulAdd() {                                                                          // 6127\n  throw new Error('Not supported on Montgomery curve');                                                               // 6128\n};                                                                                                                    // 6129\n                                                                                                                      // 6130\nPoint.prototype.normalize = function normalize() {                                                                    // 6131\n  this.x = this.x.redMul(this.z.redInvm());                                                                           // 6132\n  this.z = this.curve.one;                                                                                            // 6133\n  return this;                                                                                                        // 6134\n};                                                                                                                    // 6135\n                                                                                                                      // 6136\nPoint.prototype.getX = function getX() {                                                                              // 6137\n  // Normalize coordinates                                                                                            // 6138\n  this.normalize();                                                                                                   // 6139\n                                                                                                                      // 6140\n  return this.x.fromRed();                                                                                            // 6141\n};                                                                                                                    // 6142\n                                                                                                                      // 6143\n},{\"../../elliptic\":30,\"../curve\":33,\"bn.js\":28,\"inherits\":144}],35:[function(require,module,exports){                // 6144\nvar curve = require('../curve');                                                                                      // 6145\nvar elliptic = require('../../elliptic');                                                                             // 6146\nvar bn = require('bn.js');                                                                                            // 6147\nvar inherits = require('inherits');                                                                                   // 6148\nvar Base = curve.base;                                                                                                // 6149\n                                                                                                                      // 6150\nvar getNAF = elliptic.utils.getNAF;                                                                                   // 6151\nvar assert = elliptic.utils.assert;                                                                                   // 6152\n                                                                                                                      // 6153\nfunction ShortCurve(conf) {                                                                                           // 6154\n  Base.call(this, 'short', conf);                                                                                     // 6155\n                                                                                                                      // 6156\n  this.a = new bn(conf.a, 16).toRed(this.red);                                                                        // 6157\n  this.b = new bn(conf.b, 16).toRed(this.red);                                                                        // 6158\n  this.tinv = this.two.redInvm();                                                                                     // 6159\n                                                                                                                      // 6160\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;                                                                        // 6161\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;                                                          // 6162\n                                                                                                                      // 6163\n  // If the curve is endomorphic, precalculate beta and lambda                                                        // 6164\n  this.endo = this._getEndomorphism(conf);                                                                            // 6165\n  this._endoWnafT1 = new Array(4);                                                                                    // 6166\n  this._endoWnafT2 = new Array(4);                                                                                    // 6167\n}                                                                                                                     // 6168\ninherits(ShortCurve, Base);                                                                                           // 6169\nmodule.exports = ShortCurve;                                                                                          // 6170\n                                                                                                                      // 6171\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {                                             // 6172\n  // No efficient endomorphism                                                                                        // 6173\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)                                                      // 6174\n    return;                                                                                                           // 6175\n                                                                                                                      // 6176\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)                                                       // 6177\n  var beta;                                                                                                           // 6178\n  var lambda;                                                                                                         // 6179\n  if (conf.beta) {                                                                                                    // 6180\n    beta = new bn(conf.beta, 16).toRed(this.red);                                                                     // 6181\n  } else {                                                                                                            // 6182\n    var betas = this._getEndoRoots(this.p);                                                                           // 6183\n    // Choose the smallest beta                                                                                       // 6184\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];                                                          // 6185\n    beta = beta.toRed(this.red);                                                                                      // 6186\n  }                                                                                                                   // 6187\n  if (conf.lambda) {                                                                                                  // 6188\n    lambda = new bn(conf.lambda, 16);                                                                                 // 6189\n  } else {                                                                                                            // 6190\n    // Choose the lambda that is matching selected beta                                                               // 6191\n    var lambdas = this._getEndoRoots(this.n);                                                                         // 6192\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {                                                  // 6193\n      lambda = lambdas[0];                                                                                            // 6194\n    } else {                                                                                                          // 6195\n      lambda = lambdas[1];                                                                                            // 6196\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);                                                  // 6197\n    }                                                                                                                 // 6198\n  }                                                                                                                   // 6199\n                                                                                                                      // 6200\n  // Get basis vectors, used for balanced length-two representation                                                   // 6201\n  var basis;                                                                                                          // 6202\n  if (conf.basis) {                                                                                                   // 6203\n    basis = conf.basis.map(function(vec) {                                                                            // 6204\n      return {                                                                                                        // 6205\n        a: new bn(vec.a, 16),                                                                                         // 6206\n        b: new bn(vec.b, 16),                                                                                         // 6207\n      };                                                                                                              // 6208\n    });                                                                                                               // 6209\n  } else {                                                                                                            // 6210\n    basis = this._getEndoBasis(lambda);                                                                               // 6211\n  }                                                                                                                   // 6212\n                                                                                                                      // 6213\n  return {                                                                                                            // 6214\n    beta: beta,                                                                                                       // 6215\n    lambda: lambda,                                                                                                   // 6216\n    basis: basis                                                                                                      // 6217\n  };                                                                                                                  // 6218\n};                                                                                                                    // 6219\n                                                                                                                      // 6220\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {                                                    // 6221\n  // Find roots of for x^2 + x + 1 in F                                                                               // 6222\n  // Root = (-1 +- Sqrt(-3)) / 2                                                                                      // 6223\n  //                                                                                                                  // 6224\n  var red = num === this.p ? this.red : bn.mont(num);                                                                 // 6225\n  var tinv = new bn(2).toRed(red).redInvm();                                                                          // 6226\n  var ntinv = tinv.redNeg();                                                                                          // 6227\n  var one = new bn(1).toRed(red);                                                                                     // 6228\n                                                                                                                      // 6229\n  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);                                                       // 6230\n                                                                                                                      // 6231\n  var l1 = ntinv.redAdd(s).fromRed();                                                                                 // 6232\n  var l2 = ntinv.redSub(s).fromRed();                                                                                 // 6233\n  return [ l1, l2 ];                                                                                                  // 6234\n};                                                                                                                    // 6235\n                                                                                                                      // 6236\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {                                                 // 6237\n  // aprxSqrt >= sqrt(this.n)                                                                                         // 6238\n  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));                                                     // 6239\n                                                                                                                      // 6240\n  // 3.74                                                                                                             // 6241\n  // Run EGCD, until r(L + 1) < aprxSqrt                                                                              // 6242\n  var u = lambda;                                                                                                     // 6243\n  var v = this.n.clone();                                                                                             // 6244\n  var x1 = new bn(1);                                                                                                 // 6245\n  var y1 = new bn(0);                                                                                                 // 6246\n  var x2 = new bn(0);                                                                                                 // 6247\n  var y2 = new bn(1);                                                                                                 // 6248\n                                                                                                                      // 6249\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)                                                       // 6250\n  var a0;                                                                                                             // 6251\n  var b0;                                                                                                             // 6252\n  // First vector                                                                                                     // 6253\n  var a1;                                                                                                             // 6254\n  var b1;                                                                                                             // 6255\n  // Second vector                                                                                                    // 6256\n  var a2;                                                                                                             // 6257\n  var b2;                                                                                                             // 6258\n                                                                                                                      // 6259\n  var prevR;                                                                                                          // 6260\n  var i = 0;                                                                                                          // 6261\n  while (u.cmpn(0) !== 0) {                                                                                           // 6262\n    var q = v.div(u);                                                                                                 // 6263\n    var r = v.sub(q.mul(u));                                                                                          // 6264\n    var x = x2.sub(q.mul(x1));                                                                                        // 6265\n    var y = y2.sub(q.mul(y1));                                                                                        // 6266\n                                                                                                                      // 6267\n    if (!a1 && r.cmp(aprxSqrt) < 0) {                                                                                 // 6268\n      a0 = prevR.neg();                                                                                               // 6269\n      b0 = x1;                                                                                                        // 6270\n      a1 = r.neg();                                                                                                   // 6271\n      b1 = x;                                                                                                         // 6272\n    } else if (a1 && ++i === 2) {                                                                                     // 6273\n      break;                                                                                                          // 6274\n    }                                                                                                                 // 6275\n    prevR = r;                                                                                                        // 6276\n                                                                                                                      // 6277\n    v = u;                                                                                                            // 6278\n    u = r;                                                                                                            // 6279\n    x2 = x1;                                                                                                          // 6280\n    x1 = x;                                                                                                           // 6281\n    y2 = y1;                                                                                                          // 6282\n    y1 = y;                                                                                                           // 6283\n  }                                                                                                                   // 6284\n  a2 = r.neg();                                                                                                       // 6285\n  b2 = x;                                                                                                             // 6286\n                                                                                                                      // 6287\n  var len1 = a1.sqr().add(b1.sqr());                                                                                  // 6288\n  var len2 = a2.sqr().add(b2.sqr());                                                                                  // 6289\n  if (len2.cmp(len1) >= 0) {                                                                                          // 6290\n    a2 = a0;                                                                                                          // 6291\n    b2 = b0;                                                                                                          // 6292\n  }                                                                                                                   // 6293\n                                                                                                                      // 6294\n  // Normalize signs                                                                                                  // 6295\n  if (a1.sign) {                                                                                                      // 6296\n    a1 = a1.neg();                                                                                                    // 6297\n    b1 = b1.neg();                                                                                                    // 6298\n  }                                                                                                                   // 6299\n  if (a2.sign) {                                                                                                      // 6300\n    a2 = a2.neg();                                                                                                    // 6301\n    b2 = b2.neg();                                                                                                    // 6302\n  }                                                                                                                   // 6303\n                                                                                                                      // 6304\n  return [                                                                                                            // 6305\n    { a: a1, b: b1 },                                                                                                 // 6306\n    { a: a2, b: b2 }                                                                                                  // 6307\n  ];                                                                                                                  // 6308\n};                                                                                                                    // 6309\n                                                                                                                      // 6310\nShortCurve.prototype._endoSplit = function _endoSplit(k) {                                                            // 6311\n  var basis = this.endo.basis;                                                                                        // 6312\n  var v1 = basis[0];                                                                                                  // 6313\n  var v2 = basis[1];                                                                                                  // 6314\n                                                                                                                      // 6315\n  var c1 = v2.b.mul(k).divRound(this.n);                                                                              // 6316\n  var c2 = v1.b.neg().mul(k).divRound(this.n);                                                                        // 6317\n                                                                                                                      // 6318\n  var p1 = c1.mul(v1.a);                                                                                              // 6319\n  var p2 = c2.mul(v2.a);                                                                                              // 6320\n  var q1 = c1.mul(v1.b);                                                                                              // 6321\n  var q2 = c2.mul(v2.b);                                                                                              // 6322\n                                                                                                                      // 6323\n  // Calculate answer                                                                                                 // 6324\n  var k1 = k.sub(p1).sub(p2);                                                                                         // 6325\n  var k2 = q1.add(q2).neg();                                                                                          // 6326\n  return { k1: k1, k2: k2 };                                                                                          // 6327\n};                                                                                                                    // 6328\n                                                                                                                      // 6329\nShortCurve.prototype.point = function point(x, y, isRed) {                                                            // 6330\n  return new Point(this, x, y, isRed);                                                                                // 6331\n};                                                                                                                    // 6332\n                                                                                                                      // 6333\nShortCurve.prototype.pointFromX = function pointFromX(odd, x) {                                                       // 6334\n  x = new bn(x, 16);                                                                                                  // 6335\n  if (!x.red)                                                                                                         // 6336\n    x = x.toRed(this.red);                                                                                            // 6337\n                                                                                                                      // 6338\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);                                            // 6339\n  var y = y2.redSqrt();                                                                                               // 6340\n                                                                                                                      // 6341\n  // XXX Is there any way to tell if the number is odd without converting it                                          // 6342\n  // to non-red form?                                                                                                 // 6343\n  var isOdd = y.fromRed().isOdd();                                                                                    // 6344\n  if (odd && !isOdd || !odd && isOdd)                                                                                 // 6345\n    y = y.redNeg();                                                                                                   // 6346\n                                                                                                                      // 6347\n  return this.point(x, y);                                                                                            // 6348\n};                                                                                                                    // 6349\n                                                                                                                      // 6350\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {                                                              // 6351\n  return new JPoint(this, x, y, z);                                                                                   // 6352\n};                                                                                                                    // 6353\n                                                                                                                      // 6354\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {                                               // 6355\n  return Point.fromJSON(this, obj, red);                                                                              // 6356\n};                                                                                                                    // 6357\n                                                                                                                      // 6358\nShortCurve.prototype.validate = function validate(point) {                                                            // 6359\n  if (point.inf)                                                                                                      // 6360\n    return true;                                                                                                      // 6361\n                                                                                                                      // 6362\n  var x = point.x;                                                                                                    // 6363\n  var y = point.y;                                                                                                    // 6364\n                                                                                                                      // 6365\n  var ax = this.a.redMul(x);                                                                                          // 6366\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);                                                         // 6367\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;                                                                       // 6368\n};                                                                                                                    // 6369\n                                                                                                                      // 6370\nShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs) {                                     // 6371\n  var npoints = this._endoWnafT1;                                                                                     // 6372\n  var ncoeffs = this._endoWnafT2;                                                                                     // 6373\n  for (var i = 0; i < points.length; i++) {                                                                           // 6374\n    var split = this._endoSplit(coeffs[i]);                                                                           // 6375\n    var p = points[i];                                                                                                // 6376\n    var beta = p._getBeta();                                                                                          // 6377\n                                                                                                                      // 6378\n    if (split.k1.sign) {                                                                                              // 6379\n      split.k1.sign = !split.k1.sign;                                                                                 // 6380\n      p = p.neg(true);                                                                                                // 6381\n    }                                                                                                                 // 6382\n    if (split.k2.sign) {                                                                                              // 6383\n      split.k2.sign = !split.k2.sign;                                                                                 // 6384\n      beta = beta.neg(true);                                                                                          // 6385\n    }                                                                                                                 // 6386\n                                                                                                                      // 6387\n    npoints[i * 2] = p;                                                                                               // 6388\n    npoints[i * 2 + 1] = beta;                                                                                        // 6389\n    ncoeffs[i * 2] = split.k1;                                                                                        // 6390\n    ncoeffs[i * 2 + 1] = split.k2;                                                                                    // 6391\n  }                                                                                                                   // 6392\n  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);                                                             // 6393\n                                                                                                                      // 6394\n  // Clean-up references to points and coefficients                                                                   // 6395\n  for (var j = 0; j < i * 2; j++) {                                                                                   // 6396\n    npoints[j] = null;                                                                                                // 6397\n    ncoeffs[j] = null;                                                                                                // 6398\n  }                                                                                                                   // 6399\n  return res;                                                                                                         // 6400\n};                                                                                                                    // 6401\n                                                                                                                      // 6402\nfunction Point(curve, x, y, isRed) {                                                                                  // 6403\n  Base.BasePoint.call(this, curve, 'affine');                                                                         // 6404\n  if (x === null && y === null) {                                                                                     // 6405\n    this.x = null;                                                                                                    // 6406\n    this.y = null;                                                                                                    // 6407\n    this.inf = true;                                                                                                  // 6408\n  } else {                                                                                                            // 6409\n    this.x = new bn(x, 16);                                                                                           // 6410\n    this.y = new bn(y, 16);                                                                                           // 6411\n    // Force redgomery representation when loading from JSON                                                          // 6412\n    if (isRed) {                                                                                                      // 6413\n      this.x.forceRed(this.curve.red);                                                                                // 6414\n      this.y.forceRed(this.curve.red);                                                                                // 6415\n    }                                                                                                                 // 6416\n    if (!this.x.red)                                                                                                  // 6417\n      this.x = this.x.toRed(this.curve.red);                                                                          // 6418\n    if (!this.y.red)                                                                                                  // 6419\n      this.y = this.y.toRed(this.curve.red);                                                                          // 6420\n    this.inf = false;                                                                                                 // 6421\n  }                                                                                                                   // 6422\n}                                                                                                                     // 6423\ninherits(Point, Base.BasePoint);                                                                                      // 6424\n                                                                                                                      // 6425\nPoint.prototype._getBeta = function _getBeta() {                                                                      // 6426\n  if (!this.curve.endo)                                                                                               // 6427\n    return;                                                                                                           // 6428\n                                                                                                                      // 6429\n  var pre = this.precomputed;                                                                                         // 6430\n  if (pre && pre.beta)                                                                                                // 6431\n    return pre.beta;                                                                                                  // 6432\n                                                                                                                      // 6433\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);                                           // 6434\n  if (pre) {                                                                                                          // 6435\n    var curve = this.curve;                                                                                           // 6436\n    function endoMul(p) {                                                                                             // 6437\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);                                                           // 6438\n    }                                                                                                                 // 6439\n    pre.beta = beta;                                                                                                  // 6440\n    beta.precomputed = {                                                                                              // 6441\n      beta: null,                                                                                                     // 6442\n      naf: pre.naf && {                                                                                               // 6443\n        wnd: pre.naf.wnd,                                                                                             // 6444\n        points: pre.naf.points.map(endoMul)                                                                           // 6445\n      },                                                                                                              // 6446\n      doubles: pre.doubles && {                                                                                       // 6447\n        step: pre.doubles.step,                                                                                       // 6448\n        points: pre.doubles.points.map(endoMul)                                                                       // 6449\n      }                                                                                                               // 6450\n    };                                                                                                                // 6451\n  }                                                                                                                   // 6452\n  return beta;                                                                                                        // 6453\n};                                                                                                                    // 6454\n                                                                                                                      // 6455\nPoint.prototype.toJSON = function toJSON() {                                                                          // 6456\n  if (!this.precomputed)                                                                                              // 6457\n    return [ this.x, this.y ];                                                                                        // 6458\n                                                                                                                      // 6459\n  return [ this.x, this.y, this.precomputed && {                                                                      // 6460\n    doubles: this.precomputed.doubles && {                                                                            // 6461\n      step: this.precomputed.doubles.step,                                                                            // 6462\n      points: this.precomputed.doubles.points.slice(1)                                                                // 6463\n    },                                                                                                                // 6464\n    naf: this.precomputed.naf && {                                                                                    // 6465\n      wnd: this.precomputed.naf.wnd,                                                                                  // 6466\n      points: this.precomputed.naf.points.slice(1)                                                                    // 6467\n    }                                                                                                                 // 6468\n  }];                                                                                                                 // 6469\n};                                                                                                                    // 6470\n                                                                                                                      // 6471\nPoint.fromJSON = function fromJSON(curve, obj, red) {                                                                 // 6472\n  if (typeof obj === 'string')                                                                                        // 6473\n    obj = JSON.parse(obj);                                                                                            // 6474\n  var res = curve.point(obj[0], obj[1], red);                                                                         // 6475\n  if (!obj[2])                                                                                                        // 6476\n    return res;                                                                                                       // 6477\n                                                                                                                      // 6478\n  function obj2point(obj) {                                                                                           // 6479\n    return curve.point(obj[0], obj[1], red);                                                                          // 6480\n  }                                                                                                                   // 6481\n                                                                                                                      // 6482\n  var pre = obj[2];                                                                                                   // 6483\n  res.precomputed = {                                                                                                 // 6484\n    beta: null,                                                                                                       // 6485\n    doubles: pre.doubles && {                                                                                         // 6486\n      step: pre.doubles.step,                                                                                         // 6487\n      points: [ res ].concat(pre.doubles.points.map(obj2point))                                                       // 6488\n    },                                                                                                                // 6489\n    naf: pre.naf && {                                                                                                 // 6490\n      wnd: pre.naf.wnd,                                                                                               // 6491\n      points: [ res ].concat(pre.naf.points.map(obj2point))                                                           // 6492\n    }                                                                                                                 // 6493\n  };                                                                                                                  // 6494\n  return res;                                                                                                         // 6495\n};                                                                                                                    // 6496\n                                                                                                                      // 6497\nPoint.prototype.inspect = function inspect() {                                                                        // 6498\n  if (this.isInfinity())                                                                                              // 6499\n    return '<EC Point Infinity>';                                                                                     // 6500\n  return '<EC Point x: ' + this.x.fromRed().toString(16 ,2) +                                                         // 6501\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';                                                                // 6502\n};                                                                                                                    // 6503\n                                                                                                                      // 6504\nPoint.prototype.isInfinity = function isInfinity() {                                                                  // 6505\n  return this.inf;                                                                                                    // 6506\n};                                                                                                                    // 6507\n                                                                                                                      // 6508\nPoint.prototype.add = function add(p) {                                                                               // 6509\n  // O + P = P                                                                                                        // 6510\n  if (this.inf)                                                                                                       // 6511\n    return p;                                                                                                         // 6512\n                                                                                                                      // 6513\n  // P + O = P                                                                                                        // 6514\n  if (p.inf)                                                                                                          // 6515\n    return this;                                                                                                      // 6516\n                                                                                                                      // 6517\n  // P + P = 2P                                                                                                       // 6518\n  if (this.eq(p))                                                                                                     // 6519\n    return this.dbl();                                                                                                // 6520\n                                                                                                                      // 6521\n  // P + (-P) = O                                                                                                     // 6522\n  if (this.neg().eq(p))                                                                                               // 6523\n    return this.curve.point(null, null);                                                                              // 6524\n                                                                                                                      // 6525\n  // P + Q = O                                                                                                        // 6526\n  if (this.x.cmp(p.x) === 0)                                                                                          // 6527\n    return this.curve.point(null, null);                                                                              // 6528\n                                                                                                                      // 6529\n  var c = this.y.redSub(p.y);                                                                                         // 6530\n  if (c.cmpn(0) !== 0)                                                                                                // 6531\n    c = c.redMul(this.x.redSub(p.x).redInvm());                                                                       // 6532\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);                                                                   // 6533\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);                                                               // 6534\n  return this.curve.point(nx, ny);                                                                                    // 6535\n};                                                                                                                    // 6536\n                                                                                                                      // 6537\nPoint.prototype.dbl = function dbl() {                                                                                // 6538\n  if (this.inf)                                                                                                       // 6539\n    return this;                                                                                                      // 6540\n                                                                                                                      // 6541\n  // 2P = O                                                                                                           // 6542\n  var ys1 = this.y.redAdd(this.y);                                                                                    // 6543\n  if (ys1.cmpn(0) === 0)                                                                                              // 6544\n    return this.curve.point(null, null);                                                                              // 6545\n                                                                                                                      // 6546\n  var a = this.curve.a;                                                                                               // 6547\n                                                                                                                      // 6548\n  var x2 = this.x.redSqr();                                                                                           // 6549\n  var dyinv = ys1.redInvm();                                                                                          // 6550\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);                                                         // 6551\n                                                                                                                      // 6552\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));                                                                 // 6553\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);                                                               // 6554\n  return this.curve.point(nx, ny);                                                                                    // 6555\n};                                                                                                                    // 6556\n                                                                                                                      // 6557\nPoint.prototype.getX = function getX() {                                                                              // 6558\n  return this.x.fromRed();                                                                                            // 6559\n};                                                                                                                    // 6560\n                                                                                                                      // 6561\nPoint.prototype.getY = function getY() {                                                                              // 6562\n  return this.y.fromRed();                                                                                            // 6563\n};                                                                                                                    // 6564\n                                                                                                                      // 6565\nPoint.prototype.mul = function mul(k) {                                                                               // 6566\n  k = new bn(k, 16);                                                                                                  // 6567\n                                                                                                                      // 6568\n  if (this.precomputed && this.precomputed.doubles)                                                                   // 6569\n    return this.curve._fixedNafMul(this, k);                                                                          // 6570\n  else if (this.curve.endo)                                                                                           // 6571\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);                                                               // 6572\n  else                                                                                                                // 6573\n    return this.curve._wnafMul(this, k);                                                                              // 6574\n};                                                                                                                    // 6575\n                                                                                                                      // 6576\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {                                                                // 6577\n  var points = [ this, p2 ];                                                                                          // 6578\n  var coeffs = [ k1, k2 ];                                                                                            // 6579\n  if (this.curve.endo)                                                                                                // 6580\n    return this.curve._endoWnafMulAdd(points, coeffs);                                                                // 6581\n  else                                                                                                                // 6582\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);                                                              // 6583\n};                                                                                                                    // 6584\n                                                                                                                      // 6585\nPoint.prototype.eq = function eq(p) {                                                                                 // 6586\n  return this === p ||                                                                                                // 6587\n         this.inf === p.inf &&                                                                                        // 6588\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);                                            // 6589\n};                                                                                                                    // 6590\n                                                                                                                      // 6591\nPoint.prototype.neg = function neg(_precompute) {                                                                     // 6592\n  if (this.inf)                                                                                                       // 6593\n    return this;                                                                                                      // 6594\n                                                                                                                      // 6595\n  var res = this.curve.point(this.x, this.y.redNeg());                                                                // 6596\n  if (_precompute && this.precomputed) {                                                                              // 6597\n    var pre = this.precomputed;                                                                                       // 6598\n    function negate(p) {                                                                                              // 6599\n      return p.neg();                                                                                                 // 6600\n    }                                                                                                                 // 6601\n    res.precomputed = {                                                                                               // 6602\n      naf: pre.naf && {                                                                                               // 6603\n        wnd: pre.naf.wnd,                                                                                             // 6604\n        points: pre.naf.points.map(negate)                                                                            // 6605\n      },                                                                                                              // 6606\n      doubles: pre.doubles && {                                                                                       // 6607\n        step: pre.doubles.step,                                                                                       // 6608\n        points: pre.doubles.points.map(negate)                                                                        // 6609\n      }                                                                                                               // 6610\n    };                                                                                                                // 6611\n  }                                                                                                                   // 6612\n  return res;                                                                                                         // 6613\n};                                                                                                                    // 6614\n                                                                                                                      // 6615\nPoint.prototype.toJ = function toJ() {                                                                                // 6616\n  if (this.inf)                                                                                                       // 6617\n    return this.curve.jpoint(null, null, null);                                                                       // 6618\n                                                                                                                      // 6619\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);                                                        // 6620\n  return res;                                                                                                         // 6621\n};                                                                                                                    // 6622\n                                                                                                                      // 6623\nfunction JPoint(curve, x, y, z) {                                                                                     // 6624\n  Base.BasePoint.call(this, curve, 'jacobian');                                                                       // 6625\n  if (x === null && y === null && z === null) {                                                                       // 6626\n    this.x = this.curve.one;                                                                                          // 6627\n    this.y = this.curve.one;                                                                                          // 6628\n    this.z = new bn(0);                                                                                               // 6629\n  } else {                                                                                                            // 6630\n    this.x = new bn(x, 16);                                                                                           // 6631\n    this.y = new bn(y, 16);                                                                                           // 6632\n    this.z = new bn(z, 16);                                                                                           // 6633\n  }                                                                                                                   // 6634\n  if (!this.x.red)                                                                                                    // 6635\n    this.x = this.x.toRed(this.curve.red);                                                                            // 6636\n  if (!this.y.red)                                                                                                    // 6637\n    this.y = this.y.toRed(this.curve.red);                                                                            // 6638\n  if (!this.z.red)                                                                                                    // 6639\n    this.z = this.z.toRed(this.curve.red);                                                                            // 6640\n                                                                                                                      // 6641\n  this.zOne = this.z === this.curve.one;                                                                              // 6642\n}                                                                                                                     // 6643\ninherits(JPoint, Base.BasePoint);                                                                                     // 6644\n                                                                                                                      // 6645\nJPoint.prototype.toP = function toP() {                                                                               // 6646\n  if (this.isInfinity())                                                                                              // 6647\n    return this.curve.point(null, null);                                                                              // 6648\n                                                                                                                      // 6649\n  var zinv = this.z.redInvm();                                                                                        // 6650\n  var zinv2 = zinv.redSqr();                                                                                          // 6651\n  var ax = this.x.redMul(zinv2);                                                                                      // 6652\n  var ay = this.y.redMul(zinv2).redMul(zinv);                                                                         // 6653\n                                                                                                                      // 6654\n  return this.curve.point(ax, ay);                                                                                    // 6655\n};                                                                                                                    // 6656\n                                                                                                                      // 6657\nJPoint.prototype.neg = function neg() {                                                                               // 6658\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);                                                          // 6659\n};                                                                                                                    // 6660\n                                                                                                                      // 6661\nJPoint.prototype.add = function add(p) {                                                                              // 6662\n  // O + P = P                                                                                                        // 6663\n  if (this.isInfinity())                                                                                              // 6664\n    return p;                                                                                                         // 6665\n                                                                                                                      // 6666\n  // P + O = P                                                                                                        // 6667\n  if (p.isInfinity())                                                                                                 // 6668\n    return this;                                                                                                      // 6669\n                                                                                                                      // 6670\n  // 12M + 4S + 7A                                                                                                    // 6671\n  var pz2 = p.z.redSqr();                                                                                             // 6672\n  var z2 = this.z.redSqr();                                                                                           // 6673\n  var u1 = this.x.redMul(pz2);                                                                                        // 6674\n  var u2 = p.x.redMul(z2);                                                                                            // 6675\n  var s1 = this.y.redMul(pz2.redMul(p.z));                                                                            // 6676\n  var s2 = p.y.redMul(z2.redMul(this.z));                                                                             // 6677\n                                                                                                                      // 6678\n  var h = u1.redSub(u2);                                                                                              // 6679\n  var r = s1.redSub(s2);                                                                                              // 6680\n  if (h.cmpn(0) === 0) {                                                                                              // 6681\n    if (r.cmpn(0) !== 0)                                                                                              // 6682\n      return this.curve.jpoint(null, null, null);                                                                     // 6683\n    else                                                                                                              // 6684\n      return this.dbl();                                                                                              // 6685\n  }                                                                                                                   // 6686\n                                                                                                                      // 6687\n  var h2 = h.redSqr();                                                                                                // 6688\n  var h3 = h2.redMul(h);                                                                                              // 6689\n  var v = u1.redMul(h2);                                                                                              // 6690\n                                                                                                                      // 6691\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);                                                              // 6692\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));                                                            // 6693\n  var nz = this.z.redMul(p.z).redMul(h);                                                                              // 6694\n                                                                                                                      // 6695\n  return this.curve.jpoint(nx, ny, nz);                                                                               // 6696\n};                                                                                                                    // 6697\n                                                                                                                      // 6698\nJPoint.prototype.mixedAdd = function mixedAdd(p) {                                                                    // 6699\n  // O + P = P                                                                                                        // 6700\n  if (this.isInfinity())                                                                                              // 6701\n    return p.toJ();                                                                                                   // 6702\n                                                                                                                      // 6703\n  // P + O = P                                                                                                        // 6704\n  if (p.isInfinity())                                                                                                 // 6705\n    return this;                                                                                                      // 6706\n                                                                                                                      // 6707\n  // 8M + 3S + 7A                                                                                                     // 6708\n  var z2 = this.z.redSqr();                                                                                           // 6709\n  var u1 = this.x;                                                                                                    // 6710\n  var u2 = p.x.redMul(z2);                                                                                            // 6711\n  var s1 = this.y;                                                                                                    // 6712\n  var s2 = p.y.redMul(z2).redMul(this.z);                                                                             // 6713\n                                                                                                                      // 6714\n  var h = u1.redSub(u2);                                                                                              // 6715\n  var r = s1.redSub(s2);                                                                                              // 6716\n  if (h.cmpn(0) === 0) {                                                                                              // 6717\n    if (r.cmpn(0) !== 0)                                                                                              // 6718\n      return this.curve.jpoint(null, null, null);                                                                     // 6719\n    else                                                                                                              // 6720\n      return this.dbl();                                                                                              // 6721\n  }                                                                                                                   // 6722\n                                                                                                                      // 6723\n  var h2 = h.redSqr();                                                                                                // 6724\n  var h3 = h2.redMul(h);                                                                                              // 6725\n  var v = u1.redMul(h2);                                                                                              // 6726\n                                                                                                                      // 6727\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);                                                              // 6728\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));                                                            // 6729\n  var nz = this.z.redMul(h);                                                                                          // 6730\n                                                                                                                      // 6731\n  return this.curve.jpoint(nx, ny, nz);                                                                               // 6732\n};                                                                                                                    // 6733\n                                                                                                                      // 6734\nJPoint.prototype.dblp = function dblp(pow) {                                                                          // 6735\n  if (pow === 0)                                                                                                      // 6736\n    return this;                                                                                                      // 6737\n  if (this.isInfinity())                                                                                              // 6738\n    return this;                                                                                                      // 6739\n  if (!pow)                                                                                                           // 6740\n    return this.dbl();                                                                                                // 6741\n                                                                                                                      // 6742\n  if (this.curve.zeroA || this.curve.threeA) {                                                                        // 6743\n    var r = this;                                                                                                     // 6744\n    for (var i = 0; i < pow; i++)                                                                                     // 6745\n      r = r.dbl();                                                                                                    // 6746\n    return r;                                                                                                         // 6747\n  }                                                                                                                   // 6748\n                                                                                                                      // 6749\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)                                                                                // 6750\n  // N = 1 => 6M + 6S + 9A                                                                                            // 6751\n  var a = this.curve.a;                                                                                               // 6752\n  var tinv = this.curve.tinv;                                                                                         // 6753\n                                                                                                                      // 6754\n  var jx = this.x;                                                                                                    // 6755\n  var jy = this.y;                                                                                                    // 6756\n  var jz = this.z;                                                                                                    // 6757\n  var jz4 = jz.redSqr().redSqr();                                                                                     // 6758\n                                                                                                                      // 6759\n  // Reuse results                                                                                                    // 6760\n  var jyd = jy.redAdd(jy);                                                                                            // 6761\n  for (var i = 0; i < pow; i++) {                                                                                     // 6762\n    var jx2 = jx.redSqr();                                                                                            // 6763\n    var jyd2 = jyd.redSqr();                                                                                          // 6764\n    var jyd4 = jyd2.redSqr();                                                                                         // 6765\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));                                                      // 6766\n                                                                                                                      // 6767\n    var t1 = jx.redMul(jyd2);                                                                                         // 6768\n    var nx = c.redSqr().redISub(t1.redAdd(t1));                                                                       // 6769\n    var t2 = t1.redISub(nx);                                                                                          // 6770\n    var dny = c.redMul(t2);                                                                                           // 6771\n    dny = dny.redIAdd(dny).redISub(jyd4);                                                                             // 6772\n    var nz = jyd.redMul(jz);                                                                                          // 6773\n    if (i + 1 < pow)                                                                                                  // 6774\n      jz4 = jz4.redMul(jyd4);                                                                                         // 6775\n                                                                                                                      // 6776\n    jx = nx;                                                                                                          // 6777\n    jz = nz;                                                                                                          // 6778\n    jyd = dny;                                                                                                        // 6779\n  }                                                                                                                   // 6780\n                                                                                                                      // 6781\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);                                                                 // 6782\n};                                                                                                                    // 6783\n                                                                                                                      // 6784\nJPoint.prototype.dbl = function dbl() {                                                                               // 6785\n  if (this.isInfinity())                                                                                              // 6786\n    return this;                                                                                                      // 6787\n                                                                                                                      // 6788\n  if (this.curve.zeroA)                                                                                               // 6789\n    return this._zeroDbl();                                                                                           // 6790\n  else if (this.curve.threeA)                                                                                         // 6791\n    return this._threeDbl();                                                                                          // 6792\n  else                                                                                                                // 6793\n    return this._dbl();                                                                                               // 6794\n};                                                                                                                    // 6795\n                                                                                                                      // 6796\nJPoint.prototype._zeroDbl = function _zeroDbl() {                                                                     // 6797\n  // Z = 1                                                                                                            // 6798\n  if (this.zOne) {                                                                                                    // 6799\n    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-mdbl-2007-bl                             // 6800\n    // 1M + 5S + 14A                                                                                                  // 6801\n                                                                                                                      // 6802\n    // XX = X1^2                                                                                                      // 6803\n    var xx = this.x.redSqr();                                                                                         // 6804\n    // YY = Y1^2                                                                                                      // 6805\n    var yy = this.y.redSqr();                                                                                         // 6806\n    // YYYY = YY^2                                                                                                    // 6807\n    var yyyy = yy.redSqr();                                                                                           // 6808\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)                                                                              // 6809\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);                                                     // 6810\n    s = s.redIAdd(s);                                                                                                 // 6811\n    // M = 3 * XX + a; a = 0                                                                                          // 6812\n    var m = xx.redAdd(xx).redIAdd(xx);                                                                                // 6813\n    // T = M ^ 2 - 2*S                                                                                                // 6814\n    var t = m.redSqr().redISub(s).redISub(s);                                                                         // 6815\n                                                                                                                      // 6816\n    // 8 * YYYY                                                                                                       // 6817\n    var yyyy8 = yyyy.redIAdd(yyyy);                                                                                   // 6818\n    yyyy8 = yyyy8.redIAdd(yyyy8);                                                                                     // 6819\n    yyyy8 = yyyy8.redIAdd(yyyy8);                                                                                     // 6820\n                                                                                                                      // 6821\n    // X3 = T                                                                                                         // 6822\n    var nx = t;                                                                                                       // 6823\n    // Y3 = M * (S - T) - 8 * YYYY                                                                                    // 6824\n    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);                                                                   // 6825\n    // Z3 = 2*Y1                                                                                                      // 6826\n    var nz = this.y.redAdd(this.y);                                                                                   // 6827\n  } else {                                                                                                            // 6828\n    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l                               // 6829\n    // 2M + 5S + 13A                                                                                                  // 6830\n                                                                                                                      // 6831\n    // A = X1^2                                                                                                       // 6832\n    var a = this.x.redSqr();                                                                                          // 6833\n    // B = Y1^2                                                                                                       // 6834\n    var b = this.y.redSqr();                                                                                          // 6835\n    // C = B^2                                                                                                        // 6836\n    var c = b.redSqr();                                                                                               // 6837\n    // D = 2 * ((X1 + B)^2 - A - C)                                                                                   // 6838\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);                                                          // 6839\n    d = d.redIAdd(d);                                                                                                 // 6840\n    // E = 3 * A                                                                                                      // 6841\n    var e = a.redAdd(a).redIAdd(a);                                                                                   // 6842\n    // F = E^2                                                                                                        // 6843\n    var f = e.redSqr();                                                                                               // 6844\n                                                                                                                      // 6845\n    // 8 * C                                                                                                          // 6846\n    var c8 = c.redIAdd(c);                                                                                            // 6847\n    c8 = c8.redIAdd(c8);                                                                                              // 6848\n    c8 = c8.redIAdd(c8);                                                                                              // 6849\n                                                                                                                      // 6850\n    // X3 = F - 2 * D                                                                                                 // 6851\n    var nx = f.redISub(d).redISub(d);                                                                                 // 6852\n    // Y3 = E * (D - X3) - 8 * C                                                                                      // 6853\n    var ny = e.redMul(d.redISub(nx)).redISub(c8);                                                                     // 6854\n    // Z3 = 2 * Y1 * Z1                                                                                               // 6855\n    var nz = this.y.redMul(this.z);                                                                                   // 6856\n    nz = nz.redIAdd(nz);                                                                                              // 6857\n  }                                                                                                                   // 6858\n                                                                                                                      // 6859\n  return this.curve.jpoint(nx, ny, nz);                                                                               // 6860\n};                                                                                                                    // 6861\n                                                                                                                      // 6862\nJPoint.prototype._threeDbl = function _threeDbl() {                                                                   // 6863\n  // Z = 1                                                                                                            // 6864\n  if (this.zOne) {                                                                                                    // 6865\n    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-mdbl-2007-bl                             // 6866\n    // 1M + 5S + 15A                                                                                                  // 6867\n                                                                                                                      // 6868\n    // XX = X1^2                                                                                                      // 6869\n    var xx = this.x.redSqr();                                                                                         // 6870\n    // YY = Y1^2                                                                                                      // 6871\n    var yy = this.y.redSqr();                                                                                         // 6872\n    // YYYY = YY^2                                                                                                    // 6873\n    var yyyy = yy.redSqr();                                                                                           // 6874\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)                                                                              // 6875\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);                                                     // 6876\n    s = s.redIAdd(s);                                                                                                 // 6877\n    // M = 3 * XX + a                                                                                                 // 6878\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);                                                          // 6879\n    // T = M^2 - 2 * S                                                                                                // 6880\n    var t = m.redSqr().redISub(s).redISub(s);                                                                         // 6881\n    // X3 = T                                                                                                         // 6882\n    var nx = t;                                                                                                       // 6883\n    // Y3 = M * (S - T) - 8 * YYYY                                                                                    // 6884\n    var yyyy8 = yyyy.redIAdd(yyyy);                                                                                   // 6885\n    yyyy8 = yyyy8.redIAdd(yyyy8);                                                                                     // 6886\n    yyyy8 = yyyy8.redIAdd(yyyy8);                                                                                     // 6887\n    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);                                                                   // 6888\n    // Z3 = 2 * Y1                                                                                                    // 6889\n    var nz = this.y.redAdd(this.y);                                                                                   // 6890\n  } else {                                                                                                            // 6891\n    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b                               // 6892\n    // 3M + 5S                                                                                                        // 6893\n                                                                                                                      // 6894\n    // delta = Z1^2                                                                                                   // 6895\n    var delta = this.z.redSqr();                                                                                      // 6896\n    // gamma = Y1^2                                                                                                   // 6897\n    var gamma = this.y.redSqr();                                                                                      // 6898\n    // beta = X1 * gamma                                                                                              // 6899\n    var beta = this.x.redMul(gamma);                                                                                  // 6900\n    // alpha = 3 * (X1 - delta) * (X1 + delta)                                                                        // 6901\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));                                                    // 6902\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);                                                                       // 6903\n    // X3 = alpha^2 - 8 * beta                                                                                        // 6904\n    var beta4 = beta.redIAdd(beta);                                                                                   // 6905\n    beta4 = beta4.redIAdd(beta4);                                                                                     // 6906\n    var beta8 = beta4.redAdd(beta4);                                                                                  // 6907\n    var nx = alpha.redSqr().redISub(beta8);                                                                           // 6908\n    // Z3 = (Y1 + Z1)^2 - gamma - delta                                                                               // 6909\n    var nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);                                            // 6910\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2                                                                     // 6911\n    var ggamma8 = gamma.redSqr();                                                                                     // 6912\n    ggamma8 = ggamma8.redIAdd(ggamma8);                                                                               // 6913\n    ggamma8 = ggamma8.redIAdd(ggamma8);                                                                               // 6914\n    ggamma8 = ggamma8.redIAdd(ggamma8);                                                                               // 6915\n    var ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);                                                        // 6916\n  }                                                                                                                   // 6917\n                                                                                                                      // 6918\n  return this.curve.jpoint(nx, ny, nz);                                                                               // 6919\n};                                                                                                                    // 6920\n                                                                                                                      // 6921\nJPoint.prototype._dbl = function _dbl() {                                                                             // 6922\n  var a = this.curve.a;                                                                                               // 6923\n  var tinv = this.curve.tinv;                                                                                         // 6924\n                                                                                                                      // 6925\n  // 4M + 6S + 10A                                                                                                    // 6926\n  var jx = this.x;                                                                                                    // 6927\n  var jy = this.y;                                                                                                    // 6928\n  var jz = this.z;                                                                                                    // 6929\n  var jz4 = jz.redSqr().redSqr();                                                                                     // 6930\n                                                                                                                      // 6931\n  var jx2 = jx.redSqr();                                                                                              // 6932\n  var jy2 = jy.redSqr();                                                                                              // 6933\n                                                                                                                      // 6934\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));                                                        // 6935\n                                                                                                                      // 6936\n  var jxd4 = jx.redAdd(jx);                                                                                           // 6937\n  jxd4 = jxd4.redIAdd(jxd4);                                                                                          // 6938\n  var t1 = jxd4.redMul(jy2);                                                                                          // 6939\n  var nx = c.redSqr().redISub(t1.redAdd(t1));                                                                         // 6940\n  var t2 = t1.redISub(nx);                                                                                            // 6941\n                                                                                                                      // 6942\n  var jyd8 = jy2.redSqr();                                                                                            // 6943\n  jyd8 = jyd8.redIAdd(jyd8);                                                                                          // 6944\n  jyd8 = jyd8.redIAdd(jyd8);                                                                                          // 6945\n  jyd8 = jyd8.redIAdd(jyd8);                                                                                          // 6946\n  var ny = c.redMul(t2).redISub(jyd8);                                                                                // 6947\n  var nz = jy.redAdd(jy).redMul(jz);                                                                                  // 6948\n                                                                                                                      // 6949\n  return this.curve.jpoint(nx, ny, nz);                                                                               // 6950\n};                                                                                                                    // 6951\n                                                                                                                      // 6952\nJPoint.prototype.trpl = function trpl() {                                                                             // 6953\n  if (!this.curve.zeroA)                                                                                              // 6954\n    return this.dbl().add(this);                                                                                      // 6955\n                                                                                                                      // 6956\n  // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl                                // 6957\n  // 5M + 10S + ...                                                                                                   // 6958\n                                                                                                                      // 6959\n  // XX = X1^2                                                                                                        // 6960\n  var xx = this.x.redSqr();                                                                                           // 6961\n  // YY = Y1^2                                                                                                        // 6962\n  var yy = this.y.redSqr();                                                                                           // 6963\n  // ZZ = Z1^2                                                                                                        // 6964\n  var zz = this.z.redSqr();                                                                                           // 6965\n  // YYYY = YY^2                                                                                                      // 6966\n  var yyyy = yy.redSqr();                                                                                             // 6967\n  // M = 3 * XX + a * ZZ2; a = 0                                                                                      // 6968\n  var m = xx.redAdd(xx).redIAdd(xx);                                                                                  // 6969\n  // MM = M^2                                                                                                         // 6970\n  var mm = m.redSqr();                                                                                                // 6971\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM                                                                           // 6972\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);                                                       // 6973\n  e = e.redIAdd(e);                                                                                                   // 6974\n  e = e.redAdd(e).redIAdd(e);                                                                                         // 6975\n  e = e.redISub(mm);                                                                                                  // 6976\n  // EE = E^2                                                                                                         // 6977\n  var ee = e.redSqr();                                                                                                // 6978\n  // T = 16*YYYY                                                                                                      // 6979\n  var t = yyyy.redIAdd(yyyy);                                                                                         // 6980\n  t = t.redIAdd(t);                                                                                                   // 6981\n  t = t.redIAdd(t);                                                                                                   // 6982\n  t = t.redIAdd(t);                                                                                                   // 6983\n  // U = (M + E)^2 - MM - EE - T                                                                                      // 6984\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);                                                   // 6985\n  // X3 = 4 * (X1 * EE - 4 * YY * U)                                                                                  // 6986\n  var yyu4 = yy.redMul(u);                                                                                            // 6987\n  yyu4 = yyu4.redIAdd(yyu4);                                                                                          // 6988\n  yyu4 = yyu4.redIAdd(yyu4);                                                                                          // 6989\n  var nx = this.x.redMul(ee).redISub(yyu4);                                                                           // 6990\n  nx = nx.redIAdd(nx);                                                                                                // 6991\n  nx = nx.redIAdd(nx);                                                                                                // 6992\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)                                                                             // 6993\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));                                               // 6994\n  ny = ny.redIAdd(ny);                                                                                                // 6995\n  ny = ny.redIAdd(ny);                                                                                                // 6996\n  ny = ny.redIAdd(ny);                                                                                                // 6997\n  // Z3 = (Z1 + E)^2 - ZZ - EE                                                                                        // 6998\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);                                                         // 6999\n                                                                                                                      // 7000\n  return this.curve.jpoint(nx, ny, nz);                                                                               // 7001\n};                                                                                                                    // 7002\n                                                                                                                      // 7003\nJPoint.prototype.mul = function mul(k, kbase) {                                                                       // 7004\n  k = new bn(k, kbase);                                                                                               // 7005\n                                                                                                                      // 7006\n  return this.curve._wnafMul(this, k);                                                                                // 7007\n};                                                                                                                    // 7008\n                                                                                                                      // 7009\nJPoint.prototype.eq = function eq(p) {                                                                                // 7010\n  if (p.type === 'affine')                                                                                            // 7011\n    return this.eq(p.toJ());                                                                                          // 7012\n                                                                                                                      // 7013\n  if (this === p)                                                                                                     // 7014\n    return true;                                                                                                      // 7015\n                                                                                                                      // 7016\n  // x1 * z2^2 == x2 * z1^2                                                                                           // 7017\n  var z2 = this.z.redSqr();                                                                                           // 7018\n  var pz2 = p.z.redSqr();                                                                                             // 7019\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)                                                       // 7020\n    return false;                                                                                                     // 7021\n                                                                                                                      // 7022\n  // y1 * z2^3 == y2 * z1^3                                                                                           // 7023\n  var z3 = z2.redMul(this.z);                                                                                         // 7024\n  var pz3 = pz2.redMul(p.z);                                                                                          // 7025\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;                                                    // 7026\n};                                                                                                                    // 7027\n                                                                                                                      // 7028\nJPoint.prototype.inspect = function inspect() {                                                                       // 7029\n  if (this.isInfinity())                                                                                              // 7030\n    return '<EC JPoint Infinity>';                                                                                    // 7031\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +                                                                  // 7032\n      ' y: ' + this.y.toString(16, 2) +                                                                               // 7033\n      ' z: ' + this.z.toString(16, 2) + '>';                                                                          // 7034\n};                                                                                                                    // 7035\n                                                                                                                      // 7036\nJPoint.prototype.isInfinity = function isInfinity() {                                                                 // 7037\n  // XXX This code assumes that zero is always zero in red                                                            // 7038\n  return this.z.cmpn(0) === 0;                                                                                        // 7039\n};                                                                                                                    // 7040\n                                                                                                                      // 7041\n},{\"../../elliptic\":30,\"../curve\":33,\"bn.js\":28,\"inherits\":144}],36:[function(require,module,exports){                // 7042\nvar curves = exports;                                                                                                 // 7043\n                                                                                                                      // 7044\nvar hash = require('hash.js');                                                                                        // 7045\nvar bn = require('bn.js');                                                                                            // 7046\nvar elliptic = require('../elliptic');                                                                                // 7047\n                                                                                                                      // 7048\nvar assert = elliptic.utils.assert;                                                                                   // 7049\n                                                                                                                      // 7050\nfunction PresetCurve(options) {                                                                                       // 7051\n  if (options.type === 'short')                                                                                       // 7052\n    this.curve = new elliptic.curve.short(options);                                                                   // 7053\n  else if (options.type === 'edwards')                                                                                // 7054\n    this.curve = new elliptic.curve.edwards(options);                                                                 // 7055\n  else                                                                                                                // 7056\n    this.curve = new elliptic.curve.mont(options);                                                                    // 7057\n  this.g = this.curve.g;                                                                                              // 7058\n  this.n = this.curve.n;                                                                                              // 7059\n  this.hash = options.hash;                                                                                           // 7060\n                                                                                                                      // 7061\n  assert(this.g.validate(), 'Invalid curve');                                                                         // 7062\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');                                                 // 7063\n}                                                                                                                     // 7064\ncurves.PresetCurve = PresetCurve;                                                                                     // 7065\n                                                                                                                      // 7066\nfunction defineCurve(name, options) {                                                                                 // 7067\n  Object.defineProperty(curves, name, {                                                                               // 7068\n    configurable: true,                                                                                               // 7069\n    enumerable: true,                                                                                                 // 7070\n    get: function() {                                                                                                 // 7071\n      var curve = new PresetCurve(options);                                                                           // 7072\n      Object.defineProperty(curves, name, {                                                                           // 7073\n        configurable: true,                                                                                           // 7074\n        enumerable: true,                                                                                             // 7075\n        value: curve                                                                                                  // 7076\n      });                                                                                                             // 7077\n      return curve;                                                                                                   // 7078\n    }                                                                                                                 // 7079\n  });                                                                                                                 // 7080\n}                                                                                                                     // 7081\n                                                                                                                      // 7082\ndefineCurve('p192', {                                                                                                 // 7083\n  type: 'short',                                                                                                      // 7084\n  prime: 'p192',                                                                                                      // 7085\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',                                                         // 7086\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',                                                         // 7087\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',                                                         // 7088\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',                                                         // 7089\n  hash: hash.sha256,                                                                                                  // 7090\n  gRed: false,                                                                                                        // 7091\n  g: [                                                                                                                // 7092\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',                                                          // 7093\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'                                                           // 7094\n  ],                                                                                                                  // 7095\n});                                                                                                                   // 7096\n                                                                                                                      // 7097\ndefineCurve('p224', {                                                                                                 // 7098\n  type: 'short',                                                                                                      // 7099\n  prime: 'p224',                                                                                                      // 7100\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',                                                // 7101\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',                                                // 7102\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',                                                // 7103\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',                                                // 7104\n  hash: hash.sha256,                                                                                                  // 7105\n  gRed: false,                                                                                                        // 7106\n  g: [                                                                                                                // 7107\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',                                                 // 7108\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'                                                  // 7109\n  ],                                                                                                                  // 7110\n});                                                                                                                   // 7111\n                                                                                                                      // 7112\ndefineCurve('p256', {                                                                                                 // 7113\n  type: 'short',                                                                                                      // 7114\n  prime: null,                                                                                                        // 7115\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',                                       // 7116\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',                                       // 7117\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',                                       // 7118\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',                                       // 7119\n  hash: hash.sha256,                                                                                                  // 7120\n  gRed: false,                                                                                                        // 7121\n  g: [                                                                                                                // 7122\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',                                        // 7123\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'                                         // 7124\n  ],                                                                                                                  // 7125\n});                                                                                                                   // 7126\n                                                                                                                      // 7127\ndefineCurve('curve25519', {                                                                                           // 7128\n  type: 'mont',                                                                                                       // 7129\n  prime: 'p25519',                                                                                                    // 7130\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',                                           // 7131\n  a: '76d06',                                                                                                         // 7132\n  b: '0',                                                                                                             // 7133\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',                                           // 7134\n  hash: hash.sha256,                                                                                                  // 7135\n  gRed: false,                                                                                                        // 7136\n  g: [                                                                                                                // 7137\n    '9'                                                                                                               // 7138\n  ]                                                                                                                   // 7139\n});                                                                                                                   // 7140\n                                                                                                                      // 7141\ndefineCurve('ed25519', {                                                                                              // 7142\n  type: 'edwards',                                                                                                    // 7143\n  prime: 'p25519',                                                                                                    // 7144\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',                                           // 7145\n  a: '-1',                                                                                                            // 7146\n  c: '1',                                                                                                             // 7147\n  // -121665 * (121666^(-1)) (mod P)                                                                                  // 7148\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',                                           // 7149\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',                                           // 7150\n  hash: hash.sha256,                                                                                                  // 7151\n  gRed: false,                                                                                                        // 7152\n  g: [                                                                                                                // 7153\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',                                               // 7154\n                                                                                                                      // 7155\n    // 4/5                                                                                                            // 7156\n    '6666666666666666666666666666666666666666666666666666666666666658'                                                // 7157\n  ]                                                                                                                   // 7158\n});                                                                                                                   // 7159\n                                                                                                                      // 7160\ndefineCurve('secp256k1', {                                                                                            // 7161\n  type: 'short',                                                                                                      // 7162\n  prime: 'k256',                                                                                                      // 7163\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',                                       // 7164\n  a: '0',                                                                                                             // 7165\n  b: '7',                                                                                                             // 7166\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',                                       // 7167\n  h: '1',                                                                                                             // 7168\n  hash: hash.sha256,                                                                                                  // 7169\n                                                                                                                      // 7170\n  // Precomputed endomorphism                                                                                         // 7171\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',                                           // 7172\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',                                         // 7173\n  basis: [                                                                                                            // 7174\n    {                                                                                                                 // 7175\n      a: '3086d221a7d46bcde86c90e49284eb15',                                                                          // 7176\n      b: '-e4437ed6010e88286f547fa90abfe4c3'                                                                          // 7177\n    },                                                                                                                // 7178\n    {                                                                                                                 // 7179\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',                                                                         // 7180\n      b: '3086d221a7d46bcde86c90e49284eb15'                                                                           // 7181\n    }                                                                                                                 // 7182\n  ],                                                                                                                  // 7183\n                                                                                                                      // 7184\n  gRed: false,                                                                                                        // 7185\n  g: [                                                                                                                // 7186\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',                                               // 7187\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',                                               // 7188\n    {                                                                                                                 // 7189\n      'doubles': {                                                                                                    // 7190\n        'step': 4,                                                                                                    // 7191\n        'points': [                                                                                                   // 7192\n          [                                                                                                           // 7193\n            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',                                       // 7194\n            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'                                        // 7195\n          ],                                                                                                          // 7196\n          [                                                                                                           // 7197\n            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',                                       // 7198\n            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'                                        // 7199\n          ],                                                                                                          // 7200\n          [                                                                                                           // 7201\n            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',                                       // 7202\n            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'                                        // 7203\n          ],                                                                                                          // 7204\n          [                                                                                                           // 7205\n            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',                                       // 7206\n            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'                                         // 7207\n          ],                                                                                                          // 7208\n          [                                                                                                           // 7209\n            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',                                       // 7210\n            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'                                        // 7211\n          ],                                                                                                          // 7212\n          [                                                                                                           // 7213\n            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',                                       // 7214\n            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'                                        // 7215\n          ],                                                                                                          // 7216\n          [                                                                                                           // 7217\n            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',                                       // 7218\n            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'                                        // 7219\n          ],                                                                                                          // 7220\n          [                                                                                                           // 7221\n            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',                                       // 7222\n            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'                                        // 7223\n          ],                                                                                                          // 7224\n          [                                                                                                           // 7225\n            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',                                       // 7226\n            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'                                        // 7227\n          ],                                                                                                          // 7228\n          [                                                                                                           // 7229\n            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',                                       // 7230\n            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'                                        // 7231\n          ],                                                                                                          // 7232\n          [                                                                                                           // 7233\n            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',                                       // 7234\n            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'                                        // 7235\n          ],                                                                                                          // 7236\n          [                                                                                                           // 7237\n            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',                                       // 7238\n            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'                                        // 7239\n          ],                                                                                                          // 7240\n          [                                                                                                           // 7241\n            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',                                       // 7242\n            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'                                        // 7243\n          ],                                                                                                          // 7244\n          [                                                                                                           // 7245\n            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',                                       // 7246\n            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'                                        // 7247\n          ],                                                                                                          // 7248\n          [                                                                                                           // 7249\n            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',                                        // 7250\n            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'                                        // 7251\n          ],                                                                                                          // 7252\n          [                                                                                                           // 7253\n            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',                                       // 7254\n            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'                                        // 7255\n          ],                                                                                                          // 7256\n          [                                                                                                           // 7257\n            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',                                       // 7258\n            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'                                        // 7259\n          ],                                                                                                          // 7260\n          [                                                                                                           // 7261\n            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',                                        // 7262\n            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'                                        // 7263\n          ],                                                                                                          // 7264\n          [                                                                                                           // 7265\n            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',                                       // 7266\n            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'                                        // 7267\n          ],                                                                                                          // 7268\n          [                                                                                                           // 7269\n            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',                                       // 7270\n            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'                                        // 7271\n          ],                                                                                                          // 7272\n          [                                                                                                           // 7273\n            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',                                       // 7274\n            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'                                        // 7275\n          ],                                                                                                          // 7276\n          [                                                                                                           // 7277\n            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',                                       // 7278\n            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'                                        // 7279\n          ],                                                                                                          // 7280\n          [                                                                                                           // 7281\n            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',                                       // 7282\n            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'                                        // 7283\n          ],                                                                                                          // 7284\n          [                                                                                                           // 7285\n            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',                                       // 7286\n            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'                                        // 7287\n          ],                                                                                                          // 7288\n          [                                                                                                           // 7289\n            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',                                       // 7290\n            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'                                        // 7291\n          ],                                                                                                          // 7292\n          [                                                                                                           // 7293\n            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',                                       // 7294\n            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'                                        // 7295\n          ],                                                                                                          // 7296\n          [                                                                                                           // 7297\n            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',                                       // 7298\n            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'                                        // 7299\n          ],                                                                                                          // 7300\n          [                                                                                                           // 7301\n            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',                                       // 7302\n            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'                                        // 7303\n          ],                                                                                                          // 7304\n          [                                                                                                           // 7305\n            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',                                       // 7306\n            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'                                        // 7307\n          ],                                                                                                          // 7308\n          [                                                                                                           // 7309\n            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',                                       // 7310\n            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'                                        // 7311\n          ],                                                                                                          // 7312\n          [                                                                                                           // 7313\n            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',                                       // 7314\n            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'                                         // 7315\n          ],                                                                                                          // 7316\n          [                                                                                                           // 7317\n            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',                                       // 7318\n            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'                                        // 7319\n          ],                                                                                                          // 7320\n          [                                                                                                           // 7321\n            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',                                       // 7322\n            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'                                        // 7323\n          ],                                                                                                          // 7324\n          [                                                                                                           // 7325\n            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',                                       // 7326\n            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'                                        // 7327\n          ],                                                                                                          // 7328\n          [                                                                                                           // 7329\n            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',                                       // 7330\n            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'                                        // 7331\n          ],                                                                                                          // 7332\n          [                                                                                                           // 7333\n            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',                                       // 7334\n            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'                                         // 7335\n          ],                                                                                                          // 7336\n          [                                                                                                           // 7337\n            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',                                       // 7338\n            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'                                        // 7339\n          ],                                                                                                          // 7340\n          [                                                                                                           // 7341\n            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',                                       // 7342\n            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'                                        // 7343\n          ],                                                                                                          // 7344\n          [                                                                                                           // 7345\n            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',                                       // 7346\n            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'                                          // 7347\n          ],                                                                                                          // 7348\n          [                                                                                                           // 7349\n            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',                                       // 7350\n            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'                                        // 7351\n          ],                                                                                                          // 7352\n          [                                                                                                           // 7353\n            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',                                       // 7354\n            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'                                        // 7355\n          ],                                                                                                          // 7356\n          [                                                                                                           // 7357\n            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',                                       // 7358\n            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'                                        // 7359\n          ],                                                                                                          // 7360\n          [                                                                                                           // 7361\n            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',                                       // 7362\n            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'                                        // 7363\n          ],                                                                                                          // 7364\n          [                                                                                                           // 7365\n            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',                                        // 7366\n            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'                                        // 7367\n          ],                                                                                                          // 7368\n          [                                                                                                           // 7369\n            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',                                       // 7370\n            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'                                        // 7371\n          ],                                                                                                          // 7372\n          [                                                                                                           // 7373\n            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',                                       // 7374\n            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'                                        // 7375\n          ],                                                                                                          // 7376\n          [                                                                                                           // 7377\n            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',                                       // 7378\n            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'                                        // 7379\n          ],                                                                                                          // 7380\n          [                                                                                                           // 7381\n            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',                                       // 7382\n            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'                                        // 7383\n          ],                                                                                                          // 7384\n          [                                                                                                           // 7385\n            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',                                       // 7386\n            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'                                        // 7387\n          ],                                                                                                          // 7388\n          [                                                                                                           // 7389\n            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',                                       // 7390\n            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'                                        // 7391\n          ],                                                                                                          // 7392\n          [                                                                                                           // 7393\n            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',                                       // 7394\n            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'                                        // 7395\n          ],                                                                                                          // 7396\n          [                                                                                                           // 7397\n            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',                                       // 7398\n            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'                                        // 7399\n          ],                                                                                                          // 7400\n          [                                                                                                           // 7401\n            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',                                       // 7402\n            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'                                        // 7403\n          ],                                                                                                          // 7404\n          [                                                                                                           // 7405\n            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',                                       // 7406\n            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'                                        // 7407\n          ],                                                                                                          // 7408\n          [                                                                                                           // 7409\n            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',                                       // 7410\n            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'                                        // 7411\n          ],                                                                                                          // 7412\n          [                                                                                                           // 7413\n            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',                                       // 7414\n            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'                                        // 7415\n          ],                                                                                                          // 7416\n          [                                                                                                           // 7417\n            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',                                       // 7418\n            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'                                        // 7419\n          ],                                                                                                          // 7420\n          [                                                                                                           // 7421\n            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',                                       // 7422\n            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'                                        // 7423\n          ],                                                                                                          // 7424\n          [                                                                                                           // 7425\n            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',                                       // 7426\n            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'                                        // 7427\n          ],                                                                                                          // 7428\n          [                                                                                                           // 7429\n            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',                                       // 7430\n            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'                                        // 7431\n          ],                                                                                                          // 7432\n          [                                                                                                           // 7433\n            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',                                       // 7434\n            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'                                         // 7435\n          ],                                                                                                          // 7436\n          [                                                                                                           // 7437\n            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',                                       // 7438\n            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'                                        // 7439\n          ],                                                                                                          // 7440\n          [                                                                                                           // 7441\n            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',                                        // 7442\n            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'                                        // 7443\n          ],                                                                                                          // 7444\n          [                                                                                                           // 7445\n            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',                                       // 7446\n            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'                                        // 7447\n          ],                                                                                                          // 7448\n          [                                                                                                           // 7449\n            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',                                       // 7450\n            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'                                        // 7451\n          ]                                                                                                           // 7452\n        ]                                                                                                             // 7453\n      },                                                                                                              // 7454\n      'naf': {                                                                                                        // 7455\n        'wnd': 7,                                                                                                     // 7456\n        'points': [                                                                                                   // 7457\n          [                                                                                                           // 7458\n            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',                                       // 7459\n            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'                                        // 7460\n          ],                                                                                                          // 7461\n          [                                                                                                           // 7462\n            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',                                       // 7463\n            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'                                        // 7464\n          ],                                                                                                          // 7465\n          [                                                                                                           // 7466\n            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',                                       // 7467\n            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'                                        // 7468\n          ],                                                                                                          // 7469\n          [                                                                                                           // 7470\n            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',                                       // 7471\n            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'                                        // 7472\n          ],                                                                                                          // 7473\n          [                                                                                                           // 7474\n            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',                                       // 7475\n            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'                                        // 7476\n          ],                                                                                                          // 7477\n          [                                                                                                           // 7478\n            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',                                       // 7479\n            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'                                         // 7480\n          ],                                                                                                          // 7481\n          [                                                                                                           // 7482\n            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',                                       // 7483\n            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'                                        // 7484\n          ],                                                                                                          // 7485\n          [                                                                                                           // 7486\n            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',                                       // 7487\n            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'                                        // 7488\n          ],                                                                                                          // 7489\n          [                                                                                                           // 7490\n            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',                                       // 7491\n            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'                                        // 7492\n          ],                                                                                                          // 7493\n          [                                                                                                           // 7494\n            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',                                       // 7495\n            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'                                        // 7496\n          ],                                                                                                          // 7497\n          [                                                                                                           // 7498\n            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',                                       // 7499\n            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'                                         // 7500\n          ],                                                                                                          // 7501\n          [                                                                                                           // 7502\n            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',                                       // 7503\n            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'                                        // 7504\n          ],                                                                                                          // 7505\n          [                                                                                                           // 7506\n            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',                                       // 7507\n            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'                                        // 7508\n          ],                                                                                                          // 7509\n          [                                                                                                           // 7510\n            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',                                       // 7511\n            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'                                        // 7512\n          ],                                                                                                          // 7513\n          [                                                                                                           // 7514\n            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',                                       // 7515\n            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'                                        // 7516\n          ],                                                                                                          // 7517\n          [                                                                                                           // 7518\n            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',                                       // 7519\n            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'                                        // 7520\n          ],                                                                                                          // 7521\n          [                                                                                                           // 7522\n            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',                                       // 7523\n            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'                                         // 7524\n          ],                                                                                                          // 7525\n          [                                                                                                           // 7526\n            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',                                       // 7527\n            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'                                        // 7528\n          ],                                                                                                          // 7529\n          [                                                                                                           // 7530\n            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',                                       // 7531\n            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'                                        // 7532\n          ],                                                                                                          // 7533\n          [                                                                                                           // 7534\n            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',                                       // 7535\n            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'                                         // 7536\n          ],                                                                                                          // 7537\n          [                                                                                                           // 7538\n            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',                                       // 7539\n            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'                                        // 7540\n          ],                                                                                                          // 7541\n          [                                                                                                           // 7542\n            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',                                        // 7543\n            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'                                        // 7544\n          ],                                                                                                          // 7545\n          [                                                                                                           // 7546\n            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',                                       // 7547\n            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'                                        // 7548\n          ],                                                                                                          // 7549\n          [                                                                                                           // 7550\n            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',                                       // 7551\n            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'                                        // 7552\n          ],                                                                                                          // 7553\n          [                                                                                                           // 7554\n            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',                                       // 7555\n            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'                                        // 7556\n          ],                                                                                                          // 7557\n          [                                                                                                           // 7558\n            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',                                       // 7559\n            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'                                        // 7560\n          ],                                                                                                          // 7561\n          [                                                                                                           // 7562\n            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',                                       // 7563\n            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'                                        // 7564\n          ],                                                                                                          // 7565\n          [                                                                                                           // 7566\n            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',                                       // 7567\n            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'                                        // 7568\n          ],                                                                                                          // 7569\n          [                                                                                                           // 7570\n            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',                                       // 7571\n            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'                                         // 7572\n          ],                                                                                                          // 7573\n          [                                                                                                           // 7574\n            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',                                       // 7575\n            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'                                         // 7576\n          ],                                                                                                          // 7577\n          [                                                                                                           // 7578\n            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',                                       // 7579\n            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'                                        // 7580\n          ],                                                                                                          // 7581\n          [                                                                                                           // 7582\n            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',                                       // 7583\n            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'                                        // 7584\n          ],                                                                                                          // 7585\n          [                                                                                                           // 7586\n            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',                                       // 7587\n            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'                                        // 7588\n          ],                                                                                                          // 7589\n          [                                                                                                           // 7590\n            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',                                       // 7591\n            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'                                        // 7592\n          ],                                                                                                          // 7593\n          [                                                                                                           // 7594\n            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',                                       // 7595\n            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'                                        // 7596\n          ],                                                                                                          // 7597\n          [                                                                                                           // 7598\n            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',                                       // 7599\n            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'                                        // 7600\n          ],                                                                                                          // 7601\n          [                                                                                                           // 7602\n            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',                                       // 7603\n            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'                                        // 7604\n          ],                                                                                                          // 7605\n          [                                                                                                           // 7606\n            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',                                       // 7607\n            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'                                        // 7608\n          ],                                                                                                          // 7609\n          [                                                                                                           // 7610\n            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',                                       // 7611\n            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'                                        // 7612\n          ],                                                                                                          // 7613\n          [                                                                                                           // 7614\n            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',                                       // 7615\n            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'                                        // 7616\n          ],                                                                                                          // 7617\n          [                                                                                                           // 7618\n            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',                                       // 7619\n            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'                                        // 7620\n          ],                                                                                                          // 7621\n          [                                                                                                           // 7622\n            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',                                       // 7623\n            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'                                        // 7624\n          ],                                                                                                          // 7625\n          [                                                                                                           // 7626\n            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',                                       // 7627\n            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'                                        // 7628\n          ],                                                                                                          // 7629\n          [                                                                                                           // 7630\n            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',                                       // 7631\n            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'                                        // 7632\n          ],                                                                                                          // 7633\n          [                                                                                                           // 7634\n            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',                                       // 7635\n            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'                                        // 7636\n          ],                                                                                                          // 7637\n          [                                                                                                           // 7638\n            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',                                       // 7639\n            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'                                        // 7640\n          ],                                                                                                          // 7641\n          [                                                                                                           // 7642\n            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',                                       // 7643\n            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'                                        // 7644\n          ],                                                                                                          // 7645\n          [                                                                                                           // 7646\n            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',                                       // 7647\n            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'                                        // 7648\n          ],                                                                                                          // 7649\n          [                                                                                                           // 7650\n            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',                                       // 7651\n            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'                                         // 7652\n          ],                                                                                                          // 7653\n          [                                                                                                           // 7654\n            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',                                       // 7655\n            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'                                        // 7656\n          ],                                                                                                          // 7657\n          [                                                                                                           // 7658\n            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',                                       // 7659\n            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'                                         // 7660\n          ],                                                                                                          // 7661\n          [                                                                                                           // 7662\n            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',                                       // 7663\n            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'                                        // 7664\n          ],                                                                                                          // 7665\n          [                                                                                                           // 7666\n            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',                                       // 7667\n            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'                                        // 7668\n          ],                                                                                                          // 7669\n          [                                                                                                           // 7670\n            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',                                       // 7671\n            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'                                        // 7672\n          ],                                                                                                          // 7673\n          [                                                                                                           // 7674\n            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',                                       // 7675\n            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'                                        // 7676\n          ],                                                                                                          // 7677\n          [                                                                                                           // 7678\n            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',                                       // 7679\n            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'                                        // 7680\n          ],                                                                                                          // 7681\n          [                                                                                                           // 7682\n            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',                                       // 7683\n            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'                                        // 7684\n          ],                                                                                                          // 7685\n          [                                                                                                           // 7686\n            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',                                       // 7687\n            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'                                        // 7688\n          ],                                                                                                          // 7689\n          [                                                                                                           // 7690\n            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',                                        // 7691\n            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'                                        // 7692\n          ],                                                                                                          // 7693\n          [                                                                                                           // 7694\n            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',                                       // 7695\n            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'                                        // 7696\n          ],                                                                                                          // 7697\n          [                                                                                                           // 7698\n            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',                                       // 7699\n            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'                                        // 7700\n          ],                                                                                                          // 7701\n          [                                                                                                           // 7702\n            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',                                       // 7703\n            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'                                         // 7704\n          ],                                                                                                          // 7705\n          [                                                                                                           // 7706\n            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',                                       // 7707\n            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'                                         // 7708\n          ],                                                                                                          // 7709\n          [                                                                                                           // 7710\n            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',                                       // 7711\n            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'                                        // 7712\n          ],                                                                                                          // 7713\n          [                                                                                                           // 7714\n            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',                                       // 7715\n            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'                                        // 7716\n          ],                                                                                                          // 7717\n          [                                                                                                           // 7718\n            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',                                        // 7719\n            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'                                        // 7720\n          ],                                                                                                          // 7721\n          [                                                                                                           // 7722\n            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',                                       // 7723\n            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'                                        // 7724\n          ],                                                                                                          // 7725\n          [                                                                                                           // 7726\n            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',                                       // 7727\n            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'                                         // 7728\n          ],                                                                                                          // 7729\n          [                                                                                                           // 7730\n            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',                                       // 7731\n            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'                                        // 7732\n          ],                                                                                                          // 7733\n          [                                                                                                           // 7734\n            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',                                       // 7735\n            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'                                         // 7736\n          ],                                                                                                          // 7737\n          [                                                                                                           // 7738\n            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',                                       // 7739\n            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'                                        // 7740\n          ],                                                                                                          // 7741\n          [                                                                                                           // 7742\n            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',                                        // 7743\n            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'                                        // 7744\n          ],                                                                                                          // 7745\n          [                                                                                                           // 7746\n            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',                                       // 7747\n            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'                                        // 7748\n          ],                                                                                                          // 7749\n          [                                                                                                           // 7750\n            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',                                       // 7751\n            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'                                        // 7752\n          ],                                                                                                          // 7753\n          [                                                                                                           // 7754\n            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',                                       // 7755\n            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'                                        // 7756\n          ],                                                                                                          // 7757\n          [                                                                                                           // 7758\n            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',                                         // 7759\n            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'                                        // 7760\n          ],                                                                                                          // 7761\n          [                                                                                                           // 7762\n            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',                                       // 7763\n            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'                                        // 7764\n          ],                                                                                                          // 7765\n          [                                                                                                           // 7766\n            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',                                       // 7767\n            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'                                        // 7768\n          ],                                                                                                          // 7769\n          [                                                                                                           // 7770\n            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',                                       // 7771\n            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'                                        // 7772\n          ],                                                                                                          // 7773\n          [                                                                                                           // 7774\n            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',                                       // 7775\n            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'                                        // 7776\n          ],                                                                                                          // 7777\n          [                                                                                                           // 7778\n            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',                                       // 7779\n            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'                                        // 7780\n          ],                                                                                                          // 7781\n          [                                                                                                           // 7782\n            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',                                        // 7783\n            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'                                        // 7784\n          ],                                                                                                          // 7785\n          [                                                                                                           // 7786\n            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',                                       // 7787\n            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'                                         // 7788\n          ],                                                                                                          // 7789\n          [                                                                                                           // 7790\n            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',                                       // 7791\n            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'                                        // 7792\n          ],                                                                                                          // 7793\n          [                                                                                                           // 7794\n            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',                                       // 7795\n            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'                                        // 7796\n          ],                                                                                                          // 7797\n          [                                                                                                           // 7798\n            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',                                       // 7799\n            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'                                        // 7800\n          ],                                                                                                          // 7801\n          [                                                                                                           // 7802\n            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',                                       // 7803\n            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'                                        // 7804\n          ],                                                                                                          // 7805\n          [                                                                                                           // 7806\n            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',                                       // 7807\n            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'                                        // 7808\n          ],                                                                                                          // 7809\n          [                                                                                                           // 7810\n            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',                                       // 7811\n            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'                                        // 7812\n          ],                                                                                                          // 7813\n          [                                                                                                           // 7814\n            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',                                       // 7815\n            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'                                        // 7816\n          ],                                                                                                          // 7817\n          [                                                                                                           // 7818\n            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',                                       // 7819\n            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'                                        // 7820\n          ],                                                                                                          // 7821\n          [                                                                                                           // 7822\n            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',                                       // 7823\n            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'                                        // 7824\n          ],                                                                                                          // 7825\n          [                                                                                                           // 7826\n            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',                                       // 7827\n            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'                                        // 7828\n          ],                                                                                                          // 7829\n          [                                                                                                           // 7830\n            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',                                       // 7831\n            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'                                        // 7832\n          ],                                                                                                          // 7833\n          [                                                                                                           // 7834\n            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',                                       // 7835\n            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'                                        // 7836\n          ],                                                                                                          // 7837\n          [                                                                                                           // 7838\n            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',                                       // 7839\n            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'                                        // 7840\n          ],                                                                                                          // 7841\n          [                                                                                                           // 7842\n            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',                                       // 7843\n            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'                                        // 7844\n          ],                                                                                                          // 7845\n          [                                                                                                           // 7846\n            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',                                       // 7847\n            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'                                        // 7848\n          ],                                                                                                          // 7849\n          [                                                                                                           // 7850\n            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',                                       // 7851\n            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'                                        // 7852\n          ],                                                                                                          // 7853\n          [                                                                                                           // 7854\n            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',                                       // 7855\n            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'                                        // 7856\n          ],                                                                                                          // 7857\n          [                                                                                                           // 7858\n            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',                                       // 7859\n            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'                                        // 7860\n          ],                                                                                                          // 7861\n          [                                                                                                           // 7862\n            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',                                       // 7863\n            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'                                         // 7864\n          ],                                                                                                          // 7865\n          [                                                                                                           // 7866\n            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',                                       // 7867\n            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'                                        // 7868\n          ],                                                                                                          // 7869\n          [                                                                                                           // 7870\n            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',                                       // 7871\n            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'                                        // 7872\n          ],                                                                                                          // 7873\n          [                                                                                                           // 7874\n            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',                                       // 7875\n            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'                                         // 7876\n          ],                                                                                                          // 7877\n          [                                                                                                           // 7878\n            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',                                       // 7879\n            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'                                        // 7880\n          ],                                                                                                          // 7881\n          [                                                                                                           // 7882\n            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',                                       // 7883\n            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'                                        // 7884\n          ],                                                                                                          // 7885\n          [                                                                                                           // 7886\n            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',                                       // 7887\n            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'                                        // 7888\n          ],                                                                                                          // 7889\n          [                                                                                                           // 7890\n            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',                                       // 7891\n            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'                                        // 7892\n          ],                                                                                                          // 7893\n          [                                                                                                           // 7894\n            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',                                       // 7895\n            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'                                         // 7896\n          ],                                                                                                          // 7897\n          [                                                                                                           // 7898\n            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',                                       // 7899\n            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'                                        // 7900\n          ],                                                                                                          // 7901\n          [                                                                                                           // 7902\n            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',                                       // 7903\n            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'                                        // 7904\n          ],                                                                                                          // 7905\n          [                                                                                                           // 7906\n            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',                                       // 7907\n            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'                                        // 7908\n          ],                                                                                                          // 7909\n          [                                                                                                           // 7910\n            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',                                       // 7911\n            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'                                        // 7912\n          ],                                                                                                          // 7913\n          [                                                                                                           // 7914\n            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',                                       // 7915\n            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'                                        // 7916\n          ],                                                                                                          // 7917\n          [                                                                                                           // 7918\n            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',                                       // 7919\n            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'                                        // 7920\n          ],                                                                                                          // 7921\n          [                                                                                                           // 7922\n            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',                                       // 7923\n            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'                                        // 7924\n          ],                                                                                                          // 7925\n          [                                                                                                           // 7926\n            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',                                       // 7927\n            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'                                        // 7928\n          ],                                                                                                          // 7929\n          [                                                                                                           // 7930\n            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',                                       // 7931\n            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'                                        // 7932\n          ],                                                                                                          // 7933\n          [                                                                                                           // 7934\n            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',                                       // 7935\n            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'                                        // 7936\n          ],                                                                                                          // 7937\n          [                                                                                                           // 7938\n            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',                                       // 7939\n            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'                                        // 7940\n          ],                                                                                                          // 7941\n          [                                                                                                           // 7942\n            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',                                       // 7943\n            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'                                        // 7944\n          ],                                                                                                          // 7945\n          [                                                                                                           // 7946\n            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',                                       // 7947\n            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'                                         // 7948\n          ],                                                                                                          // 7949\n          [                                                                                                           // 7950\n            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',                                       // 7951\n            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'                                        // 7952\n          ],                                                                                                          // 7953\n          [                                                                                                           // 7954\n            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',                                       // 7955\n            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'                                        // 7956\n          ],                                                                                                          // 7957\n          [                                                                                                           // 7958\n            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',                                       // 7959\n            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'                                        // 7960\n          ],                                                                                                          // 7961\n          [                                                                                                           // 7962\n            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',                                       // 7963\n            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'                                        // 7964\n          ]                                                                                                           // 7965\n        ]                                                                                                             // 7966\n      }                                                                                                               // 7967\n    }                                                                                                                 // 7968\n  ]                                                                                                                   // 7969\n});                                                                                                                   // 7970\n                                                                                                                      // 7971\n},{\"../elliptic\":30,\"bn.js\":28,\"hash.js\":43}],37:[function(require,module,exports){                                   // 7972\nvar bn = require('bn.js');                                                                                            // 7973\nvar elliptic = require('../../elliptic');                                                                             // 7974\nvar utils = elliptic.utils;                                                                                           // 7975\nvar assert = utils.assert;                                                                                            // 7976\n                                                                                                                      // 7977\nvar KeyPair = require('./key');                                                                                       // 7978\nvar Signature = require('./signature');                                                                               // 7979\n                                                                                                                      // 7980\nfunction EC(options) {                                                                                                // 7981\n  if (!(this instanceof EC))                                                                                          // 7982\n    return new EC(options);                                                                                           // 7983\n                                                                                                                      // 7984\n  // Shortcut `elliptic.ec(curve-name)`                                                                               // 7985\n  if (typeof options === 'string') {                                                                                  // 7986\n    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);                                      // 7987\n                                                                                                                      // 7988\n    options = elliptic.curves[options];                                                                               // 7989\n  }                                                                                                                   // 7990\n                                                                                                                      // 7991\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`                                                            // 7992\n  if (options instanceof elliptic.curves.PresetCurve)                                                                 // 7993\n    options = { curve: options };                                                                                     // 7994\n                                                                                                                      // 7995\n  this.curve = options.curve.curve;                                                                                   // 7996\n  this.n = this.curve.n;                                                                                              // 7997\n  this.nh = this.n.shrn(1);                                                                                           // 7998\n  this.g = this.curve.g;                                                                                              // 7999\n                                                                                                                      // 8000\n  // Point on curve                                                                                                   // 8001\n  this.g = options.curve.g;                                                                                           // 8002\n  this.g.precompute(options.curve.n.bitLength() + 1);                                                                 // 8003\n                                                                                                                      // 8004\n  // Hash for function for DRBG                                                                                       // 8005\n  this.hash = options.hash || options.curve.hash;                                                                     // 8006\n}                                                                                                                     // 8007\nmodule.exports = EC;                                                                                                  // 8008\n                                                                                                                      // 8009\nEC.prototype.keyPair = function keyPair(priv, pub) {                                                                  // 8010\n  return new KeyPair(this, priv, pub);                                                                                // 8011\n};                                                                                                                    // 8012\n                                                                                                                      // 8013\nEC.prototype.genKeyPair = function genKeyPair(options) {                                                              // 8014\n  if (!options)                                                                                                       // 8015\n    options = {};                                                                                                     // 8016\n                                                                                                                      // 8017\n  // Instantiate Hmac_DRBG                                                                                            // 8018\n  var drbg = new elliptic.hmacDRBG({                                                                                  // 8019\n    hash: this.hash,                                                                                                  // 8020\n    pers: options.pers,                                                                                               // 8021\n    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),                                                // 8022\n    nonce: this.n.toArray()                                                                                           // 8023\n  });                                                                                                                 // 8024\n                                                                                                                      // 8025\n  var bytes = this.n.byteLength();                                                                                    // 8026\n  var ns2 = this.n.sub(new bn(2));                                                                                    // 8027\n  do {                                                                                                                // 8028\n    var priv = new bn(drbg.generate(bytes));                                                                          // 8029\n    if (priv.cmp(ns2) > 0)                                                                                            // 8030\n      continue;                                                                                                       // 8031\n                                                                                                                      // 8032\n    priv.iaddn(1);                                                                                                    // 8033\n    return this.keyPair(priv);                                                                                        // 8034\n  } while (true);                                                                                                     // 8035\n};                                                                                                                    // 8036\n                                                                                                                      // 8037\nEC.prototype._truncateToN = function truncateToN(msg, truncOnly) {                                                    // 8038\n  var delta = msg.byteLength() * 8 - this.n.bitLength();                                                              // 8039\n  if (delta > 0)                                                                                                      // 8040\n    msg = msg.shrn(delta);                                                                                            // 8041\n  if (!truncOnly && msg.cmp(this.n) >= 0)                                                                             // 8042\n    return msg.sub(this.n);                                                                                           // 8043\n  else                                                                                                                // 8044\n    return msg;                                                                                                       // 8045\n};                                                                                                                    // 8046\n                                                                                                                      // 8047\nEC.prototype.sign = function sign(msg, key, options) {                                                                // 8048\n  key = this.keyPair(key, 'hex');                                                                                     // 8049\n  msg = this._truncateToN(new bn(msg, 16));                                                                           // 8050\n  if (!options)                                                                                                       // 8051\n    options = {};                                                                                                     // 8052\n                                                                                                                      // 8053\n  // Zero-extend key to provide enough entropy                                                                        // 8054\n  var bytes = this.n.byteLength();                                                                                    // 8055\n  var bkey = key.getPrivate().toArray();                                                                              // 8056\n  for (var i = bkey.length; i < 21; i++)                                                                              // 8057\n    bkey.unshift(0);                                                                                                  // 8058\n                                                                                                                      // 8059\n  // Zero-extend nonce to have the same byte size as N                                                                // 8060\n  var nonce = msg.toArray();                                                                                          // 8061\n  for (var i = nonce.length; i < bytes; i++)                                                                          // 8062\n    nonce.unshift(0);                                                                                                 // 8063\n                                                                                                                      // 8064\n  // Instantiate Hmac_DRBG                                                                                            // 8065\n  var drbg = new elliptic.hmacDRBG({                                                                                  // 8066\n    hash: this.hash,                                                                                                  // 8067\n    entropy: bkey,                                                                                                    // 8068\n    nonce: nonce                                                                                                      // 8069\n  });                                                                                                                 // 8070\n                                                                                                                      // 8071\n  // Number of bytes to generate                                                                                      // 8072\n  var ns1 = this.n.sub(new bn(1));                                                                                    // 8073\n  do {                                                                                                                // 8074\n    var k = new bn(drbg.generate(this.n.byteLength()));                                                               // 8075\n    k = this._truncateToN(k, true);                                                                                   // 8076\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)                                                                            // 8077\n      continue;                                                                                                       // 8078\n                                                                                                                      // 8079\n    var kp = this.g.mul(k);                                                                                           // 8080\n    if (kp.isInfinity())                                                                                              // 8081\n      continue;                                                                                                       // 8082\n                                                                                                                      // 8083\n    var r = kp.getX().mod(this.n);                                                                                    // 8084\n    if (r.cmpn(0) === 0)                                                                                              // 8085\n      continue;                                                                                                       // 8086\n                                                                                                                      // 8087\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);                                        // 8088\n    if (s.cmpn(0) === 0)                                                                                              // 8089\n      continue;                                                                                                       // 8090\n                                                                                                                      // 8091\n    // Use complement of `s`, if it is > `n / 2`                                                                      // 8092\n    if (options.canonical && s.cmp(this.nh) > 0)                                                                      // 8093\n      s = this.n.sub(s);                                                                                              // 8094\n                                                                                                                      // 8095\n    return new Signature(r, s);                                                                                       // 8096\n  } while (true);                                                                                                     // 8097\n};                                                                                                                    // 8098\n                                                                                                                      // 8099\nEC.prototype.verify = function verify(msg, signature, key) {                                                          // 8100\n  msg = this._truncateToN(new bn(msg, 16));                                                                           // 8101\n  key = this.keyPair(key, 'hex');                                                                                     // 8102\n  signature = new Signature(signature, 'hex');                                                                        // 8103\n                                                                                                                      // 8104\n  // Perform primitive values validation                                                                              // 8105\n  var r = signature.r;                                                                                                // 8106\n  var s = signature.s;                                                                                                // 8107\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)                                                                            // 8108\n    return false;                                                                                                     // 8109\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)                                                                            // 8110\n    return false;                                                                                                     // 8111\n                                                                                                                      // 8112\n  // Validate signature                                                                                               // 8113\n  var sinv = s.invm(this.n);                                                                                          // 8114\n  var u1 = sinv.mul(msg).mod(this.n);                                                                                 // 8115\n  var u2 = sinv.mul(r).mod(this.n);                                                                                   // 8116\n                                                                                                                      // 8117\n  var p = this.g.mulAdd(u1, key.getPublic(), u2);                                                                     // 8118\n  if (p.isInfinity())                                                                                                 // 8119\n    return false;                                                                                                     // 8120\n                                                                                                                      // 8121\n  return p.getX().mod(this.n).cmp(r) === 0;                                                                           // 8122\n};                                                                                                                    // 8123\n                                                                                                                      // 8124\n},{\"../../elliptic\":30,\"./key\":38,\"./signature\":39,\"bn.js\":28}],38:[function(require,module,exports){                 // 8125\nvar bn = require('bn.js');                                                                                            // 8126\n                                                                                                                      // 8127\nvar elliptic = require('../../elliptic');                                                                             // 8128\nvar utils = elliptic.utils;                                                                                           // 8129\nvar assert = utils.assert;                                                                                            // 8130\n                                                                                                                      // 8131\nfunction KeyPair(ec, priv, pub) {                                                                                     // 8132\n  if (priv instanceof KeyPair)                                                                                        // 8133\n    return priv;                                                                                                      // 8134\n  if (pub instanceof KeyPair)                                                                                         // 8135\n    return pub;                                                                                                       // 8136\n                                                                                                                      // 8137\n  if (!priv) {                                                                                                        // 8138\n    priv = pub;                                                                                                       // 8139\n    pub = null;                                                                                                       // 8140\n  }                                                                                                                   // 8141\n  if (priv !== null && typeof priv === 'object') {                                                                    // 8142\n    if (priv.x) {                                                                                                     // 8143\n      // KeyPair(public)                                                                                              // 8144\n      pub = priv;                                                                                                     // 8145\n      priv = null;                                                                                                    // 8146\n    } else if (priv.priv || priv.pub) {                                                                               // 8147\n      // KeyPair({ priv: ..., pub: ... })                                                                             // 8148\n      pub = priv.pub;                                                                                                 // 8149\n      priv = priv.priv;                                                                                               // 8150\n    }                                                                                                                 // 8151\n  }                                                                                                                   // 8152\n                                                                                                                      // 8153\n  this.ec = ec;                                                                                                       // 8154\n  this.priv = null;                                                                                                   // 8155\n  this.pub = null;                                                                                                    // 8156\n                                                                                                                      // 8157\n  // KeyPair(public, 'hex')                                                                                           // 8158\n  if (this._importPublicHex(priv, pub))                                                                               // 8159\n    return;                                                                                                           // 8160\n                                                                                                                      // 8161\n  if (pub === 'hex')                                                                                                  // 8162\n    pub = null;                                                                                                       // 8163\n                                                                                                                      // 8164\n  // KeyPair(priv, pub)                                                                                               // 8165\n  if (priv)                                                                                                           // 8166\n    this._importPrivate(priv);                                                                                        // 8167\n  if (pub)                                                                                                            // 8168\n    this._importPublic(pub);                                                                                          // 8169\n}                                                                                                                     // 8170\nmodule.exports = KeyPair;                                                                                             // 8171\n                                                                                                                      // 8172\nKeyPair.prototype.validate = function validate() {                                                                    // 8173\n  var pub = this.getPublic();                                                                                         // 8174\n                                                                                                                      // 8175\n  if (pub.isInfinity())                                                                                               // 8176\n    return { result: false, reason: 'Invalid public key' };                                                           // 8177\n  if (!pub.validate())                                                                                                // 8178\n    return { result: false, reason: 'Public key is not a point' };                                                    // 8179\n  if (!pub.mul(this.ec.curve.n).isInfinity())                                                                         // 8180\n    return { result: false, reason: 'Public key * N != O' };                                                          // 8181\n                                                                                                                      // 8182\n  return { result: true, reason: null };                                                                              // 8183\n};                                                                                                                    // 8184\n                                                                                                                      // 8185\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {                                                      // 8186\n  if (!this.pub)                                                                                                      // 8187\n    this.pub = this.ec.g.mul(this.priv);                                                                              // 8188\n                                                                                                                      // 8189\n  // compact is optional argument                                                                                     // 8190\n  if (typeof compact === 'string') {                                                                                  // 8191\n    enc = compact;                                                                                                    // 8192\n    compact = null;                                                                                                   // 8193\n  }                                                                                                                   // 8194\n                                                                                                                      // 8195\n  if (!enc)                                                                                                           // 8196\n    return this.pub;                                                                                                  // 8197\n                                                                                                                      // 8198\n  var len = this.ec.curve.p.byteLength();                                                                             // 8199\n  var x = this.pub.getX().toArray();                                                                                  // 8200\n                                                                                                                      // 8201\n  for (var i = x.length; i < len; i++)                                                                                // 8202\n    x.unshift(0);                                                                                                     // 8203\n                                                                                                                      // 8204\n  if (compact) {                                                                                                      // 8205\n    var res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);                                                   // 8206\n  } else {                                                                                                            // 8207\n    var y = this.pub.getY().toArray();                                                                                // 8208\n    for (var i = y.length; i < len; i++)                                                                              // 8209\n      y.unshift(0);                                                                                                   // 8210\n    var res = [ 0x04 ].concat(x, y);                                                                                  // 8211\n  }                                                                                                                   // 8212\n  return utils.encode(res, enc);                                                                                      // 8213\n};                                                                                                                    // 8214\n                                                                                                                      // 8215\nKeyPair.prototype.getPrivate = function getPrivate(enc) {                                                             // 8216\n  if (enc === 'hex')                                                                                                  // 8217\n    return this.priv.toString(16, 2);                                                                                 // 8218\n  else                                                                                                                // 8219\n    return this.priv;                                                                                                 // 8220\n};                                                                                                                    // 8221\n                                                                                                                      // 8222\nKeyPair.prototype._importPrivate = function _importPrivate(key) {                                                     // 8223\n  this.priv = new bn(key, 16);                                                                                        // 8224\n                                                                                                                      // 8225\n  // Ensure that the priv won't be bigger than n, otherwise we may fail                                               // 8226\n  // in fixed multiplication method                                                                                   // 8227\n  this.priv = this.priv.mod(this.ec.curve.n);                                                                         // 8228\n};                                                                                                                    // 8229\n                                                                                                                      // 8230\nKeyPair.prototype._importPublic = function _importPublic(key) {                                                       // 8231\n  this.pub = this.ec.curve.point(key.x, key.y);                                                                       // 8232\n};                                                                                                                    // 8233\n                                                                                                                      // 8234\nKeyPair.prototype._importPublicHex = function _importPublic(key, enc) {                                               // 8235\n  key = utils.toArray(key, enc);                                                                                      // 8236\n  var len = this.ec.curve.p.byteLength();                                                                             // 8237\n  if (key[0] === 0x04 && key.length - 1 === 2 * len) {                                                                // 8238\n    this.pub = this.ec.curve.point(                                                                                   // 8239\n      key.slice(1, 1 + len),                                                                                          // 8240\n      key.slice(1 + len, 1 + 2 * len));                                                                               // 8241\n  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {                                        // 8242\n    this.pub = this.ec.curve.pointFromX(key[0] === 0x03,                                                              // 8243\n                                        key.slice(1, 1 +len));                                                        // 8244\n  } else {                                                                                                            // 8245\n    return false;                                                                                                     // 8246\n  }                                                                                                                   // 8247\n                                                                                                                      // 8248\n  return true;                                                                                                        // 8249\n};                                                                                                                    // 8250\n                                                                                                                      // 8251\n// ECDH                                                                                                               // 8252\nKeyPair.prototype.derive = function derive(pub) {                                                                     // 8253\n  return pub.mul(this.priv).getX();                                                                                   // 8254\n};                                                                                                                    // 8255\n                                                                                                                      // 8256\n// ECDSA                                                                                                              // 8257\nKeyPair.prototype.sign = function sign(msg) {                                                                         // 8258\n  return this.ec.sign(msg, this);                                                                                     // 8259\n};                                                                                                                    // 8260\n                                                                                                                      // 8261\nKeyPair.prototype.verify = function verify(msg, signature) {                                                          // 8262\n  return this.ec.verify(msg, signature, this);                                                                        // 8263\n};                                                                                                                    // 8264\n                                                                                                                      // 8265\nKeyPair.prototype.inspect = function inspect() {                                                                      // 8266\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +                                                   // 8267\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';                                                          // 8268\n};                                                                                                                    // 8269\n                                                                                                                      // 8270\n},{\"../../elliptic\":30,\"bn.js\":28}],39:[function(require,module,exports){                                             // 8271\nvar bn = require('bn.js');                                                                                            // 8272\n                                                                                                                      // 8273\nvar elliptic = require('../../elliptic');                                                                             // 8274\nvar utils = elliptic.utils;                                                                                           // 8275\nvar assert = utils.assert;                                                                                            // 8276\n                                                                                                                      // 8277\nfunction Signature(r, s) {                                                                                            // 8278\n  if (r instanceof Signature)                                                                                         // 8279\n    return r;                                                                                                         // 8280\n                                                                                                                      // 8281\n  if (this._importDER(r, s))                                                                                          // 8282\n    return;                                                                                                           // 8283\n                                                                                                                      // 8284\n  assert(r && s, 'Signature without r or s');                                                                         // 8285\n  this.r = new bn(r, 16);                                                                                             // 8286\n  this.s = new bn(s, 16);                                                                                             // 8287\n}                                                                                                                     // 8288\nmodule.exports = Signature;                                                                                           // 8289\n                                                                                                                      // 8290\nSignature.prototype._importDER = function _importDER(data, enc) {                                                     // 8291\n  data = utils.toArray(data, enc);                                                                                    // 8292\n  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)                                                        // 8293\n    return false;                                                                                                     // 8294\n  var total = data[1];                                                                                                // 8295\n  if (1 + total > data.length)                                                                                        // 8296\n    return false;                                                                                                     // 8297\n  var rlen = data[3];                                                                                                 // 8298\n  // Short length notation                                                                                            // 8299\n  if (rlen >= 0x80)                                                                                                   // 8300\n    return false;                                                                                                     // 8301\n  if (4 + rlen + 2 >= data.length)                                                                                    // 8302\n    return false;                                                                                                     // 8303\n  if (data[4 + rlen] !== 0x02)                                                                                        // 8304\n    return false;                                                                                                     // 8305\n  var slen = data[5 + rlen];                                                                                          // 8306\n  // Short length notation                                                                                            // 8307\n  if (slen >= 0x80)                                                                                                   // 8308\n    return false;                                                                                                     // 8309\n  if (4 + rlen + 2 + slen > data.length)                                                                              // 8310\n    return false;                                                                                                     // 8311\n                                                                                                                      // 8312\n  this.r = new bn(data.slice(4, 4 + rlen));                                                                           // 8313\n  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));                                                     // 8314\n                                                                                                                      // 8315\n  return true;                                                                                                        // 8316\n};                                                                                                                    // 8317\n                                                                                                                      // 8318\nSignature.prototype.toDER = function toDER(enc) {                                                                     // 8319\n  var r = this.r.toArray();                                                                                           // 8320\n  var s = this.s.toArray();                                                                                           // 8321\n                                                                                                                      // 8322\n  // Pad values                                                                                                       // 8323\n  if (r[0] & 0x80)                                                                                                    // 8324\n    r = [ 0 ].concat(r);                                                                                              // 8325\n  // Pad values                                                                                                       // 8326\n  if (s[0] & 0x80)                                                                                                    // 8327\n    s = [ 0 ].concat(s);                                                                                              // 8328\n                                                                                                                      // 8329\n  var total = r.length + s.length + 4;                                                                                // 8330\n  var res = [ 0x30, total, 0x02, r.length ];                                                                          // 8331\n  res = res.concat(r, [ 0x02, s.length ], s);                                                                         // 8332\n  return utils.encode(res, enc);                                                                                      // 8333\n};                                                                                                                    // 8334\n                                                                                                                      // 8335\n},{\"../../elliptic\":30,\"bn.js\":28}],40:[function(require,module,exports){                                             // 8336\nvar hash = require('hash.js');                                                                                        // 8337\nvar elliptic = require('../elliptic');                                                                                // 8338\nvar utils = elliptic.utils;                                                                                           // 8339\nvar assert = utils.assert;                                                                                            // 8340\n                                                                                                                      // 8341\nfunction HmacDRBG(options) {                                                                                          // 8342\n  if (!(this instanceof HmacDRBG))                                                                                    // 8343\n    return new HmacDRBG(options);                                                                                     // 8344\n  this.hash = options.hash;                                                                                           // 8345\n  this.predResist = !!options.predResist;                                                                             // 8346\n                                                                                                                      // 8347\n  this.outLen = this.hash.outSize;                                                                                    // 8348\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;                                                     // 8349\n                                                                                                                      // 8350\n  this.reseed = null;                                                                                                 // 8351\n  this.reseedInterval = null;                                                                                         // 8352\n  this.K = null;                                                                                                      // 8353\n  this.V = null;                                                                                                      // 8354\n                                                                                                                      // 8355\n  var entropy = utils.toArray(options.entropy, options.entropyEnc);                                                   // 8356\n  var nonce = utils.toArray(options.nonce, options.nonceEnc);                                                         // 8357\n  var pers = utils.toArray(options.pers, options.persEnc);                                                            // 8358\n  assert(entropy.length >= (this.minEntropy / 8),                                                                     // 8359\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');                                             // 8360\n  this._init(entropy, nonce, pers);                                                                                   // 8361\n}                                                                                                                     // 8362\nmodule.exports = HmacDRBG;                                                                                            // 8363\n                                                                                                                      // 8364\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {                                                      // 8365\n  var seed = entropy.concat(nonce).concat(pers);                                                                      // 8366\n                                                                                                                      // 8367\n  this.K = new Array(this.outLen / 8);                                                                                // 8368\n  this.V = new Array(this.outLen / 8);                                                                                // 8369\n  for (var i = 0; i < this.V.length; i++) {                                                                           // 8370\n    this.K[i] = 0x00;                                                                                                 // 8371\n    this.V[i] = 0x01;                                                                                                 // 8372\n  }                                                                                                                   // 8373\n                                                                                                                      // 8374\n  this._update(seed);                                                                                                 // 8375\n  this.reseed = 1;                                                                                                    // 8376\n  this.reseedInterval = 0x1000000000000;  // 2^48                                                                     // 8377\n};                                                                                                                    // 8378\n                                                                                                                      // 8379\nHmacDRBG.prototype._hmac = function hmac() {                                                                          // 8380\n  return new hash.hmac(this.hash, this.K);                                                                            // 8381\n};                                                                                                                    // 8382\n                                                                                                                      // 8383\nHmacDRBG.prototype._update = function update(seed) {                                                                  // 8384\n  var kmac = this._hmac()                                                                                             // 8385\n                 .update(this.V)                                                                                      // 8386\n                 .update([ 0x00 ]);                                                                                   // 8387\n  if (seed)                                                                                                           // 8388\n    kmac = kmac.update(seed);                                                                                         // 8389\n  this.K = kmac.digest();                                                                                             // 8390\n  this.V = this._hmac().update(this.V).digest();                                                                      // 8391\n  if (!seed)                                                                                                          // 8392\n    return;                                                                                                           // 8393\n                                                                                                                      // 8394\n  this.K = this._hmac()                                                                                               // 8395\n               .update(this.V)                                                                                        // 8396\n               .update([ 0x01 ])                                                                                      // 8397\n               .update(seed)                                                                                          // 8398\n               .digest();                                                                                             // 8399\n  this.V = this._hmac().update(this.V).digest();                                                                      // 8400\n};                                                                                                                    // 8401\n                                                                                                                      // 8402\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {                                       // 8403\n  // Optional entropy enc                                                                                             // 8404\n  if (typeof entropyEnc !== 'string') {                                                                               // 8405\n    addEnc = add;                                                                                                     // 8406\n    add = entropyEnc;                                                                                                 // 8407\n    entropyEnc = null;                                                                                                // 8408\n  }                                                                                                                   // 8409\n                                                                                                                      // 8410\n  entropy = utils.toBuffer(entropy, entropyEnc);                                                                      // 8411\n  add = utils.toBuffer(add, addEnc);                                                                                  // 8412\n                                                                                                                      // 8413\n  assert(entropy.length >= (this.minEntropy / 8),                                                                     // 8414\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');                                             // 8415\n                                                                                                                      // 8416\n  this._update(entropy.concat(add || []));                                                                            // 8417\n  this.reseed = 1;                                                                                                    // 8418\n};                                                                                                                    // 8419\n                                                                                                                      // 8420\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {                                              // 8421\n  if (this.reseed > this.reseedInterval)                                                                              // 8422\n    throw new Error('Reseed is required');                                                                            // 8423\n                                                                                                                      // 8424\n  // Optional encoding                                                                                                // 8425\n  if (typeof enc !== 'string') {                                                                                      // 8426\n    addEnc = add;                                                                                                     // 8427\n    add = enc;                                                                                                        // 8428\n    enc = null;                                                                                                       // 8429\n  }                                                                                                                   // 8430\n                                                                                                                      // 8431\n  // Optional additional data                                                                                         // 8432\n  if (add) {                                                                                                          // 8433\n    add = utils.toArray(add, addEnc);                                                                                 // 8434\n    this._update(add);                                                                                                // 8435\n  }                                                                                                                   // 8436\n                                                                                                                      // 8437\n  var temp = [];                                                                                                      // 8438\n  while (temp.length < len) {                                                                                         // 8439\n    this.V = this._hmac().update(this.V).digest();                                                                    // 8440\n    temp = temp.concat(this.V);                                                                                       // 8441\n  }                                                                                                                   // 8442\n                                                                                                                      // 8443\n  var res = temp.slice(0, len);                                                                                       // 8444\n  this._update(add);                                                                                                  // 8445\n  this.reseed++;                                                                                                      // 8446\n  return utils.encode(res, enc);                                                                                      // 8447\n};                                                                                                                    // 8448\n                                                                                                                      // 8449\n},{\"../elliptic\":30,\"hash.js\":43}],41:[function(require,module,exports){                                              // 8450\nvar bn = require('bn.js');                                                                                            // 8451\n                                                                                                                      // 8452\nvar utils = exports;                                                                                                  // 8453\n                                                                                                                      // 8454\nutils.assert = function assert(val, msg) {                                                                            // 8455\n  if (!val)                                                                                                           // 8456\n    throw new Error(msg || 'Assertion failed');                                                                       // 8457\n};                                                                                                                    // 8458\n                                                                                                                      // 8459\nfunction toArray(msg, enc) {                                                                                          // 8460\n  if (Array.isArray(msg))                                                                                             // 8461\n    return msg.slice();                                                                                               // 8462\n  if (!msg)                                                                                                           // 8463\n    return [];                                                                                                        // 8464\n  var res = [];                                                                                                       // 8465\n  if (typeof msg === 'string') {                                                                                      // 8466\n    if (!enc) {                                                                                                       // 8467\n      for (var i = 0; i < msg.length; i++) {                                                                          // 8468\n        var c = msg.charCodeAt(i);                                                                                    // 8469\n        var hi = c >> 8;                                                                                              // 8470\n        var lo = c & 0xff;                                                                                            // 8471\n        if (hi)                                                                                                       // 8472\n          res.push(hi, lo);                                                                                           // 8473\n        else                                                                                                          // 8474\n          res.push(lo);                                                                                               // 8475\n      }                                                                                                               // 8476\n    } else if (enc === 'hex') {                                                                                       // 8477\n      msg = msg.replace(/[^a-z0-9]+/ig, '');                                                                          // 8478\n      if (msg.length % 2 !== 0)                                                                                       // 8479\n        msg = '0' + msg;                                                                                              // 8480\n      for (var i = 0; i < msg.length; i += 2)                                                                         // 8481\n        res.push(parseInt(msg[i] + msg[i + 1], 16));                                                                  // 8482\n    }                                                                                                                 // 8483\n  } else {                                                                                                            // 8484\n    for (var i = 0; i < msg.length; i++)                                                                              // 8485\n      res[i] = msg[i] | 0;                                                                                            // 8486\n  }                                                                                                                   // 8487\n  return res;                                                                                                         // 8488\n}                                                                                                                     // 8489\nutils.toArray = toArray;                                                                                              // 8490\n                                                                                                                      // 8491\nfunction toHex(msg) {                                                                                                 // 8492\n  var res = '';                                                                                                       // 8493\n  for (var i = 0; i < msg.length; i++)                                                                                // 8494\n    res += zero2(msg[i].toString(16));                                                                                // 8495\n  return res;                                                                                                         // 8496\n}                                                                                                                     // 8497\nutils.toHex = toHex;                                                                                                  // 8498\n                                                                                                                      // 8499\nutils.encode = function encode(arr, enc) {                                                                            // 8500\n  if (enc === 'hex')                                                                                                  // 8501\n    return toHex(arr);                                                                                                // 8502\n  else                                                                                                                // 8503\n    return arr;                                                                                                       // 8504\n};                                                                                                                    // 8505\n                                                                                                                      // 8506\nfunction zero2(word) {                                                                                                // 8507\n  if (word.length === 1)                                                                                              // 8508\n    return '0' + word;                                                                                                // 8509\n  else                                                                                                                // 8510\n    return word;                                                                                                      // 8511\n}                                                                                                                     // 8512\nutils.zero2 = zero2;                                                                                                  // 8513\n                                                                                                                      // 8514\n// Represent num in a w-NAF form                                                                                      // 8515\nfunction getNAF(num, w) {                                                                                             // 8516\n  var naf = [];                                                                                                       // 8517\n  var ws = 1 << (w + 1);                                                                                              // 8518\n  var k = num.clone();                                                                                                // 8519\n  while (k.cmpn(1) >= 0) {                                                                                            // 8520\n    var z;                                                                                                            // 8521\n    if (k.isOdd()) {                                                                                                  // 8522\n      var mod = k.andln(ws - 1);                                                                                      // 8523\n      if (mod > (ws >> 1) - 1)                                                                                        // 8524\n        z = (ws >> 1) - mod;                                                                                          // 8525\n      else                                                                                                            // 8526\n        z = mod;                                                                                                      // 8527\n      k.isubn(z);                                                                                                     // 8528\n    } else {                                                                                                          // 8529\n      z = 0;                                                                                                          // 8530\n    }                                                                                                                 // 8531\n    naf.push(z);                                                                                                      // 8532\n                                                                                                                      // 8533\n    // Optimization, shift by word if possible                                                                        // 8534\n    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;                                             // 8535\n    for (var i = 1; i < shift; i++)                                                                                   // 8536\n      naf.push(0);                                                                                                    // 8537\n    k.ishrn(shift);                                                                                                   // 8538\n  }                                                                                                                   // 8539\n                                                                                                                      // 8540\n  return naf;                                                                                                         // 8541\n}                                                                                                                     // 8542\nutils.getNAF = getNAF;                                                                                                // 8543\n                                                                                                                      // 8544\n// Represent k1, k2 in a Joint Sparse Form                                                                            // 8545\nfunction getJSF(k1, k2) {                                                                                             // 8546\n  var jsf = [                                                                                                         // 8547\n    [],                                                                                                               // 8548\n    []                                                                                                                // 8549\n  ];                                                                                                                  // 8550\n                                                                                                                      // 8551\n  k1 = k1.clone();                                                                                                    // 8552\n  k2 = k2.clone();                                                                                                    // 8553\n  var d1 = 0;                                                                                                         // 8554\n  var d2 = 0;                                                                                                         // 8555\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {                                                                      // 8556\n                                                                                                                      // 8557\n    // First phase                                                                                                    // 8558\n    var m14 = (k1.andln(3) + d1) & 3;                                                                                 // 8559\n    var m24 = (k2.andln(3) + d2) & 3;                                                                                 // 8560\n    if (m14 === 3)                                                                                                    // 8561\n      m14 = -1;                                                                                                       // 8562\n    if (m24 === 3)                                                                                                    // 8563\n      m24 = -1;                                                                                                       // 8564\n    var u1;                                                                                                           // 8565\n    if ((m14 & 1) === 0) {                                                                                            // 8566\n      u1 = 0;                                                                                                         // 8567\n    } else {                                                                                                          // 8568\n      var m8 = (k1.andln(7) + d1) & 7;                                                                                // 8569\n      if ((m8 === 3 || m8 === 5) && m24 === 2)                                                                        // 8570\n        u1 = -m14;                                                                                                    // 8571\n      else                                                                                                            // 8572\n        u1 = m14;                                                                                                     // 8573\n    }                                                                                                                 // 8574\n    jsf[0].push(u1);                                                                                                  // 8575\n                                                                                                                      // 8576\n    var u2;                                                                                                           // 8577\n    if ((m24 & 1) === 0) {                                                                                            // 8578\n      u2 = 0;                                                                                                         // 8579\n    } else {                                                                                                          // 8580\n      var m8 = (k2.andln(7) + d2) & 7;                                                                                // 8581\n      if ((m8 === 3 || m8 === 5) && m14 === 2)                                                                        // 8582\n        u2 = -m24;                                                                                                    // 8583\n      else                                                                                                            // 8584\n        u2 = m24;                                                                                                     // 8585\n    }                                                                                                                 // 8586\n    jsf[1].push(u2);                                                                                                  // 8587\n                                                                                                                      // 8588\n    // Second phase                                                                                                   // 8589\n    if (2 * d1 === u1 + 1)                                                                                            // 8590\n      d1 = 1 - d1;                                                                                                    // 8591\n    if (2 * d2 === u2 + 1)                                                                                            // 8592\n      d2 = 1 - d2;                                                                                                    // 8593\n    k1.ishrn(1);                                                                                                      // 8594\n    k2.ishrn(1);                                                                                                      // 8595\n  }                                                                                                                   // 8596\n                                                                                                                      // 8597\n  return jsf;                                                                                                         // 8598\n}                                                                                                                     // 8599\nutils.getJSF = getJSF;                                                                                                // 8600\n                                                                                                                      // 8601\n},{\"bn.js\":28}],42:[function(require,module,exports){                                                                 // 8602\nvar r;                                                                                                                // 8603\n                                                                                                                      // 8604\nmodule.exports = function rand(len) {                                                                                 // 8605\n  if (!r)                                                                                                             // 8606\n    r = new Rand(null);                                                                                               // 8607\n                                                                                                                      // 8608\n  return r.generate(len);                                                                                             // 8609\n};                                                                                                                    // 8610\n                                                                                                                      // 8611\nfunction Rand(rand) {                                                                                                 // 8612\n  this.rand = rand;                                                                                                   // 8613\n}                                                                                                                     // 8614\nmodule.exports.Rand = Rand;                                                                                           // 8615\n                                                                                                                      // 8616\nRand.prototype.generate = function generate(len) {                                                                    // 8617\n  return this._rand(len);                                                                                             // 8618\n};                                                                                                                    // 8619\n                                                                                                                      // 8620\nif (typeof window === 'object') {                                                                                     // 8621\n  if (window.crypto && window.crypto.getRandomValues) {                                                               // 8622\n    // Modern browsers                                                                                                // 8623\n    Rand.prototype._rand = function _rand(n) {                                                                        // 8624\n      var arr = new Uint8Array(n);                                                                                    // 8625\n      window.crypto.getRandomValues(arr);                                                                             // 8626\n      return arr;                                                                                                     // 8627\n    };                                                                                                                // 8628\n  } else if (window.msCrypto && window.msCrypto.getRandomValues) {                                                    // 8629\n    // IE                                                                                                             // 8630\n    Rand.prototype._rand = function _rand(n) {                                                                        // 8631\n      var arr = new Uint8Array(n);                                                                                    // 8632\n      window.msCrypto.getRandomValues(arr);                                                                           // 8633\n      return arr;                                                                                                     // 8634\n    };                                                                                                                // 8635\n  } else {                                                                                                            // 8636\n    // Old junk                                                                                                       // 8637\n    Rand.prototype._rand = function() {                                                                               // 8638\n      throw new Error('Not implemented yet');                                                                         // 8639\n    };                                                                                                                // 8640\n  }                                                                                                                   // 8641\n} else {                                                                                                              // 8642\n  // Node.js or Web worker                                                                                            // 8643\n  try {                                                                                                               // 8644\n    var crypto = require('cry' + 'pto');                                                                              // 8645\n                                                                                                                      // 8646\n    Rand.prototype._rand = function _rand(n) {                                                                        // 8647\n      return crypto.randomBytes(n);                                                                                   // 8648\n    };                                                                                                                // 8649\n  } catch (e) {                                                                                                       // 8650\n    // Emulate crypto API using randy                                                                                 // 8651\n    Rand.prototype._rand = function _rand(n) {                                                                        // 8652\n      var res = new Uint8Array(n);                                                                                    // 8653\n      for (var i = 0; i < res.length; i++)                                                                            // 8654\n        res[i] = this.rand.getByte();                                                                                 // 8655\n      return res;                                                                                                     // 8656\n    };                                                                                                                // 8657\n  }                                                                                                                   // 8658\n}                                                                                                                     // 8659\n                                                                                                                      // 8660\n},{}],43:[function(require,module,exports){                                                                           // 8661\nvar hash = exports;                                                                                                   // 8662\n                                                                                                                      // 8663\nhash.utils = require('./hash/utils');                                                                                 // 8664\nhash.common = require('./hash/common');                                                                               // 8665\nhash.sha = require('./hash/sha');                                                                                     // 8666\nhash.ripemd = require('./hash/ripemd');                                                                               // 8667\nhash.hmac = require('./hash/hmac');                                                                                   // 8668\n                                                                                                                      // 8669\n// Proxy hash functions to the main object                                                                            // 8670\nhash.sha1 = hash.sha.sha1;                                                                                            // 8671\nhash.sha256 = hash.sha.sha256;                                                                                        // 8672\nhash.sha224 = hash.sha.sha224;                                                                                        // 8673\nhash.sha384 = hash.sha.sha384;                                                                                        // 8674\nhash.sha512 = hash.sha.sha512;                                                                                        // 8675\nhash.ripemd160 = hash.ripemd.ripemd160;                                                                               // 8676\n                                                                                                                      // 8677\n},{\"./hash/common\":44,\"./hash/hmac\":45,\"./hash/ripemd\":46,\"./hash/sha\":47,\"./hash/utils\":48}],44:[function(require,module,exports){\nvar hash = require('../hash');                                                                                        // 8679\nvar utils = hash.utils;                                                                                               // 8680\nvar assert = utils.assert;                                                                                            // 8681\n                                                                                                                      // 8682\nfunction BlockHash() {                                                                                                // 8683\n  this.pending = null;                                                                                                // 8684\n  this.pendingTotal = 0;                                                                                              // 8685\n  this.blockSize = this.constructor.blockSize;                                                                        // 8686\n  this.outSize = this.constructor.outSize;                                                                            // 8687\n  this.hmacStrength = this.constructor.hmacStrength;                                                                  // 8688\n  this.padLength = this.constructor.padLength / 8;                                                                    // 8689\n  this.endian = 'big';                                                                                                // 8690\n                                                                                                                      // 8691\n  this._delta8 = this.blockSize / 8;                                                                                  // 8692\n  this._delta32 = this.blockSize / 32;                                                                                // 8693\n}                                                                                                                     // 8694\nexports.BlockHash = BlockHash;                                                                                        // 8695\n                                                                                                                      // 8696\nBlockHash.prototype.update = function update(msg, enc) {                                                              // 8697\n  // Convert message to array, pad it, and join into 32bit blocks                                                     // 8698\n  msg = utils.toArray(msg, enc);                                                                                      // 8699\n  if (!this.pending)                                                                                                  // 8700\n    this.pending = msg;                                                                                               // 8701\n  else                                                                                                                // 8702\n    this.pending = this.pending.concat(msg);                                                                          // 8703\n  this.pendingTotal += msg.length;                                                                                    // 8704\n                                                                                                                      // 8705\n  // Enough data, try updating                                                                                        // 8706\n  if (this.pending.length >= this._delta8) {                                                                          // 8707\n    msg = this.pending;                                                                                               // 8708\n                                                                                                                      // 8709\n    // Process pending data in blocks                                                                                 // 8710\n    var r = msg.length % this._delta8;                                                                                // 8711\n    this.pending = msg.slice(msg.length - r, msg.length);                                                             // 8712\n    if (this.pending.length === 0)                                                                                    // 8713\n      this.pending = null;                                                                                            // 8714\n                                                                                                                      // 8715\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);                                                          // 8716\n    for (var i = 0; i < msg.length; i += this._delta32)                                                               // 8717\n      this._update(msg, i, i + this._delta32);                                                                        // 8718\n  }                                                                                                                   // 8719\n                                                                                                                      // 8720\n  return this;                                                                                                        // 8721\n};                                                                                                                    // 8722\n                                                                                                                      // 8723\nBlockHash.prototype.digest = function digest(enc) {                                                                   // 8724\n  this.update(this._pad());                                                                                           // 8725\n  assert(this.pending === null);                                                                                      // 8726\n                                                                                                                      // 8727\n  return this._digest(enc);                                                                                           // 8728\n};                                                                                                                    // 8729\n                                                                                                                      // 8730\nBlockHash.prototype._pad = function pad() {                                                                           // 8731\n  var len = this.pendingTotal;                                                                                        // 8732\n  var bytes = this._delta8;                                                                                           // 8733\n  var k = bytes - ((len + this.padLength) % bytes);                                                                   // 8734\n  var res = new Array(k + this.padLength);                                                                            // 8735\n  res[0] = 0x80;                                                                                                      // 8736\n  for (var i = 1; i < k; i++)                                                                                         // 8737\n    res[i] = 0;                                                                                                       // 8738\n                                                                                                                      // 8739\n  // Append length                                                                                                    // 8740\n  len <<= 3;                                                                                                          // 8741\n  if (this.endian === 'big') {                                                                                        // 8742\n    for (var t = 8; t < this.padLength; t++)                                                                          // 8743\n      res[i++] = 0;                                                                                                   // 8744\n                                                                                                                      // 8745\n    res[i++] = 0;                                                                                                     // 8746\n    res[i++] = 0;                                                                                                     // 8747\n    res[i++] = 0;                                                                                                     // 8748\n    res[i++] = 0;                                                                                                     // 8749\n    res[i++] = (len >>> 24) & 0xff;                                                                                   // 8750\n    res[i++] = (len >>> 16) & 0xff;                                                                                   // 8751\n    res[i++] = (len >>> 8) & 0xff;                                                                                    // 8752\n    res[i++] = len & 0xff;                                                                                            // 8753\n  } else {                                                                                                            // 8754\n    res[i++] = len & 0xff;                                                                                            // 8755\n    res[i++] = (len >>> 8) & 0xff;                                                                                    // 8756\n    res[i++] = (len >>> 16) & 0xff;                                                                                   // 8757\n    res[i++] = (len >>> 24) & 0xff;                                                                                   // 8758\n    res[i++] = 0;                                                                                                     // 8759\n    res[i++] = 0;                                                                                                     // 8760\n    res[i++] = 0;                                                                                                     // 8761\n    res[i++] = 0;                                                                                                     // 8762\n                                                                                                                      // 8763\n    for (var t = 8; t < this.padLength; t++)                                                                          // 8764\n      res[i++] = 0;                                                                                                   // 8765\n  }                                                                                                                   // 8766\n                                                                                                                      // 8767\n  return res;                                                                                                         // 8768\n};                                                                                                                    // 8769\n                                                                                                                      // 8770\n},{\"../hash\":43}],45:[function(require,module,exports){                                                               // 8771\nvar hmac = exports;                                                                                                   // 8772\n                                                                                                                      // 8773\nvar hash = require('../hash');                                                                                        // 8774\nvar utils = hash.utils;                                                                                               // 8775\nvar assert = utils.assert;                                                                                            // 8776\n                                                                                                                      // 8777\nfunction Hmac(hash, key, enc) {                                                                                       // 8778\n  if (!(this instanceof Hmac))                                                                                        // 8779\n    return new Hmac(hash, key, enc);                                                                                  // 8780\n  this.Hash = hash;                                                                                                   // 8781\n  this.blockSize = hash.blockSize / 8;                                                                                // 8782\n  this.outSize = hash.outSize / 8;                                                                                    // 8783\n  this.inner = null;                                                                                                  // 8784\n  this.outer = null;                                                                                                  // 8785\n                                                                                                                      // 8786\n  this._init(utils.toArray(key, enc));                                                                                // 8787\n}                                                                                                                     // 8788\nmodule.exports = Hmac;                                                                                                // 8789\n                                                                                                                      // 8790\nHmac.prototype._init = function init(key) {                                                                           // 8791\n  // Shorten key, if needed                                                                                           // 8792\n  if (key.length > this.blockSize)                                                                                    // 8793\n    key = new this.Hash().update(key).digest();                                                                       // 8794\n  assert(key.length <= this.blockSize);                                                                               // 8795\n                                                                                                                      // 8796\n  // Add padding to key                                                                                               // 8797\n  for (var i = key.length; i < this.blockSize; i++)                                                                   // 8798\n    key.push(0);                                                                                                      // 8799\n                                                                                                                      // 8800\n  for (var i = 0; i < key.length; i++)                                                                                // 8801\n    key[i] ^= 0x36;                                                                                                   // 8802\n  this.inner = new this.Hash().update(key);                                                                           // 8803\n                                                                                                                      // 8804\n  // 0x36 ^ 0x5c = 0x6a                                                                                               // 8805\n  for (var i = 0; i < key.length; i++)                                                                                // 8806\n    key[i] ^= 0x6a;                                                                                                   // 8807\n  this.outer = new this.Hash().update(key);                                                                           // 8808\n};                                                                                                                    // 8809\n                                                                                                                      // 8810\nHmac.prototype.update = function update(msg, enc) {                                                                   // 8811\n  this.inner.update(msg, enc);                                                                                        // 8812\n  return this;                                                                                                        // 8813\n};                                                                                                                    // 8814\n                                                                                                                      // 8815\nHmac.prototype.digest = function digest(enc) {                                                                        // 8816\n  this.outer.update(this.inner.digest());                                                                             // 8817\n  return this.outer.digest(enc);                                                                                      // 8818\n};                                                                                                                    // 8819\n                                                                                                                      // 8820\n},{\"../hash\":43}],46:[function(require,module,exports){                                                               // 8821\nvar hash = require('../hash');                                                                                        // 8822\nvar utils = hash.utils;                                                                                               // 8823\n                                                                                                                      // 8824\nvar rotl32 = utils.rotl32;                                                                                            // 8825\nvar sum32 = utils.sum32;                                                                                              // 8826\nvar sum32_3 = utils.sum32_3;                                                                                          // 8827\nvar sum32_4 = utils.sum32_4;                                                                                          // 8828\nvar BlockHash = hash.common.BlockHash;                                                                                // 8829\n                                                                                                                      // 8830\nfunction RIPEMD160() {                                                                                                // 8831\n  if (!(this instanceof RIPEMD160))                                                                                   // 8832\n    return new RIPEMD160();                                                                                           // 8833\n                                                                                                                      // 8834\n  BlockHash.call(this);                                                                                               // 8835\n                                                                                                                      // 8836\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];                                            // 8837\n  this.endian = 'little';                                                                                             // 8838\n}                                                                                                                     // 8839\nutils.inherits(RIPEMD160, BlockHash);                                                                                 // 8840\nexports.ripemd160 = RIPEMD160;                                                                                        // 8841\n                                                                                                                      // 8842\nRIPEMD160.blockSize = 512;                                                                                            // 8843\nRIPEMD160.outSize = 160;                                                                                              // 8844\nRIPEMD160.hmacStrength = 192;                                                                                         // 8845\nRIPEMD160.padLength = 64;                                                                                             // 8846\n                                                                                                                      // 8847\nRIPEMD160.prototype._update = function update(msg, start) {                                                           // 8848\n  var A = this.h[0];                                                                                                  // 8849\n  var B = this.h[1];                                                                                                  // 8850\n  var C = this.h[2];                                                                                                  // 8851\n  var D = this.h[3];                                                                                                  // 8852\n  var E = this.h[4];                                                                                                  // 8853\n  var Ah = A;                                                                                                         // 8854\n  var Bh = B;                                                                                                         // 8855\n  var Ch = C;                                                                                                         // 8856\n  var Dh = D;                                                                                                         // 8857\n  var Eh = E;                                                                                                         // 8858\n  for (var j = 0; j < 80; j++) {                                                                                      // 8859\n    var T = sum32(                                                                                                    // 8860\n      rotl32(                                                                                                         // 8861\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),                                                           // 8862\n        s[j]),                                                                                                        // 8863\n      E);                                                                                                             // 8864\n    A = E;                                                                                                            // 8865\n    E = D;                                                                                                            // 8866\n    D = rotl32(C, 10);                                                                                                // 8867\n    C = B;                                                                                                            // 8868\n    B = T;                                                                                                            // 8869\n    T = sum32(                                                                                                        // 8870\n      rotl32(                                                                                                         // 8871\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),                                                // 8872\n        sh[j]),                                                                                                       // 8873\n      Eh);                                                                                                            // 8874\n    Ah = Eh;                                                                                                          // 8875\n    Eh = Dh;                                                                                                          // 8876\n    Dh = rotl32(Ch, 10);                                                                                              // 8877\n    Ch = Bh;                                                                                                          // 8878\n    Bh = T;                                                                                                           // 8879\n  }                                                                                                                   // 8880\n  T = sum32_3(this.h[1], C, Dh);                                                                                      // 8881\n  this.h[1] = sum32_3(this.h[2], D, Eh);                                                                              // 8882\n  this.h[2] = sum32_3(this.h[3], E, Ah);                                                                              // 8883\n  this.h[3] = sum32_3(this.h[4], A, Bh);                                                                              // 8884\n  this.h[4] = sum32_3(this.h[0], B, Ch);                                                                              // 8885\n  this.h[0] = T;                                                                                                      // 8886\n};                                                                                                                    // 8887\n                                                                                                                      // 8888\nRIPEMD160.prototype._digest = function digest(enc) {                                                                  // 8889\n  if (enc === 'hex')                                                                                                  // 8890\n    return utils.toHex32(this.h, 'little');                                                                           // 8891\n  else                                                                                                                // 8892\n    return utils.split32(this.h, 'little');                                                                           // 8893\n};                                                                                                                    // 8894\n                                                                                                                      // 8895\nfunction f(j, x, y, z) {                                                                                              // 8896\n  if (j <= 15)                                                                                                        // 8897\n    return x ^ y ^ z;                                                                                                 // 8898\n  else if (j <= 31)                                                                                                   // 8899\n    return (x & y) | ((~x) & z);                                                                                      // 8900\n  else if (j <= 47)                                                                                                   // 8901\n    return (x | (~y)) ^ z;                                                                                            // 8902\n  else if (j <= 63)                                                                                                   // 8903\n    return (x & z) | (y & (~z));                                                                                      // 8904\n  else                                                                                                                // 8905\n    return x ^ (y | (~z));                                                                                            // 8906\n}                                                                                                                     // 8907\n                                                                                                                      // 8908\nfunction K(j) {                                                                                                       // 8909\n  if (j <= 15)                                                                                                        // 8910\n    return 0x00000000;                                                                                                // 8911\n  else if (j <= 31)                                                                                                   // 8912\n    return 0x5a827999;                                                                                                // 8913\n  else if (j <= 47)                                                                                                   // 8914\n    return 0x6ed9eba1;                                                                                                // 8915\n  else if (j <= 63)                                                                                                   // 8916\n    return 0x8f1bbcdc;                                                                                                // 8917\n  else                                                                                                                // 8918\n    return 0xa953fd4e;                                                                                                // 8919\n}                                                                                                                     // 8920\n                                                                                                                      // 8921\nfunction Kh(j) {                                                                                                      // 8922\n  if (j <= 15)                                                                                                        // 8923\n    return 0x50a28be6;                                                                                                // 8924\n  else if (j <= 31)                                                                                                   // 8925\n    return 0x5c4dd124;                                                                                                // 8926\n  else if (j <= 47)                                                                                                   // 8927\n    return 0x6d703ef3;                                                                                                // 8928\n  else if (j <= 63)                                                                                                   // 8929\n    return 0x7a6d76e9;                                                                                                // 8930\n  else                                                                                                                // 8931\n    return 0x00000000;                                                                                                // 8932\n}                                                                                                                     // 8933\n                                                                                                                      // 8934\nvar r = [                                                                                                             // 8935\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,                                                               // 8936\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,                                                               // 8937\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,                                                               // 8938\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,                                                               // 8939\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,                                                               // 8940\n];                                                                                                                    // 8941\n                                                                                                                      // 8942\nvar rh = [                                                                                                            // 8943\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,                                                               // 8944\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,                                                               // 8945\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,                                                               // 8946\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,                                                               // 8947\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11                                                                // 8948\n];                                                                                                                    // 8949\n                                                                                                                      // 8950\nvar s = [                                                                                                             // 8951\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,                                                             // 8952\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,                                                             // 8953\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,                                                             // 8954\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,                                                             // 8955\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,                                                             // 8956\n];                                                                                                                    // 8957\n                                                                                                                      // 8958\nvar sh = [                                                                                                            // 8959\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,                                                             // 8960\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,                                                             // 8961\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,                                                             // 8962\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,                                                             // 8963\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11                                                              // 8964\n];                                                                                                                    // 8965\n                                                                                                                      // 8966\n},{\"../hash\":43}],47:[function(require,module,exports){                                                               // 8967\nvar hash = require('../hash');                                                                                        // 8968\nvar utils = hash.utils;                                                                                               // 8969\nvar assert = utils.assert;                                                                                            // 8970\n                                                                                                                      // 8971\nvar rotr32 = utils.rotr32;                                                                                            // 8972\nvar rotl32 = utils.rotl32;                                                                                            // 8973\nvar sum32 = utils.sum32;                                                                                              // 8974\nvar sum32_4 = utils.sum32_4;                                                                                          // 8975\nvar sum32_5 = utils.sum32_5;                                                                                          // 8976\nvar rotr64_hi = utils.rotr64_hi;                                                                                      // 8977\nvar rotr64_lo = utils.rotr64_lo;                                                                                      // 8978\nvar shr64_hi = utils.shr64_hi;                                                                                        // 8979\nvar shr64_lo = utils.shr64_lo;                                                                                        // 8980\nvar sum64 = utils.sum64;                                                                                              // 8981\nvar sum64_hi = utils.sum64_hi;                                                                                        // 8982\nvar sum64_lo = utils.sum64_lo;                                                                                        // 8983\nvar sum64_4_hi = utils.sum64_4_hi;                                                                                    // 8984\nvar sum64_4_lo = utils.sum64_4_lo;                                                                                    // 8985\nvar sum64_5_hi = utils.sum64_5_hi;                                                                                    // 8986\nvar sum64_5_lo = utils.sum64_5_lo;                                                                                    // 8987\nvar BlockHash = hash.common.BlockHash;                                                                                // 8988\n                                                                                                                      // 8989\nvar sha256_K = [                                                                                                      // 8990\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,                                                                     // 8991\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,                                                                     // 8992\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,                                                                     // 8993\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,                                                                     // 8994\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,                                                                     // 8995\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,                                                                     // 8996\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,                                                                     // 8997\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,                                                                     // 8998\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,                                                                     // 8999\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,                                                                     // 9000\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,                                                                     // 9001\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,                                                                     // 9002\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,                                                                     // 9003\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,                                                                     // 9004\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,                                                                     // 9005\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2                                                                      // 9006\n];                                                                                                                    // 9007\n                                                                                                                      // 9008\nvar sha512_K = [                                                                                                      // 9009\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,                                                                     // 9010\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,                                                                     // 9011\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,                                                                     // 9012\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,                                                                     // 9013\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,                                                                     // 9014\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,                                                                     // 9015\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,                                                                     // 9016\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,                                                                     // 9017\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,                                                                     // 9018\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,                                                                     // 9019\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,                                                                     // 9020\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,                                                                     // 9021\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,                                                                     // 9022\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,                                                                     // 9023\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,                                                                     // 9024\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,                                                                     // 9025\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,                                                                     // 9026\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,                                                                     // 9027\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,                                                                     // 9028\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,                                                                     // 9029\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,                                                                     // 9030\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,                                                                     // 9031\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,                                                                     // 9032\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,                                                                     // 9033\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,                                                                     // 9034\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,                                                                     // 9035\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,                                                                     // 9036\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,                                                                     // 9037\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,                                                                     // 9038\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,                                                                     // 9039\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,                                                                     // 9040\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,                                                                     // 9041\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,                                                                     // 9042\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,                                                                     // 9043\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,                                                                     // 9044\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,                                                                     // 9045\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,                                                                     // 9046\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,                                                                     // 9047\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,                                                                     // 9048\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817                                                                      // 9049\n];                                                                                                                    // 9050\n                                                                                                                      // 9051\nvar sha1_K = [                                                                                                        // 9052\n  0x5A827999, 0x6ED9EBA1,                                                                                             // 9053\n  0x8F1BBCDC, 0xCA62C1D6                                                                                              // 9054\n];                                                                                                                    // 9055\n                                                                                                                      // 9056\nfunction SHA256() {                                                                                                   // 9057\n  if (!(this instanceof SHA256))                                                                                      // 9058\n    return new SHA256();                                                                                              // 9059\n                                                                                                                      // 9060\n  BlockHash.call(this);                                                                                               // 9061\n  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,                                                          // 9062\n             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];                                                        // 9063\n  this.k = sha256_K;                                                                                                  // 9064\n  this.W = new Array(64);                                                                                             // 9065\n}                                                                                                                     // 9066\nutils.inherits(SHA256, BlockHash);                                                                                    // 9067\nexports.sha256 = SHA256;                                                                                              // 9068\n                                                                                                                      // 9069\nSHA256.blockSize = 512;                                                                                               // 9070\nSHA256.outSize = 256;                                                                                                 // 9071\nSHA256.hmacStrength = 192;                                                                                            // 9072\nSHA256.padLength = 64;                                                                                                // 9073\n                                                                                                                      // 9074\nSHA256.prototype._update = function _update(msg, start) {                                                             // 9075\n  var W = this.W;                                                                                                     // 9076\n                                                                                                                      // 9077\n  for (var i = 0; i < 16; i++)                                                                                        // 9078\n    W[i] = msg[start + i];                                                                                            // 9079\n  for (; i < W.length; i++)                                                                                           // 9080\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);                                         // 9081\n                                                                                                                      // 9082\n  var a = this.h[0];                                                                                                  // 9083\n  var b = this.h[1];                                                                                                  // 9084\n  var c = this.h[2];                                                                                                  // 9085\n  var d = this.h[3];                                                                                                  // 9086\n  var e = this.h[4];                                                                                                  // 9087\n  var f = this.h[5];                                                                                                  // 9088\n  var g = this.h[6];                                                                                                  // 9089\n  var h = this.h[7];                                                                                                  // 9090\n                                                                                                                      // 9091\n  assert(this.k.length === W.length);                                                                                 // 9092\n  for (var i = 0; i < W.length; i++) {                                                                                // 9093\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);                                                   // 9094\n    var T2 = sum32(s0_256(a), maj32(a, b, c));                                                                        // 9095\n    h = g;                                                                                                            // 9096\n    g = f;                                                                                                            // 9097\n    f = e;                                                                                                            // 9098\n    e = sum32(d, T1);                                                                                                 // 9099\n    d = c;                                                                                                            // 9100\n    c = b;                                                                                                            // 9101\n    b = a;                                                                                                            // 9102\n    a = sum32(T1, T2);                                                                                                // 9103\n  }                                                                                                                   // 9104\n                                                                                                                      // 9105\n  this.h[0] = sum32(this.h[0], a);                                                                                    // 9106\n  this.h[1] = sum32(this.h[1], b);                                                                                    // 9107\n  this.h[2] = sum32(this.h[2], c);                                                                                    // 9108\n  this.h[3] = sum32(this.h[3], d);                                                                                    // 9109\n  this.h[4] = sum32(this.h[4], e);                                                                                    // 9110\n  this.h[5] = sum32(this.h[5], f);                                                                                    // 9111\n  this.h[6] = sum32(this.h[6], g);                                                                                    // 9112\n  this.h[7] = sum32(this.h[7], h);                                                                                    // 9113\n};                                                                                                                    // 9114\n                                                                                                                      // 9115\nSHA256.prototype._digest = function digest(enc) {                                                                     // 9116\n  if (enc === 'hex')                                                                                                  // 9117\n    return utils.toHex32(this.h, 'big');                                                                              // 9118\n  else                                                                                                                // 9119\n    return utils.split32(this.h, 'big');                                                                              // 9120\n};                                                                                                                    // 9121\n                                                                                                                      // 9122\nfunction SHA224() {                                                                                                   // 9123\n  if (!(this instanceof SHA224))                                                                                      // 9124\n    return new SHA224();                                                                                              // 9125\n                                                                                                                      // 9126\n  SHA256.call(this);                                                                                                  // 9127\n  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,                                                          // 9128\n             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];                                                        // 9129\n}                                                                                                                     // 9130\nutils.inherits(SHA224, SHA256);                                                                                       // 9131\nexports.sha224 = SHA224;                                                                                              // 9132\n                                                                                                                      // 9133\nSHA224.blockSize = 512;                                                                                               // 9134\nSHA224.outSize = 224;                                                                                                 // 9135\nSHA224.hmacStrength = 192;                                                                                            // 9136\nSHA224.padLength = 64;                                                                                                // 9137\n                                                                                                                      // 9138\nSHA224.prototype._digest = function digest(enc) {                                                                     // 9139\n  // Just truncate output                                                                                             // 9140\n  if (enc === 'hex')                                                                                                  // 9141\n    return utils.toHex32(this.h.slice(0, 7), 'big');                                                                  // 9142\n  else                                                                                                                // 9143\n    return utils.split32(this.h.slice(0, 7), 'big');                                                                  // 9144\n};                                                                                                                    // 9145\n                                                                                                                      // 9146\nfunction SHA512() {                                                                                                   // 9147\n  if (!(this instanceof SHA512))                                                                                      // 9148\n    return new SHA512();                                                                                              // 9149\n                                                                                                                      // 9150\n  BlockHash.call(this);                                                                                               // 9151\n  this.h = [ 0x6a09e667, 0xf3bcc908,                                                                                  // 9152\n             0xbb67ae85, 0x84caa73b,                                                                                  // 9153\n             0x3c6ef372, 0xfe94f82b,                                                                                  // 9154\n             0xa54ff53a, 0x5f1d36f1,                                                                                  // 9155\n             0x510e527f, 0xade682d1,                                                                                  // 9156\n             0x9b05688c, 0x2b3e6c1f,                                                                                  // 9157\n             0x1f83d9ab, 0xfb41bd6b,                                                                                  // 9158\n             0x5be0cd19, 0x137e2179 ];                                                                                // 9159\n  this.k = sha512_K;                                                                                                  // 9160\n  this.W = new Array(160);                                                                                            // 9161\n}                                                                                                                     // 9162\nutils.inherits(SHA512, BlockHash);                                                                                    // 9163\nexports.sha512 = SHA512;                                                                                              // 9164\n                                                                                                                      // 9165\nSHA512.blockSize = 1024;                                                                                              // 9166\nSHA512.outSize = 512;                                                                                                 // 9167\nSHA512.hmacStrength = 192;                                                                                            // 9168\nSHA512.padLength = 128;                                                                                               // 9169\n                                                                                                                      // 9170\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {                                                 // 9171\n  var W = this.W;                                                                                                     // 9172\n                                                                                                                      // 9173\n  // 32 x 32bit words                                                                                                 // 9174\n  for (var i = 0; i < 32; i++)                                                                                        // 9175\n    W[i] = msg[start + i];                                                                                            // 9176\n  for (; i < W.length; i += 2) {                                                                                      // 9177\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2                                                              // 9178\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);                                                                        // 9179\n    var c1_hi = W[i - 14];  // i - 7                                                                                  // 9180\n    var c1_lo = W[i - 13];                                                                                            // 9181\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15                                                           // 9182\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);                                                                      // 9183\n    var c3_hi = W[i - 32];  // i - 16                                                                                 // 9184\n    var c3_lo = W[i - 31];                                                                                            // 9185\n                                                                                                                      // 9186\n    W[i] = sum64_4_hi(c0_hi, c0_lo,                                                                                   // 9187\n                      c1_hi, c1_lo,                                                                                   // 9188\n                      c2_hi, c2_lo,                                                                                   // 9189\n                      c3_hi, c3_lo);                                                                                  // 9190\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,                                                                               // 9191\n                          c1_hi, c1_lo,                                                                               // 9192\n                          c2_hi, c2_lo,                                                                               // 9193\n                          c3_hi, c3_lo);                                                                              // 9194\n  }                                                                                                                   // 9195\n};                                                                                                                    // 9196\n                                                                                                                      // 9197\nSHA512.prototype._update = function _update(msg, start) {                                                             // 9198\n  this._prepareBlock(msg, start);                                                                                     // 9199\n                                                                                                                      // 9200\n  var W = this.W;                                                                                                     // 9201\n                                                                                                                      // 9202\n  var ah = this.h[0];                                                                                                 // 9203\n  var al = this.h[1];                                                                                                 // 9204\n  var bh = this.h[2];                                                                                                 // 9205\n  var bl = this.h[3];                                                                                                 // 9206\n  var ch = this.h[4];                                                                                                 // 9207\n  var cl = this.h[5];                                                                                                 // 9208\n  var dh = this.h[6];                                                                                                 // 9209\n  var dl = this.h[7];                                                                                                 // 9210\n  var eh = this.h[8];                                                                                                 // 9211\n  var el = this.h[9];                                                                                                 // 9212\n  var fh = this.h[10];                                                                                                // 9213\n  var fl = this.h[11];                                                                                                // 9214\n  var gh = this.h[12];                                                                                                // 9215\n  var gl = this.h[13];                                                                                                // 9216\n  var hh = this.h[14];                                                                                                // 9217\n  var hl = this.h[15];                                                                                                // 9218\n                                                                                                                      // 9219\n  assert(this.k.length === W.length);                                                                                 // 9220\n  for (var i = 0; i < W.length; i += 2) {                                                                             // 9221\n    var c0_hi = hh;                                                                                                   // 9222\n    var c0_lo = hl;                                                                                                   // 9223\n    var c1_hi = s1_512_hi(eh, el);                                                                                    // 9224\n    var c1_lo = s1_512_lo(eh, el);                                                                                    // 9225\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);                                                                      // 9226\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);                                                                      // 9227\n    var c3_hi = this.k[i];                                                                                            // 9228\n    var c3_lo = this.k[i + 1];                                                                                        // 9229\n    var c4_hi = W[i];                                                                                                 // 9230\n    var c4_lo = W[i + 1];                                                                                             // 9231\n                                                                                                                      // 9232\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo,                                                                              // 9233\n                           c1_hi, c1_lo,                                                                              // 9234\n                           c2_hi, c2_lo,                                                                              // 9235\n                           c3_hi, c3_lo,                                                                              // 9236\n                           c4_hi, c4_lo);                                                                             // 9237\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo,                                                                              // 9238\n                           c1_hi, c1_lo,                                                                              // 9239\n                           c2_hi, c2_lo,                                                                              // 9240\n                           c3_hi, c3_lo,                                                                              // 9241\n                           c4_hi, c4_lo);                                                                             // 9242\n                                                                                                                      // 9243\n    var c0_hi = s0_512_hi(ah, al);                                                                                    // 9244\n    var c0_lo = s0_512_lo(ah, al);                                                                                    // 9245\n    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);                                                                     // 9246\n    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);                                                                     // 9247\n                                                                                                                      // 9248\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);                                                                 // 9249\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);                                                                 // 9250\n                                                                                                                      // 9251\n    hh = gh;                                                                                                          // 9252\n    hl = gl;                                                                                                          // 9253\n                                                                                                                      // 9254\n    gh = fh;                                                                                                          // 9255\n    gl = fl;                                                                                                          // 9256\n                                                                                                                      // 9257\n    fh = eh;                                                                                                          // 9258\n    fl = el;                                                                                                          // 9259\n                                                                                                                      // 9260\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);                                                                              // 9261\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);                                                                              // 9262\n                                                                                                                      // 9263\n    dh = ch;                                                                                                          // 9264\n    dl = cl;                                                                                                          // 9265\n                                                                                                                      // 9266\n    ch = bh;                                                                                                          // 9267\n    cl = bl;                                                                                                          // 9268\n                                                                                                                      // 9269\n    bh = ah;                                                                                                          // 9270\n    bl = al;                                                                                                          // 9271\n                                                                                                                      // 9272\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);                                                                        // 9273\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);                                                                        // 9274\n  }                                                                                                                   // 9275\n                                                                                                                      // 9276\n  sum64(this.h, 0, ah, al);                                                                                           // 9277\n  sum64(this.h, 2, bh, bl);                                                                                           // 9278\n  sum64(this.h, 4, ch, cl);                                                                                           // 9279\n  sum64(this.h, 6, dh, dl);                                                                                           // 9280\n  sum64(this.h, 8, eh, el);                                                                                           // 9281\n  sum64(this.h, 10, fh, fl);                                                                                          // 9282\n  sum64(this.h, 12, gh, gl);                                                                                          // 9283\n  sum64(this.h, 14, hh, hl);                                                                                          // 9284\n};                                                                                                                    // 9285\n                                                                                                                      // 9286\nSHA512.prototype._digest = function digest(enc) {                                                                     // 9287\n  if (enc === 'hex')                                                                                                  // 9288\n    return utils.toHex32(this.h, 'big');                                                                              // 9289\n  else                                                                                                                // 9290\n    return utils.split32(this.h, 'big');                                                                              // 9291\n};                                                                                                                    // 9292\n                                                                                                                      // 9293\nfunction SHA384() {                                                                                                   // 9294\n  if (!(this instanceof SHA384))                                                                                      // 9295\n    return new SHA384();                                                                                              // 9296\n                                                                                                                      // 9297\n  SHA512.call(this);                                                                                                  // 9298\n  this.h = [ 0xcbbb9d5d, 0xc1059ed8,                                                                                  // 9299\n             0x629a292a, 0x367cd507,                                                                                  // 9300\n             0x9159015a, 0x3070dd17,                                                                                  // 9301\n             0x152fecd8, 0xf70e5939,                                                                                  // 9302\n             0x67332667, 0xffc00b31,                                                                                  // 9303\n             0x8eb44a87, 0x68581511,                                                                                  // 9304\n             0xdb0c2e0d, 0x64f98fa7,                                                                                  // 9305\n             0x47b5481d, 0xbefa4fa4 ];                                                                                // 9306\n}                                                                                                                     // 9307\nutils.inherits(SHA384, SHA512);                                                                                       // 9308\nexports.sha384 = SHA384;                                                                                              // 9309\n                                                                                                                      // 9310\nSHA384.blockSize = 1024;                                                                                              // 9311\nSHA384.outSize = 384;                                                                                                 // 9312\nSHA384.hmacStrength = 192;                                                                                            // 9313\nSHA384.padLength = 128;                                                                                               // 9314\n                                                                                                                      // 9315\nSHA384.prototype._digest = function digest(enc) {                                                                     // 9316\n  if (enc === 'hex')                                                                                                  // 9317\n    return utils.toHex32(this.h.slice(0, 12), 'big');                                                                 // 9318\n  else                                                                                                                // 9319\n    return utils.split32(this.h.slice(0, 12), 'big');                                                                 // 9320\n};                                                                                                                    // 9321\n                                                                                                                      // 9322\nfunction SHA1() {                                                                                                     // 9323\n  if (!(this instanceof SHA1))                                                                                        // 9324\n    return new SHA1();                                                                                                // 9325\n                                                                                                                      // 9326\n  BlockHash.call(this);                                                                                               // 9327\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,                                                                      // 9328\n             0x10325476, 0xc3d2e1f0 ];                                                                                // 9329\n  this.W = new Array(80);                                                                                             // 9330\n}                                                                                                                     // 9331\n                                                                                                                      // 9332\nutils.inherits(SHA1, BlockHash);                                                                                      // 9333\nexports.sha1 = SHA1;                                                                                                  // 9334\n                                                                                                                      // 9335\nSHA1.blockSize = 512;                                                                                                 // 9336\nSHA1.outSize = 160;                                                                                                   // 9337\nSHA1.hmacStrength = 80;                                                                                               // 9338\nSHA1.padLength = 64;                                                                                                  // 9339\n                                                                                                                      // 9340\nSHA1.prototype._update = function _update(msg, start) {                                                               // 9341\n  var W = this.W;                                                                                                     // 9342\n                                                                                                                      // 9343\n  for (var i = 0; i < 16; i++)                                                                                        // 9344\n    W[i] = msg[start + i];                                                                                            // 9345\n                                                                                                                      // 9346\n  for(; i < W.length; i++)                                                                                            // 9347\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);                                                    // 9348\n                                                                                                                      // 9349\n  var a = this.h[0];                                                                                                  // 9350\n  var b = this.h[1];                                                                                                  // 9351\n  var c = this.h[2];                                                                                                  // 9352\n  var d = this.h[3];                                                                                                  // 9353\n  var e = this.h[4];                                                                                                  // 9354\n                                                                                                                      // 9355\n  for (var i = 0; i < W.length; i++) {                                                                                // 9356\n    var s = ~~(i / 20);                                                                                               // 9357\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);                                              // 9358\n    e = d;                                                                                                            // 9359\n    d = c;                                                                                                            // 9360\n    c = rotl32(b, 30);                                                                                                // 9361\n    b = a;                                                                                                            // 9362\n    a = t;                                                                                                            // 9363\n  }                                                                                                                   // 9364\n                                                                                                                      // 9365\n  this.h[0] = sum32(this.h[0], a);                                                                                    // 9366\n  this.h[1] = sum32(this.h[1], b);                                                                                    // 9367\n  this.h[2] = sum32(this.h[2], c);                                                                                    // 9368\n  this.h[3] = sum32(this.h[3], d);                                                                                    // 9369\n  this.h[4] = sum32(this.h[4], e);                                                                                    // 9370\n};                                                                                                                    // 9371\n                                                                                                                      // 9372\nSHA1.prototype._digest = function digest(enc) {                                                                       // 9373\n  if (enc === 'hex')                                                                                                  // 9374\n    return utils.toHex32(this.h, 'big');                                                                              // 9375\n  else                                                                                                                // 9376\n    return utils.split32(this.h, 'big');                                                                              // 9377\n};                                                                                                                    // 9378\n                                                                                                                      // 9379\nfunction ch32(x, y, z) {                                                                                              // 9380\n  return (x & y) ^ ((~x) & z);                                                                                        // 9381\n}                                                                                                                     // 9382\n                                                                                                                      // 9383\nfunction maj32(x, y, z) {                                                                                             // 9384\n  return (x & y) ^ (x & z) ^ (y & z);                                                                                 // 9385\n}                                                                                                                     // 9386\n                                                                                                                      // 9387\nfunction p32(x, y, z) {                                                                                               // 9388\n  return x ^ y ^ z;                                                                                                   // 9389\n}                                                                                                                     // 9390\n                                                                                                                      // 9391\nfunction s0_256(x) {                                                                                                  // 9392\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);                                                                // 9393\n}                                                                                                                     // 9394\n                                                                                                                      // 9395\nfunction s1_256(x) {                                                                                                  // 9396\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);                                                                // 9397\n}                                                                                                                     // 9398\n                                                                                                                      // 9399\nfunction g0_256(x) {                                                                                                  // 9400\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);                                                                    // 9401\n}                                                                                                                     // 9402\n                                                                                                                      // 9403\nfunction g1_256(x) {                                                                                                  // 9404\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);                                                                  // 9405\n}                                                                                                                     // 9406\n                                                                                                                      // 9407\nfunction ft_1(s, x, y, z) {                                                                                           // 9408\n  if (s === 0)                                                                                                        // 9409\n    return ch32(x, y, z);                                                                                             // 9410\n  if (s === 1 || s === 3)                                                                                             // 9411\n    return p32(x, y, z);                                                                                              // 9412\n  if (s === 2)                                                                                                        // 9413\n    return maj32(x, y, z);                                                                                            // 9414\n}                                                                                                                     // 9415\n                                                                                                                      // 9416\nfunction ch64_hi(xh, xl, yh, yl, zh, zl) {                                                                            // 9417\n  var r = (xh & yh) ^ ((~xh) & zh);                                                                                   // 9418\n  if (r < 0)                                                                                                          // 9419\n    r += 0x100000000;                                                                                                 // 9420\n  return r;                                                                                                           // 9421\n}                                                                                                                     // 9422\n                                                                                                                      // 9423\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {                                                                            // 9424\n  var r = (xl & yl) ^ ((~xl) & zl);                                                                                   // 9425\n  if (r < 0)                                                                                                          // 9426\n    r += 0x100000000;                                                                                                 // 9427\n  return r;                                                                                                           // 9428\n}                                                                                                                     // 9429\n                                                                                                                      // 9430\nfunction maj64_hi(xh, xl, yh, yl, zh, zl) {                                                                           // 9431\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);                                                                          // 9432\n  if (r < 0)                                                                                                          // 9433\n    r += 0x100000000;                                                                                                 // 9434\n  return r;                                                                                                           // 9435\n}                                                                                                                     // 9436\n                                                                                                                      // 9437\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {                                                                           // 9438\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);                                                                          // 9439\n  if (r < 0)                                                                                                          // 9440\n    r += 0x100000000;                                                                                                 // 9441\n  return r;                                                                                                           // 9442\n}                                                                                                                     // 9443\n                                                                                                                      // 9444\nfunction s0_512_hi(xh, xl) {                                                                                          // 9445\n  var c0_hi = rotr64_hi(xh, xl, 28);                                                                                  // 9446\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34                                                                            // 9447\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39                                                                            // 9448\n                                                                                                                      // 9449\n  var r = c0_hi ^ c1_hi ^ c2_hi;                                                                                      // 9450\n  if (r < 0)                                                                                                          // 9451\n    r += 0x100000000;                                                                                                 // 9452\n  return r;                                                                                                           // 9453\n}                                                                                                                     // 9454\n                                                                                                                      // 9455\nfunction s0_512_lo(xh, xl) {                                                                                          // 9456\n  var c0_lo = rotr64_lo(xh, xl, 28);                                                                                  // 9457\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34                                                                            // 9458\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39                                                                            // 9459\n                                                                                                                      // 9460\n  var r = c0_lo ^ c1_lo ^ c2_lo;                                                                                      // 9461\n  if (r < 0)                                                                                                          // 9462\n    r += 0x100000000;                                                                                                 // 9463\n  return r;                                                                                                           // 9464\n}                                                                                                                     // 9465\n                                                                                                                      // 9466\nfunction s1_512_hi(xh, xl) {                                                                                          // 9467\n  var c0_hi = rotr64_hi(xh, xl, 14);                                                                                  // 9468\n  var c1_hi = rotr64_hi(xh, xl, 18);                                                                                  // 9469\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41                                                                            // 9470\n                                                                                                                      // 9471\n  var r = c0_hi ^ c1_hi ^ c2_hi;                                                                                      // 9472\n  if (r < 0)                                                                                                          // 9473\n    r += 0x100000000;                                                                                                 // 9474\n  return r;                                                                                                           // 9475\n}                                                                                                                     // 9476\n                                                                                                                      // 9477\nfunction s1_512_lo(xh, xl) {                                                                                          // 9478\n  var c0_lo = rotr64_lo(xh, xl, 14);                                                                                  // 9479\n  var c1_lo = rotr64_lo(xh, xl, 18);                                                                                  // 9480\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41                                                                            // 9481\n                                                                                                                      // 9482\n  var r = c0_lo ^ c1_lo ^ c2_lo;                                                                                      // 9483\n  if (r < 0)                                                                                                          // 9484\n    r += 0x100000000;                                                                                                 // 9485\n  return r;                                                                                                           // 9486\n}                                                                                                                     // 9487\n                                                                                                                      // 9488\nfunction g0_512_hi(xh, xl) {                                                                                          // 9489\n  var c0_hi = rotr64_hi(xh, xl, 1);                                                                                   // 9490\n  var c1_hi = rotr64_hi(xh, xl, 8);                                                                                   // 9491\n  var c2_hi = shr64_hi(xh, xl, 7);                                                                                    // 9492\n                                                                                                                      // 9493\n  var r = c0_hi ^ c1_hi ^ c2_hi;                                                                                      // 9494\n  if (r < 0)                                                                                                          // 9495\n    r += 0x100000000;                                                                                                 // 9496\n  return r;                                                                                                           // 9497\n}                                                                                                                     // 9498\n                                                                                                                      // 9499\nfunction g0_512_lo(xh, xl) {                                                                                          // 9500\n  var c0_lo = rotr64_lo(xh, xl, 1);                                                                                   // 9501\n  var c1_lo = rotr64_lo(xh, xl, 8);                                                                                   // 9502\n  var c2_lo = shr64_lo(xh, xl, 7);                                                                                    // 9503\n                                                                                                                      // 9504\n  var r = c0_lo ^ c1_lo ^ c2_lo;                                                                                      // 9505\n  if (r < 0)                                                                                                          // 9506\n    r += 0x100000000;                                                                                                 // 9507\n  return r;                                                                                                           // 9508\n}                                                                                                                     // 9509\n                                                                                                                      // 9510\nfunction g1_512_hi(xh, xl) {                                                                                          // 9511\n  var c0_hi = rotr64_hi(xh, xl, 19);                                                                                  // 9512\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61                                                                           // 9513\n  var c2_hi = shr64_hi(xh, xl, 6);                                                                                    // 9514\n                                                                                                                      // 9515\n  var r = c0_hi ^ c1_hi ^ c2_hi;                                                                                      // 9516\n  if (r < 0)                                                                                                          // 9517\n    r += 0x100000000;                                                                                                 // 9518\n  return r;                                                                                                           // 9519\n}                                                                                                                     // 9520\n                                                                                                                      // 9521\nfunction g1_512_lo(xh, xl) {                                                                                          // 9522\n  var c0_lo = rotr64_lo(xh, xl, 19);                                                                                  // 9523\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61                                                                           // 9524\n  var c2_lo = shr64_lo(xh, xl, 6);                                                                                    // 9525\n                                                                                                                      // 9526\n  var r = c0_lo ^ c1_lo ^ c2_lo;                                                                                      // 9527\n  if (r < 0)                                                                                                          // 9528\n    r += 0x100000000;                                                                                                 // 9529\n  return r;                                                                                                           // 9530\n}                                                                                                                     // 9531\n                                                                                                                      // 9532\n},{\"../hash\":43}],48:[function(require,module,exports){                                                               // 9533\nvar utils = exports;                                                                                                  // 9534\nvar inherits = require('inherits');                                                                                   // 9535\n                                                                                                                      // 9536\nfunction toArray(msg, enc) {                                                                                          // 9537\n  if (Array.isArray(msg))                                                                                             // 9538\n    return msg.slice();                                                                                               // 9539\n  if (!msg)                                                                                                           // 9540\n    return [];                                                                                                        // 9541\n  var res = [];                                                                                                       // 9542\n  if (typeof msg === 'string') {                                                                                      // 9543\n    if (!enc) {                                                                                                       // 9544\n      for (var i = 0; i < msg.length; i++) {                                                                          // 9545\n        var c = msg.charCodeAt(i);                                                                                    // 9546\n        var hi = c >> 8;                                                                                              // 9547\n        var lo = c & 0xff;                                                                                            // 9548\n        if (hi)                                                                                                       // 9549\n          res.push(hi, lo);                                                                                           // 9550\n        else                                                                                                          // 9551\n          res.push(lo);                                                                                               // 9552\n      }                                                                                                               // 9553\n    } else if (enc === 'hex') {                                                                                       // 9554\n      msg = msg.replace(/[^a-z0-9]+/ig, '');                                                                          // 9555\n      if (msg.length % 2 !== 0)                                                                                       // 9556\n        msg = '0' + msg;                                                                                              // 9557\n      for (var i = 0; i < msg.length; i += 2)                                                                         // 9558\n        res.push(parseInt(msg[i] + msg[i + 1], 16));                                                                  // 9559\n    }                                                                                                                 // 9560\n  } else {                                                                                                            // 9561\n    for (var i = 0; i < msg.length; i++)                                                                              // 9562\n      res[i] = msg[i] | 0;                                                                                            // 9563\n  }                                                                                                                   // 9564\n  return res;                                                                                                         // 9565\n}                                                                                                                     // 9566\nutils.toArray = toArray;                                                                                              // 9567\n                                                                                                                      // 9568\nfunction toHex(msg) {                                                                                                 // 9569\n  var res = '';                                                                                                       // 9570\n  for (var i = 0; i < msg.length; i++)                                                                                // 9571\n    res += zero2(msg[i].toString(16));                                                                                // 9572\n  return res;                                                                                                         // 9573\n}                                                                                                                     // 9574\nutils.toHex = toHex;                                                                                                  // 9575\n                                                                                                                      // 9576\nfunction htonl(w) {                                                                                                   // 9577\n  var res = (w >>> 24) |                                                                                              // 9578\n            ((w >>> 8) & 0xff00) |                                                                                    // 9579\n            ((w << 8) & 0xff0000) |                                                                                   // 9580\n            ((w & 0xff) << 24);                                                                                       // 9581\n  return res >>> 0;                                                                                                   // 9582\n}                                                                                                                     // 9583\nutils.htonl = htonl;                                                                                                  // 9584\n                                                                                                                      // 9585\nfunction toHex32(msg, endian) {                                                                                       // 9586\n  var res = '';                                                                                                       // 9587\n  for (var i = 0; i < msg.length; i++) {                                                                              // 9588\n    var w = msg[i];                                                                                                   // 9589\n    if (endian === 'little')                                                                                          // 9590\n      w = htonl(w);                                                                                                   // 9591\n    res += zero8(w.toString(16));                                                                                     // 9592\n  }                                                                                                                   // 9593\n  return res;                                                                                                         // 9594\n}                                                                                                                     // 9595\nutils.toHex32 = toHex32;                                                                                              // 9596\n                                                                                                                      // 9597\nfunction zero2(word) {                                                                                                // 9598\n  if (word.length === 1)                                                                                              // 9599\n    return '0' + word;                                                                                                // 9600\n  else                                                                                                                // 9601\n    return word;                                                                                                      // 9602\n}                                                                                                                     // 9603\nutils.zero2 = zero2;                                                                                                  // 9604\n                                                                                                                      // 9605\nfunction zero8(word) {                                                                                                // 9606\n  if (word.length === 7)                                                                                              // 9607\n    return '0' + word;                                                                                                // 9608\n  else if (word.length === 6)                                                                                         // 9609\n    return '00' + word;                                                                                               // 9610\n  else if (word.length === 5)                                                                                         // 9611\n    return '000' + word;                                                                                              // 9612\n  else if (word.length === 4)                                                                                         // 9613\n    return '0000' + word;                                                                                             // 9614\n  else if (word.length === 3)                                                                                         // 9615\n    return '00000' + word;                                                                                            // 9616\n  else if (word.length === 2)                                                                                         // 9617\n    return '000000' + word;                                                                                           // 9618\n  else if (word.length === 1)                                                                                         // 9619\n    return '0000000' + word;                                                                                          // 9620\n  else                                                                                                                // 9621\n    return word;                                                                                                      // 9622\n}                                                                                                                     // 9623\nutils.zero8 = zero8;                                                                                                  // 9624\n                                                                                                                      // 9625\nfunction join32(msg, start, end, endian) {                                                                            // 9626\n  var len = end - start;                                                                                              // 9627\n  assert(len % 4 === 0);                                                                                              // 9628\n  var res = new Array(len / 4);                                                                                       // 9629\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {                                                           // 9630\n    var w;                                                                                                            // 9631\n    if (endian === 'big')                                                                                             // 9632\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];                                       // 9633\n    else                                                                                                              // 9634\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];                                       // 9635\n    res[i] = w >>> 0;                                                                                                 // 9636\n  }                                                                                                                   // 9637\n  return res;                                                                                                         // 9638\n}                                                                                                                     // 9639\nutils.join32 = join32;                                                                                                // 9640\n                                                                                                                      // 9641\nfunction split32(msg, endian) {                                                                                       // 9642\n  var res = new Array(msg.length * 4);                                                                                // 9643\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {                                                               // 9644\n    var m = msg[i];                                                                                                   // 9645\n    if (endian === 'big') {                                                                                           // 9646\n      res[k] = m >>> 24;                                                                                              // 9647\n      res[k + 1] = (m >>> 16) & 0xff;                                                                                 // 9648\n      res[k + 2] = (m >>> 8) & 0xff;                                                                                  // 9649\n      res[k + 3] = m & 0xff;                                                                                          // 9650\n    } else {                                                                                                          // 9651\n      res[k + 3] = m >>> 24;                                                                                          // 9652\n      res[k + 2] = (m >>> 16) & 0xff;                                                                                 // 9653\n      res[k + 1] = (m >>> 8) & 0xff;                                                                                  // 9654\n      res[k] = m & 0xff;                                                                                              // 9655\n    }                                                                                                                 // 9656\n  }                                                                                                                   // 9657\n  return res;                                                                                                         // 9658\n}                                                                                                                     // 9659\nutils.split32 = split32;                                                                                              // 9660\n                                                                                                                      // 9661\nfunction rotr32(w, b) {                                                                                               // 9662\n  return (w >>> b) | (w << (32 - b));                                                                                 // 9663\n}                                                                                                                     // 9664\nutils.rotr32 = rotr32;                                                                                                // 9665\n                                                                                                                      // 9666\nfunction rotl32(w, b) {                                                                                               // 9667\n  return (w << b) | (w >>> (32 - b));                                                                                 // 9668\n}                                                                                                                     // 9669\nutils.rotl32 = rotl32;                                                                                                // 9670\n                                                                                                                      // 9671\nfunction sum32(a, b) {                                                                                                // 9672\n  return (a + b) >>> 0;                                                                                               // 9673\n}                                                                                                                     // 9674\nutils.sum32 = sum32;                                                                                                  // 9675\n                                                                                                                      // 9676\nfunction sum32_3(a, b, c) {                                                                                           // 9677\n  return (a + b + c) >>> 0;                                                                                           // 9678\n}                                                                                                                     // 9679\nutils.sum32_3 = sum32_3;                                                                                              // 9680\n                                                                                                                      // 9681\nfunction sum32_4(a, b, c, d) {                                                                                        // 9682\n  return (a + b + c + d) >>> 0;                                                                                       // 9683\n}                                                                                                                     // 9684\nutils.sum32_4 = sum32_4;                                                                                              // 9685\n                                                                                                                      // 9686\nfunction sum32_5(a, b, c, d, e) {                                                                                     // 9687\n  return (a + b + c + d + e) >>> 0;                                                                                   // 9688\n}                                                                                                                     // 9689\nutils.sum32_5 = sum32_5;                                                                                              // 9690\n                                                                                                                      // 9691\nfunction assert(cond, msg) {                                                                                          // 9692\n  if (!cond)                                                                                                          // 9693\n    throw new Error(msg || 'Assertion failed');                                                                       // 9694\n}                                                                                                                     // 9695\nutils.assert = assert;                                                                                                // 9696\n                                                                                                                      // 9697\nutils.inherits = inherits;                                                                                            // 9698\n                                                                                                                      // 9699\nfunction sum64(buf, pos, ah, al) {                                                                                    // 9700\n  var bh = buf[pos];                                                                                                  // 9701\n  var bl = buf[pos + 1];                                                                                              // 9702\n                                                                                                                      // 9703\n  var lo = (al + bl) >>> 0;                                                                                           // 9704\n  var hi = (lo < al ? 1 : 0) + ah + bh;                                                                               // 9705\n  buf[pos] = hi >>> 0;                                                                                                // 9706\n  buf[pos + 1] = lo;                                                                                                  // 9707\n}                                                                                                                     // 9708\nexports.sum64 = sum64;                                                                                                // 9709\n                                                                                                                      // 9710\nfunction sum64_hi(ah, al, bh, bl) {                                                                                   // 9711\n  var lo = (al + bl) >>> 0;                                                                                           // 9712\n  var hi = (lo < al ? 1 : 0) + ah + bh;                                                                               // 9713\n  return hi >>> 0;                                                                                                    // 9714\n};                                                                                                                    // 9715\nexports.sum64_hi = sum64_hi;                                                                                          // 9716\n                                                                                                                      // 9717\nfunction sum64_lo(ah, al, bh, bl) {                                                                                   // 9718\n  var lo = al + bl;                                                                                                   // 9719\n  return lo >>> 0;                                                                                                    // 9720\n};                                                                                                                    // 9721\nexports.sum64_lo = sum64_lo;                                                                                          // 9722\n                                                                                                                      // 9723\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {                                                                 // 9724\n  var carry = 0;                                                                                                      // 9725\n  var lo = al;                                                                                                        // 9726\n  lo = (lo + bl) >>> 0;                                                                                               // 9727\n  carry += lo < al ? 1 : 0;                                                                                           // 9728\n  lo = (lo + cl) >>> 0;                                                                                               // 9729\n  carry += lo < cl ? 1 : 0;                                                                                           // 9730\n  lo = (lo + dl) >>> 0;                                                                                               // 9731\n  carry += lo < dl ? 1 : 0;                                                                                           // 9732\n                                                                                                                      // 9733\n  var hi = ah + bh + ch + dh + carry;                                                                                 // 9734\n  return hi >>> 0;                                                                                                    // 9735\n};                                                                                                                    // 9736\nexports.sum64_4_hi = sum64_4_hi;                                                                                      // 9737\n                                                                                                                      // 9738\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {                                                                 // 9739\n  var lo = al + bl + cl + dl;                                                                                         // 9740\n  return lo >>> 0;                                                                                                    // 9741\n};                                                                                                                    // 9742\nexports.sum64_4_lo = sum64_4_lo;                                                                                      // 9743\n                                                                                                                      // 9744\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {                                                         // 9745\n  var carry = 0;                                                                                                      // 9746\n  var lo = al;                                                                                                        // 9747\n  lo = (lo + bl) >>> 0;                                                                                               // 9748\n  carry += lo < al ? 1 : 0;                                                                                           // 9749\n  lo = (lo + cl) >>> 0;                                                                                               // 9750\n  carry += lo < cl ? 1 : 0;                                                                                           // 9751\n  lo = (lo + dl) >>> 0;                                                                                               // 9752\n  carry += lo < dl ? 1 : 0;                                                                                           // 9753\n  lo = (lo + el) >>> 0;                                                                                               // 9754\n  carry += lo < el ? 1 : 0;                                                                                           // 9755\n                                                                                                                      // 9756\n  var hi = ah + bh + ch + dh + eh + carry;                                                                            // 9757\n  return hi >>> 0;                                                                                                    // 9758\n};                                                                                                                    // 9759\nexports.sum64_5_hi = sum64_5_hi;                                                                                      // 9760\n                                                                                                                      // 9761\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {                                                         // 9762\n  var lo = al + bl + cl + dl + el;                                                                                    // 9763\n                                                                                                                      // 9764\n  return lo >>> 0;                                                                                                    // 9765\n};                                                                                                                    // 9766\nexports.sum64_5_lo = sum64_5_lo;                                                                                      // 9767\n                                                                                                                      // 9768\nfunction rotr64_hi(ah, al, num) {                                                                                     // 9769\n  var r = (al << (32 - num)) | (ah >>> num);                                                                          // 9770\n  return r >>> 0;                                                                                                     // 9771\n};                                                                                                                    // 9772\nexports.rotr64_hi = rotr64_hi;                                                                                        // 9773\n                                                                                                                      // 9774\nfunction rotr64_lo(ah, al, num) {                                                                                     // 9775\n  var r = (ah << (32 - num)) | (al >>> num);                                                                          // 9776\n  return r >>> 0;                                                                                                     // 9777\n};                                                                                                                    // 9778\nexports.rotr64_lo = rotr64_lo;                                                                                        // 9779\n                                                                                                                      // 9780\nfunction shr64_hi(ah, al, num) {                                                                                      // 9781\n  return ah >>> num;                                                                                                  // 9782\n};                                                                                                                    // 9783\nexports.shr64_hi = shr64_hi;                                                                                          // 9784\n                                                                                                                      // 9785\nfunction shr64_lo(ah, al, num) {                                                                                      // 9786\n  var r = (ah << (32 - num)) | (al >>> num);                                                                          // 9787\n  return r >>> 0;                                                                                                     // 9788\n};                                                                                                                    // 9789\nexports.shr64_lo = shr64_lo;                                                                                          // 9790\n                                                                                                                      // 9791\n},{\"inherits\":144}],49:[function(require,module,exports){                                                             // 9792\nmodule.exports={                                                                                                      // 9793\n  \"name\": \"elliptic\",                                                                                                 // 9794\n  \"version\": \"1.0.1\",                                                                                                 // 9795\n  \"description\": \"EC cryptography\",                                                                                   // 9796\n  \"main\": \"lib/elliptic.js\",                                                                                          // 9797\n  \"scripts\": {                                                                                                        // 9798\n    \"test\": \"mocha --reporter=spec test/*-test.js\"                                                                    // 9799\n  },                                                                                                                  // 9800\n  \"repository\": {                                                                                                     // 9801\n    \"type\": \"git\",                                                                                                    // 9802\n    \"url\": \"git@github.com:indutny/elliptic\"                                                                          // 9803\n  },                                                                                                                  // 9804\n  \"keywords\": [                                                                                                       // 9805\n    \"EC\",                                                                                                             // 9806\n    \"Elliptic\",                                                                                                       // 9807\n    \"curve\",                                                                                                          // 9808\n    \"Cryptography\"                                                                                                    // 9809\n  ],                                                                                                                  // 9810\n  \"author\": {                                                                                                         // 9811\n    \"name\": \"Fedor Indutny\",                                                                                          // 9812\n    \"email\": \"fedor@indutny.com\"                                                                                      // 9813\n  },                                                                                                                  // 9814\n  \"license\": \"MIT\",                                                                                                   // 9815\n  \"bugs\": {                                                                                                           // 9816\n    \"url\": \"https://github.com/indutny/elliptic/issues\"                                                               // 9817\n  },                                                                                                                  // 9818\n  \"homepage\": \"https://github.com/indutny/elliptic\",                                                                  // 9819\n  \"devDependencies\": {                                                                                                // 9820\n    \"browserify\": \"^3.44.2\",                                                                                          // 9821\n    \"mocha\": \"^1.18.2\",                                                                                               // 9822\n    \"uglify-js\": \"^2.4.13\"                                                                                            // 9823\n  },                                                                                                                  // 9824\n  \"dependencies\": {                                                                                                   // 9825\n    \"bn.js\": \"^1.0.0\",                                                                                                // 9826\n    \"brorand\": \"^1.0.1\",                                                                                              // 9827\n    \"hash.js\": \"^1.0.0\",                                                                                              // 9828\n    \"inherits\": \"^2.0.1\"                                                                                              // 9829\n  },                                                                                                                  // 9830\n  \"gitHead\": \"17dc013761dd1efcfb868e2b06b0b897627b40be\",                                                              // 9831\n  \"_id\": \"elliptic@1.0.1\",                                                                                            // 9832\n  \"_shasum\": \"d180376b66a17d74995c837796362ac4d22aefe3\",                                                              // 9833\n  \"_from\": \"elliptic@1.0.1\",                                                                                          // 9834\n  \"_npmVersion\": \"1.4.28\",                                                                                            // 9835\n  \"_npmUser\": {                                                                                                       // 9836\n    \"name\": \"indutny\",                                                                                                // 9837\n    \"email\": \"fedor@indutny.com\"                                                                                      // 9838\n  },                                                                                                                  // 9839\n  \"maintainers\": [                                                                                                    // 9840\n    {                                                                                                                 // 9841\n      \"name\": \"indutny\",                                                                                              // 9842\n      \"email\": \"fedor@indutny.com\"                                                                                    // 9843\n    }                                                                                                                 // 9844\n  ],                                                                                                                  // 9845\n  \"dist\": {                                                                                                           // 9846\n    \"shasum\": \"d180376b66a17d74995c837796362ac4d22aefe3\",                                                             // 9847\n    \"tarball\": \"http://registry.npmjs.org/elliptic/-/elliptic-1.0.1.tgz\"                                              // 9848\n  },                                                                                                                  // 9849\n  \"directories\": {},                                                                                                  // 9850\n  \"_resolved\": \"https://registry.npmjs.org/elliptic/-/elliptic-1.0.1.tgz\",                                            // 9851\n  \"readme\": \"ERROR: No README data found!\"                                                                            // 9852\n}                                                                                                                     // 9853\n                                                                                                                      // 9854\n},{}],50:[function(require,module,exports){                                                                           // 9855\n(function (Buffer){                                                                                                   // 9856\nvar createHash = require('create-hash');                                                                              // 9857\nmodule.exports = function evp(password, salt, keyLen) {                                                               // 9858\n  keyLen = keyLen/8;                                                                                                  // 9859\n  var ki = 0;                                                                                                         // 9860\n  var ii = 0;                                                                                                         // 9861\n  var key = new Buffer(keyLen);                                                                                       // 9862\n  var addmd = 0;                                                                                                      // 9863\n  var md, md_buf;                                                                                                     // 9864\n  var i;                                                                                                              // 9865\n  while (true) {                                                                                                      // 9866\n    md = createHash('md5');                                                                                           // 9867\n    if(addmd++ > 0) {                                                                                                 // 9868\n       md.update(md_buf);                                                                                             // 9869\n    }                                                                                                                 // 9870\n    md.update(password);                                                                                              // 9871\n    md.update(salt);                                                                                                  // 9872\n    md_buf = md.digest();                                                                                             // 9873\n    i = 0;                                                                                                            // 9874\n    if(keyLen > 0) {                                                                                                  // 9875\n      while(true) {                                                                                                   // 9876\n        if(keyLen === 0) {                                                                                            // 9877\n          break;                                                                                                      // 9878\n        }                                                                                                             // 9879\n        if(i === md_buf.length) {                                                                                     // 9880\n          break;                                                                                                      // 9881\n        }                                                                                                             // 9882\n        key[ki++] = md_buf[i++];                                                                                      // 9883\n        keyLen--;                                                                                                     // 9884\n       }                                                                                                              // 9885\n    }                                                                                                                 // 9886\n   if(keyLen === 0) {                                                                                                 // 9887\n      break;                                                                                                          // 9888\n    }                                                                                                                 // 9889\n  }                                                                                                                   // 9890\n  for(i=0;i<md_buf.length;i++) {                                                                                      // 9891\n    md_buf[i] = 0;                                                                                                    // 9892\n  }                                                                                                                   // 9893\n  return key;                                                                                                         // 9894\n};                                                                                                                    // 9895\n}).call(this,require(\"buffer\").Buffer)                                                                                // 9896\n                                                                                                                      // 9897\n},{\"buffer\":2,\"create-hash\":94}],51:[function(require,module,exports){                                                // 9898\nmodule.exports={\"2.16.840.1.101.3.4.1.1\": \"aes-128-ecb\",                                                              // 9899\n\"2.16.840.1.101.3.4.1.2\": \"aes-128-cbc\",                                                                              // 9900\n\"2.16.840.1.101.3.4.1.3\": \"aes-128-ofb\",                                                                              // 9901\n\"2.16.840.1.101.3.4.1.4\": \"aes-128-cfb\",                                                                              // 9902\n\"2.16.840.1.101.3.4.1.21\": \"aes-192-ecb\",                                                                             // 9903\n\"2.16.840.1.101.3.4.1.22\": \"aes-192-cbc\",                                                                             // 9904\n\"2.16.840.1.101.3.4.1.23\": \"aes-192-ofb\",                                                                             // 9905\n\"2.16.840.1.101.3.4.1.24\": \"aes-192-cfb\",                                                                             // 9906\n\"2.16.840.1.101.3.4.1.41\": \"aes-256-ecb\",                                                                             // 9907\n\"2.16.840.1.101.3.4.1.42\": \"aes-256-cbc\",                                                                             // 9908\n\"2.16.840.1.101.3.4.1.43\": \"aes-256-ofb\",                                                                             // 9909\n\"2.16.840.1.101.3.4.1.44\": \"aes-256-cfb\"                                                                              // 9910\n}                                                                                                                     // 9911\n},{}],52:[function(require,module,exports){                                                                           // 9912\n// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js                                              // 9913\n// Fedor, you are amazing.                                                                                            // 9914\n                                                                                                                      // 9915\nvar asn1 = require('asn1.js');                                                                                        // 9916\n                                                                                                                      // 9917\nvar RSAPrivateKey = asn1.define('RSAPrivateKey', function() {                                                         // 9918\n  this.seq().obj(                                                                                                     // 9919\n    this.key('version').int(),                                                                                        // 9920\n    this.key('modulus').int(),                                                                                        // 9921\n    this.key('publicExponent').int(),                                                                                 // 9922\n    this.key('privateExponent').int(),                                                                                // 9923\n    this.key('prime1').int(),                                                                                         // 9924\n    this.key('prime2').int(),                                                                                         // 9925\n    this.key('exponent1').int(),                                                                                      // 9926\n    this.key('exponent2').int(),                                                                                      // 9927\n    this.key('coefficient').int()                                                                                     // 9928\n  );                                                                                                                  // 9929\n});                                                                                                                   // 9930\nexports.RSAPrivateKey = RSAPrivateKey;                                                                                // 9931\n                                                                                                                      // 9932\nvar RSAPublicKey = asn1.define('RSAPublicKey', function() {                                                           // 9933\n  this.seq().obj(                                                                                                     // 9934\n    this.key('modulus').int(),                                                                                        // 9935\n    this.key('publicExponent').int()                                                                                  // 9936\n  );                                                                                                                  // 9937\n});                                                                                                                   // 9938\nexports.RSAPublicKey = RSAPublicKey;                                                                                  // 9939\n                                                                                                                      // 9940\nvar PublicKey = asn1.define('SubjectPublicKeyInfo', function() {                                                      // 9941\n  this.seq().obj(                                                                                                     // 9942\n    this.key('algorithm').use(AlgorithmIdentifier),                                                                   // 9943\n    this.key('subjectPublicKey').bitstr()                                                                             // 9944\n  );                                                                                                                  // 9945\n});                                                                                                                   // 9946\nexports.PublicKey = PublicKey;                                                                                        // 9947\n                                                                                                                      // 9948\nvar AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {                                             // 9949\n  this.seq().obj(                                                                                                     // 9950\n    this.key('algorithm').objid(),                                                                                    // 9951\n    this.key('none').null_().optional(),                                                                              // 9952\n    this.key('curve').objid().optional(),                                                                             // 9953\n    this.key('params').seq().obj(                                                                                     // 9954\n        this.key('p').int(),                                                                                          // 9955\n        this.key('q').int(),                                                                                          // 9956\n        this.key('g').int()                                                                                           // 9957\n      ).optional()                                                                                                    // 9958\n  );                                                                                                                  // 9959\n});                                                                                                                   // 9960\n                                                                                                                      // 9961\nvar PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {                                                       // 9962\n  this.seq().obj(                                                                                                     // 9963\n    this.key('version').int(),                                                                                        // 9964\n    this.key('algorithm').use(AlgorithmIdentifier),                                                                   // 9965\n    this.key('subjectPrivateKey').octstr()                                                                            // 9966\n  );                                                                                                                  // 9967\n});                                                                                                                   // 9968\nexports.PrivateKey = PrivateKeyInfo;                                                                                  // 9969\nvar EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {                                     // 9970\n  this.seq().obj(                                                                                                     // 9971\n    this.key('algorithm').seq().obj(                                                                                  // 9972\n      this.key('id').objid(),                                                                                         // 9973\n      this.key('decrypt').seq().obj(                                                                                  // 9974\n        this.key('kde').seq().obj(                                                                                    // 9975\n          this.key('id').objid(),                                                                                     // 9976\n          this.key('kdeparams').seq().obj(                                                                            // 9977\n            this.key('salt').octstr(),                                                                                // 9978\n            this.key('iters').int()                                                                                   // 9979\n          )                                                                                                           // 9980\n        ),                                                                                                            // 9981\n        this.key('cipher').seq().obj(                                                                                 // 9982\n          this.key('algo').objid(),                                                                                   // 9983\n          this.key('iv').octstr()                                                                                     // 9984\n        )                                                                                                             // 9985\n      )                                                                                                               // 9986\n    ),                                                                                                                // 9987\n    this.key('subjectPrivateKey').octstr()                                                                            // 9988\n  );                                                                                                                  // 9989\n});                                                                                                                   // 9990\n                                                                                                                      // 9991\nexports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;                                                                // 9992\n                                                                                                                      // 9993\nvar DSAPrivateKey = asn1.define('DSAPrivateKey', function() {                                                         // 9994\n  this.seq().obj(                                                                                                     // 9995\n    this.key('version').int(),                                                                                        // 9996\n    this.key('p').int(),                                                                                              // 9997\n    this.key('q').int(),                                                                                              // 9998\n    this.key('g').int(),                                                                                              // 9999\n    this.key('pub_key').int(),                                                                                        // 10000\n    this.key('priv_key').int()                                                                                        // 10001\n  );                                                                                                                  // 10002\n});                                                                                                                   // 10003\nexports.DSAPrivateKey = DSAPrivateKey;                                                                                // 10004\n                                                                                                                      // 10005\nexports.DSAparam = asn1.define('DSAparam', function () {                                                              // 10006\n  this.int();                                                                                                         // 10007\n});                                                                                                                   // 10008\nvar ECPrivateKey = asn1.define('ECPrivateKey', function() {                                                           // 10009\n  this.seq().obj(                                                                                                     // 10010\n    this.key('version').int(),                                                                                        // 10011\n    this.key('privateKey').octstr(),                                                                                  // 10012\n    this.key('parameters').optional().explicit(0).use(ECParameters),                                                  // 10013\n    this.key('publicKey').optional().explicit(1).bitstr()                                                             // 10014\n  );                                                                                                                  // 10015\n});                                                                                                                   // 10016\nexports.ECPrivateKey = ECPrivateKey;                                                                                  // 10017\nvar ECParameters = asn1.define('ECParameters', function() {                                                           // 10018\n  this.choice({                                                                                                       // 10019\n    namedCurve: this.objid()                                                                                          // 10020\n  });                                                                                                                 // 10021\n});                                                                                                                   // 10022\n                                                                                                                      // 10023\nexports.signature = asn1.define('signature', function() {                                                             // 10024\n  this.seq().obj(                                                                                                     // 10025\n    this.key('r').int(),                                                                                              // 10026\n    this.key('s').int()                                                                                               // 10027\n  );                                                                                                                  // 10028\n});                                                                                                                   // 10029\n                                                                                                                      // 10030\n},{\"asn1.js\":55}],53:[function(require,module,exports){                                                               // 10031\n(function (Buffer){                                                                                                   // 10032\n// adapted from https://github.com/apatil/pemstrip                                                                    // 10033\nvar findProc = /Proc-Type: 4,ENCRYPTED\\n\\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\\n\\r?\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?/m;\nvar startRegex =/^-----BEGIN (.*) KEY-----\\n/m;                                                                       // 10035\nvar fullRegex = /^-----BEGIN (.*) KEY-----\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?-----END \\1 KEY-----$/m;                     // 10036\nvar evp = require('./EVP_BytesToKey');                                                                                // 10037\nvar ciphers = require('browserify-aes');                                                                              // 10038\nmodule.exports = function (okey, password) {                                                                          // 10039\n  var key = okey.toString();                                                                                          // 10040\n  var match = key.match(findProc);                                                                                    // 10041\n  var decrypted;                                                                                                      // 10042\n  if (!match) {                                                                                                       // 10043\n    var match2 = key.match(fullRegex);                                                                                // 10044\n    decrypted = new Buffer(match2[2].replace(/\\n\\r?/g, ''), 'base64');                                                // 10045\n  } else {                                                                                                            // 10046\n    var suite = 'aes' + match[1];                                                                                     // 10047\n    var iv = new Buffer(match[2], 'hex');                                                                             // 10048\n    var cipherText = new Buffer(match[3].replace(/\\n\\r?/g, ''), 'base64');                                            // 10049\n    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));                                                 // 10050\n    var out = [];                                                                                                     // 10051\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);                                                      // 10052\n    out.push(cipher.update(cipherText));                                                                              // 10053\n    out.push(cipher.final());                                                                                         // 10054\n    decrypted = Buffer.concat(out);                                                                                   // 10055\n  }                                                                                                                   // 10056\n  var tag = key.match(startRegex)[1] + ' KEY';                                                                        // 10057\n  return {                                                                                                            // 10058\n    tag: tag,                                                                                                         // 10059\n    data: decrypted                                                                                                   // 10060\n  };                                                                                                                  // 10061\n};                                                                                                                    // 10062\n// http://stackoverflow.com/a/7033705                                                                                 // 10063\nfunction wrap(str) {                                                                                                  // 10064\n  var chunks = [];                                                                                                    // 10065\n  while (str) {                                                                                                       // 10066\n    if (str.length < 64) {                                                                                            // 10067\n      chunks.push(str);                                                                                               // 10068\n      break;                                                                                                          // 10069\n    }                                                                                                                 // 10070\n    else {                                                                                                            // 10071\n      chunks.push(str.slice(0, 64));                                                                                  // 10072\n      str = str.slice(64);                                                                                            // 10073\n    }                                                                                                                 // 10074\n  }                                                                                                                   // 10075\n  return chunks.join(\"\\n\");                                                                                           // 10076\n}                                                                                                                     // 10077\n}).call(this,require(\"buffer\").Buffer)                                                                                // 10078\n                                                                                                                      // 10079\n},{\"./EVP_BytesToKey\":50,\"browserify-aes\":10,\"buffer\":2}],54:[function(require,module,exports){                       // 10080\n(function (Buffer){                                                                                                   // 10081\nvar asn1 = require('./asn1');                                                                                         // 10082\nvar aesid = require('./aesid.json');                                                                                  // 10083\nvar fixProc = require('./fixProc');                                                                                   // 10084\nvar ciphers = require('browserify-aes');                                                                              // 10085\nvar compat = require('pbkdf2-compat');                                                                                // 10086\nmodule.exports = parseKeys;                                                                                           // 10087\n                                                                                                                      // 10088\nfunction parseKeys(buffer) {                                                                                          // 10089\n  var password;                                                                                                       // 10090\n  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {                                                       // 10091\n    password = buffer.passphrase;                                                                                     // 10092\n    buffer = buffer.key;                                                                                              // 10093\n  }                                                                                                                   // 10094\n  if (typeof buffer === 'string') {                                                                                   // 10095\n    buffer = new Buffer(buffer);                                                                                      // 10096\n  }                                                                                                                   // 10097\n                                                                                                                      // 10098\n  var stripped = fixProc(buffer, password);                                                                           // 10099\n                                                                                                                      // 10100\n  var type = stripped.tag;                                                                                            // 10101\n  var data = stripped.data;                                                                                           // 10102\n  var subtype,ndata;                                                                                                  // 10103\n  switch (type) {                                                                                                     // 10104\n    case 'PUBLIC KEY':                                                                                                // 10105\n      ndata = asn1.PublicKey.decode(data, 'der');                                                                     // 10106\n      subtype = ndata.algorithm.algorithm.join('.');                                                                  // 10107\n      switch(subtype) {                                                                                               // 10108\n        case '1.2.840.113549.1.1.1':                                                                                  // 10109\n          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');                                        // 10110\n        case '1.2.840.10045.2.1':                                                                                     // 10111\n        ndata.subjectPrivateKey = ndata.subjectPublicKey;                                                             // 10112\n          return {                                                                                                    // 10113\n            type: 'ec',                                                                                               // 10114\n            data:  ndata                                                                                              // 10115\n          };                                                                                                          // 10116\n        case '1.2.840.10040.4.1':                                                                                     // 10117\n          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');                  // 10118\n          return {                                                                                                    // 10119\n            type: 'dsa',                                                                                              // 10120\n            data: ndata.algorithm.params                                                                              // 10121\n          };                                                                                                          // 10122\n        default: throw new Error('unknown key id ' +  subtype);                                                       // 10123\n      }                                                                                                               // 10124\n      throw new Error('unknown key type ' +  type);                                                                   // 10125\n    case 'ENCRYPTED PRIVATE KEY':                                                                                     // 10126\n      data = asn1.EncryptedPrivateKey.decode(data, 'der');                                                            // 10127\n      data = decrypt(data, password);                                                                                 // 10128\n      //falling through                                                                                               // 10129\n    case 'PRIVATE KEY':                                                                                               // 10130\n      ndata = asn1.PrivateKey.decode(data, 'der');                                                                    // 10131\n      subtype = ndata.algorithm.algorithm.join('.');                                                                  // 10132\n      switch(subtype) {                                                                                               // 10133\n        case '1.2.840.113549.1.1.1':                                                                                  // 10134\n          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');                                           // 10135\n        case '1.2.840.10045.2.1':                                                                                     // 10136\n          return {                                                                                                    // 10137\n            curve: ndata.algorithm.curve,                                                                             // 10138\n            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey                           // 10139\n          };                                                                                                          // 10140\n        case '1.2.840.10040.4.1':                                                                                     // 10141\n          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');                     // 10142\n          return {                                                                                                    // 10143\n            type: 'dsa',                                                                                              // 10144\n            params: ndata.algorithm.params                                                                            // 10145\n          };                                                                                                          // 10146\n        default: throw new Error('unknown key id ' +  subtype);                                                       // 10147\n      }                                                                                                               // 10148\n      throw new Error('unknown key type ' +  type);                                                                   // 10149\n    case 'RSA PUBLIC KEY':                                                                                            // 10150\n      return asn1.RSAPublicKey.decode(data, 'der');                                                                   // 10151\n    case 'RSA PRIVATE KEY':                                                                                           // 10152\n      return asn1.RSAPrivateKey.decode(data, 'der');                                                                  // 10153\n    case 'DSA PRIVATE KEY':                                                                                           // 10154\n      return {                                                                                                        // 10155\n        type: 'dsa',                                                                                                  // 10156\n        params: asn1.DSAPrivateKey.decode(data, 'der')                                                                // 10157\n      };                                                                                                              // 10158\n    case 'EC PRIVATE KEY':                                                                                            // 10159\n      data = asn1.ECPrivateKey.decode(data, 'der');                                                                   // 10160\n      return {                                                                                                        // 10161\n        curve: data.parameters.value,                                                                                 // 10162\n        privateKey: data.privateKey                                                                                   // 10163\n      };                                                                                                              // 10164\n    default: throw new Error('unknown key type ' +  type);                                                            // 10165\n  }                                                                                                                   // 10166\n}                                                                                                                     // 10167\nparseKeys.signature = asn1.signature;                                                                                 // 10168\nfunction decrypt(data, password) {                                                                                    // 10169\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt;                                                               // 10170\n  var iters = data.algorithm.decrypt.kde.kdeparams.iters;                                                             // 10171\n  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];                                                     // 10172\n  var iv = data.algorithm.decrypt.cipher.iv;                                                                          // 10173\n  var cipherText = data.subjectPrivateKey;                                                                            // 10174\n  var keylen = parseInt(algo.split('-')[1], 10)/8;                                                                    // 10175\n  var key = compat.pbkdf2Sync(password, salt, iters, keylen);                                                         // 10176\n  var cipher = ciphers.createDecipheriv(algo, key, iv);                                                               // 10177\n  var out = [];                                                                                                       // 10178\n  out.push(cipher.update(cipherText));                                                                                // 10179\n  out.push(cipher.final());                                                                                           // 10180\n  return Buffer.concat(out);                                                                                          // 10181\n}                                                                                                                     // 10182\n}).call(this,require(\"buffer\").Buffer)                                                                                // 10183\n                                                                                                                      // 10184\n},{\"./aesid.json\":51,\"./asn1\":52,\"./fixProc\":53,\"browserify-aes\":10,\"buffer\":2,\"pbkdf2-compat\":68}],55:[function(require,module,exports){\nvar asn1 = exports;                                                                                                   // 10186\n                                                                                                                      // 10187\nasn1.bignum = require('bn.js');                                                                                       // 10188\n                                                                                                                      // 10189\nasn1.define = require('./asn1/api').define;                                                                           // 10190\nasn1.base = require('./asn1/base');                                                                                   // 10191\nasn1.constants = require('./asn1/constants');                                                                         // 10192\nasn1.decoders = require('./asn1/decoders');                                                                           // 10193\nasn1.encoders = require('./asn1/encoders');                                                                           // 10194\n                                                                                                                      // 10195\n},{\"./asn1/api\":56,\"./asn1/base\":58,\"./asn1/constants\":62,\"./asn1/decoders\":64,\"./asn1/encoders\":66,\"bn.js\":28}],56:[function(require,module,exports){\nvar asn1 = require('../asn1');                                                                                        // 10197\nvar inherits = require('inherits');                                                                                   // 10198\n                                                                                                                      // 10199\nvar api = exports;                                                                                                    // 10200\n                                                                                                                      // 10201\napi.define = function define(name, body) {                                                                            // 10202\n  return new Entity(name, body);                                                                                      // 10203\n};                                                                                                                    // 10204\n                                                                                                                      // 10205\nfunction Entity(name, body) {                                                                                         // 10206\n  this.name = name;                                                                                                   // 10207\n  this.body = body;                                                                                                   // 10208\n                                                                                                                      // 10209\n  this.decoders = {};                                                                                                 // 10210\n  this.encoders = {};                                                                                                 // 10211\n};                                                                                                                    // 10212\n                                                                                                                      // 10213\nEntity.prototype._createNamed = function createNamed(base) {                                                          // 10214\n  var named;                                                                                                          // 10215\n  try {                                                                                                               // 10216\n    named = require('vm').runInThisContext(                                                                           // 10217\n      '(function ' + this.name + '(entity) {\\n' +                                                                     // 10218\n      '  this._initNamed(entity);\\n' +                                                                                // 10219\n      '})'                                                                                                            // 10220\n    );                                                                                                                // 10221\n  } catch (e) {                                                                                                       // 10222\n    named = function (entity) {                                                                                       // 10223\n      this._initNamed(entity);                                                                                        // 10224\n    };                                                                                                                // 10225\n  }                                                                                                                   // 10226\n  inherits(named, base);                                                                                              // 10227\n  named.prototype._initNamed = function initnamed(entity) {                                                           // 10228\n    base.call(this, entity);                                                                                          // 10229\n  };                                                                                                                  // 10230\n                                                                                                                      // 10231\n  return new named(this);                                                                                             // 10232\n};                                                                                                                    // 10233\n                                                                                                                      // 10234\nEntity.prototype._getDecoder = function _getDecoder(enc) {                                                            // 10235\n  // Lazily create decoder                                                                                            // 10236\n  if (!this.decoders.hasOwnProperty(enc))                                                                             // 10237\n    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);                                                       // 10238\n  return this.decoders[enc];                                                                                          // 10239\n};                                                                                                                    // 10240\n                                                                                                                      // 10241\nEntity.prototype.decode = function decode(data, enc, options) {                                                       // 10242\n  return this._getDecoder(enc).decode(data, options);                                                                 // 10243\n};                                                                                                                    // 10244\n                                                                                                                      // 10245\nEntity.prototype._getEncoder = function _getEncoder(enc) {                                                            // 10246\n  // Lazily create encoder                                                                                            // 10247\n  if (!this.encoders.hasOwnProperty(enc))                                                                             // 10248\n    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);                                                       // 10249\n  return this.encoders[enc];                                                                                          // 10250\n};                                                                                                                    // 10251\n                                                                                                                      // 10252\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {                                       // 10253\n  return this._getEncoder(enc).encode(data, reporter);                                                                // 10254\n};                                                                                                                    // 10255\n                                                                                                                      // 10256\n},{\"../asn1\":55,\"inherits\":144,\"vm\":160}],57:[function(require,module,exports){                                       // 10257\nvar inherits = require('inherits');                                                                                   // 10258\nvar Reporter = require('../base').Reporter;                                                                           // 10259\nvar Buffer = require('buffer').Buffer;                                                                                // 10260\n                                                                                                                      // 10261\nfunction DecoderBuffer(base, options) {                                                                               // 10262\n  Reporter.call(this, options);                                                                                       // 10263\n  if (!Buffer.isBuffer(base)) {                                                                                       // 10264\n    this.error('Input not Buffer');                                                                                   // 10265\n    return;                                                                                                           // 10266\n  }                                                                                                                   // 10267\n                                                                                                                      // 10268\n  this.base = base;                                                                                                   // 10269\n  this.offset = 0;                                                                                                    // 10270\n  this.length = base.length;                                                                                          // 10271\n}                                                                                                                     // 10272\ninherits(DecoderBuffer, Reporter);                                                                                    // 10273\nexports.DecoderBuffer = DecoderBuffer;                                                                                // 10274\n                                                                                                                      // 10275\nDecoderBuffer.prototype.save = function save() {                                                                      // 10276\n  return { offset: this.offset };                                                                                     // 10277\n};                                                                                                                    // 10278\n                                                                                                                      // 10279\nDecoderBuffer.prototype.restore = function restore(save) {                                                            // 10280\n  // Return skipped data                                                                                              // 10281\n  var res = new DecoderBuffer(this.base);                                                                             // 10282\n  res.offset = save.offset;                                                                                           // 10283\n  res.length = this.offset;                                                                                           // 10284\n                                                                                                                      // 10285\n  this.offset = save.offset;                                                                                          // 10286\n                                                                                                                      // 10287\n  return res;                                                                                                         // 10288\n};                                                                                                                    // 10289\n                                                                                                                      // 10290\nDecoderBuffer.prototype.isEmpty = function isEmpty() {                                                                // 10291\n  return this.offset === this.length;                                                                                 // 10292\n};                                                                                                                    // 10293\n                                                                                                                      // 10294\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {                                                        // 10295\n  if (this.offset + 1 <= this.length)                                                                                 // 10296\n    return this.base.readUInt8(this.offset++, true);                                                                  // 10297\n  else                                                                                                                // 10298\n    return this.error(fail || 'DecoderBuffer overrun');                                                               // 10299\n}                                                                                                                     // 10300\n                                                                                                                      // 10301\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {                                                           // 10302\n  if (!(this.offset + bytes <= this.length))                                                                          // 10303\n    return this.error(fail || 'DecoderBuffer overrun');                                                               // 10304\n                                                                                                                      // 10305\n  var res = new DecoderBuffer(this.base);                                                                             // 10306\n                                                                                                                      // 10307\n  // Share reporter state                                                                                             // 10308\n  res._reporterState = this._reporterState;                                                                           // 10309\n                                                                                                                      // 10310\n  res.offset = this.offset;                                                                                           // 10311\n  res.length = this.offset + bytes;                                                                                   // 10312\n  this.offset += bytes;                                                                                               // 10313\n  return res;                                                                                                         // 10314\n}                                                                                                                     // 10315\n                                                                                                                      // 10316\nDecoderBuffer.prototype.raw = function raw(save) {                                                                    // 10317\n  return this.base.slice(save ? save.offset : this.offset, this.length);                                              // 10318\n}                                                                                                                     // 10319\n                                                                                                                      // 10320\nfunction EncoderBuffer(value, reporter) {                                                                             // 10321\n  if (Array.isArray(value)) {                                                                                         // 10322\n    this.length = 0;                                                                                                  // 10323\n    this.value = value.map(function(item) {                                                                           // 10324\n      if (!(item instanceof EncoderBuffer))                                                                           // 10325\n        item = new EncoderBuffer(item, reporter);                                                                     // 10326\n      this.length += item.length;                                                                                     // 10327\n      return item;                                                                                                    // 10328\n    }, this);                                                                                                         // 10329\n  } else if (typeof value === 'number') {                                                                             // 10330\n    if (!(0 <= value && value <= 0xff))                                                                               // 10331\n      return reporter.error('non-byte EncoderBuffer value');                                                          // 10332\n    this.value = value;                                                                                               // 10333\n    this.length = 1;                                                                                                  // 10334\n  } else if (typeof value === 'string') {                                                                             // 10335\n    this.value = value;                                                                                               // 10336\n    this.length = Buffer.byteLength(value);                                                                           // 10337\n  } else if (Buffer.isBuffer(value)) {                                                                                // 10338\n    this.value = value;                                                                                               // 10339\n    this.length = value.length;                                                                                       // 10340\n  } else {                                                                                                            // 10341\n    return reporter.error('Unsupported type: ' + typeof value);                                                       // 10342\n  }                                                                                                                   // 10343\n}                                                                                                                     // 10344\nexports.EncoderBuffer = EncoderBuffer;                                                                                // 10345\n                                                                                                                      // 10346\nEncoderBuffer.prototype.join = function join(out, offset) {                                                           // 10347\n  if (!out)                                                                                                           // 10348\n    out = new Buffer(this.length);                                                                                    // 10349\n  if (!offset)                                                                                                        // 10350\n    offset = 0;                                                                                                       // 10351\n                                                                                                                      // 10352\n  if (this.length === 0)                                                                                              // 10353\n    return out;                                                                                                       // 10354\n                                                                                                                      // 10355\n  if (Array.isArray(this.value)) {                                                                                    // 10356\n    this.value.forEach(function(item) {                                                                               // 10357\n      item.join(out, offset);                                                                                         // 10358\n      offset += item.length;                                                                                          // 10359\n    });                                                                                                               // 10360\n  } else {                                                                                                            // 10361\n    if (typeof this.value === 'number')                                                                               // 10362\n      out[offset] = this.value;                                                                                       // 10363\n    else if (typeof this.value === 'string')                                                                          // 10364\n      out.write(this.value, offset);                                                                                  // 10365\n    else if (Buffer.isBuffer(this.value))                                                                             // 10366\n      this.value.copy(out, offset);                                                                                   // 10367\n    offset += this.length;                                                                                            // 10368\n  }                                                                                                                   // 10369\n                                                                                                                      // 10370\n  return out;                                                                                                         // 10371\n};                                                                                                                    // 10372\n                                                                                                                      // 10373\n},{\"../base\":58,\"buffer\":2,\"inherits\":144}],58:[function(require,module,exports){                                     // 10374\nvar base = exports;                                                                                                   // 10375\n                                                                                                                      // 10376\nbase.Reporter = require('./reporter').Reporter;                                                                       // 10377\nbase.DecoderBuffer = require('./buffer').DecoderBuffer;                                                               // 10378\nbase.EncoderBuffer = require('./buffer').EncoderBuffer;                                                               // 10379\nbase.Node = require('./node');                                                                                        // 10380\n                                                                                                                      // 10381\n},{\"./buffer\":57,\"./node\":59,\"./reporter\":60}],59:[function(require,module,exports){                                  // 10382\nvar Reporter = require('../base').Reporter;                                                                           // 10383\nvar EncoderBuffer = require('../base').EncoderBuffer;                                                                 // 10384\nvar assert = require('minimalistic-assert');                                                                          // 10385\n                                                                                                                      // 10386\n// Supported tags                                                                                                     // 10387\nvar tags = [                                                                                                          // 10388\n  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',                                                // 10389\n  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str'                                                              // 10390\n];                                                                                                                    // 10391\n                                                                                                                      // 10392\n// Public methods list                                                                                                // 10393\nvar methods = [                                                                                                       // 10394\n  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',                                           // 10395\n  'any'                                                                                                               // 10396\n].concat(tags);                                                                                                       // 10397\n                                                                                                                      // 10398\n// Overrided methods list                                                                                             // 10399\nvar overrided = [                                                                                                     // 10400\n  '_peekTag', '_decodeTag', '_use',                                                                                   // 10401\n  '_decodeStr', '_decodeObjid', '_decodeTime',                                                                        // 10402\n  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',                                                          // 10403\n                                                                                                                      // 10404\n  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',                                                    // 10405\n  '_encodeNull', '_encodeInt', '_encodeBool'                                                                          // 10406\n];                                                                                                                    // 10407\n                                                                                                                      // 10408\nfunction Node(enc, parent) {                                                                                          // 10409\n  var state = {};                                                                                                     // 10410\n  this._baseState = state;                                                                                            // 10411\n                                                                                                                      // 10412\n  state.enc = enc;                                                                                                    // 10413\n                                                                                                                      // 10414\n  state.parent = parent || null;                                                                                      // 10415\n  state.children = null;                                                                                              // 10416\n                                                                                                                      // 10417\n  // State                                                                                                            // 10418\n  state.tag = null;                                                                                                   // 10419\n  state.args = null;                                                                                                  // 10420\n  state.reverseArgs = null;                                                                                           // 10421\n  state.choice = null;                                                                                                // 10422\n  state.optional = false;                                                                                             // 10423\n  state.any = false;                                                                                                  // 10424\n  state.obj = false;                                                                                                  // 10425\n  state.use = null;                                                                                                   // 10426\n  state.useDecoder = null;                                                                                            // 10427\n  state.key = null;                                                                                                   // 10428\n  state['default'] = null;                                                                                            // 10429\n  state.explicit = null;                                                                                              // 10430\n  state.implicit = null;                                                                                              // 10431\n                                                                                                                      // 10432\n  // Should create new instance on each method                                                                        // 10433\n  if (!state.parent) {                                                                                                // 10434\n    state.children = [];                                                                                              // 10435\n    this._wrap();                                                                                                     // 10436\n  }                                                                                                                   // 10437\n}                                                                                                                     // 10438\nmodule.exports = Node;                                                                                                // 10439\n                                                                                                                      // 10440\nvar stateProps = [                                                                                                    // 10441\n  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',                                                // 10442\n  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',                                        // 10443\n  'implicit'                                                                                                          // 10444\n];                                                                                                                    // 10445\n                                                                                                                      // 10446\nNode.prototype.clone = function clone() {                                                                             // 10447\n  var state = this._baseState;                                                                                        // 10448\n  var cstate = {};                                                                                                    // 10449\n  stateProps.forEach(function(prop) {                                                                                 // 10450\n    cstate[prop] = state[prop];                                                                                       // 10451\n  });                                                                                                                 // 10452\n  var res = new this.constructor(cstate.parent);                                                                      // 10453\n  res._baseState = cstate;                                                                                            // 10454\n  return res;                                                                                                         // 10455\n};                                                                                                                    // 10456\n                                                                                                                      // 10457\nNode.prototype._wrap = function wrap() {                                                                              // 10458\n  var state = this._baseState;                                                                                        // 10459\n  methods.forEach(function(method) {                                                                                  // 10460\n    this[method] = function _wrappedMethod() {                                                                        // 10461\n      var clone = new this.constructor(this);                                                                         // 10462\n      state.children.push(clone);                                                                                     // 10463\n      return clone[method].apply(clone, arguments);                                                                   // 10464\n    };                                                                                                                // 10465\n  }, this);                                                                                                           // 10466\n};                                                                                                                    // 10467\n                                                                                                                      // 10468\nNode.prototype._init = function init(body) {                                                                          // 10469\n  var state = this._baseState;                                                                                        // 10470\n                                                                                                                      // 10471\n  assert(state.parent === null);                                                                                      // 10472\n  body.call(this);                                                                                                    // 10473\n                                                                                                                      // 10474\n  // Filter children                                                                                                  // 10475\n  state.children = state.children.filter(function(child) {                                                            // 10476\n    return child._baseState.parent === this;                                                                          // 10477\n  }, this);                                                                                                           // 10478\n  assert.equal(state.children.length, 1, 'Root node can have only one child');                                        // 10479\n};                                                                                                                    // 10480\n                                                                                                                      // 10481\nNode.prototype._useArgs = function useArgs(args) {                                                                    // 10482\n  var state = this._baseState;                                                                                        // 10483\n                                                                                                                      // 10484\n  // Filter children and args                                                                                         // 10485\n  var children = args.filter(function(arg) {                                                                          // 10486\n    return arg instanceof this.constructor;                                                                           // 10487\n  }, this);                                                                                                           // 10488\n  args = args.filter(function(arg) {                                                                                  // 10489\n    return !(arg instanceof this.constructor);                                                                        // 10490\n  }, this);                                                                                                           // 10491\n                                                                                                                      // 10492\n  if (children.length !== 0) {                                                                                        // 10493\n    assert(state.children === null);                                                                                  // 10494\n    state.children = children;                                                                                        // 10495\n                                                                                                                      // 10496\n    // Replace parent to maintain backward link                                                                       // 10497\n    children.forEach(function(child) {                                                                                // 10498\n      child._baseState.parent = this;                                                                                 // 10499\n    }, this);                                                                                                         // 10500\n  }                                                                                                                   // 10501\n  if (args.length !== 0) {                                                                                            // 10502\n    assert(state.args === null);                                                                                      // 10503\n    state.args = args;                                                                                                // 10504\n    state.reverseArgs = args.map(function(arg) {                                                                      // 10505\n      if (typeof arg !== 'object' || arg.constructor !== Object)                                                      // 10506\n        return arg;                                                                                                   // 10507\n                                                                                                                      // 10508\n      var res = {};                                                                                                   // 10509\n      Object.keys(arg).forEach(function(key) {                                                                        // 10510\n        if (key == (key | 0))                                                                                         // 10511\n          key |= 0;                                                                                                   // 10512\n        var value = arg[key];                                                                                         // 10513\n        res[value] = key;                                                                                             // 10514\n      });                                                                                                             // 10515\n      return res;                                                                                                     // 10516\n    });                                                                                                               // 10517\n  }                                                                                                                   // 10518\n};                                                                                                                    // 10519\n                                                                                                                      // 10520\n//                                                                                                                    // 10521\n// Overrided methods                                                                                                  // 10522\n//                                                                                                                    // 10523\n                                                                                                                      // 10524\noverrided.forEach(function(method) {                                                                                  // 10525\n  Node.prototype[method] = function _overrided() {                                                                    // 10526\n    var state = this._baseState;                                                                                      // 10527\n    throw new Error(method + ' not implemented for encoding: ' + state.enc);                                          // 10528\n  };                                                                                                                  // 10529\n});                                                                                                                   // 10530\n                                                                                                                      // 10531\n//                                                                                                                    // 10532\n// Public methods                                                                                                     // 10533\n//                                                                                                                    // 10534\n                                                                                                                      // 10535\ntags.forEach(function(tag) {                                                                                          // 10536\n  Node.prototype[tag] = function _tagMethod() {                                                                       // 10537\n    var state = this._baseState;                                                                                      // 10538\n    var args = Array.prototype.slice.call(arguments);                                                                 // 10539\n                                                                                                                      // 10540\n    assert(state.tag === null);                                                                                       // 10541\n    state.tag = tag;                                                                                                  // 10542\n                                                                                                                      // 10543\n    this._useArgs(args);                                                                                              // 10544\n                                                                                                                      // 10545\n    return this;                                                                                                      // 10546\n  };                                                                                                                  // 10547\n});                                                                                                                   // 10548\n                                                                                                                      // 10549\nNode.prototype.use = function use(item) {                                                                             // 10550\n  var state = this._baseState;                                                                                        // 10551\n                                                                                                                      // 10552\n  assert(state.use === null);                                                                                         // 10553\n  state.use = item;                                                                                                   // 10554\n                                                                                                                      // 10555\n  return this;                                                                                                        // 10556\n};                                                                                                                    // 10557\n                                                                                                                      // 10558\nNode.prototype.optional = function optional() {                                                                       // 10559\n  var state = this._baseState;                                                                                        // 10560\n                                                                                                                      // 10561\n  state.optional = true;                                                                                              // 10562\n                                                                                                                      // 10563\n  return this;                                                                                                        // 10564\n};                                                                                                                    // 10565\n                                                                                                                      // 10566\nNode.prototype.def = function def(val) {                                                                              // 10567\n  var state = this._baseState;                                                                                        // 10568\n                                                                                                                      // 10569\n  assert(state['default'] === null);                                                                                  // 10570\n  state['default'] = val;                                                                                             // 10571\n  state.optional = true;                                                                                              // 10572\n                                                                                                                      // 10573\n  return this;                                                                                                        // 10574\n};                                                                                                                    // 10575\n                                                                                                                      // 10576\nNode.prototype.explicit = function explicit(num) {                                                                    // 10577\n  var state = this._baseState;                                                                                        // 10578\n                                                                                                                      // 10579\n  assert(state.explicit === null && state.implicit === null);                                                         // 10580\n  state.explicit = num;                                                                                               // 10581\n                                                                                                                      // 10582\n  return this;                                                                                                        // 10583\n};                                                                                                                    // 10584\n                                                                                                                      // 10585\nNode.prototype.implicit = function implicit(num) {                                                                    // 10586\n  var state = this._baseState;                                                                                        // 10587\n                                                                                                                      // 10588\n  assert(state.explicit === null && state.implicit === null);                                                         // 10589\n  state.implicit = num;                                                                                               // 10590\n                                                                                                                      // 10591\n  return this;                                                                                                        // 10592\n};                                                                                                                    // 10593\n                                                                                                                      // 10594\nNode.prototype.obj = function obj() {                                                                                 // 10595\n  var state = this._baseState;                                                                                        // 10596\n  var args = Array.prototype.slice.call(arguments);                                                                   // 10597\n                                                                                                                      // 10598\n  state.obj = true;                                                                                                   // 10599\n                                                                                                                      // 10600\n  if (args.length !== 0)                                                                                              // 10601\n    this._useArgs(args);                                                                                              // 10602\n                                                                                                                      // 10603\n  return this;                                                                                                        // 10604\n};                                                                                                                    // 10605\n                                                                                                                      // 10606\nNode.prototype.key = function key(newKey) {                                                                           // 10607\n  var state = this._baseState;                                                                                        // 10608\n                                                                                                                      // 10609\n  assert(state.key === null);                                                                                         // 10610\n  state.key = newKey;                                                                                                 // 10611\n                                                                                                                      // 10612\n  return this;                                                                                                        // 10613\n};                                                                                                                    // 10614\n                                                                                                                      // 10615\nNode.prototype.any = function any() {                                                                                 // 10616\n  var state = this._baseState;                                                                                        // 10617\n                                                                                                                      // 10618\n  state.any = true;                                                                                                   // 10619\n                                                                                                                      // 10620\n  return this;                                                                                                        // 10621\n};                                                                                                                    // 10622\n                                                                                                                      // 10623\nNode.prototype.choice = function choice(obj) {                                                                        // 10624\n  var state = this._baseState;                                                                                        // 10625\n                                                                                                                      // 10626\n  assert(state.choice === null);                                                                                      // 10627\n  state.choice = obj;                                                                                                 // 10628\n  this._useArgs(Object.keys(obj).map(function(key) {                                                                  // 10629\n    return obj[key];                                                                                                  // 10630\n  }));                                                                                                                // 10631\n                                                                                                                      // 10632\n  return this;                                                                                                        // 10633\n};                                                                                                                    // 10634\n                                                                                                                      // 10635\n//                                                                                                                    // 10636\n// Decoding                                                                                                           // 10637\n//                                                                                                                    // 10638\n                                                                                                                      // 10639\nNode.prototype._decode = function decode(input) {                                                                     // 10640\n  var state = this._baseState;                                                                                        // 10641\n                                                                                                                      // 10642\n  // Decode root node                                                                                                 // 10643\n  if (state.parent === null)                                                                                          // 10644\n    return input.wrapResult(state.children[0]._decode(input));                                                        // 10645\n                                                                                                                      // 10646\n  var result = state['default'];                                                                                      // 10647\n  var present = true;                                                                                                 // 10648\n                                                                                                                      // 10649\n  var prevKey;                                                                                                        // 10650\n  if (state.key !== null)                                                                                             // 10651\n    prevKey = input.enterKey(state.key);                                                                              // 10652\n                                                                                                                      // 10653\n  // Check if tag is there                                                                                            // 10654\n  if (state.optional) {                                                                                               // 10655\n    present = this._peekTag(                                                                                          // 10656\n      input,                                                                                                          // 10657\n      state.explicit !== null ? state.explicit :                                                                      // 10658\n          state.implicit !== null ? state.implicit :                                                                  // 10659\n              state.tag || 0                                                                                          // 10660\n    );                                                                                                                // 10661\n    if (input.isError(present))                                                                                       // 10662\n      return present;                                                                                                 // 10663\n  }                                                                                                                   // 10664\n                                                                                                                      // 10665\n  // Push object on stack                                                                                             // 10666\n  var prevObj;                                                                                                        // 10667\n  if (state.obj && present)                                                                                           // 10668\n    prevObj = input.enterObject();                                                                                    // 10669\n                                                                                                                      // 10670\n  if (present) {                                                                                                      // 10671\n    // Unwrap explicit values                                                                                         // 10672\n    if (state.explicit !== null) {                                                                                    // 10673\n      var explicit = this._decodeTag(input, state.explicit);                                                          // 10674\n      if (input.isError(explicit))                                                                                    // 10675\n        return explicit;                                                                                              // 10676\n      input = explicit;                                                                                               // 10677\n    }                                                                                                                 // 10678\n                                                                                                                      // 10679\n    // Unwrap implicit and normal values                                                                              // 10680\n    if (state.use === null && state.choice === null) {                                                                // 10681\n      if (state.any)                                                                                                  // 10682\n        var save = input.save();                                                                                      // 10683\n      var body = this._decodeTag(                                                                                     // 10684\n        input,                                                                                                        // 10685\n        state.implicit !== null ? state.implicit : state.tag,                                                         // 10686\n        state.any                                                                                                     // 10687\n      );                                                                                                              // 10688\n      if (input.isError(body))                                                                                        // 10689\n        return body;                                                                                                  // 10690\n                                                                                                                      // 10691\n      if (state.any)                                                                                                  // 10692\n        result = input.raw(save);                                                                                     // 10693\n      else                                                                                                            // 10694\n        input = body;                                                                                                 // 10695\n    }                                                                                                                 // 10696\n                                                                                                                      // 10697\n    // Select proper method for tag                                                                                   // 10698\n    if (state.any)                                                                                                    // 10699\n      result = result;                                                                                                // 10700\n    else if (state.choice === null)                                                                                   // 10701\n      result = this._decodeGeneric(state.tag, input);                                                                 // 10702\n    else                                                                                                              // 10703\n      result = this._decodeChoice(input);                                                                             // 10704\n                                                                                                                      // 10705\n    if (input.isError(result))                                                                                        // 10706\n      return result;                                                                                                  // 10707\n                                                                                                                      // 10708\n    // Decode children                                                                                                // 10709\n    if (!state.any && state.choice === null && state.children !== null) {                                             // 10710\n      var fail = state.children.some(function decodeChildren(child) {                                                 // 10711\n        // NOTE: We are ignoring errors here, to let parser continue with other                                       // 10712\n        // parts of encoded data                                                                                      // 10713\n        child._decode(input);                                                                                         // 10714\n      });                                                                                                             // 10715\n      if (fail)                                                                                                       // 10716\n        return err;                                                                                                   // 10717\n    }                                                                                                                 // 10718\n  }                                                                                                                   // 10719\n                                                                                                                      // 10720\n  // Pop object                                                                                                       // 10721\n  if (state.obj && present)                                                                                           // 10722\n    result = input.leaveObject(prevObj);                                                                              // 10723\n                                                                                                                      // 10724\n  // Set key                                                                                                          // 10725\n  if (state.key !== null && (result !== null || present === true))                                                    // 10726\n    input.leaveKey(prevKey, state.key, result);                                                                       // 10727\n                                                                                                                      // 10728\n  return result;                                                                                                      // 10729\n};                                                                                                                    // 10730\n                                                                                                                      // 10731\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input) {                                                  // 10732\n  var state = this._baseState;                                                                                        // 10733\n                                                                                                                      // 10734\n  if (tag === 'seq' || tag === 'set')                                                                                 // 10735\n    return null;                                                                                                      // 10736\n  if (tag === 'seqof' || tag === 'setof')                                                                             // 10737\n    return this._decodeList(input, tag, state.args[0]);                                                               // 10738\n  else if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')                                                  // 10739\n    return this._decodeStr(input, tag);                                                                               // 10740\n  else if (tag === 'objid' && state.args)                                                                             // 10741\n    return this._decodeObjid(input, state.args[0], state.args[1]);                                                    // 10742\n  else if (tag === 'objid')                                                                                           // 10743\n    return this._decodeObjid(input, null, null);                                                                      // 10744\n  else if (tag === 'gentime' || tag === 'utctime')                                                                    // 10745\n    return this._decodeTime(input, tag);                                                                              // 10746\n  else if (tag === 'null_')                                                                                           // 10747\n    return this._decodeNull(input);                                                                                   // 10748\n  else if (tag === 'bool')                                                                                            // 10749\n    return this._decodeBool(input);                                                                                   // 10750\n  else if (tag === 'int' || tag === 'enum')                                                                           // 10751\n    return this._decodeInt(input, state.args && state.args[0]);                                                       // 10752\n  else if (state.use !== null)                                                                                        // 10753\n    return this._getUse(state.use, input._reporterState.obj)._decode(input);                                          // 10754\n  else                                                                                                                // 10755\n    return input.error('unknown tag: ' + tag);                                                                        // 10756\n                                                                                                                      // 10757\n  return null;                                                                                                        // 10758\n};                                                                                                                    // 10759\n                                                                                                                      // 10760\nNode.prototype._getUse = function _getUse(entity, obj) {                                                              // 10761\n                                                                                                                      // 10762\n  var state = this._baseState;                                                                                        // 10763\n  // Create altered use decoder if implicit is set                                                                    // 10764\n  state.useDecoder = this._use(entity, obj);                                                                          // 10765\n  assert(state.useDecoder._baseState.parent === null);                                                                // 10766\n  state.useDecoder = state.useDecoder._baseState.children[0];                                                         // 10767\n  if (state.implicit !== state.useDecoder._baseState.implicit) {                                                      // 10768\n    state.useDecoder = state.useDecoder.clone();                                                                      // 10769\n    state.useDecoder._baseState.implicit = state.implicit;                                                            // 10770\n  }                                                                                                                   // 10771\n  return state.useDecoder;                                                                                            // 10772\n};                                                                                                                    // 10773\n                                                                                                                      // 10774\nNode.prototype._decodeChoice = function decodeChoice(input) {                                                         // 10775\n  var state = this._baseState;                                                                                        // 10776\n  var result = null;                                                                                                  // 10777\n  var match = false;                                                                                                  // 10778\n                                                                                                                      // 10779\n  Object.keys(state.choice).some(function(key) {                                                                      // 10780\n    var save = input.save();                                                                                          // 10781\n    var node = state.choice[key];                                                                                     // 10782\n    try {                                                                                                             // 10783\n      var value = node._decode(input);                                                                                // 10784\n      if (input.isError(value))                                                                                       // 10785\n        return false;                                                                                                 // 10786\n                                                                                                                      // 10787\n      result = { type: key, value: value };                                                                           // 10788\n      match = true;                                                                                                   // 10789\n    } catch (e) {                                                                                                     // 10790\n      input.restore(save);                                                                                            // 10791\n      return false;                                                                                                   // 10792\n    }                                                                                                                 // 10793\n    return true;                                                                                                      // 10794\n  }, this);                                                                                                           // 10795\n                                                                                                                      // 10796\n  if (!match)                                                                                                         // 10797\n    return input.error('Choice not matched');                                                                         // 10798\n                                                                                                                      // 10799\n  return result;                                                                                                      // 10800\n};                                                                                                                    // 10801\n                                                                                                                      // 10802\n//                                                                                                                    // 10803\n// Encoding                                                                                                           // 10804\n//                                                                                                                    // 10805\n                                                                                                                      // 10806\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {                                            // 10807\n  return new EncoderBuffer(data, this.reporter);                                                                      // 10808\n};                                                                                                                    // 10809\n                                                                                                                      // 10810\nNode.prototype._encode = function encode(data, reporter, parent) {                                                    // 10811\n  var state = this._baseState;                                                                                        // 10812\n  if (state['default'] !== null && state['default'] === data)                                                         // 10813\n    return;                                                                                                           // 10814\n                                                                                                                      // 10815\n  var result = this._encodeValue(data, reporter, parent);                                                             // 10816\n  if (result === undefined)                                                                                           // 10817\n    return;                                                                                                           // 10818\n                                                                                                                      // 10819\n  if (this._skipDefault(result, reporter, parent))                                                                    // 10820\n    return;                                                                                                           // 10821\n                                                                                                                      // 10822\n  return result;                                                                                                      // 10823\n};                                                                                                                    // 10824\n                                                                                                                      // 10825\nNode.prototype._encodeValue = function encode(data, reporter, parent) {                                               // 10826\n  var state = this._baseState;                                                                                        // 10827\n                                                                                                                      // 10828\n  // Decode root node                                                                                                 // 10829\n  if (state.parent === null)                                                                                          // 10830\n    return state.children[0]._encode(data, reporter || new Reporter());                                               // 10831\n                                                                                                                      // 10832\n  var result = null;                                                                                                  // 10833\n  var present = true;                                                                                                 // 10834\n                                                                                                                      // 10835\n  // Set reporter to share it with a child class                                                                      // 10836\n  this.reporter = reporter;                                                                                           // 10837\n                                                                                                                      // 10838\n  // Check if data is there                                                                                           // 10839\n  if (state.optional && data === undefined) {                                                                         // 10840\n    if (state['default'] !== null)                                                                                    // 10841\n      data = state['default']                                                                                         // 10842\n    else                                                                                                              // 10843\n      return;                                                                                                         // 10844\n  }                                                                                                                   // 10845\n                                                                                                                      // 10846\n  // For error reporting                                                                                              // 10847\n  var prevKey;                                                                                                        // 10848\n                                                                                                                      // 10849\n  // Encode children first                                                                                            // 10850\n  var content = null;                                                                                                 // 10851\n  var primitive = false;                                                                                              // 10852\n  if (state.any) {                                                                                                    // 10853\n    // Anything that was given is translated to buffer                                                                // 10854\n    result = this._createEncoderBuffer(data);                                                                         // 10855\n  } else if (state.choice) {                                                                                          // 10856\n    result = this._encodeChoice(data, reporter);                                                                      // 10857\n  } else if (state.children) {                                                                                        // 10858\n    content = state.children.map(function(child) {                                                                    // 10859\n      if (child._baseState.tag === 'null_')                                                                           // 10860\n        return child._encode(null, reporter, data);                                                                   // 10861\n                                                                                                                      // 10862\n      if (child._baseState.key === null)                                                                              // 10863\n        return reporter.error('Child should have a key');                                                             // 10864\n      var prevKey = reporter.enterKey(child._baseState.key);                                                          // 10865\n                                                                                                                      // 10866\n      if (typeof data !== 'object')                                                                                   // 10867\n        return reporter.error('Child expected, but input is not object');                                             // 10868\n                                                                                                                      // 10869\n      var res = child._encode(data[child._baseState.key], reporter, data);                                            // 10870\n      reporter.leaveKey(prevKey);                                                                                     // 10871\n                                                                                                                      // 10872\n      return res;                                                                                                     // 10873\n    }, this).filter(function(child) {                                                                                 // 10874\n      return child;                                                                                                   // 10875\n    });                                                                                                               // 10876\n                                                                                                                      // 10877\n    content = this._createEncoderBuffer(content);                                                                     // 10878\n  } else {                                                                                                            // 10879\n    if (state.tag === 'seqof' || state.tag === 'setof') {                                                             // 10880\n      // TODO(indutny): this should be thrown on DSL level                                                            // 10881\n      if (!(state.args && state.args.length === 1))                                                                   // 10882\n        return reporter.error('Too many args for : ' + state.tag);                                                    // 10883\n                                                                                                                      // 10884\n      if (!Array.isArray(data))                                                                                       // 10885\n        return reporter.error('seqof/setof, but data is not Array');                                                  // 10886\n                                                                                                                      // 10887\n      var child = this.clone();                                                                                       // 10888\n      child._baseState.implicit = null;                                                                               // 10889\n      content = this._createEncoderBuffer(data.map(function(item) {                                                   // 10890\n        var state = this._baseState;                                                                                  // 10891\n                                                                                                                      // 10892\n        return this._getUse(state.args[0], data)._encode(item, reporter);                                             // 10893\n      }, child));                                                                                                     // 10894\n    } else if (state.use !== null) {                                                                                  // 10895\n      result = this._getUse(state.use, parent)._encode(data, reporter);                                               // 10896\n    } else {                                                                                                          // 10897\n      content = this._encodePrimitive(state.tag, data);                                                               // 10898\n      primitive = true;                                                                                               // 10899\n    }                                                                                                                 // 10900\n  }                                                                                                                   // 10901\n                                                                                                                      // 10902\n  // Encode data itself                                                                                               // 10903\n  var result;                                                                                                         // 10904\n  if (!state.any && state.choice === null) {                                                                          // 10905\n    var tag = state.implicit !== null ? state.implicit : state.tag;                                                   // 10906\n    var cls = state.implicit === null ? 'universal' : 'context';                                                      // 10907\n                                                                                                                      // 10908\n    if (tag === null) {                                                                                               // 10909\n      if (state.use === null)                                                                                         // 10910\n        reporter.error('Tag could be ommited only for .use()');                                                       // 10911\n    } else {                                                                                                          // 10912\n      if (state.use === null)                                                                                         // 10913\n        result = this._encodeComposite(tag, primitive, cls, content);                                                 // 10914\n    }                                                                                                                 // 10915\n  }                                                                                                                   // 10916\n                                                                                                                      // 10917\n  // Wrap in explicit                                                                                                 // 10918\n  if (state.explicit !== null)                                                                                        // 10919\n    result = this._encodeComposite(state.explicit, false, 'context', result);                                         // 10920\n                                                                                                                      // 10921\n  return result;                                                                                                      // 10922\n};                                                                                                                    // 10923\n                                                                                                                      // 10924\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {                                                // 10925\n  var state = this._baseState;                                                                                        // 10926\n                                                                                                                      // 10927\n  var node = state.choice[data.type];                                                                                 // 10928\n  if (!node) {                                                                                                        // 10929\n    assert(                                                                                                           // 10930\n        false,                                                                                                        // 10931\n        data.type + ' not found in ' +                                                                                // 10932\n            JSON.stringify(Object.keys(state.choice)));                                                               // 10933\n  }                                                                                                                   // 10934\n  return node._encode(data.value, reporter);                                                                          // 10935\n};                                                                                                                    // 10936\n                                                                                                                      // 10937\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {                                               // 10938\n  var state = this._baseState;                                                                                        // 10939\n                                                                                                                      // 10940\n  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')                                                       // 10941\n    return this._encodeStr(data, tag);                                                                                // 10942\n  else if (tag === 'objid' && state.args)                                                                             // 10943\n    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);                                              // 10944\n  else if (tag === 'objid')                                                                                           // 10945\n    return this._encodeObjid(data, null, null);                                                                       // 10946\n  else if (tag === 'gentime' || tag === 'utctime')                                                                    // 10947\n    return this._encodeTime(data, tag);                                                                               // 10948\n  else if (tag === 'null_')                                                                                           // 10949\n    return this._encodeNull();                                                                                        // 10950\n  else if (tag === 'int' || tag === 'enum')                                                                           // 10951\n    return this._encodeInt(data, state.args && state.reverseArgs[0]);                                                 // 10952\n  else if (tag === 'bool')                                                                                            // 10953\n    return this._encodeBool(data);                                                                                    // 10954\n  else                                                                                                                // 10955\n    throw new Error('Unsupported tag: ' + tag);                                                                       // 10956\n};                                                                                                                    // 10957\n                                                                                                                      // 10958\n},{\"../base\":58,\"minimalistic-assert\":67}],60:[function(require,module,exports){                                      // 10959\nvar inherits = require('inherits');                                                                                   // 10960\n                                                                                                                      // 10961\nfunction Reporter(options) {                                                                                          // 10962\n  this._reporterState = {                                                                                             // 10963\n    obj: null,                                                                                                        // 10964\n    path: [],                                                                                                         // 10965\n    options: options || {},                                                                                           // 10966\n    errors: []                                                                                                        // 10967\n  };                                                                                                                  // 10968\n}                                                                                                                     // 10969\nexports.Reporter = Reporter;                                                                                          // 10970\n                                                                                                                      // 10971\nReporter.prototype.isError = function isError(obj) {                                                                  // 10972\n  return obj instanceof ReporterError;                                                                                // 10973\n};                                                                                                                    // 10974\n                                                                                                                      // 10975\nReporter.prototype.enterKey = function enterKey(key) {                                                                // 10976\n  return this._reporterState.path.push(key);                                                                          // 10977\n};                                                                                                                    // 10978\n                                                                                                                      // 10979\nReporter.prototype.leaveKey = function leaveKey(index, key, value) {                                                  // 10980\n  var state = this._reporterState;                                                                                    // 10981\n                                                                                                                      // 10982\n  state.path = state.path.slice(0, index - 1);                                                                        // 10983\n  if (state.obj !== null)                                                                                             // 10984\n    state.obj[key] = value;                                                                                           // 10985\n};                                                                                                                    // 10986\n                                                                                                                      // 10987\nReporter.prototype.enterObject = function enterObject() {                                                             // 10988\n  var state = this._reporterState;                                                                                    // 10989\n                                                                                                                      // 10990\n  var prev = state.obj;                                                                                               // 10991\n  state.obj = {};                                                                                                     // 10992\n  return prev;                                                                                                        // 10993\n};                                                                                                                    // 10994\n                                                                                                                      // 10995\nReporter.prototype.leaveObject = function leaveObject(prev) {                                                         // 10996\n  var state = this._reporterState;                                                                                    // 10997\n                                                                                                                      // 10998\n  var now = state.obj;                                                                                                // 10999\n  state.obj = prev;                                                                                                   // 11000\n  return now;                                                                                                         // 11001\n};                                                                                                                    // 11002\n                                                                                                                      // 11003\nReporter.prototype.error = function error(msg) {                                                                      // 11004\n  var err;                                                                                                            // 11005\n  var state = this._reporterState;                                                                                    // 11006\n                                                                                                                      // 11007\n  var inherited = msg instanceof ReporterError;                                                                       // 11008\n  if (inherited) {                                                                                                    // 11009\n    err = msg;                                                                                                        // 11010\n  } else {                                                                                                            // 11011\n    err = new ReporterError(state.path.map(function(elem) {                                                           // 11012\n      return '[' + JSON.stringify(elem) + ']';                                                                        // 11013\n    }).join(''), msg.message || msg, msg.stack);                                                                      // 11014\n  }                                                                                                                   // 11015\n                                                                                                                      // 11016\n  if (!state.options.partial)                                                                                         // 11017\n    throw err;                                                                                                        // 11018\n                                                                                                                      // 11019\n  if (!inherited)                                                                                                     // 11020\n    state.errors.push(err);                                                                                           // 11021\n                                                                                                                      // 11022\n  return err;                                                                                                         // 11023\n};                                                                                                                    // 11024\n                                                                                                                      // 11025\nReporter.prototype.wrapResult = function wrapResult(result) {                                                         // 11026\n  var state = this._reporterState;                                                                                    // 11027\n  if (!state.options.partial)                                                                                         // 11028\n    return result;                                                                                                    // 11029\n                                                                                                                      // 11030\n  return {                                                                                                            // 11031\n    result: this.isError(result) ? null : result,                                                                     // 11032\n    errors: state.errors                                                                                              // 11033\n  };                                                                                                                  // 11034\n};                                                                                                                    // 11035\n                                                                                                                      // 11036\nfunction ReporterError(path, msg) {                                                                                   // 11037\n  this.path = path;                                                                                                   // 11038\n  this.rethrow(msg);                                                                                                  // 11039\n};                                                                                                                    // 11040\ninherits(ReporterError, Error);                                                                                       // 11041\n                                                                                                                      // 11042\nReporterError.prototype.rethrow = function rethrow(msg) {                                                             // 11043\n  this.message = msg + ' at: ' + (this.path || '(shallow)');                                                          // 11044\n  Error.captureStackTrace(this, ReporterError);                                                                       // 11045\n                                                                                                                      // 11046\n  return this;                                                                                                        // 11047\n};                                                                                                                    // 11048\n                                                                                                                      // 11049\n},{\"inherits\":144}],61:[function(require,module,exports){                                                             // 11050\nvar constants = require('../constants');                                                                              // 11051\n                                                                                                                      // 11052\nexports.tagClass = {                                                                                                  // 11053\n  0: 'universal',                                                                                                     // 11054\n  1: 'application',                                                                                                   // 11055\n  2: 'context',                                                                                                       // 11056\n  3: 'private'                                                                                                        // 11057\n};                                                                                                                    // 11058\nexports.tagClassByName = constants._reverse(exports.tagClass);                                                        // 11059\n                                                                                                                      // 11060\nexports.tag = {                                                                                                       // 11061\n  0x00: 'end',                                                                                                        // 11062\n  0x01: 'bool',                                                                                                       // 11063\n  0x02: 'int',                                                                                                        // 11064\n  0x03: 'bitstr',                                                                                                     // 11065\n  0x04: 'octstr',                                                                                                     // 11066\n  0x05: 'null_',                                                                                                      // 11067\n  0x06: 'objid',                                                                                                      // 11068\n  0x07: 'objDesc',                                                                                                    // 11069\n  0x08: 'external',                                                                                                   // 11070\n  0x09: 'real',                                                                                                       // 11071\n  0x0a: 'enum',                                                                                                       // 11072\n  0x0b: 'embed',                                                                                                      // 11073\n  0x0c: 'utf8str',                                                                                                    // 11074\n  0x0d: 'relativeOid',                                                                                                // 11075\n  0x10: 'seq',                                                                                                        // 11076\n  0x11: 'set',                                                                                                        // 11077\n  0x12: 'numstr',                                                                                                     // 11078\n  0x13: 'printstr',                                                                                                   // 11079\n  0x14: 't61str',                                                                                                     // 11080\n  0x15: 'videostr',                                                                                                   // 11081\n  0x16: 'ia5str',                                                                                                     // 11082\n  0x17: 'utctime',                                                                                                    // 11083\n  0x18: 'gentime',                                                                                                    // 11084\n  0x19: 'graphstr',                                                                                                   // 11085\n  0x1a: 'iso646str',                                                                                                  // 11086\n  0x1b: 'genstr',                                                                                                     // 11087\n  0x1c: 'unistr',                                                                                                     // 11088\n  0x1d: 'charstr',                                                                                                    // 11089\n  0x1e: 'bmpstr'                                                                                                      // 11090\n};                                                                                                                    // 11091\nexports.tagByName = constants._reverse(exports.tag);                                                                  // 11092\n                                                                                                                      // 11093\n},{\"../constants\":62}],62:[function(require,module,exports){                                                          // 11094\nvar constants = exports;                                                                                              // 11095\n                                                                                                                      // 11096\n// Helper                                                                                                             // 11097\nconstants._reverse = function reverse(map) {                                                                          // 11098\n  var res = {};                                                                                                       // 11099\n                                                                                                                      // 11100\n  Object.keys(map).forEach(function(key) {                                                                            // 11101\n    // Convert key to integer if it is stringified                                                                    // 11102\n    if ((key | 0) == key)                                                                                             // 11103\n      key = key | 0;                                                                                                  // 11104\n                                                                                                                      // 11105\n    var value = map[key];                                                                                             // 11106\n    res[value] = key;                                                                                                 // 11107\n  });                                                                                                                 // 11108\n                                                                                                                      // 11109\n  return res;                                                                                                         // 11110\n};                                                                                                                    // 11111\n                                                                                                                      // 11112\nconstants.der = require('./der');                                                                                     // 11113\n                                                                                                                      // 11114\n},{\"./der\":61}],63:[function(require,module,exports){                                                                 // 11115\nvar inherits = require('inherits');                                                                                   // 11116\n                                                                                                                      // 11117\nvar asn1 = require('../../asn1');                                                                                     // 11118\nvar base = asn1.base;                                                                                                 // 11119\nvar bignum = asn1.bignum;                                                                                             // 11120\n                                                                                                                      // 11121\n// Import DER constants                                                                                               // 11122\nvar der = asn1.constants.der;                                                                                         // 11123\n                                                                                                                      // 11124\nfunction DERDecoder(entity) {                                                                                         // 11125\n  this.enc = 'der';                                                                                                   // 11126\n  this.name = entity.name;                                                                                            // 11127\n  this.entity = entity;                                                                                               // 11128\n                                                                                                                      // 11129\n  // Construct base tree                                                                                              // 11130\n  this.tree = new DERNode();                                                                                          // 11131\n  this.tree._init(entity.body);                                                                                       // 11132\n};                                                                                                                    // 11133\nmodule.exports = DERDecoder;                                                                                          // 11134\n                                                                                                                      // 11135\nDERDecoder.prototype.decode = function decode(data, options) {                                                        // 11136\n  if (!(data instanceof base.DecoderBuffer))                                                                          // 11137\n    data = new base.DecoderBuffer(data, options);                                                                     // 11138\n                                                                                                                      // 11139\n  return this.tree._decode(data, options);                                                                            // 11140\n};                                                                                                                    // 11141\n                                                                                                                      // 11142\n// Tree methods                                                                                                       // 11143\n                                                                                                                      // 11144\nfunction DERNode(parent) {                                                                                            // 11145\n  base.Node.call(this, 'der', parent);                                                                                // 11146\n}                                                                                                                     // 11147\ninherits(DERNode, base.Node);                                                                                         // 11148\n                                                                                                                      // 11149\nDERNode.prototype._peekTag = function peekTag(buffer, tag) {                                                          // 11150\n  if (buffer.isEmpty())                                                                                               // 11151\n    return false;                                                                                                     // 11152\n                                                                                                                      // 11153\n  var state = buffer.save();                                                                                          // 11154\n  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');                                         // 11155\n  if (buffer.isError(decodedTag))                                                                                     // 11156\n    return decodedTag;                                                                                                // 11157\n                                                                                                                      // 11158\n  buffer.restore(state);                                                                                              // 11159\n                                                                                                                      // 11160\n  return decodedTag.tag === tag || decodedTag.tagStr === tag;                                                         // 11161\n};                                                                                                                    // 11162\n                                                                                                                      // 11163\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {                                                 // 11164\n  var decodedTag = derDecodeTag(buffer,                                                                               // 11165\n                                'Failed to decode tag of \"' + tag + '\"');                                             // 11166\n  if (buffer.isError(decodedTag))                                                                                     // 11167\n    return decodedTag;                                                                                                // 11168\n                                                                                                                      // 11169\n  var len = derDecodeLen(buffer,                                                                                      // 11170\n                         decodedTag.primitive,                                                                        // 11171\n                         'Failed to get length of \"' + tag + '\"');                                                    // 11172\n                                                                                                                      // 11173\n  // Failure                                                                                                          // 11174\n  if (buffer.isError(len))                                                                                            // 11175\n    return len;                                                                                                       // 11176\n                                                                                                                      // 11177\n  if (!any &&                                                                                                         // 11178\n      decodedTag.tag !== tag &&                                                                                       // 11179\n      decodedTag.tagStr !== tag &&                                                                                    // 11180\n      decodedTag.tagStr + 'of' !== tag) {                                                                             // 11181\n    return buffer.error('Failed to match tag: \"' + tag + '\"');                                                        // 11182\n  }                                                                                                                   // 11183\n                                                                                                                      // 11184\n  if (decodedTag.primitive || len !== null)                                                                           // 11185\n    return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');                                                // 11186\n                                                                                                                      // 11187\n  // Indefinite length... find END tag                                                                                // 11188\n  var state = buffer.start();                                                                                         // 11189\n  var res = this._skipUntilEnd(                                                                                       // 11190\n      buffer,                                                                                                         // 11191\n      'Failed to skip indefinite length body: \"' + this.tag + '\"');                                                   // 11192\n  if (buffer.isError(res))                                                                                            // 11193\n    return res;                                                                                                       // 11194\n                                                                                                                      // 11195\n  return buffer.cut(state);                                                                                           // 11196\n};                                                                                                                    // 11197\n                                                                                                                      // 11198\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {                                               // 11199\n  while (true) {                                                                                                      // 11200\n    var tag = derDecodeTag(buffer, fail);                                                                             // 11201\n    if (buffer.isError(tag))                                                                                          // 11202\n      return tag;                                                                                                     // 11203\n    var len = derDecodeLen(buffer, tag.primitive, fail);                                                              // 11204\n    if (buffer.isError(len))                                                                                          // 11205\n      return len;                                                                                                     // 11206\n                                                                                                                      // 11207\n    var res;                                                                                                          // 11208\n    if (tag.primitive || len !== null)                                                                                // 11209\n      res = buffer.skip(len)                                                                                          // 11210\n    else                                                                                                              // 11211\n      res = this._skipUntilEnd(buffer, fail);                                                                         // 11212\n                                                                                                                      // 11213\n    // Failure                                                                                                        // 11214\n    if (buffer.isError(res))                                                                                          // 11215\n      return res;                                                                                                     // 11216\n                                                                                                                      // 11217\n    if (tag.tagStr === 'end')                                                                                         // 11218\n      break;                                                                                                          // 11219\n  }                                                                                                                   // 11220\n};                                                                                                                    // 11221\n                                                                                                                      // 11222\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {                                           // 11223\n  var result = [];                                                                                                    // 11224\n  while (!buffer.isEmpty()) {                                                                                         // 11225\n    var possibleEnd = this._peekTag(buffer, 'end');                                                                   // 11226\n    if (buffer.isError(possibleEnd))                                                                                  // 11227\n      return possibleEnd;                                                                                             // 11228\n                                                                                                                      // 11229\n    var res = decoder.decode(buffer, 'der');                                                                          // 11230\n    if (buffer.isError(res) && possibleEnd)                                                                           // 11231\n      break;                                                                                                          // 11232\n    result.push(res);                                                                                                 // 11233\n  }                                                                                                                   // 11234\n  return result;                                                                                                      // 11235\n};                                                                                                                    // 11236\n                                                                                                                      // 11237\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {                                                      // 11238\n  if (tag === 'octstr') {                                                                                             // 11239\n    return buffer.raw();                                                                                              // 11240\n  } else if (tag === 'bitstr') {                                                                                      // 11241\n    var unused = buffer.readUInt8();                                                                                  // 11242\n    if (buffer.isError(unused))                                                                                       // 11243\n      return unused;                                                                                                  // 11244\n                                                                                                                      // 11245\n    return { unused: unused, data: buffer.raw() };                                                                    // 11246\n  } else if (tag === 'ia5str') {                                                                                      // 11247\n    return buffer.raw().toString();                                                                                   // 11248\n  } else {                                                                                                            // 11249\n    return this.error('Decoding of string type: ' + tag + ' unsupported');                                            // 11250\n  }                                                                                                                   // 11251\n};                                                                                                                    // 11252\n                                                                                                                      // 11253\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {                                     // 11254\n  var identifiers = [];                                                                                               // 11255\n  var ident = 0;                                                                                                      // 11256\n  while (!buffer.isEmpty()) {                                                                                         // 11257\n    var subident = buffer.readUInt8();                                                                                // 11258\n    ident <<= 7;                                                                                                      // 11259\n    ident |= subident & 0x7f;                                                                                         // 11260\n    if ((subident & 0x80) === 0) {                                                                                    // 11261\n      identifiers.push(ident);                                                                                        // 11262\n      ident = 0;                                                                                                      // 11263\n    }                                                                                                                 // 11264\n  }                                                                                                                   // 11265\n  if (subident & 0x80)                                                                                                // 11266\n    identifiers.push(ident);                                                                                          // 11267\n                                                                                                                      // 11268\n  var first = (identifiers[0] / 40) | 0;                                                                              // 11269\n  var second = identifiers[0] % 40;                                                                                   // 11270\n                                                                                                                      // 11271\n  if (relative)                                                                                                       // 11272\n    result = identifiers;                                                                                             // 11273\n  else                                                                                                                // 11274\n    result = [first, second].concat(identifiers.slice(1));                                                            // 11275\n                                                                                                                      // 11276\n  if (values)                                                                                                         // 11277\n    result = values[result.join(' ')];                                                                                // 11278\n                                                                                                                      // 11279\n  return result;                                                                                                      // 11280\n};                                                                                                                    // 11281\n                                                                                                                      // 11282\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {                                                    // 11283\n  var str = buffer.raw().toString();                                                                                  // 11284\n  if (tag === 'gentime') {                                                                                            // 11285\n    var year = str.slice(0, 4) | 0;                                                                                   // 11286\n    var mon = str.slice(4, 6) | 0;                                                                                    // 11287\n    var day = str.slice(6, 8) | 0;                                                                                    // 11288\n    var hour = str.slice(8, 10) | 0;                                                                                  // 11289\n    var min = str.slice(10, 12) | 0;                                                                                  // 11290\n    var sec = str.slice(12, 14) | 0;                                                                                  // 11291\n  } else if (tag === 'utctime') {                                                                                     // 11292\n    var year = str.slice(0, 2) | 0;                                                                                   // 11293\n    var mon = str.slice(2, 4) | 0;                                                                                    // 11294\n    var day = str.slice(4, 6) | 0;                                                                                    // 11295\n    var hour = str.slice(6, 8) | 0;                                                                                   // 11296\n    var min = str.slice(8, 10) | 0;                                                                                   // 11297\n    var sec = str.slice(10, 12) | 0;                                                                                  // 11298\n    if (year < 70)                                                                                                    // 11299\n      year = 2000 + year;                                                                                             // 11300\n    else                                                                                                              // 11301\n      year = 1900 + year;                                                                                             // 11302\n  } else {                                                                                                            // 11303\n    return this.error('Decoding ' + tag + ' time is not supported yet');                                              // 11304\n  }                                                                                                                   // 11305\n                                                                                                                      // 11306\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);                                                             // 11307\n};                                                                                                                    // 11308\n                                                                                                                      // 11309\nDERNode.prototype._decodeNull = function decodeNull(buffer) {                                                         // 11310\n  return null;                                                                                                        // 11311\n};                                                                                                                    // 11312\n                                                                                                                      // 11313\nDERNode.prototype._decodeBool = function decodeBool(buffer) {                                                         // 11314\n  var res = buffer.readUInt8();                                                                                       // 11315\n  if (buffer.isError(res))                                                                                            // 11316\n    return res;                                                                                                       // 11317\n  else                                                                                                                // 11318\n    return res !== 0;                                                                                                 // 11319\n};                                                                                                                    // 11320\n                                                                                                                      // 11321\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {                                                   // 11322\n  var res = 0;                                                                                                        // 11323\n                                                                                                                      // 11324\n  // Bigint, return as it is (assume big endian)                                                                      // 11325\n  var raw = buffer.raw();                                                                                             // 11326\n  if (raw.length > 3)                                                                                                 // 11327\n    return new bignum(raw);                                                                                           // 11328\n                                                                                                                      // 11329\n  while (!buffer.isEmpty()) {                                                                                         // 11330\n    res <<= 8;                                                                                                        // 11331\n    var i = buffer.readUInt8();                                                                                       // 11332\n    if (buffer.isError(i))                                                                                            // 11333\n      return i;                                                                                                       // 11334\n    res |= i;                                                                                                         // 11335\n  }                                                                                                                   // 11336\n                                                                                                                      // 11337\n  if (values)                                                                                                         // 11338\n    res = values[res] || res;                                                                                         // 11339\n                                                                                                                      // 11340\n  return res;                                                                                                         // 11341\n};                                                                                                                    // 11342\n                                                                                                                      // 11343\nDERNode.prototype._use = function use(entity, obj) {                                                                  // 11344\n  if (typeof entity === 'function')                                                                                   // 11345\n    entity = entity(obj);                                                                                             // 11346\n  return entity._getDecoder('der').tree;                                                                              // 11347\n};                                                                                                                    // 11348\n                                                                                                                      // 11349\n// Utility methods                                                                                                    // 11350\n                                                                                                                      // 11351\nfunction derDecodeTag(buf, fail) {                                                                                    // 11352\n  var tag = buf.readUInt8(fail);                                                                                      // 11353\n  if (buf.isError(tag))                                                                                               // 11354\n    return tag;                                                                                                       // 11355\n                                                                                                                      // 11356\n  var cls = der.tagClass[tag >> 6];                                                                                   // 11357\n  var primitive = (tag & 0x20) === 0;                                                                                 // 11358\n                                                                                                                      // 11359\n  // Multi-octet tag - load                                                                                           // 11360\n  if ((tag & 0x1f) === 0x1f) {                                                                                        // 11361\n    var oct = tag;                                                                                                    // 11362\n    tag = 0;                                                                                                          // 11363\n    while ((oct & 0x80) === 0x80) {                                                                                   // 11364\n      oct = buf.readUInt8(fail);                                                                                      // 11365\n      if (buf.isError(oct))                                                                                           // 11366\n        return oct;                                                                                                   // 11367\n                                                                                                                      // 11368\n      tag <<= 7;                                                                                                      // 11369\n      tag |= oct & 0x7f;                                                                                              // 11370\n    }                                                                                                                 // 11371\n  } else {                                                                                                            // 11372\n    tag &= 0x1f;                                                                                                      // 11373\n  }                                                                                                                   // 11374\n  var tagStr = der.tag[tag];                                                                                          // 11375\n                                                                                                                      // 11376\n  return {                                                                                                            // 11377\n    cls: cls,                                                                                                         // 11378\n    primitive: primitive,                                                                                             // 11379\n    tag: tag,                                                                                                         // 11380\n    tagStr: tagStr                                                                                                    // 11381\n  };                                                                                                                  // 11382\n}                                                                                                                     // 11383\n                                                                                                                      // 11384\nfunction derDecodeLen(buf, primitive, fail) {                                                                         // 11385\n  var len = buf.readUInt8(fail);                                                                                      // 11386\n  if (buf.isError(len))                                                                                               // 11387\n    return len;                                                                                                       // 11388\n                                                                                                                      // 11389\n  // Indefinite form                                                                                                  // 11390\n  if (!primitive && len === 0x80)                                                                                     // 11391\n    return null;                                                                                                      // 11392\n                                                                                                                      // 11393\n  // Definite form                                                                                                    // 11394\n  if ((len & 0x80) === 0) {                                                                                           // 11395\n    // Short form                                                                                                     // 11396\n    return len;                                                                                                       // 11397\n  }                                                                                                                   // 11398\n                                                                                                                      // 11399\n  // Long form                                                                                                        // 11400\n  var num = len & 0x7f;                                                                                               // 11401\n  if (num >= 4)                                                                                                       // 11402\n    return buf.error('length octect is too long');                                                                    // 11403\n                                                                                                                      // 11404\n  len = 0;                                                                                                            // 11405\n  for (var i = 0; i < num; i++) {                                                                                     // 11406\n    len <<= 8;                                                                                                        // 11407\n    var j = buf.readUInt8(fail);                                                                                      // 11408\n    if (buf.isError(j))                                                                                               // 11409\n      return j;                                                                                                       // 11410\n    len |= j;                                                                                                         // 11411\n  }                                                                                                                   // 11412\n                                                                                                                      // 11413\n  return len;                                                                                                         // 11414\n}                                                                                                                     // 11415\n                                                                                                                      // 11416\n},{\"../../asn1\":55,\"inherits\":144}],64:[function(require,module,exports){                                             // 11417\nvar decoders = exports;                                                                                               // 11418\n                                                                                                                      // 11419\ndecoders.der = require('./der');                                                                                      // 11420\n                                                                                                                      // 11421\n},{\"./der\":63}],65:[function(require,module,exports){                                                                 // 11422\nvar inherits = require('inherits');                                                                                   // 11423\nvar Buffer = require('buffer').Buffer;                                                                                // 11424\n                                                                                                                      // 11425\nvar asn1 = require('../../asn1');                                                                                     // 11426\nvar base = asn1.base;                                                                                                 // 11427\nvar bignum = asn1.bignum;                                                                                             // 11428\n                                                                                                                      // 11429\n// Import DER constants                                                                                               // 11430\nvar der = asn1.constants.der;                                                                                         // 11431\n                                                                                                                      // 11432\nfunction DEREncoder(entity) {                                                                                         // 11433\n  this.enc = 'der';                                                                                                   // 11434\n  this.name = entity.name;                                                                                            // 11435\n  this.entity = entity;                                                                                               // 11436\n                                                                                                                      // 11437\n  // Construct base tree                                                                                              // 11438\n  this.tree = new DERNode();                                                                                          // 11439\n  this.tree._init(entity.body);                                                                                       // 11440\n};                                                                                                                    // 11441\nmodule.exports = DEREncoder;                                                                                          // 11442\n                                                                                                                      // 11443\nDEREncoder.prototype.encode = function encode(data, reporter) {                                                       // 11444\n  return this.tree._encode(data, reporter).join();                                                                    // 11445\n};                                                                                                                    // 11446\n                                                                                                                      // 11447\n// Tree methods                                                                                                       // 11448\n                                                                                                                      // 11449\nfunction DERNode(parent) {                                                                                            // 11450\n  base.Node.call(this, 'der', parent);                                                                                // 11451\n}                                                                                                                     // 11452\ninherits(DERNode, base.Node);                                                                                         // 11453\n                                                                                                                      // 11454\nDERNode.prototype._encodeComposite = function encodeComposite(tag,                                                    // 11455\n                                                              primitive,                                              // 11456\n                                                              cls,                                                    // 11457\n                                                              content) {                                              // 11458\n  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);                                                     // 11459\n                                                                                                                      // 11460\n  // Short form                                                                                                       // 11461\n  if (content.length < 0x80) {                                                                                        // 11462\n    var header = new Buffer(2);                                                                                       // 11463\n    header[0] = encodedTag;                                                                                           // 11464\n    header[1] = content.length;                                                                                       // 11465\n    return this._createEncoderBuffer([ header, content ]);                                                            // 11466\n  }                                                                                                                   // 11467\n                                                                                                                      // 11468\n  // Long form                                                                                                        // 11469\n  // Count octets required to store length                                                                            // 11470\n  var lenOctets = 1;                                                                                                  // 11471\n  for (var i = content.length; i >= 0x100; i >>= 8)                                                                   // 11472\n    lenOctets++;                                                                                                      // 11473\n                                                                                                                      // 11474\n  var header = new Buffer(1 + 1 + lenOctets);                                                                         // 11475\n  header[0] = encodedTag;                                                                                             // 11476\n  header[1] = 0x80 | lenOctets;                                                                                       // 11477\n                                                                                                                      // 11478\n  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)                                                // 11479\n    header[i] = j & 0xff;                                                                                             // 11480\n                                                                                                                      // 11481\n  return this._createEncoderBuffer([ header, content ]);                                                              // 11482\n};                                                                                                                    // 11483\n                                                                                                                      // 11484\nDERNode.prototype._encodeStr = function encodeStr(str, tag) {                                                         // 11485\n  if (tag === 'octstr')                                                                                               // 11486\n    return this._createEncoderBuffer(str);                                                                            // 11487\n  else if (tag === 'bitstr')                                                                                          // 11488\n    return this._createEncoderBuffer([ str.unused | 0, str.data ]);                                                   // 11489\n  else if (tag === 'ia5str')                                                                                          // 11490\n    return this._createEncoderBuffer(str);                                                                            // 11491\n  return this.reporter.error('Encoding of string type: ' + tag +                                                      // 11492\n                             ' unsupported');                                                                         // 11493\n};                                                                                                                    // 11494\n                                                                                                                      // 11495\nDERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {                                         // 11496\n  if (typeof id === 'string') {                                                                                       // 11497\n    if (!values)                                                                                                      // 11498\n      return this.reporter.error('string objid given, but no values map found');                                      // 11499\n    if (!values.hasOwnProperty(id))                                                                                   // 11500\n      return this.reporter.error('objid not found in values map');                                                    // 11501\n    id = values[id].split(/\\s+/g);                                                                                    // 11502\n    for (var i = 0; i < id.length; i++)                                                                               // 11503\n      id[i] |= 0;                                                                                                     // 11504\n  } else if (Array.isArray(id)) {                                                                                     // 11505\n    id = id.slice();                                                                                                  // 11506\n  }                                                                                                                   // 11507\n                                                                                                                      // 11508\n  if (!Array.isArray(id)) {                                                                                           // 11509\n    return this.reporter.error('objid() should be either array or string, ' +                                         // 11510\n                               'got: ' + JSON.stringify(id));                                                         // 11511\n  }                                                                                                                   // 11512\n                                                                                                                      // 11513\n  if (!relative) {                                                                                                    // 11514\n    if (id[1] >= 40)                                                                                                  // 11515\n      return this.reporter.error('Second objid identifier OOB');                                                      // 11516\n    id.splice(0, 2, id[0] * 40 + id[1]);                                                                              // 11517\n  }                                                                                                                   // 11518\n                                                                                                                      // 11519\n  // Count number of octets                                                                                           // 11520\n  var size = 0;                                                                                                       // 11521\n  for (var i = 0; i < id.length; i++) {                                                                               // 11522\n    var ident = id[i];                                                                                                // 11523\n    for (size++; ident >= 0x80; ident >>= 7)                                                                          // 11524\n      size++;                                                                                                         // 11525\n  }                                                                                                                   // 11526\n                                                                                                                      // 11527\n  var objid = new Buffer(size);                                                                                       // 11528\n  var offset = objid.length - 1;                                                                                      // 11529\n  for (var i = id.length - 1; i >= 0; i--) {                                                                          // 11530\n    var ident = id[i];                                                                                                // 11531\n    objid[offset--] = ident & 0x7f;                                                                                   // 11532\n    while ((ident >>= 7) > 0)                                                                                         // 11533\n      objid[offset--] = 0x80 | (ident & 0x7f);                                                                        // 11534\n  }                                                                                                                   // 11535\n                                                                                                                      // 11536\n  return this._createEncoderBuffer(objid);                                                                            // 11537\n};                                                                                                                    // 11538\n                                                                                                                      // 11539\nfunction two(num) {                                                                                                   // 11540\n  if (num <= 10)                                                                                                      // 11541\n    return '0' + num;                                                                                                 // 11542\n  else                                                                                                                // 11543\n    return num;                                                                                                       // 11544\n}                                                                                                                     // 11545\n                                                                                                                      // 11546\nDERNode.prototype._encodeTime = function encodeTime(time, tag) {                                                      // 11547\n  var str;                                                                                                            // 11548\n  var date = new Date(time);                                                                                          // 11549\n                                                                                                                      // 11550\n  if (tag === 'gentime') {                                                                                            // 11551\n    str = [                                                                                                           // 11552\n      date.getFullYear(),                                                                                             // 11553\n      two(date.getUTCMonth() + 1),                                                                                    // 11554\n      two(date.getUTCDate()),                                                                                         // 11555\n      two(date.getUTCHours()),                                                                                        // 11556\n      two(date.getUTCMinutes()),                                                                                      // 11557\n      two(date.getUTCSeconds()),                                                                                      // 11558\n      'Z'                                                                                                             // 11559\n    ].join('');                                                                                                       // 11560\n  } else if (tag === 'utctime') {                                                                                     // 11561\n    str = [                                                                                                           // 11562\n      date.getFullYear() % 100,                                                                                       // 11563\n      two(date.getUTCMonth() + 1),                                                                                    // 11564\n      two(date.getUTCDate()),                                                                                         // 11565\n      two(date.getUTCHours()),                                                                                        // 11566\n      two(date.getUTCMinutes()),                                                                                      // 11567\n      two(date.getUTCSeconds()),                                                                                      // 11568\n      'Z'                                                                                                             // 11569\n    ].join('');                                                                                                       // 11570\n  } else {                                                                                                            // 11571\n    this.reporter.error('Encoding ' + tag + ' time is not supported yet');                                            // 11572\n  }                                                                                                                   // 11573\n                                                                                                                      // 11574\n  return this._encodeStr(str, 'octstr');                                                                              // 11575\n};                                                                                                                    // 11576\n                                                                                                                      // 11577\nDERNode.prototype._encodeNull = function encodeNull() {                                                               // 11578\n  return this._createEncoderBuffer('');                                                                               // 11579\n};                                                                                                                    // 11580\n                                                                                                                      // 11581\nDERNode.prototype._encodeInt = function encodeInt(num, values) {                                                      // 11582\n  if (typeof num === 'string') {                                                                                      // 11583\n    if (!values)                                                                                                      // 11584\n      return this.reporter.error('String int or enum given, but no values map');                                      // 11585\n    if (!values.hasOwnProperty(num)) {                                                                                // 11586\n      return this.reporter.error('Values map doesn\\'t contain: ' +                                                    // 11587\n                                 JSON.stringify(num));                                                                // 11588\n    }                                                                                                                 // 11589\n    num = values[num];                                                                                                // 11590\n  }                                                                                                                   // 11591\n                                                                                                                      // 11592\n  // Bignum, assume big endian                                                                                        // 11593\n  if (bignum !== null && num instanceof bignum) {                                                                     // 11594\n    var numArray = num.toArray();                                                                                     // 11595\n    if(num.sign === false && numArray[0] & 0x80) {                                                                    // 11596\n      numArray.unshift(0);                                                                                            // 11597\n    }                                                                                                                 // 11598\n    num = new Buffer(numArray);                                                                                       // 11599\n  }                                                                                                                   // 11600\n                                                                                                                      // 11601\n  if (Buffer.isBuffer(num)) {                                                                                         // 11602\n    var size = num.length;                                                                                            // 11603\n    if (num.length === 0)                                                                                             // 11604\n      size++;                                                                                                         // 11605\n                                                                                                                      // 11606\n    var out = new Buffer(size);                                                                                       // 11607\n    num.copy(out);                                                                                                    // 11608\n    if (num.length === 0)                                                                                             // 11609\n      out[0] = 0                                                                                                      // 11610\n    return this._createEncoderBuffer(out);                                                                            // 11611\n  }                                                                                                                   // 11612\n                                                                                                                      // 11613\n  if (num < 0x80)                                                                                                     // 11614\n    return this._createEncoderBuffer(num);                                                                            // 11615\n                                                                                                                      // 11616\n  if (num < 0x100)                                                                                                    // 11617\n    return this._createEncoderBuffer([0, num]);                                                                       // 11618\n                                                                                                                      // 11619\n  var size = 1;                                                                                                       // 11620\n  for (var i = num; i >= 0x100; i >>= 8)                                                                              // 11621\n    size++;                                                                                                           // 11622\n                                                                                                                      // 11623\n  var out = new Array(size);                                                                                          // 11624\n  for (var i = out.length - 1; i >= 0; i--) {                                                                         // 11625\n    out[i] = num & 0xff;                                                                                              // 11626\n    num >>= 8;                                                                                                        // 11627\n  }                                                                                                                   // 11628\n  if(out[0] & 0x80) {                                                                                                 // 11629\n    out.unshift(0);                                                                                                   // 11630\n  }                                                                                                                   // 11631\n                                                                                                                      // 11632\n  return this._createEncoderBuffer(new Buffer(out));                                                                  // 11633\n};                                                                                                                    // 11634\n                                                                                                                      // 11635\nDERNode.prototype._encodeBool = function encodeBool(value) {                                                          // 11636\n  return this._createEncoderBuffer(value ? 0xff : 0);                                                                 // 11637\n};                                                                                                                    // 11638\n                                                                                                                      // 11639\nDERNode.prototype._use = function use(entity, obj) {                                                                  // 11640\n  if (typeof entity === 'function')                                                                                   // 11641\n    entity = entity(obj);                                                                                             // 11642\n  return entity._getEncoder('der').tree;                                                                              // 11643\n};                                                                                                                    // 11644\n                                                                                                                      // 11645\nDERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {                                 // 11646\n  var state = this._baseState;                                                                                        // 11647\n  var i;                                                                                                              // 11648\n  if (state['default'] === null)                                                                                      // 11649\n    return false;                                                                                                     // 11650\n                                                                                                                      // 11651\n  var data = dataBuffer.join();                                                                                       // 11652\n  if (state.defaultBuffer === undefined)                                                                              // 11653\n    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();                               // 11654\n                                                                                                                      // 11655\n  if (data.length !== state.defaultBuffer.length)                                                                     // 11656\n    return false;                                                                                                     // 11657\n                                                                                                                      // 11658\n  for (i=0; i < data.length; i++)                                                                                     // 11659\n    if (data[i] !== state.defaultBuffer[i])                                                                           // 11660\n      return false;                                                                                                   // 11661\n                                                                                                                      // 11662\n  return true;                                                                                                        // 11663\n};                                                                                                                    // 11664\n                                                                                                                      // 11665\n// Utility methods                                                                                                    // 11666\n                                                                                                                      // 11667\nfunction encodeTag(tag, primitive, cls, reporter) {                                                                   // 11668\n  var res;                                                                                                            // 11669\n                                                                                                                      // 11670\n  if (tag === 'seqof')                                                                                                // 11671\n    tag = 'seq';                                                                                                      // 11672\n  else if (tag === 'setof')                                                                                           // 11673\n    tag = 'set';                                                                                                      // 11674\n                                                                                                                      // 11675\n  if (der.tagByName.hasOwnProperty(tag))                                                                              // 11676\n    res = der.tagByName[tag];                                                                                         // 11677\n  else if (typeof tag === 'number' && (tag | 0) === tag)                                                              // 11678\n    res = tag;                                                                                                        // 11679\n  else                                                                                                                // 11680\n    return reporter.error('Unknown tag: ' + tag);                                                                     // 11681\n                                                                                                                      // 11682\n  if (res >= 0x1f)                                                                                                    // 11683\n    return reporter.error('Multi-octet tag encoding unsupported');                                                    // 11684\n                                                                                                                      // 11685\n  if (!primitive)                                                                                                     // 11686\n    res |= 0x20;                                                                                                      // 11687\n                                                                                                                      // 11688\n  res |= (der.tagClassByName[cls || 'universal'] << 6);                                                               // 11689\n                                                                                                                      // 11690\n  return res;                                                                                                         // 11691\n}                                                                                                                     // 11692\n                                                                                                                      // 11693\n},{\"../../asn1\":55,\"buffer\":2,\"inherits\":144}],66:[function(require,module,exports){                                  // 11694\nvar encoders = exports;                                                                                               // 11695\n                                                                                                                      // 11696\nencoders.der = require('./der');                                                                                      // 11697\n                                                                                                                      // 11698\n},{\"./der\":65}],67:[function(require,module,exports){                                                                 // 11699\nmodule.exports = assert;                                                                                              // 11700\n                                                                                                                      // 11701\nfunction assert(val, msg) {                                                                                           // 11702\n  if (!val)                                                                                                           // 11703\n    throw new Error(msg || 'Assertion failed');                                                                       // 11704\n}                                                                                                                     // 11705\n                                                                                                                      // 11706\nassert.equal = function assertEqual(l, r, msg) {                                                                      // 11707\n  if (l != r)                                                                                                         // 11708\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));                                                  // 11709\n};                                                                                                                    // 11710\n                                                                                                                      // 11711\n},{}],68:[function(require,module,exports){                                                                           // 11712\n(function (Buffer){                                                                                                   // 11713\nvar createHmac = require('create-hmac')                                                                               // 11714\n                                                                                                                      // 11715\nexports.pbkdf2 = pbkdf2                                                                                               // 11716\nfunction pbkdf2 (password, salt, iterations, keylen, digest, callback) {                                              // 11717\n  if (typeof digest === 'function') {                                                                                 // 11718\n    callback = digest                                                                                                 // 11719\n    digest = undefined                                                                                                // 11720\n  }                                                                                                                   // 11721\n                                                                                                                      // 11722\n  if (typeof callback !== 'function') {                                                                               // 11723\n    throw new Error('No callback provided to pbkdf2')                                                                 // 11724\n  }                                                                                                                   // 11725\n                                                                                                                      // 11726\n  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)                                                 // 11727\n  setTimeout(function () {                                                                                            // 11728\n    callback(undefined, result)                                                                                       // 11729\n  })                                                                                                                  // 11730\n}                                                                                                                     // 11731\n                                                                                                                      // 11732\nexports.pbkdf2Sync = pbkdf2Sync                                                                                       // 11733\nfunction pbkdf2Sync (password, salt, iterations, keylen, digest) {                                                    // 11734\n  if (typeof iterations !== 'number')                                                                                 // 11735\n    throw new TypeError('Iterations not a number')                                                                    // 11736\n                                                                                                                      // 11737\n  if (iterations < 0)                                                                                                 // 11738\n    throw new TypeError('Bad iterations')                                                                             // 11739\n                                                                                                                      // 11740\n  if (typeof keylen !== 'number')                                                                                     // 11741\n    throw new TypeError('Key length not a number')                                                                    // 11742\n                                                                                                                      // 11743\n  if (keylen < 0)                                                                                                     // 11744\n    throw new TypeError('Bad key length')                                                                             // 11745\n                                                                                                                      // 11746\n  digest = digest || 'sha1'                                                                                           // 11747\n                                                                                                                      // 11748\n  if (!Buffer.isBuffer(password)) password = new Buffer(password)                                                     // 11749\n  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)                                                                 // 11750\n                                                                                                                      // 11751\n  var hLen                                                                                                            // 11752\n  var l = 1                                                                                                           // 11753\n  var DK = new Buffer(keylen)                                                                                         // 11754\n  var block1 = new Buffer(salt.length + 4)                                                                            // 11755\n  salt.copy(block1, 0, 0, salt.length)                                                                                // 11756\n                                                                                                                      // 11757\n  var r                                                                                                               // 11758\n  var T                                                                                                               // 11759\n                                                                                                                      // 11760\n  for (var i = 1; i <= l; i++) {                                                                                      // 11761\n    block1.writeUInt32BE(i, salt.length)                                                                              // 11762\n    var U = createHmac(digest, password).update(block1).digest()                                                      // 11763\n                                                                                                                      // 11764\n    if (!hLen) {                                                                                                      // 11765\n      hLen = U.length                                                                                                 // 11766\n      T = new Buffer(hLen)                                                                                            // 11767\n      l = Math.ceil(keylen / hLen)                                                                                    // 11768\n      r = keylen - (l - 1) * hLen                                                                                     // 11769\n                                                                                                                      // 11770\n      if (keylen > (Math.pow(2, 32) - 1) * hLen)                                                                      // 11771\n        throw new TypeError('keylen exceeds maximum length')                                                          // 11772\n    }                                                                                                                 // 11773\n                                                                                                                      // 11774\n    U.copy(T, 0, 0, hLen)                                                                                             // 11775\n                                                                                                                      // 11776\n    for (var j = 1; j < iterations; j++) {                                                                            // 11777\n      U = createHmac(digest, password).update(U).digest()                                                             // 11778\n                                                                                                                      // 11779\n      for (var k = 0; k < hLen; k++) {                                                                                // 11780\n        T[k] ^= U[k]                                                                                                  // 11781\n      }                                                                                                               // 11782\n    }                                                                                                                 // 11783\n                                                                                                                      // 11784\n    var destPos = (i - 1) * hLen                                                                                      // 11785\n    var len = (i === l ? r : hLen)                                                                                    // 11786\n    T.copy(DK, destPos, 0, len)                                                                                       // 11787\n  }                                                                                                                   // 11788\n                                                                                                                      // 11789\n  return DK                                                                                                           // 11790\n}                                                                                                                     // 11791\n                                                                                                                      // 11792\n}).call(this,require(\"buffer\").Buffer)                                                                                // 11793\n                                                                                                                      // 11794\n},{\"buffer\":2,\"create-hmac\":106}],69:[function(require,module,exports){                                               // 11795\n(function (Buffer){                                                                                                   // 11796\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js                              // 11797\nvar parseKeys = require('parse-asn1')                                                                                 // 11798\nvar BN = require('bn.js')                                                                                             // 11799\nvar elliptic = require('elliptic')                                                                                    // 11800\nvar crt = require('browserify-rsa')                                                                                   // 11801\nvar createHmac = require('create-hmac')                                                                               // 11802\nvar curves = require('./curves')                                                                                      // 11803\n                                                                                                                      // 11804\nmodule.exports = sign                                                                                                 // 11805\nfunction sign (hash, key, hashType, signType) {                                                                       // 11806\n  var priv = parseKeys(key)                                                                                           // 11807\n  if (priv.curve) {                                                                                                   // 11808\n    if (signType !== 'ecdsa') {                                                                                       // 11809\n      throw new Error('wrong public key type')                                                                        // 11810\n    }                                                                                                                 // 11811\n    return ecSign(hash, priv)                                                                                         // 11812\n  } else if (priv.type === 'dsa') {                                                                                   // 11813\n    return dsaSign(hash, priv, hashType)                                                                              // 11814\n    if (signType !== 'dsa') {                                                                                         // 11815\n      throw new Error('wrong public key type')                                                                        // 11816\n    }                                                                                                                 // 11817\n  } else {                                                                                                            // 11818\n    if (signType !== 'rsa') {                                                                                         // 11819\n      throw new Error('wrong public key type')                                                                        // 11820\n    }                                                                                                                 // 11821\n  }                                                                                                                   // 11822\n  var len = priv.modulus.byteLength()                                                                                 // 11823\n  var pad = [ 0, 1 ]                                                                                                  // 11824\n  while (hash.length + pad.length + 1 < len) {                                                                        // 11825\n    pad.push(0xff)                                                                                                    // 11826\n  }                                                                                                                   // 11827\n  pad.push(0x00)                                                                                                      // 11828\n  var i = -1                                                                                                          // 11829\n  while (++i < hash.length) {                                                                                         // 11830\n    pad.push(hash[i])                                                                                                 // 11831\n  }                                                                                                                   // 11832\n                                                                                                                      // 11833\n  var out = crt(pad, priv)                                                                                            // 11834\n  return out                                                                                                          // 11835\n}                                                                                                                     // 11836\nfunction ecSign (hash, priv) {                                                                                        // 11837\n  var curveId = curves[priv.curve.join('.')]                                                                          // 11838\n  if (!curveId)                                                                                                       // 11839\n    throw new Error('unknown curve ' + priv.curve.join('.'))                                                          // 11840\n                                                                                                                      // 11841\n  var curve = new elliptic.ec(curveId)                                                                                // 11842\n                                                                                                                      // 11843\n  var key = curve.genKeyPair()                                                                                        // 11844\n  key._importPrivate(priv.privateKey)                                                                                 // 11845\n  var out = key.sign(hash)                                                                                            // 11846\n  return new Buffer(out.toDER())                                                                                      // 11847\n}                                                                                                                     // 11848\nfunction dsaSign (hash, priv, algo) {                                                                                 // 11849\n  var x = priv.params.priv_key                                                                                        // 11850\n  var p = priv.params.p                                                                                               // 11851\n  var q = priv.params.q                                                                                               // 11852\n  var montq = BN.mont(q)                                                                                              // 11853\n  var g = priv.params.g                                                                                               // 11854\n  var r = new BN(0)                                                                                                   // 11855\n  var k                                                                                                               // 11856\n  var H = bits2int(hash, q).mod(q)                                                                                    // 11857\n  var s = false                                                                                                       // 11858\n  var kv = getKey(x, q, hash, algo)                                                                                   // 11859\n  while (s === false) {                                                                                               // 11860\n    k = makeKey(q, kv, algo)                                                                                          // 11861\n    r = makeR(g, k, p, q)                                                                                             // 11862\n    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)                                                                        // 11863\n    if (!s.cmpn(0)) {                                                                                                 // 11864\n      s = false                                                                                                       // 11865\n      r = new BN(0)                                                                                                   // 11866\n    }                                                                                                                 // 11867\n  }                                                                                                                   // 11868\n  return toDER(r, s)                                                                                                  // 11869\n}                                                                                                                     // 11870\nfunction toDER (r, s) {                                                                                               // 11871\n  r = r.toArray()                                                                                                     // 11872\n  s = s.toArray()                                                                                                     // 11873\n                                                                                                                      // 11874\n  // Pad values                                                                                                       // 11875\n  if (r[0] & 0x80)                                                                                                    // 11876\n    r = [ 0 ].concat(r)                                                                                               // 11877\n  // Pad values                                                                                                       // 11878\n  if (s[0] & 0x80)                                                                                                    // 11879\n    s = [0].concat(s)                                                                                                 // 11880\n                                                                                                                      // 11881\n  var total = r.length + s.length + 4                                                                                 // 11882\n  var res = [ 0x30, total, 0x02, r.length ]                                                                           // 11883\n  res = res.concat(r, [ 0x02, s.length ], s)                                                                          // 11884\n  return new Buffer(res)                                                                                              // 11885\n}                                                                                                                     // 11886\nmodule.exports.getKey = getKey                                                                                        // 11887\nfunction getKey (x, q, hash, algo) {                                                                                  // 11888\n  x = new Buffer(x.toArray())                                                                                         // 11889\n  if (x.length < q.byteLength()) {                                                                                    // 11890\n    var zeros = new Buffer(q.byteLength() - x.length)                                                                 // 11891\n    zeros.fill(0)                                                                                                     // 11892\n    x = Buffer.concat([zeros, x])                                                                                     // 11893\n  }                                                                                                                   // 11894\n  var hlen = hash.length                                                                                              // 11895\n  var hbits = bits2octets(hash, q)                                                                                    // 11896\n  var v = new Buffer(hlen)                                                                                            // 11897\n  v.fill(1)                                                                                                           // 11898\n  var k = new Buffer(hlen)                                                                                            // 11899\n  k.fill(0)                                                                                                           // 11900\n  k = createHmac(algo, k)                                                                                             // 11901\n    .update(v)                                                                                                        // 11902\n    .update(new Buffer([0]))                                                                                          // 11903\n    .update(x)                                                                                                        // 11904\n    .update(hbits)                                                                                                    // 11905\n    .digest()                                                                                                         // 11906\n  v = createHmac(algo, k)                                                                                             // 11907\n    .update(v)                                                                                                        // 11908\n    .digest()                                                                                                         // 11909\n  k = createHmac(algo, k)                                                                                             // 11910\n    .update(v)                                                                                                        // 11911\n    .update(new Buffer([1]))                                                                                          // 11912\n    .update(x)                                                                                                        // 11913\n    .update(hbits)                                                                                                    // 11914\n    .digest()                                                                                                         // 11915\n  v = createHmac(algo, k)                                                                                             // 11916\n    .update(v)                                                                                                        // 11917\n    .digest()                                                                                                         // 11918\n  return {                                                                                                            // 11919\n    k: k,                                                                                                             // 11920\n    v: v                                                                                                              // 11921\n  }                                                                                                                   // 11922\n}                                                                                                                     // 11923\nfunction bits2int (obits, q) {                                                                                        // 11924\n  var bits = new BN(obits)                                                                                            // 11925\n  var shift = (obits.length << 3) - q.bitLength()                                                                     // 11926\n  if (shift > 0) {                                                                                                    // 11927\n    bits.ishrn(shift)                                                                                                 // 11928\n  }                                                                                                                   // 11929\n  return bits                                                                                                         // 11930\n}                                                                                                                     // 11931\nfunction bits2octets (bits, q) {                                                                                      // 11932\n  bits = bits2int(bits, q)                                                                                            // 11933\n  bits = bits.mod(q)                                                                                                  // 11934\n  var out = new Buffer(bits.toArray())                                                                                // 11935\n  if (out.length < q.byteLength()) {                                                                                  // 11936\n    var zeros = new Buffer(q.byteLength() - out.length)                                                               // 11937\n    zeros.fill(0)                                                                                                     // 11938\n    out = Buffer.concat([zeros, out])                                                                                 // 11939\n  }                                                                                                                   // 11940\n  return out                                                                                                          // 11941\n}                                                                                                                     // 11942\nmodule.exports.makeKey = makeKey                                                                                      // 11943\nfunction makeKey (q, kv, algo) {                                                                                      // 11944\n  var t                                                                                                               // 11945\n  var k                                                                                                               // 11946\n  while (true) {                                                                                                      // 11947\n    t = new Buffer('')                                                                                                // 11948\n    while (t.length * 8 < q.bitLength()) {                                                                            // 11949\n      kv.v = createHmac(algo, kv.k)                                                                                   // 11950\n        .update(kv.v)                                                                                                 // 11951\n        .digest()                                                                                                     // 11952\n      t = Buffer.concat([t, kv.v])                                                                                    // 11953\n    }                                                                                                                 // 11954\n    k = bits2int(t, q)                                                                                                // 11955\n    kv.k =  createHmac(algo, kv.k)                                                                                    // 11956\n        .update(kv.v)                                                                                                 // 11957\n        .update(new Buffer([0]))                                                                                      // 11958\n        .digest()                                                                                                     // 11959\n    kv.v = createHmac(algo, kv.k)                                                                                     // 11960\n        .update(kv.v)                                                                                                 // 11961\n        .digest()                                                                                                     // 11962\n    if (k.cmp(q) === -1) {                                                                                            // 11963\n      return k                                                                                                        // 11964\n    }                                                                                                                 // 11965\n  }                                                                                                                   // 11966\n}                                                                                                                     // 11967\nfunction makeR (g, k, p, q) {                                                                                         // 11968\n  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)                                                               // 11969\n}                                                                                                                     // 11970\n                                                                                                                      // 11971\n}).call(this,require(\"buffer\").Buffer)                                                                                // 11972\n                                                                                                                      // 11973\n},{\"./curves\":27,\"bn.js\":28,\"browserify-rsa\":29,\"buffer\":2,\"create-hmac\":106,\"elliptic\":30,\"parse-asn1\":54}],70:[function(require,module,exports){\n(function (Buffer){                                                                                                   // 11975\n'use strict'                                                                                                          // 11976\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js                              // 11977\nvar parseKeys = require('parse-asn1')                                                                                 // 11978\nvar elliptic = require('elliptic')                                                                                    // 11979\nvar curves = require('./curves')                                                                                      // 11980\nvar BN = require('bn.js')                                                                                             // 11981\nmodule.exports = verify                                                                                               // 11982\n                                                                                                                      // 11983\nfunction verify (sig, hash, key, signType) {                                                                          // 11984\n  var pub = parseKeys(key)                                                                                            // 11985\n  if (pub.type === 'ec') {                                                                                            // 11986\n    if (signType !== 'ecdsa') {                                                                                       // 11987\n      throw new Error('wrong public key type')                                                                        // 11988\n    }                                                                                                                 // 11989\n    return ecVerify(sig, hash, pub)                                                                                   // 11990\n  } else if (pub.type === 'dsa') {                                                                                    // 11991\n    if (signType !== 'dsa') {                                                                                         // 11992\n      throw new Error('wrong public key type')                                                                        // 11993\n    }                                                                                                                 // 11994\n    return dsaVerify(sig, hash, pub)                                                                                  // 11995\n  } else {                                                                                                            // 11996\n    if (signType !== 'rsa') {                                                                                         // 11997\n      throw new Error('wrong public key type')                                                                        // 11998\n    }                                                                                                                 // 11999\n  }                                                                                                                   // 12000\n  var len = pub.modulus.byteLength()                                                                                  // 12001\n  var pad = [ 1 ]                                                                                                     // 12002\n  var padNum = 0                                                                                                      // 12003\n  while (hash.length + pad.length + 2 < len) {                                                                        // 12004\n    pad.push(0xff)                                                                                                    // 12005\n    padNum++                                                                                                          // 12006\n  }                                                                                                                   // 12007\n  pad.push(0x00)                                                                                                      // 12008\n  var i = -1                                                                                                          // 12009\n  while (++i < hash.length) {                                                                                         // 12010\n    pad.push(hash[i])                                                                                                 // 12011\n  }                                                                                                                   // 12012\n  pad = new Buffer(pad)                                                                                               // 12013\n  var red = BN.mont(pub.modulus)                                                                                      // 12014\n  sig = new BN(sig).toRed(red)                                                                                        // 12015\n                                                                                                                      // 12016\n  sig = sig.redPow(new BN(pub.publicExponent))                                                                        // 12017\n                                                                                                                      // 12018\n  sig = new Buffer(sig.fromRed().toArray())                                                                           // 12019\n  var out = 0                                                                                                         // 12020\n  if (padNum < 8) {                                                                                                   // 12021\n    out = 1                                                                                                           // 12022\n  }                                                                                                                   // 12023\n  len = Math.min(sig.length, pad.length)                                                                              // 12024\n  if (sig.length !== pad.length) {                                                                                    // 12025\n    out = 1                                                                                                           // 12026\n  }                                                                                                                   // 12027\n                                                                                                                      // 12028\n  i = -1                                                                                                              // 12029\n  while (++i < len) {                                                                                                 // 12030\n    out |= (sig[i] ^ pad[i])                                                                                          // 12031\n  }                                                                                                                   // 12032\n  return out === 0                                                                                                    // 12033\n}                                                                                                                     // 12034\nfunction ecVerify (sig, hash, pub) {                                                                                  // 12035\n  var curveId = curves[pub.data.algorithm.curve.join('.')]                                                            // 12036\n  if (!curveId)                                                                                                       // 12037\n    throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))                                            // 12038\n                                                                                                                      // 12039\n  var curve = new elliptic.ec(curveId)                                                                                // 12040\n                                                                                                                      // 12041\n  var pubkey = pub.data.subjectPrivateKey.data                                                                        // 12042\n  return curve.verify(hash.toString('hex'), sig.toString('hex'), pubkey.toString('hex'))                              // 12043\n}                                                                                                                     // 12044\nfunction dsaVerify (sig, hash, pub) {                                                                                 // 12045\n  var p = pub.data.p                                                                                                  // 12046\n  var q = pub.data.q                                                                                                  // 12047\n  var g = pub.data.g                                                                                                  // 12048\n  var y = pub.data.pub_key                                                                                            // 12049\n  var unpacked = parseKeys.signature.decode(sig, 'der')                                                               // 12050\n  var s = unpacked.s                                                                                                  // 12051\n  var r = unpacked.r                                                                                                  // 12052\n  checkValue(s, q)                                                                                                    // 12053\n  checkValue(r, q)                                                                                                    // 12054\n  var montq = BN.mont(q)                                                                                              // 12055\n  var montp = BN.mont(p)                                                                                              // 12056\n  var w =  s.invm(q)                                                                                                  // 12057\n  var v = g.toRed(montp)                                                                                              // 12058\n  .redPow(new BN(hash).mul(w).mod(q))                                                                                 // 12059\n  .fromRed()                                                                                                          // 12060\n  .mul(                                                                                                               // 12061\n    y.toRed(montp)                                                                                                    // 12062\n    .redPow(r.mul(w).mod(q))                                                                                          // 12063\n    .fromRed()                                                                                                        // 12064\n  ).mod(p).mod(q)                                                                                                     // 12065\n  return !v.cmp(r)                                                                                                    // 12066\n}                                                                                                                     // 12067\nfunction checkValue (b, q) {                                                                                          // 12068\n  if (b.cmpn(0) <= 0) {                                                                                               // 12069\n    throw new Error('invalid sig')                                                                                    // 12070\n  }                                                                                                                   // 12071\n  if (b.cmp(q) >= q) {                                                                                                // 12072\n    throw new Error('invalid sig')                                                                                    // 12073\n  }                                                                                                                   // 12074\n}                                                                                                                     // 12075\n                                                                                                                      // 12076\n}).call(this,require(\"buffer\").Buffer)                                                                                // 12077\n                                                                                                                      // 12078\n},{\"./curves\":27,\"bn.js\":28,\"buffer\":2,\"elliptic\":30,\"parse-asn1\":54}],71:[function(require,module,exports){          // 12079\n(function (Buffer){                                                                                                   // 12080\nvar elliptic = require('elliptic');                                                                                   // 12081\nvar BN = require('bn.js');                                                                                            // 12082\n                                                                                                                      // 12083\nmodule.exports = function createECDH(curve) {                                                                         // 12084\n\treturn new ECDH(curve);                                                                                              // 12085\n};                                                                                                                    // 12086\n                                                                                                                      // 12087\nvar aliases = {                                                                                                       // 12088\n\tsecp256k1: {                                                                                                         // 12089\n\t\tname: 'secp256k1',                                                                                                  // 12090\n\t\tbyteLength: 32                                                                                                      // 12091\n\t},                                                                                                                   // 12092\n\tsecp224r1: {                                                                                                         // 12093\n\t\tname: 'p224',                                                                                                       // 12094\n\t\tbyteLength: 28                                                                                                      // 12095\n\t},                                                                                                                   // 12096\n\tprime256v1: {                                                                                                        // 12097\n\t\tname: 'p256',                                                                                                       // 12098\n\t\tbyteLength: 32                                                                                                      // 12099\n\t},                                                                                                                   // 12100\n\tprime192v1: {                                                                                                        // 12101\n\t\tname: 'p192',                                                                                                       // 12102\n\t\tbyteLength: 24                                                                                                      // 12103\n\t},                                                                                                                   // 12104\n\ted25519: {                                                                                                           // 12105\n\t\tname: 'ed25519',                                                                                                    // 12106\n\t\tbyteLength: 32                                                                                                      // 12107\n\t}                                                                                                                    // 12108\n};                                                                                                                    // 12109\n                                                                                                                      // 12110\naliases.p224 = aliases.secp224r1;                                                                                     // 12111\naliases.p256 = aliases.secp256r1 = aliases.prime256v1;                                                                // 12112\naliases.p192 = aliases.secp192r1 = aliases.prime192v1;                                                                // 12113\n                                                                                                                      // 12114\nfunction ECDH(curve) {                                                                                                // 12115\n\tthis.curveType = aliases[curve];                                                                                     // 12116\n\tif (!this.curveType ) {                                                                                              // 12117\n\t\tthis.curveType = {                                                                                                  // 12118\n\t\t\tname: curve                                                                                                        // 12119\n\t\t};                                                                                                                  // 12120\n\t}                                                                                                                    // 12121\n\tthis.curve = new elliptic.ec(this.curveType.name);                                                                   // 12122\n\tthis.keys = void 0;                                                                                                  // 12123\n}                                                                                                                     // 12124\n                                                                                                                      // 12125\nECDH.prototype.generateKeys = function (enc, format) {                                                                // 12126\n\tthis.keys = this.curve.genKeyPair();                                                                                 // 12127\n\treturn this.getPublicKey(enc, format);                                                                               // 12128\n};                                                                                                                    // 12129\n                                                                                                                      // 12130\nECDH.prototype.computeSecret = function (other, inenc, enc) {                                                         // 12131\n\tinenc = inenc || 'utf8';                                                                                             // 12132\n\tif (!Buffer.isBuffer(other)) {                                                                                       // 12133\n\t\tother = new Buffer(other, inenc);                                                                                   // 12134\n\t}                                                                                                                    // 12135\n\tother = new BN(other);                                                                                               // 12136\n\tother = other.toString(16);                                                                                          // 12137\n\tvar otherPub = this.curve.keyPair(other, 'hex').getPublic();                                                         // 12138\n\tvar out = otherPub.mul(this.keys.getPrivate()).getX();                                                               // 12139\n\treturn formatReturnValue(out, enc, this.curveType.byteLength);                                                       // 12140\n};                                                                                                                    // 12141\n                                                                                                                      // 12142\nECDH.prototype.getPublicKey = function (enc, format) {                                                                // 12143\n\tvar key = this.keys.getPublic(format === 'compressed', true);                                                        // 12144\n\tif (format === 'hybrid') {                                                                                           // 12145\n\t\tif (key[key.length - 1] % 2) {                                                                                      // 12146\n\t\t\tkey[0] = 7;                                                                                                        // 12147\n\t\t} else {                                                                                                            // 12148\n\t\t\tkey [0] = 6;                                                                                                       // 12149\n\t\t}                                                                                                                   // 12150\n\t}                                                                                                                    // 12151\n\treturn formatReturnValue(key, enc);                                                                                  // 12152\n};                                                                                                                    // 12153\n                                                                                                                      // 12154\nECDH.prototype.getPrivateKey = function (enc) {                                                                       // 12155\n\treturn formatReturnValue(this.keys.getPrivate(), enc);                                                               // 12156\n};                                                                                                                    // 12157\n                                                                                                                      // 12158\nECDH.prototype.setPublicKey = function (pub, enc) {                                                                   // 12159\n\tenc = enc || 'utf8';                                                                                                 // 12160\n\tif (!Buffer.isBuffer(pub)) {                                                                                         // 12161\n\t\tpub = new Buffer(pub, enc);                                                                                         // 12162\n\t}                                                                                                                    // 12163\n\tvar pkey = new BN(pub);                                                                                              // 12164\n\tpkey = pkey.toArray();                                                                                               // 12165\n\tthis.keys._importPublicHex(pkey);                                                                                    // 12166\n\treturn this;                                                                                                         // 12167\n};                                                                                                                    // 12168\n                                                                                                                      // 12169\nECDH.prototype.setPrivateKey = function (priv, enc) {                                                                 // 12170\n\tenc = enc || 'utf8';                                                                                                 // 12171\n\tif (!Buffer.isBuffer(priv)) {                                                                                        // 12172\n\t\tpriv = new Buffer(priv, enc);                                                                                       // 12173\n\t}                                                                                                                    // 12174\n\tvar _priv = new BN(priv);                                                                                            // 12175\n\t_priv = _priv.toString(16);                                                                                          // 12176\n\tthis.keys._importPrivate(_priv);                                                                                     // 12177\n\treturn this;                                                                                                         // 12178\n};                                                                                                                    // 12179\n                                                                                                                      // 12180\nfunction formatReturnValue(bn, enc, len) {                                                                            // 12181\n\tif (!Array.isArray(bn)) {                                                                                            // 12182\n\t\tbn = bn.toArray();                                                                                                  // 12183\n\t}                                                                                                                    // 12184\n\tvar buf = new Buffer(bn);                                                                                            // 12185\n\tif (len && buf.length < len) {                                                                                       // 12186\n\t\tvar zeros = new Buffer(len - buf.length);                                                                           // 12187\n\t\tzeros.fill(0);                                                                                                      // 12188\n\t\tbuf = Buffer.concat([zeros, buf]);                                                                                  // 12189\n\t}                                                                                                                    // 12190\n\tif (!enc) {                                                                                                          // 12191\n\t\treturn buf;                                                                                                         // 12192\n\t} else {                                                                                                             // 12193\n\t\treturn buf.toString(enc);                                                                                           // 12194\n\t}                                                                                                                    // 12195\n}                                                                                                                     // 12196\n}).call(this,require(\"buffer\").Buffer)                                                                                // 12197\n                                                                                                                      // 12198\n},{\"bn.js\":73,\"buffer\":2,\"elliptic\":74}],72:[function(require,module,exports){                                        // 12199\nvar createECDH = require('crypto').createECDH;                                                                        // 12200\n                                                                                                                      // 12201\nmodule.exports = createECDH || require('./browser');                                                                  // 12202\n},{\"./browser\":71,\"crypto\":6}],73:[function(require,module,exports){                                                  // 12203\narguments[4][28][0].apply(exports,arguments)                                                                          // 12204\n},{\"dup\":28}],74:[function(require,module,exports){                                                                   // 12205\narguments[4][30][0].apply(exports,arguments)                                                                          // 12206\n},{\"../package.json\":93,\"./elliptic/curve\":77,\"./elliptic/curves\":80,\"./elliptic/ec\":81,\"./elliptic/hmac-drbg\":84,\"./elliptic/utils\":85,\"brorand\":86,\"dup\":30}],75:[function(require,module,exports){\narguments[4][31][0].apply(exports,arguments)                                                                          // 12208\n},{\"../../elliptic\":74,\"bn.js\":73,\"dup\":31}],76:[function(require,module,exports){                                    // 12209\narguments[4][32][0].apply(exports,arguments)                                                                          // 12210\n},{\"../../elliptic\":74,\"../curve\":77,\"bn.js\":73,\"dup\":32,\"inherits\":144}],77:[function(require,module,exports){       // 12211\narguments[4][33][0].apply(exports,arguments)                                                                          // 12212\n},{\"./base\":75,\"./edwards\":76,\"./mont\":78,\"./short\":79,\"dup\":33}],78:[function(require,module,exports){               // 12213\narguments[4][34][0].apply(exports,arguments)                                                                          // 12214\n},{\"../../elliptic\":74,\"../curve\":77,\"bn.js\":73,\"dup\":34,\"inherits\":144}],79:[function(require,module,exports){       // 12215\narguments[4][35][0].apply(exports,arguments)                                                                          // 12216\n},{\"../../elliptic\":74,\"../curve\":77,\"bn.js\":73,\"dup\":35,\"inherits\":144}],80:[function(require,module,exports){       // 12217\narguments[4][36][0].apply(exports,arguments)                                                                          // 12218\n},{\"../elliptic\":74,\"bn.js\":73,\"dup\":36,\"hash.js\":87}],81:[function(require,module,exports){                          // 12219\narguments[4][37][0].apply(exports,arguments)                                                                          // 12220\n},{\"../../elliptic\":74,\"./key\":82,\"./signature\":83,\"bn.js\":73,\"dup\":37}],82:[function(require,module,exports){        // 12221\narguments[4][38][0].apply(exports,arguments)                                                                          // 12222\n},{\"../../elliptic\":74,\"bn.js\":73,\"dup\":38}],83:[function(require,module,exports){                                    // 12223\narguments[4][39][0].apply(exports,arguments)                                                                          // 12224\n},{\"../../elliptic\":74,\"bn.js\":73,\"dup\":39}],84:[function(require,module,exports){                                    // 12225\narguments[4][40][0].apply(exports,arguments)                                                                          // 12226\n},{\"../elliptic\":74,\"dup\":40,\"hash.js\":87}],85:[function(require,module,exports){                                     // 12227\narguments[4][41][0].apply(exports,arguments)                                                                          // 12228\n},{\"bn.js\":73,\"dup\":41}],86:[function(require,module,exports){                                                        // 12229\narguments[4][42][0].apply(exports,arguments)                                                                          // 12230\n},{\"dup\":42}],87:[function(require,module,exports){                                                                   // 12231\narguments[4][43][0].apply(exports,arguments)                                                                          // 12232\n},{\"./hash/common\":88,\"./hash/hmac\":89,\"./hash/ripemd\":90,\"./hash/sha\":91,\"./hash/utils\":92,\"dup\":43}],88:[function(require,module,exports){\narguments[4][44][0].apply(exports,arguments)                                                                          // 12234\n},{\"../hash\":87,\"dup\":44}],89:[function(require,module,exports){                                                      // 12235\narguments[4][45][0].apply(exports,arguments)                                                                          // 12236\n},{\"../hash\":87,\"dup\":45}],90:[function(require,module,exports){                                                      // 12237\narguments[4][46][0].apply(exports,arguments)                                                                          // 12238\n},{\"../hash\":87,\"dup\":46}],91:[function(require,module,exports){                                                      // 12239\narguments[4][47][0].apply(exports,arguments)                                                                          // 12240\n},{\"../hash\":87,\"dup\":47}],92:[function(require,module,exports){                                                      // 12241\narguments[4][48][0].apply(exports,arguments)                                                                          // 12242\n},{\"dup\":48,\"inherits\":144}],93:[function(require,module,exports){                                                    // 12243\narguments[4][49][0].apply(exports,arguments)                                                                          // 12244\n},{\"dup\":49}],94:[function(require,module,exports){                                                                   // 12245\n(function (Buffer){                                                                                                   // 12246\n'use strict';                                                                                                         // 12247\nvar inherits = require('inherits')                                                                                    // 12248\nvar md5 = require('./md5')                                                                                            // 12249\nvar rmd160 = require('ripemd160')                                                                                     // 12250\nvar sha = require('sha.js')                                                                                           // 12251\n                                                                                                                      // 12252\nvar Transform = require('stream').Transform                                                                           // 12253\n                                                                                                                      // 12254\nfunction HashNoConstructor(hash) {                                                                                    // 12255\n  Transform.call(this)                                                                                                // 12256\n                                                                                                                      // 12257\n  this._hash = hash                                                                                                   // 12258\n  this.buffers = []                                                                                                   // 12259\n}                                                                                                                     // 12260\n                                                                                                                      // 12261\ninherits(HashNoConstructor, Transform)                                                                                // 12262\n                                                                                                                      // 12263\nHashNoConstructor.prototype._transform = function (data, _, next) {                                                   // 12264\n  this.buffers.push(data)                                                                                             // 12265\n                                                                                                                      // 12266\n  next()                                                                                                              // 12267\n}                                                                                                                     // 12268\n                                                                                                                      // 12269\nHashNoConstructor.prototype._flush = function (next) {                                                                // 12270\n  this.push(this.digest())                                                                                            // 12271\n  next()                                                                                                              // 12272\n}                                                                                                                     // 12273\n                                                                                                                      // 12274\nHashNoConstructor.prototype.update = function (data, enc) {                                                           // 12275\n  if (typeof data === 'string') {                                                                                     // 12276\n    data = new Buffer(data, enc)                                                                                      // 12277\n  }                                                                                                                   // 12278\n                                                                                                                      // 12279\n  this.buffers.push(data)                                                                                             // 12280\n  return this                                                                                                         // 12281\n}                                                                                                                     // 12282\n                                                                                                                      // 12283\nHashNoConstructor.prototype.digest = function (enc) {                                                                 // 12284\n  var buf = Buffer.concat(this.buffers)                                                                               // 12285\n  var r = this._hash(buf)                                                                                             // 12286\n  this.buffers = null                                                                                                 // 12287\n                                                                                                                      // 12288\n  return enc ? r.toString(enc) : r                                                                                    // 12289\n}                                                                                                                     // 12290\n                                                                                                                      // 12291\nfunction Hash(hash) {                                                                                                 // 12292\n  Transform.call(this)                                                                                                // 12293\n                                                                                                                      // 12294\n  this._hash = hash                                                                                                   // 12295\n}                                                                                                                     // 12296\n                                                                                                                      // 12297\ninherits(Hash, Transform)                                                                                             // 12298\n                                                                                                                      // 12299\nHash.prototype._transform = function (data, enc, next) {                                                              // 12300\n  if (enc) data = new Buffer(data, enc)                                                                               // 12301\n                                                                                                                      // 12302\n  this._hash.update(data)                                                                                             // 12303\n                                                                                                                      // 12304\n  next()                                                                                                              // 12305\n}                                                                                                                     // 12306\n                                                                                                                      // 12307\nHash.prototype._flush = function (next) {                                                                             // 12308\n  this.push(this._hash.digest())                                                                                      // 12309\n  this._hash = null                                                                                                   // 12310\n                                                                                                                      // 12311\n  next()                                                                                                              // 12312\n}                                                                                                                     // 12313\n                                                                                                                      // 12314\nHash.prototype.update = function (data, enc) {                                                                        // 12315\n  if (typeof data === 'string') {                                                                                     // 12316\n    data = new Buffer(data, enc)                                                                                      // 12317\n  }                                                                                                                   // 12318\n                                                                                                                      // 12319\n  this._hash.update(data)                                                                                             // 12320\n  return this                                                                                                         // 12321\n}                                                                                                                     // 12322\n                                                                                                                      // 12323\nHash.prototype.digest = function (enc) {                                                                              // 12324\n  var outData = this._hash.digest()                                                                                   // 12325\n                                                                                                                      // 12326\n  return enc ? outData.toString(enc) : outData                                                                        // 12327\n}                                                                                                                     // 12328\n                                                                                                                      // 12329\nmodule.exports = function createHash (alg) {                                                                          // 12330\n  if ('md5' === alg) return new HashNoConstructor(md5)                                                                // 12331\n  if ('rmd160' === alg) return new HashNoConstructor(rmd160)                                                          // 12332\n                                                                                                                      // 12333\n  return new Hash(sha(alg))                                                                                           // 12334\n}                                                                                                                     // 12335\n                                                                                                                      // 12336\n}).call(this,require(\"buffer\").Buffer)                                                                                // 12337\n                                                                                                                      // 12338\n},{\"./md5\":96,\"buffer\":2,\"inherits\":144,\"ripemd160\":97,\"sha.js\":99,\"stream\":158}],95:[function(require,module,exports){\n(function (Buffer){                                                                                                   // 12340\n'use strict';                                                                                                         // 12341\nvar intSize = 4;                                                                                                      // 12342\nvar zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);                                                             // 12343\nvar chrsz = 8;                                                                                                        // 12344\n                                                                                                                      // 12345\nfunction toArray(buf, bigEndian) {                                                                                    // 12346\n  if ((buf.length % intSize) !== 0) {                                                                                 // 12347\n    var len = buf.length + (intSize - (buf.length % intSize));                                                        // 12348\n    buf = Buffer.concat([buf, zeroBuffer], len);                                                                      // 12349\n  }                                                                                                                   // 12350\n                                                                                                                      // 12351\n  var arr = [];                                                                                                       // 12352\n  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;                                                             // 12353\n  for (var i = 0; i < buf.length; i += intSize) {                                                                     // 12354\n    arr.push(fn.call(buf, i));                                                                                        // 12355\n  }                                                                                                                   // 12356\n  return arr;                                                                                                         // 12357\n}                                                                                                                     // 12358\n                                                                                                                      // 12359\nfunction toBuffer(arr, size, bigEndian) {                                                                             // 12360\n  var buf = new Buffer(size);                                                                                         // 12361\n  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;                                                           // 12362\n  for (var i = 0; i < arr.length; i++) {                                                                              // 12363\n    fn.call(buf, arr[i], i * 4, true);                                                                                // 12364\n  }                                                                                                                   // 12365\n  return buf;                                                                                                         // 12366\n}                                                                                                                     // 12367\n                                                                                                                      // 12368\nfunction hash(buf, fn, hashSize, bigEndian) {                                                                         // 12369\n  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);                                                                   // 12370\n  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);                                                          // 12371\n  return toBuffer(arr, hashSize, bigEndian);                                                                          // 12372\n}                                                                                                                     // 12373\nexports.hash = hash;                                                                                                  // 12374\n}).call(this,require(\"buffer\").Buffer)                                                                                // 12375\n                                                                                                                      // 12376\n},{\"buffer\":2}],96:[function(require,module,exports){                                                                 // 12377\n'use strict';                                                                                                         // 12378\n/*                                                                                                                    // 12379\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message                                             // 12380\n * Digest Algorithm, as defined in RFC 1321.                                                                          // 12381\n * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.                                                               // 12382\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet                                                      // 12383\n * Distributed under the BSD License                                                                                  // 12384\n * See http://pajhome.org.uk/crypt/md5 for more info.                                                                 // 12385\n */                                                                                                                   // 12386\n                                                                                                                      // 12387\nvar helpers = require('./helpers');                                                                                   // 12388\n                                                                                                                      // 12389\n/*                                                                                                                    // 12390\n * Calculate the MD5 of an array of little-endian words, and a bit length                                             // 12391\n */                                                                                                                   // 12392\nfunction core_md5(x, len)                                                                                             // 12393\n{                                                                                                                     // 12394\n  /* append padding */                                                                                                // 12395\n  x[len >> 5] |= 0x80 << ((len) % 32);                                                                                // 12396\n  x[(((len + 64) >>> 9) << 4) + 14] = len;                                                                            // 12397\n                                                                                                                      // 12398\n  var a =  1732584193;                                                                                                // 12399\n  var b = -271733879;                                                                                                 // 12400\n  var c = -1732584194;                                                                                                // 12401\n  var d =  271733878;                                                                                                 // 12402\n                                                                                                                      // 12403\n  for(var i = 0; i < x.length; i += 16)                                                                               // 12404\n  {                                                                                                                   // 12405\n    var olda = a;                                                                                                     // 12406\n    var oldb = b;                                                                                                     // 12407\n    var oldc = c;                                                                                                     // 12408\n    var oldd = d;                                                                                                     // 12409\n                                                                                                                      // 12410\n    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);                                                                  // 12411\n    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);                                                                  // 12412\n    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);                                                                  // 12413\n    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);                                                                 // 12414\n    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);                                                                  // 12415\n    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);                                                                 // 12416\n    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);                                                                 // 12417\n    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);                                                                   // 12418\n    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);                                                                 // 12419\n    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);                                                                 // 12420\n    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);                                                                      // 12421\n    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);                                                                 // 12422\n    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);                                                                 // 12423\n    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);                                                                   // 12424\n    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);                                                                 // 12425\n    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);                                                                 // 12426\n                                                                                                                      // 12427\n    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);                                                                  // 12428\n    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);                                                                 // 12429\n    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);                                                                  // 12430\n    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);                                                                  // 12431\n    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);                                                                  // 12432\n    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);                                                                   // 12433\n    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);                                                                  // 12434\n    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);                                                                  // 12435\n    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);                                                                  // 12436\n    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);                                                                 // 12437\n    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);                                                                  // 12438\n    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);                                                                 // 12439\n    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);                                                                 // 12440\n    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);                                                                   // 12441\n    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);                                                                 // 12442\n    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);                                                                 // 12443\n                                                                                                                      // 12444\n    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);                                                                     // 12445\n    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);                                                                 // 12446\n    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);                                                                 // 12447\n    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);                                                                   // 12448\n    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);                                                                 // 12449\n    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);                                                                 // 12450\n    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);                                                                  // 12451\n    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);                                                                 // 12452\n    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);                                                                  // 12453\n    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);                                                                  // 12454\n    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);                                                                  // 12455\n    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);                                                                   // 12456\n    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);                                                                  // 12457\n    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);                                                                  // 12458\n    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);                                                                  // 12459\n    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);                                                                  // 12460\n                                                                                                                      // 12461\n    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);                                                                  // 12462\n    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);                                                                 // 12463\n    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);                                                                 // 12464\n    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);                                                                   // 12465\n    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);                                                                 // 12466\n    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);                                                                 // 12467\n    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);                                                                    // 12468\n    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);                                                                 // 12469\n    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);                                                                 // 12470\n    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);                                                                   // 12471\n    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);                                                                 // 12472\n    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);                                                                 // 12473\n    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);                                                                  // 12474\n    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);                                                                 // 12475\n    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);                                                                  // 12476\n    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);                                                                  // 12477\n                                                                                                                      // 12478\n    a = safe_add(a, olda);                                                                                            // 12479\n    b = safe_add(b, oldb);                                                                                            // 12480\n    c = safe_add(c, oldc);                                                                                            // 12481\n    d = safe_add(d, oldd);                                                                                            // 12482\n  }                                                                                                                   // 12483\n  return Array(a, b, c, d);                                                                                           // 12484\n                                                                                                                      // 12485\n}                                                                                                                     // 12486\n                                                                                                                      // 12487\n/*                                                                                                                    // 12488\n * These functions implement the four basic operations the algorithm uses.                                            // 12489\n */                                                                                                                   // 12490\nfunction md5_cmn(q, a, b, x, s, t)                                                                                    // 12491\n{                                                                                                                     // 12492\n  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);                                            // 12493\n}                                                                                                                     // 12494\nfunction md5_ff(a, b, c, d, x, s, t)                                                                                  // 12495\n{                                                                                                                     // 12496\n  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);                                                                // 12497\n}                                                                                                                     // 12498\nfunction md5_gg(a, b, c, d, x, s, t)                                                                                  // 12499\n{                                                                                                                     // 12500\n  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);                                                                // 12501\n}                                                                                                                     // 12502\nfunction md5_hh(a, b, c, d, x, s, t)                                                                                  // 12503\n{                                                                                                                     // 12504\n  return md5_cmn(b ^ c ^ d, a, b, x, s, t);                                                                           // 12505\n}                                                                                                                     // 12506\nfunction md5_ii(a, b, c, d, x, s, t)                                                                                  // 12507\n{                                                                                                                     // 12508\n  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);                                                                      // 12509\n}                                                                                                                     // 12510\n                                                                                                                      // 12511\n/*                                                                                                                    // 12512\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally                                             // 12513\n * to work around bugs in some JS interpreters.                                                                       // 12514\n */                                                                                                                   // 12515\nfunction safe_add(x, y)                                                                                               // 12516\n{                                                                                                                     // 12517\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);                                                                              // 12518\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);                                                                      // 12519\n  return (msw << 16) | (lsw & 0xFFFF);                                                                                // 12520\n}                                                                                                                     // 12521\n                                                                                                                      // 12522\n/*                                                                                                                    // 12523\n * Bitwise rotate a 32-bit number to the left.                                                                        // 12524\n */                                                                                                                   // 12525\nfunction bit_rol(num, cnt)                                                                                            // 12526\n{                                                                                                                     // 12527\n  return (num << cnt) | (num >>> (32 - cnt));                                                                         // 12528\n}                                                                                                                     // 12529\n                                                                                                                      // 12530\nmodule.exports = function md5(buf) {                                                                                  // 12531\n  return helpers.hash(buf, core_md5, 16);                                                                             // 12532\n};                                                                                                                    // 12533\n},{\"./helpers\":95}],97:[function(require,module,exports){                                                             // 12534\n(function (Buffer){                                                                                                   // 12535\n/*                                                                                                                    // 12536\nCryptoJS v3.1.2                                                                                                       // 12537\ncode.google.com/p/crypto-js                                                                                           // 12538\n(c) 2009-2013 by Jeff Mott. All rights reserved.                                                                      // 12539\ncode.google.com/p/crypto-js/wiki/License                                                                              // 12540\n*/                                                                                                                    // 12541\n/** @preserve                                                                                                         // 12542\n(c) 2012 by Cédric Mesnil. All rights reserved.                                                                       // 12543\n                                                                                                                      // 12544\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n                                                                                                                      // 12546\n    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n                                                                                                                      // 12549\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/                                                                                                                    // 12551\n                                                                                                                      // 12552\n// constants table                                                                                                    // 12553\nvar zl = [                                                                                                            // 12554\n    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,                                                    // 12555\n    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,                                                    // 12556\n    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,                                                    // 12557\n    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,                                                    // 12558\n    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]                                                    // 12559\n                                                                                                                      // 12560\nvar zr = [                                                                                                            // 12561\n    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,                                                    // 12562\n    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,                                                    // 12563\n    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,                                                   // 12564\n    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,                                                    // 12565\n    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]                                                   // 12566\n                                                                                                                      // 12567\nvar sl = [                                                                                                            // 12568\n     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,                                                  // 12569\n    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,                                                    // 12570\n    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,                                                   // 12571\n      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,                                                 // 12572\n    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]                                                   // 12573\n                                                                                                                      // 12574\nvar sr = [                                                                                                            // 12575\n    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,                                                    // 12576\n    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,                                                    // 12577\n    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,                                                    // 12578\n    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,                                                   // 12579\n    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]                                                   // 12580\n                                                                                                                      // 12581\n                                                                                                                      // 12582\nvar hl =  [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]                                                // 12583\nvar hr =  [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]                                                // 12584\n                                                                                                                      // 12585\nfunction bytesToWords(bytes) {                                                                                        // 12586\n  var words = []                                                                                                      // 12587\n  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {                                                             // 12588\n    words[b >>> 5] |= bytes[i] << (24 - b % 32)                                                                       // 12589\n  }                                                                                                                   // 12590\n  return words                                                                                                        // 12591\n}                                                                                                                     // 12592\n                                                                                                                      // 12593\nfunction wordsToBytes(words) {                                                                                        // 12594\n  var bytes = []                                                                                                      // 12595\n  for (var b = 0; b < words.length * 32; b += 8) {                                                                    // 12596\n    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)                                                             // 12597\n  }                                                                                                                   // 12598\n  return bytes                                                                                                        // 12599\n}                                                                                                                     // 12600\n                                                                                                                      // 12601\nfunction processBlock(H, M, offset) {                                                                                 // 12602\n  // swap endian                                                                                                      // 12603\n  for (var i = 0; i < 16; i++) {                                                                                      // 12604\n    var offset_i = offset + i;                                                                                        // 12605\n    var M_offset_i = M[offset_i]                                                                                      // 12606\n                                                                                                                      // 12607\n    // Swap                                                                                                           // 12608\n    M[offset_i] = (                                                                                                   // 12609\n        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                                   // 12610\n        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                                     // 12611\n    )                                                                                                                 // 12612\n  }                                                                                                                   // 12613\n                                                                                                                      // 12614\n  // Working variables                                                                                                // 12615\n  var al, bl, cl, dl, el                                                                                              // 12616\n  var ar, br, cr, dr, er                                                                                              // 12617\n                                                                                                                      // 12618\n  ar = al = H[0]                                                                                                      // 12619\n  br = bl = H[1]                                                                                                      // 12620\n  cr = cl = H[2]                                                                                                      // 12621\n  dr = dl = H[3]                                                                                                      // 12622\n  er = el = H[4]                                                                                                      // 12623\n                                                                                                                      // 12624\n  // computation                                                                                                      // 12625\n  var t                                                                                                               // 12626\n  for (var i = 0; i < 80; i += 1) {                                                                                   // 12627\n    t = (al +  M[offset+zl[i]])|0                                                                                     // 12628\n    if (i<16){                                                                                                        // 12629\n        t +=  f1(bl,cl,dl) + hl[0]                                                                                    // 12630\n    } else if (i<32) {                                                                                                // 12631\n        t +=  f2(bl,cl,dl) + hl[1]                                                                                    // 12632\n    } else if (i<48) {                                                                                                // 12633\n        t +=  f3(bl,cl,dl) + hl[2]                                                                                    // 12634\n    } else if (i<64) {                                                                                                // 12635\n        t +=  f4(bl,cl,dl) + hl[3]                                                                                    // 12636\n    } else {// if (i<80) {                                                                                            // 12637\n        t +=  f5(bl,cl,dl) + hl[4]                                                                                    // 12638\n    }                                                                                                                 // 12639\n    t = t|0                                                                                                           // 12640\n    t =  rotl(t,sl[i])                                                                                                // 12641\n    t = (t+el)|0                                                                                                      // 12642\n    al = el                                                                                                           // 12643\n    el = dl                                                                                                           // 12644\n    dl = rotl(cl, 10)                                                                                                 // 12645\n    cl = bl                                                                                                           // 12646\n    bl = t                                                                                                            // 12647\n                                                                                                                      // 12648\n    t = (ar + M[offset+zr[i]])|0                                                                                      // 12649\n    if (i<16) {                                                                                                       // 12650\n      t +=  f5(br,cr,dr) + hr[0]                                                                                      // 12651\n    } else if (i<32) {                                                                                                // 12652\n      t +=  f4(br,cr,dr) + hr[1]                                                                                      // 12653\n    } else if (i<48) {                                                                                                // 12654\n      t +=  f3(br,cr,dr) + hr[2]                                                                                      // 12655\n    } else if (i<64) {                                                                                                // 12656\n      t +=  f2(br,cr,dr) + hr[3]                                                                                      // 12657\n    } else {// if (i<80) {                                                                                            // 12658\n      t +=  f1(br,cr,dr) + hr[4]                                                                                      // 12659\n    }                                                                                                                 // 12660\n                                                                                                                      // 12661\n    t = t|0                                                                                                           // 12662\n    t =  rotl(t,sr[i])                                                                                                // 12663\n    t = (t+er)|0                                                                                                      // 12664\n    ar = er                                                                                                           // 12665\n    er = dr                                                                                                           // 12666\n    dr = rotl(cr, 10)                                                                                                 // 12667\n    cr = br                                                                                                           // 12668\n    br = t                                                                                                            // 12669\n  }                                                                                                                   // 12670\n                                                                                                                      // 12671\n  // intermediate hash value                                                                                          // 12672\n  t    = (H[1] + cl + dr)|0                                                                                           // 12673\n  H[1] = (H[2] + dl + er)|0                                                                                           // 12674\n  H[2] = (H[3] + el + ar)|0                                                                                           // 12675\n  H[3] = (H[4] + al + br)|0                                                                                           // 12676\n  H[4] = (H[0] + bl + cr)|0                                                                                           // 12677\n  H[0] =  t                                                                                                           // 12678\n}                                                                                                                     // 12679\n                                                                                                                      // 12680\nfunction f1(x, y, z) {                                                                                                // 12681\n  return ((x) ^ (y) ^ (z))                                                                                            // 12682\n}                                                                                                                     // 12683\n                                                                                                                      // 12684\nfunction f2(x, y, z) {                                                                                                // 12685\n  return (((x)&(y)) | ((~x)&(z)))                                                                                     // 12686\n}                                                                                                                     // 12687\n                                                                                                                      // 12688\nfunction f3(x, y, z) {                                                                                                // 12689\n  return (((x) | (~(y))) ^ (z))                                                                                       // 12690\n}                                                                                                                     // 12691\n                                                                                                                      // 12692\nfunction f4(x, y, z) {                                                                                                // 12693\n  return (((x) & (z)) | ((y)&(~(z))))                                                                                 // 12694\n}                                                                                                                     // 12695\n                                                                                                                      // 12696\nfunction f5(x, y, z) {                                                                                                // 12697\n  return ((x) ^ ((y) |(~(z))))                                                                                        // 12698\n}                                                                                                                     // 12699\n                                                                                                                      // 12700\nfunction rotl(x,n) {                                                                                                  // 12701\n  return (x<<n) | (x>>>(32-n))                                                                                        // 12702\n}                                                                                                                     // 12703\n                                                                                                                      // 12704\nfunction ripemd160(message) {                                                                                         // 12705\n  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]                                                // 12706\n                                                                                                                      // 12707\n  if (typeof message == 'string')                                                                                     // 12708\n    message = new Buffer(message, 'utf8')                                                                             // 12709\n                                                                                                                      // 12710\n  var m = bytesToWords(message)                                                                                       // 12711\n                                                                                                                      // 12712\n  var nBitsLeft = message.length * 8                                                                                  // 12713\n  var nBitsTotal = message.length * 8                                                                                 // 12714\n                                                                                                                      // 12715\n  // Add padding                                                                                                      // 12716\n  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)                                                                 // 12717\n  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                                         // 12718\n      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |                                                     // 12719\n      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)                                                       // 12720\n  )                                                                                                                   // 12721\n                                                                                                                      // 12722\n  for (var i=0 ; i<m.length; i += 16) {                                                                               // 12723\n    processBlock(H, m, i)                                                                                             // 12724\n  }                                                                                                                   // 12725\n                                                                                                                      // 12726\n  // swap endian                                                                                                      // 12727\n  for (var i = 0; i < 5; i++) {                                                                                       // 12728\n      // shortcut                                                                                                     // 12729\n    var H_i = H[i]                                                                                                    // 12730\n                                                                                                                      // 12731\n    // Swap                                                                                                           // 12732\n    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                              // 12733\n          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00)                                                                 // 12734\n  }                                                                                                                   // 12735\n                                                                                                                      // 12736\n  var digestbytes = wordsToBytes(H)                                                                                   // 12737\n  return new Buffer(digestbytes)                                                                                      // 12738\n}                                                                                                                     // 12739\n                                                                                                                      // 12740\nmodule.exports = ripemd160                                                                                            // 12741\n                                                                                                                      // 12742\n}).call(this,require(\"buffer\").Buffer)                                                                                // 12743\n                                                                                                                      // 12744\n},{\"buffer\":2}],98:[function(require,module,exports){                                                                 // 12745\n(function (Buffer){                                                                                                   // 12746\n//prototype class for hash functions                                                                                  // 12747\nfunction Hash (blockSize, finalSize) {                                                                                // 12748\n  this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)                                                  // 12749\n  this._finalSize = finalSize                                                                                         // 12750\n  this._blockSize = blockSize                                                                                         // 12751\n  this._len = 0                                                                                                       // 12752\n  this._s = 0                                                                                                         // 12753\n}                                                                                                                     // 12754\n                                                                                                                      // 12755\nHash.prototype.update = function (data, enc) {                                                                        // 12756\n  if (\"string\" === typeof data) {                                                                                     // 12757\n    enc = enc || \"utf8\"                                                                                               // 12758\n    data = new Buffer(data, enc)                                                                                      // 12759\n  }                                                                                                                   // 12760\n                                                                                                                      // 12761\n  var l = this._len += data.length                                                                                    // 12762\n  var s = this._s || 0                                                                                                // 12763\n  var f = 0                                                                                                           // 12764\n  var buffer = this._block                                                                                            // 12765\n                                                                                                                      // 12766\n  while (s < l) {                                                                                                     // 12767\n    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))                                        // 12768\n    var ch = (t - f)                                                                                                  // 12769\n                                                                                                                      // 12770\n    for (var i = 0; i < ch; i++) {                                                                                    // 12771\n      buffer[(s % this._blockSize) + i] = data[i + f]                                                                 // 12772\n    }                                                                                                                 // 12773\n                                                                                                                      // 12774\n    s += ch                                                                                                           // 12775\n    f += ch                                                                                                           // 12776\n                                                                                                                      // 12777\n    if ((s % this._blockSize) === 0) {                                                                                // 12778\n      this._update(buffer)                                                                                            // 12779\n    }                                                                                                                 // 12780\n  }                                                                                                                   // 12781\n  this._s = s                                                                                                         // 12782\n                                                                                                                      // 12783\n  return this                                                                                                         // 12784\n}                                                                                                                     // 12785\n                                                                                                                      // 12786\nHash.prototype.digest = function (enc) {                                                                              // 12787\n  // Suppose the length of the message M, in bits, is l                                                               // 12788\n  var l = this._len * 8                                                                                               // 12789\n                                                                                                                      // 12790\n  // Append the bit 1 to the end of the message                                                                       // 12791\n  this._block[this._len % this._blockSize] = 0x80                                                                     // 12792\n                                                                                                                      // 12793\n  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize\n  this._block.fill(0, this._len % this._blockSize + 1)                                                                // 12795\n                                                                                                                      // 12796\n  if (l % (this._blockSize * 8) >= this._finalSize * 8) {                                                             // 12797\n    this._update(this._block)                                                                                         // 12798\n    this._block.fill(0)                                                                                               // 12799\n  }                                                                                                                   // 12800\n                                                                                                                      // 12801\n  // to this append the block which is equal to the number l written in binary                                        // 12802\n  // TODO: handle case where l is > Math.pow(2, 29)                                                                   // 12803\n  this._block.writeInt32BE(l, this._blockSize - 4)                                                                    // 12804\n                                                                                                                      // 12805\n  var hash = this._update(this._block) || this._hash()                                                                // 12806\n                                                                                                                      // 12807\n  return enc ? hash.toString(enc) : hash                                                                              // 12808\n}                                                                                                                     // 12809\n                                                                                                                      // 12810\nHash.prototype._update = function () {                                                                                // 12811\n  throw new Error('_update must be implemented by subclass')                                                          // 12812\n}                                                                                                                     // 12813\n                                                                                                                      // 12814\nmodule.exports = Hash                                                                                                 // 12815\n                                                                                                                      // 12816\n}).call(this,require(\"buffer\").Buffer)                                                                                // 12817\n                                                                                                                      // 12818\n},{\"buffer\":2}],99:[function(require,module,exports){                                                                 // 12819\nvar exports = module.exports = function (alg) {                                                                       // 12820\n  var Alg = exports[alg.toLowerCase()]                                                                                // 12821\n  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')                                       // 12822\n  return new Alg()                                                                                                    // 12823\n}                                                                                                                     // 12824\n                                                                                                                      // 12825\n                                                                                                                      // 12826\nexports.sha = require('./sha')                                                                                        // 12827\nexports.sha1 = require('./sha1')                                                                                      // 12828\nexports.sha224 = require('./sha224')                                                                                  // 12829\nexports.sha256 = require('./sha256')                                                                                  // 12830\nexports.sha384 = require('./sha384')                                                                                  // 12831\nexports.sha512 = require('./sha512')                                                                                  // 12832\n                                                                                                                      // 12833\n},{\"./sha\":100,\"./sha1\":101,\"./sha224\":102,\"./sha256\":103,\"./sha384\":104,\"./sha512\":105}],100:[function(require,module,exports){\n(function (Buffer){                                                                                                   // 12835\n/*                                                                                                                    // 12836\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined                                        // 12837\n * in FIPS PUB 180-1                                                                                                  // 12838\n * This source code is derived from sha1.js of the same repository.                                                   // 12839\n * The difference between SHA-0 and SHA-1 is just a bitwise rotate left                                               // 12840\n * operation was added.                                                                                               // 12841\n */                                                                                                                   // 12842\n                                                                                                                      // 12843\nvar inherits = require('inherits')                                                                                    // 12844\nvar Hash = require('./hash')                                                                                          // 12845\n                                                                                                                      // 12846\nvar W = new Array(80)                                                                                                 // 12847\n                                                                                                                      // 12848\nfunction Sha() {                                                                                                      // 12849\n  this.init()                                                                                                         // 12850\n  this._w = W                                                                                                         // 12851\n                                                                                                                      // 12852\n  Hash.call(this, 64, 56)                                                                                             // 12853\n}                                                                                                                     // 12854\n                                                                                                                      // 12855\ninherits(Sha, Hash)                                                                                                   // 12856\n                                                                                                                      // 12857\nSha.prototype.init = function () {                                                                                    // 12858\n  this._a = 0x67452301                                                                                                // 12859\n  this._b = 0xefcdab89                                                                                                // 12860\n  this._c = 0x98badcfe                                                                                                // 12861\n  this._d = 0x10325476                                                                                                // 12862\n  this._e = 0xc3d2e1f0                                                                                                // 12863\n                                                                                                                      // 12864\n  return this                                                                                                         // 12865\n}                                                                                                                     // 12866\n                                                                                                                      // 12867\n/*                                                                                                                    // 12868\n * Bitwise rotate a 32-bit number to the left.                                                                        // 12869\n */                                                                                                                   // 12870\nfunction rol(num, cnt) {                                                                                              // 12871\n  return (num << cnt) | (num >>> (32 - cnt));                                                                         // 12872\n}                                                                                                                     // 12873\n                                                                                                                      // 12874\nSha.prototype._update = function (M) {                                                                                // 12875\n  var W = this._w                                                                                                     // 12876\n                                                                                                                      // 12877\n  var a = this._a                                                                                                     // 12878\n  var b = this._b                                                                                                     // 12879\n  var c = this._c                                                                                                     // 12880\n  var d = this._d                                                                                                     // 12881\n  var e = this._e                                                                                                     // 12882\n                                                                                                                      // 12883\n  var j = 0, k                                                                                                        // 12884\n                                                                                                                      // 12885\n  /*                                                                                                                  // 12886\n   * SHA-1 has a bitwise rotate left operation. But, SHA is not                                                       // 12887\n   * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }                                 // 12888\n   */                                                                                                                 // 12889\n  function calcW() { return W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16] }                                            // 12890\n  function loop(w, f) {                                                                                               // 12891\n    W[j] = w                                                                                                          // 12892\n                                                                                                                      // 12893\n    var t = rol(a, 5) + f + e + w + k                                                                                 // 12894\n                                                                                                                      // 12895\n    e = d                                                                                                             // 12896\n    d = c                                                                                                             // 12897\n    c = rol(b, 30)                                                                                                    // 12898\n    b = a                                                                                                             // 12899\n    a = t                                                                                                             // 12900\n    j++                                                                                                               // 12901\n  }                                                                                                                   // 12902\n                                                                                                                      // 12903\n  k = 1518500249                                                                                                      // 12904\n  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))                                                     // 12905\n  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))                                                                  // 12906\n  k = 1859775393                                                                                                      // 12907\n  while (j < 40) loop(calcW(), b ^ c ^ d)                                                                             // 12908\n  k = -1894007588                                                                                                     // 12909\n  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))                                                           // 12910\n  k = -899497514                                                                                                      // 12911\n  while (j < 80) loop(calcW(), b ^ c ^ d)                                                                             // 12912\n                                                                                                                      // 12913\n  this._a = (a + this._a) | 0                                                                                         // 12914\n  this._b = (b + this._b) | 0                                                                                         // 12915\n  this._c = (c + this._c) | 0                                                                                         // 12916\n  this._d = (d + this._d) | 0                                                                                         // 12917\n  this._e = (e + this._e) | 0                                                                                         // 12918\n}                                                                                                                     // 12919\n                                                                                                                      // 12920\nSha.prototype._hash = function () {                                                                                   // 12921\n  var H = new Buffer(20)                                                                                              // 12922\n                                                                                                                      // 12923\n  H.writeInt32BE(this._a|0, 0)                                                                                        // 12924\n  H.writeInt32BE(this._b|0, 4)                                                                                        // 12925\n  H.writeInt32BE(this._c|0, 8)                                                                                        // 12926\n  H.writeInt32BE(this._d|0, 12)                                                                                       // 12927\n  H.writeInt32BE(this._e|0, 16)                                                                                       // 12928\n                                                                                                                      // 12929\n  return H                                                                                                            // 12930\n}                                                                                                                     // 12931\n                                                                                                                      // 12932\nmodule.exports = Sha                                                                                                  // 12933\n                                                                                                                      // 12934\n                                                                                                                      // 12935\n}).call(this,require(\"buffer\").Buffer)                                                                                // 12936\n                                                                                                                      // 12937\n},{\"./hash\":98,\"buffer\":2,\"inherits\":144}],101:[function(require,module,exports){                                     // 12938\n(function (Buffer){                                                                                                   // 12939\n/*                                                                                                                    // 12940\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined                                        // 12941\n * in FIPS PUB 180-1                                                                                                  // 12942\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.                                                                  // 12943\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet                                                      // 12944\n * Distributed under the BSD License                                                                                  // 12945\n * See http://pajhome.org.uk/crypt/md5 for details.                                                                   // 12946\n */                                                                                                                   // 12947\n                                                                                                                      // 12948\nvar inherits = require('inherits')                                                                                    // 12949\nvar Hash = require('./hash')                                                                                          // 12950\n                                                                                                                      // 12951\nvar W = new Array(80)                                                                                                 // 12952\n                                                                                                                      // 12953\nfunction Sha1() {                                                                                                     // 12954\n  this.init()                                                                                                         // 12955\n  this._w = W                                                                                                         // 12956\n                                                                                                                      // 12957\n  Hash.call(this, 64, 56)                                                                                             // 12958\n}                                                                                                                     // 12959\n                                                                                                                      // 12960\ninherits(Sha1, Hash)                                                                                                  // 12961\n                                                                                                                      // 12962\nSha1.prototype.init = function () {                                                                                   // 12963\n  this._a = 0x67452301                                                                                                // 12964\n  this._b = 0xefcdab89                                                                                                // 12965\n  this._c = 0x98badcfe                                                                                                // 12966\n  this._d = 0x10325476                                                                                                // 12967\n  this._e = 0xc3d2e1f0                                                                                                // 12968\n                                                                                                                      // 12969\n  return this                                                                                                         // 12970\n}                                                                                                                     // 12971\n                                                                                                                      // 12972\n/*                                                                                                                    // 12973\n * Bitwise rotate a 32-bit number to the left.                                                                        // 12974\n */                                                                                                                   // 12975\nfunction rol(num, cnt) {                                                                                              // 12976\n  return (num << cnt) | (num >>> (32 - cnt));                                                                         // 12977\n}                                                                                                                     // 12978\n                                                                                                                      // 12979\nSha1.prototype._update = function (M) {                                                                               // 12980\n  var W = this._w                                                                                                     // 12981\n                                                                                                                      // 12982\n  var a = this._a                                                                                                     // 12983\n  var b = this._b                                                                                                     // 12984\n  var c = this._c                                                                                                     // 12985\n  var d = this._d                                                                                                     // 12986\n  var e = this._e                                                                                                     // 12987\n                                                                                                                      // 12988\n  var j = 0, k                                                                                                        // 12989\n                                                                                                                      // 12990\n  function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }                                    // 12991\n  function loop(w, f) {                                                                                               // 12992\n    W[j] = w                                                                                                          // 12993\n                                                                                                                      // 12994\n    var t = rol(a, 5) + f + e + w + k                                                                                 // 12995\n                                                                                                                      // 12996\n    e = d                                                                                                             // 12997\n    d = c                                                                                                             // 12998\n    c = rol(b, 30)                                                                                                    // 12999\n    b = a                                                                                                             // 13000\n    a = t                                                                                                             // 13001\n    j++                                                                                                               // 13002\n  }                                                                                                                   // 13003\n                                                                                                                      // 13004\n  k = 1518500249                                                                                                      // 13005\n  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))                                                     // 13006\n  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))                                                                  // 13007\n  k = 1859775393                                                                                                      // 13008\n  while (j < 40) loop(calcW(), b ^ c ^ d)                                                                             // 13009\n  k = -1894007588                                                                                                     // 13010\n  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))                                                           // 13011\n  k = -899497514                                                                                                      // 13012\n  while (j < 80) loop(calcW(), b ^ c ^ d)                                                                             // 13013\n                                                                                                                      // 13014\n  this._a = (a + this._a) | 0                                                                                         // 13015\n  this._b = (b + this._b) | 0                                                                                         // 13016\n  this._c = (c + this._c) | 0                                                                                         // 13017\n  this._d = (d + this._d) | 0                                                                                         // 13018\n  this._e = (e + this._e) | 0                                                                                         // 13019\n}                                                                                                                     // 13020\n                                                                                                                      // 13021\nSha1.prototype._hash = function () {                                                                                  // 13022\n  var H = new Buffer(20)                                                                                              // 13023\n                                                                                                                      // 13024\n  H.writeInt32BE(this._a|0, 0)                                                                                        // 13025\n  H.writeInt32BE(this._b|0, 4)                                                                                        // 13026\n  H.writeInt32BE(this._c|0, 8)                                                                                        // 13027\n  H.writeInt32BE(this._d|0, 12)                                                                                       // 13028\n  H.writeInt32BE(this._e|0, 16)                                                                                       // 13029\n                                                                                                                      // 13030\n  return H                                                                                                            // 13031\n}                                                                                                                     // 13032\n                                                                                                                      // 13033\nmodule.exports = Sha1                                                                                                 // 13034\n                                                                                                                      // 13035\n                                                                                                                      // 13036\n}).call(this,require(\"buffer\").Buffer)                                                                                // 13037\n                                                                                                                      // 13038\n},{\"./hash\":98,\"buffer\":2,\"inherits\":144}],102:[function(require,module,exports){                                     // 13039\n(function (Buffer){                                                                                                   // 13040\n/**                                                                                                                   // 13041\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined                                      // 13042\n * in FIPS 180-2                                                                                                      // 13043\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.                                                 // 13044\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet                                                      // 13045\n *                                                                                                                    // 13046\n */                                                                                                                   // 13047\n                                                                                                                      // 13048\nvar inherits = require('inherits')                                                                                    // 13049\nvar SHA256 = require('./sha256')                                                                                      // 13050\nvar Hash = require('./hash')                                                                                          // 13051\n                                                                                                                      // 13052\nvar W = new Array(64)                                                                                                 // 13053\n                                                                                                                      // 13054\nfunction Sha224() {                                                                                                   // 13055\n  this.init()                                                                                                         // 13056\n                                                                                                                      // 13057\n  this._w = W // new Array(64)                                                                                        // 13058\n                                                                                                                      // 13059\n  Hash.call(this, 64, 56)                                                                                             // 13060\n}                                                                                                                     // 13061\n                                                                                                                      // 13062\ninherits(Sha224, SHA256)                                                                                              // 13063\n                                                                                                                      // 13064\nSha224.prototype.init = function () {                                                                                 // 13065\n  this._a = 0xc1059ed8|0                                                                                              // 13066\n  this._b = 0x367cd507|0                                                                                              // 13067\n  this._c = 0x3070dd17|0                                                                                              // 13068\n  this._d = 0xf70e5939|0                                                                                              // 13069\n  this._e = 0xffc00b31|0                                                                                              // 13070\n  this._f = 0x68581511|0                                                                                              // 13071\n  this._g = 0x64f98fa7|0                                                                                              // 13072\n  this._h = 0xbefa4fa4|0                                                                                              // 13073\n                                                                                                                      // 13074\n  return this                                                                                                         // 13075\n}                                                                                                                     // 13076\n                                                                                                                      // 13077\nSha224.prototype._hash = function () {                                                                                // 13078\n  var H = new Buffer(28)                                                                                              // 13079\n                                                                                                                      // 13080\n  H.writeInt32BE(this._a,  0)                                                                                         // 13081\n  H.writeInt32BE(this._b,  4)                                                                                         // 13082\n  H.writeInt32BE(this._c,  8)                                                                                         // 13083\n  H.writeInt32BE(this._d, 12)                                                                                         // 13084\n  H.writeInt32BE(this._e, 16)                                                                                         // 13085\n  H.writeInt32BE(this._f, 20)                                                                                         // 13086\n  H.writeInt32BE(this._g, 24)                                                                                         // 13087\n                                                                                                                      // 13088\n  return H                                                                                                            // 13089\n}                                                                                                                     // 13090\n                                                                                                                      // 13091\nmodule.exports = Sha224                                                                                               // 13092\n                                                                                                                      // 13093\n}).call(this,require(\"buffer\").Buffer)                                                                                // 13094\n                                                                                                                      // 13095\n},{\"./hash\":98,\"./sha256\":103,\"buffer\":2,\"inherits\":144}],103:[function(require,module,exports){                      // 13096\n(function (Buffer){                                                                                                   // 13097\n/**                                                                                                                   // 13098\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined                                      // 13099\n * in FIPS 180-2                                                                                                      // 13100\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.                                                 // 13101\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet                                                      // 13102\n *                                                                                                                    // 13103\n */                                                                                                                   // 13104\n                                                                                                                      // 13105\nvar inherits = require('inherits')                                                                                    // 13106\nvar Hash = require('./hash')                                                                                          // 13107\n                                                                                                                      // 13108\nvar K = [                                                                                                             // 13109\n  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,                                                                     // 13110\n  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,                                                                     // 13111\n  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,                                                                     // 13112\n  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,                                                                     // 13113\n  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,                                                                     // 13114\n  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,                                                                     // 13115\n  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,                                                                     // 13116\n  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,                                                                     // 13117\n  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,                                                                     // 13118\n  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,                                                                     // 13119\n  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,                                                                     // 13120\n  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,                                                                     // 13121\n  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,                                                                     // 13122\n  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,                                                                     // 13123\n  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,                                                                     // 13124\n  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2                                                                      // 13125\n]                                                                                                                     // 13126\n                                                                                                                      // 13127\nvar W = new Array(64)                                                                                                 // 13128\n                                                                                                                      // 13129\nfunction Sha256() {                                                                                                   // 13130\n  this.init()                                                                                                         // 13131\n                                                                                                                      // 13132\n  this._w = W // new Array(64)                                                                                        // 13133\n                                                                                                                      // 13134\n  Hash.call(this, 64, 56)                                                                                             // 13135\n}                                                                                                                     // 13136\n                                                                                                                      // 13137\ninherits(Sha256, Hash)                                                                                                // 13138\n                                                                                                                      // 13139\nSha256.prototype.init = function () {                                                                                 // 13140\n  this._a = 0x6a09e667|0                                                                                              // 13141\n  this._b = 0xbb67ae85|0                                                                                              // 13142\n  this._c = 0x3c6ef372|0                                                                                              // 13143\n  this._d = 0xa54ff53a|0                                                                                              // 13144\n  this._e = 0x510e527f|0                                                                                              // 13145\n  this._f = 0x9b05688c|0                                                                                              // 13146\n  this._g = 0x1f83d9ab|0                                                                                              // 13147\n  this._h = 0x5be0cd19|0                                                                                              // 13148\n                                                                                                                      // 13149\n  return this                                                                                                         // 13150\n}                                                                                                                     // 13151\n                                                                                                                      // 13152\nfunction S (X, n) {                                                                                                   // 13153\n  return (X >>> n) | (X << (32 - n));                                                                                 // 13154\n}                                                                                                                     // 13155\n                                                                                                                      // 13156\nfunction R (X, n) {                                                                                                   // 13157\n  return (X >>> n);                                                                                                   // 13158\n}                                                                                                                     // 13159\n                                                                                                                      // 13160\nfunction Ch (x, y, z) {                                                                                               // 13161\n  return ((x & y) ^ ((~x) & z));                                                                                      // 13162\n}                                                                                                                     // 13163\n                                                                                                                      // 13164\nfunction Maj (x, y, z) {                                                                                              // 13165\n  return ((x & y) ^ (x & z) ^ (y & z));                                                                               // 13166\n}                                                                                                                     // 13167\n                                                                                                                      // 13168\nfunction Sigma0256 (x) {                                                                                              // 13169\n  return (S(x, 2) ^ S(x, 13) ^ S(x, 22));                                                                             // 13170\n}                                                                                                                     // 13171\n                                                                                                                      // 13172\nfunction Sigma1256 (x) {                                                                                              // 13173\n  return (S(x, 6) ^ S(x, 11) ^ S(x, 25));                                                                             // 13174\n}                                                                                                                     // 13175\n                                                                                                                      // 13176\nfunction Gamma0256 (x) {                                                                                              // 13177\n  return (S(x, 7) ^ S(x, 18) ^ R(x, 3));                                                                              // 13178\n}                                                                                                                     // 13179\n                                                                                                                      // 13180\nfunction Gamma1256 (x) {                                                                                              // 13181\n  return (S(x, 17) ^ S(x, 19) ^ R(x, 10));                                                                            // 13182\n}                                                                                                                     // 13183\n                                                                                                                      // 13184\nSha256.prototype._update = function(M) {                                                                              // 13185\n  var W = this._w                                                                                                     // 13186\n                                                                                                                      // 13187\n  var a = this._a | 0                                                                                                 // 13188\n  var b = this._b | 0                                                                                                 // 13189\n  var c = this._c | 0                                                                                                 // 13190\n  var d = this._d | 0                                                                                                 // 13191\n  var e = this._e | 0                                                                                                 // 13192\n  var f = this._f | 0                                                                                                 // 13193\n  var g = this._g | 0                                                                                                 // 13194\n  var h = this._h | 0                                                                                                 // 13195\n                                                                                                                      // 13196\n  var j = 0                                                                                                           // 13197\n                                                                                                                      // 13198\n  function calcW() { return Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16] }                       // 13199\n  function loop(w) {                                                                                                  // 13200\n    W[j] = w                                                                                                          // 13201\n                                                                                                                      // 13202\n    var T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w                                                                // 13203\n    var T2 = Sigma0256(a) + Maj(a, b, c);                                                                             // 13204\n                                                                                                                      // 13205\n    h = g;                                                                                                            // 13206\n    g = f;                                                                                                            // 13207\n    f = e;                                                                                                            // 13208\n    e = d + T1;                                                                                                       // 13209\n    d = c;                                                                                                            // 13210\n    c = b;                                                                                                            // 13211\n    b = a;                                                                                                            // 13212\n    a = T1 + T2;                                                                                                      // 13213\n                                                                                                                      // 13214\n    j++                                                                                                               // 13215\n  }                                                                                                                   // 13216\n                                                                                                                      // 13217\n  while (j < 16) loop(M.readInt32BE(j * 4))                                                                           // 13218\n  while (j < 64) loop(calcW())                                                                                        // 13219\n                                                                                                                      // 13220\n  this._a = (a + this._a) | 0                                                                                         // 13221\n  this._b = (b + this._b) | 0                                                                                         // 13222\n  this._c = (c + this._c) | 0                                                                                         // 13223\n  this._d = (d + this._d) | 0                                                                                         // 13224\n  this._e = (e + this._e) | 0                                                                                         // 13225\n  this._f = (f + this._f) | 0                                                                                         // 13226\n  this._g = (g + this._g) | 0                                                                                         // 13227\n  this._h = (h + this._h) | 0                                                                                         // 13228\n};                                                                                                                    // 13229\n                                                                                                                      // 13230\nSha256.prototype._hash = function () {                                                                                // 13231\n  var H = new Buffer(32)                                                                                              // 13232\n                                                                                                                      // 13233\n  H.writeInt32BE(this._a,  0)                                                                                         // 13234\n  H.writeInt32BE(this._b,  4)                                                                                         // 13235\n  H.writeInt32BE(this._c,  8)                                                                                         // 13236\n  H.writeInt32BE(this._d, 12)                                                                                         // 13237\n  H.writeInt32BE(this._e, 16)                                                                                         // 13238\n  H.writeInt32BE(this._f, 20)                                                                                         // 13239\n  H.writeInt32BE(this._g, 24)                                                                                         // 13240\n  H.writeInt32BE(this._h, 28)                                                                                         // 13241\n                                                                                                                      // 13242\n  return H                                                                                                            // 13243\n}                                                                                                                     // 13244\n                                                                                                                      // 13245\nmodule.exports = Sha256                                                                                               // 13246\n                                                                                                                      // 13247\n}).call(this,require(\"buffer\").Buffer)                                                                                // 13248\n                                                                                                                      // 13249\n},{\"./hash\":98,\"buffer\":2,\"inherits\":144}],104:[function(require,module,exports){                                     // 13250\n(function (Buffer){                                                                                                   // 13251\nvar inherits = require('inherits')                                                                                    // 13252\nvar SHA512 = require('./sha512');                                                                                     // 13253\nvar Hash = require('./hash')                                                                                          // 13254\n                                                                                                                      // 13255\nvar W = new Array(160)                                                                                                // 13256\n                                                                                                                      // 13257\nfunction Sha384() {                                                                                                   // 13258\n  this.init()                                                                                                         // 13259\n  this._w = W                                                                                                         // 13260\n                                                                                                                      // 13261\n  Hash.call(this, 128, 112)                                                                                           // 13262\n}                                                                                                                     // 13263\n                                                                                                                      // 13264\ninherits(Sha384, SHA512)                                                                                              // 13265\n                                                                                                                      // 13266\nSha384.prototype.init = function () {                                                                                 // 13267\n  this._a = 0xcbbb9d5d|0                                                                                              // 13268\n  this._b = 0x629a292a|0                                                                                              // 13269\n  this._c = 0x9159015a|0                                                                                              // 13270\n  this._d = 0x152fecd8|0                                                                                              // 13271\n  this._e = 0x67332667|0                                                                                              // 13272\n  this._f = 0x8eb44a87|0                                                                                              // 13273\n  this._g = 0xdb0c2e0d|0                                                                                              // 13274\n  this._h = 0x47b5481d|0                                                                                              // 13275\n                                                                                                                      // 13276\n  this._al = 0xc1059ed8|0                                                                                             // 13277\n  this._bl = 0x367cd507|0                                                                                             // 13278\n  this._cl = 0x3070dd17|0                                                                                             // 13279\n  this._dl = 0xf70e5939|0                                                                                             // 13280\n  this._el = 0xffc00b31|0                                                                                             // 13281\n  this._fl = 0x68581511|0                                                                                             // 13282\n  this._gl = 0x64f98fa7|0                                                                                             // 13283\n  this._hl = 0xbefa4fa4|0                                                                                             // 13284\n                                                                                                                      // 13285\n  return this                                                                                                         // 13286\n}                                                                                                                     // 13287\n                                                                                                                      // 13288\nSha384.prototype._hash = function () {                                                                                // 13289\n  var H = new Buffer(48)                                                                                              // 13290\n                                                                                                                      // 13291\n  function writeInt64BE(h, l, offset) {                                                                               // 13292\n    H.writeInt32BE(h, offset)                                                                                         // 13293\n    H.writeInt32BE(l, offset + 4)                                                                                     // 13294\n  }                                                                                                                   // 13295\n                                                                                                                      // 13296\n  writeInt64BE(this._a, this._al, 0)                                                                                  // 13297\n  writeInt64BE(this._b, this._bl, 8)                                                                                  // 13298\n  writeInt64BE(this._c, this._cl, 16)                                                                                 // 13299\n  writeInt64BE(this._d, this._dl, 24)                                                                                 // 13300\n  writeInt64BE(this._e, this._el, 32)                                                                                 // 13301\n  writeInt64BE(this._f, this._fl, 40)                                                                                 // 13302\n                                                                                                                      // 13303\n  return H                                                                                                            // 13304\n}                                                                                                                     // 13305\n                                                                                                                      // 13306\nmodule.exports = Sha384                                                                                               // 13307\n                                                                                                                      // 13308\n}).call(this,require(\"buffer\").Buffer)                                                                                // 13309\n                                                                                                                      // 13310\n},{\"./hash\":98,\"./sha512\":105,\"buffer\":2,\"inherits\":144}],105:[function(require,module,exports){                      // 13311\n(function (Buffer){                                                                                                   // 13312\nvar inherits = require('inherits')                                                                                    // 13313\nvar Hash = require('./hash')                                                                                          // 13314\n                                                                                                                      // 13315\nvar K = [                                                                                                             // 13316\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,                                                                     // 13317\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,                                                                     // 13318\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,                                                                     // 13319\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,                                                                     // 13320\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,                                                                     // 13321\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,                                                                     // 13322\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,                                                                     // 13323\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,                                                                     // 13324\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,                                                                     // 13325\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,                                                                     // 13326\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,                                                                     // 13327\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,                                                                     // 13328\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,                                                                     // 13329\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,                                                                     // 13330\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,                                                                     // 13331\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,                                                                     // 13332\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,                                                                     // 13333\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,                                                                     // 13334\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,                                                                     // 13335\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,                                                                     // 13336\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,                                                                     // 13337\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,                                                                     // 13338\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,                                                                     // 13339\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,                                                                     // 13340\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,                                                                     // 13341\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,                                                                     // 13342\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,                                                                     // 13343\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,                                                                     // 13344\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,                                                                     // 13345\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,                                                                     // 13346\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,                                                                     // 13347\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,                                                                     // 13348\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,                                                                     // 13349\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,                                                                     // 13350\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,                                                                     // 13351\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,                                                                     // 13352\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,                                                                     // 13353\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,                                                                     // 13354\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,                                                                     // 13355\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817                                                                      // 13356\n]                                                                                                                     // 13357\n                                                                                                                      // 13358\nvar W = new Array(160)                                                                                                // 13359\n                                                                                                                      // 13360\nfunction Sha512() {                                                                                                   // 13361\n  this.init()                                                                                                         // 13362\n  this._w = W                                                                                                         // 13363\n                                                                                                                      // 13364\n  Hash.call(this, 128, 112)                                                                                           // 13365\n}                                                                                                                     // 13366\n                                                                                                                      // 13367\ninherits(Sha512, Hash)                                                                                                // 13368\n                                                                                                                      // 13369\nSha512.prototype.init = function () {                                                                                 // 13370\n  this._a = 0x6a09e667|0                                                                                              // 13371\n  this._b = 0xbb67ae85|0                                                                                              // 13372\n  this._c = 0x3c6ef372|0                                                                                              // 13373\n  this._d = 0xa54ff53a|0                                                                                              // 13374\n  this._e = 0x510e527f|0                                                                                              // 13375\n  this._f = 0x9b05688c|0                                                                                              // 13376\n  this._g = 0x1f83d9ab|0                                                                                              // 13377\n  this._h = 0x5be0cd19|0                                                                                              // 13378\n                                                                                                                      // 13379\n  this._al = 0xf3bcc908|0                                                                                             // 13380\n  this._bl = 0x84caa73b|0                                                                                             // 13381\n  this._cl = 0xfe94f82b|0                                                                                             // 13382\n  this._dl = 0x5f1d36f1|0                                                                                             // 13383\n  this._el = 0xade682d1|0                                                                                             // 13384\n  this._fl = 0x2b3e6c1f|0                                                                                             // 13385\n  this._gl = 0xfb41bd6b|0                                                                                             // 13386\n  this._hl = 0x137e2179|0                                                                                             // 13387\n                                                                                                                      // 13388\n  return this                                                                                                         // 13389\n}                                                                                                                     // 13390\n                                                                                                                      // 13391\nfunction S (X, Xl, n) {                                                                                               // 13392\n  return (X >>> n) | (Xl << (32 - n))                                                                                 // 13393\n}                                                                                                                     // 13394\n                                                                                                                      // 13395\nfunction Ch (x, y, z) {                                                                                               // 13396\n  return ((x & y) ^ ((~x) & z));                                                                                      // 13397\n}                                                                                                                     // 13398\n                                                                                                                      // 13399\nfunction Maj (x, y, z) {                                                                                              // 13400\n  return ((x & y) ^ (x & z) ^ (y & z));                                                                               // 13401\n}                                                                                                                     // 13402\n                                                                                                                      // 13403\nSha512.prototype._update = function(M) {                                                                              // 13404\n  var W = this._w                                                                                                     // 13405\n                                                                                                                      // 13406\n  var a = this._a | 0                                                                                                 // 13407\n  var b = this._b | 0                                                                                                 // 13408\n  var c = this._c | 0                                                                                                 // 13409\n  var d = this._d | 0                                                                                                 // 13410\n  var e = this._e | 0                                                                                                 // 13411\n  var f = this._f | 0                                                                                                 // 13412\n  var g = this._g | 0                                                                                                 // 13413\n  var h = this._h | 0                                                                                                 // 13414\n                                                                                                                      // 13415\n  var al = this._al | 0                                                                                               // 13416\n  var bl = this._bl | 0                                                                                               // 13417\n  var cl = this._cl | 0                                                                                               // 13418\n  var dl = this._dl | 0                                                                                               // 13419\n  var el = this._el | 0                                                                                               // 13420\n  var fl = this._fl | 0                                                                                               // 13421\n  var gl = this._gl | 0                                                                                               // 13422\n  var hl = this._hl | 0                                                                                               // 13423\n                                                                                                                      // 13424\n  var i = 0, j = 0                                                                                                    // 13425\n  var Wi, Wil                                                                                                         // 13426\n  function calcW() {                                                                                                  // 13427\n    var x  = W[j - 15*2]                                                                                              // 13428\n    var xl = W[j - 15*2 + 1]                                                                                          // 13429\n    var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)                                                               // 13430\n    var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)                                                             // 13431\n                                                                                                                      // 13432\n    x  = W[j - 2*2]                                                                                                   // 13433\n    xl = W[j - 2*2 + 1]                                                                                               // 13434\n    var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)                                                             // 13435\n    var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)                                                           // 13436\n                                                                                                                      // 13437\n    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]                                                                  // 13438\n    var Wi7  = W[j - 7*2]                                                                                             // 13439\n    var Wi7l = W[j - 7*2 + 1]                                                                                         // 13440\n                                                                                                                      // 13441\n    var Wi16  = W[j - 16*2]                                                                                           // 13442\n    var Wi16l = W[j - 16*2 + 1]                                                                                       // 13443\n                                                                                                                      // 13444\n    Wil = gamma0l + Wi7l                                                                                              // 13445\n    Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)                                                     // 13446\n    Wil = Wil + gamma1l                                                                                               // 13447\n    Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)                                                     // 13448\n    Wil = Wil + Wi16l                                                                                                 // 13449\n    Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)                                                          // 13450\n  }                                                                                                                   // 13451\n                                                                                                                      // 13452\n  function loop() {                                                                                                   // 13453\n    W[j] = Wi                                                                                                         // 13454\n    W[j + 1] = Wil                                                                                                    // 13455\n                                                                                                                      // 13456\n    var maj = Maj(a, b, c)                                                                                            // 13457\n    var majl = Maj(al, bl, cl)                                                                                        // 13458\n                                                                                                                      // 13459\n    var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)                                                            // 13460\n    var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)                                                            // 13461\n    var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)                                                           // 13462\n    var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)                                                           // 13463\n                                                                                                                      // 13464\n    // t1 = h + sigma1 + ch + K[i] + W[i]                                                                             // 13465\n    var Ki = K[j]                                                                                                     // 13466\n    var Kil = K[j + 1]                                                                                                // 13467\n                                                                                                                      // 13468\n    var ch = Ch(e, f, g)                                                                                              // 13469\n    var chl = Ch(el, fl, gl)                                                                                          // 13470\n                                                                                                                      // 13471\n    var t1l = hl + sigma1l                                                                                            // 13472\n    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)                                                         // 13473\n    t1l = t1l + chl                                                                                                   // 13474\n    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)                                                                // 13475\n    t1l = t1l + Kil                                                                                                   // 13476\n    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)                                                                // 13477\n    t1l = t1l + Wil                                                                                                   // 13478\n    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)                                                                // 13479\n                                                                                                                      // 13480\n    // t2 = sigma0 + maj                                                                                              // 13481\n    var t2l = sigma0l + majl                                                                                          // 13482\n    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)                                                  // 13483\n                                                                                                                      // 13484\n    h  = g                                                                                                            // 13485\n    hl = gl                                                                                                           // 13486\n    g  = f                                                                                                            // 13487\n    gl = fl                                                                                                           // 13488\n    f  = e                                                                                                            // 13489\n    fl = el                                                                                                           // 13490\n    el = (dl + t1l) | 0                                                                                               // 13491\n    e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0                                                             // 13492\n    d  = c                                                                                                            // 13493\n    dl = cl                                                                                                           // 13494\n    c  = b                                                                                                            // 13495\n    cl = bl                                                                                                           // 13496\n    b  = a                                                                                                            // 13497\n    bl = al                                                                                                           // 13498\n    al = (t1l + t2l) | 0                                                                                              // 13499\n    a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0                                                           // 13500\n                                                                                                                      // 13501\n    i++                                                                                                               // 13502\n    j += 2                                                                                                            // 13503\n  }                                                                                                                   // 13504\n                                                                                                                      // 13505\n  while (i < 16) {                                                                                                    // 13506\n    Wi = M.readInt32BE(j * 4)                                                                                         // 13507\n    Wil = M.readInt32BE(j * 4 + 4)                                                                                    // 13508\n                                                                                                                      // 13509\n    loop()                                                                                                            // 13510\n  }                                                                                                                   // 13511\n                                                                                                                      // 13512\n  while (i < 80) {                                                                                                    // 13513\n    calcW()                                                                                                           // 13514\n    loop()                                                                                                            // 13515\n  }                                                                                                                   // 13516\n                                                                                                                      // 13517\n  this._al = (this._al + al) | 0                                                                                      // 13518\n  this._bl = (this._bl + bl) | 0                                                                                      // 13519\n  this._cl = (this._cl + cl) | 0                                                                                      // 13520\n  this._dl = (this._dl + dl) | 0                                                                                      // 13521\n  this._el = (this._el + el) | 0                                                                                      // 13522\n  this._fl = (this._fl + fl) | 0                                                                                      // 13523\n  this._gl = (this._gl + gl) | 0                                                                                      // 13524\n  this._hl = (this._hl + hl) | 0                                                                                      // 13525\n                                                                                                                      // 13526\n  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0                                               // 13527\n  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0                                               // 13528\n  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0                                               // 13529\n  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0                                               // 13530\n  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0                                               // 13531\n  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0                                               // 13532\n  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0                                               // 13533\n  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0                                               // 13534\n}                                                                                                                     // 13535\n                                                                                                                      // 13536\nSha512.prototype._hash = function () {                                                                                // 13537\n  var H = new Buffer(64)                                                                                              // 13538\n                                                                                                                      // 13539\n  function writeInt64BE(h, l, offset) {                                                                               // 13540\n    H.writeInt32BE(h, offset)                                                                                         // 13541\n    H.writeInt32BE(l, offset + 4)                                                                                     // 13542\n  }                                                                                                                   // 13543\n                                                                                                                      // 13544\n  writeInt64BE(this._a, this._al, 0)                                                                                  // 13545\n  writeInt64BE(this._b, this._bl, 8)                                                                                  // 13546\n  writeInt64BE(this._c, this._cl, 16)                                                                                 // 13547\n  writeInt64BE(this._d, this._dl, 24)                                                                                 // 13548\n  writeInt64BE(this._e, this._el, 32)                                                                                 // 13549\n  writeInt64BE(this._f, this._fl, 40)                                                                                 // 13550\n  writeInt64BE(this._g, this._gl, 48)                                                                                 // 13551\n  writeInt64BE(this._h, this._hl, 56)                                                                                 // 13552\n                                                                                                                      // 13553\n  return H                                                                                                            // 13554\n}                                                                                                                     // 13555\n                                                                                                                      // 13556\nmodule.exports = Sha512                                                                                               // 13557\n                                                                                                                      // 13558\n}).call(this,require(\"buffer\").Buffer)                                                                                // 13559\n                                                                                                                      // 13560\n},{\"./hash\":98,\"buffer\":2,\"inherits\":144}],106:[function(require,module,exports){                                     // 13561\n(function (Buffer){                                                                                                   // 13562\n'use strict';                                                                                                         // 13563\nvar createHash = require('create-hash/browser');                                                                      // 13564\nvar inherits = require('inherits')                                                                                    // 13565\n                                                                                                                      // 13566\nvar Transform = require('stream').Transform                                                                           // 13567\n                                                                                                                      // 13568\nvar ZEROS = new Buffer(128)                                                                                           // 13569\nZEROS.fill(0)                                                                                                         // 13570\n                                                                                                                      // 13571\nfunction Hmac(alg, key) {                                                                                             // 13572\n  Transform.call(this)                                                                                                // 13573\n                                                                                                                      // 13574\n  if (typeof key === 'string') {                                                                                      // 13575\n    key = new Buffer(key)                                                                                             // 13576\n  }                                                                                                                   // 13577\n                                                                                                                      // 13578\n  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64                                                   // 13579\n                                                                                                                      // 13580\n  this._alg = alg                                                                                                     // 13581\n  this._key = key                                                                                                     // 13582\n                                                                                                                      // 13583\n  if (key.length > blocksize) {                                                                                       // 13584\n    key = createHash(alg).update(key).digest()                                                                        // 13585\n                                                                                                                      // 13586\n  } else if (key.length < blocksize) {                                                                                // 13587\n    key = Buffer.concat([key, ZEROS], blocksize)                                                                      // 13588\n  }                                                                                                                   // 13589\n                                                                                                                      // 13590\n  var ipad = this._ipad = new Buffer(blocksize)                                                                       // 13591\n  var opad = this._opad = new Buffer(blocksize)                                                                       // 13592\n                                                                                                                      // 13593\n  for (var i = 0; i < blocksize; i++) {                                                                               // 13594\n    ipad[i] = key[i] ^ 0x36                                                                                           // 13595\n    opad[i] = key[i] ^ 0x5C                                                                                           // 13596\n  }                                                                                                                   // 13597\n                                                                                                                      // 13598\n  this._hash = createHash(alg).update(ipad)                                                                           // 13599\n}                                                                                                                     // 13600\n                                                                                                                      // 13601\ninherits(Hmac, Transform)                                                                                             // 13602\n                                                                                                                      // 13603\nHmac.prototype.update = function (data, enc) {                                                                        // 13604\n  this._hash.update(data, enc)                                                                                        // 13605\n                                                                                                                      // 13606\n  return this                                                                                                         // 13607\n}                                                                                                                     // 13608\n                                                                                                                      // 13609\nHmac.prototype._transform = function (data, _, next) {                                                                // 13610\n  this._hash.update(data)                                                                                             // 13611\n                                                                                                                      // 13612\n  next()                                                                                                              // 13613\n}                                                                                                                     // 13614\n                                                                                                                      // 13615\nHmac.prototype._flush = function (next) {                                                                             // 13616\n  this.push(this.digest())                                                                                            // 13617\n                                                                                                                      // 13618\n  next()                                                                                                              // 13619\n}                                                                                                                     // 13620\n                                                                                                                      // 13621\nHmac.prototype.digest = function (enc) {                                                                              // 13622\n  var h = this._hash.digest()                                                                                         // 13623\n                                                                                                                      // 13624\n  return createHash(this._alg).update(this._opad).update(h).digest(enc)                                               // 13625\n}                                                                                                                     // 13626\n                                                                                                                      // 13627\nmodule.exports = function createHmac(alg, key) {                                                                      // 13628\n  return new Hmac(alg, key)                                                                                           // 13629\n}                                                                                                                     // 13630\n                                                                                                                      // 13631\n}).call(this,require(\"buffer\").Buffer)                                                                                // 13632\n                                                                                                                      // 13633\n},{\"buffer\":2,\"create-hash/browser\":94,\"inherits\":144,\"stream\":158}],107:[function(require,module,exports){           // 13634\n(function (Buffer){                                                                                                   // 13635\nvar generatePrime = require('./lib/generatePrime');                                                                   // 13636\nvar primes = require('./lib/primes');                                                                                 // 13637\n                                                                                                                      // 13638\nvar DH = require('./lib/dh');                                                                                         // 13639\n                                                                                                                      // 13640\nfunction getDiffieHellman(mod) {                                                                                      // 13641\n  var prime = new Buffer(primes[mod].prime, 'hex');                                                                   // 13642\n  var gen = new Buffer(primes[mod].gen, 'hex');                                                                       // 13643\n                                                                                                                      // 13644\n  return new DH(prime, gen);                                                                                          // 13645\n}                                                                                                                     // 13646\n                                                                                                                      // 13647\nfunction createDiffieHellman(prime, enc, generator, genc) {                                                           // 13648\n  if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {         // 13649\n    genc = generator;                                                                                                 // 13650\n    generator = enc;                                                                                                  // 13651\n    enc = undefined;                                                                                                  // 13652\n  }                                                                                                                   // 13653\n                                                                                                                      // 13654\n  enc = enc || 'binary';                                                                                              // 13655\n  genc = genc || 'binary';                                                                                            // 13656\n  generator = generator || new Buffer([2]);                                                                           // 13657\n                                                                                                                      // 13658\n  if (!Buffer.isBuffer(generator)) {                                                                                  // 13659\n    generator = new Buffer(generator, genc);                                                                          // 13660\n  }                                                                                                                   // 13661\n                                                                                                                      // 13662\n  if (typeof prime === 'number') {                                                                                    // 13663\n    return new DH(generatePrime(prime, generator), generator, true);                                                  // 13664\n  }                                                                                                                   // 13665\n                                                                                                                      // 13666\n  if (!Buffer.isBuffer(prime)) {                                                                                      // 13667\n    prime = new Buffer(prime, enc);                                                                                   // 13668\n  }                                                                                                                   // 13669\n                                                                                                                      // 13670\n  return new DH(prime, generator, true);                                                                              // 13671\n}                                                                                                                     // 13672\n                                                                                                                      // 13673\nexports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;          // 13674\nexports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;                                            // 13675\n                                                                                                                      // 13676\n}).call(this,require(\"buffer\").Buffer)                                                                                // 13677\n                                                                                                                      // 13678\n},{\"./lib/dh\":108,\"./lib/generatePrime\":109,\"./lib/primes\":110,\"buffer\":2}],108:[function(require,module,exports){    // 13679\n(function (Buffer){                                                                                                   // 13680\nvar BN = require('bn.js');                                                                                            // 13681\nvar MillerRabin = require('miller-rabin');                                                                            // 13682\nvar millerRabin = new MillerRabin();                                                                                  // 13683\nvar TWENTYFOUR = new BN(24);                                                                                          // 13684\nvar ELEVEN = new BN(11);                                                                                              // 13685\nvar TEN = new BN(10);                                                                                                 // 13686\nvar THREE = new BN(3);                                                                                                // 13687\nvar SEVEN = new BN(7);                                                                                                // 13688\nvar primes = require('./generatePrime');                                                                              // 13689\nvar randomBytes = require('randombytes');                                                                             // 13690\nmodule.exports = DH;                                                                                                  // 13691\n                                                                                                                      // 13692\nfunction setPublicKey(pub, enc) {                                                                                     // 13693\n  enc = enc || 'utf8';                                                                                                // 13694\n  if (!Buffer.isBuffer(pub)) {                                                                                        // 13695\n    pub = new Buffer(pub, enc);                                                                                       // 13696\n  }                                                                                                                   // 13697\n  this._pub = new BN(pub);                                                                                            // 13698\n  return this;                                                                                                        // 13699\n}                                                                                                                     // 13700\n                                                                                                                      // 13701\nfunction setPrivateKey(priv, enc) {                                                                                   // 13702\n  enc = enc || 'utf8';                                                                                                // 13703\n  if (!Buffer.isBuffer(priv)) {                                                                                       // 13704\n    priv = new Buffer(priv, enc);                                                                                     // 13705\n  }                                                                                                                   // 13706\n  this._priv = new BN(priv);                                                                                          // 13707\n  return this;                                                                                                        // 13708\n}                                                                                                                     // 13709\n                                                                                                                      // 13710\nvar primeCache = {};                                                                                                  // 13711\nfunction checkPrime(prime, generator) {                                                                               // 13712\n  var gen = generator.toString('hex');                                                                                // 13713\n  var hex = [gen, prime.toString(16)].join('_');                                                                      // 13714\n  if (hex in primeCache) {                                                                                            // 13715\n    return primeCache[hex];                                                                                           // 13716\n  }                                                                                                                   // 13717\n  var error = 0;                                                                                                      // 13718\n                                                                                                                      // 13719\n  if (prime.isEven() ||                                                                                               // 13720\n    !primes.simpleSieve ||                                                                                            // 13721\n    !primes.fermatTest(prime) ||                                                                                      // 13722\n    !millerRabin.test(prime)) {                                                                                       // 13723\n    //not a prime so +1                                                                                               // 13724\n    error += 1;                                                                                                       // 13725\n                                                                                                                      // 13726\n    if (gen === '02' || gen === '05') {                                                                               // 13727\n      // we'd be able to check the generator                                                                          // 13728\n      // it would fail so +8                                                                                          // 13729\n      error += 8;                                                                                                     // 13730\n    } else {                                                                                                          // 13731\n      //we wouldn't be able to test the generator                                                                     // 13732\n      // so +4                                                                                                        // 13733\n      error += 4;                                                                                                     // 13734\n    }                                                                                                                 // 13735\n    primeCache[hex] = error;                                                                                          // 13736\n    return error;                                                                                                     // 13737\n  }                                                                                                                   // 13738\n  if (!millerRabin.test(prime.shrn(1))) {                                                                             // 13739\n    //not a safe prime                                                                                                // 13740\n    error += 2;                                                                                                       // 13741\n  }                                                                                                                   // 13742\n  var rem;                                                                                                            // 13743\n  switch (gen) {                                                                                                      // 13744\n    case '02':                                                                                                        // 13745\n      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {                                                                        // 13746\n        // unsuidable generator                                                                                       // 13747\n        error += 8;                                                                                                   // 13748\n      }                                                                                                               // 13749\n      break;                                                                                                          // 13750\n    case '05':                                                                                                        // 13751\n      rem = prime.mod(TEN);                                                                                           // 13752\n      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {                                                                         // 13753\n        // prime mod 10 needs to equal 3 or 7                                                                         // 13754\n        error += 8;                                                                                                   // 13755\n      }                                                                                                               // 13756\n      break;                                                                                                          // 13757\n    default:                                                                                                          // 13758\n      error += 4;                                                                                                     // 13759\n  }                                                                                                                   // 13760\n  primeCache[hex] = error;                                                                                            // 13761\n  return error;                                                                                                       // 13762\n}                                                                                                                     // 13763\n                                                                                                                      // 13764\nfunction defineError (self, error) {                                                                                  // 13765\n  try {                                                                                                               // 13766\n    Object.defineProperty(self, 'verifyError', {                                                                      // 13767\n      enumerable: true,                                                                                               // 13768\n      value: error,                                                                                                   // 13769\n      writable: false                                                                                                 // 13770\n    });                                                                                                               // 13771\n  } catch(e) {                                                                                                        // 13772\n    self.verifyError = error;                                                                                         // 13773\n  }                                                                                                                   // 13774\n}                                                                                                                     // 13775\nfunction DH(prime, generator, malleable) {                                                                            // 13776\n  this.setGenerator(generator);                                                                                       // 13777\n  this.__prime = new BN(prime);                                                                                       // 13778\n  this._prime = BN.mont(this.__prime);                                                                                // 13779\n  this._primeLen = prime.length;                                                                                      // 13780\n  this._pub = void 0;                                                                                                 // 13781\n  this._priv = void 0;                                                                                                // 13782\n                                                                                                                      // 13783\n  if (malleable) {                                                                                                    // 13784\n    this.setPublicKey = setPublicKey;                                                                                 // 13785\n    this.setPrivateKey = setPrivateKey;                                                                               // 13786\n    defineError(this, checkPrime(this.__prime, generator));                                                           // 13787\n  } else {                                                                                                            // 13788\n    defineError(this, 8);                                                                                             // 13789\n  }                                                                                                                   // 13790\n}                                                                                                                     // 13791\n                                                                                                                      // 13792\nDH.prototype.generateKeys = function () {                                                                             // 13793\n  if (!this._priv) {                                                                                                  // 13794\n    this._priv = new BN(randomBytes(this._primeLen));                                                                 // 13795\n  }                                                                                                                   // 13796\n  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();                                              // 13797\n  return this.getPublicKey();                                                                                         // 13798\n};                                                                                                                    // 13799\n                                                                                                                      // 13800\nDH.prototype.computeSecret = function (other) {                                                                       // 13801\n  other = new BN(other);                                                                                              // 13802\n  other = other.toRed(this._prime);                                                                                   // 13803\n  var secret = other.redPow(this._priv).fromRed();                                                                    // 13804\n  var out = new Buffer(secret.toArray());                                                                             // 13805\n  var prime = this.getPrime();                                                                                        // 13806\n  if (out.length < prime.length) {                                                                                    // 13807\n    var front = new Buffer(prime.length - out.length);                                                                // 13808\n    front.fill(0);                                                                                                    // 13809\n    out = Buffer.concat([front, out]);                                                                                // 13810\n  }                                                                                                                   // 13811\n  return out;                                                                                                         // 13812\n};                                                                                                                    // 13813\n                                                                                                                      // 13814\nDH.prototype.getPublicKey = function getPublicKey(enc) {                                                              // 13815\n  return formatReturnValue(this._pub, enc);                                                                           // 13816\n};                                                                                                                    // 13817\n                                                                                                                      // 13818\nDH.prototype.getPrivateKey = function getPrivateKey(enc) {                                                            // 13819\n  return formatReturnValue(this._priv, enc);                                                                          // 13820\n};                                                                                                                    // 13821\n                                                                                                                      // 13822\nDH.prototype.getPrime = function (enc) {                                                                              // 13823\n  return formatReturnValue(this.__prime, enc);                                                                        // 13824\n};                                                                                                                    // 13825\n                                                                                                                      // 13826\nDH.prototype.getGenerator = function (enc) {                                                                          // 13827\n  return formatReturnValue(this._gen, enc);                                                                           // 13828\n};                                                                                                                    // 13829\n                                                                                                                      // 13830\nDH.prototype.setGenerator = function (gen, enc) {                                                                     // 13831\n  enc = enc || 'utf8';                                                                                                // 13832\n  if (!Buffer.isBuffer(gen)) {                                                                                        // 13833\n    gen = new Buffer(gen, enc);                                                                                       // 13834\n  }                                                                                                                   // 13835\n  this._gen = new BN(gen);                                                                                            // 13836\n  return this;                                                                                                        // 13837\n};                                                                                                                    // 13838\n                                                                                                                      // 13839\nfunction formatReturnValue(bn, enc) {                                                                                 // 13840\n  var buf = new Buffer(bn.toArray());                                                                                 // 13841\n  if (!enc) {                                                                                                         // 13842\n    return buf;                                                                                                       // 13843\n  } else {                                                                                                            // 13844\n    return buf.toString(enc);                                                                                         // 13845\n  }                                                                                                                   // 13846\n}                                                                                                                     // 13847\n}).call(this,require(\"buffer\").Buffer)                                                                                // 13848\n                                                                                                                      // 13849\n},{\"./generatePrime\":109,\"bn.js\":111,\"buffer\":2,\"miller-rabin\":112,\"randombytes\":142}],109:[function(require,module,exports){\nvar randomBytes = require('randombytes');                                                                             // 13851\nmodule.exports = findPrime;                                                                                           // 13852\nfindPrime.simpleSieve = simpleSieve;                                                                                  // 13853\nfindPrime.fermatTest = fermatTest;                                                                                    // 13854\nvar BN = require('bn.js');                                                                                            // 13855\nvar TWENTYFOUR = new BN(24);                                                                                          // 13856\nvar MillerRabin = require('miller-rabin');                                                                            // 13857\nvar millerRabin = new MillerRabin();                                                                                  // 13858\nvar ONE = new BN(1);                                                                                                  // 13859\nvar TWO = new BN(2);                                                                                                  // 13860\nvar FIVE = new BN(5);                                                                                                 // 13861\nvar SIXTEEN = new BN(16);                                                                                             // 13862\nvar EIGHT = new BN(8);                                                                                                // 13863\nvar TEN = new BN(10);                                                                                                 // 13864\nvar THREE = new BN(3);                                                                                                // 13865\nvar SEVEN = new BN(7);                                                                                                // 13866\nvar ELEVEN = new BN(11);                                                                                              // 13867\nvar FOUR = new BN(4);                                                                                                 // 13868\nvar TWELVE = new BN(12);                                                                                              // 13869\nvar primes = null;                                                                                                    // 13870\n                                                                                                                      // 13871\nfunction _getPrimes() {                                                                                               // 13872\n  if (primes !== null)                                                                                                // 13873\n    return primes;                                                                                                    // 13874\n                                                                                                                      // 13875\n  var limit = 0x100000;                                                                                               // 13876\n  var res = [];                                                                                                       // 13877\n  res[0] = 2;                                                                                                         // 13878\n  for (var i = 1, k = 3; k < limit; k += 2) {                                                                         // 13879\n    var sqrt = Math.ceil(Math.sqrt(k));                                                                               // 13880\n    for (var j = 0; j < i && res[j] <= sqrt; j++)                                                                     // 13881\n      if (k % res[j] === 0)                                                                                           // 13882\n        break;                                                                                                        // 13883\n                                                                                                                      // 13884\n    if (i !== j && res[j] <= sqrt)                                                                                    // 13885\n      continue;                                                                                                       // 13886\n                                                                                                                      // 13887\n    res[i++] = k;                                                                                                     // 13888\n  }                                                                                                                   // 13889\n  primes = res;                                                                                                       // 13890\n  return res;                                                                                                         // 13891\n}                                                                                                                     // 13892\n                                                                                                                      // 13893\nfunction simpleSieve(p) {                                                                                             // 13894\n  var primes = _getPrimes();                                                                                          // 13895\n                                                                                                                      // 13896\n  for (var i = 0; i < primes.length; i++)                                                                             // 13897\n    if (p.modn(primes[i]) === 0) {                                                                                    // 13898\n      if (p.cmpn(primes[i]) === 0) {                                                                                  // 13899\n        return true;                                                                                                  // 13900\n      } else {                                                                                                        // 13901\n        return false;                                                                                                 // 13902\n      }                                                                                                               // 13903\n    }                                                                                                                 // 13904\n                                                                                                                      // 13905\n  return true;                                                                                                        // 13906\n}                                                                                                                     // 13907\n                                                                                                                      // 13908\nfunction fermatTest(p) {                                                                                              // 13909\n  var red = BN.mont(p);                                                                                               // 13910\n  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;                                                    // 13911\n}                                                                                                                     // 13912\n                                                                                                                      // 13913\nfunction findPrime(bits, gen) {                                                                                       // 13914\n  if (bits < 16) {                                                                                                    // 13915\n    // this is what openssl does                                                                                      // 13916\n    if (gen === 2 || gen === 5) {                                                                                     // 13917\n      return new BN([0x8c, 0x7b]);                                                                                    // 13918\n    } else {                                                                                                          // 13919\n      return new BN([0x8c, 0x27]);                                                                                    // 13920\n    }                                                                                                                 // 13921\n  }                                                                                                                   // 13922\n  gen = new BN(gen);                                                                                                  // 13923\n  var runs, comp;                                                                                                     // 13924\n  function generateRandom(bits) {                                                                                     // 13925\n    runs = -1;                                                                                                        // 13926\n    var out = new BN(randomBytes(Math.ceil(bits / 8)));                                                               // 13927\n    while (out.bitLength() > bits) {                                                                                  // 13928\n      out.ishrn(1);                                                                                                   // 13929\n    }                                                                                                                 // 13930\n    if (out.isEven()) {                                                                                               // 13931\n      out.iadd(ONE);                                                                                                  // 13932\n    }                                                                                                                 // 13933\n    if (!out.testn(1)) {                                                                                              // 13934\n      out.iadd(TWO);                                                                                                  // 13935\n    }                                                                                                                 // 13936\n    if (!gen.cmp(TWO)) {                                                                                              // 13937\n      while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {                                                                       // 13938\n        out.iadd(FOUR);                                                                                               // 13939\n      }                                                                                                               // 13940\n      comp = {                                                                                                        // 13941\n        major: [TWENTYFOUR],                                                                                          // 13942\n        minor: [TWELVE]                                                                                               // 13943\n      };                                                                                                              // 13944\n    } else if (!gen.cmp(FIVE)) {                                                                                      // 13945\n      rem = out.mod(TEN);                                                                                             // 13946\n      while (rem.cmp(THREE)) {                                                                                        // 13947\n        out.iadd(FOUR);                                                                                               // 13948\n        rem = out.mod(TEN);                                                                                           // 13949\n      }                                                                                                               // 13950\n      comp = {                                                                                                        // 13951\n        major: [FOUR, SIXTEEN],                                                                                       // 13952\n        minor: [TWO, EIGHT]                                                                                           // 13953\n      };                                                                                                              // 13954\n    } else {                                                                                                          // 13955\n      comp = {                                                                                                        // 13956\n        major: [FOUR],                                                                                                // 13957\n        minor: [TWO]                                                                                                  // 13958\n      };                                                                                                              // 13959\n    }                                                                                                                 // 13960\n    return out;                                                                                                       // 13961\n  }                                                                                                                   // 13962\n  var num = generateRandom(bits);                                                                                     // 13963\n                                                                                                                      // 13964\n  var n2 = num.shrn(1);                                                                                               // 13965\n                                                                                                                      // 13966\n  while (true) {                                                                                                      // 13967\n    while (num.bitLength() > bits) {                                                                                  // 13968\n      num = generateRandom(bits);                                                                                     // 13969\n      n2 = num.shrn(1);                                                                                               // 13970\n    }                                                                                                                 // 13971\n    runs++;                                                                                                           // 13972\n    if (simpleSieve(n2) &&  simpleSieve(num) &&                                                                       // 13973\n      fermatTest(n2) &&  fermatTest(num) &&                                                                           // 13974\n      millerRabin.test(n2) && millerRabin.test(num)) {                                                                // 13975\n      return num;                                                                                                     // 13976\n    }                                                                                                                 // 13977\n    num.iadd(comp.major[runs%comp.major.length]);                                                                     // 13978\n    n2.iadd(comp.minor[runs%comp.minor.length]);                                                                      // 13979\n  }                                                                                                                   // 13980\n                                                                                                                      // 13981\n}                                                                                                                     // 13982\n},{\"bn.js\":111,\"miller-rabin\":112,\"randombytes\":142}],110:[function(require,module,exports){                          // 13983\nmodule.exports={                                                                                                      // 13984\n    \"modp1\": {                                                                                                        // 13985\n        \"gen\": \"02\",                                                                                                  // 13986\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"\n    },                                                                                                                // 13988\n    \"modp2\": {                                                                                                        // 13989\n        \"gen\": \"02\",                                                                                                  // 13990\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"\n    },                                                                                                                // 13992\n    \"modp5\": {                                                                                                        // 13993\n        \"gen\": \"02\",                                                                                                  // 13994\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"\n    },                                                                                                                // 13996\n    \"modp14\": {                                                                                                       // 13997\n        \"gen\": \"02\",                                                                                                  // 13998\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"\n    },                                                                                                                // 14000\n    \"modp15\": {                                                                                                       // 14001\n        \"gen\": \"02\",                                                                                                  // 14002\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"\n    },                                                                                                                // 14004\n    \"modp16\": {                                                                                                       // 14005\n        \"gen\": \"02\",                                                                                                  // 14006\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"\n    },                                                                                                                // 14008\n    \"modp17\": {                                                                                                       // 14009\n        \"gen\": \"02\",                                                                                                  // 14010\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"\n    },                                                                                                                // 14012\n    \"modp18\": {                                                                                                       // 14013\n        \"gen\": \"02\",                                                                                                  // 14014\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"\n    }                                                                                                                 // 14016\n}                                                                                                                     // 14017\n},{}],111:[function(require,module,exports){                                                                          // 14018\narguments[4][28][0].apply(exports,arguments)                                                                          // 14019\n},{\"dup\":28}],112:[function(require,module,exports){                                                                  // 14020\nvar bn = require('bn.js');                                                                                            // 14021\nvar brorand = require('brorand');                                                                                     // 14022\n                                                                                                                      // 14023\nfunction MillerRabin(rand) {                                                                                          // 14024\n  this.rand = rand || new brorand.Rand();                                                                             // 14025\n}                                                                                                                     // 14026\nmodule.exports = MillerRabin;                                                                                         // 14027\n                                                                                                                      // 14028\nMillerRabin.create = function create(rand) {                                                                          // 14029\n  return new MillerRabin(rand);                                                                                       // 14030\n};                                                                                                                    // 14031\n                                                                                                                      // 14032\nMillerRabin.prototype._rand = function _rand(n) {                                                                     // 14033\n  var len = n.bitLength();                                                                                            // 14034\n  var buf = this.rand.generate(Math.ceil(len / 8));                                                                   // 14035\n                                                                                                                      // 14036\n  // Set low bits                                                                                                     // 14037\n  buf[0] |= 3;                                                                                                        // 14038\n                                                                                                                      // 14039\n  // Mask high bits                                                                                                   // 14040\n  var mask = len & 0x7;                                                                                               // 14041\n  if (mask !== 0)                                                                                                     // 14042\n    buf[buf.length - 1] >>= 7 - mask;                                                                                 // 14043\n                                                                                                                      // 14044\n  return new bn(buf);                                                                                                 // 14045\n}                                                                                                                     // 14046\n                                                                                                                      // 14047\nMillerRabin.prototype.test = function test(n, k, cb) {                                                                // 14048\n  var len = n.bitLength();                                                                                            // 14049\n  var red = bn.mont(n);                                                                                               // 14050\n  var rone = new bn(1).toRed(red);                                                                                    // 14051\n                                                                                                                      // 14052\n  if (!k)                                                                                                             // 14053\n    k = Math.max(1, (len / 48) | 0);                                                                                  // 14054\n                                                                                                                      // 14055\n  // Find d and s, (n - 1) = (2 ^ s) * d;                                                                             // 14056\n  var n1 = n.subn(1);                                                                                                 // 14057\n  var n2 = n1.subn(1);                                                                                                // 14058\n  for (var s = 0; !n1.testn(s); s++) {}                                                                               // 14059\n  var d = n.shrn(s);                                                                                                  // 14060\n                                                                                                                      // 14061\n  var rn1 = n1.toRed(red);                                                                                            // 14062\n                                                                                                                      // 14063\n  var prime = true;                                                                                                   // 14064\n  for (; k > 0; k--) {                                                                                                // 14065\n    var a = this._rand(n2);                                                                                           // 14066\n    if (cb)                                                                                                           // 14067\n      cb(a);                                                                                                          // 14068\n                                                                                                                      // 14069\n    var x = a.toRed(red).redPow(d);                                                                                   // 14070\n    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)                                                                        // 14071\n      continue;                                                                                                       // 14072\n                                                                                                                      // 14073\n    for (var i = 1; i < s; i++) {                                                                                     // 14074\n      x = x.redSqr();                                                                                                 // 14075\n                                                                                                                      // 14076\n      if (x.cmp(rone) === 0)                                                                                          // 14077\n        return false;                                                                                                 // 14078\n      if (x.cmp(rn1) === 0)                                                                                           // 14079\n        break;                                                                                                        // 14080\n    }                                                                                                                 // 14081\n                                                                                                                      // 14082\n    if (i === s)                                                                                                      // 14083\n      return false;                                                                                                   // 14084\n  }                                                                                                                   // 14085\n                                                                                                                      // 14086\n  return prime;                                                                                                       // 14087\n};                                                                                                                    // 14088\n                                                                                                                      // 14089\nMillerRabin.prototype.getDivisor = function getDivisor(n, k) {                                                        // 14090\n  var len = n.bitLength();                                                                                            // 14091\n  var red = bn.mont(n);                                                                                               // 14092\n  var rone = new bn(1).toRed(red);                                                                                    // 14093\n                                                                                                                      // 14094\n  if (!k)                                                                                                             // 14095\n    k = Math.max(1, (len / 48) | 0);                                                                                  // 14096\n                                                                                                                      // 14097\n  // Find d and s, (n - 1) = (2 ^ s) * d;                                                                             // 14098\n  var n1 = n.subn(1);                                                                                                 // 14099\n  var n2 = n1.subn(1);                                                                                                // 14100\n  for (var s = 0; !n1.testn(s); s++) {}                                                                               // 14101\n  var d = n.shrn(s);                                                                                                  // 14102\n                                                                                                                      // 14103\n  var rn1 = n1.toRed(red);                                                                                            // 14104\n                                                                                                                      // 14105\n  var prime = true;                                                                                                   // 14106\n  for (; k > 0; k--) {                                                                                                // 14107\n    var a = this._rand(n2);                                                                                           // 14108\n                                                                                                                      // 14109\n    var g = n.gcd(a);                                                                                                 // 14110\n    if (g.cmpn(1) !== 0)                                                                                              // 14111\n      return g;                                                                                                       // 14112\n                                                                                                                      // 14113\n    var x = a.toRed(red).redPow(d);                                                                                   // 14114\n    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)                                                                        // 14115\n      continue;                                                                                                       // 14116\n                                                                                                                      // 14117\n    for (var i = 1; i < s; i++) {                                                                                     // 14118\n      x = x.redSqr();                                                                                                 // 14119\n                                                                                                                      // 14120\n      if (x.cmp(rone) === 0)                                                                                          // 14121\n        return x.fromRed().subn(1).gcd(n);                                                                            // 14122\n      if (x.cmp(rn1) === 0)                                                                                           // 14123\n        break;                                                                                                        // 14124\n    }                                                                                                                 // 14125\n                                                                                                                      // 14126\n    if (i === s) {                                                                                                    // 14127\n      x = x.redSqr();                                                                                                 // 14128\n      return x.fromRed().subn(1).gcd(n);                                                                              // 14129\n    }                                                                                                                 // 14130\n  }                                                                                                                   // 14131\n                                                                                                                      // 14132\n  return prime;                                                                                                       // 14133\n};                                                                                                                    // 14134\n                                                                                                                      // 14135\n},{\"bn.js\":111,\"brorand\":113}],113:[function(require,module,exports){                                                 // 14136\narguments[4][42][0].apply(exports,arguments)                                                                          // 14137\n},{\"dup\":42}],114:[function(require,module,exports){                                                                  // 14138\n(function (Buffer){                                                                                                   // 14139\nvar createHmac = require('create-hmac')                                                                               // 14140\nvar MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs                                                                // 14141\n                                                                                                                      // 14142\nexports.pbkdf2 = pbkdf2                                                                                               // 14143\nfunction pbkdf2 (password, salt, iterations, keylen, digest, callback) {                                              // 14144\n  if (typeof digest === 'function') {                                                                                 // 14145\n    callback = digest                                                                                                 // 14146\n    digest = undefined                                                                                                // 14147\n  }                                                                                                                   // 14148\n                                                                                                                      // 14149\n  if (typeof callback !== 'function') {                                                                               // 14150\n    throw new Error('No callback provided to pbkdf2')                                                                 // 14151\n  }                                                                                                                   // 14152\n                                                                                                                      // 14153\n  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)                                                 // 14154\n  setTimeout(function () {                                                                                            // 14155\n    callback(undefined, result)                                                                                       // 14156\n  })                                                                                                                  // 14157\n}                                                                                                                     // 14158\n                                                                                                                      // 14159\nexports.pbkdf2Sync = pbkdf2Sync                                                                                       // 14160\nfunction pbkdf2Sync (password, salt, iterations, keylen, digest) {                                                    // 14161\n  if (typeof iterations !== 'number') {                                                                               // 14162\n    throw new TypeError('Iterations not a number')                                                                    // 14163\n  }                                                                                                                   // 14164\n                                                                                                                      // 14165\n  if (iterations < 0) {                                                                                               // 14166\n    throw new TypeError('Bad iterations')                                                                             // 14167\n  }                                                                                                                   // 14168\n                                                                                                                      // 14169\n  if (typeof keylen !== 'number') {                                                                                   // 14170\n    throw new TypeError('Key length not a number')                                                                    // 14171\n  }                                                                                                                   // 14172\n                                                                                                                      // 14173\n  if (keylen < 0 || keylen > MAX_ALLOC) {                                                                             // 14174\n    throw new TypeError('Bad key length')                                                                             // 14175\n  }                                                                                                                   // 14176\n                                                                                                                      // 14177\n  digest = digest || 'sha1'                                                                                           // 14178\n                                                                                                                      // 14179\n  if (!Buffer.isBuffer(password)) password = new Buffer(password, 'binary')                                           // 14180\n  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, 'binary')                                                       // 14181\n                                                                                                                      // 14182\n  var hLen                                                                                                            // 14183\n  var l = 1                                                                                                           // 14184\n  var DK = new Buffer(keylen)                                                                                         // 14185\n  var block1 = new Buffer(salt.length + 4)                                                                            // 14186\n  salt.copy(block1, 0, 0, salt.length)                                                                                // 14187\n                                                                                                                      // 14188\n  var r                                                                                                               // 14189\n  var T                                                                                                               // 14190\n                                                                                                                      // 14191\n  for (var i = 1; i <= l; i++) {                                                                                      // 14192\n    block1.writeUInt32BE(i, salt.length)                                                                              // 14193\n    var U = createHmac(digest, password).update(block1).digest()                                                      // 14194\n                                                                                                                      // 14195\n    if (!hLen) {                                                                                                      // 14196\n      hLen = U.length                                                                                                 // 14197\n      T = new Buffer(hLen)                                                                                            // 14198\n      l = Math.ceil(keylen / hLen)                                                                                    // 14199\n      r = keylen - (l - 1) * hLen                                                                                     // 14200\n    }                                                                                                                 // 14201\n                                                                                                                      // 14202\n    U.copy(T, 0, 0, hLen)                                                                                             // 14203\n                                                                                                                      // 14204\n    for (var j = 1; j < iterations; j++) {                                                                            // 14205\n      U = createHmac(digest, password).update(U).digest()                                                             // 14206\n                                                                                                                      // 14207\n      for (var k = 0; k < hLen; k++) {                                                                                // 14208\n        T[k] ^= U[k]                                                                                                  // 14209\n      }                                                                                                               // 14210\n    }                                                                                                                 // 14211\n                                                                                                                      // 14212\n    var destPos = (i - 1) * hLen                                                                                      // 14213\n    var len = (i === l ? r : hLen)                                                                                    // 14214\n    T.copy(DK, destPos, 0, len)                                                                                       // 14215\n  }                                                                                                                   // 14216\n                                                                                                                      // 14217\n  return DK                                                                                                           // 14218\n}                                                                                                                     // 14219\n                                                                                                                      // 14220\n}).call(this,require(\"buffer\").Buffer)                                                                                // 14221\n                                                                                                                      // 14222\n},{\"buffer\":2,\"create-hmac\":106}],115:[function(require,module,exports){                                              // 14223\nexports.publicEncrypt = require('./publicEncrypt');                                                                   // 14224\nexports.privateDecrypt = require('./privateDecrypt');                                                                 // 14225\n                                                                                                                      // 14226\nexports.privateEncrypt = function privateEncrypt(key, buf) {                                                          // 14227\n  return exports.publicEncrypt(key, buf, true);                                                                       // 14228\n};                                                                                                                    // 14229\n                                                                                                                      // 14230\nexports.publicDecrypt = function publicDecrypt(key, buf) {                                                            // 14231\n  return exports.privateDecrypt(key, buf, true);                                                                      // 14232\n};                                                                                                                    // 14233\n},{\"./privateDecrypt\":138,\"./publicEncrypt\":139}],116:[function(require,module,exports){                              // 14234\n(function (Buffer){                                                                                                   // 14235\nvar createHash = require('create-hash');                                                                              // 14236\nmodule.exports = function (seed, len) {                                                                               // 14237\n  var t = new Buffer('');                                                                                             // 14238\n  var  i = 0, c;                                                                                                      // 14239\n  while (t.length < len) {                                                                                            // 14240\n    c = i2ops(i++);                                                                                                   // 14241\n    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);                                       // 14242\n  }                                                                                                                   // 14243\n  return t.slice(0, len);                                                                                             // 14244\n};                                                                                                                    // 14245\n                                                                                                                      // 14246\nfunction i2ops(c) {                                                                                                   // 14247\n  var out = new Buffer(4);                                                                                            // 14248\n  out.writeUInt32BE(c,0);                                                                                             // 14249\n  return out;                                                                                                         // 14250\n}                                                                                                                     // 14251\n}).call(this,require(\"buffer\").Buffer)                                                                                // 14252\n                                                                                                                      // 14253\n},{\"buffer\":2,\"create-hash\":94}],117:[function(require,module,exports){                                               // 14254\narguments[4][28][0].apply(exports,arguments)                                                                          // 14255\n},{\"dup\":28}],118:[function(require,module,exports){                                                                  // 14256\n(function (Buffer){                                                                                                   // 14257\nvar bn = require('bn.js');                                                                                            // 14258\nvar randomBytes = require('randombytes');                                                                             // 14259\nmodule.exports = crt;                                                                                                 // 14260\nfunction blind(priv) {                                                                                                // 14261\n  var r = getr(priv);                                                                                                 // 14262\n  var blinder = r.toRed(bn.mont(priv.modulus))                                                                        // 14263\n  .redPow(new bn(priv.publicExponent)).fromRed();                                                                     // 14264\n  return {                                                                                                            // 14265\n    blinder: blinder,                                                                                                 // 14266\n    unblinder:r.invm(priv.modulus)                                                                                    // 14267\n  };                                                                                                                  // 14268\n}                                                                                                                     // 14269\nfunction crt(msg, priv) {                                                                                             // 14270\n  var blinds = blind(priv);                                                                                           // 14271\n  var len = priv.modulus.byteLength();                                                                                // 14272\n  var mod = bn.mont(priv.modulus);                                                                                    // 14273\n  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);                                                    // 14274\n  var c1 = blinded.toRed(bn.mont(priv.prime1));                                                                       // 14275\n  var c2 = blinded.toRed(bn.mont(priv.prime2));                                                                       // 14276\n  var qinv = priv.coefficient;                                                                                        // 14277\n  var p = priv.prime1;                                                                                                // 14278\n  var q = priv.prime2;                                                                                                // 14279\n  var m1 = c1.redPow(priv.exponent1);                                                                                 // 14280\n  var m2 = c2.redPow(priv.exponent2);                                                                                 // 14281\n  m1 = m1.fromRed();                                                                                                  // 14282\n  m2 = m2.fromRed();                                                                                                  // 14283\n  var h = m1.isub(m2).imul(qinv).mod(p);                                                                              // 14284\n  h.imul(q);                                                                                                          // 14285\n  m2.iadd(h);                                                                                                         // 14286\n  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());                                        // 14287\n  if (out.length < len) {                                                                                             // 14288\n    var prefix = new Buffer(len - out.length);                                                                        // 14289\n    prefix.fill(0);                                                                                                   // 14290\n    out = Buffer.concat([prefix, out], len);                                                                          // 14291\n  }                                                                                                                   // 14292\n  return out;                                                                                                         // 14293\n}                                                                                                                     // 14294\ncrt.getr = getr;                                                                                                      // 14295\nfunction getr(priv) {                                                                                                 // 14296\n  var len = priv.modulus.byteLength();                                                                                // 14297\n  var r = new bn(randomBytes(len));                                                                                   // 14298\n  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {                                   // 14299\n    r = new bn(randomBytes(len));                                                                                     // 14300\n  }                                                                                                                   // 14301\n  return r;                                                                                                           // 14302\n}                                                                                                                     // 14303\n}).call(this,require(\"buffer\").Buffer)                                                                                // 14304\n                                                                                                                      // 14305\n},{\"bn.js\":117,\"buffer\":2,\"randombytes\":142}],119:[function(require,module,exports){                                  // 14306\n(function (Buffer){                                                                                                   // 14307\nvar createHash = require('create-hash');                                                                              // 14308\nmodule.exports = function evp(password, salt, keyLen) {                                                               // 14309\n  keyLen = keyLen/8;                                                                                                  // 14310\n  var ki = 0;                                                                                                         // 14311\n  var ii = 0;                                                                                                         // 14312\n  var key = new Buffer(keyLen);                                                                                       // 14313\n  var addmd = 0;                                                                                                      // 14314\n  var md, md_buf;                                                                                                     // 14315\n  var i;                                                                                                              // 14316\n  while (true) {                                                                                                      // 14317\n    md = createHash('md5');                                                                                           // 14318\n    if(addmd++ > 0) {                                                                                                 // 14319\n       md.update(md_buf);                                                                                             // 14320\n    }                                                                                                                 // 14321\n    md.update(password);                                                                                              // 14322\n    md.update(salt);                                                                                                  // 14323\n    md_buf = md.digest();                                                                                             // 14324\n    i = 0;                                                                                                            // 14325\n    if(keyLen > 0) {                                                                                                  // 14326\n      while(true) {                                                                                                   // 14327\n        if(keyLen === 0) {                                                                                            // 14328\n          break;                                                                                                      // 14329\n        }                                                                                                             // 14330\n        if(i === md_buf.length) {                                                                                     // 14331\n          break;                                                                                                      // 14332\n        }                                                                                                             // 14333\n        key[ki++] = md_buf[i++];                                                                                      // 14334\n        keyLen--;                                                                                                     // 14335\n       }                                                                                                              // 14336\n    }                                                                                                                 // 14337\n   if(keyLen === 0) {                                                                                                 // 14338\n      break;                                                                                                          // 14339\n    }                                                                                                                 // 14340\n  }                                                                                                                   // 14341\n  for(i=0;i<md_buf.length;i++) {                                                                                      // 14342\n    md_buf[i] = 0;                                                                                                    // 14343\n  }                                                                                                                   // 14344\n  return key;                                                                                                         // 14345\n};                                                                                                                    // 14346\n}).call(this,require(\"buffer\").Buffer)                                                                                // 14347\n                                                                                                                      // 14348\n},{\"buffer\":2,\"create-hash\":94}],120:[function(require,module,exports){                                               // 14349\narguments[4][51][0].apply(exports,arguments)                                                                          // 14350\n},{\"dup\":51}],121:[function(require,module,exports){                                                                  // 14351\narguments[4][52][0].apply(exports,arguments)                                                                          // 14352\n},{\"asn1.js\":124,\"dup\":52}],122:[function(require,module,exports){                                                    // 14353\n(function (Buffer){                                                                                                   // 14354\n// adapted from https://github.com/apatil/pemstrip                                                                    // 14355\nvar findProc = /Proc-Type: 4,ENCRYPTED\\n\\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\\n\\r?\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?/m;\nvar startRegex =/^-----BEGIN (.*) KEY-----\\n/m;                                                                       // 14357\nvar fullRegex = /^-----BEGIN (.*) KEY-----\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?-----END \\1 KEY-----$/m;                     // 14358\nvar evp = require('./EVP_BytesToKey');                                                                                // 14359\nvar ciphers = require('browserify-aes');                                                                              // 14360\nmodule.exports = function (okey, password) {                                                                          // 14361\n  var key = okey.toString();                                                                                          // 14362\n  var match = key.match(findProc);                                                                                    // 14363\n  var decrypted;                                                                                                      // 14364\n  if (!match) {                                                                                                       // 14365\n    var match2 = key.match(fullRegex);                                                                                // 14366\n    decrypted = new Buffer(match2[2].replace(/\\n\\r?/g, ''), 'base64');                                                // 14367\n  } else {                                                                                                            // 14368\n    var suite = 'aes' + match[1];                                                                                     // 14369\n    var iv = new Buffer(match[2], 'hex');                                                                             // 14370\n    var cipherText = new Buffer(match[3].replace(/\\n\\r?/g, ''), 'base64');                                            // 14371\n    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));                                                 // 14372\n    var out = [];                                                                                                     // 14373\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);                                                      // 14374\n    out.push(cipher.update(cipherText));                                                                              // 14375\n    out.push(cipher.final());                                                                                         // 14376\n    decrypted = Buffer.concat(out);                                                                                   // 14377\n  }                                                                                                                   // 14378\n  var tag = key.match(startRegex)[1] + ' KEY';                                                                        // 14379\n  return {                                                                                                            // 14380\n    tag: tag,                                                                                                         // 14381\n    data: decrypted                                                                                                   // 14382\n  };                                                                                                                  // 14383\n};                                                                                                                    // 14384\n// http://stackoverflow.com/a/7033705                                                                                 // 14385\nfunction wrap(str) {                                                                                                  // 14386\n  var chunks = [];                                                                                                    // 14387\n  while (str) {                                                                                                       // 14388\n    if (str.length < 64) {                                                                                            // 14389\n      chunks.push(str);                                                                                               // 14390\n      break;                                                                                                          // 14391\n    }                                                                                                                 // 14392\n    else {                                                                                                            // 14393\n      chunks.push(str.slice(0, 64));                                                                                  // 14394\n      str = str.slice(64);                                                                                            // 14395\n    }                                                                                                                 // 14396\n  }                                                                                                                   // 14397\n  return chunks.join(\"\\n\");                                                                                           // 14398\n}                                                                                                                     // 14399\n}).call(this,require(\"buffer\").Buffer)                                                                                // 14400\n                                                                                                                      // 14401\n},{\"./EVP_BytesToKey\":119,\"browserify-aes\":10,\"buffer\":2}],123:[function(require,module,exports){                     // 14402\n(function (Buffer){                                                                                                   // 14403\nvar asn1 = require('./asn1');                                                                                         // 14404\nvar aesid = require('./aesid.json');                                                                                  // 14405\nvar fixProc = require('./fixProc');                                                                                   // 14406\nvar ciphers = require('browserify-aes');                                                                              // 14407\nvar compat = require('pbkdf2-compat');                                                                                // 14408\nmodule.exports = parseKeys;                                                                                           // 14409\n                                                                                                                      // 14410\nfunction parseKeys(buffer) {                                                                                          // 14411\n  var password;                                                                                                       // 14412\n  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {                                                       // 14413\n    password = buffer.passphrase;                                                                                     // 14414\n    buffer = buffer.key;                                                                                              // 14415\n  }                                                                                                                   // 14416\n  if (typeof buffer === 'string') {                                                                                   // 14417\n    buffer = new Buffer(buffer);                                                                                      // 14418\n  }                                                                                                                   // 14419\n                                                                                                                      // 14420\n  var stripped = fixProc(buffer, password);                                                                           // 14421\n                                                                                                                      // 14422\n  var type = stripped.tag;                                                                                            // 14423\n  var data = stripped.data;                                                                                           // 14424\n  var subtype,ndata;                                                                                                  // 14425\n  switch (type) {                                                                                                     // 14426\n    case 'PUBLIC KEY':                                                                                                // 14427\n      ndata = asn1.PublicKey.decode(data, 'der');                                                                     // 14428\n      subtype = ndata.algorithm.algorithm.join('.');                                                                  // 14429\n      switch(subtype) {                                                                                               // 14430\n        case '1.2.840.113549.1.1.1':                                                                                  // 14431\n          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');                                        // 14432\n        case '1.2.840.10045.2.1':                                                                                     // 14433\n        ndata.subjectPrivateKey = ndata.subjectPublicKey;                                                             // 14434\n          return {                                                                                                    // 14435\n            type: 'ec',                                                                                               // 14436\n            data:  ndata                                                                                              // 14437\n          };                                                                                                          // 14438\n        case '1.2.840.10040.4.1':                                                                                     // 14439\n          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');                  // 14440\n          return {                                                                                                    // 14441\n            type: 'dsa',                                                                                              // 14442\n            data: ndata.algorithm.params                                                                              // 14443\n          };                                                                                                          // 14444\n        default: throw new Error('unknown key id ' +  subtype);                                                       // 14445\n      }                                                                                                               // 14446\n      throw new Error('unknown key type ' +  type);                                                                   // 14447\n    case 'ENCRYPTED PRIVATE KEY':                                                                                     // 14448\n      data = asn1.EncryptedPrivateKey.decode(data, 'der');                                                            // 14449\n      data = decrypt(data, password);                                                                                 // 14450\n      //falling through                                                                                               // 14451\n    case 'PRIVATE KEY':                                                                                               // 14452\n      ndata = asn1.PrivateKey.decode(data, 'der');                                                                    // 14453\n      subtype = ndata.algorithm.algorithm.join('.');                                                                  // 14454\n      switch(subtype) {                                                                                               // 14455\n        case '1.2.840.113549.1.1.1':                                                                                  // 14456\n          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');                                           // 14457\n        case '1.2.840.10045.2.1':                                                                                     // 14458\n          return {                                                                                                    // 14459\n            curve: ndata.algorithm.curve,                                                                             // 14460\n            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey                           // 14461\n          };                                                                                                          // 14462\n        case '1.2.840.10040.4.1':                                                                                     // 14463\n          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');                     // 14464\n          return {                                                                                                    // 14465\n            type: 'dsa',                                                                                              // 14466\n            params: ndata.algorithm.params                                                                            // 14467\n          };                                                                                                          // 14468\n        default: throw new Error('unknown key id ' +  subtype);                                                       // 14469\n      }                                                                                                               // 14470\n      throw new Error('unknown key type ' +  type);                                                                   // 14471\n    case 'RSA PUBLIC KEY':                                                                                            // 14472\n      return asn1.RSAPublicKey.decode(data, 'der');                                                                   // 14473\n    case 'RSA PRIVATE KEY':                                                                                           // 14474\n      return asn1.RSAPrivateKey.decode(data, 'der');                                                                  // 14475\n    case 'DSA PRIVATE KEY':                                                                                           // 14476\n      return {                                                                                                        // 14477\n        type: 'dsa',                                                                                                  // 14478\n        params: asn1.DSAPrivateKey.decode(data, 'der')                                                                // 14479\n      };                                                                                                              // 14480\n    case 'EC PRIVATE KEY':                                                                                            // 14481\n      data = asn1.ECPrivateKey.decode(data, 'der');                                                                   // 14482\n      return {                                                                                                        // 14483\n        curve: data.parameters.value,                                                                                 // 14484\n        privateKey: data.privateKey                                                                                   // 14485\n      };                                                                                                              // 14486\n    default: throw new Error('unknown key type ' +  type);                                                            // 14487\n  }                                                                                                                   // 14488\n}                                                                                                                     // 14489\nparseKeys.signature = asn1.signature;                                                                                 // 14490\nfunction decrypt(data, password) {                                                                                    // 14491\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt;                                                               // 14492\n  var iters = data.algorithm.decrypt.kde.kdeparams.iters;                                                             // 14493\n  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];                                                     // 14494\n  var iv = data.algorithm.decrypt.cipher.iv;                                                                          // 14495\n  var cipherText = data.subjectPrivateKey;                                                                            // 14496\n  var keylen = parseInt(algo.split('-')[1], 10)/8;                                                                    // 14497\n  var key = compat.pbkdf2Sync(password, salt, iters, keylen);                                                         // 14498\n  var cipher = ciphers.createDecipheriv(algo, key, iv);                                                               // 14499\n  var out = [];                                                                                                       // 14500\n  out.push(cipher.update(cipherText));                                                                                // 14501\n  out.push(cipher.final());                                                                                           // 14502\n  return Buffer.concat(out);                                                                                          // 14503\n}                                                                                                                     // 14504\n}).call(this,require(\"buffer\").Buffer)                                                                                // 14505\n                                                                                                                      // 14506\n},{\"./aesid.json\":120,\"./asn1\":121,\"./fixProc\":122,\"browserify-aes\":10,\"buffer\":2,\"pbkdf2-compat\":137}],124:[function(require,module,exports){\narguments[4][55][0].apply(exports,arguments)                                                                          // 14508\n},{\"./asn1/api\":125,\"./asn1/base\":127,\"./asn1/constants\":131,\"./asn1/decoders\":133,\"./asn1/encoders\":135,\"bn.js\":117,\"dup\":55}],125:[function(require,module,exports){\narguments[4][56][0].apply(exports,arguments)                                                                          // 14510\n},{\"../asn1\":124,\"dup\":56,\"inherits\":144,\"vm\":160}],126:[function(require,module,exports){                            // 14511\narguments[4][57][0].apply(exports,arguments)                                                                          // 14512\n},{\"../base\":127,\"buffer\":2,\"dup\":57,\"inherits\":144}],127:[function(require,module,exports){                          // 14513\narguments[4][58][0].apply(exports,arguments)                                                                          // 14514\n},{\"./buffer\":126,\"./node\":128,\"./reporter\":129,\"dup\":58}],128:[function(require,module,exports){                     // 14515\narguments[4][59][0].apply(exports,arguments)                                                                          // 14516\n},{\"../base\":127,\"dup\":59,\"minimalistic-assert\":136}],129:[function(require,module,exports){                          // 14517\narguments[4][60][0].apply(exports,arguments)                                                                          // 14518\n},{\"dup\":60,\"inherits\":144}],130:[function(require,module,exports){                                                   // 14519\narguments[4][61][0].apply(exports,arguments)                                                                          // 14520\n},{\"../constants\":131,\"dup\":61}],131:[function(require,module,exports){                                               // 14521\narguments[4][62][0].apply(exports,arguments)                                                                          // 14522\n},{\"./der\":130,\"dup\":62}],132:[function(require,module,exports){                                                      // 14523\narguments[4][63][0].apply(exports,arguments)                                                                          // 14524\n},{\"../../asn1\":124,\"dup\":63,\"inherits\":144}],133:[function(require,module,exports){                                  // 14525\narguments[4][64][0].apply(exports,arguments)                                                                          // 14526\n},{\"./der\":132,\"dup\":64}],134:[function(require,module,exports){                                                      // 14527\narguments[4][65][0].apply(exports,arguments)                                                                          // 14528\n},{\"../../asn1\":124,\"buffer\":2,\"dup\":65,\"inherits\":144}],135:[function(require,module,exports){                       // 14529\narguments[4][66][0].apply(exports,arguments)                                                                          // 14530\n},{\"./der\":134,\"dup\":66}],136:[function(require,module,exports){                                                      // 14531\narguments[4][67][0].apply(exports,arguments)                                                                          // 14532\n},{\"dup\":67}],137:[function(require,module,exports){                                                                  // 14533\n(function (Buffer){                                                                                                   // 14534\nvar createHmac = require('create-hmac')                                                                               // 14535\n                                                                                                                      // 14536\nexports.pbkdf2 = pbkdf2                                                                                               // 14537\nfunction pbkdf2 (password, salt, iterations, keylen, digest, callback) {                                              // 14538\n  if (typeof digest === 'function') {                                                                                 // 14539\n    callback = digest                                                                                                 // 14540\n    digest = undefined                                                                                                // 14541\n  }                                                                                                                   // 14542\n                                                                                                                      // 14543\n  if (typeof callback !== 'function') {                                                                               // 14544\n    throw new Error('No callback provided to pbkdf2')                                                                 // 14545\n  }                                                                                                                   // 14546\n                                                                                                                      // 14547\n  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)                                                 // 14548\n  setTimeout(function () {                                                                                            // 14549\n    callback(undefined, result)                                                                                       // 14550\n  })                                                                                                                  // 14551\n}                                                                                                                     // 14552\n                                                                                                                      // 14553\nexports.pbkdf2Sync = pbkdf2Sync                                                                                       // 14554\nfunction pbkdf2Sync (password, salt, iterations, keylen, digest) {                                                    // 14555\n  if (typeof iterations !== 'number')                                                                                 // 14556\n    throw new TypeError('Iterations not a number')                                                                    // 14557\n                                                                                                                      // 14558\n  if (iterations < 0)                                                                                                 // 14559\n    throw new TypeError('Bad iterations')                                                                             // 14560\n                                                                                                                      // 14561\n  if (typeof keylen !== 'number')                                                                                     // 14562\n    throw new TypeError('Key length not a number')                                                                    // 14563\n                                                                                                                      // 14564\n  if (keylen < 0)                                                                                                     // 14565\n    throw new TypeError('Bad key length')                                                                             // 14566\n                                                                                                                      // 14567\n  digest = digest || 'sha1'                                                                                           // 14568\n                                                                                                                      // 14569\n  if (!Buffer.isBuffer(password)) password = new Buffer(password)                                                     // 14570\n  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)                                                                 // 14571\n                                                                                                                      // 14572\n  var hLen                                                                                                            // 14573\n  var l = 1                                                                                                           // 14574\n  var DK = new Buffer(keylen)                                                                                         // 14575\n  var block1 = new Buffer(salt.length + 4)                                                                            // 14576\n  salt.copy(block1, 0, 0, salt.length)                                                                                // 14577\n                                                                                                                      // 14578\n  var r                                                                                                               // 14579\n  var T                                                                                                               // 14580\n                                                                                                                      // 14581\n  for (var i = 1; i <= l; i++) {                                                                                      // 14582\n    block1.writeUInt32BE(i, salt.length)                                                                              // 14583\n    var U = createHmac(digest, password).update(block1).digest()                                                      // 14584\n                                                                                                                      // 14585\n    if (!hLen) {                                                                                                      // 14586\n      hLen = U.length                                                                                                 // 14587\n      T = new Buffer(hLen)                                                                                            // 14588\n      l = Math.ceil(keylen / hLen)                                                                                    // 14589\n      r = keylen - (l - 1) * hLen                                                                                     // 14590\n                                                                                                                      // 14591\n      if (keylen > (Math.pow(2, 32) - 1) * hLen)                                                                      // 14592\n        throw new TypeError('keylen exceeds maximum length')                                                          // 14593\n    }                                                                                                                 // 14594\n                                                                                                                      // 14595\n    U.copy(T, 0, 0, hLen)                                                                                             // 14596\n                                                                                                                      // 14597\n    for (var j = 1; j < iterations; j++) {                                                                            // 14598\n      U = createHmac(digest, password).update(U).digest()                                                             // 14599\n                                                                                                                      // 14600\n      for (var k = 0; k < hLen; k++) {                                                                                // 14601\n        T[k] ^= U[k]                                                                                                  // 14602\n      }                                                                                                               // 14603\n    }                                                                                                                 // 14604\n                                                                                                                      // 14605\n    var destPos = (i - 1) * hLen                                                                                      // 14606\n    var len = (i === l ? r : hLen)                                                                                    // 14607\n    T.copy(DK, destPos, 0, len)                                                                                       // 14608\n  }                                                                                                                   // 14609\n                                                                                                                      // 14610\n  return DK                                                                                                           // 14611\n}                                                                                                                     // 14612\n                                                                                                                      // 14613\n}).call(this,require(\"buffer\").Buffer)                                                                                // 14614\n                                                                                                                      // 14615\n},{\"buffer\":2,\"create-hmac\":106}],138:[function(require,module,exports){                                              // 14616\n(function (Buffer){                                                                                                   // 14617\nvar parseKeys = require('parse-asn1');                                                                                // 14618\nvar mgf = require('./mgf');                                                                                           // 14619\nvar xor = require('./xor');                                                                                           // 14620\nvar bn = require('bn.js');                                                                                            // 14621\nvar crt = require('browserify-rsa');                                                                                  // 14622\nvar createHash = require('create-hash');                                                                              // 14623\nvar withPublic = require('./withPublic');                                                                             // 14624\nmodule.exports = function privateDecrypt(private_key, enc, reverse) {                                                 // 14625\n  var padding;                                                                                                        // 14626\n  if (private_key.padding) {                                                                                          // 14627\n    padding = private_key.padding;                                                                                    // 14628\n  } else if (reverse) {                                                                                               // 14629\n    padding = 1;                                                                                                      // 14630\n  } else {                                                                                                            // 14631\n    padding = 4;                                                                                                      // 14632\n  }                                                                                                                   // 14633\n                                                                                                                      // 14634\n  var key = parseKeys(private_key);                                                                                   // 14635\n  var k = key.modulus.byteLength();                                                                                   // 14636\n  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {                                                          // 14637\n    throw new Error('decryption error');                                                                              // 14638\n  }                                                                                                                   // 14639\n  var msg;                                                                                                            // 14640\n  if (reverse) {                                                                                                      // 14641\n    msg = withPublic(new bn(enc), key);                                                                               // 14642\n  } else {                                                                                                            // 14643\n    msg = crt(enc, key);                                                                                              // 14644\n  }                                                                                                                   // 14645\n  var zBuffer = new Buffer(k - msg.length);                                                                           // 14646\n  zBuffer.fill(0);                                                                                                    // 14647\n  msg = Buffer.concat([zBuffer, msg], k);                                                                             // 14648\n  if (padding === 4) {                                                                                                // 14649\n    return oaep(key, msg);                                                                                            // 14650\n  } else if (padding === 1) {                                                                                         // 14651\n    return pkcs1(key, msg, reverse);                                                                                  // 14652\n  } else if (padding === 3) {                                                                                         // 14653\n    return msg;                                                                                                       // 14654\n  } else {                                                                                                            // 14655\n    throw new Error('unknown padding');                                                                               // 14656\n  }                                                                                                                   // 14657\n};                                                                                                                    // 14658\n                                                                                                                      // 14659\nfunction oaep(key, msg){                                                                                              // 14660\n  var n = key.modulus;                                                                                                // 14661\n  var k = key.modulus.byteLength();                                                                                   // 14662\n  var mLen = msg.length;                                                                                              // 14663\n  var iHash = createHash('sha1').update(new Buffer('')).digest();                                                     // 14664\n  var hLen = iHash.length;                                                                                            // 14665\n  var hLen2 = 2 * hLen;                                                                                               // 14666\n  if (msg[0] !== 0) {                                                                                                 // 14667\n    throw new Error('decryption error');                                                                              // 14668\n  }                                                                                                                   // 14669\n  var maskedSeed = msg.slice(1, hLen + 1);                                                                            // 14670\n  var maskedDb =  msg.slice(hLen + 1);                                                                                // 14671\n  var seed = xor(maskedSeed, mgf(maskedDb, hLen));                                                                    // 14672\n  var db = xor(maskedDb, mgf(seed, k - hLen - 1));                                                                    // 14673\n  if (compare(iHash, db.slice(0, hLen))) {                                                                            // 14674\n    throw new Error('decryption error');                                                                              // 14675\n  }                                                                                                                   // 14676\n  var i = hLen;                                                                                                       // 14677\n  while (db[i] === 0) {                                                                                               // 14678\n    i++;                                                                                                              // 14679\n  }                                                                                                                   // 14680\n  if (db[i++] !== 1) {                                                                                                // 14681\n    throw new Error('decryption error');                                                                              // 14682\n  }                                                                                                                   // 14683\n  return db.slice(i);                                                                                                 // 14684\n}                                                                                                                     // 14685\n                                                                                                                      // 14686\nfunction pkcs1(key, msg, reverse){                                                                                    // 14687\n  var p1 = msg.slice(0, 2);                                                                                           // 14688\n  var i = 2;                                                                                                          // 14689\n  var status = 0;                                                                                                     // 14690\n  while (msg[i++] !== 0) {                                                                                            // 14691\n    if (i >= msg.length) {                                                                                            // 14692\n      status++;                                                                                                       // 14693\n      break;                                                                                                          // 14694\n    }                                                                                                                 // 14695\n  }                                                                                                                   // 14696\n  var ps = msg.slice(2, i - 1);                                                                                       // 14697\n  var p2 = msg.slice(i - 1, i);                                                                                       // 14698\n                                                                                                                      // 14699\n  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){                     // 14700\n    status++;                                                                                                         // 14701\n  }                                                                                                                   // 14702\n  if (ps.length < 8) {                                                                                                // 14703\n    status++;                                                                                                         // 14704\n  }                                                                                                                   // 14705\n  if (status) {                                                                                                       // 14706\n    throw new Error('decryption error');                                                                              // 14707\n  }                                                                                                                   // 14708\n  return  msg.slice(i);                                                                                               // 14709\n}                                                                                                                     // 14710\nfunction compare(a, b){                                                                                               // 14711\n  a = new Buffer(a);                                                                                                  // 14712\n  b = new Buffer(b);                                                                                                  // 14713\n  var dif = 0;                                                                                                        // 14714\n  var len = a.length;                                                                                                 // 14715\n  if (a.length !== b.length) {                                                                                        // 14716\n    dif++;                                                                                                            // 14717\n    len = Math.min(a.length, b.length);                                                                               // 14718\n  }                                                                                                                   // 14719\n  var i = -1;                                                                                                         // 14720\n  while (++i < len) {                                                                                                 // 14721\n    dif += (a[i] ^ b[i]);                                                                                             // 14722\n  }                                                                                                                   // 14723\n  return dif;                                                                                                         // 14724\n}                                                                                                                     // 14725\n}).call(this,require(\"buffer\").Buffer)                                                                                // 14726\n                                                                                                                      // 14727\n},{\"./mgf\":116,\"./withPublic\":140,\"./xor\":141,\"bn.js\":117,\"browserify-rsa\":118,\"buffer\":2,\"create-hash\":94,\"parse-asn1\":123}],139:[function(require,module,exports){\n(function (Buffer){                                                                                                   // 14729\nvar parseKeys = require('parse-asn1');                                                                                // 14730\nvar randomBytes = require('randombytes');                                                                             // 14731\nvar createHash = require('create-hash');                                                                              // 14732\nvar mgf = require('./mgf');                                                                                           // 14733\nvar xor = require('./xor');                                                                                           // 14734\nvar bn = require('bn.js');                                                                                            // 14735\nvar withPublic = require('./withPublic');                                                                             // 14736\nvar crt = require('browserify-rsa');                                                                                  // 14737\n                                                                                                                      // 14738\nvar constants = {                                                                                                     // 14739\n  RSA_PKCS1_OAEP_PADDING: 4,                                                                                          // 14740\n  RSA_PKCS1_PADDIN: 1,                                                                                                // 14741\n  RSA_NO_PADDING: 3                                                                                                   // 14742\n};                                                                                                                    // 14743\n                                                                                                                      // 14744\nmodule.exports = function publicEncrypt(public_key, msg, reverse) {                                                   // 14745\n  var padding;                                                                                                        // 14746\n  if (public_key.padding) {                                                                                           // 14747\n    padding = public_key.padding;                                                                                     // 14748\n  } else if (reverse) {                                                                                               // 14749\n    padding = 1;                                                                                                      // 14750\n  } else {                                                                                                            // 14751\n    padding = 4;                                                                                                      // 14752\n  }                                                                                                                   // 14753\n  var key = parseKeys(public_key);                                                                                    // 14754\n  var paddedMsg;                                                                                                      // 14755\n  if (padding === 4) {                                                                                                // 14756\n    paddedMsg = oaep(key, msg);                                                                                       // 14757\n  } else if (padding === 1) {                                                                                         // 14758\n    paddedMsg = pkcs1(key, msg, reverse);                                                                             // 14759\n  } else if (padding === 3) {                                                                                         // 14760\n    paddedMsg = new bn(msg);                                                                                          // 14761\n    if (paddedMsg.cmp(key.modulus) >= 0) {                                                                            // 14762\n      throw new Error('data too long for modulus');                                                                   // 14763\n    }                                                                                                                 // 14764\n  } else {                                                                                                            // 14765\n    throw new Error('unknown padding');                                                                               // 14766\n  }                                                                                                                   // 14767\n  if (reverse) {                                                                                                      // 14768\n    return crt(paddedMsg, key);                                                                                       // 14769\n  } else {                                                                                                            // 14770\n    return withPublic(paddedMsg, key);                                                                                // 14771\n  }                                                                                                                   // 14772\n};                                                                                                                    // 14773\n                                                                                                                      // 14774\nfunction oaep(key, msg){                                                                                              // 14775\n  var k = key.modulus.byteLength();                                                                                   // 14776\n  var mLen = msg.length;                                                                                              // 14777\n  var iHash = createHash('sha1').update(new Buffer('')).digest();                                                     // 14778\n  var hLen = iHash.length;                                                                                            // 14779\n  var hLen2 = 2 * hLen;                                                                                               // 14780\n  if (mLen > k - hLen2 - 2) {                                                                                         // 14781\n    throw new Error('message too long');                                                                              // 14782\n  }                                                                                                                   // 14783\n  var ps = new Buffer(k - mLen - hLen2 - 2);                                                                          // 14784\n  ps.fill(0);                                                                                                         // 14785\n  var dblen = k - hLen - 1;                                                                                           // 14786\n  var seed = randomBytes(hLen);                                                                                       // 14787\n  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));                      // 14788\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen));                                                                    // 14789\n  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));                                           // 14790\n}                                                                                                                     // 14791\nfunction pkcs1(key, msg, reverse){                                                                                    // 14792\n  var mLen = msg.length;                                                                                              // 14793\n  var k = key.modulus.byteLength();                                                                                   // 14794\n  if (mLen > k - 11) {                                                                                                // 14795\n    throw new Error('message too long');                                                                              // 14796\n  }                                                                                                                   // 14797\n  var ps;                                                                                                             // 14798\n  if (reverse) {                                                                                                      // 14799\n    ps = new Buffer(k - mLen - 3);                                                                                    // 14800\n    ps.fill(0xff);                                                                                                    // 14801\n  } else {                                                                                                            // 14802\n    ps = nonZero(k - mLen - 3);                                                                                       // 14803\n  }                                                                                                                   // 14804\n  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));                          // 14805\n}                                                                                                                     // 14806\nfunction nonZero(len, crypto) {                                                                                       // 14807\n  var out = new Buffer(len);                                                                                          // 14808\n  var i = 0;                                                                                                          // 14809\n  var cache = randomBytes(len*2);                                                                                     // 14810\n  var cur = 0;                                                                                                        // 14811\n  var num;                                                                                                            // 14812\n  while (i < len) {                                                                                                   // 14813\n    if (cur === cache.length) {                                                                                       // 14814\n      cache = randomBytes(len*2);                                                                                     // 14815\n      cur = 0;                                                                                                        // 14816\n    }                                                                                                                 // 14817\n    num = cache[cur++];                                                                                               // 14818\n    if (num) {                                                                                                        // 14819\n      out[i++] = num;                                                                                                 // 14820\n    }                                                                                                                 // 14821\n  }                                                                                                                   // 14822\n  return out;                                                                                                         // 14823\n}                                                                                                                     // 14824\n}).call(this,require(\"buffer\").Buffer)                                                                                // 14825\n                                                                                                                      // 14826\n},{\"./mgf\":116,\"./withPublic\":140,\"./xor\":141,\"bn.js\":117,\"browserify-rsa\":118,\"buffer\":2,\"create-hash\":94,\"parse-asn1\":123,\"randombytes\":142}],140:[function(require,module,exports){\n(function (Buffer){                                                                                                   // 14828\nvar bn = require('bn.js');                                                                                            // 14829\nfunction withPublic(paddedMsg, key) {                                                                                 // 14830\n  return new Buffer(paddedMsg                                                                                         // 14831\n    .toRed(bn.mont(key.modulus))                                                                                      // 14832\n    .redPow(new bn(key.publicExponent))                                                                               // 14833\n    .fromRed()                                                                                                        // 14834\n    .toArray());                                                                                                      // 14835\n}                                                                                                                     // 14836\n                                                                                                                      // 14837\nmodule.exports = withPublic;                                                                                          // 14838\n}).call(this,require(\"buffer\").Buffer)                                                                                // 14839\n                                                                                                                      // 14840\n},{\"bn.js\":117,\"buffer\":2}],141:[function(require,module,exports){                                                    // 14841\nmodule.exports = function xor(a, b) {                                                                                 // 14842\n  var len = a.length;                                                                                                 // 14843\n  var i = -1;                                                                                                         // 14844\n  while (++i < len) {                                                                                                 // 14845\n    a[i] ^= b[i];                                                                                                     // 14846\n  }                                                                                                                   // 14847\n  return a                                                                                                            // 14848\n};                                                                                                                    // 14849\n},{}],142:[function(require,module,exports){                                                                          // 14850\n(function (process,global,Buffer){                                                                                    // 14851\n'use strict';                                                                                                         // 14852\n                                                                                                                      // 14853\nvar crypto = global.crypto || global.msCrypto                                                                         // 14854\nif(crypto && crypto.getRandomValues) {                                                                                // 14855\n  module.exports = randomBytes;                                                                                       // 14856\n} else {                                                                                                              // 14857\n  module.exports = oldBrowser;                                                                                        // 14858\n}                                                                                                                     // 14859\nfunction randomBytes(size, cb) {                                                                                      // 14860\n  var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array                                       // 14861\n    /* This will not work in older browsers.                                                                          // 14862\n     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues                             // 14863\n     */                                                                                                               // 14864\n                                                                                                                      // 14865\n  crypto.getRandomValues(bytes);                                                                                      // 14866\n  if (typeof cb === 'function') {                                                                                     // 14867\n    return process.nextTick(function () {                                                                             // 14868\n      cb(null, bytes);                                                                                                // 14869\n    });                                                                                                               // 14870\n  }                                                                                                                   // 14871\n  return bytes;                                                                                                       // 14872\n}                                                                                                                     // 14873\nfunction oldBrowser() {                                                                                               // 14874\n  throw new Error(                                                                                                    // 14875\n      'secure random number generation not supported by this browser\\n'+                                              // 14876\n      'use chrome, FireFox or Internet Explorer 11'                                                                   // 14877\n    )                                                                                                                 // 14878\n}                                                                                                                     // 14879\n                                                                                                                      // 14880\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"buffer\").Buffer)\n                                                                                                                      // 14882\n},{\"_process\":146,\"buffer\":2}],143:[function(require,module,exports){                                                 // 14883\n// Copyright Joyent, Inc. and other Node contributors.                                                                // 14884\n//                                                                                                                    // 14885\n// Permission is hereby granted, free of charge, to any person obtaining a                                            // 14886\n// copy of this software and associated documentation files (the                                                      // 14887\n// \"Software\"), to deal in the Software without restriction, including                                                // 14888\n// without limitation the rights to use, copy, modify, merge, publish,                                                // 14889\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 14890\n// persons to whom the Software is furnished to do so, subject to the                                                 // 14891\n// following conditions:                                                                                              // 14892\n//                                                                                                                    // 14893\n// The above copyright notice and this permission notice shall be included                                            // 14894\n// in all copies or substantial portions of the Software.                                                             // 14895\n//                                                                                                                    // 14896\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 14897\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 14898\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 14899\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 14900\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 14901\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 14902\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 14903\n                                                                                                                      // 14904\nfunction EventEmitter() {                                                                                             // 14905\n  this._events = this._events || {};                                                                                  // 14906\n  this._maxListeners = this._maxListeners || undefined;                                                               // 14907\n}                                                                                                                     // 14908\nmodule.exports = EventEmitter;                                                                                        // 14909\n                                                                                                                      // 14910\n// Backwards-compat with node 0.10.x                                                                                  // 14911\nEventEmitter.EventEmitter = EventEmitter;                                                                             // 14912\n                                                                                                                      // 14913\nEventEmitter.prototype._events = undefined;                                                                           // 14914\nEventEmitter.prototype._maxListeners = undefined;                                                                     // 14915\n                                                                                                                      // 14916\n// By default EventEmitters will print a warning if more than 10 listeners are                                        // 14917\n// added to it. This is a useful default which helps finding memory leaks.                                            // 14918\nEventEmitter.defaultMaxListeners = 10;                                                                                // 14919\n                                                                                                                      // 14920\n// Obviously not all Emitters should be limited to 10. This function allows                                           // 14921\n// that to be increased. Set to zero for unlimited.                                                                   // 14922\nEventEmitter.prototype.setMaxListeners = function(n) {                                                                // 14923\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                              // 14924\n    throw TypeError('n must be a positive number');                                                                   // 14925\n  this._maxListeners = n;                                                                                             // 14926\n  return this;                                                                                                        // 14927\n};                                                                                                                    // 14928\n                                                                                                                      // 14929\nEventEmitter.prototype.emit = function(type) {                                                                        // 14930\n  var er, handler, len, args, i, listeners;                                                                           // 14931\n                                                                                                                      // 14932\n  if (!this._events)                                                                                                  // 14933\n    this._events = {};                                                                                                // 14934\n                                                                                                                      // 14935\n  // If there is no 'error' event listener then throw.                                                                // 14936\n  if (type === 'error') {                                                                                             // 14937\n    if (!this._events.error ||                                                                                        // 14938\n        (isObject(this._events.error) && !this._events.error.length)) {                                               // 14939\n      er = arguments[1];                                                                                              // 14940\n      if (er instanceof Error) {                                                                                      // 14941\n        throw er; // Unhandled 'error' event                                                                          // 14942\n      }                                                                                                               // 14943\n      throw TypeError('Uncaught, unspecified \"error\" event.');                                                        // 14944\n    }                                                                                                                 // 14945\n  }                                                                                                                   // 14946\n                                                                                                                      // 14947\n  handler = this._events[type];                                                                                       // 14948\n                                                                                                                      // 14949\n  if (isUndefined(handler))                                                                                           // 14950\n    return false;                                                                                                     // 14951\n                                                                                                                      // 14952\n  if (isFunction(handler)) {                                                                                          // 14953\n    switch (arguments.length) {                                                                                       // 14954\n      // fast cases                                                                                                   // 14955\n      case 1:                                                                                                         // 14956\n        handler.call(this);                                                                                           // 14957\n        break;                                                                                                        // 14958\n      case 2:                                                                                                         // 14959\n        handler.call(this, arguments[1]);                                                                             // 14960\n        break;                                                                                                        // 14961\n      case 3:                                                                                                         // 14962\n        handler.call(this, arguments[1], arguments[2]);                                                               // 14963\n        break;                                                                                                        // 14964\n      // slower                                                                                                       // 14965\n      default:                                                                                                        // 14966\n        len = arguments.length;                                                                                       // 14967\n        args = new Array(len - 1);                                                                                    // 14968\n        for (i = 1; i < len; i++)                                                                                     // 14969\n          args[i - 1] = arguments[i];                                                                                 // 14970\n        handler.apply(this, args);                                                                                    // 14971\n    }                                                                                                                 // 14972\n  } else if (isObject(handler)) {                                                                                     // 14973\n    len = arguments.length;                                                                                           // 14974\n    args = new Array(len - 1);                                                                                        // 14975\n    for (i = 1; i < len; i++)                                                                                         // 14976\n      args[i - 1] = arguments[i];                                                                                     // 14977\n                                                                                                                      // 14978\n    listeners = handler.slice();                                                                                      // 14979\n    len = listeners.length;                                                                                           // 14980\n    for (i = 0; i < len; i++)                                                                                         // 14981\n      listeners[i].apply(this, args);                                                                                 // 14982\n  }                                                                                                                   // 14983\n                                                                                                                      // 14984\n  return true;                                                                                                        // 14985\n};                                                                                                                    // 14986\n                                                                                                                      // 14987\nEventEmitter.prototype.addListener = function(type, listener) {                                                       // 14988\n  var m;                                                                                                              // 14989\n                                                                                                                      // 14990\n  if (!isFunction(listener))                                                                                          // 14991\n    throw TypeError('listener must be a function');                                                                   // 14992\n                                                                                                                      // 14993\n  if (!this._events)                                                                                                  // 14994\n    this._events = {};                                                                                                // 14995\n                                                                                                                      // 14996\n  // To avoid recursion in the case that type === \"newListener\"! Before                                               // 14997\n  // adding it to the listeners, first emit \"newListener\".                                                            // 14998\n  if (this._events.newListener)                                                                                       // 14999\n    this.emit('newListener', type,                                                                                    // 15000\n              isFunction(listener.listener) ?                                                                         // 15001\n              listener.listener : listener);                                                                          // 15002\n                                                                                                                      // 15003\n  if (!this._events[type])                                                                                            // 15004\n    // Optimize the case of one listener. Don't need the extra array object.                                          // 15005\n    this._events[type] = listener;                                                                                    // 15006\n  else if (isObject(this._events[type]))                                                                              // 15007\n    // If we've already got an array, just append.                                                                    // 15008\n    this._events[type].push(listener);                                                                                // 15009\n  else                                                                                                                // 15010\n    // Adding the second element, need to change to array.                                                            // 15011\n    this._events[type] = [this._events[type], listener];                                                              // 15012\n                                                                                                                      // 15013\n  // Check for listener leak                                                                                          // 15014\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                                   // 15015\n    var m;                                                                                                            // 15016\n    if (!isUndefined(this._maxListeners)) {                                                                           // 15017\n      m = this._maxListeners;                                                                                         // 15018\n    } else {                                                                                                          // 15019\n      m = EventEmitter.defaultMaxListeners;                                                                           // 15020\n    }                                                                                                                 // 15021\n                                                                                                                      // 15022\n    if (m && m > 0 && this._events[type].length > m) {                                                                // 15023\n      this._events[type].warned = true;                                                                               // 15024\n      console.error('(node) warning: possible EventEmitter memory ' +                                                 // 15025\n                    'leak detected. %d listeners added. ' +                                                           // 15026\n                    'Use emitter.setMaxListeners() to increase limit.',                                               // 15027\n                    this._events[type].length);                                                                       // 15028\n      if (typeof console.trace === 'function') {                                                                      // 15029\n        // not supported in IE 10                                                                                     // 15030\n        console.trace();                                                                                              // 15031\n      }                                                                                                               // 15032\n    }                                                                                                                 // 15033\n  }                                                                                                                   // 15034\n                                                                                                                      // 15035\n  return this;                                                                                                        // 15036\n};                                                                                                                    // 15037\n                                                                                                                      // 15038\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                       // 15039\n                                                                                                                      // 15040\nEventEmitter.prototype.once = function(type, listener) {                                                              // 15041\n  if (!isFunction(listener))                                                                                          // 15042\n    throw TypeError('listener must be a function');                                                                   // 15043\n                                                                                                                      // 15044\n  var fired = false;                                                                                                  // 15045\n                                                                                                                      // 15046\n  function g() {                                                                                                      // 15047\n    this.removeListener(type, g);                                                                                     // 15048\n                                                                                                                      // 15049\n    if (!fired) {                                                                                                     // 15050\n      fired = true;                                                                                                   // 15051\n      listener.apply(this, arguments);                                                                                // 15052\n    }                                                                                                                 // 15053\n  }                                                                                                                   // 15054\n                                                                                                                      // 15055\n  g.listener = listener;                                                                                              // 15056\n  this.on(type, g);                                                                                                   // 15057\n                                                                                                                      // 15058\n  return this;                                                                                                        // 15059\n};                                                                                                                    // 15060\n                                                                                                                      // 15061\n// emits a 'removeListener' event iff the listener was removed                                                        // 15062\nEventEmitter.prototype.removeListener = function(type, listener) {                                                    // 15063\n  var list, position, length, i;                                                                                      // 15064\n                                                                                                                      // 15065\n  if (!isFunction(listener))                                                                                          // 15066\n    throw TypeError('listener must be a function');                                                                   // 15067\n                                                                                                                      // 15068\n  if (!this._events || !this._events[type])                                                                           // 15069\n    return this;                                                                                                      // 15070\n                                                                                                                      // 15071\n  list = this._events[type];                                                                                          // 15072\n  length = list.length;                                                                                               // 15073\n  position = -1;                                                                                                      // 15074\n                                                                                                                      // 15075\n  if (list === listener ||                                                                                            // 15076\n      (isFunction(list.listener) && list.listener === listener)) {                                                    // 15077\n    delete this._events[type];                                                                                        // 15078\n    if (this._events.removeListener)                                                                                  // 15079\n      this.emit('removeListener', type, listener);                                                                    // 15080\n                                                                                                                      // 15081\n  } else if (isObject(list)) {                                                                                        // 15082\n    for (i = length; i-- > 0;) {                                                                                      // 15083\n      if (list[i] === listener ||                                                                                     // 15084\n          (list[i].listener && list[i].listener === listener)) {                                                      // 15085\n        position = i;                                                                                                 // 15086\n        break;                                                                                                        // 15087\n      }                                                                                                               // 15088\n    }                                                                                                                 // 15089\n                                                                                                                      // 15090\n    if (position < 0)                                                                                                 // 15091\n      return this;                                                                                                    // 15092\n                                                                                                                      // 15093\n    if (list.length === 1) {                                                                                          // 15094\n      list.length = 0;                                                                                                // 15095\n      delete this._events[type];                                                                                      // 15096\n    } else {                                                                                                          // 15097\n      list.splice(position, 1);                                                                                       // 15098\n    }                                                                                                                 // 15099\n                                                                                                                      // 15100\n    if (this._events.removeListener)                                                                                  // 15101\n      this.emit('removeListener', type, listener);                                                                    // 15102\n  }                                                                                                                   // 15103\n                                                                                                                      // 15104\n  return this;                                                                                                        // 15105\n};                                                                                                                    // 15106\n                                                                                                                      // 15107\nEventEmitter.prototype.removeAllListeners = function(type) {                                                          // 15108\n  var key, listeners;                                                                                                 // 15109\n                                                                                                                      // 15110\n  if (!this._events)                                                                                                  // 15111\n    return this;                                                                                                      // 15112\n                                                                                                                      // 15113\n  // not listening for removeListener, no need to emit                                                                // 15114\n  if (!this._events.removeListener) {                                                                                 // 15115\n    if (arguments.length === 0)                                                                                       // 15116\n      this._events = {};                                                                                              // 15117\n    else if (this._events[type])                                                                                      // 15118\n      delete this._events[type];                                                                                      // 15119\n    return this;                                                                                                      // 15120\n  }                                                                                                                   // 15121\n                                                                                                                      // 15122\n  // emit removeListener for all listeners on all events                                                              // 15123\n  if (arguments.length === 0) {                                                                                       // 15124\n    for (key in this._events) {                                                                                       // 15125\n      if (key === 'removeListener') continue;                                                                         // 15126\n      this.removeAllListeners(key);                                                                                   // 15127\n    }                                                                                                                 // 15128\n    this.removeAllListeners('removeListener');                                                                        // 15129\n    this._events = {};                                                                                                // 15130\n    return this;                                                                                                      // 15131\n  }                                                                                                                   // 15132\n                                                                                                                      // 15133\n  listeners = this._events[type];                                                                                     // 15134\n                                                                                                                      // 15135\n  if (isFunction(listeners)) {                                                                                        // 15136\n    this.removeListener(type, listeners);                                                                             // 15137\n  } else {                                                                                                            // 15138\n    // LIFO order                                                                                                     // 15139\n    while (listeners.length)                                                                                          // 15140\n      this.removeListener(type, listeners[listeners.length - 1]);                                                     // 15141\n  }                                                                                                                   // 15142\n  delete this._events[type];                                                                                          // 15143\n                                                                                                                      // 15144\n  return this;                                                                                                        // 15145\n};                                                                                                                    // 15146\n                                                                                                                      // 15147\nEventEmitter.prototype.listeners = function(type) {                                                                   // 15148\n  var ret;                                                                                                            // 15149\n  if (!this._events || !this._events[type])                                                                           // 15150\n    ret = [];                                                                                                         // 15151\n  else if (isFunction(this._events[type]))                                                                            // 15152\n    ret = [this._events[type]];                                                                                       // 15153\n  else                                                                                                                // 15154\n    ret = this._events[type].slice();                                                                                 // 15155\n  return ret;                                                                                                         // 15156\n};                                                                                                                    // 15157\n                                                                                                                      // 15158\nEventEmitter.listenerCount = function(emitter, type) {                                                                // 15159\n  var ret;                                                                                                            // 15160\n  if (!emitter._events || !emitter._events[type])                                                                     // 15161\n    ret = 0;                                                                                                          // 15162\n  else if (isFunction(emitter._events[type]))                                                                         // 15163\n    ret = 1;                                                                                                          // 15164\n  else                                                                                                                // 15165\n    ret = emitter._events[type].length;                                                                               // 15166\n  return ret;                                                                                                         // 15167\n};                                                                                                                    // 15168\n                                                                                                                      // 15169\nfunction isFunction(arg) {                                                                                            // 15170\n  return typeof arg === 'function';                                                                                   // 15171\n}                                                                                                                     // 15172\n                                                                                                                      // 15173\nfunction isNumber(arg) {                                                                                              // 15174\n  return typeof arg === 'number';                                                                                     // 15175\n}                                                                                                                     // 15176\n                                                                                                                      // 15177\nfunction isObject(arg) {                                                                                              // 15178\n  return typeof arg === 'object' && arg !== null;                                                                     // 15179\n}                                                                                                                     // 15180\n                                                                                                                      // 15181\nfunction isUndefined(arg) {                                                                                           // 15182\n  return arg === void 0;                                                                                              // 15183\n}                                                                                                                     // 15184\n                                                                                                                      // 15185\n},{}],144:[function(require,module,exports){                                                                          // 15186\nif (typeof Object.create === 'function') {                                                                            // 15187\n  // implementation from standard node.js 'util' module                                                               // 15188\n  module.exports = function inherits(ctor, superCtor) {                                                               // 15189\n    ctor.super_ = superCtor                                                                                           // 15190\n    ctor.prototype = Object.create(superCtor.prototype, {                                                             // 15191\n      constructor: {                                                                                                  // 15192\n        value: ctor,                                                                                                  // 15193\n        enumerable: false,                                                                                            // 15194\n        writable: true,                                                                                               // 15195\n        configurable: true                                                                                            // 15196\n      }                                                                                                               // 15197\n    });                                                                                                               // 15198\n  };                                                                                                                  // 15199\n} else {                                                                                                              // 15200\n  // old school shim for old browsers                                                                                 // 15201\n  module.exports = function inherits(ctor, superCtor) {                                                               // 15202\n    ctor.super_ = superCtor                                                                                           // 15203\n    var TempCtor = function () {}                                                                                     // 15204\n    TempCtor.prototype = superCtor.prototype                                                                          // 15205\n    ctor.prototype = new TempCtor()                                                                                   // 15206\n    ctor.prototype.constructor = ctor                                                                                 // 15207\n  }                                                                                                                   // 15208\n}                                                                                                                     // 15209\n                                                                                                                      // 15210\n},{}],145:[function(require,module,exports){                                                                          // 15211\nmodule.exports = Array.isArray || function (arr) {                                                                    // 15212\n  return Object.prototype.toString.call(arr) == '[object Array]';                                                     // 15213\n};                                                                                                                    // 15214\n                                                                                                                      // 15215\n},{}],146:[function(require,module,exports){                                                                          // 15216\n// shim for using process in browser                                                                                  // 15217\n                                                                                                                      // 15218\nvar process = module.exports = {};                                                                                    // 15219\nvar queue = [];                                                                                                       // 15220\nvar draining = false;                                                                                                 // 15221\n                                                                                                                      // 15222\nfunction drainQueue() {                                                                                               // 15223\n    if (draining) {                                                                                                   // 15224\n        return;                                                                                                       // 15225\n    }                                                                                                                 // 15226\n    draining = true;                                                                                                  // 15227\n    var currentQueue;                                                                                                 // 15228\n    var len = queue.length;                                                                                           // 15229\n    while(len) {                                                                                                      // 15230\n        currentQueue = queue;                                                                                         // 15231\n        queue = [];                                                                                                   // 15232\n        var i = -1;                                                                                                   // 15233\n        while (++i < len) {                                                                                           // 15234\n            currentQueue[i]();                                                                                        // 15235\n        }                                                                                                             // 15236\n        len = queue.length;                                                                                           // 15237\n    }                                                                                                                 // 15238\n    draining = false;                                                                                                 // 15239\n}                                                                                                                     // 15240\nprocess.nextTick = function (fun) {                                                                                   // 15241\n    queue.push(fun);                                                                                                  // 15242\n    if (!draining) {                                                                                                  // 15243\n        setTimeout(drainQueue, 0);                                                                                    // 15244\n    }                                                                                                                 // 15245\n};                                                                                                                    // 15246\n                                                                                                                      // 15247\nprocess.title = 'browser';                                                                                            // 15248\nprocess.browser = true;                                                                                               // 15249\nprocess.env = {};                                                                                                     // 15250\nprocess.argv = [];                                                                                                    // 15251\nprocess.version = ''; // empty string to avoid regexp issues                                                          // 15252\nprocess.versions = {};                                                                                                // 15253\n                                                                                                                      // 15254\nfunction noop() {}                                                                                                    // 15255\n                                                                                                                      // 15256\nprocess.on = noop;                                                                                                    // 15257\nprocess.addListener = noop;                                                                                           // 15258\nprocess.once = noop;                                                                                                  // 15259\nprocess.off = noop;                                                                                                   // 15260\nprocess.removeListener = noop;                                                                                        // 15261\nprocess.removeAllListeners = noop;                                                                                    // 15262\nprocess.emit = noop;                                                                                                  // 15263\n                                                                                                                      // 15264\nprocess.binding = function (name) {                                                                                   // 15265\n    throw new Error('process.binding is not supported');                                                              // 15266\n};                                                                                                                    // 15267\n                                                                                                                      // 15268\n// TODO(shtylman)                                                                                                     // 15269\nprocess.cwd = function () { return '/' };                                                                             // 15270\nprocess.chdir = function (dir) {                                                                                      // 15271\n    throw new Error('process.chdir is not supported');                                                                // 15272\n};                                                                                                                    // 15273\nprocess.umask = function() { return 0; };                                                                             // 15274\n                                                                                                                      // 15275\n},{}],147:[function(require,module,exports){                                                                          // 15276\nmodule.exports = require(\"./lib/_stream_duplex.js\")                                                                   // 15277\n                                                                                                                      // 15278\n},{\"./lib/_stream_duplex.js\":148}],148:[function(require,module,exports){                                             // 15279\n(function (process){                                                                                                  // 15280\n// Copyright Joyent, Inc. and other Node contributors.                                                                // 15281\n//                                                                                                                    // 15282\n// Permission is hereby granted, free of charge, to any person obtaining a                                            // 15283\n// copy of this software and associated documentation files (the                                                      // 15284\n// \"Software\"), to deal in the Software without restriction, including                                                // 15285\n// without limitation the rights to use, copy, modify, merge, publish,                                                // 15286\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 15287\n// persons to whom the Software is furnished to do so, subject to the                                                 // 15288\n// following conditions:                                                                                              // 15289\n//                                                                                                                    // 15290\n// The above copyright notice and this permission notice shall be included                                            // 15291\n// in all copies or substantial portions of the Software.                                                             // 15292\n//                                                                                                                    // 15293\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 15294\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 15295\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 15296\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 15297\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 15298\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 15299\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 15300\n                                                                                                                      // 15301\n// a duplex stream is just a stream that is both readable and writable.                                               // 15302\n// Since JS doesn't have multiple prototypal inheritance, this class                                                  // 15303\n// prototypally inherits from Readable, and then parasitically from                                                   // 15304\n// Writable.                                                                                                          // 15305\n                                                                                                                      // 15306\nmodule.exports = Duplex;                                                                                              // 15307\n                                                                                                                      // 15308\n/*<replacement>*/                                                                                                     // 15309\nvar objectKeys = Object.keys || function (obj) {                                                                      // 15310\n  var keys = [];                                                                                                      // 15311\n  for (var key in obj) keys.push(key);                                                                                // 15312\n  return keys;                                                                                                        // 15313\n}                                                                                                                     // 15314\n/*</replacement>*/                                                                                                    // 15315\n                                                                                                                      // 15316\n                                                                                                                      // 15317\n/*<replacement>*/                                                                                                     // 15318\nvar util = require('core-util-is');                                                                                   // 15319\nutil.inherits = require('inherits');                                                                                  // 15320\n/*</replacement>*/                                                                                                    // 15321\n                                                                                                                      // 15322\nvar Readable = require('./_stream_readable');                                                                         // 15323\nvar Writable = require('./_stream_writable');                                                                         // 15324\n                                                                                                                      // 15325\nutil.inherits(Duplex, Readable);                                                                                      // 15326\n                                                                                                                      // 15327\nforEach(objectKeys(Writable.prototype), function(method) {                                                            // 15328\n  if (!Duplex.prototype[method])                                                                                      // 15329\n    Duplex.prototype[method] = Writable.prototype[method];                                                            // 15330\n});                                                                                                                   // 15331\n                                                                                                                      // 15332\nfunction Duplex(options) {                                                                                            // 15333\n  if (!(this instanceof Duplex))                                                                                      // 15334\n    return new Duplex(options);                                                                                       // 15335\n                                                                                                                      // 15336\n  Readable.call(this, options);                                                                                       // 15337\n  Writable.call(this, options);                                                                                       // 15338\n                                                                                                                      // 15339\n  if (options && options.readable === false)                                                                          // 15340\n    this.readable = false;                                                                                            // 15341\n                                                                                                                      // 15342\n  if (options && options.writable === false)                                                                          // 15343\n    this.writable = false;                                                                                            // 15344\n                                                                                                                      // 15345\n  this.allowHalfOpen = true;                                                                                          // 15346\n  if (options && options.allowHalfOpen === false)                                                                     // 15347\n    this.allowHalfOpen = false;                                                                                       // 15348\n                                                                                                                      // 15349\n  this.once('end', onend);                                                                                            // 15350\n}                                                                                                                     // 15351\n                                                                                                                      // 15352\n// the no-half-open enforcer                                                                                          // 15353\nfunction onend() {                                                                                                    // 15354\n  // if we allow half-open state, or if the writable side ended,                                                      // 15355\n  // then we're ok.                                                                                                   // 15356\n  if (this.allowHalfOpen || this._writableState.ended)                                                                // 15357\n    return;                                                                                                           // 15358\n                                                                                                                      // 15359\n  // no more data can be written.                                                                                     // 15360\n  // But allow more writes to happen in this tick.                                                                    // 15361\n  process.nextTick(this.end.bind(this));                                                                              // 15362\n}                                                                                                                     // 15363\n                                                                                                                      // 15364\nfunction forEach (xs, f) {                                                                                            // 15365\n  for (var i = 0, l = xs.length; i < l; i++) {                                                                        // 15366\n    f(xs[i], i);                                                                                                      // 15367\n  }                                                                                                                   // 15368\n}                                                                                                                     // 15369\n                                                                                                                      // 15370\n}).call(this,require('_process'))                                                                                     // 15371\n                                                                                                                      // 15372\n},{\"./_stream_readable\":150,\"./_stream_writable\":152,\"_process\":146,\"core-util-is\":153,\"inherits\":144}],149:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.                                                                // 15374\n//                                                                                                                    // 15375\n// Permission is hereby granted, free of charge, to any person obtaining a                                            // 15376\n// copy of this software and associated documentation files (the                                                      // 15377\n// \"Software\"), to deal in the Software without restriction, including                                                // 15378\n// without limitation the rights to use, copy, modify, merge, publish,                                                // 15379\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 15380\n// persons to whom the Software is furnished to do so, subject to the                                                 // 15381\n// following conditions:                                                                                              // 15382\n//                                                                                                                    // 15383\n// The above copyright notice and this permission notice shall be included                                            // 15384\n// in all copies or substantial portions of the Software.                                                             // 15385\n//                                                                                                                    // 15386\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 15387\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 15388\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 15389\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 15390\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 15391\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 15392\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 15393\n                                                                                                                      // 15394\n// a passthrough stream.                                                                                              // 15395\n// basically just the most minimal sort of Transform stream.                                                          // 15396\n// Every written chunk gets output as-is.                                                                             // 15397\n                                                                                                                      // 15398\nmodule.exports = PassThrough;                                                                                         // 15399\n                                                                                                                      // 15400\nvar Transform = require('./_stream_transform');                                                                       // 15401\n                                                                                                                      // 15402\n/*<replacement>*/                                                                                                     // 15403\nvar util = require('core-util-is');                                                                                   // 15404\nutil.inherits = require('inherits');                                                                                  // 15405\n/*</replacement>*/                                                                                                    // 15406\n                                                                                                                      // 15407\nutil.inherits(PassThrough, Transform);                                                                                // 15408\n                                                                                                                      // 15409\nfunction PassThrough(options) {                                                                                       // 15410\n  if (!(this instanceof PassThrough))                                                                                 // 15411\n    return new PassThrough(options);                                                                                  // 15412\n                                                                                                                      // 15413\n  Transform.call(this, options);                                                                                      // 15414\n}                                                                                                                     // 15415\n                                                                                                                      // 15416\nPassThrough.prototype._transform = function(chunk, encoding, cb) {                                                    // 15417\n  cb(null, chunk);                                                                                                    // 15418\n};                                                                                                                    // 15419\n                                                                                                                      // 15420\n},{\"./_stream_transform\":151,\"core-util-is\":153,\"inherits\":144}],150:[function(require,module,exports){               // 15421\n(function (process){                                                                                                  // 15422\n// Copyright Joyent, Inc. and other Node contributors.                                                                // 15423\n//                                                                                                                    // 15424\n// Permission is hereby granted, free of charge, to any person obtaining a                                            // 15425\n// copy of this software and associated documentation files (the                                                      // 15426\n// \"Software\"), to deal in the Software without restriction, including                                                // 15427\n// without limitation the rights to use, copy, modify, merge, publish,                                                // 15428\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 15429\n// persons to whom the Software is furnished to do so, subject to the                                                 // 15430\n// following conditions:                                                                                              // 15431\n//                                                                                                                    // 15432\n// The above copyright notice and this permission notice shall be included                                            // 15433\n// in all copies or substantial portions of the Software.                                                             // 15434\n//                                                                                                                    // 15435\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 15436\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 15437\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 15438\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 15439\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 15440\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 15441\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 15442\n                                                                                                                      // 15443\nmodule.exports = Readable;                                                                                            // 15444\n                                                                                                                      // 15445\n/*<replacement>*/                                                                                                     // 15446\nvar isArray = require('isarray');                                                                                     // 15447\n/*</replacement>*/                                                                                                    // 15448\n                                                                                                                      // 15449\n                                                                                                                      // 15450\n/*<replacement>*/                                                                                                     // 15451\nvar Buffer = require('buffer').Buffer;                                                                                // 15452\n/*</replacement>*/                                                                                                    // 15453\n                                                                                                                      // 15454\nReadable.ReadableState = ReadableState;                                                                               // 15455\n                                                                                                                      // 15456\nvar EE = require('events').EventEmitter;                                                                              // 15457\n                                                                                                                      // 15458\n/*<replacement>*/                                                                                                     // 15459\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {                                                   // 15460\n  return emitter.listeners(type).length;                                                                              // 15461\n};                                                                                                                    // 15462\n/*</replacement>*/                                                                                                    // 15463\n                                                                                                                      // 15464\nvar Stream = require('stream');                                                                                       // 15465\n                                                                                                                      // 15466\n/*<replacement>*/                                                                                                     // 15467\nvar util = require('core-util-is');                                                                                   // 15468\nutil.inherits = require('inherits');                                                                                  // 15469\n/*</replacement>*/                                                                                                    // 15470\n                                                                                                                      // 15471\nvar StringDecoder;                                                                                                    // 15472\n                                                                                                                      // 15473\n                                                                                                                      // 15474\n/*<replacement>*/                                                                                                     // 15475\nvar debug = require('util');                                                                                          // 15476\nif (debug && debug.debuglog) {                                                                                        // 15477\n  debug = debug.debuglog('stream');                                                                                   // 15478\n} else {                                                                                                              // 15479\n  debug = function () {};                                                                                             // 15480\n}                                                                                                                     // 15481\n/*</replacement>*/                                                                                                    // 15482\n                                                                                                                      // 15483\n                                                                                                                      // 15484\nutil.inherits(Readable, Stream);                                                                                      // 15485\n                                                                                                                      // 15486\nfunction ReadableState(options, stream) {                                                                             // 15487\n  var Duplex = require('./_stream_duplex');                                                                           // 15488\n                                                                                                                      // 15489\n  options = options || {};                                                                                            // 15490\n                                                                                                                      // 15491\n  // the point at which it stops calling _read() to fill the buffer                                                   // 15492\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"                                             // 15493\n  var hwm = options.highWaterMark;                                                                                    // 15494\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;                                                               // 15495\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;                                                         // 15496\n                                                                                                                      // 15497\n  // cast to ints.                                                                                                    // 15498\n  this.highWaterMark = ~~this.highWaterMark;                                                                          // 15499\n                                                                                                                      // 15500\n  this.buffer = [];                                                                                                   // 15501\n  this.length = 0;                                                                                                    // 15502\n  this.pipes = null;                                                                                                  // 15503\n  this.pipesCount = 0;                                                                                                // 15504\n  this.flowing = null;                                                                                                // 15505\n  this.ended = false;                                                                                                 // 15506\n  this.endEmitted = false;                                                                                            // 15507\n  this.reading = false;                                                                                               // 15508\n                                                                                                                      // 15509\n  // a flag to be able to tell if the onwrite cb is called immediately,                                               // 15510\n  // or on a later tick.  We set this to true at first, because any                                                   // 15511\n  // actions that shouldn't happen until \"later\" should generally also                                                // 15512\n  // not happen before the first write call.                                                                          // 15513\n  this.sync = true;                                                                                                   // 15514\n                                                                                                                      // 15515\n  // whenever we return null, then we set a flag to say                                                               // 15516\n  // that we're awaiting a 'readable' event emission.                                                                 // 15517\n  this.needReadable = false;                                                                                          // 15518\n  this.emittedReadable = false;                                                                                       // 15519\n  this.readableListening = false;                                                                                     // 15520\n                                                                                                                      // 15521\n                                                                                                                      // 15522\n  // object stream flag. Used to make read(n) ignore n and to                                                         // 15523\n  // make all the buffer merging and length checks go away                                                            // 15524\n  this.objectMode = !!options.objectMode;                                                                             // 15525\n                                                                                                                      // 15526\n  if (stream instanceof Duplex)                                                                                       // 15527\n    this.objectMode = this.objectMode || !!options.readableObjectMode;                                                // 15528\n                                                                                                                      // 15529\n  // Crypto is kind of old and crusty.  Historically, its default string                                              // 15530\n  // encoding is 'binary' so we have to make this configurable.                                                       // 15531\n  // Everything else in the universe uses 'utf8', though.                                                             // 15532\n  this.defaultEncoding = options.defaultEncoding || 'utf8';                                                           // 15533\n                                                                                                                      // 15534\n  // when piping, we only care about 'readable' events that happen                                                    // 15535\n  // after read()ing all the bytes and not getting any pushback.                                                      // 15536\n  this.ranOut = false;                                                                                                // 15537\n                                                                                                                      // 15538\n  // the number of writers that are awaiting a drain event in .pipe()s                                                // 15539\n  this.awaitDrain = 0;                                                                                                // 15540\n                                                                                                                      // 15541\n  // if true, a maybeReadMore has been scheduled                                                                      // 15542\n  this.readingMore = false;                                                                                           // 15543\n                                                                                                                      // 15544\n  this.decoder = null;                                                                                                // 15545\n  this.encoding = null;                                                                                               // 15546\n  if (options.encoding) {                                                                                             // 15547\n    if (!StringDecoder)                                                                                               // 15548\n      StringDecoder = require('string_decoder/').StringDecoder;                                                       // 15549\n    this.decoder = new StringDecoder(options.encoding);                                                               // 15550\n    this.encoding = options.encoding;                                                                                 // 15551\n  }                                                                                                                   // 15552\n}                                                                                                                     // 15553\n                                                                                                                      // 15554\nfunction Readable(options) {                                                                                          // 15555\n  var Duplex = require('./_stream_duplex');                                                                           // 15556\n                                                                                                                      // 15557\n  if (!(this instanceof Readable))                                                                                    // 15558\n    return new Readable(options);                                                                                     // 15559\n                                                                                                                      // 15560\n  this._readableState = new ReadableState(options, this);                                                             // 15561\n                                                                                                                      // 15562\n  // legacy                                                                                                           // 15563\n  this.readable = true;                                                                                               // 15564\n                                                                                                                      // 15565\n  Stream.call(this);                                                                                                  // 15566\n}                                                                                                                     // 15567\n                                                                                                                      // 15568\n// Manually shove something into the read() buffer.                                                                   // 15569\n// This returns true if the highWaterMark has not been hit yet,                                                       // 15570\n// similar to how Writable.write() returns true if you should                                                         // 15571\n// write() some more.                                                                                                 // 15572\nReadable.prototype.push = function(chunk, encoding) {                                                                 // 15573\n  var state = this._readableState;                                                                                    // 15574\n                                                                                                                      // 15575\n  if (util.isString(chunk) && !state.objectMode) {                                                                    // 15576\n    encoding = encoding || state.defaultEncoding;                                                                     // 15577\n    if (encoding !== state.encoding) {                                                                                // 15578\n      chunk = new Buffer(chunk, encoding);                                                                            // 15579\n      encoding = '';                                                                                                  // 15580\n    }                                                                                                                 // 15581\n  }                                                                                                                   // 15582\n                                                                                                                      // 15583\n  return readableAddChunk(this, state, chunk, encoding, false);                                                       // 15584\n};                                                                                                                    // 15585\n                                                                                                                      // 15586\n// Unshift should *always* be something directly out of read()                                                        // 15587\nReadable.prototype.unshift = function(chunk) {                                                                        // 15588\n  var state = this._readableState;                                                                                    // 15589\n  return readableAddChunk(this, state, chunk, '', true);                                                              // 15590\n};                                                                                                                    // 15591\n                                                                                                                      // 15592\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {                                               // 15593\n  var er = chunkInvalid(state, chunk);                                                                                // 15594\n  if (er) {                                                                                                           // 15595\n    stream.emit('error', er);                                                                                         // 15596\n  } else if (util.isNullOrUndefined(chunk)) {                                                                         // 15597\n    state.reading = false;                                                                                            // 15598\n    if (!state.ended)                                                                                                 // 15599\n      onEofChunk(stream, state);                                                                                      // 15600\n  } else if (state.objectMode || chunk && chunk.length > 0) {                                                         // 15601\n    if (state.ended && !addToFront) {                                                                                 // 15602\n      var e = new Error('stream.push() after EOF');                                                                   // 15603\n      stream.emit('error', e);                                                                                        // 15604\n    } else if (state.endEmitted && addToFront) {                                                                      // 15605\n      var e = new Error('stream.unshift() after end event');                                                          // 15606\n      stream.emit('error', e);                                                                                        // 15607\n    } else {                                                                                                          // 15608\n      if (state.decoder && !addToFront && !encoding)                                                                  // 15609\n        chunk = state.decoder.write(chunk);                                                                           // 15610\n                                                                                                                      // 15611\n      if (!addToFront)                                                                                                // 15612\n        state.reading = false;                                                                                        // 15613\n                                                                                                                      // 15614\n      // if we want the data now, just emit it.                                                                       // 15615\n      if (state.flowing && state.length === 0 && !state.sync) {                                                       // 15616\n        stream.emit('data', chunk);                                                                                   // 15617\n        stream.read(0);                                                                                               // 15618\n      } else {                                                                                                        // 15619\n        // update the buffer info.                                                                                    // 15620\n        state.length += state.objectMode ? 1 : chunk.length;                                                          // 15621\n        if (addToFront)                                                                                               // 15622\n          state.buffer.unshift(chunk);                                                                                // 15623\n        else                                                                                                          // 15624\n          state.buffer.push(chunk);                                                                                   // 15625\n                                                                                                                      // 15626\n        if (state.needReadable)                                                                                       // 15627\n          emitReadable(stream);                                                                                       // 15628\n      }                                                                                                               // 15629\n                                                                                                                      // 15630\n      maybeReadMore(stream, state);                                                                                   // 15631\n    }                                                                                                                 // 15632\n  } else if (!addToFront) {                                                                                           // 15633\n    state.reading = false;                                                                                            // 15634\n  }                                                                                                                   // 15635\n                                                                                                                      // 15636\n  return needMoreData(state);                                                                                         // 15637\n}                                                                                                                     // 15638\n                                                                                                                      // 15639\n                                                                                                                      // 15640\n                                                                                                                      // 15641\n// if it's past the high water mark, we can push in some more.                                                        // 15642\n// Also, if we have no data yet, we can stand some                                                                    // 15643\n// more bytes.  This is to work around cases where hwm=0,                                                             // 15644\n// such as the repl.  Also, if the push() triggered a                                                                 // 15645\n// readable event, and the user called read(largeNumber) such that                                                    // 15646\n// needReadable was set, then we ought to push more, so that another                                                  // 15647\n// 'readable' event will be triggered.                                                                                // 15648\nfunction needMoreData(state) {                                                                                        // 15649\n  return !state.ended &&                                                                                              // 15650\n         (state.needReadable ||                                                                                       // 15651\n          state.length < state.highWaterMark ||                                                                       // 15652\n          state.length === 0);                                                                                        // 15653\n}                                                                                                                     // 15654\n                                                                                                                      // 15655\n// backwards compatibility.                                                                                           // 15656\nReadable.prototype.setEncoding = function(enc) {                                                                      // 15657\n  if (!StringDecoder)                                                                                                 // 15658\n    StringDecoder = require('string_decoder/').StringDecoder;                                                         // 15659\n  this._readableState.decoder = new StringDecoder(enc);                                                               // 15660\n  this._readableState.encoding = enc;                                                                                 // 15661\n  return this;                                                                                                        // 15662\n};                                                                                                                    // 15663\n                                                                                                                      // 15664\n// Don't raise the hwm > 128MB                                                                                        // 15665\nvar MAX_HWM = 0x800000;                                                                                               // 15666\nfunction roundUpToNextPowerOf2(n) {                                                                                   // 15667\n  if (n >= MAX_HWM) {                                                                                                 // 15668\n    n = MAX_HWM;                                                                                                      // 15669\n  } else {                                                                                                            // 15670\n    // Get the next highest power of 2                                                                                // 15671\n    n--;                                                                                                              // 15672\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;                                                                     // 15673\n    n++;                                                                                                              // 15674\n  }                                                                                                                   // 15675\n  return n;                                                                                                           // 15676\n}                                                                                                                     // 15677\n                                                                                                                      // 15678\nfunction howMuchToRead(n, state) {                                                                                    // 15679\n  if (state.length === 0 && state.ended)                                                                              // 15680\n    return 0;                                                                                                         // 15681\n                                                                                                                      // 15682\n  if (state.objectMode)                                                                                               // 15683\n    return n === 0 ? 0 : 1;                                                                                           // 15684\n                                                                                                                      // 15685\n  if (isNaN(n) || util.isNull(n)) {                                                                                   // 15686\n    // only flow one buffer at a time                                                                                 // 15687\n    if (state.flowing && state.buffer.length)                                                                         // 15688\n      return state.buffer[0].length;                                                                                  // 15689\n    else                                                                                                              // 15690\n      return state.length;                                                                                            // 15691\n  }                                                                                                                   // 15692\n                                                                                                                      // 15693\n  if (n <= 0)                                                                                                         // 15694\n    return 0;                                                                                                         // 15695\n                                                                                                                      // 15696\n  // If we're asking for more than the target buffer level,                                                           // 15697\n  // then raise the water mark.  Bump up to the next highest                                                          // 15698\n  // power of 2, to prevent increasing it excessively in tiny                                                         // 15699\n  // amounts.                                                                                                         // 15700\n  if (n > state.highWaterMark)                                                                                        // 15701\n    state.highWaterMark = roundUpToNextPowerOf2(n);                                                                   // 15702\n                                                                                                                      // 15703\n  // don't have that much.  return null, unless we've ended.                                                          // 15704\n  if (n > state.length) {                                                                                             // 15705\n    if (!state.ended) {                                                                                               // 15706\n      state.needReadable = true;                                                                                      // 15707\n      return 0;                                                                                                       // 15708\n    } else                                                                                                            // 15709\n      return state.length;                                                                                            // 15710\n  }                                                                                                                   // 15711\n                                                                                                                      // 15712\n  return n;                                                                                                           // 15713\n}                                                                                                                     // 15714\n                                                                                                                      // 15715\n// you can override either this method, or the async _read(n) below.                                                  // 15716\nReadable.prototype.read = function(n) {                                                                               // 15717\n  debug('read', n);                                                                                                   // 15718\n  var state = this._readableState;                                                                                    // 15719\n  var nOrig = n;                                                                                                      // 15720\n                                                                                                                      // 15721\n  if (!util.isNumber(n) || n > 0)                                                                                     // 15722\n    state.emittedReadable = false;                                                                                    // 15723\n                                                                                                                      // 15724\n  // if we're doing read(0) to trigger a readable event, but we                                                       // 15725\n  // already have a bunch of data in the buffer, then just trigger                                                    // 15726\n  // the 'readable' event and move on.                                                                                // 15727\n  if (n === 0 &&                                                                                                      // 15728\n      state.needReadable &&                                                                                           // 15729\n      (state.length >= state.highWaterMark || state.ended)) {                                                         // 15730\n    debug('read: emitReadable', state.length, state.ended);                                                           // 15731\n    if (state.length === 0 && state.ended)                                                                            // 15732\n      endReadable(this);                                                                                              // 15733\n    else                                                                                                              // 15734\n      emitReadable(this);                                                                                             // 15735\n    return null;                                                                                                      // 15736\n  }                                                                                                                   // 15737\n                                                                                                                      // 15738\n  n = howMuchToRead(n, state);                                                                                        // 15739\n                                                                                                                      // 15740\n  // if we've ended, and we're now clear, then finish it up.                                                          // 15741\n  if (n === 0 && state.ended) {                                                                                       // 15742\n    if (state.length === 0)                                                                                           // 15743\n      endReadable(this);                                                                                              // 15744\n    return null;                                                                                                      // 15745\n  }                                                                                                                   // 15746\n                                                                                                                      // 15747\n  // All the actual chunk generation logic needs to be                                                                // 15748\n  // *below* the call to _read.  The reason is that in certain                                                        // 15749\n  // synthetic stream cases, such as passthrough streams, _read                                                       // 15750\n  // may be a completely synchronous operation which may change                                                       // 15751\n  // the state of the read buffer, providing enough data when                                                         // 15752\n  // before there was *not* enough.                                                                                   // 15753\n  //                                                                                                                  // 15754\n  // So, the steps are:                                                                                               // 15755\n  // 1. Figure out what the state of things will be after we do                                                       // 15756\n  // a read from the buffer.                                                                                          // 15757\n  //                                                                                                                  // 15758\n  // 2. If that resulting state will trigger a _read, then call _read.                                                // 15759\n  // Note that this may be asynchronous, or synchronous.  Yes, it is                                                  // 15760\n  // deeply ugly to write APIs this way, but that still doesn't mean                                                  // 15761\n  // that the Readable class should behave improperly, as streams are                                                 // 15762\n  // designed to be sync/async agnostic.                                                                              // 15763\n  // Take note if the _read call is sync or async (ie, if the read call                                               // 15764\n  // has returned yet), so that we know whether or not it's safe to emit                                              // 15765\n  // 'readable' etc.                                                                                                  // 15766\n  //                                                                                                                  // 15767\n  // 3. Actually pull the requested chunks out of the buffer and return.                                              // 15768\n                                                                                                                      // 15769\n  // if we need a readable event, then we need to do some reading.                                                    // 15770\n  var doRead = state.needReadable;                                                                                    // 15771\n  debug('need readable', doRead);                                                                                     // 15772\n                                                                                                                      // 15773\n  // if we currently have less than the highWaterMark, then also read some                                            // 15774\n  if (state.length === 0 || state.length - n < state.highWaterMark) {                                                 // 15775\n    doRead = true;                                                                                                    // 15776\n    debug('length less than watermark', doRead);                                                                      // 15777\n  }                                                                                                                   // 15778\n                                                                                                                      // 15779\n  // however, if we've ended, then there's no point, and if we're already                                             // 15780\n  // reading, then it's unnecessary.                                                                                  // 15781\n  if (state.ended || state.reading) {                                                                                 // 15782\n    doRead = false;                                                                                                   // 15783\n    debug('reading or ended', doRead);                                                                                // 15784\n  }                                                                                                                   // 15785\n                                                                                                                      // 15786\n  if (doRead) {                                                                                                       // 15787\n    debug('do read');                                                                                                 // 15788\n    state.reading = true;                                                                                             // 15789\n    state.sync = true;                                                                                                // 15790\n    // if the length is currently zero, then we *need* a readable event.                                              // 15791\n    if (state.length === 0)                                                                                           // 15792\n      state.needReadable = true;                                                                                      // 15793\n    // call internal read method                                                                                      // 15794\n    this._read(state.highWaterMark);                                                                                  // 15795\n    state.sync = false;                                                                                               // 15796\n  }                                                                                                                   // 15797\n                                                                                                                      // 15798\n  // If _read pushed data synchronously, then `reading` will be false,                                                // 15799\n  // and we need to re-evaluate how much data we can return to the user.                                              // 15800\n  if (doRead && !state.reading)                                                                                       // 15801\n    n = howMuchToRead(nOrig, state);                                                                                  // 15802\n                                                                                                                      // 15803\n  var ret;                                                                                                            // 15804\n  if (n > 0)                                                                                                          // 15805\n    ret = fromList(n, state);                                                                                         // 15806\n  else                                                                                                                // 15807\n    ret = null;                                                                                                       // 15808\n                                                                                                                      // 15809\n  if (util.isNull(ret)) {                                                                                             // 15810\n    state.needReadable = true;                                                                                        // 15811\n    n = 0;                                                                                                            // 15812\n  }                                                                                                                   // 15813\n                                                                                                                      // 15814\n  state.length -= n;                                                                                                  // 15815\n                                                                                                                      // 15816\n  // If we have nothing in the buffer, then we want to know                                                           // 15817\n  // as soon as we *do* get something into the buffer.                                                                // 15818\n  if (state.length === 0 && !state.ended)                                                                             // 15819\n    state.needReadable = true;                                                                                        // 15820\n                                                                                                                      // 15821\n  // If we tried to read() past the EOF, then emit end on the next tick.                                              // 15822\n  if (nOrig !== n && state.ended && state.length === 0)                                                               // 15823\n    endReadable(this);                                                                                                // 15824\n                                                                                                                      // 15825\n  if (!util.isNull(ret))                                                                                              // 15826\n    this.emit('data', ret);                                                                                           // 15827\n                                                                                                                      // 15828\n  return ret;                                                                                                         // 15829\n};                                                                                                                    // 15830\n                                                                                                                      // 15831\nfunction chunkInvalid(state, chunk) {                                                                                 // 15832\n  var er = null;                                                                                                      // 15833\n  if (!util.isBuffer(chunk) &&                                                                                        // 15834\n      !util.isString(chunk) &&                                                                                        // 15835\n      !util.isNullOrUndefined(chunk) &&                                                                               // 15836\n      !state.objectMode) {                                                                                            // 15837\n    er = new TypeError('Invalid non-string/buffer chunk');                                                            // 15838\n  }                                                                                                                   // 15839\n  return er;                                                                                                          // 15840\n}                                                                                                                     // 15841\n                                                                                                                      // 15842\n                                                                                                                      // 15843\nfunction onEofChunk(stream, state) {                                                                                  // 15844\n  if (state.decoder && !state.ended) {                                                                                // 15845\n    var chunk = state.decoder.end();                                                                                  // 15846\n    if (chunk && chunk.length) {                                                                                      // 15847\n      state.buffer.push(chunk);                                                                                       // 15848\n      state.length += state.objectMode ? 1 : chunk.length;                                                            // 15849\n    }                                                                                                                 // 15850\n  }                                                                                                                   // 15851\n  state.ended = true;                                                                                                 // 15852\n                                                                                                                      // 15853\n  // emit 'readable' now to make sure it gets picked up.                                                              // 15854\n  emitReadable(stream);                                                                                               // 15855\n}                                                                                                                     // 15856\n                                                                                                                      // 15857\n// Don't emit readable right away in sync mode, because this can trigger                                              // 15858\n// another read() call => stack overflow.  This way, it might trigger                                                 // 15859\n// a nextTick recursion warning, but that's not so bad.                                                               // 15860\nfunction emitReadable(stream) {                                                                                       // 15861\n  var state = stream._readableState;                                                                                  // 15862\n  state.needReadable = false;                                                                                         // 15863\n  if (!state.emittedReadable) {                                                                                       // 15864\n    debug('emitReadable', state.flowing);                                                                             // 15865\n    state.emittedReadable = true;                                                                                     // 15866\n    if (state.sync)                                                                                                   // 15867\n      process.nextTick(function() {                                                                                   // 15868\n        emitReadable_(stream);                                                                                        // 15869\n      });                                                                                                             // 15870\n    else                                                                                                              // 15871\n      emitReadable_(stream);                                                                                          // 15872\n  }                                                                                                                   // 15873\n}                                                                                                                     // 15874\n                                                                                                                      // 15875\nfunction emitReadable_(stream) {                                                                                      // 15876\n  debug('emit readable');                                                                                             // 15877\n  stream.emit('readable');                                                                                            // 15878\n  flow(stream);                                                                                                       // 15879\n}                                                                                                                     // 15880\n                                                                                                                      // 15881\n                                                                                                                      // 15882\n// at this point, the user has presumably seen the 'readable' event,                                                  // 15883\n// and called read() to consume some data.  that may have triggered                                                   // 15884\n// in turn another _read(n) call, in which case reading = true if                                                     // 15885\n// it's in progress.                                                                                                  // 15886\n// However, if we're not ended, or reading, and the length < hwm,                                                     // 15887\n// then go ahead and try to read some more preemptively.                                                              // 15888\nfunction maybeReadMore(stream, state) {                                                                               // 15889\n  if (!state.readingMore) {                                                                                           // 15890\n    state.readingMore = true;                                                                                         // 15891\n    process.nextTick(function() {                                                                                     // 15892\n      maybeReadMore_(stream, state);                                                                                  // 15893\n    });                                                                                                               // 15894\n  }                                                                                                                   // 15895\n}                                                                                                                     // 15896\n                                                                                                                      // 15897\nfunction maybeReadMore_(stream, state) {                                                                              // 15898\n  var len = state.length;                                                                                             // 15899\n  while (!state.reading && !state.flowing && !state.ended &&                                                          // 15900\n         state.length < state.highWaterMark) {                                                                        // 15901\n    debug('maybeReadMore read 0');                                                                                    // 15902\n    stream.read(0);                                                                                                   // 15903\n    if (len === state.length)                                                                                         // 15904\n      // didn't get any data, stop spinning.                                                                          // 15905\n      break;                                                                                                          // 15906\n    else                                                                                                              // 15907\n      len = state.length;                                                                                             // 15908\n  }                                                                                                                   // 15909\n  state.readingMore = false;                                                                                          // 15910\n}                                                                                                                     // 15911\n                                                                                                                      // 15912\n// abstract method.  to be overridden in specific implementation classes.                                             // 15913\n// call cb(er, data) where data is <= n in length.                                                                    // 15914\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat                                                 // 15915\n// arbitrary, and perhaps not very meaningful.                                                                        // 15916\nReadable.prototype._read = function(n) {                                                                              // 15917\n  this.emit('error', new Error('not implemented'));                                                                   // 15918\n};                                                                                                                    // 15919\n                                                                                                                      // 15920\nReadable.prototype.pipe = function(dest, pipeOpts) {                                                                  // 15921\n  var src = this;                                                                                                     // 15922\n  var state = this._readableState;                                                                                    // 15923\n                                                                                                                      // 15924\n  switch (state.pipesCount) {                                                                                         // 15925\n    case 0:                                                                                                           // 15926\n      state.pipes = dest;                                                                                             // 15927\n      break;                                                                                                          // 15928\n    case 1:                                                                                                           // 15929\n      state.pipes = [state.pipes, dest];                                                                              // 15930\n      break;                                                                                                          // 15931\n    default:                                                                                                          // 15932\n      state.pipes.push(dest);                                                                                         // 15933\n      break;                                                                                                          // 15934\n  }                                                                                                                   // 15935\n  state.pipesCount += 1;                                                                                              // 15936\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);                                                         // 15937\n                                                                                                                      // 15938\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&                                                                // 15939\n              dest !== process.stdout &&                                                                              // 15940\n              dest !== process.stderr;                                                                                // 15941\n                                                                                                                      // 15942\n  var endFn = doEnd ? onend : cleanup;                                                                                // 15943\n  if (state.endEmitted)                                                                                               // 15944\n    process.nextTick(endFn);                                                                                          // 15945\n  else                                                                                                                // 15946\n    src.once('end', endFn);                                                                                           // 15947\n                                                                                                                      // 15948\n  dest.on('unpipe', onunpipe);                                                                                        // 15949\n  function onunpipe(readable) {                                                                                       // 15950\n    debug('onunpipe');                                                                                                // 15951\n    if (readable === src) {                                                                                           // 15952\n      cleanup();                                                                                                      // 15953\n    }                                                                                                                 // 15954\n  }                                                                                                                   // 15955\n                                                                                                                      // 15956\n  function onend() {                                                                                                  // 15957\n    debug('onend');                                                                                                   // 15958\n    dest.end();                                                                                                       // 15959\n  }                                                                                                                   // 15960\n                                                                                                                      // 15961\n  // when the dest drains, it reduces the awaitDrain counter                                                          // 15962\n  // on the source.  This would be more elegant with a .once()                                                        // 15963\n  // handler in flow(), but adding and removing repeatedly is                                                         // 15964\n  // too slow.                                                                                                        // 15965\n  var ondrain = pipeOnDrain(src);                                                                                     // 15966\n  dest.on('drain', ondrain);                                                                                          // 15967\n                                                                                                                      // 15968\n  function cleanup() {                                                                                                // 15969\n    debug('cleanup');                                                                                                 // 15970\n    // cleanup event handlers once the pipe is broken                                                                 // 15971\n    dest.removeListener('close', onclose);                                                                            // 15972\n    dest.removeListener('finish', onfinish);                                                                          // 15973\n    dest.removeListener('drain', ondrain);                                                                            // 15974\n    dest.removeListener('error', onerror);                                                                            // 15975\n    dest.removeListener('unpipe', onunpipe);                                                                          // 15976\n    src.removeListener('end', onend);                                                                                 // 15977\n    src.removeListener('end', cleanup);                                                                               // 15978\n    src.removeListener('data', ondata);                                                                               // 15979\n                                                                                                                      // 15980\n    // if the reader is waiting for a drain event from this                                                           // 15981\n    // specific writer, then it would cause it to never start                                                         // 15982\n    // flowing again.                                                                                                 // 15983\n    // So, if this is awaiting a drain, then we just call it now.                                                     // 15984\n    // If we don't know, then assume that we are waiting for one.                                                     // 15985\n    if (state.awaitDrain &&                                                                                           // 15986\n        (!dest._writableState || dest._writableState.needDrain))                                                      // 15987\n      ondrain();                                                                                                      // 15988\n  }                                                                                                                   // 15989\n                                                                                                                      // 15990\n  src.on('data', ondata);                                                                                             // 15991\n  function ondata(chunk) {                                                                                            // 15992\n    debug('ondata');                                                                                                  // 15993\n    var ret = dest.write(chunk);                                                                                      // 15994\n    if (false === ret) {                                                                                              // 15995\n      debug('false write response, pause',                                                                            // 15996\n            src._readableState.awaitDrain);                                                                           // 15997\n      src._readableState.awaitDrain++;                                                                                // 15998\n      src.pause();                                                                                                    // 15999\n    }                                                                                                                 // 16000\n  }                                                                                                                   // 16001\n                                                                                                                      // 16002\n  // if the dest has an error, then stop piping into it.                                                              // 16003\n  // however, don't suppress the throwing behavior for this.                                                          // 16004\n  function onerror(er) {                                                                                              // 16005\n    debug('onerror', er);                                                                                             // 16006\n    unpipe();                                                                                                         // 16007\n    dest.removeListener('error', onerror);                                                                            // 16008\n    if (EE.listenerCount(dest, 'error') === 0)                                                                        // 16009\n      dest.emit('error', er);                                                                                         // 16010\n  }                                                                                                                   // 16011\n  // This is a brutally ugly hack to make sure that our error handler                                                 // 16012\n  // is attached before any userland ones.  NEVER DO THIS.                                                            // 16013\n  if (!dest._events || !dest._events.error)                                                                           // 16014\n    dest.on('error', onerror);                                                                                        // 16015\n  else if (isArray(dest._events.error))                                                                               // 16016\n    dest._events.error.unshift(onerror);                                                                              // 16017\n  else                                                                                                                // 16018\n    dest._events.error = [onerror, dest._events.error];                                                               // 16019\n                                                                                                                      // 16020\n                                                                                                                      // 16021\n                                                                                                                      // 16022\n  // Both close and finish should trigger unpipe, but only once.                                                      // 16023\n  function onclose() {                                                                                                // 16024\n    dest.removeListener('finish', onfinish);                                                                          // 16025\n    unpipe();                                                                                                         // 16026\n  }                                                                                                                   // 16027\n  dest.once('close', onclose);                                                                                        // 16028\n  function onfinish() {                                                                                               // 16029\n    debug('onfinish');                                                                                                // 16030\n    dest.removeListener('close', onclose);                                                                            // 16031\n    unpipe();                                                                                                         // 16032\n  }                                                                                                                   // 16033\n  dest.once('finish', onfinish);                                                                                      // 16034\n                                                                                                                      // 16035\n  function unpipe() {                                                                                                 // 16036\n    debug('unpipe');                                                                                                  // 16037\n    src.unpipe(dest);                                                                                                 // 16038\n  }                                                                                                                   // 16039\n                                                                                                                      // 16040\n  // tell the dest that it's being piped to                                                                           // 16041\n  dest.emit('pipe', src);                                                                                             // 16042\n                                                                                                                      // 16043\n  // start the flow if it hasn't been started already.                                                                // 16044\n  if (!state.flowing) {                                                                                               // 16045\n    debug('pipe resume');                                                                                             // 16046\n    src.resume();                                                                                                     // 16047\n  }                                                                                                                   // 16048\n                                                                                                                      // 16049\n  return dest;                                                                                                        // 16050\n};                                                                                                                    // 16051\n                                                                                                                      // 16052\nfunction pipeOnDrain(src) {                                                                                           // 16053\n  return function() {                                                                                                 // 16054\n    var state = src._readableState;                                                                                   // 16055\n    debug('pipeOnDrain', state.awaitDrain);                                                                           // 16056\n    if (state.awaitDrain)                                                                                             // 16057\n      state.awaitDrain--;                                                                                             // 16058\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {                                                    // 16059\n      state.flowing = true;                                                                                           // 16060\n      flow(src);                                                                                                      // 16061\n    }                                                                                                                 // 16062\n  };                                                                                                                  // 16063\n}                                                                                                                     // 16064\n                                                                                                                      // 16065\n                                                                                                                      // 16066\nReadable.prototype.unpipe = function(dest) {                                                                          // 16067\n  var state = this._readableState;                                                                                    // 16068\n                                                                                                                      // 16069\n  // if we're not piping anywhere, then do nothing.                                                                   // 16070\n  if (state.pipesCount === 0)                                                                                         // 16071\n    return this;                                                                                                      // 16072\n                                                                                                                      // 16073\n  // just one destination.  most common case.                                                                         // 16074\n  if (state.pipesCount === 1) {                                                                                       // 16075\n    // passed in one, but it's not the right one.                                                                     // 16076\n    if (dest && dest !== state.pipes)                                                                                 // 16077\n      return this;                                                                                                    // 16078\n                                                                                                                      // 16079\n    if (!dest)                                                                                                        // 16080\n      dest = state.pipes;                                                                                             // 16081\n                                                                                                                      // 16082\n    // got a match.                                                                                                   // 16083\n    state.pipes = null;                                                                                               // 16084\n    state.pipesCount = 0;                                                                                             // 16085\n    state.flowing = false;                                                                                            // 16086\n    if (dest)                                                                                                         // 16087\n      dest.emit('unpipe', this);                                                                                      // 16088\n    return this;                                                                                                      // 16089\n  }                                                                                                                   // 16090\n                                                                                                                      // 16091\n  // slow case. multiple pipe destinations.                                                                           // 16092\n                                                                                                                      // 16093\n  if (!dest) {                                                                                                        // 16094\n    // remove all.                                                                                                    // 16095\n    var dests = state.pipes;                                                                                          // 16096\n    var len = state.pipesCount;                                                                                       // 16097\n    state.pipes = null;                                                                                               // 16098\n    state.pipesCount = 0;                                                                                             // 16099\n    state.flowing = false;                                                                                            // 16100\n                                                                                                                      // 16101\n    for (var i = 0; i < len; i++)                                                                                     // 16102\n      dests[i].emit('unpipe', this);                                                                                  // 16103\n    return this;                                                                                                      // 16104\n  }                                                                                                                   // 16105\n                                                                                                                      // 16106\n  // try to find the right one.                                                                                       // 16107\n  var i = indexOf(state.pipes, dest);                                                                                 // 16108\n  if (i === -1)                                                                                                       // 16109\n    return this;                                                                                                      // 16110\n                                                                                                                      // 16111\n  state.pipes.splice(i, 1);                                                                                           // 16112\n  state.pipesCount -= 1;                                                                                              // 16113\n  if (state.pipesCount === 1)                                                                                         // 16114\n    state.pipes = state.pipes[0];                                                                                     // 16115\n                                                                                                                      // 16116\n  dest.emit('unpipe', this);                                                                                          // 16117\n                                                                                                                      // 16118\n  return this;                                                                                                        // 16119\n};                                                                                                                    // 16120\n                                                                                                                      // 16121\n// set up data events if they are asked for                                                                           // 16122\n// Ensure readable listeners eventually get something                                                                 // 16123\nReadable.prototype.on = function(ev, fn) {                                                                            // 16124\n  var res = Stream.prototype.on.call(this, ev, fn);                                                                   // 16125\n                                                                                                                      // 16126\n  // If listening to data, and it has not explicitly been paused,                                                     // 16127\n  // then call resume to start the flow of data on the next tick.                                                     // 16128\n  if (ev === 'data' && false !== this._readableState.flowing) {                                                       // 16129\n    this.resume();                                                                                                    // 16130\n  }                                                                                                                   // 16131\n                                                                                                                      // 16132\n  if (ev === 'readable' && this.readable) {                                                                           // 16133\n    var state = this._readableState;                                                                                  // 16134\n    if (!state.readableListening) {                                                                                   // 16135\n      state.readableListening = true;                                                                                 // 16136\n      state.emittedReadable = false;                                                                                  // 16137\n      state.needReadable = true;                                                                                      // 16138\n      if (!state.reading) {                                                                                           // 16139\n        var self = this;                                                                                              // 16140\n        process.nextTick(function() {                                                                                 // 16141\n          debug('readable nexttick read 0');                                                                          // 16142\n          self.read(0);                                                                                               // 16143\n        });                                                                                                           // 16144\n      } else if (state.length) {                                                                                      // 16145\n        emitReadable(this, state);                                                                                    // 16146\n      }                                                                                                               // 16147\n    }                                                                                                                 // 16148\n  }                                                                                                                   // 16149\n                                                                                                                      // 16150\n  return res;                                                                                                         // 16151\n};                                                                                                                    // 16152\nReadable.prototype.addListener = Readable.prototype.on;                                                               // 16153\n                                                                                                                      // 16154\n// pause() and resume() are remnants of the legacy readable stream API                                                // 16155\n// If the user uses them, then switch into old mode.                                                                  // 16156\nReadable.prototype.resume = function() {                                                                              // 16157\n  var state = this._readableState;                                                                                    // 16158\n  if (!state.flowing) {                                                                                               // 16159\n    debug('resume');                                                                                                  // 16160\n    state.flowing = true;                                                                                             // 16161\n    if (!state.reading) {                                                                                             // 16162\n      debug('resume read 0');                                                                                         // 16163\n      this.read(0);                                                                                                   // 16164\n    }                                                                                                                 // 16165\n    resume(this, state);                                                                                              // 16166\n  }                                                                                                                   // 16167\n  return this;                                                                                                        // 16168\n};                                                                                                                    // 16169\n                                                                                                                      // 16170\nfunction resume(stream, state) {                                                                                      // 16171\n  if (!state.resumeScheduled) {                                                                                       // 16172\n    state.resumeScheduled = true;                                                                                     // 16173\n    process.nextTick(function() {                                                                                     // 16174\n      resume_(stream, state);                                                                                         // 16175\n    });                                                                                                               // 16176\n  }                                                                                                                   // 16177\n}                                                                                                                     // 16178\n                                                                                                                      // 16179\nfunction resume_(stream, state) {                                                                                     // 16180\n  state.resumeScheduled = false;                                                                                      // 16181\n  stream.emit('resume');                                                                                              // 16182\n  flow(stream);                                                                                                       // 16183\n  if (state.flowing && !state.reading)                                                                                // 16184\n    stream.read(0);                                                                                                   // 16185\n}                                                                                                                     // 16186\n                                                                                                                      // 16187\nReadable.prototype.pause = function() {                                                                               // 16188\n  debug('call pause flowing=%j', this._readableState.flowing);                                                        // 16189\n  if (false !== this._readableState.flowing) {                                                                        // 16190\n    debug('pause');                                                                                                   // 16191\n    this._readableState.flowing = false;                                                                              // 16192\n    this.emit('pause');                                                                                               // 16193\n  }                                                                                                                   // 16194\n  return this;                                                                                                        // 16195\n};                                                                                                                    // 16196\n                                                                                                                      // 16197\nfunction flow(stream) {                                                                                               // 16198\n  var state = stream._readableState;                                                                                  // 16199\n  debug('flow', state.flowing);                                                                                       // 16200\n  if (state.flowing) {                                                                                                // 16201\n    do {                                                                                                              // 16202\n      var chunk = stream.read();                                                                                      // 16203\n    } while (null !== chunk && state.flowing);                                                                        // 16204\n  }                                                                                                                   // 16205\n}                                                                                                                     // 16206\n                                                                                                                      // 16207\n// wrap an old-style stream as the async data source.                                                                 // 16208\n// This is *not* part of the readable stream interface.                                                               // 16209\n// It is an ugly unfortunate mess of history.                                                                         // 16210\nReadable.prototype.wrap = function(stream) {                                                                          // 16211\n  var state = this._readableState;                                                                                    // 16212\n  var paused = false;                                                                                                 // 16213\n                                                                                                                      // 16214\n  var self = this;                                                                                                    // 16215\n  stream.on('end', function() {                                                                                       // 16216\n    debug('wrapped end');                                                                                             // 16217\n    if (state.decoder && !state.ended) {                                                                              // 16218\n      var chunk = state.decoder.end();                                                                                // 16219\n      if (chunk && chunk.length)                                                                                      // 16220\n        self.push(chunk);                                                                                             // 16221\n    }                                                                                                                 // 16222\n                                                                                                                      // 16223\n    self.push(null);                                                                                                  // 16224\n  });                                                                                                                 // 16225\n                                                                                                                      // 16226\n  stream.on('data', function(chunk) {                                                                                 // 16227\n    debug('wrapped data');                                                                                            // 16228\n    if (state.decoder)                                                                                                // 16229\n      chunk = state.decoder.write(chunk);                                                                             // 16230\n    if (!chunk || !state.objectMode && !chunk.length)                                                                 // 16231\n      return;                                                                                                         // 16232\n                                                                                                                      // 16233\n    var ret = self.push(chunk);                                                                                       // 16234\n    if (!ret) {                                                                                                       // 16235\n      paused = true;                                                                                                  // 16236\n      stream.pause();                                                                                                 // 16237\n    }                                                                                                                 // 16238\n  });                                                                                                                 // 16239\n                                                                                                                      // 16240\n  // proxy all the other methods.                                                                                     // 16241\n  // important when wrapping filters and duplexes.                                                                    // 16242\n  for (var i in stream) {                                                                                             // 16243\n    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {                                                    // 16244\n      this[i] = function(method) { return function() {                                                                // 16245\n        return stream[method].apply(stream, arguments);                                                               // 16246\n      }}(i);                                                                                                          // 16247\n    }                                                                                                                 // 16248\n  }                                                                                                                   // 16249\n                                                                                                                      // 16250\n  // proxy certain important events.                                                                                  // 16251\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];                                                      // 16252\n  forEach(events, function(ev) {                                                                                      // 16253\n    stream.on(ev, self.emit.bind(self, ev));                                                                          // 16254\n  });                                                                                                                 // 16255\n                                                                                                                      // 16256\n  // when we try to consume some more bytes, simply unpause the                                                       // 16257\n  // underlying stream.                                                                                               // 16258\n  self._read = function(n) {                                                                                          // 16259\n    debug('wrapped _read', n);                                                                                        // 16260\n    if (paused) {                                                                                                     // 16261\n      paused = false;                                                                                                 // 16262\n      stream.resume();                                                                                                // 16263\n    }                                                                                                                 // 16264\n  };                                                                                                                  // 16265\n                                                                                                                      // 16266\n  return self;                                                                                                        // 16267\n};                                                                                                                    // 16268\n                                                                                                                      // 16269\n                                                                                                                      // 16270\n                                                                                                                      // 16271\n// exposed for testing purposes only.                                                                                 // 16272\nReadable._fromList = fromList;                                                                                        // 16273\n                                                                                                                      // 16274\n// Pluck off n bytes from an array of buffers.                                                                        // 16275\n// Length is the combined lengths of all the buffers in the list.                                                     // 16276\nfunction fromList(n, state) {                                                                                         // 16277\n  var list = state.buffer;                                                                                            // 16278\n  var length = state.length;                                                                                          // 16279\n  var stringMode = !!state.decoder;                                                                                   // 16280\n  var objectMode = !!state.objectMode;                                                                                // 16281\n  var ret;                                                                                                            // 16282\n                                                                                                                      // 16283\n  // nothing in the list, definitely empty.                                                                           // 16284\n  if (list.length === 0)                                                                                              // 16285\n    return null;                                                                                                      // 16286\n                                                                                                                      // 16287\n  if (length === 0)                                                                                                   // 16288\n    ret = null;                                                                                                       // 16289\n  else if (objectMode)                                                                                                // 16290\n    ret = list.shift();                                                                                               // 16291\n  else if (!n || n >= length) {                                                                                       // 16292\n    // read it all, truncate the array.                                                                               // 16293\n    if (stringMode)                                                                                                   // 16294\n      ret = list.join('');                                                                                            // 16295\n    else                                                                                                              // 16296\n      ret = Buffer.concat(list, length);                                                                              // 16297\n    list.length = 0;                                                                                                  // 16298\n  } else {                                                                                                            // 16299\n    // read just some of it.                                                                                          // 16300\n    if (n < list[0].length) {                                                                                         // 16301\n      // just take a part of the first list item.                                                                     // 16302\n      // slice is the same for buffers and strings.                                                                   // 16303\n      var buf = list[0];                                                                                              // 16304\n      ret = buf.slice(0, n);                                                                                          // 16305\n      list[0] = buf.slice(n);                                                                                         // 16306\n    } else if (n === list[0].length) {                                                                                // 16307\n      // first list is a perfect match                                                                                // 16308\n      ret = list.shift();                                                                                             // 16309\n    } else {                                                                                                          // 16310\n      // complex case.                                                                                                // 16311\n      // we have enough to cover it, but it spans past the first buffer.                                              // 16312\n      if (stringMode)                                                                                                 // 16313\n        ret = '';                                                                                                     // 16314\n      else                                                                                                            // 16315\n        ret = new Buffer(n);                                                                                          // 16316\n                                                                                                                      // 16317\n      var c = 0;                                                                                                      // 16318\n      for (var i = 0, l = list.length; i < l && c < n; i++) {                                                         // 16319\n        var buf = list[0];                                                                                            // 16320\n        var cpy = Math.min(n - c, buf.length);                                                                        // 16321\n                                                                                                                      // 16322\n        if (stringMode)                                                                                               // 16323\n          ret += buf.slice(0, cpy);                                                                                   // 16324\n        else                                                                                                          // 16325\n          buf.copy(ret, c, 0, cpy);                                                                                   // 16326\n                                                                                                                      // 16327\n        if (cpy < buf.length)                                                                                         // 16328\n          list[0] = buf.slice(cpy);                                                                                   // 16329\n        else                                                                                                          // 16330\n          list.shift();                                                                                               // 16331\n                                                                                                                      // 16332\n        c += cpy;                                                                                                     // 16333\n      }                                                                                                               // 16334\n    }                                                                                                                 // 16335\n  }                                                                                                                   // 16336\n                                                                                                                      // 16337\n  return ret;                                                                                                         // 16338\n}                                                                                                                     // 16339\n                                                                                                                      // 16340\nfunction endReadable(stream) {                                                                                        // 16341\n  var state = stream._readableState;                                                                                  // 16342\n                                                                                                                      // 16343\n  // If we get here before consuming all the bytes, then that is a                                                    // 16344\n  // bug in node.  Should never happen.                                                                               // 16345\n  if (state.length > 0)                                                                                               // 16346\n    throw new Error('endReadable called on non-empty stream');                                                        // 16347\n                                                                                                                      // 16348\n  if (!state.endEmitted) {                                                                                            // 16349\n    state.ended = true;                                                                                               // 16350\n    process.nextTick(function() {                                                                                     // 16351\n      // Check that we didn't get one last unshift.                                                                   // 16352\n      if (!state.endEmitted && state.length === 0) {                                                                  // 16353\n        state.endEmitted = true;                                                                                      // 16354\n        stream.readable = false;                                                                                      // 16355\n        stream.emit('end');                                                                                           // 16356\n      }                                                                                                               // 16357\n    });                                                                                                               // 16358\n  }                                                                                                                   // 16359\n}                                                                                                                     // 16360\n                                                                                                                      // 16361\nfunction forEach (xs, f) {                                                                                            // 16362\n  for (var i = 0, l = xs.length; i < l; i++) {                                                                        // 16363\n    f(xs[i], i);                                                                                                      // 16364\n  }                                                                                                                   // 16365\n}                                                                                                                     // 16366\n                                                                                                                      // 16367\nfunction indexOf (xs, x) {                                                                                            // 16368\n  for (var i = 0, l = xs.length; i < l; i++) {                                                                        // 16369\n    if (xs[i] === x) return i;                                                                                        // 16370\n  }                                                                                                                   // 16371\n  return -1;                                                                                                          // 16372\n}                                                                                                                     // 16373\n                                                                                                                      // 16374\n}).call(this,require('_process'))                                                                                     // 16375\n                                                                                                                      // 16376\n},{\"./_stream_duplex\":148,\"_process\":146,\"buffer\":2,\"core-util-is\":153,\"events\":143,\"inherits\":144,\"isarray\":145,\"stream\":158,\"string_decoder/\":159,\"util\":1}],151:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.                                                                // 16378\n//                                                                                                                    // 16379\n// Permission is hereby granted, free of charge, to any person obtaining a                                            // 16380\n// copy of this software and associated documentation files (the                                                      // 16381\n// \"Software\"), to deal in the Software without restriction, including                                                // 16382\n// without limitation the rights to use, copy, modify, merge, publish,                                                // 16383\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 16384\n// persons to whom the Software is furnished to do so, subject to the                                                 // 16385\n// following conditions:                                                                                              // 16386\n//                                                                                                                    // 16387\n// The above copyright notice and this permission notice shall be included                                            // 16388\n// in all copies or substantial portions of the Software.                                                             // 16389\n//                                                                                                                    // 16390\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 16391\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 16392\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 16393\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 16394\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 16395\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 16396\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 16397\n                                                                                                                      // 16398\n                                                                                                                      // 16399\n// a transform stream is a readable/writable stream where you do                                                      // 16400\n// something with the data.  Sometimes it's called a \"filter\",                                                        // 16401\n// but that's not a great name for it, since that implies a thing where                                               // 16402\n// some bits pass through, and others are simply ignored.  (That would                                                // 16403\n// be a valid example of a transform, of course.)                                                                     // 16404\n//                                                                                                                    // 16405\n// While the output is causally related to the input, it's not a                                                      // 16406\n// necessarily symmetric or synchronous transformation.  For example,                                                 // 16407\n// a zlib stream might take multiple plain-text writes(), and then                                                    // 16408\n// emit a single compressed chunk some time in the future.                                                            // 16409\n//                                                                                                                    // 16410\n// Here's how this works:                                                                                             // 16411\n//                                                                                                                    // 16412\n// The Transform stream has all the aspects of the readable and writable                                              // 16413\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)                                                // 16414\n// internally, and returns false if there's a lot of pending writes                                                   // 16415\n// buffered up.  When you call read(), that calls _read(n) until                                                      // 16416\n// there's enough pending readable data buffered up.                                                                  // 16417\n//                                                                                                                    // 16418\n// In a transform stream, the written data is placed in a buffer.  When                                               // 16419\n// _read(n) is called, it transforms the queued up data, calling the                                                  // 16420\n// buffered _write cb's as it consumes chunks.  If consuming a single                                                 // 16421\n// written chunk would result in multiple output chunks, then the first                                               // 16422\n// outputted bit calls the readcb, and subsequent chunks just go into                                                 // 16423\n// the read buffer, and will cause it to emit 'readable' if necessary.                                                // 16424\n//                                                                                                                    // 16425\n// This way, back-pressure is actually determined by the reading side,                                                // 16426\n// since _read has to be called to start processing a new chunk.  However,                                            // 16427\n// a pathological inflate type of transform can cause excessive buffering                                             // 16428\n// here.  For example, imagine a stream where every byte of input is                                                  // 16429\n// interpreted as an integer from 0-255, and then results in that many                                                // 16430\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in                                                // 16431\n// 1kb of data being output.  In this case, you could write a very small                                              // 16432\n// amount of input, and end up with a very large amount of output.  In                                                // 16433\n// such a pathological inflating mechanism, there'd be no way to tell                                                 // 16434\n// the system to stop doing the transform.  A single 4MB write could                                                  // 16435\n// cause the system to run out of memory.                                                                             // 16436\n//                                                                                                                    // 16437\n// However, even in such a pathological case, only a single written chunk                                             // 16438\n// would be consumed, and then the rest would wait (un-transformed) until                                             // 16439\n// the results of the previous transformed chunk were consumed.                                                       // 16440\n                                                                                                                      // 16441\nmodule.exports = Transform;                                                                                           // 16442\n                                                                                                                      // 16443\nvar Duplex = require('./_stream_duplex');                                                                             // 16444\n                                                                                                                      // 16445\n/*<replacement>*/                                                                                                     // 16446\nvar util = require('core-util-is');                                                                                   // 16447\nutil.inherits = require('inherits');                                                                                  // 16448\n/*</replacement>*/                                                                                                    // 16449\n                                                                                                                      // 16450\nutil.inherits(Transform, Duplex);                                                                                     // 16451\n                                                                                                                      // 16452\n                                                                                                                      // 16453\nfunction TransformState(options, stream) {                                                                            // 16454\n  this.afterTransform = function(er, data) {                                                                          // 16455\n    return afterTransform(stream, er, data);                                                                          // 16456\n  };                                                                                                                  // 16457\n                                                                                                                      // 16458\n  this.needTransform = false;                                                                                         // 16459\n  this.transforming = false;                                                                                          // 16460\n  this.writecb = null;                                                                                                // 16461\n  this.writechunk = null;                                                                                             // 16462\n}                                                                                                                     // 16463\n                                                                                                                      // 16464\nfunction afterTransform(stream, er, data) {                                                                           // 16465\n  var ts = stream._transformState;                                                                                    // 16466\n  ts.transforming = false;                                                                                            // 16467\n                                                                                                                      // 16468\n  var cb = ts.writecb;                                                                                                // 16469\n                                                                                                                      // 16470\n  if (!cb)                                                                                                            // 16471\n    return stream.emit('error', new Error('no writecb in Transform class'));                                          // 16472\n                                                                                                                      // 16473\n  ts.writechunk = null;                                                                                               // 16474\n  ts.writecb = null;                                                                                                  // 16475\n                                                                                                                      // 16476\n  if (!util.isNullOrUndefined(data))                                                                                  // 16477\n    stream.push(data);                                                                                                // 16478\n                                                                                                                      // 16479\n  if (cb)                                                                                                             // 16480\n    cb(er);                                                                                                           // 16481\n                                                                                                                      // 16482\n  var rs = stream._readableState;                                                                                     // 16483\n  rs.reading = false;                                                                                                 // 16484\n  if (rs.needReadable || rs.length < rs.highWaterMark) {                                                              // 16485\n    stream._read(rs.highWaterMark);                                                                                   // 16486\n  }                                                                                                                   // 16487\n}                                                                                                                     // 16488\n                                                                                                                      // 16489\n                                                                                                                      // 16490\nfunction Transform(options) {                                                                                         // 16491\n  if (!(this instanceof Transform))                                                                                   // 16492\n    return new Transform(options);                                                                                    // 16493\n                                                                                                                      // 16494\n  Duplex.call(this, options);                                                                                         // 16495\n                                                                                                                      // 16496\n  this._transformState = new TransformState(options, this);                                                           // 16497\n                                                                                                                      // 16498\n  // when the writable side finishes, then flush out anything remaining.                                              // 16499\n  var stream = this;                                                                                                  // 16500\n                                                                                                                      // 16501\n  // start out asking for a readable event once data is transformed.                                                  // 16502\n  this._readableState.needReadable = true;                                                                            // 16503\n                                                                                                                      // 16504\n  // we have implemented the _read method, and done the other things                                                  // 16505\n  // that Readable wants before the first _read call, so unset the                                                    // 16506\n  // sync guard flag.                                                                                                 // 16507\n  this._readableState.sync = false;                                                                                   // 16508\n                                                                                                                      // 16509\n  this.once('prefinish', function() {                                                                                 // 16510\n    if (util.isFunction(this._flush))                                                                                 // 16511\n      this._flush(function(er) {                                                                                      // 16512\n        done(stream, er);                                                                                             // 16513\n      });                                                                                                             // 16514\n    else                                                                                                              // 16515\n      done(stream);                                                                                                   // 16516\n  });                                                                                                                 // 16517\n}                                                                                                                     // 16518\n                                                                                                                      // 16519\nTransform.prototype.push = function(chunk, encoding) {                                                                // 16520\n  this._transformState.needTransform = false;                                                                         // 16521\n  return Duplex.prototype.push.call(this, chunk, encoding);                                                           // 16522\n};                                                                                                                    // 16523\n                                                                                                                      // 16524\n// This is the part where you do stuff!                                                                               // 16525\n// override this function in implementation classes.                                                                  // 16526\n// 'chunk' is an input chunk.                                                                                         // 16527\n//                                                                                                                    // 16528\n// Call `push(newChunk)` to pass along transformed output                                                             // 16529\n// to the readable side.  You may call 'push' zero or more times.                                                     // 16530\n//                                                                                                                    // 16531\n// Call `cb(err)` when you are done with this chunk.  If you pass                                                     // 16532\n// an error, then that'll put the hurt on the whole operation.  If you                                                // 16533\n// never call cb(), then you'll never get another chunk.                                                              // 16534\nTransform.prototype._transform = function(chunk, encoding, cb) {                                                      // 16535\n  throw new Error('not implemented');                                                                                 // 16536\n};                                                                                                                    // 16537\n                                                                                                                      // 16538\nTransform.prototype._write = function(chunk, encoding, cb) {                                                          // 16539\n  var ts = this._transformState;                                                                                      // 16540\n  ts.writecb = cb;                                                                                                    // 16541\n  ts.writechunk = chunk;                                                                                              // 16542\n  ts.writeencoding = encoding;                                                                                        // 16543\n  if (!ts.transforming) {                                                                                             // 16544\n    var rs = this._readableState;                                                                                     // 16545\n    if (ts.needTransform ||                                                                                           // 16546\n        rs.needReadable ||                                                                                            // 16547\n        rs.length < rs.highWaterMark)                                                                                 // 16548\n      this._read(rs.highWaterMark);                                                                                   // 16549\n  }                                                                                                                   // 16550\n};                                                                                                                    // 16551\n                                                                                                                      // 16552\n// Doesn't matter what the args are here.                                                                             // 16553\n// _transform does all the work.                                                                                      // 16554\n// That we got here means that the readable side wants more data.                                                     // 16555\nTransform.prototype._read = function(n) {                                                                             // 16556\n  var ts = this._transformState;                                                                                      // 16557\n                                                                                                                      // 16558\n  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {                                                // 16559\n    ts.transforming = true;                                                                                           // 16560\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);                                              // 16561\n  } else {                                                                                                            // 16562\n    // mark that we need a transform, so that any data that comes in                                                  // 16563\n    // will get processed, now that we've asked for it.                                                               // 16564\n    ts.needTransform = true;                                                                                          // 16565\n  }                                                                                                                   // 16566\n};                                                                                                                    // 16567\n                                                                                                                      // 16568\n                                                                                                                      // 16569\nfunction done(stream, er) {                                                                                           // 16570\n  if (er)                                                                                                             // 16571\n    return stream.emit('error', er);                                                                                  // 16572\n                                                                                                                      // 16573\n  // if there's nothing in the write buffer, then that means                                                          // 16574\n  // that nothing more will ever be provided                                                                          // 16575\n  var ws = stream._writableState;                                                                                     // 16576\n  var ts = stream._transformState;                                                                                    // 16577\n                                                                                                                      // 16578\n  if (ws.length)                                                                                                      // 16579\n    throw new Error('calling transform done when ws.length != 0');                                                    // 16580\n                                                                                                                      // 16581\n  if (ts.transforming)                                                                                                // 16582\n    throw new Error('calling transform done when still transforming');                                                // 16583\n                                                                                                                      // 16584\n  return stream.push(null);                                                                                           // 16585\n}                                                                                                                     // 16586\n                                                                                                                      // 16587\n},{\"./_stream_duplex\":148,\"core-util-is\":153,\"inherits\":144}],152:[function(require,module,exports){                  // 16588\n(function (process){                                                                                                  // 16589\n// Copyright Joyent, Inc. and other Node contributors.                                                                // 16590\n//                                                                                                                    // 16591\n// Permission is hereby granted, free of charge, to any person obtaining a                                            // 16592\n// copy of this software and associated documentation files (the                                                      // 16593\n// \"Software\"), to deal in the Software without restriction, including                                                // 16594\n// without limitation the rights to use, copy, modify, merge, publish,                                                // 16595\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 16596\n// persons to whom the Software is furnished to do so, subject to the                                                 // 16597\n// following conditions:                                                                                              // 16598\n//                                                                                                                    // 16599\n// The above copyright notice and this permission notice shall be included                                            // 16600\n// in all copies or substantial portions of the Software.                                                             // 16601\n//                                                                                                                    // 16602\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 16603\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 16604\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 16605\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 16606\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 16607\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 16608\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 16609\n                                                                                                                      // 16610\n// A bit simpler than readable streams.                                                                               // 16611\n// Implement an async ._write(chunk, cb), and it'll handle all                                                        // 16612\n// the drain event emission and buffering.                                                                            // 16613\n                                                                                                                      // 16614\nmodule.exports = Writable;                                                                                            // 16615\n                                                                                                                      // 16616\n/*<replacement>*/                                                                                                     // 16617\nvar Buffer = require('buffer').Buffer;                                                                                // 16618\n/*</replacement>*/                                                                                                    // 16619\n                                                                                                                      // 16620\nWritable.WritableState = WritableState;                                                                               // 16621\n                                                                                                                      // 16622\n                                                                                                                      // 16623\n/*<replacement>*/                                                                                                     // 16624\nvar util = require('core-util-is');                                                                                   // 16625\nutil.inherits = require('inherits');                                                                                  // 16626\n/*</replacement>*/                                                                                                    // 16627\n                                                                                                                      // 16628\nvar Stream = require('stream');                                                                                       // 16629\n                                                                                                                      // 16630\nutil.inherits(Writable, Stream);                                                                                      // 16631\n                                                                                                                      // 16632\nfunction WriteReq(chunk, encoding, cb) {                                                                              // 16633\n  this.chunk = chunk;                                                                                                 // 16634\n  this.encoding = encoding;                                                                                           // 16635\n  this.callback = cb;                                                                                                 // 16636\n}                                                                                                                     // 16637\n                                                                                                                      // 16638\nfunction WritableState(options, stream) {                                                                             // 16639\n  var Duplex = require('./_stream_duplex');                                                                           // 16640\n                                                                                                                      // 16641\n  options = options || {};                                                                                            // 16642\n                                                                                                                      // 16643\n  // the point at which write() starts returning false                                                                // 16644\n  // Note: 0 is a valid value, means that we always return false if                                                   // 16645\n  // the entire buffer is not flushed immediately on write()                                                          // 16646\n  var hwm = options.highWaterMark;                                                                                    // 16647\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;                                                               // 16648\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;                                                         // 16649\n                                                                                                                      // 16650\n  // object stream flag to indicate whether or not this stream                                                        // 16651\n  // contains buffers or objects.                                                                                     // 16652\n  this.objectMode = !!options.objectMode;                                                                             // 16653\n                                                                                                                      // 16654\n  if (stream instanceof Duplex)                                                                                       // 16655\n    this.objectMode = this.objectMode || !!options.writableObjectMode;                                                // 16656\n                                                                                                                      // 16657\n  // cast to ints.                                                                                                    // 16658\n  this.highWaterMark = ~~this.highWaterMark;                                                                          // 16659\n                                                                                                                      // 16660\n  this.needDrain = false;                                                                                             // 16661\n  // at the start of calling end()                                                                                    // 16662\n  this.ending = false;                                                                                                // 16663\n  // when end() has been called, and returned                                                                         // 16664\n  this.ended = false;                                                                                                 // 16665\n  // when 'finish' is emitted                                                                                         // 16666\n  this.finished = false;                                                                                              // 16667\n                                                                                                                      // 16668\n  // should we decode strings into buffers before passing to _write?                                                  // 16669\n  // this is here so that some node-core streams can optimize string                                                  // 16670\n  // handling at a lower level.                                                                                       // 16671\n  var noDecode = options.decodeStrings === false;                                                                     // 16672\n  this.decodeStrings = !noDecode;                                                                                     // 16673\n                                                                                                                      // 16674\n  // Crypto is kind of old and crusty.  Historically, its default string                                              // 16675\n  // encoding is 'binary' so we have to make this configurable.                                                       // 16676\n  // Everything else in the universe uses 'utf8', though.                                                             // 16677\n  this.defaultEncoding = options.defaultEncoding || 'utf8';                                                           // 16678\n                                                                                                                      // 16679\n  // not an actual buffer we keep track of, but a measurement                                                         // 16680\n  // of how much we're waiting to get pushed to some underlying                                                       // 16681\n  // socket or file.                                                                                                  // 16682\n  this.length = 0;                                                                                                    // 16683\n                                                                                                                      // 16684\n  // a flag to see when we're in the middle of a write.                                                               // 16685\n  this.writing = false;                                                                                               // 16686\n                                                                                                                      // 16687\n  // when true all writes will be buffered until .uncork() call                                                       // 16688\n  this.corked = 0;                                                                                                    // 16689\n                                                                                                                      // 16690\n  // a flag to be able to tell if the onwrite cb is called immediately,                                               // 16691\n  // or on a later tick.  We set this to true at first, because any                                                   // 16692\n  // actions that shouldn't happen until \"later\" should generally also                                                // 16693\n  // not happen before the first write call.                                                                          // 16694\n  this.sync = true;                                                                                                   // 16695\n                                                                                                                      // 16696\n  // a flag to know if we're processing previously buffered items, which                                              // 16697\n  // may call the _write() callback in the same tick, so that we don't                                                // 16698\n  // end up in an overlapped onwrite situation.                                                                       // 16699\n  this.bufferProcessing = false;                                                                                      // 16700\n                                                                                                                      // 16701\n  // the callback that's passed to _write(chunk,cb)                                                                   // 16702\n  this.onwrite = function(er) {                                                                                       // 16703\n    onwrite(stream, er);                                                                                              // 16704\n  };                                                                                                                  // 16705\n                                                                                                                      // 16706\n  // the callback that the user supplies to write(chunk,encoding,cb)                                                  // 16707\n  this.writecb = null;                                                                                                // 16708\n                                                                                                                      // 16709\n  // the amount that is being written when _write is called.                                                          // 16710\n  this.writelen = 0;                                                                                                  // 16711\n                                                                                                                      // 16712\n  this.buffer = [];                                                                                                   // 16713\n                                                                                                                      // 16714\n  // number of pending user-supplied write callbacks                                                                  // 16715\n  // this must be 0 before 'finish' can be emitted                                                                    // 16716\n  this.pendingcb = 0;                                                                                                 // 16717\n                                                                                                                      // 16718\n  // emit prefinish if the only thing we're waiting for is _write cbs                                                 // 16719\n  // This is relevant for synchronous Transform streams                                                               // 16720\n  this.prefinished = false;                                                                                           // 16721\n                                                                                                                      // 16722\n  // True if the error was already emitted and should not be thrown again                                             // 16723\n  this.errorEmitted = false;                                                                                          // 16724\n}                                                                                                                     // 16725\n                                                                                                                      // 16726\nfunction Writable(options) {                                                                                          // 16727\n  var Duplex = require('./_stream_duplex');                                                                           // 16728\n                                                                                                                      // 16729\n  // Writable ctor is applied to Duplexes, though they're not                                                         // 16730\n  // instanceof Writable, they're instanceof Readable.                                                                // 16731\n  if (!(this instanceof Writable) && !(this instanceof Duplex))                                                       // 16732\n    return new Writable(options);                                                                                     // 16733\n                                                                                                                      // 16734\n  this._writableState = new WritableState(options, this);                                                             // 16735\n                                                                                                                      // 16736\n  // legacy.                                                                                                          // 16737\n  this.writable = true;                                                                                               // 16738\n                                                                                                                      // 16739\n  Stream.call(this);                                                                                                  // 16740\n}                                                                                                                     // 16741\n                                                                                                                      // 16742\n// Otherwise people can pipe Writable streams, which is just wrong.                                                   // 16743\nWritable.prototype.pipe = function() {                                                                                // 16744\n  this.emit('error', new Error('Cannot pipe. Not readable.'));                                                        // 16745\n};                                                                                                                    // 16746\n                                                                                                                      // 16747\n                                                                                                                      // 16748\nfunction writeAfterEnd(stream, state, cb) {                                                                           // 16749\n  var er = new Error('write after end');                                                                              // 16750\n  // TODO: defer error events consistently everywhere, not just the cb                                                // 16751\n  stream.emit('error', er);                                                                                           // 16752\n  process.nextTick(function() {                                                                                       // 16753\n    cb(er);                                                                                                           // 16754\n  });                                                                                                                 // 16755\n}                                                                                                                     // 16756\n                                                                                                                      // 16757\n// If we get something that is not a buffer, string, null, or undefined,                                              // 16758\n// and we're not in objectMode, then that's an error.                                                                 // 16759\n// Otherwise stream chunks are all considered to be of length=1, and the                                              // 16760\n// watermarks determine how many objects to keep in the buffer, rather than                                           // 16761\n// how many bytes or characters.                                                                                      // 16762\nfunction validChunk(stream, state, chunk, cb) {                                                                       // 16763\n  var valid = true;                                                                                                   // 16764\n  if (!util.isBuffer(chunk) &&                                                                                        // 16765\n      !util.isString(chunk) &&                                                                                        // 16766\n      !util.isNullOrUndefined(chunk) &&                                                                               // 16767\n      !state.objectMode) {                                                                                            // 16768\n    var er = new TypeError('Invalid non-string/buffer chunk');                                                        // 16769\n    stream.emit('error', er);                                                                                         // 16770\n    process.nextTick(function() {                                                                                     // 16771\n      cb(er);                                                                                                         // 16772\n    });                                                                                                               // 16773\n    valid = false;                                                                                                    // 16774\n  }                                                                                                                   // 16775\n  return valid;                                                                                                       // 16776\n}                                                                                                                     // 16777\n                                                                                                                      // 16778\nWritable.prototype.write = function(chunk, encoding, cb) {                                                            // 16779\n  var state = this._writableState;                                                                                    // 16780\n  var ret = false;                                                                                                    // 16781\n                                                                                                                      // 16782\n  if (util.isFunction(encoding)) {                                                                                    // 16783\n    cb = encoding;                                                                                                    // 16784\n    encoding = null;                                                                                                  // 16785\n  }                                                                                                                   // 16786\n                                                                                                                      // 16787\n  if (util.isBuffer(chunk))                                                                                           // 16788\n    encoding = 'buffer';                                                                                              // 16789\n  else if (!encoding)                                                                                                 // 16790\n    encoding = state.defaultEncoding;                                                                                 // 16791\n                                                                                                                      // 16792\n  if (!util.isFunction(cb))                                                                                           // 16793\n    cb = function() {};                                                                                               // 16794\n                                                                                                                      // 16795\n  if (state.ended)                                                                                                    // 16796\n    writeAfterEnd(this, state, cb);                                                                                   // 16797\n  else if (validChunk(this, state, chunk, cb)) {                                                                      // 16798\n    state.pendingcb++;                                                                                                // 16799\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);                                                            // 16800\n  }                                                                                                                   // 16801\n                                                                                                                      // 16802\n  return ret;                                                                                                         // 16803\n};                                                                                                                    // 16804\n                                                                                                                      // 16805\nWritable.prototype.cork = function() {                                                                                // 16806\n  var state = this._writableState;                                                                                    // 16807\n                                                                                                                      // 16808\n  state.corked++;                                                                                                     // 16809\n};                                                                                                                    // 16810\n                                                                                                                      // 16811\nWritable.prototype.uncork = function() {                                                                              // 16812\n  var state = this._writableState;                                                                                    // 16813\n                                                                                                                      // 16814\n  if (state.corked) {                                                                                                 // 16815\n    state.corked--;                                                                                                   // 16816\n                                                                                                                      // 16817\n    if (!state.writing &&                                                                                             // 16818\n        !state.corked &&                                                                                              // 16819\n        !state.finished &&                                                                                            // 16820\n        !state.bufferProcessing &&                                                                                    // 16821\n        state.buffer.length)                                                                                          // 16822\n      clearBuffer(this, state);                                                                                       // 16823\n  }                                                                                                                   // 16824\n};                                                                                                                    // 16825\n                                                                                                                      // 16826\nfunction decodeChunk(state, chunk, encoding) {                                                                        // 16827\n  if (!state.objectMode &&                                                                                            // 16828\n      state.decodeStrings !== false &&                                                                                // 16829\n      util.isString(chunk)) {                                                                                         // 16830\n    chunk = new Buffer(chunk, encoding);                                                                              // 16831\n  }                                                                                                                   // 16832\n  return chunk;                                                                                                       // 16833\n}                                                                                                                     // 16834\n                                                                                                                      // 16835\n// if we're already writing something, then just put this                                                             // 16836\n// in the queue, and wait our turn.  Otherwise, call _write                                                           // 16837\n// If we return false, then we need a drain event, so set that flag.                                                  // 16838\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {                                                          // 16839\n  chunk = decodeChunk(state, chunk, encoding);                                                                        // 16840\n  if (util.isBuffer(chunk))                                                                                           // 16841\n    encoding = 'buffer';                                                                                              // 16842\n  var len = state.objectMode ? 1 : chunk.length;                                                                      // 16843\n                                                                                                                      // 16844\n  state.length += len;                                                                                                // 16845\n                                                                                                                      // 16846\n  var ret = state.length < state.highWaterMark;                                                                       // 16847\n  // we must ensure that previous needDrain will not be reset to false.                                               // 16848\n  if (!ret)                                                                                                           // 16849\n    state.needDrain = true;                                                                                           // 16850\n                                                                                                                      // 16851\n  if (state.writing || state.corked)                                                                                  // 16852\n    state.buffer.push(new WriteReq(chunk, encoding, cb));                                                             // 16853\n  else                                                                                                                // 16854\n    doWrite(stream, state, false, len, chunk, encoding, cb);                                                          // 16855\n                                                                                                                      // 16856\n  return ret;                                                                                                         // 16857\n}                                                                                                                     // 16858\n                                                                                                                      // 16859\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {                                                   // 16860\n  state.writelen = len;                                                                                               // 16861\n  state.writecb = cb;                                                                                                 // 16862\n  state.writing = true;                                                                                               // 16863\n  state.sync = true;                                                                                                  // 16864\n  if (writev)                                                                                                         // 16865\n    stream._writev(chunk, state.onwrite);                                                                             // 16866\n  else                                                                                                                // 16867\n    stream._write(chunk, encoding, state.onwrite);                                                                    // 16868\n  state.sync = false;                                                                                                 // 16869\n}                                                                                                                     // 16870\n                                                                                                                      // 16871\nfunction onwriteError(stream, state, sync, er, cb) {                                                                  // 16872\n  if (sync)                                                                                                           // 16873\n    process.nextTick(function() {                                                                                     // 16874\n      state.pendingcb--;                                                                                              // 16875\n      cb(er);                                                                                                         // 16876\n    });                                                                                                               // 16877\n  else {                                                                                                              // 16878\n    state.pendingcb--;                                                                                                // 16879\n    cb(er);                                                                                                           // 16880\n  }                                                                                                                   // 16881\n                                                                                                                      // 16882\n  stream._writableState.errorEmitted = true;                                                                          // 16883\n  stream.emit('error', er);                                                                                           // 16884\n}                                                                                                                     // 16885\n                                                                                                                      // 16886\nfunction onwriteStateUpdate(state) {                                                                                  // 16887\n  state.writing = false;                                                                                              // 16888\n  state.writecb = null;                                                                                               // 16889\n  state.length -= state.writelen;                                                                                     // 16890\n  state.writelen = 0;                                                                                                 // 16891\n}                                                                                                                     // 16892\n                                                                                                                      // 16893\nfunction onwrite(stream, er) {                                                                                        // 16894\n  var state = stream._writableState;                                                                                  // 16895\n  var sync = state.sync;                                                                                              // 16896\n  var cb = state.writecb;                                                                                             // 16897\n                                                                                                                      // 16898\n  onwriteStateUpdate(state);                                                                                          // 16899\n                                                                                                                      // 16900\n  if (er)                                                                                                             // 16901\n    onwriteError(stream, state, sync, er, cb);                                                                        // 16902\n  else {                                                                                                              // 16903\n    // Check if we're actually ready to finish, but don't emit yet                                                    // 16904\n    var finished = needFinish(stream, state);                                                                         // 16905\n                                                                                                                      // 16906\n    if (!finished &&                                                                                                  // 16907\n        !state.corked &&                                                                                              // 16908\n        !state.bufferProcessing &&                                                                                    // 16909\n        state.buffer.length) {                                                                                        // 16910\n      clearBuffer(stream, state);                                                                                     // 16911\n    }                                                                                                                 // 16912\n                                                                                                                      // 16913\n    if (sync) {                                                                                                       // 16914\n      process.nextTick(function() {                                                                                   // 16915\n        afterWrite(stream, state, finished, cb);                                                                      // 16916\n      });                                                                                                             // 16917\n    } else {                                                                                                          // 16918\n      afterWrite(stream, state, finished, cb);                                                                        // 16919\n    }                                                                                                                 // 16920\n  }                                                                                                                   // 16921\n}                                                                                                                     // 16922\n                                                                                                                      // 16923\nfunction afterWrite(stream, state, finished, cb) {                                                                    // 16924\n  if (!finished)                                                                                                      // 16925\n    onwriteDrain(stream, state);                                                                                      // 16926\n  state.pendingcb--;                                                                                                  // 16927\n  cb();                                                                                                               // 16928\n  finishMaybe(stream, state);                                                                                         // 16929\n}                                                                                                                     // 16930\n                                                                                                                      // 16931\n// Must force callback to be called on nextTick, so that we don't                                                     // 16932\n// emit 'drain' before the write() consumer gets the 'false' return                                                   // 16933\n// value, and has a chance to attach a 'drain' listener.                                                              // 16934\nfunction onwriteDrain(stream, state) {                                                                                // 16935\n  if (state.length === 0 && state.needDrain) {                                                                        // 16936\n    state.needDrain = false;                                                                                          // 16937\n    stream.emit('drain');                                                                                             // 16938\n  }                                                                                                                   // 16939\n}                                                                                                                     // 16940\n                                                                                                                      // 16941\n                                                                                                                      // 16942\n// if there's something in the buffer waiting, then process it                                                        // 16943\nfunction clearBuffer(stream, state) {                                                                                 // 16944\n  state.bufferProcessing = true;                                                                                      // 16945\n                                                                                                                      // 16946\n  if (stream._writev && state.buffer.length > 1) {                                                                    // 16947\n    // Fast case, write everything using _writev()                                                                    // 16948\n    var cbs = [];                                                                                                     // 16949\n    for (var c = 0; c < state.buffer.length; c++)                                                                     // 16950\n      cbs.push(state.buffer[c].callback);                                                                             // 16951\n                                                                                                                      // 16952\n    // count the one we are adding, as well.                                                                          // 16953\n    // TODO(isaacs) clean this up                                                                                     // 16954\n    state.pendingcb++;                                                                                                // 16955\n    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {                                      // 16956\n      for (var i = 0; i < cbs.length; i++) {                                                                          // 16957\n        state.pendingcb--;                                                                                            // 16958\n        cbs[i](err);                                                                                                  // 16959\n      }                                                                                                               // 16960\n    });                                                                                                               // 16961\n                                                                                                                      // 16962\n    // Clear buffer                                                                                                   // 16963\n    state.buffer = [];                                                                                                // 16964\n  } else {                                                                                                            // 16965\n    // Slow case, write chunks one-by-one                                                                             // 16966\n    for (var c = 0; c < state.buffer.length; c++) {                                                                   // 16967\n      var entry = state.buffer[c];                                                                                    // 16968\n      var chunk = entry.chunk;                                                                                        // 16969\n      var encoding = entry.encoding;                                                                                  // 16970\n      var cb = entry.callback;                                                                                        // 16971\n      var len = state.objectMode ? 1 : chunk.length;                                                                  // 16972\n                                                                                                                      // 16973\n      doWrite(stream, state, false, len, chunk, encoding, cb);                                                        // 16974\n                                                                                                                      // 16975\n      // if we didn't call the onwrite immediately, then                                                              // 16976\n      // it means that we need to wait until it does.                                                                 // 16977\n      // also, that means that the chunk and cb are currently                                                         // 16978\n      // being processed, so move the buffer counter past them.                                                       // 16979\n      if (state.writing) {                                                                                            // 16980\n        c++;                                                                                                          // 16981\n        break;                                                                                                        // 16982\n      }                                                                                                               // 16983\n    }                                                                                                                 // 16984\n                                                                                                                      // 16985\n    if (c < state.buffer.length)                                                                                      // 16986\n      state.buffer = state.buffer.slice(c);                                                                           // 16987\n    else                                                                                                              // 16988\n      state.buffer.length = 0;                                                                                        // 16989\n  }                                                                                                                   // 16990\n                                                                                                                      // 16991\n  state.bufferProcessing = false;                                                                                     // 16992\n}                                                                                                                     // 16993\n                                                                                                                      // 16994\nWritable.prototype._write = function(chunk, encoding, cb) {                                                           // 16995\n  cb(new Error('not implemented'));                                                                                   // 16996\n                                                                                                                      // 16997\n};                                                                                                                    // 16998\n                                                                                                                      // 16999\nWritable.prototype._writev = null;                                                                                    // 17000\n                                                                                                                      // 17001\nWritable.prototype.end = function(chunk, encoding, cb) {                                                              // 17002\n  var state = this._writableState;                                                                                    // 17003\n                                                                                                                      // 17004\n  if (util.isFunction(chunk)) {                                                                                       // 17005\n    cb = chunk;                                                                                                       // 17006\n    chunk = null;                                                                                                     // 17007\n    encoding = null;                                                                                                  // 17008\n  } else if (util.isFunction(encoding)) {                                                                             // 17009\n    cb = encoding;                                                                                                    // 17010\n    encoding = null;                                                                                                  // 17011\n  }                                                                                                                   // 17012\n                                                                                                                      // 17013\n  if (!util.isNullOrUndefined(chunk))                                                                                 // 17014\n    this.write(chunk, encoding);                                                                                      // 17015\n                                                                                                                      // 17016\n  // .end() fully uncorks                                                                                             // 17017\n  if (state.corked) {                                                                                                 // 17018\n    state.corked = 1;                                                                                                 // 17019\n    this.uncork();                                                                                                    // 17020\n  }                                                                                                                   // 17021\n                                                                                                                      // 17022\n  // ignore unnecessary end() calls.                                                                                  // 17023\n  if (!state.ending && !state.finished)                                                                               // 17024\n    endWritable(this, state, cb);                                                                                     // 17025\n};                                                                                                                    // 17026\n                                                                                                                      // 17027\n                                                                                                                      // 17028\nfunction needFinish(stream, state) {                                                                                  // 17029\n  return (state.ending &&                                                                                             // 17030\n          state.length === 0 &&                                                                                       // 17031\n          !state.finished &&                                                                                          // 17032\n          !state.writing);                                                                                            // 17033\n}                                                                                                                     // 17034\n                                                                                                                      // 17035\nfunction prefinish(stream, state) {                                                                                   // 17036\n  if (!state.prefinished) {                                                                                           // 17037\n    state.prefinished = true;                                                                                         // 17038\n    stream.emit('prefinish');                                                                                         // 17039\n  }                                                                                                                   // 17040\n}                                                                                                                     // 17041\n                                                                                                                      // 17042\nfunction finishMaybe(stream, state) {                                                                                 // 17043\n  var need = needFinish(stream, state);                                                                               // 17044\n  if (need) {                                                                                                         // 17045\n    if (state.pendingcb === 0) {                                                                                      // 17046\n      prefinish(stream, state);                                                                                       // 17047\n      state.finished = true;                                                                                          // 17048\n      stream.emit('finish');                                                                                          // 17049\n    } else                                                                                                            // 17050\n      prefinish(stream, state);                                                                                       // 17051\n  }                                                                                                                   // 17052\n  return need;                                                                                                        // 17053\n}                                                                                                                     // 17054\n                                                                                                                      // 17055\nfunction endWritable(stream, state, cb) {                                                                             // 17056\n  state.ending = true;                                                                                                // 17057\n  finishMaybe(stream, state);                                                                                         // 17058\n  if (cb) {                                                                                                           // 17059\n    if (state.finished)                                                                                               // 17060\n      process.nextTick(cb);                                                                                           // 17061\n    else                                                                                                              // 17062\n      stream.once('finish', cb);                                                                                      // 17063\n  }                                                                                                                   // 17064\n  state.ended = true;                                                                                                 // 17065\n}                                                                                                                     // 17066\n                                                                                                                      // 17067\n}).call(this,require('_process'))                                                                                     // 17068\n                                                                                                                      // 17069\n},{\"./_stream_duplex\":148,\"_process\":146,\"buffer\":2,\"core-util-is\":153,\"inherits\":144,\"stream\":158}],153:[function(require,module,exports){\n(function (Buffer){                                                                                                   // 17071\n// Copyright Joyent, Inc. and other Node contributors.                                                                // 17072\n//                                                                                                                    // 17073\n// Permission is hereby granted, free of charge, to any person obtaining a                                            // 17074\n// copy of this software and associated documentation files (the                                                      // 17075\n// \"Software\"), to deal in the Software without restriction, including                                                // 17076\n// without limitation the rights to use, copy, modify, merge, publish,                                                // 17077\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 17078\n// persons to whom the Software is furnished to do so, subject to the                                                 // 17079\n// following conditions:                                                                                              // 17080\n//                                                                                                                    // 17081\n// The above copyright notice and this permission notice shall be included                                            // 17082\n// in all copies or substantial portions of the Software.                                                             // 17083\n//                                                                                                                    // 17084\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 17085\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 17086\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 17087\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 17088\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 17089\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 17090\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 17091\n                                                                                                                      // 17092\n// NOTE: These type checking functions intentionally don't use `instanceof`                                           // 17093\n// because it is fragile and can be easily faked with `Object.create()`.                                              // 17094\nfunction isArray(ar) {                                                                                                // 17095\n  return Array.isArray(ar);                                                                                           // 17096\n}                                                                                                                     // 17097\nexports.isArray = isArray;                                                                                            // 17098\n                                                                                                                      // 17099\nfunction isBoolean(arg) {                                                                                             // 17100\n  return typeof arg === 'boolean';                                                                                    // 17101\n}                                                                                                                     // 17102\nexports.isBoolean = isBoolean;                                                                                        // 17103\n                                                                                                                      // 17104\nfunction isNull(arg) {                                                                                                // 17105\n  return arg === null;                                                                                                // 17106\n}                                                                                                                     // 17107\nexports.isNull = isNull;                                                                                              // 17108\n                                                                                                                      // 17109\nfunction isNullOrUndefined(arg) {                                                                                     // 17110\n  return arg == null;                                                                                                 // 17111\n}                                                                                                                     // 17112\nexports.isNullOrUndefined = isNullOrUndefined;                                                                        // 17113\n                                                                                                                      // 17114\nfunction isNumber(arg) {                                                                                              // 17115\n  return typeof arg === 'number';                                                                                     // 17116\n}                                                                                                                     // 17117\nexports.isNumber = isNumber;                                                                                          // 17118\n                                                                                                                      // 17119\nfunction isString(arg) {                                                                                              // 17120\n  return typeof arg === 'string';                                                                                     // 17121\n}                                                                                                                     // 17122\nexports.isString = isString;                                                                                          // 17123\n                                                                                                                      // 17124\nfunction isSymbol(arg) {                                                                                              // 17125\n  return typeof arg === 'symbol';                                                                                     // 17126\n}                                                                                                                     // 17127\nexports.isSymbol = isSymbol;                                                                                          // 17128\n                                                                                                                      // 17129\nfunction isUndefined(arg) {                                                                                           // 17130\n  return arg === void 0;                                                                                              // 17131\n}                                                                                                                     // 17132\nexports.isUndefined = isUndefined;                                                                                    // 17133\n                                                                                                                      // 17134\nfunction isRegExp(re) {                                                                                               // 17135\n  return isObject(re) && objectToString(re) === '[object RegExp]';                                                    // 17136\n}                                                                                                                     // 17137\nexports.isRegExp = isRegExp;                                                                                          // 17138\n                                                                                                                      // 17139\nfunction isObject(arg) {                                                                                              // 17140\n  return typeof arg === 'object' && arg !== null;                                                                     // 17141\n}                                                                                                                     // 17142\nexports.isObject = isObject;                                                                                          // 17143\n                                                                                                                      // 17144\nfunction isDate(d) {                                                                                                  // 17145\n  return isObject(d) && objectToString(d) === '[object Date]';                                                        // 17146\n}                                                                                                                     // 17147\nexports.isDate = isDate;                                                                                              // 17148\n                                                                                                                      // 17149\nfunction isError(e) {                                                                                                 // 17150\n  return isObject(e) &&                                                                                               // 17151\n      (objectToString(e) === '[object Error]' || e instanceof Error);                                                 // 17152\n}                                                                                                                     // 17153\nexports.isError = isError;                                                                                            // 17154\n                                                                                                                      // 17155\nfunction isFunction(arg) {                                                                                            // 17156\n  return typeof arg === 'function';                                                                                   // 17157\n}                                                                                                                     // 17158\nexports.isFunction = isFunction;                                                                                      // 17159\n                                                                                                                      // 17160\nfunction isPrimitive(arg) {                                                                                           // 17161\n  return arg === null ||                                                                                              // 17162\n         typeof arg === 'boolean' ||                                                                                  // 17163\n         typeof arg === 'number' ||                                                                                   // 17164\n         typeof arg === 'string' ||                                                                                   // 17165\n         typeof arg === 'symbol' ||  // ES6 symbol                                                                    // 17166\n         typeof arg === 'undefined';                                                                                  // 17167\n}                                                                                                                     // 17168\nexports.isPrimitive = isPrimitive;                                                                                    // 17169\n                                                                                                                      // 17170\nfunction isBuffer(arg) {                                                                                              // 17171\n  return Buffer.isBuffer(arg);                                                                                        // 17172\n}                                                                                                                     // 17173\nexports.isBuffer = isBuffer;                                                                                          // 17174\n                                                                                                                      // 17175\nfunction objectToString(o) {                                                                                          // 17176\n  return Object.prototype.toString.call(o);                                                                           // 17177\n}                                                                                                                     // 17178\n}).call(this,require(\"buffer\").Buffer)                                                                                // 17179\n                                                                                                                      // 17180\n},{\"buffer\":2}],154:[function(require,module,exports){                                                                // 17181\nmodule.exports = require(\"./lib/_stream_passthrough.js\")                                                              // 17182\n                                                                                                                      // 17183\n},{\"./lib/_stream_passthrough.js\":149}],155:[function(require,module,exports){                                        // 17184\nexports = module.exports = require('./lib/_stream_readable.js');                                                      // 17185\nexports.Stream = require('stream');                                                                                   // 17186\nexports.Readable = exports;                                                                                           // 17187\nexports.Writable = require('./lib/_stream_writable.js');                                                              // 17188\nexports.Duplex = require('./lib/_stream_duplex.js');                                                                  // 17189\nexports.Transform = require('./lib/_stream_transform.js');                                                            // 17190\nexports.PassThrough = require('./lib/_stream_passthrough.js');                                                        // 17191\n                                                                                                                      // 17192\n},{\"./lib/_stream_duplex.js\":148,\"./lib/_stream_passthrough.js\":149,\"./lib/_stream_readable.js\":150,\"./lib/_stream_transform.js\":151,\"./lib/_stream_writable.js\":152,\"stream\":158}],156:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_transform.js\")                                                                // 17194\n                                                                                                                      // 17195\n},{\"./lib/_stream_transform.js\":151}],157:[function(require,module,exports){                                          // 17196\nmodule.exports = require(\"./lib/_stream_writable.js\")                                                                 // 17197\n                                                                                                                      // 17198\n},{\"./lib/_stream_writable.js\":152}],158:[function(require,module,exports){                                           // 17199\n// Copyright Joyent, Inc. and other Node contributors.                                                                // 17200\n//                                                                                                                    // 17201\n// Permission is hereby granted, free of charge, to any person obtaining a                                            // 17202\n// copy of this software and associated documentation files (the                                                      // 17203\n// \"Software\"), to deal in the Software without restriction, including                                                // 17204\n// without limitation the rights to use, copy, modify, merge, publish,                                                // 17205\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 17206\n// persons to whom the Software is furnished to do so, subject to the                                                 // 17207\n// following conditions:                                                                                              // 17208\n//                                                                                                                    // 17209\n// The above copyright notice and this permission notice shall be included                                            // 17210\n// in all copies or substantial portions of the Software.                                                             // 17211\n//                                                                                                                    // 17212\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 17213\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 17214\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 17215\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 17216\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 17217\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 17218\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 17219\n                                                                                                                      // 17220\nmodule.exports = Stream;                                                                                              // 17221\n                                                                                                                      // 17222\nvar EE = require('events').EventEmitter;                                                                              // 17223\nvar inherits = require('inherits');                                                                                   // 17224\n                                                                                                                      // 17225\ninherits(Stream, EE);                                                                                                 // 17226\nStream.Readable = require('readable-stream/readable.js');                                                             // 17227\nStream.Writable = require('readable-stream/writable.js');                                                             // 17228\nStream.Duplex = require('readable-stream/duplex.js');                                                                 // 17229\nStream.Transform = require('readable-stream/transform.js');                                                           // 17230\nStream.PassThrough = require('readable-stream/passthrough.js');                                                       // 17231\n                                                                                                                      // 17232\n// Backwards-compat with node 0.4.x                                                                                   // 17233\nStream.Stream = Stream;                                                                                               // 17234\n                                                                                                                      // 17235\n                                                                                                                      // 17236\n                                                                                                                      // 17237\n// old-style streams.  Note that the pipe method (the only relevant                                                   // 17238\n// part of this class) is overridden in the Readable class.                                                           // 17239\n                                                                                                                      // 17240\nfunction Stream() {                                                                                                   // 17241\n  EE.call(this);                                                                                                      // 17242\n}                                                                                                                     // 17243\n                                                                                                                      // 17244\nStream.prototype.pipe = function(dest, options) {                                                                     // 17245\n  var source = this;                                                                                                  // 17246\n                                                                                                                      // 17247\n  function ondata(chunk) {                                                                                            // 17248\n    if (dest.writable) {                                                                                              // 17249\n      if (false === dest.write(chunk) && source.pause) {                                                              // 17250\n        source.pause();                                                                                               // 17251\n      }                                                                                                               // 17252\n    }                                                                                                                 // 17253\n  }                                                                                                                   // 17254\n                                                                                                                      // 17255\n  source.on('data', ondata);                                                                                          // 17256\n                                                                                                                      // 17257\n  function ondrain() {                                                                                                // 17258\n    if (source.readable && source.resume) {                                                                           // 17259\n      source.resume();                                                                                                // 17260\n    }                                                                                                                 // 17261\n  }                                                                                                                   // 17262\n                                                                                                                      // 17263\n  dest.on('drain', ondrain);                                                                                          // 17264\n                                                                                                                      // 17265\n  // If the 'end' option is not supplied, dest.end() will be called when                                              // 17266\n  // source gets the 'end' or 'close' events.  Only dest.end() once.                                                  // 17267\n  if (!dest._isStdio && (!options || options.end !== false)) {                                                        // 17268\n    source.on('end', onend);                                                                                          // 17269\n    source.on('close', onclose);                                                                                      // 17270\n  }                                                                                                                   // 17271\n                                                                                                                      // 17272\n  var didOnEnd = false;                                                                                               // 17273\n  function onend() {                                                                                                  // 17274\n    if (didOnEnd) return;                                                                                             // 17275\n    didOnEnd = true;                                                                                                  // 17276\n                                                                                                                      // 17277\n    dest.end();                                                                                                       // 17278\n  }                                                                                                                   // 17279\n                                                                                                                      // 17280\n                                                                                                                      // 17281\n  function onclose() {                                                                                                // 17282\n    if (didOnEnd) return;                                                                                             // 17283\n    didOnEnd = true;                                                                                                  // 17284\n                                                                                                                      // 17285\n    if (typeof dest.destroy === 'function') dest.destroy();                                                           // 17286\n  }                                                                                                                   // 17287\n                                                                                                                      // 17288\n  // don't leave dangling pipes when there are errors.                                                                // 17289\n  function onerror(er) {                                                                                              // 17290\n    cleanup();                                                                                                        // 17291\n    if (EE.listenerCount(this, 'error') === 0) {                                                                      // 17292\n      throw er; // Unhandled stream error in pipe.                                                                    // 17293\n    }                                                                                                                 // 17294\n  }                                                                                                                   // 17295\n                                                                                                                      // 17296\n  source.on('error', onerror);                                                                                        // 17297\n  dest.on('error', onerror);                                                                                          // 17298\n                                                                                                                      // 17299\n  // remove all the event listeners that were added.                                                                  // 17300\n  function cleanup() {                                                                                                // 17301\n    source.removeListener('data', ondata);                                                                            // 17302\n    dest.removeListener('drain', ondrain);                                                                            // 17303\n                                                                                                                      // 17304\n    source.removeListener('end', onend);                                                                              // 17305\n    source.removeListener('close', onclose);                                                                          // 17306\n                                                                                                                      // 17307\n    source.removeListener('error', onerror);                                                                          // 17308\n    dest.removeListener('error', onerror);                                                                            // 17309\n                                                                                                                      // 17310\n    source.removeListener('end', cleanup);                                                                            // 17311\n    source.removeListener('close', cleanup);                                                                          // 17312\n                                                                                                                      // 17313\n    dest.removeListener('close', cleanup);                                                                            // 17314\n  }                                                                                                                   // 17315\n                                                                                                                      // 17316\n  source.on('end', cleanup);                                                                                          // 17317\n  source.on('close', cleanup);                                                                                        // 17318\n                                                                                                                      // 17319\n  dest.on('close', cleanup);                                                                                          // 17320\n                                                                                                                      // 17321\n  dest.emit('pipe', source);                                                                                          // 17322\n                                                                                                                      // 17323\n  // Allow for unix-like usage: A.pipe(B).pipe(C)                                                                     // 17324\n  return dest;                                                                                                        // 17325\n};                                                                                                                    // 17326\n                                                                                                                      // 17327\n},{\"events\":143,\"inherits\":144,\"readable-stream/duplex.js\":147,\"readable-stream/passthrough.js\":154,\"readable-stream/readable.js\":155,\"readable-stream/transform.js\":156,\"readable-stream/writable.js\":157}],159:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.                                                                // 17329\n//                                                                                                                    // 17330\n// Permission is hereby granted, free of charge, to any person obtaining a                                            // 17331\n// copy of this software and associated documentation files (the                                                      // 17332\n// \"Software\"), to deal in the Software without restriction, including                                                // 17333\n// without limitation the rights to use, copy, modify, merge, publish,                                                // 17334\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 17335\n// persons to whom the Software is furnished to do so, subject to the                                                 // 17336\n// following conditions:                                                                                              // 17337\n//                                                                                                                    // 17338\n// The above copyright notice and this permission notice shall be included                                            // 17339\n// in all copies or substantial portions of the Software.                                                             // 17340\n//                                                                                                                    // 17341\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 17342\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 17343\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 17344\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 17345\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 17346\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 17347\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 17348\n                                                                                                                      // 17349\nvar Buffer = require('buffer').Buffer;                                                                                // 17350\n                                                                                                                      // 17351\nvar isBufferEncoding = Buffer.isEncoding                                                                              // 17352\n  || function(encoding) {                                                                                             // 17353\n       switch (encoding && encoding.toLowerCase()) {                                                                  // 17354\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;                                                                                       // 17356\n       }                                                                                                              // 17357\n     }                                                                                                                // 17358\n                                                                                                                      // 17359\n                                                                                                                      // 17360\nfunction assertEncoding(encoding) {                                                                                   // 17361\n  if (encoding && !isBufferEncoding(encoding)) {                                                                      // 17362\n    throw new Error('Unknown encoding: ' + encoding);                                                                 // 17363\n  }                                                                                                                   // 17364\n}                                                                                                                     // 17365\n                                                                                                                      // 17366\n// StringDecoder provides an interface for efficiently splitting a series of                                          // 17367\n// buffers into a series of JS strings without breaking apart multi-byte                                              // 17368\n// characters. CESU-8 is handled as part of the UTF-8 encoding.                                                       // 17369\n//                                                                                                                    // 17370\n// @TODO Handling all encodings inside a single object makes it very difficult                                        // 17371\n// to reason about this code, so it should be split up in the future.                                                 // 17372\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code                                       // 17373\n// points as used by CESU-8.                                                                                          // 17374\nvar StringDecoder = exports.StringDecoder = function(encoding) {                                                      // 17375\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');                                             // 17376\n  assertEncoding(encoding);                                                                                           // 17377\n  switch (this.encoding) {                                                                                            // 17378\n    case 'utf8':                                                                                                      // 17379\n      // CESU-8 represents each of Surrogate Pair by 3-bytes                                                          // 17380\n      this.surrogateSize = 3;                                                                                         // 17381\n      break;                                                                                                          // 17382\n    case 'ucs2':                                                                                                      // 17383\n    case 'utf16le':                                                                                                   // 17384\n      // UTF-16 represents each of Surrogate Pair by 2-bytes                                                          // 17385\n      this.surrogateSize = 2;                                                                                         // 17386\n      this.detectIncompleteChar = utf16DetectIncompleteChar;                                                          // 17387\n      break;                                                                                                          // 17388\n    case 'base64':                                                                                                    // 17389\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.                                                   // 17390\n      this.surrogateSize = 3;                                                                                         // 17391\n      this.detectIncompleteChar = base64DetectIncompleteChar;                                                         // 17392\n      break;                                                                                                          // 17393\n    default:                                                                                                          // 17394\n      this.write = passThroughWrite;                                                                                  // 17395\n      return;                                                                                                         // 17396\n  }                                                                                                                   // 17397\n                                                                                                                      // 17398\n  // Enough space to store all bytes of a single character. UTF-8 needs 4                                             // 17399\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).                                                   // 17400\n  this.charBuffer = new Buffer(6);                                                                                    // 17401\n  // Number of bytes received for the current incomplete multi-byte character.                                        // 17402\n  this.charReceived = 0;                                                                                              // 17403\n  // Number of bytes expected for the current incomplete multi-byte character.                                        // 17404\n  this.charLength = 0;                                                                                                // 17405\n};                                                                                                                    // 17406\n                                                                                                                      // 17407\n                                                                                                                      // 17408\n// write decodes the given buffer and returns it as JS string that is                                                 // 17409\n// guaranteed to not contain any partial multi-byte characters. Any partial                                           // 17410\n// character found at the end of the buffer is buffered up, and will be                                               // 17411\n// returned when calling write again with the remaining bytes.                                                        // 17412\n//                                                                                                                    // 17413\n// Note: Converting a Buffer containing an orphan surrogate to a String                                               // 17414\n// currently works, but converting a String to a Buffer (via `new Buffer`, or                                         // 17415\n// Buffer#write) will replace incomplete surrogates with the unicode                                                  // 17416\n// replacement character. See https://codereview.chromium.org/121173009/ .                                            // 17417\nStringDecoder.prototype.write = function(buffer) {                                                                    // 17418\n  var charStr = '';                                                                                                   // 17419\n  // if our last write ended with an incomplete multibyte character                                                   // 17420\n  while (this.charLength) {                                                                                           // 17421\n    // determine how many remaining bytes this buffer has to offer for this char                                      // 17422\n    var available = (buffer.length >= this.charLength - this.charReceived) ?                                          // 17423\n        this.charLength - this.charReceived :                                                                         // 17424\n        buffer.length;                                                                                                // 17425\n                                                                                                                      // 17426\n    // add the new bytes to the char buffer                                                                           // 17427\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);                                                    // 17428\n    this.charReceived += available;                                                                                   // 17429\n                                                                                                                      // 17430\n    if (this.charReceived < this.charLength) {                                                                        // 17431\n      // still not enough chars in this buffer? wait for more ...                                                     // 17432\n      return '';                                                                                                      // 17433\n    }                                                                                                                 // 17434\n                                                                                                                      // 17435\n    // remove bytes belonging to the current character from the buffer                                                // 17436\n    buffer = buffer.slice(available, buffer.length);                                                                  // 17437\n                                                                                                                      // 17438\n    // get the character that was split                                                                               // 17439\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);                                      // 17440\n                                                                                                                      // 17441\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character                                            // 17442\n    var charCode = charStr.charCodeAt(charStr.length - 1);                                                            // 17443\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {                                                                   // 17444\n      this.charLength += this.surrogateSize;                                                                          // 17445\n      charStr = '';                                                                                                   // 17446\n      continue;                                                                                                       // 17447\n    }                                                                                                                 // 17448\n    this.charReceived = this.charLength = 0;                                                                          // 17449\n                                                                                                                      // 17450\n    // if there are no more bytes in this buffer, just emit our char                                                  // 17451\n    if (buffer.length === 0) {                                                                                        // 17452\n      return charStr;                                                                                                 // 17453\n    }                                                                                                                 // 17454\n    break;                                                                                                            // 17455\n  }                                                                                                                   // 17456\n                                                                                                                      // 17457\n  // determine and set charLength / charReceived                                                                      // 17458\n  this.detectIncompleteChar(buffer);                                                                                  // 17459\n                                                                                                                      // 17460\n  var end = buffer.length;                                                                                            // 17461\n  if (this.charLength) {                                                                                              // 17462\n    // buffer the incomplete character bytes we got                                                                   // 17463\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);                                          // 17464\n    end -= this.charReceived;                                                                                         // 17465\n  }                                                                                                                   // 17466\n                                                                                                                      // 17467\n  charStr += buffer.toString(this.encoding, 0, end);                                                                  // 17468\n                                                                                                                      // 17469\n  var end = charStr.length - 1;                                                                                       // 17470\n  var charCode = charStr.charCodeAt(end);                                                                             // 17471\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character                                              // 17472\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {                                                                     // 17473\n    var size = this.surrogateSize;                                                                                    // 17474\n    this.charLength += size;                                                                                          // 17475\n    this.charReceived += size;                                                                                        // 17476\n    this.charBuffer.copy(this.charBuffer, size, 0, size);                                                             // 17477\n    buffer.copy(this.charBuffer, 0, 0, size);                                                                         // 17478\n    return charStr.substring(0, end);                                                                                 // 17479\n  }                                                                                                                   // 17480\n                                                                                                                      // 17481\n  // or just emit the charStr                                                                                         // 17482\n  return charStr;                                                                                                     // 17483\n};                                                                                                                    // 17484\n                                                                                                                      // 17485\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at                                       // 17486\n// the end of the given buffer. If so, it sets this.charLength to the byte                                            // 17487\n// length that character, and sets this.charReceived to the number of bytes                                           // 17488\n// that are available for this character.                                                                             // 17489\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {                                                     // 17490\n  // determine how many bytes we have to check at the end of this buffer                                              // 17491\n  var i = (buffer.length >= 3) ? 3 : buffer.length;                                                                   // 17492\n                                                                                                                      // 17493\n  // Figure out if one of the last i bytes of our buffer announces an                                                 // 17494\n  // incomplete char.                                                                                                 // 17495\n  for (; i > 0; i--) {                                                                                                // 17496\n    var c = buffer[buffer.length - i];                                                                                // 17497\n                                                                                                                      // 17498\n    // See http://en.wikipedia.org/wiki/UTF-8#Description                                                             // 17499\n                                                                                                                      // 17500\n    // 110XXXXX                                                                                                       // 17501\n    if (i == 1 && c >> 5 == 0x06) {                                                                                   // 17502\n      this.charLength = 2;                                                                                            // 17503\n      break;                                                                                                          // 17504\n    }                                                                                                                 // 17505\n                                                                                                                      // 17506\n    // 1110XXXX                                                                                                       // 17507\n    if (i <= 2 && c >> 4 == 0x0E) {                                                                                   // 17508\n      this.charLength = 3;                                                                                            // 17509\n      break;                                                                                                          // 17510\n    }                                                                                                                 // 17511\n                                                                                                                      // 17512\n    // 11110XXX                                                                                                       // 17513\n    if (i <= 3 && c >> 3 == 0x1E) {                                                                                   // 17514\n      this.charLength = 4;                                                                                            // 17515\n      break;                                                                                                          // 17516\n    }                                                                                                                 // 17517\n  }                                                                                                                   // 17518\n  this.charReceived = i;                                                                                              // 17519\n};                                                                                                                    // 17520\n                                                                                                                      // 17521\nStringDecoder.prototype.end = function(buffer) {                                                                      // 17522\n  var res = '';                                                                                                       // 17523\n  if (buffer && buffer.length)                                                                                        // 17524\n    res = this.write(buffer);                                                                                         // 17525\n                                                                                                                      // 17526\n  if (this.charReceived) {                                                                                            // 17527\n    var cr = this.charReceived;                                                                                       // 17528\n    var buf = this.charBuffer;                                                                                        // 17529\n    var enc = this.encoding;                                                                                          // 17530\n    res += buf.slice(0, cr).toString(enc);                                                                            // 17531\n  }                                                                                                                   // 17532\n                                                                                                                      // 17533\n  return res;                                                                                                         // 17534\n};                                                                                                                    // 17535\n                                                                                                                      // 17536\nfunction passThroughWrite(buffer) {                                                                                   // 17537\n  return buffer.toString(this.encoding);                                                                              // 17538\n}                                                                                                                     // 17539\n                                                                                                                      // 17540\nfunction utf16DetectIncompleteChar(buffer) {                                                                          // 17541\n  this.charReceived = buffer.length % 2;                                                                              // 17542\n  this.charLength = this.charReceived ? 2 : 0;                                                                        // 17543\n}                                                                                                                     // 17544\n                                                                                                                      // 17545\nfunction base64DetectIncompleteChar(buffer) {                                                                         // 17546\n  this.charReceived = buffer.length % 3;                                                                              // 17547\n  this.charLength = this.charReceived ? 3 : 0;                                                                        // 17548\n}                                                                                                                     // 17549\n                                                                                                                      // 17550\n},{\"buffer\":2}],160:[function(require,module,exports){                                                                // 17551\nvar indexOf = require('indexof');                                                                                     // 17552\n                                                                                                                      // 17553\nvar Object_keys = function (obj) {                                                                                    // 17554\n    if (Object.keys) return Object.keys(obj)                                                                          // 17555\n    else {                                                                                                            // 17556\n        var res = [];                                                                                                 // 17557\n        for (var key in obj) res.push(key)                                                                            // 17558\n        return res;                                                                                                   // 17559\n    }                                                                                                                 // 17560\n};                                                                                                                    // 17561\n                                                                                                                      // 17562\nvar forEach = function (xs, fn) {                                                                                     // 17563\n    if (xs.forEach) return xs.forEach(fn)                                                                             // 17564\n    else for (var i = 0; i < xs.length; i++) {                                                                        // 17565\n        fn(xs[i], i, xs);                                                                                             // 17566\n    }                                                                                                                 // 17567\n};                                                                                                                    // 17568\n                                                                                                                      // 17569\nvar defineProp = (function() {                                                                                        // 17570\n    try {                                                                                                             // 17571\n        Object.defineProperty({}, '_', {});                                                                           // 17572\n        return function(obj, name, value) {                                                                           // 17573\n            Object.defineProperty(obj, name, {                                                                        // 17574\n                writable: true,                                                                                       // 17575\n                enumerable: false,                                                                                    // 17576\n                configurable: true,                                                                                   // 17577\n                value: value                                                                                          // 17578\n            })                                                                                                        // 17579\n        };                                                                                                            // 17580\n    } catch(e) {                                                                                                      // 17581\n        return function(obj, name, value) {                                                                           // 17582\n            obj[name] = value;                                                                                        // 17583\n        };                                                                                                            // 17584\n    }                                                                                                                 // 17585\n}());                                                                                                                 // 17586\n                                                                                                                      // 17587\nvar globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',                                          // 17588\n'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',                                                  // 17589\n'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',                                         // 17590\n'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',                                       // 17591\n'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];                                      // 17592\n                                                                                                                      // 17593\nfunction Context() {}                                                                                                 // 17594\nContext.prototype = {};                                                                                               // 17595\n                                                                                                                      // 17596\nvar Script = exports.Script = function NodeScript (code) {                                                            // 17597\n    if (!(this instanceof Script)) return new Script(code);                                                           // 17598\n    this.code = code;                                                                                                 // 17599\n};                                                                                                                    // 17600\n                                                                                                                      // 17601\nScript.prototype.runInContext = function (context) {                                                                  // 17602\n    if (!(context instanceof Context)) {                                                                              // 17603\n        throw new TypeError(\"needs a 'context' argument.\");                                                           // 17604\n    }                                                                                                                 // 17605\n                                                                                                                      // 17606\n    var iframe = document.createElement('iframe');                                                                    // 17607\n    if (!iframe.style) iframe.style = {};                                                                             // 17608\n    iframe.style.display = 'none';                                                                                    // 17609\n                                                                                                                      // 17610\n    document.body.appendChild(iframe);                                                                                // 17611\n                                                                                                                      // 17612\n    var win = iframe.contentWindow;                                                                                   // 17613\n    var wEval = win.eval, wExecScript = win.execScript;                                                               // 17614\n                                                                                                                      // 17615\n    if (!wEval && wExecScript) {                                                                                      // 17616\n        // win.eval() magically appears when this is called in IE:                                                    // 17617\n        wExecScript.call(win, 'null');                                                                                // 17618\n        wEval = win.eval;                                                                                             // 17619\n    }                                                                                                                 // 17620\n                                                                                                                      // 17621\n    forEach(Object_keys(context), function (key) {                                                                    // 17622\n        win[key] = context[key];                                                                                      // 17623\n    });                                                                                                               // 17624\n    forEach(globals, function (key) {                                                                                 // 17625\n        if (context[key]) {                                                                                           // 17626\n            win[key] = context[key];                                                                                  // 17627\n        }                                                                                                             // 17628\n    });                                                                                                               // 17629\n                                                                                                                      // 17630\n    var winKeys = Object_keys(win);                                                                                   // 17631\n                                                                                                                      // 17632\n    var res = wEval.call(win, this.code);                                                                             // 17633\n                                                                                                                      // 17634\n    forEach(Object_keys(win), function (key) {                                                                        // 17635\n        // Avoid copying circular objects like `top` and `window` by only                                             // 17636\n        // updating existing context properties or new properties in the `win`                                        // 17637\n        // that was only introduced after the eval.                                                                   // 17638\n        if (key in context || indexOf(winKeys, key) === -1) {                                                         // 17639\n            context[key] = win[key];                                                                                  // 17640\n        }                                                                                                             // 17641\n    });                                                                                                               // 17642\n                                                                                                                      // 17643\n    forEach(globals, function (key) {                                                                                 // 17644\n        if (!(key in context)) {                                                                                      // 17645\n            defineProp(context, key, win[key]);                                                                       // 17646\n        }                                                                                                             // 17647\n    });                                                                                                               // 17648\n                                                                                                                      // 17649\n    document.body.removeChild(iframe);                                                                                // 17650\n                                                                                                                      // 17651\n    return res;                                                                                                       // 17652\n};                                                                                                                    // 17653\n                                                                                                                      // 17654\nScript.prototype.runInThisContext = function () {                                                                     // 17655\n    return eval(this.code); // maybe...                                                                               // 17656\n};                                                                                                                    // 17657\n                                                                                                                      // 17658\nScript.prototype.runInNewContext = function (context) {                                                               // 17659\n    var ctx = Script.createContext(context);                                                                          // 17660\n    var res = this.runInContext(ctx);                                                                                 // 17661\n                                                                                                                      // 17662\n    forEach(Object_keys(ctx), function (key) {                                                                        // 17663\n        context[key] = ctx[key];                                                                                      // 17664\n    });                                                                                                               // 17665\n                                                                                                                      // 17666\n    return res;                                                                                                       // 17667\n};                                                                                                                    // 17668\n                                                                                                                      // 17669\nforEach(Object_keys(Script.prototype), function (name) {                                                              // 17670\n    exports[name] = Script[name] = function (code) {                                                                  // 17671\n        var s = Script(code);                                                                                         // 17672\n        return s[name].apply(s, [].slice.call(arguments, 1));                                                         // 17673\n    };                                                                                                                // 17674\n});                                                                                                                   // 17675\n                                                                                                                      // 17676\nexports.createScript = function (code) {                                                                              // 17677\n    return exports.Script(code);                                                                                      // 17678\n};                                                                                                                    // 17679\n                                                                                                                      // 17680\nexports.createContext = Script.createContext = function (context) {                                                   // 17681\n    var copy = new Context();                                                                                         // 17682\n    if(typeof context === 'object') {                                                                                 // 17683\n        forEach(Object_keys(context), function (key) {                                                                // 17684\n            copy[key] = context[key];                                                                                 // 17685\n        });                                                                                                           // 17686\n    }                                                                                                                 // 17687\n    return copy;                                                                                                      // 17688\n};                                                                                                                    // 17689\n                                                                                                                      // 17690\n},{\"indexof\":161}],161:[function(require,module,exports){                                                             // 17691\n                                                                                                                      // 17692\nvar indexOf = [].indexOf;                                                                                             // 17693\n                                                                                                                      // 17694\nmodule.exports = function(arr, obj){                                                                                  // 17695\n  if (indexOf) return arr.indexOf(obj);                                                                               // 17696\n  for (var i = 0; i < arr.length; ++i) {                                                                              // 17697\n    if (arr[i] === obj) return i;                                                                                     // 17698\n  }                                                                                                                   // 17699\n  return -1;                                                                                                          // 17700\n};                                                                                                                    // 17701\n},{}],162:[function(require,module,exports){                                                                          // 17702\nBigNumber = require('bignumber.js');                                                                                  // 17703\n                                                                                                                      // 17704\n},{\"bignumber.js\":163}],163:[function(require,module,exports){                                                        // 17705\n/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */                                            // 17706\n                                                                                                                      // 17707\n;(function (global) {                                                                                                 // 17708\n    'use strict';                                                                                                     // 17709\n                                                                                                                      // 17710\n    /*                                                                                                                // 17711\n      bignumber.js v2.0.7                                                                                             // 17712\n      A JavaScript library for arbitrary-precision arithmetic.                                                        // 17713\n      https://github.com/MikeMcl/bignumber.js                                                                         // 17714\n      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>                                                       // 17715\n      MIT Expat Licence                                                                                               // 17716\n    */                                                                                                                // 17717\n                                                                                                                      // 17718\n                                                                                                                      // 17719\n    var BigNumber, crypto, parseNumeric,                                                                              // 17720\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,                                                           // 17721\n        mathceil = Math.ceil,                                                                                         // 17722\n        mathfloor = Math.floor,                                                                                       // 17723\n        notBool = ' not a boolean or binary digit',                                                                   // 17724\n        roundingMode = 'rounding mode',                                                                               // 17725\n        tooManyDigits = 'number type has more than 15 significant digits',                                            // 17726\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                                // 17727\n        BASE = 1e14,                                                                                                  // 17728\n        LOG_BASE = 14,                                                                                                // 17729\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                      // 17730\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                      // 17731\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                           // 17732\n        SQRT_BASE = 1e7,                                                                                              // 17733\n                                                                                                                      // 17734\n        /*                                                                                                            // 17735\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                    // 17736\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                        // 17737\n         * exception is thrown (if ERRORS is true).                                                                   // 17738\n         */                                                                                                           // 17739\n        MAX = 1E9;                                   // 0 to MAX_INT32                                                // 17740\n                                                                                                                      // 17741\n                                                                                                                      // 17742\n    /*                                                                                                                // 17743\n     * Create and return a BigNumber constructor.                                                                     // 17744\n     */                                                                                                               // 17745\n    function another(configObj) {                                                                                     // 17746\n        var div,                                                                                                      // 17747\n                                                                                                                      // 17748\n            // id tracks the caller function, so its name can be included in error messages.                          // 17749\n            id = 0,                                                                                                   // 17750\n            P = BigNumber.prototype,                                                                                  // 17751\n            ONE = new BigNumber(1),                                                                                   // 17752\n                                                                                                                      // 17753\n                                                                                                                      // 17754\n            /********************************* EDITABLE DEFAULTS **********************************/                  // 17755\n                                                                                                                      // 17756\n                                                                                                                      // 17757\n            /*                                                                                                        // 17758\n             * The default values below must be integers within the inclusive ranges stated.                          // 17759\n             * The values can also be changed at run-time using BigNumber.config.                                     // 17760\n             */                                                                                                       // 17761\n                                                                                                                      // 17762\n            // The maximum number of decimal places for operations involving division.                                // 17763\n            DECIMAL_PLACES = 20,                     // 0 to MAX                                                      // 17764\n                                                                                                                      // 17765\n            /*                                                                                                        // 17766\n             * The rounding mode used when rounding to the above decimal places, and when using                       // 17767\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                           // 17768\n             * UP         0 Away from zero.                                                                           // 17769\n             * DOWN       1 Towards zero.                                                                             // 17770\n             * CEIL       2 Towards +Infinity.                                                                        // 17771\n             * FLOOR      3 Towards -Infinity.                                                                        // 17772\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                            // 17773\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                          // 17774\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                        // 17775\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                             // 17776\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                             // 17777\n             */                                                                                                       // 17778\n            ROUNDING_MODE = 4,                       // 0 to 8                                                        // 17779\n                                                                                                                      // 17780\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                             // 17781\n                                                                                                                      // 17782\n            // The exponent value at and beneath which toString returns exponential notation.                         // 17783\n            // Number type: -7                                                                                        // 17784\n            TO_EXP_NEG = -7,                         // 0 to -MAX                                                     // 17785\n                                                                                                                      // 17786\n            // The exponent value at and above which toString returns exponential notation.                           // 17787\n            // Number type: 21                                                                                        // 17788\n            TO_EXP_POS = 21,                         // 0 to MAX                                                      // 17789\n                                                                                                                      // 17790\n            // RANGE : [MIN_EXP, MAX_EXP]                                                                             // 17791\n                                                                                                                      // 17792\n            // The minimum exponent value, beneath which underflow to zero occurs.                                    // 17793\n            // Number type: -324  (5e-324)                                                                            // 17794\n            MIN_EXP = -1e7,                          // -1 to -MAX                                                    // 17795\n                                                                                                                      // 17796\n            // The maximum exponent value, above which overflow to Infinity occurs.                                   // 17797\n            // Number type:  308  (1.7976931348623157e+308)                                                           // 17798\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                              // 17799\n            MAX_EXP = 1e7,                           // 1 to MAX                                                      // 17800\n                                                                                                                      // 17801\n            // Whether BigNumber Errors are ever thrown.                                                              // 17802\n            ERRORS = true,                           // true or false                                                 // 17803\n                                                                                                                      // 17804\n            // Change to intValidatorNoErrors if ERRORS is false.                                                     // 17805\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                   // 17806\n                                                                                                                      // 17807\n            // Whether to use cryptographically-secure random number generation, if available.                        // 17808\n            CRYPTO = false,                          // true or false                                                 // 17809\n                                                                                                                      // 17810\n            /*                                                                                                        // 17811\n             * The modulo mode used when calculating the modulus: a mod n.                                            // 17812\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                   // 17813\n             * The remainder (r) is calculated as: r = a - n * q.                                                     // 17814\n             *                                                                                                        // 17815\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.                   // 17816\n             * DOWN      1 The remainder has the same sign as the dividend.                                           // 17817\n             *             This modulo mode is commonly known as 'truncated division' and is                          // 17818\n             *             equivalent to (a % n) in JavaScript.                                                       // 17819\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                 // 17820\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                               // 17821\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                       // 17822\n             *             The remainder is always positive.                                                          // 17823\n             *                                                                                                        // 17824\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                    // 17825\n             * modes are commonly used for the modulus operation.                                                     // 17826\n             * Although the other rounding modes can also be used, they may not give useful results.                  // 17827\n             */                                                                                                       // 17828\n            MODULO_MODE = 1,                         // 0 to 9                                                        // 17829\n                                                                                                                      // 17830\n            // The maximum number of significant digits of the result of the toPower operation.                       // 17831\n            // If POW_PRECISION is 0, there will be unlimited significant digits.                                     // 17832\n            POW_PRECISION = 100,                     // 0 to MAX                                                      // 17833\n                                                                                                                      // 17834\n            // The format specification used by the BigNumber.prototype.toFormat method.                              // 17835\n            FORMAT = {                                                                                                // 17836\n                decimalSeparator: '.',                                                                                // 17837\n                groupSeparator: ',',                                                                                  // 17838\n                groupSize: 3,                                                                                         // 17839\n                secondaryGroupSize: 0,                                                                                // 17840\n                fractionGroupSeparator: '\\xA0',      // non-breaking space                                            // 17841\n                fractionGroupSize: 0                                                                                  // 17842\n            };                                                                                                        // 17843\n                                                                                                                      // 17844\n                                                                                                                      // 17845\n        /******************************************************************************************/                  // 17846\n                                                                                                                      // 17847\n                                                                                                                      // 17848\n        // CONSTRUCTOR                                                                                                // 17849\n                                                                                                                      // 17850\n                                                                                                                      // 17851\n        /*                                                                                                            // 17852\n         * The BigNumber constructor and exported function.                                                           // 17853\n         * Create and return a new instance of a BigNumber object.                                                    // 17854\n         *                                                                                                            // 17855\n         * n {number|string|BigNumber} A numeric value.                                                               // 17856\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                    // 17857\n         */                                                                                                           // 17858\n        function BigNumber( n, b ) {                                                                                  // 17859\n            var c, e, i, num, len, str,                                                                               // 17860\n                x = this;                                                                                             // 17861\n                                                                                                                      // 17862\n            // Enable constructor usage without new.                                                                  // 17863\n            if ( !( x instanceof BigNumber ) ) {                                                                      // 17864\n                                                                                                                      // 17865\n                // 'BigNumber() constructor call without new: {n}'                                                    // 17866\n                if (ERRORS) raise( 26, 'constructor call without new', n );                                           // 17867\n                return new BigNumber( n, b );                                                                         // 17868\n            }                                                                                                         // 17869\n                                                                                                                      // 17870\n            // 'new BigNumber() base not an integer: {b}'                                                             // 17871\n            // 'new BigNumber() base out of range: {b}'                                                               // 17872\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                 // 17873\n                                                                                                                      // 17874\n                // Duplicate.                                                                                         // 17875\n                if ( n instanceof BigNumber ) {                                                                       // 17876\n                    x.s = n.s;                                                                                        // 17877\n                    x.e = n.e;                                                                                        // 17878\n                    x.c = ( n = n.c ) ? n.slice() : n;                                                                // 17879\n                    id = 0;                                                                                           // 17880\n                    return;                                                                                           // 17881\n                }                                                                                                     // 17882\n                                                                                                                      // 17883\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                 // 17884\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                             // 17885\n                                                                                                                      // 17886\n                    // Fast path for integers.                                                                        // 17887\n                    if ( n === ~~n ) {                                                                                // 17888\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                  // 17889\n                        x.e = e;                                                                                      // 17890\n                        x.c = [n];                                                                                    // 17891\n                        id = 0;                                                                                       // 17892\n                        return;                                                                                       // 17893\n                    }                                                                                                 // 17894\n                                                                                                                      // 17895\n                    str = n + '';                                                                                     // 17896\n                } else {                                                                                              // 17897\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                        // 17898\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                  // 17899\n                }                                                                                                     // 17900\n            } else {                                                                                                  // 17901\n                b = b | 0;                                                                                            // 17902\n                str = n + '';                                                                                         // 17903\n                                                                                                                      // 17904\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                              // 17905\n                // Allow exponential notation to be used with base 10 argument.                                       // 17906\n                if ( b == 10 ) {                                                                                      // 17907\n                    x = new BigNumber( n instanceof BigNumber ? n : str );                                            // 17908\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                       // 17909\n                }                                                                                                     // 17910\n                                                                                                                      // 17911\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                             // 17912\n                // Any number in exponential form will fail due to the [Ee][+-].                                      // 17913\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                  // 17914\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                                // 17915\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                          // 17916\n                    return parseNumeric( x, str, num, b );                                                            // 17917\n                }                                                                                                     // 17918\n                                                                                                                      // 17919\n                if (num) {                                                                                            // 17920\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                 // 17921\n                                                                                                                      // 17922\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {                                     // 17923\n                                                                                                                      // 17924\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                     // 17925\n                        raise( id, tooManyDigits, n );                                                                // 17926\n                    }                                                                                                 // 17927\n                                                                                                                      // 17928\n                    // Prevent later check for length on converted number.                                            // 17929\n                    num = false;                                                                                      // 17930\n                } else {                                                                                              // 17931\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                  // 17932\n                }                                                                                                     // 17933\n                                                                                                                      // 17934\n                str = convertBase( str, 10, b, x.s );                                                                 // 17935\n            }                                                                                                         // 17936\n                                                                                                                      // 17937\n            // Decimal point?                                                                                         // 17938\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                        // 17939\n                                                                                                                      // 17940\n            // Exponential form?                                                                                      // 17941\n            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                   // 17942\n                                                                                                                      // 17943\n                // Determine exponent.                                                                                // 17944\n                if ( e < 0 ) e = i;                                                                                   // 17945\n                e += +str.slice( i + 1 );                                                                             // 17946\n                str = str.substring( 0, i );                                                                          // 17947\n            } else if ( e < 0 ) {                                                                                     // 17948\n                                                                                                                      // 17949\n                // Integer.                                                                                           // 17950\n                e = str.length;                                                                                       // 17951\n            }                                                                                                         // 17952\n                                                                                                                      // 17953\n            // Determine leading zeros.                                                                               // 17954\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                             // 17955\n                                                                                                                      // 17956\n            // Determine trailing zeros.                                                                              // 17957\n            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                  // 17958\n            str = str.slice( i, len + 1 );                                                                            // 17959\n                                                                                                                      // 17960\n            if (str) {                                                                                                // 17961\n                len = str.length;                                                                                     // 17962\n                                                                                                                      // 17963\n                // Disallow numbers with over 15 significant digits if number type.                                   // 17964\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'                             // 17965\n                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );                                 // 17966\n                                                                                                                      // 17967\n                e = e - i - 1;                                                                                        // 17968\n                                                                                                                      // 17969\n                 // Overflow?                                                                                         // 17970\n                if ( e > MAX_EXP ) {                                                                                  // 17971\n                                                                                                                      // 17972\n                    // Infinity.                                                                                      // 17973\n                    x.c = x.e = null;                                                                                 // 17974\n                                                                                                                      // 17975\n                // Underflow?                                                                                         // 17976\n                } else if ( e < MIN_EXP ) {                                                                           // 17977\n                                                                                                                      // 17978\n                    // Zero.                                                                                          // 17979\n                    x.c = [ x.e = 0 ];                                                                                // 17980\n                } else {                                                                                              // 17981\n                    x.e = e;                                                                                          // 17982\n                    x.c = [];                                                                                         // 17983\n                                                                                                                      // 17984\n                    // Transform base                                                                                 // 17985\n                                                                                                                      // 17986\n                    // e is the base 10 exponent.                                                                     // 17987\n                    // i is where to slice str to get the first element of the coefficient array.                     // 17988\n                    i = ( e + 1 ) % LOG_BASE;                                                                         // 17989\n                    if ( e < 0 ) i += LOG_BASE;                                                                       // 17990\n                                                                                                                      // 17991\n                    if ( i < len ) {                                                                                  // 17992\n                        if (i) x.c.push( +str.slice( 0, i ) );                                                        // 17993\n                                                                                                                      // 17994\n                        for ( len -= LOG_BASE; i < len; ) {                                                           // 17995\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                               // 17996\n                        }                                                                                             // 17997\n                                                                                                                      // 17998\n                        str = str.slice(i);                                                                           // 17999\n                        i = LOG_BASE - str.length;                                                                    // 18000\n                    } else {                                                                                          // 18001\n                        i -= len;                                                                                     // 18002\n                    }                                                                                                 // 18003\n                                                                                                                      // 18004\n                    for ( ; i--; str += '0' );                                                                        // 18005\n                    x.c.push( +str );                                                                                 // 18006\n                }                                                                                                     // 18007\n            } else {                                                                                                  // 18008\n                                                                                                                      // 18009\n                // Zero.                                                                                              // 18010\n                x.c = [ x.e = 0 ];                                                                                    // 18011\n            }                                                                                                         // 18012\n                                                                                                                      // 18013\n            id = 0;                                                                                                   // 18014\n        }                                                                                                             // 18015\n                                                                                                                      // 18016\n                                                                                                                      // 18017\n        // CONSTRUCTOR PROPERTIES                                                                                     // 18018\n                                                                                                                      // 18019\n                                                                                                                      // 18020\n        BigNumber.another = another;                                                                                  // 18021\n                                                                                                                      // 18022\n        BigNumber.ROUND_UP = 0;                                                                                       // 18023\n        BigNumber.ROUND_DOWN = 1;                                                                                     // 18024\n        BigNumber.ROUND_CEIL = 2;                                                                                     // 18025\n        BigNumber.ROUND_FLOOR = 3;                                                                                    // 18026\n        BigNumber.ROUND_HALF_UP = 4;                                                                                  // 18027\n        BigNumber.ROUND_HALF_DOWN = 5;                                                                                // 18028\n        BigNumber.ROUND_HALF_EVEN = 6;                                                                                // 18029\n        BigNumber.ROUND_HALF_CEIL = 7;                                                                                // 18030\n        BigNumber.ROUND_HALF_FLOOR = 8;                                                                               // 18031\n        BigNumber.EUCLID = 9;                                                                                         // 18032\n                                                                                                                      // 18033\n                                                                                                                      // 18034\n        /*                                                                                                            // 18035\n         * Configure infrequently-changing library-wide settings.                                                     // 18036\n         *                                                                                                            // 18037\n         * Accept an object or an argument list, with one or many of the following properties or                      // 18038\n         * parameters respectively:                                                                                   // 18039\n         *                                                                                                            // 18040\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                    // 18041\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                      // 18042\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                     // 18043\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                             // 18044\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                            // 18045\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                    // 18046\n         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                   // 18047\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                   // 18048\n         *   MODULO_MODE     {number}           0 to 9 inclusive                                                      // 18049\n         *   POW_PRECISION   {number}           0 to MAX inclusive                                                    // 18050\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                      // 18051\n         *      decimalSeparator       {string}                                                                       // 18052\n         *      groupSeparator         {string}                                                                       // 18053\n         *      groupSize              {number}                                                                       // 18054\n         *      secondaryGroupSize     {number}                                                                       // 18055\n         *      fractionGroupSeparator {string}                                                                       // 18056\n         *      fractionGroupSize      {number}                                                                       // 18057\n         *                                                                                                            // 18058\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)                  // 18059\n         *                                                                                                            // 18060\n         * E.g.                                                                                                       // 18061\n         * BigNumber.config(20, 4) is equivalent to                                                                   // 18062\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                               // 18063\n         *                                                                                                            // 18064\n         * Ignore properties/parameters set to null or undefined.                                                     // 18065\n         * Return an object with the properties current values.                                                       // 18066\n         */                                                                                                           // 18067\n        BigNumber.config = function () {                                                                              // 18068\n            var v, p,                                                                                                 // 18069\n                i = 0,                                                                                                // 18070\n                r = {},                                                                                               // 18071\n                a = arguments,                                                                                        // 18072\n                o = a[0],                                                                                             // 18073\n                has = o && typeof o == 'object'                                                                       // 18074\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                           // 18075\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                               // 18076\n                                                                                                                      // 18077\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                   // 18078\n            // 'config() DECIMAL_PLACES not an integer: {v}'                                                          // 18079\n            // 'config() DECIMAL_PLACES out of range: {v}'                                                            // 18080\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                     // 18081\n                DECIMAL_PLACES = v | 0;                                                                               // 18082\n            }                                                                                                         // 18083\n            r[p] = DECIMAL_PLACES;                                                                                    // 18084\n                                                                                                                      // 18085\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                      // 18086\n            // 'config() ROUNDING_MODE not an integer: {v}'                                                           // 18087\n            // 'config() ROUNDING_MODE out of range: {v}'                                                             // 18088\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                        // 18089\n                ROUNDING_MODE = v | 0;                                                                                // 18090\n            }                                                                                                         // 18091\n            r[p] = ROUNDING_MODE;                                                                                     // 18092\n                                                                                                                      // 18093\n            // EXPONENTIAL_AT {number|number[]}                                                                       // 18094\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                   // 18095\n            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                          // 18096\n            // 'config() EXPONENTIAL_AT out of range: {v}'                                                            // 18097\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                      // 18098\n                                                                                                                      // 18099\n                if ( isArray(v) ) {                                                                                   // 18100\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                    // 18101\n                        TO_EXP_NEG = v[0] | 0;                                                                        // 18102\n                        TO_EXP_POS = v[1] | 0;                                                                        // 18103\n                    }                                                                                                 // 18104\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                      // 18105\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                            // 18106\n                }                                                                                                     // 18107\n            }                                                                                                         // 18108\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                        // 18109\n                                                                                                                      // 18110\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                     // 18111\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                            // 18112\n            // 'config() RANGE not an integer: {v}'                                                                   // 18113\n            // 'config() RANGE cannot be zero: {v}'                                                                   // 18114\n            // 'config() RANGE out of range: {v}'                                                                     // 18115\n            if ( has( p = 'RANGE' ) ) {                                                                               // 18116\n                                                                                                                      // 18117\n                if ( isArray(v) ) {                                                                                   // 18118\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                   // 18119\n                        MIN_EXP = v[0] | 0;                                                                           // 18120\n                        MAX_EXP = v[1] | 0;                                                                           // 18121\n                    }                                                                                                 // 18122\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                      // 18123\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                     // 18124\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                            // 18125\n                }                                                                                                     // 18126\n            }                                                                                                         // 18127\n            r[p] = [ MIN_EXP, MAX_EXP ];                                                                              // 18128\n                                                                                                                      // 18129\n            // ERRORS {boolean|number} true, false, 1 or 0.                                                           // 18130\n            // 'config() ERRORS not a boolean or binary digit: {v}'                                                   // 18131\n            if ( has( p = 'ERRORS' ) ) {                                                                              // 18132\n                                                                                                                      // 18133\n                if ( v === !!v || v === 1 || v === 0 ) {                                                              // 18134\n                    id = 0;                                                                                           // 18135\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                    // 18136\n                } else if (ERRORS) {                                                                                  // 18137\n                    raise( 2, p + notBool, v );                                                                       // 18138\n                }                                                                                                     // 18139\n            }                                                                                                         // 18140\n            r[p] = ERRORS;                                                                                            // 18141\n                                                                                                                      // 18142\n            // CRYPTO {boolean|number} true, false, 1 or 0.                                                           // 18143\n            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                   // 18144\n            // 'config() crypto unavailable: {crypto}'                                                                // 18145\n            if ( has( p = 'CRYPTO' ) ) {                                                                              // 18146\n                                                                                                                      // 18147\n                if ( v === !!v || v === 1 || v === 0 ) {                                                              // 18148\n                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );                                          // 18149\n                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );                           // 18150\n                } else if (ERRORS) {                                                                                  // 18151\n                    raise( 2, p + notBool, v );                                                                       // 18152\n                }                                                                                                     // 18153\n            }                                                                                                         // 18154\n            r[p] = CRYPTO;                                                                                            // 18155\n                                                                                                                      // 18156\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                        // 18157\n            // 'config() MODULO_MODE not an integer: {v}'                                                             // 18158\n            // 'config() MODULO_MODE out of range: {v}'                                                               // 18159\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                          // 18160\n                MODULO_MODE = v | 0;                                                                                  // 18161\n            }                                                                                                         // 18162\n            r[p] = MODULO_MODE;                                                                                       // 18163\n                                                                                                                      // 18164\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                    // 18165\n            // 'config() POW_PRECISION not an integer: {v}'                                                           // 18166\n            // 'config() POW_PRECISION out of range: {v}'                                                             // 18167\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                      // 18168\n                POW_PRECISION = v | 0;                                                                                // 18169\n            }                                                                                                         // 18170\n            r[p] = POW_PRECISION;                                                                                     // 18171\n                                                                                                                      // 18172\n            // FORMAT {object}                                                                                        // 18173\n            // 'config() FORMAT not an object: {v}'                                                                   // 18174\n            if ( has( p = 'FORMAT' ) ) {                                                                              // 18175\n                                                                                                                      // 18176\n                if ( typeof v == 'object' ) {                                                                         // 18177\n                    FORMAT = v;                                                                                       // 18178\n                } else if (ERRORS) {                                                                                  // 18179\n                    raise( 2, p + ' not an object', v );                                                              // 18180\n                }                                                                                                     // 18181\n            }                                                                                                         // 18182\n            r[p] = FORMAT;                                                                                            // 18183\n                                                                                                                      // 18184\n            return r;                                                                                                 // 18185\n        };                                                                                                            // 18186\n                                                                                                                      // 18187\n                                                                                                                      // 18188\n        /*                                                                                                            // 18189\n         * Return a new BigNumber whose value is the maximum of the arguments.                                        // 18190\n         *                                                                                                            // 18191\n         * arguments {number|string|BigNumber}                                                                        // 18192\n         */                                                                                                           // 18193\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                          // 18194\n                                                                                                                      // 18195\n                                                                                                                      // 18196\n        /*                                                                                                            // 18197\n         * Return a new BigNumber whose value is the minimum of the arguments.                                        // 18198\n         *                                                                                                            // 18199\n         * arguments {number|string|BigNumber}                                                                        // 18200\n         */                                                                                                           // 18201\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                          // 18202\n                                                                                                                      // 18203\n                                                                                                                      // 18204\n        /*                                                                                                            // 18205\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                     // 18206\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                       // 18207\n         * zeros are produced).                                                                                       // 18208\n         *                                                                                                            // 18209\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 18210\n         *                                                                                                            // 18211\n         * 'random() decimal places not an integer: {dp}'                                                             // 18212\n         * 'random() decimal places out of range: {dp}'                                                               // 18213\n         * 'random() crypto unavailable: {crypto}'                                                                    // 18214\n         */                                                                                                           // 18215\n        BigNumber.random = (function () {                                                                             // 18216\n            var pow2_53 = 0x20000000000000;                                                                           // 18217\n                                                                                                                      // 18218\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                            // 18219\n            // Check if Math.random() produces more than 32 bits of randomness.                                       // 18220\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                   // 18221\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                            // 18222\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                 // 18223\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                          // 18224\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                  // 18225\n                  (Math.random() * 0x800000 | 0); };                                                                  // 18226\n                                                                                                                      // 18227\n            return function (dp) {                                                                                    // 18228\n                var a, b, e, k, v,                                                                                    // 18229\n                    i = 0,                                                                                            // 18230\n                    c = [],                                                                                           // 18231\n                    rand = new BigNumber(ONE);                                                                        // 18232\n                                                                                                                      // 18233\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                           // 18234\n                k = mathceil( dp / LOG_BASE );                                                                        // 18235\n                                                                                                                      // 18236\n                if (CRYPTO) {                                                                                         // 18237\n                                                                                                                      // 18238\n                    // Browsers supporting crypto.getRandomValues.                                                    // 18239\n                    if ( crypto && crypto.getRandomValues ) {                                                         // 18240\n                                                                                                                      // 18241\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                      // 18242\n                                                                                                                      // 18243\n                        for ( ; i < k; ) {                                                                            // 18244\n                                                                                                                      // 18245\n                            // 53 bits:                                                                               // 18246\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                  // 18247\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                            // 18248\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                             // 18249\n                            //                                     11111 11111111 11111111                            // 18250\n                            // 0x20000 is 2^21.                                                                       // 18251\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                   // 18252\n                                                                                                                      // 18253\n                            // Rejection sampling:                                                                    // 18254\n                            // 0 <= v < 9007199254740992                                                              // 18255\n                            // Probability that v >= 9e15, is                                                         // 18256\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                             // 18257\n                            if ( v >= 9e15 ) {                                                                        // 18258\n                                b = crypto.getRandomValues( new Uint32Array(2) );                                     // 18259\n                                a[i] = b[0];                                                                          // 18260\n                                a[i + 1] = b[1];                                                                      // 18261\n                            } else {                                                                                  // 18262\n                                                                                                                      // 18263\n                                // 0 <= v <= 8999999999999999                                                         // 18264\n                                // 0 <= (v % 1e14) <= 99999999999999                                                  // 18265\n                                c.push( v % 1e14 );                                                                   // 18266\n                                i += 2;                                                                               // 18267\n                            }                                                                                         // 18268\n                        }                                                                                             // 18269\n                        i = k / 2;                                                                                    // 18270\n                                                                                                                      // 18271\n                    // Node.js supporting crypto.randomBytes.                                                         // 18272\n                    } else if ( crypto && crypto.randomBytes ) {                                                      // 18273\n                                                                                                                      // 18274\n                        // buffer                                                                                     // 18275\n                        a = crypto.randomBytes( k *= 7 );                                                             // 18276\n                                                                                                                      // 18277\n                        for ( ; i < k; ) {                                                                            // 18278\n                                                                                                                      // 18279\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                         // 18280\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                 // 18281\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                            // 18282\n                            // 0 <= v < 9007199254740992                                                              // 18283\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                  // 18284\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                             // 18285\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                  // 18286\n                                                                                                                      // 18287\n                            if ( v >= 9e15 ) {                                                                        // 18288\n                                crypto.randomBytes(7).copy( a, i );                                                   // 18289\n                            } else {                                                                                  // 18290\n                                                                                                                      // 18291\n                                // 0 <= (v % 1e14) <= 99999999999999                                                  // 18292\n                                c.push( v % 1e14 );                                                                   // 18293\n                                i += 7;                                                                               // 18294\n                            }                                                                                         // 18295\n                        }                                                                                             // 18296\n                        i = k / 7;                                                                                    // 18297\n                    } else if (ERRORS) {                                                                              // 18298\n                        raise( 14, 'crypto unavailable', crypto );                                                    // 18299\n                    }                                                                                                 // 18300\n                }                                                                                                     // 18301\n                                                                                                                      // 18302\n                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.                     // 18303\n                if (!i) {                                                                                             // 18304\n                                                                                                                      // 18305\n                    for ( ; i < k; ) {                                                                                // 18306\n                        v = random53bitInt();                                                                         // 18307\n                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                            // 18308\n                    }                                                                                                 // 18309\n                }                                                                                                     // 18310\n                                                                                                                      // 18311\n                k = c[--i];                                                                                           // 18312\n                dp %= LOG_BASE;                                                                                       // 18313\n                                                                                                                      // 18314\n                // Convert trailing digits to zeros according to dp.                                                  // 18315\n                if ( k && dp ) {                                                                                      // 18316\n                    v = POWS_TEN[LOG_BASE - dp];                                                                      // 18317\n                    c[i] = mathfloor( k / v ) * v;                                                                    // 18318\n                }                                                                                                     // 18319\n                                                                                                                      // 18320\n                // Remove trailing elements which are zero.                                                           // 18321\n                for ( ; c[i] === 0; c.pop(), i-- );                                                                   // 18322\n                                                                                                                      // 18323\n                // Zero?                                                                                              // 18324\n                if ( i < 0 ) {                                                                                        // 18325\n                    c = [ e = 0 ];                                                                                    // 18326\n                } else {                                                                                              // 18327\n                                                                                                                      // 18328\n                    // Remove leading elements which are zero and adjust exponent accordingly.                        // 18329\n                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                             // 18330\n                                                                                                                      // 18331\n                    // Count the digits of the first element of c to determine leading zeros, and...                  // 18332\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                    // 18333\n                                                                                                                      // 18334\n                    // adjust the exponent accordingly.                                                               // 18335\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                            // 18336\n                }                                                                                                     // 18337\n                                                                                                                      // 18338\n                rand.e = e;                                                                                           // 18339\n                rand.c = c;                                                                                           // 18340\n                return rand;                                                                                          // 18341\n            };                                                                                                        // 18342\n        })();                                                                                                         // 18343\n                                                                                                                      // 18344\n                                                                                                                      // 18345\n        // PRIVATE FUNCTIONS                                                                                          // 18346\n                                                                                                                      // 18347\n                                                                                                                      // 18348\n        // Convert a numeric string of baseIn to a numeric string of baseOut.                                         // 18349\n        function convertBase( str, baseOut, baseIn, sign ) {                                                          // 18350\n            var d, e, k, r, x, xc, y,                                                                                 // 18351\n                i = str.indexOf( '.' ),                                                                               // 18352\n                dp = DECIMAL_PLACES,                                                                                  // 18353\n                rm = ROUNDING_MODE;                                                                                   // 18354\n                                                                                                                      // 18355\n            if ( baseIn < 37 ) str = str.toLowerCase();                                                               // 18356\n                                                                                                                      // 18357\n            // Non-integer.                                                                                           // 18358\n            if ( i >= 0 ) {                                                                                           // 18359\n                k = POW_PRECISION;                                                                                    // 18360\n                                                                                                                      // 18361\n                // Unlimited precision.                                                                               // 18362\n                POW_PRECISION = 0;                                                                                    // 18363\n                str = str.replace( '.', '' );                                                                         // 18364\n                y = new BigNumber(baseIn);                                                                            // 18365\n                x = y.pow( str.length - i );                                                                          // 18366\n                POW_PRECISION = k;                                                                                    // 18367\n                                                                                                                      // 18368\n                // Convert str as if an integer, then restore the fraction part by dividing the                       // 18369\n                // result by its base raised to a power.                                                              // 18370\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                            // 18371\n                y.e = y.c.length;                                                                                     // 18372\n            }                                                                                                         // 18373\n                                                                                                                      // 18374\n            // Convert the number as integer.                                                                         // 18375\n            xc = toBaseOut( str, baseIn, baseOut );                                                                   // 18376\n            e = k = xc.length;                                                                                        // 18377\n                                                                                                                      // 18378\n            // Remove trailing zeros.                                                                                 // 18379\n            for ( ; xc[--k] == 0; xc.pop() );                                                                         // 18380\n            if ( !xc[0] ) return '0';                                                                                 // 18381\n                                                                                                                      // 18382\n            if ( i < 0 ) {                                                                                            // 18383\n                --e;                                                                                                  // 18384\n            } else {                                                                                                  // 18385\n                x.c = xc;                                                                                             // 18386\n                x.e = e;                                                                                              // 18387\n                                                                                                                      // 18388\n                // sign is needed for correct rounding.                                                               // 18389\n                x.s = sign;                                                                                           // 18390\n                x = div( x, y, dp, rm, baseOut );                                                                     // 18391\n                xc = x.c;                                                                                             // 18392\n                r = x.r;                                                                                              // 18393\n                e = x.e;                                                                                              // 18394\n            }                                                                                                         // 18395\n                                                                                                                      // 18396\n            d = e + dp + 1;                                                                                           // 18397\n                                                                                                                      // 18398\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                   // 18399\n            i = xc[d];                                                                                                // 18400\n            k = baseOut / 2;                                                                                          // 18401\n            r = r || d < 0 || xc[d + 1] != null;                                                                      // 18402\n                                                                                                                      // 18403\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                               // 18404\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                              // 18405\n                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                 // 18406\n                                                                                                                      // 18407\n            if ( d < 1 || !xc[0] ) {                                                                                  // 18408\n                                                                                                                      // 18409\n                // 1^-dp or 0.                                                                                        // 18410\n                str = r ? toFixedPoint( '1', -dp ) : '0';                                                             // 18411\n            } else {                                                                                                  // 18412\n                xc.length = d;                                                                                        // 18413\n                                                                                                                      // 18414\n                if (r) {                                                                                              // 18415\n                                                                                                                      // 18416\n                    // Rounding up may mean the previous digit has to be rounded up and so on.                        // 18417\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                         // 18418\n                        xc[d] = 0;                                                                                    // 18419\n                                                                                                                      // 18420\n                        if ( !d ) {                                                                                   // 18421\n                            ++e;                                                                                      // 18422\n                            xc.unshift(1);                                                                            // 18423\n                        }                                                                                             // 18424\n                    }                                                                                                 // 18425\n                }                                                                                                     // 18426\n                                                                                                                      // 18427\n                // Determine trailing zeros.                                                                          // 18428\n                for ( k = xc.length; !xc[--k]; );                                                                     // 18429\n                                                                                                                      // 18430\n                // E.g. [4, 11, 15] becomes 4bf.                                                                      // 18431\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                   // 18432\n                str = toFixedPoint( str, e );                                                                         // 18433\n            }                                                                                                         // 18434\n                                                                                                                      // 18435\n            // The caller will add the sign.                                                                          // 18436\n            return str;                                                                                               // 18437\n        }                                                                                                             // 18438\n                                                                                                                      // 18439\n                                                                                                                      // 18440\n        // Perform division in the specified base. Called by div and convertBase.                                     // 18441\n        div = (function () {                                                                                          // 18442\n                                                                                                                      // 18443\n            // Assume non-zero x and k.                                                                               // 18444\n            function multiply( x, k, base ) {                                                                         // 18445\n                var m, temp, xlo, xhi,                                                                                // 18446\n                    carry = 0,                                                                                        // 18447\n                    i = x.length,                                                                                     // 18448\n                    klo = k % SQRT_BASE,                                                                              // 18449\n                    khi = k / SQRT_BASE | 0;                                                                          // 18450\n                                                                                                                      // 18451\n                for ( x = x.slice(); i--; ) {                                                                         // 18452\n                    xlo = x[i] % SQRT_BASE;                                                                           // 18453\n                    xhi = x[i] / SQRT_BASE | 0;                                                                       // 18454\n                    m = khi * xlo + xhi * klo;                                                                        // 18455\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                     // 18456\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                  // 18457\n                    x[i] = temp % base;                                                                               // 18458\n                }                                                                                                     // 18459\n                                                                                                                      // 18460\n                if (carry) x.unshift(carry);                                                                          // 18461\n                                                                                                                      // 18462\n                return x;                                                                                             // 18463\n            }                                                                                                         // 18464\n                                                                                                                      // 18465\n            function compare( a, b, aL, bL ) {                                                                        // 18466\n                var i, cmp;                                                                                           // 18467\n                                                                                                                      // 18468\n                if ( aL != bL ) {                                                                                     // 18469\n                    cmp = aL > bL ? 1 : -1;                                                                           // 18470\n                } else {                                                                                              // 18471\n                                                                                                                      // 18472\n                    for ( i = cmp = 0; i < aL; i++ ) {                                                                // 18473\n                                                                                                                      // 18474\n                        if ( a[i] != b[i] ) {                                                                         // 18475\n                            cmp = a[i] > b[i] ? 1 : -1;                                                               // 18476\n                            break;                                                                                    // 18477\n                        }                                                                                             // 18478\n                    }                                                                                                 // 18479\n                }                                                                                                     // 18480\n                return cmp;                                                                                           // 18481\n            }                                                                                                         // 18482\n                                                                                                                      // 18483\n            function subtract( a, b, aL, base ) {                                                                     // 18484\n                var i = 0;                                                                                            // 18485\n                                                                                                                      // 18486\n                // Subtract b from a.                                                                                 // 18487\n                for ( ; aL--; ) {                                                                                     // 18488\n                    a[aL] -= i;                                                                                       // 18489\n                    i = a[aL] < b[aL] ? 1 : 0;                                                                        // 18490\n                    a[aL] = i * base + a[aL] - b[aL];                                                                 // 18491\n                }                                                                                                     // 18492\n                                                                                                                      // 18493\n                // Remove leading zeros.                                                                              // 18494\n                for ( ; !a[0] && a.length > 1; a.shift() );                                                           // 18495\n            }                                                                                                         // 18496\n                                                                                                                      // 18497\n            // x: dividend, y: divisor.                                                                               // 18498\n            return function ( x, y, dp, rm, base ) {                                                                  // 18499\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                             // 18500\n                    yL, yz,                                                                                           // 18501\n                    s = x.s == y.s ? 1 : -1,                                                                          // 18502\n                    xc = x.c,                                                                                         // 18503\n                    yc = y.c;                                                                                         // 18504\n                                                                                                                      // 18505\n                // Either NaN, Infinity or 0?                                                                         // 18506\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                               // 18507\n                                                                                                                      // 18508\n                    return new BigNumber(                                                                             // 18509\n                                                                                                                      // 18510\n                      // Return NaN if either NaN, or both Infinity or 0.                                             // 18511\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                     // 18512\n                                                                                                                      // 18513\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                    // 18514\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                       // 18515\n                    );                                                                                                // 18516\n                }                                                                                                     // 18517\n                                                                                                                      // 18518\n                q = new BigNumber(s);                                                                                 // 18519\n                qc = q.c = [];                                                                                        // 18520\n                e = x.e - y.e;                                                                                        // 18521\n                s = dp + e + 1;                                                                                       // 18522\n                                                                                                                      // 18523\n                if ( !base ) {                                                                                        // 18524\n                    base = BASE;                                                                                      // 18525\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                      // 18526\n                    s = s / LOG_BASE | 0;                                                                             // 18527\n                }                                                                                                     // 18528\n                                                                                                                      // 18529\n                // Result exponent may be one less then the current value of e.                                       // 18530\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                       // 18531\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                          // 18532\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                    // 18533\n                                                                                                                      // 18534\n                if ( s < 0 ) {                                                                                        // 18535\n                    qc.push(1);                                                                                       // 18536\n                    more = true;                                                                                      // 18537\n                } else {                                                                                              // 18538\n                    xL = xc.length;                                                                                   // 18539\n                    yL = yc.length;                                                                                   // 18540\n                    i = 0;                                                                                            // 18541\n                    s += 2;                                                                                           // 18542\n                                                                                                                      // 18543\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                               // 18544\n                                                                                                                      // 18545\n                    n = mathfloor( base / ( yc[0] + 1 ) );                                                            // 18546\n                                                                                                                      // 18547\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                        // 18548\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                 // 18549\n                    if ( n > 1 ) {                                                                                    // 18550\n                        yc = multiply( yc, n, base );                                                                 // 18551\n                        xc = multiply( xc, n, base );                                                                 // 18552\n                        yL = yc.length;                                                                               // 18553\n                        xL = xc.length;                                                                               // 18554\n                    }                                                                                                 // 18555\n                                                                                                                      // 18556\n                    xi = yL;                                                                                          // 18557\n                    rem = xc.slice( 0, yL );                                                                          // 18558\n                    remL = rem.length;                                                                                // 18559\n                                                                                                                      // 18560\n                    // Add zeros to make remainder as long as divisor.                                                // 18561\n                    for ( ; remL < yL; rem[remL++] = 0 );                                                             // 18562\n                    yz = yc.slice();                                                                                  // 18563\n                    yz.unshift(0);                                                                                    // 18564\n                    yc0 = yc[0];                                                                                      // 18565\n                    if ( yc[1] >= base / 2 ) yc0++;                                                                   // 18566\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.                         // 18567\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                             // 18568\n                                                                                                                      // 18569\n                    do {                                                                                              // 18570\n                        n = 0;                                                                                        // 18571\n                                                                                                                      // 18572\n                        // Compare divisor and remainder.                                                             // 18573\n                        cmp = compare( yc, rem, yL, remL );                                                           // 18574\n                                                                                                                      // 18575\n                        // If divisor < remainder.                                                                    // 18576\n                        if ( cmp < 0 ) {                                                                              // 18577\n                                                                                                                      // 18578\n                            // Calculate trial digit, n.                                                              // 18579\n                                                                                                                      // 18580\n                            rem0 = rem[0];                                                                            // 18581\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                   // 18582\n                                                                                                                      // 18583\n                            // n is how many times the divisor goes into the current remainder.                       // 18584\n                            n = mathfloor( rem0 / yc0 );                                                              // 18585\n                                                                                                                      // 18586\n                            //  Algorithm:                                                                            // 18587\n                            //  1. product = divisor * trial digit (n)                                                // 18588\n                            //  2. if product > remainder: product -= divisor, n--                                    // 18589\n                            //  3. remainder -= product                                                               // 18590\n                            //  4. if product was < remainder at 2:                                                   // 18591\n                            //    5. compare new remainder and divisor                                                // 18592\n                            //    6. If remainder > divisor: remainder -= divisor, n++                                // 18593\n                                                                                                                      // 18594\n                            if ( n > 1 ) {                                                                            // 18595\n                                                                                                                      // 18596\n                                // n may be > base only when base is 3.                                               // 18597\n                                if (n >= base) n = base - 1;                                                          // 18598\n                                                                                                                      // 18599\n                                // product = divisor * trial digit.                                                   // 18600\n                                prod = multiply( yc, n, base );                                                       // 18601\n                                prodL = prod.length;                                                                  // 18602\n                                remL = rem.length;                                                                    // 18603\n                                                                                                                      // 18604\n                                // Compare product and remainder.                                                     // 18605\n                                // If product > remainder.                                                            // 18606\n                                // Trial digit n too high.                                                            // 18607\n                                // n is 1 too high about 5% of the time, and is not known to have                     // 18608\n                                // ever been more than 1 too high.                                                    // 18609\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                    // 18610\n                                    n--;                                                                              // 18611\n                                                                                                                      // 18612\n                                    // Subtract divisor from product.                                                 // 18613\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                              // 18614\n                                    prodL = prod.length;                                                              // 18615\n                                    cmp = 1;                                                                          // 18616\n                                }                                                                                     // 18617\n                            } else {                                                                                  // 18618\n                                                                                                                      // 18619\n                                // n is 0 or 1, cmp is -1.                                                            // 18620\n                                // If n is 0, there is no need to compare yc and rem again below,                     // 18621\n                                // so change cmp to 1 to avoid it.                                                    // 18622\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                      // 18623\n                                if ( n == 0 ) {                                                                       // 18624\n                                                                                                                      // 18625\n                                    // divisor < remainder, so n must be at least 1.                                  // 18626\n                                    cmp = n = 1;                                                                      // 18627\n                                }                                                                                     // 18628\n                                                                                                                      // 18629\n                                // product = divisor                                                                  // 18630\n                                prod = yc.slice();                                                                    // 18631\n                                prodL = prod.length;                                                                  // 18632\n                            }                                                                                         // 18633\n                                                                                                                      // 18634\n                            if ( prodL < remL ) prod.unshift(0);                                                      // 18635\n                                                                                                                      // 18636\n                            // Subtract product from remainder.                                                       // 18637\n                            subtract( rem, prod, remL, base );                                                        // 18638\n                            remL = rem.length;                                                                        // 18639\n                                                                                                                      // 18640\n                             // If product was < remainder.                                                           // 18641\n                            if ( cmp == -1 ) {                                                                        // 18642\n                                                                                                                      // 18643\n                                // Compare divisor and new remainder.                                                 // 18644\n                                // If divisor < new remainder, subtract divisor from remainder.                       // 18645\n                                // Trial digit n too low.                                                             // 18646\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                    // 18647\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                          // 18648\n                                    n++;                                                                              // 18649\n                                                                                                                      // 18650\n                                    // Subtract divisor from remainder.                                               // 18651\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                 // 18652\n                                    remL = rem.length;                                                                // 18653\n                                }                                                                                     // 18654\n                            }                                                                                         // 18655\n                        } else if ( cmp === 0 ) {                                                                     // 18656\n                            n++;                                                                                      // 18657\n                            rem = [0];                                                                                // 18658\n                        } // else cmp === 1 and n will be 0                                                           // 18659\n                                                                                                                      // 18660\n                        // Add the next digit, n, to the result array.                                                // 18661\n                        qc[i++] = n;                                                                                  // 18662\n                                                                                                                      // 18663\n                        // Update the remainder.                                                                      // 18664\n                        if ( rem[0] ) {                                                                               // 18665\n                            rem[remL++] = xc[xi] || 0;                                                                // 18666\n                        } else {                                                                                      // 18667\n                            rem = [ xc[xi] ];                                                                         // 18668\n                            remL = 1;                                                                                 // 18669\n                        }                                                                                             // 18670\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                               // 18671\n                                                                                                                      // 18672\n                    more = rem[0] != null;                                                                            // 18673\n                                                                                                                      // 18674\n                    // Leading zero?                                                                                  // 18675\n                    if ( !qc[0] ) qc.shift();                                                                         // 18676\n                }                                                                                                     // 18677\n                                                                                                                      // 18678\n                if ( base == BASE ) {                                                                                 // 18679\n                                                                                                                      // 18680\n                    // To calculate q.e, first get the number of digits of qc[0].                                     // 18681\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                  // 18682\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                    // 18683\n                                                                                                                      // 18684\n                // Caller is convertBase.                                                                             // 18685\n                } else {                                                                                              // 18686\n                    q.e = e;                                                                                          // 18687\n                    q.r = +more;                                                                                      // 18688\n                }                                                                                                     // 18689\n                                                                                                                      // 18690\n                return q;                                                                                             // 18691\n            };                                                                                                        // 18692\n        })();                                                                                                         // 18693\n                                                                                                                      // 18694\n                                                                                                                      // 18695\n        /*                                                                                                            // 18696\n         * Return a string representing the value of BigNumber n in fixed-point or exponential                        // 18697\n         * notation rounded to the specified decimal places or significant digits.                                    // 18698\n         *                                                                                                            // 18699\n         * n is a BigNumber.                                                                                          // 18700\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).                         // 18701\n         * rm is the rounding mode.                                                                                   // 18702\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                            // 18703\n         */                                                                                                           // 18704\n        function format( n, i, rm, caller ) {                                                                         // 18705\n            var c0, e, ne, len, str;                                                                                  // 18706\n                                                                                                                      // 18707\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                           // 18708\n              ? rm | 0 : ROUNDING_MODE;                                                                               // 18709\n                                                                                                                      // 18710\n            if ( !n.c ) return n.toString();                                                                          // 18711\n            c0 = n.c[0];                                                                                              // 18712\n            ne = n.e;                                                                                                 // 18713\n                                                                                                                      // 18714\n            if ( i == null ) {                                                                                        // 18715\n                str = coeffToString( n.c );                                                                           // 18716\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                                // 18717\n                  ? toExponential( str, ne )                                                                          // 18718\n                  : toFixedPoint( str, ne );                                                                          // 18719\n            } else {                                                                                                  // 18720\n                n = round( new BigNumber(n), i, rm );                                                                 // 18721\n                                                                                                                      // 18722\n                // n.e may have changed if the value was rounded up.                                                  // 18723\n                e = n.e;                                                                                              // 18724\n                                                                                                                      // 18725\n                str = coeffToString( n.c );                                                                           // 18726\n                len = str.length;                                                                                     // 18727\n                                                                                                                      // 18728\n                // toPrecision returns exponential notation if the number of significant digits                       // 18729\n                // specified is less than the number of digits necessary to represent the integer                     // 18730\n                // part of the value in fixed-point notation.                                                         // 18731\n                                                                                                                      // 18732\n                // Exponential notation.                                                                              // 18733\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                                // 18734\n                                                                                                                      // 18735\n                    // Append zeros?                                                                                  // 18736\n                    for ( ; len < i; str += '0', len++ );                                                             // 18737\n                    str = toExponential( str, e );                                                                    // 18738\n                                                                                                                      // 18739\n                // Fixed-point notation.                                                                              // 18740\n                } else {                                                                                              // 18741\n                    i -= ne;                                                                                          // 18742\n                    str = toFixedPoint( str, e );                                                                     // 18743\n                                                                                                                      // 18744\n                    // Append zeros?                                                                                  // 18745\n                    if ( e + 1 > len ) {                                                                              // 18746\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                           // 18747\n                    } else {                                                                                          // 18748\n                        i += e - len;                                                                                 // 18749\n                        if ( i > 0 ) {                                                                                // 18750\n                            if ( e + 1 == len ) str += '.';                                                           // 18751\n                            for ( ; i--; str += '0' );                                                                // 18752\n                        }                                                                                             // 18753\n                    }                                                                                                 // 18754\n                }                                                                                                     // 18755\n            }                                                                                                         // 18756\n                                                                                                                      // 18757\n            return n.s < 0 && c0 ? '-' + str : str;                                                                   // 18758\n        }                                                                                                             // 18759\n                                                                                                                      // 18760\n                                                                                                                      // 18761\n        // Handle BigNumber.max and BigNumber.min.                                                                    // 18762\n        function maxOrMin( args, method ) {                                                                           // 18763\n            var m, n,                                                                                                 // 18764\n                i = 0;                                                                                                // 18765\n                                                                                                                      // 18766\n            if ( isArray( args[0] ) ) args = args[0];                                                                 // 18767\n            m = new BigNumber( args[0] );                                                                             // 18768\n                                                                                                                      // 18769\n            for ( ; ++i < args.length; ) {                                                                            // 18770\n                n = new BigNumber( args[i] );                                                                         // 18771\n                                                                                                                      // 18772\n                // If any number is NaN, return NaN.                                                                  // 18773\n                if ( !n.s ) {                                                                                         // 18774\n                    m = n;                                                                                            // 18775\n                    break;                                                                                            // 18776\n                } else if ( method.call( m, n ) ) {                                                                   // 18777\n                    m = n;                                                                                            // 18778\n                }                                                                                                     // 18779\n            }                                                                                                         // 18780\n                                                                                                                      // 18781\n            return m;                                                                                                 // 18782\n        }                                                                                                             // 18783\n                                                                                                                      // 18784\n                                                                                                                      // 18785\n        /*                                                                                                            // 18786\n         * Return true if n is an integer in range, otherwise throw.                                                  // 18787\n         * Use for argument validation when ERRORS is true.                                                           // 18788\n         */                                                                                                           // 18789\n        function intValidatorWithErrors( n, min, max, caller, name ) {                                                // 18790\n            if ( n < min || n > max || n != truncate(n) ) {                                                           // 18791\n                raise( caller, ( name || 'decimal places' ) +                                                         // 18792\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                  // 18793\n            }                                                                                                         // 18794\n                                                                                                                      // 18795\n            return true;                                                                                              // 18796\n        }                                                                                                             // 18797\n                                                                                                                      // 18798\n                                                                                                                      // 18799\n        /*                                                                                                            // 18800\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                    // 18801\n         * Called by minus, plus and times.                                                                           // 18802\n         */                                                                                                           // 18803\n        function normalise( n, c, e ) {                                                                               // 18804\n            var i = 1,                                                                                                // 18805\n                j = c.length;                                                                                         // 18806\n                                                                                                                      // 18807\n             // Remove trailing zeros.                                                                                // 18808\n            for ( ; !c[--j]; c.pop() );                                                                               // 18809\n                                                                                                                      // 18810\n            // Calculate the base 10 exponent. First get the number of digits of c[0].                                // 18811\n            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                  // 18812\n                                                                                                                      // 18813\n            // Overflow?                                                                                              // 18814\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                           // 18815\n                                                                                                                      // 18816\n                // Infinity.                                                                                          // 18817\n                n.c = n.e = null;                                                                                     // 18818\n                                                                                                                      // 18819\n            // Underflow?                                                                                             // 18820\n            } else if ( e < MIN_EXP ) {                                                                               // 18821\n                                                                                                                      // 18822\n                // Zero.                                                                                              // 18823\n                n.c = [ n.e = 0 ];                                                                                    // 18824\n            } else {                                                                                                  // 18825\n                n.e = e;                                                                                              // 18826\n                n.c = c;                                                                                              // 18827\n            }                                                                                                         // 18828\n                                                                                                                      // 18829\n            return n;                                                                                                 // 18830\n        }                                                                                                             // 18831\n                                                                                                                      // 18832\n                                                                                                                      // 18833\n        // Handle values that fail the validity test in BigNumber.                                                    // 18834\n        parseNumeric = (function () {                                                                                 // 18835\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,                                                           // 18836\n                dotAfter = /^([^.]+)\\.$/,                                                                             // 18837\n                dotBefore = /^\\.([^.]+)$/,                                                                            // 18838\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                               // 18839\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;                                                      // 18840\n                                                                                                                      // 18841\n            return function ( x, str, num, b ) {                                                                      // 18842\n                var base,                                                                                             // 18843\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                              // 18844\n                                                                                                                      // 18845\n                // No exception on ±Infinity or NaN.                                                                  // 18846\n                if ( isInfinityOrNaN.test(s) ) {                                                                      // 18847\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                           // 18848\n                } else {                                                                                              // 18849\n                    if ( !num ) {                                                                                     // 18850\n                                                                                                                      // 18851\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i                                                 // 18852\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                           // 18853\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                         // 18854\n                            return !b || b == base ? p1 : m;                                                          // 18855\n                        });                                                                                           // 18856\n                                                                                                                      // 18857\n                        if (b) {                                                                                      // 18858\n                            base = b;                                                                                 // 18859\n                                                                                                                      // 18860\n                            // E.g. '1.' to '1', '.1' to '0.1'                                                        // 18861\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                             // 18862\n                        }                                                                                             // 18863\n                                                                                                                      // 18864\n                        if ( str != s ) return new BigNumber( s, base );                                              // 18865\n                    }                                                                                                 // 18866\n                                                                                                                      // 18867\n                    // 'new BigNumber() not a number: {n}'                                                            // 18868\n                    // 'new BigNumber() not a base {b} number: {n}'                                                   // 18869\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                    // 18870\n                    x.s = null;                                                                                       // 18871\n                }                                                                                                     // 18872\n                                                                                                                      // 18873\n                x.c = x.e = null;                                                                                     // 18874\n                id = 0;                                                                                               // 18875\n            }                                                                                                         // 18876\n        })();                                                                                                         // 18877\n                                                                                                                      // 18878\n                                                                                                                      // 18879\n        // Throw a BigNumber Error.                                                                                   // 18880\n        function raise( caller, msg, val ) {                                                                          // 18881\n            var error = new Error( [                                                                                  // 18882\n                'new BigNumber',     // 0                                                                             // 18883\n                'cmp',               // 1                                                                             // 18884\n                'config',            // 2                                                                             // 18885\n                'div',               // 3                                                                             // 18886\n                'divToInt',          // 4                                                                             // 18887\n                'eq',                // 5                                                                             // 18888\n                'gt',                // 6                                                                             // 18889\n                'gte',               // 7                                                                             // 18890\n                'lt',                // 8                                                                             // 18891\n                'lte',               // 9                                                                             // 18892\n                'minus',             // 10                                                                            // 18893\n                'mod',               // 11                                                                            // 18894\n                'plus',              // 12                                                                            // 18895\n                'precision',         // 13                                                                            // 18896\n                'random',            // 14                                                                            // 18897\n                'round',             // 15                                                                            // 18898\n                'shift',             // 16                                                                            // 18899\n                'times',             // 17                                                                            // 18900\n                'toDigits',          // 18                                                                            // 18901\n                'toExponential',     // 19                                                                            // 18902\n                'toFixed',           // 20                                                                            // 18903\n                'toFormat',          // 21                                                                            // 18904\n                'toFraction',        // 22                                                                            // 18905\n                'pow',               // 23                                                                            // 18906\n                'toPrecision',       // 24                                                                            // 18907\n                'toString',          // 25                                                                            // 18908\n                'BigNumber'          // 26                                                                            // 18909\n            ][caller] + '() ' + msg + ': ' + val );                                                                   // 18910\n                                                                                                                      // 18911\n            error.name = 'BigNumber Error';                                                                           // 18912\n            id = 0;                                                                                                   // 18913\n            throw error;                                                                                              // 18914\n        }                                                                                                             // 18915\n                                                                                                                      // 18916\n                                                                                                                      // 18917\n        /*                                                                                                            // 18918\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                        // 18919\n         * If r is truthy, it is known that there are more digits after the rounding digit.                           // 18920\n         */                                                                                                           // 18921\n        function round( x, sd, rm, r ) {                                                                              // 18922\n            var d, i, j, k, n, ni, rd,                                                                                // 18923\n                xc = x.c,                                                                                             // 18924\n                pows10 = POWS_TEN;                                                                                    // 18925\n                                                                                                                      // 18926\n            // if x is not Infinity or NaN...                                                                         // 18927\n            if (xc) {                                                                                                 // 18928\n                                                                                                                      // 18929\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                   // 18930\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.                      // 18931\n                // ni is the index of n within x.c.                                                                   // 18932\n                // d is the number of digits of n.                                                                    // 18933\n                // i is the index of rd within n including leading zeros.                                             // 18934\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).                               // 18935\n                out: {                                                                                                // 18936\n                                                                                                                      // 18937\n                    // Get the number of digits of the first element of xc.                                           // 18938\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                  // 18939\n                    i = sd - d;                                                                                       // 18940\n                                                                                                                      // 18941\n                    // If the rounding digit is in the first element of xc...                                         // 18942\n                    if ( i < 0 ) {                                                                                    // 18943\n                        i += LOG_BASE;                                                                                // 18944\n                        j = sd;                                                                                       // 18945\n                        n = xc[ ni = 0 ];                                                                             // 18946\n                                                                                                                      // 18947\n                        // Get the rounding digit at index j of n.                                                    // 18948\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                        // 18949\n                    } else {                                                                                          // 18950\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                        // 18951\n                                                                                                                      // 18952\n                        if ( ni >= xc.length ) {                                                                      // 18953\n                                                                                                                      // 18954\n                            if (r) {                                                                                  // 18955\n                                                                                                                      // 18956\n                                // Needed by sqrt.                                                                    // 18957\n                                for ( ; xc.length <= ni; xc.push(0) );                                                // 18958\n                                n = rd = 0;                                                                           // 18959\n                                d = 1;                                                                                // 18960\n                                i %= LOG_BASE;                                                                        // 18961\n                                j = i - LOG_BASE + 1;                                                                 // 18962\n                            } else {                                                                                  // 18963\n                                break out;                                                                            // 18964\n                            }                                                                                         // 18965\n                        } else {                                                                                      // 18966\n                            n = k = xc[ni];                                                                           // 18967\n                                                                                                                      // 18968\n                            // Get the number of digits of n.                                                         // 18969\n                            for ( d = 1; k >= 10; k /= 10, d++ );                                                     // 18970\n                                                                                                                      // 18971\n                            // Get the index of rd within n.                                                          // 18972\n                            i %= LOG_BASE;                                                                            // 18973\n                                                                                                                      // 18974\n                            // Get the index of rd within n, adjusted for leading zeros.                              // 18975\n                            // The number of leading zeros of n is given by LOG_BASE - d.                             // 18976\n                            j = i - LOG_BASE + d;                                                                     // 18977\n                                                                                                                      // 18978\n                            // Get the rounding digit at index j of n.                                                // 18979\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                        // 18980\n                        }                                                                                             // 18981\n                    }                                                                                                 // 18982\n                                                                                                                      // 18983\n                    r = r || sd < 0 ||                                                                                // 18984\n                                                                                                                      // 18985\n                    // Are there any non-zero digits after the rounding digit?                                        // 18986\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                  // 18987\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                   // 18988\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                  // 18989\n                                                                                                                      // 18990\n                    r = rm < 4                                                                                        // 18991\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                       // 18992\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                             // 18993\n                                                                                                                      // 18994\n                        // Check whether the digit to the left of the rounding digit is odd.                          // 18995\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                      // 18996\n                          rm == ( x.s < 0 ? 8 : 7 ) );                                                                // 18997\n                                                                                                                      // 18998\n                    if ( sd < 1 || !xc[0] ) {                                                                         // 18999\n                        xc.length = 0;                                                                                // 19000\n                                                                                                                      // 19001\n                        if (r) {                                                                                      // 19002\n                                                                                                                      // 19003\n                            // Convert sd to decimal places.                                                          // 19004\n                            sd -= x.e + 1;                                                                            // 19005\n                                                                                                                      // 19006\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                       // 19007\n                            xc[0] = pows10[ sd % LOG_BASE ];                                                          // 19008\n                            x.e = -sd || 0;                                                                           // 19009\n                        } else {                                                                                      // 19010\n                                                                                                                      // 19011\n                            // Zero.                                                                                  // 19012\n                            xc[0] = x.e = 0;                                                                          // 19013\n                        }                                                                                             // 19014\n                                                                                                                      // 19015\n                        return x;                                                                                     // 19016\n                    }                                                                                                 // 19017\n                                                                                                                      // 19018\n                    // Remove excess digits.                                                                          // 19019\n                    if ( i == 0 ) {                                                                                   // 19020\n                        xc.length = ni;                                                                               // 19021\n                        k = 1;                                                                                        // 19022\n                        ni--;                                                                                         // 19023\n                    } else {                                                                                          // 19024\n                        xc.length = ni + 1;                                                                           // 19025\n                        k = pows10[ LOG_BASE - i ];                                                                   // 19026\n                                                                                                                      // 19027\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                       // 19028\n                        // j > 0 means i > number of leading zeros of n.                                              // 19029\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                        // 19030\n                    }                                                                                                 // 19031\n                                                                                                                      // 19032\n                    // Round up?                                                                                      // 19033\n                    if (r) {                                                                                          // 19034\n                                                                                                                      // 19035\n                        for ( ; ; ) {                                                                                 // 19036\n                                                                                                                      // 19037\n                            // If the digit to be rounded up is in the first element of xc...                         // 19038\n                            if ( ni == 0 ) {                                                                          // 19039\n                                                                                                                      // 19040\n                                // i will be the length of xc[0] before k is added.                                   // 19041\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                      // 19042\n                                j = xc[0] += k;                                                                       // 19043\n                                for ( k = 1; j >= 10; j /= 10, k++ );                                                 // 19044\n                                                                                                                      // 19045\n                                // if i != k the length has increased.                                                // 19046\n                                if ( i != k ) {                                                                       // 19047\n                                    x.e++;                                                                            // 19048\n                                    if ( xc[0] == BASE ) xc[0] = 1;                                                   // 19049\n                                }                                                                                     // 19050\n                                                                                                                      // 19051\n                                break;                                                                                // 19052\n                            } else {                                                                                  // 19053\n                                xc[ni] += k;                                                                          // 19054\n                                if ( xc[ni] != BASE ) break;                                                          // 19055\n                                xc[ni--] = 0;                                                                         // 19056\n                                k = 1;                                                                                // 19057\n                            }                                                                                         // 19058\n                        }                                                                                             // 19059\n                    }                                                                                                 // 19060\n                                                                                                                      // 19061\n                    // Remove trailing zeros.                                                                         // 19062\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                   // 19063\n                }                                                                                                     // 19064\n                                                                                                                      // 19065\n                // Overflow? Infinity.                                                                                // 19066\n                if ( x.e > MAX_EXP ) {                                                                                // 19067\n                    x.c = x.e = null;                                                                                 // 19068\n                                                                                                                      // 19069\n                // Underflow? Zero.                                                                                   // 19070\n                } else if ( x.e < MIN_EXP ) {                                                                         // 19071\n                    x.c = [ x.e = 0 ];                                                                                // 19072\n                }                                                                                                     // 19073\n            }                                                                                                         // 19074\n                                                                                                                      // 19075\n            return x;                                                                                                 // 19076\n        }                                                                                                             // 19077\n                                                                                                                      // 19078\n                                                                                                                      // 19079\n        // PROTOTYPE/INSTANCE METHODS                                                                                 // 19080\n                                                                                                                      // 19081\n                                                                                                                      // 19082\n        /*                                                                                                            // 19083\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.                                // 19084\n         */                                                                                                           // 19085\n        P.absoluteValue = P.abs = function () {                                                                       // 19086\n            var x = new BigNumber(this);                                                                              // 19087\n            if ( x.s < 0 ) x.s = 1;                                                                                   // 19088\n            return x;                                                                                                 // 19089\n        };                                                                                                            // 19090\n                                                                                                                      // 19091\n                                                                                                                      // 19092\n        /*                                                                                                            // 19093\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                       // 19094\n         * number in the direction of Infinity.                                                                       // 19095\n         */                                                                                                           // 19096\n        P.ceil = function () {                                                                                        // 19097\n            return round( new BigNumber(this), this.e + 1, 2 );                                                       // 19098\n        };                                                                                                            // 19099\n                                                                                                                      // 19100\n                                                                                                                      // 19101\n        /*                                                                                                            // 19102\n         * Return                                                                                                     // 19103\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                             // 19104\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                               // 19105\n         * 0 if they have the same value,                                                                             // 19106\n         * or null if the value of either is NaN.                                                                     // 19107\n         */                                                                                                           // 19108\n        P.comparedTo = P.cmp = function ( y, b ) {                                                                    // 19109\n            id = 1;                                                                                                   // 19110\n            return compare( this, new BigNumber( y, b ) );                                                            // 19111\n        };                                                                                                            // 19112\n                                                                                                                      // 19113\n                                                                                                                      // 19114\n        /*                                                                                                            // 19115\n         * Return the number of decimal places of the value of this BigNumber, or null if the value                   // 19116\n         * of this BigNumber is ±Infinity or NaN.                                                                     // 19117\n         */                                                                                                           // 19118\n        P.decimalPlaces = P.dp = function () {                                                                        // 19119\n            var n, v,                                                                                                 // 19120\n                c = this.c;                                                                                           // 19121\n                                                                                                                      // 19122\n            if ( !c ) return null;                                                                                    // 19123\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                  // 19124\n                                                                                                                      // 19125\n            // Subtract the number of trailing zeros of the last number.                                              // 19126\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                      // 19127\n            if ( n < 0 ) n = 0;                                                                                       // 19128\n                                                                                                                      // 19129\n            return n;                                                                                                 // 19130\n        };                                                                                                            // 19131\n                                                                                                                      // 19132\n                                                                                                                      // 19133\n        /*                                                                                                            // 19134\n         *  n / 0 = I                                                                                                 // 19135\n         *  n / N = N                                                                                                 // 19136\n         *  n / I = 0                                                                                                 // 19137\n         *  0 / n = 0                                                                                                 // 19138\n         *  0 / 0 = N                                                                                                 // 19139\n         *  0 / N = N                                                                                                 // 19140\n         *  0 / I = 0                                                                                                 // 19141\n         *  N / n = N                                                                                                 // 19142\n         *  N / 0 = N                                                                                                 // 19143\n         *  N / N = N                                                                                                 // 19144\n         *  N / I = N                                                                                                 // 19145\n         *  I / n = I                                                                                                 // 19146\n         *  I / 0 = I                                                                                                 // 19147\n         *  I / N = N                                                                                                 // 19148\n         *  I / I = N                                                                                                 // 19149\n         *                                                                                                            // 19150\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                  // 19151\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                    // 19152\n         */                                                                                                           // 19153\n        P.dividedBy = P.div = function ( y, b ) {                                                                     // 19154\n            id = 3;                                                                                                   // 19155\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                 // 19156\n        };                                                                                                            // 19157\n                                                                                                                      // 19158\n                                                                                                                      // 19159\n        /*                                                                                                            // 19160\n         * Return a new BigNumber whose value is the integer part of dividing the value of this                       // 19161\n         * BigNumber by the value of BigNumber(y, b).                                                                 // 19162\n         */                                                                                                           // 19163\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                       // 19164\n            id = 4;                                                                                                   // 19165\n            return div( this, new BigNumber( y, b ), 0, 1 );                                                          // 19166\n        };                                                                                                            // 19167\n                                                                                                                      // 19168\n                                                                                                                      // 19169\n        /*                                                                                                            // 19170\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                       // 19171\n         * otherwise returns false.                                                                                   // 19172\n         */                                                                                                           // 19173\n        P.equals = P.eq = function ( y, b ) {                                                                         // 19174\n            id = 5;                                                                                                   // 19175\n            return compare( this, new BigNumber( y, b ) ) === 0;                                                      // 19176\n        };                                                                                                            // 19177\n                                                                                                                      // 19178\n                                                                                                                      // 19179\n        /*                                                                                                            // 19180\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                       // 19181\n         * number in the direction of -Infinity.                                                                      // 19182\n         */                                                                                                           // 19183\n        P.floor = function () {                                                                                       // 19184\n            return round( new BigNumber(this), this.e + 1, 3 );                                                       // 19185\n        };                                                                                                            // 19186\n                                                                                                                      // 19187\n                                                                                                                      // 19188\n        /*                                                                                                            // 19189\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                   // 19190\n         * otherwise returns false.                                                                                   // 19191\n         */                                                                                                           // 19192\n        P.greaterThan = P.gt = function ( y, b ) {                                                                    // 19193\n            id = 6;                                                                                                   // 19194\n            return compare( this, new BigNumber( y, b ) ) > 0;                                                        // 19195\n        };                                                                                                            // 19196\n                                                                                                                      // 19197\n                                                                                                                      // 19198\n        /*                                                                                                            // 19199\n         * Return true if the value of this BigNumber is greater than or equal to the value of                        // 19200\n         * BigNumber(y, b), otherwise returns false.                                                                  // 19201\n         */                                                                                                           // 19202\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                          // 19203\n            id = 7;                                                                                                   // 19204\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                   // 19205\n                                                                                                                      // 19206\n        };                                                                                                            // 19207\n                                                                                                                      // 19208\n                                                                                                                      // 19209\n        /*                                                                                                            // 19210\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                    // 19211\n         */                                                                                                           // 19212\n        P.isFinite = function () {                                                                                    // 19213\n            return !!this.c;                                                                                          // 19214\n        };                                                                                                            // 19215\n                                                                                                                      // 19216\n                                                                                                                      // 19217\n        /*                                                                                                            // 19218\n         * Return true if the value of this BigNumber is an integer, otherwise return false.                          // 19219\n         */                                                                                                           // 19220\n        P.isInteger = P.isInt = function () {                                                                         // 19221\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                     // 19222\n        };                                                                                                            // 19223\n                                                                                                                      // 19224\n                                                                                                                      // 19225\n        /*                                                                                                            // 19226\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.                                // 19227\n         */                                                                                                           // 19228\n        P.isNaN = function () {                                                                                       // 19229\n            return !this.s;                                                                                           // 19230\n        };                                                                                                            // 19231\n                                                                                                                      // 19232\n                                                                                                                      // 19233\n        /*                                                                                                            // 19234\n         * Return true if the value of this BigNumber is negative, otherwise returns false.                           // 19235\n         */                                                                                                           // 19236\n        P.isNegative = P.isNeg = function () {                                                                        // 19237\n            return this.s < 0;                                                                                        // 19238\n        };                                                                                                            // 19239\n                                                                                                                      // 19240\n                                                                                                                      // 19241\n        /*                                                                                                            // 19242\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                            // 19243\n         */                                                                                                           // 19244\n        P.isZero = function () {                                                                                      // 19245\n            return !!this.c && this.c[0] == 0;                                                                        // 19246\n        };                                                                                                            // 19247\n                                                                                                                      // 19248\n                                                                                                                      // 19249\n        /*                                                                                                            // 19250\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                      // 19251\n         * otherwise returns false.                                                                                   // 19252\n         */                                                                                                           // 19253\n        P.lessThan = P.lt = function ( y, b ) {                                                                       // 19254\n            id = 8;                                                                                                   // 19255\n            return compare( this, new BigNumber( y, b ) ) < 0;                                                        // 19256\n        };                                                                                                            // 19257\n                                                                                                                      // 19258\n                                                                                                                      // 19259\n        /*                                                                                                            // 19260\n         * Return true if the value of this BigNumber is less than or equal to the value of                           // 19261\n         * BigNumber(y, b), otherwise returns false.                                                                  // 19262\n         */                                                                                                           // 19263\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                             // 19264\n            id = 9;                                                                                                   // 19265\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                  // 19266\n        };                                                                                                            // 19267\n                                                                                                                      // 19268\n                                                                                                                      // 19269\n        /*                                                                                                            // 19270\n         *  n - 0 = n                                                                                                 // 19271\n         *  n - N = N                                                                                                 // 19272\n         *  n - I = -I                                                                                                // 19273\n         *  0 - n = -n                                                                                                // 19274\n         *  0 - 0 = 0                                                                                                 // 19275\n         *  0 - N = N                                                                                                 // 19276\n         *  0 - I = -I                                                                                                // 19277\n         *  N - n = N                                                                                                 // 19278\n         *  N - 0 = N                                                                                                 // 19279\n         *  N - N = N                                                                                                 // 19280\n         *  N - I = N                                                                                                 // 19281\n         *  I - n = I                                                                                                 // 19282\n         *  I - 0 = I                                                                                                 // 19283\n         *  I - N = N                                                                                                 // 19284\n         *  I - I = N                                                                                                 // 19285\n         *                                                                                                            // 19286\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                       // 19287\n         * BigNumber(y, b).                                                                                           // 19288\n         */                                                                                                           // 19289\n        P.minus = P.sub = function ( y, b ) {                                                                         // 19290\n            var i, j, t, xLTy,                                                                                        // 19291\n                x = this,                                                                                             // 19292\n                a = x.s;                                                                                              // 19293\n                                                                                                                      // 19294\n            id = 10;                                                                                                  // 19295\n            y = new BigNumber( y, b );                                                                                // 19296\n            b = y.s;                                                                                                  // 19297\n                                                                                                                      // 19298\n            // Either NaN?                                                                                            // 19299\n            if ( !a || !b ) return new BigNumber(NaN);                                                                // 19300\n                                                                                                                      // 19301\n            // Signs differ?                                                                                          // 19302\n            if ( a != b ) {                                                                                           // 19303\n                y.s = -b;                                                                                             // 19304\n                return x.plus(y);                                                                                     // 19305\n            }                                                                                                         // 19306\n                                                                                                                      // 19307\n            var xe = x.e / LOG_BASE,                                                                                  // 19308\n                ye = y.e / LOG_BASE,                                                                                  // 19309\n                xc = x.c,                                                                                             // 19310\n                yc = y.c;                                                                                             // 19311\n                                                                                                                      // 19312\n            if ( !xe || !ye ) {                                                                                       // 19313\n                                                                                                                      // 19314\n                // Either Infinity?                                                                                   // 19315\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                        // 19316\n                                                                                                                      // 19317\n                // Either zero?                                                                                       // 19318\n                if ( !xc[0] || !yc[0] ) {                                                                             // 19319\n                                                                                                                      // 19320\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                       // 19321\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                       // 19322\n                                                                                                                      // 19323\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                   // 19324\n                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                  // 19325\n                }                                                                                                     // 19326\n            }                                                                                                         // 19327\n                                                                                                                      // 19328\n            xe = bitFloor(xe);                                                                                        // 19329\n            ye = bitFloor(ye);                                                                                        // 19330\n            xc = xc.slice();                                                                                          // 19331\n                                                                                                                      // 19332\n            // Determine which is the bigger number.                                                                  // 19333\n            if ( a = xe - ye ) {                                                                                      // 19334\n                                                                                                                      // 19335\n                if ( xLTy = a < 0 ) {                                                                                 // 19336\n                    a = -a;                                                                                           // 19337\n                    t = xc;                                                                                           // 19338\n                } else {                                                                                              // 19339\n                    ye = xe;                                                                                          // 19340\n                    t = yc;                                                                                           // 19341\n                }                                                                                                     // 19342\n                                                                                                                      // 19343\n                t.reverse();                                                                                          // 19344\n                                                                                                                      // 19345\n                // Prepend zeros to equalise exponents.                                                               // 19346\n                for ( b = a; b--; t.push(0) );                                                                        // 19347\n                t.reverse();                                                                                          // 19348\n            } else {                                                                                                  // 19349\n                                                                                                                      // 19350\n                // Exponents equal. Check digit by digit.                                                             // 19351\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                         // 19352\n                                                                                                                      // 19353\n                for ( a = b = 0; b < j; b++ ) {                                                                       // 19354\n                                                                                                                      // 19355\n                    if ( xc[b] != yc[b] ) {                                                                           // 19356\n                        xLTy = xc[b] < yc[b];                                                                         // 19357\n                        break;                                                                                        // 19358\n                    }                                                                                                 // 19359\n                }                                                                                                     // 19360\n            }                                                                                                         // 19361\n                                                                                                                      // 19362\n            // x < y? Point xc to the array of the bigger number.                                                     // 19363\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                            // 19364\n                                                                                                                      // 19365\n            b = ( j = yc.length ) - ( i = xc.length );                                                                // 19366\n                                                                                                                      // 19367\n            // Append zeros to xc if shorter.                                                                         // 19368\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                    // 19369\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                  // 19370\n            b = BASE - 1;                                                                                             // 19371\n                                                                                                                      // 19372\n            // Subtract yc from xc.                                                                                   // 19373\n            for ( ; j > a; ) {                                                                                        // 19374\n                                                                                                                      // 19375\n                if ( xc[--j] < yc[j] ) {                                                                              // 19376\n                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                          // 19377\n                    --xc[i];                                                                                          // 19378\n                    xc[j] += BASE;                                                                                    // 19379\n                }                                                                                                     // 19380\n                                                                                                                      // 19381\n                xc[j] -= yc[j];                                                                                       // 19382\n            }                                                                                                         // 19383\n                                                                                                                      // 19384\n            // Remove leading zeros and adjust exponent accordingly.                                                  // 19385\n            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                   // 19386\n                                                                                                                      // 19387\n            // Zero?                                                                                                  // 19388\n            if ( !xc[0] ) {                                                                                           // 19389\n                                                                                                                      // 19390\n                // Following IEEE 754 (2008) 6.3,                                                                     // 19391\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                      // 19392\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                    // 19393\n                y.c = [ y.e = 0 ];                                                                                    // 19394\n                return y;                                                                                             // 19395\n            }                                                                                                         // 19396\n                                                                                                                      // 19397\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                            // 19398\n            // for finite x and y.                                                                                    // 19399\n            return normalise( y, xc, ye );                                                                            // 19400\n        };                                                                                                            // 19401\n                                                                                                                      // 19402\n                                                                                                                      // 19403\n        /*                                                                                                            // 19404\n         *   n % 0 =  N                                                                                               // 19405\n         *   n % N =  N                                                                                               // 19406\n         *   n % I =  n                                                                                               // 19407\n         *   0 % n =  0                                                                                               // 19408\n         *  -0 % n = -0                                                                                               // 19409\n         *   0 % 0 =  N                                                                                               // 19410\n         *   0 % N =  N                                                                                               // 19411\n         *   0 % I =  0                                                                                               // 19412\n         *   N % n =  N                                                                                               // 19413\n         *   N % 0 =  N                                                                                               // 19414\n         *   N % N =  N                                                                                               // 19415\n         *   N % I =  N                                                                                               // 19416\n         *   I % n =  N                                                                                               // 19417\n         *   I % 0 =  N                                                                                               // 19418\n         *   I % N =  N                                                                                               // 19419\n         *   I % I =  N                                                                                               // 19420\n         *                                                                                                            // 19421\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                      // 19422\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                           // 19423\n         */                                                                                                           // 19424\n        P.modulo = P.mod = function ( y, b ) {                                                                        // 19425\n            var q, s,                                                                                                 // 19426\n                x = this;                                                                                             // 19427\n                                                                                                                      // 19428\n            id = 11;                                                                                                  // 19429\n            y = new BigNumber( y, b );                                                                                // 19430\n                                                                                                                      // 19431\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                               // 19432\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                   // 19433\n                return new BigNumber(NaN);                                                                            // 19434\n                                                                                                                      // 19435\n            // Return x if y is Infinity or x is zero.                                                                // 19436\n            } else if ( !y.c || x.c && !x.c[0] ) {                                                                    // 19437\n                return new BigNumber(x);                                                                              // 19438\n            }                                                                                                         // 19439\n                                                                                                                      // 19440\n            if ( MODULO_MODE == 9 ) {                                                                                 // 19441\n                                                                                                                      // 19442\n                // Euclidian division: q = sign(y) * floor(x / abs(y))                                                // 19443\n                // r = x - qy    where  0 <= r < abs(y)                                                               // 19444\n                s = y.s;                                                                                              // 19445\n                y.s = 1;                                                                                              // 19446\n                q = div( x, y, 0, 3 );                                                                                // 19447\n                y.s = s;                                                                                              // 19448\n                q.s *= s;                                                                                             // 19449\n            } else {                                                                                                  // 19450\n                q = div( x, y, 0, MODULO_MODE );                                                                      // 19451\n            }                                                                                                         // 19452\n                                                                                                                      // 19453\n            return x.minus( q.times(y) );                                                                             // 19454\n        };                                                                                                            // 19455\n                                                                                                                      // 19456\n                                                                                                                      // 19457\n        /*                                                                                                            // 19458\n         * Return a new BigNumber whose value is the value of this BigNumber negated,                                 // 19459\n         * i.e. multiplied by -1.                                                                                     // 19460\n         */                                                                                                           // 19461\n        P.negated = P.neg = function () {                                                                             // 19462\n            var x = new BigNumber(this);                                                                              // 19463\n            x.s = -x.s || null;                                                                                       // 19464\n            return x;                                                                                                 // 19465\n        };                                                                                                            // 19466\n                                                                                                                      // 19467\n                                                                                                                      // 19468\n        /*                                                                                                            // 19469\n         *  n + 0 = n                                                                                                 // 19470\n         *  n + N = N                                                                                                 // 19471\n         *  n + I = I                                                                                                 // 19472\n         *  0 + n = n                                                                                                 // 19473\n         *  0 + 0 = 0                                                                                                 // 19474\n         *  0 + N = N                                                                                                 // 19475\n         *  0 + I = I                                                                                                 // 19476\n         *  N + n = N                                                                                                 // 19477\n         *  N + 0 = N                                                                                                 // 19478\n         *  N + N = N                                                                                                 // 19479\n         *  N + I = N                                                                                                 // 19480\n         *  I + n = I                                                                                                 // 19481\n         *  I + 0 = I                                                                                                 // 19482\n         *  I + N = N                                                                                                 // 19483\n         *  I + I = I                                                                                                 // 19484\n         *                                                                                                            // 19485\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                        // 19486\n         * BigNumber(y, b).                                                                                           // 19487\n         */                                                                                                           // 19488\n        P.plus = P.add = function ( y, b ) {                                                                          // 19489\n            var t,                                                                                                    // 19490\n                x = this,                                                                                             // 19491\n                a = x.s;                                                                                              // 19492\n                                                                                                                      // 19493\n            id = 12;                                                                                                  // 19494\n            y = new BigNumber( y, b );                                                                                // 19495\n            b = y.s;                                                                                                  // 19496\n                                                                                                                      // 19497\n            // Either NaN?                                                                                            // 19498\n            if ( !a || !b ) return new BigNumber(NaN);                                                                // 19499\n                                                                                                                      // 19500\n            // Signs differ?                                                                                          // 19501\n             if ( a != b ) {                                                                                          // 19502\n                y.s = -b;                                                                                             // 19503\n                return x.minus(y);                                                                                    // 19504\n            }                                                                                                         // 19505\n                                                                                                                      // 19506\n            var xe = x.e / LOG_BASE,                                                                                  // 19507\n                ye = y.e / LOG_BASE,                                                                                  // 19508\n                xc = x.c,                                                                                             // 19509\n                yc = y.c;                                                                                             // 19510\n                                                                                                                      // 19511\n            if ( !xe || !ye ) {                                                                                       // 19512\n                                                                                                                      // 19513\n                // Return ±Infinity if either ±Infinity.                                                              // 19514\n                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                      // 19515\n                                                                                                                      // 19516\n                // Either zero?                                                                                       // 19517\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                           // 19518\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                        // 19519\n            }                                                                                                         // 19520\n                                                                                                                      // 19521\n            xe = bitFloor(xe);                                                                                        // 19522\n            ye = bitFloor(ye);                                                                                        // 19523\n            xc = xc.slice();                                                                                          // 19524\n                                                                                                                      // 19525\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                           // 19526\n            if ( a = xe - ye ) {                                                                                      // 19527\n                if ( a > 0 ) {                                                                                        // 19528\n                    ye = xe;                                                                                          // 19529\n                    t = yc;                                                                                           // 19530\n                } else {                                                                                              // 19531\n                    a = -a;                                                                                           // 19532\n                    t = xc;                                                                                           // 19533\n                }                                                                                                     // 19534\n                                                                                                                      // 19535\n                t.reverse();                                                                                          // 19536\n                for ( ; a--; t.push(0) );                                                                             // 19537\n                t.reverse();                                                                                          // 19538\n            }                                                                                                         // 19539\n                                                                                                                      // 19540\n            a = xc.length;                                                                                            // 19541\n            b = yc.length;                                                                                            // 19542\n                                                                                                                      // 19543\n            // Point xc to the longer array, and b to the shorter length.                                             // 19544\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                          // 19545\n                                                                                                                      // 19546\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                         // 19547\n            for ( a = 0; b; ) {                                                                                       // 19548\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                       // 19549\n                xc[b] %= BASE;                                                                                        // 19550\n            }                                                                                                         // 19551\n                                                                                                                      // 19552\n            if (a) {                                                                                                  // 19553\n                xc.unshift(a);                                                                                        // 19554\n                ++ye;                                                                                                 // 19555\n            }                                                                                                         // 19556\n                                                                                                                      // 19557\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                             // 19558\n            // ye = MAX_EXP + 1 possible                                                                              // 19559\n            return normalise( y, xc, ye );                                                                            // 19560\n        };                                                                                                            // 19561\n                                                                                                                      // 19562\n                                                                                                                      // 19563\n        /*                                                                                                            // 19564\n         * Return the number of significant digits of the value of this BigNumber.                                    // 19565\n         *                                                                                                            // 19566\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                    // 19567\n         */                                                                                                           // 19568\n        P.precision = P.sd = function (z) {                                                                           // 19569\n            var n, v,                                                                                                 // 19570\n                x = this,                                                                                             // 19571\n                c = x.c;                                                                                              // 19572\n                                                                                                                      // 19573\n            // 'precision() argument not a boolean or binary digit: {z}'                                              // 19574\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                     // 19575\n                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                     // 19576\n                if ( z != !!z ) z = null;                                                                             // 19577\n            }                                                                                                         // 19578\n                                                                                                                      // 19579\n            if ( !c ) return null;                                                                                    // 19580\n            v = c.length - 1;                                                                                         // 19581\n            n = v * LOG_BASE + 1;                                                                                     // 19582\n                                                                                                                      // 19583\n            if ( v = c[v] ) {                                                                                         // 19584\n                                                                                                                      // 19585\n                // Subtract the number of trailing zeros of the last element.                                         // 19586\n                for ( ; v % 10 == 0; v /= 10, n-- );                                                                  // 19587\n                                                                                                                      // 19588\n                // Add the number of digits of the first element.                                                     // 19589\n                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                              // 19590\n            }                                                                                                         // 19591\n                                                                                                                      // 19592\n            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                      // 19593\n                                                                                                                      // 19594\n            return n;                                                                                                 // 19595\n        };                                                                                                            // 19596\n                                                                                                                      // 19597\n                                                                                                                      // 19598\n        /*                                                                                                            // 19599\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                  // 19600\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                        // 19601\n         * omitted.                                                                                                   // 19602\n         *                                                                                                            // 19603\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 19604\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 19605\n         *                                                                                                            // 19606\n         * 'round() decimal places out of range: {dp}'                                                                // 19607\n         * 'round() decimal places not an integer: {dp}'                                                              // 19608\n         * 'round() rounding mode not an integer: {rm}'                                                               // 19609\n         * 'round() rounding mode out of range: {rm}'                                                                 // 19610\n         */                                                                                                           // 19611\n        P.round = function ( dp, rm ) {                                                                               // 19612\n            var n = new BigNumber(this);                                                                              // 19613\n                                                                                                                      // 19614\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                       // 19615\n                round( n, ~~dp + this.e + 1, rm == null ||                                                            // 19616\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                               // 19617\n            }                                                                                                         // 19618\n                                                                                                                      // 19619\n            return n;                                                                                                 // 19620\n        };                                                                                                            // 19621\n                                                                                                                      // 19622\n                                                                                                                      // 19623\n        /*                                                                                                            // 19624\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                      // 19625\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                     // 19626\n         *                                                                                                            // 19627\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                       // 19628\n         *                                                                                                            // 19629\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                     // 19630\n         * otherwise.                                                                                                 // 19631\n         *                                                                                                            // 19632\n         * 'shift() argument not an integer: {k}'                                                                     // 19633\n         * 'shift() argument out of range: {k}'                                                                       // 19634\n         */                                                                                                           // 19635\n        P.shift = function (k) {                                                                                      // 19636\n            var n = this;                                                                                             // 19637\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                               // 19638\n                                                                                                                      // 19639\n              // k < 1e+21, or truncate(k) will produce exponential notation.                                         // 19640\n              ? n.times( '1e' + truncate(k) )                                                                         // 19641\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                     // 19642\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                         // 19643\n                : n );                                                                                                // 19644\n        };                                                                                                            // 19645\n                                                                                                                      // 19646\n                                                                                                                      // 19647\n        /*                                                                                                            // 19648\n         *  sqrt(-n) =  N                                                                                             // 19649\n         *  sqrt( N) =  N                                                                                             // 19650\n         *  sqrt(-I) =  N                                                                                             // 19651\n         *  sqrt( I) =  I                                                                                             // 19652\n         *  sqrt( 0) =  0                                                                                             // 19653\n         *  sqrt(-0) = -0                                                                                             // 19654\n         *                                                                                                            // 19655\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                      // 19656\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                     // 19657\n         */                                                                                                           // 19658\n        P.squareRoot = P.sqrt = function () {                                                                         // 19659\n            var m, n, r, rep, t,                                                                                      // 19660\n                x = this,                                                                                             // 19661\n                c = x.c,                                                                                              // 19662\n                s = x.s,                                                                                              // 19663\n                e = x.e,                                                                                              // 19664\n                dp = DECIMAL_PLACES + 4,                                                                              // 19665\n                half = new BigNumber('0.5');                                                                          // 19666\n                                                                                                                      // 19667\n            // Negative/NaN/Infinity/zero?                                                                            // 19668\n            if ( s !== 1 || !c || !c[0] ) {                                                                           // 19669\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                          // 19670\n            }                                                                                                         // 19671\n                                                                                                                      // 19672\n            // Initial estimate.                                                                                      // 19673\n            s = Math.sqrt( +x );                                                                                      // 19674\n                                                                                                                      // 19675\n            // Math.sqrt underflow/overflow?                                                                          // 19676\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                                // 19677\n            if ( s == 0 || s == 1 / 0 ) {                                                                             // 19678\n                n = coeffToString(c);                                                                                 // 19679\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                            // 19680\n                s = Math.sqrt(n);                                                                                     // 19681\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                   // 19682\n                                                                                                                      // 19683\n                if ( s == 1 / 0 ) {                                                                                   // 19684\n                    n = '1e' + e;                                                                                     // 19685\n                } else {                                                                                              // 19686\n                    n = s.toExponential();                                                                            // 19687\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                         // 19688\n                }                                                                                                     // 19689\n                                                                                                                      // 19690\n                r = new BigNumber(n);                                                                                 // 19691\n            } else {                                                                                                  // 19692\n                r = new BigNumber( s + '' );                                                                          // 19693\n            }                                                                                                         // 19694\n                                                                                                                      // 19695\n            // Check for zero.                                                                                        // 19696\n            // r could be zero if MIN_EXP is changed after the this value was created.                                // 19697\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                  // 19698\n            // coeffToString to throw.                                                                                // 19699\n            if ( r.c[0] ) {                                                                                           // 19700\n                e = r.e;                                                                                              // 19701\n                s = e + dp;                                                                                           // 19702\n                if ( s < 3 ) s = 0;                                                                                   // 19703\n                                                                                                                      // 19704\n                // Newton-Raphson iteration.                                                                          // 19705\n                for ( ; ; ) {                                                                                         // 19706\n                    t = r;                                                                                            // 19707\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                   // 19708\n                                                                                                                      // 19709\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                               // 19710\n                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                     // 19711\n                                                                                                                      // 19712\n                        // The exponent of r may here be one less than the final result exponent,                     // 19713\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                    // 19714\n                        // are indexed correctly.                                                                     // 19715\n                        if ( r.e < e ) --s;                                                                           // 19716\n                        n = n.slice( s - 3, s + 1 );                                                                  // 19717\n                                                                                                                      // 19718\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                   // 19719\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                       // 19720\n                        // iteration.                                                                                 // 19721\n                        if ( n == '9999' || !rep && n == '4999' ) {                                                   // 19722\n                                                                                                                      // 19723\n                            // On the first iteration only, check to see if rounding up gives the                     // 19724\n                            // exact result as the nines may infinitely repeat.                                       // 19725\n                            if ( !rep ) {                                                                             // 19726\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                              // 19727\n                                                                                                                      // 19728\n                                if ( t.times(t).eq(x) ) {                                                             // 19729\n                                    r = t;                                                                            // 19730\n                                    break;                                                                            // 19731\n                                }                                                                                     // 19732\n                            }                                                                                         // 19733\n                                                                                                                      // 19734\n                            dp += 4;                                                                                  // 19735\n                            s += 4;                                                                                   // 19736\n                            rep = 1;                                                                                  // 19737\n                        } else {                                                                                      // 19738\n                                                                                                                      // 19739\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                        // 19740\n                            // result. If not, then there are further digits and m will be truthy.                    // 19741\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                        // 19742\n                                                                                                                      // 19743\n                                // Truncate to the first rounding digit.                                              // 19744\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                              // 19745\n                                m = !r.times(r).eq(x);                                                                // 19746\n                            }                                                                                         // 19747\n                                                                                                                      // 19748\n                            break;                                                                                    // 19749\n                        }                                                                                             // 19750\n                    }                                                                                                 // 19751\n                }                                                                                                     // 19752\n            }                                                                                                         // 19753\n                                                                                                                      // 19754\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                            // 19755\n        };                                                                                                            // 19756\n                                                                                                                      // 19757\n                                                                                                                      // 19758\n        /*                                                                                                            // 19759\n         *  n * 0 = 0                                                                                                 // 19760\n         *  n * N = N                                                                                                 // 19761\n         *  n * I = I                                                                                                 // 19762\n         *  0 * n = 0                                                                                                 // 19763\n         *  0 * 0 = 0                                                                                                 // 19764\n         *  0 * N = N                                                                                                 // 19765\n         *  0 * I = N                                                                                                 // 19766\n         *  N * n = N                                                                                                 // 19767\n         *  N * 0 = N                                                                                                 // 19768\n         *  N * N = N                                                                                                 // 19769\n         *  N * I = N                                                                                                 // 19770\n         *  I * n = I                                                                                                 // 19771\n         *  I * 0 = N                                                                                                 // 19772\n         *  I * N = N                                                                                                 // 19773\n         *  I * I = I                                                                                                 // 19774\n         *                                                                                                            // 19775\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of                       // 19776\n         * BigNumber(y, b).                                                                                           // 19777\n         */                                                                                                           // 19778\n        P.times = P.mul = function ( y, b ) {                                                                         // 19779\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                   // 19780\n                base, sqrtBase,                                                                                       // 19781\n                x = this,                                                                                             // 19782\n                xc = x.c,                                                                                             // 19783\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                        // 19784\n                                                                                                                      // 19785\n            // Either NaN, ±Infinity or ±0?                                                                           // 19786\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                   // 19787\n                                                                                                                      // 19788\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                                // 19789\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                   // 19790\n                    y.c = y.e = y.s = null;                                                                           // 19791\n                } else {                                                                                              // 19792\n                    y.s *= x.s;                                                                                       // 19793\n                                                                                                                      // 19794\n                    // Return ±Infinity if either is ±Infinity.                                                       // 19795\n                    if ( !xc || !yc ) {                                                                               // 19796\n                        y.c = y.e = null;                                                                             // 19797\n                                                                                                                      // 19798\n                    // Return ±0 if either is ±0.                                                                     // 19799\n                    } else {                                                                                          // 19800\n                        y.c = [0];                                                                                    // 19801\n                        y.e = 0;                                                                                      // 19802\n                    }                                                                                                 // 19803\n                }                                                                                                     // 19804\n                                                                                                                      // 19805\n                return y;                                                                                             // 19806\n            }                                                                                                         // 19807\n                                                                                                                      // 19808\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                              // 19809\n            y.s *= x.s;                                                                                               // 19810\n            xcL = xc.length;                                                                                          // 19811\n            ycL = yc.length;                                                                                          // 19812\n                                                                                                                      // 19813\n            // Ensure xc points to longer array and xcL to its length.                                                // 19814\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                  // 19815\n                                                                                                                      // 19816\n            // Initialise the result array with zeros.                                                                // 19817\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                          // 19818\n                                                                                                                      // 19819\n            base = BASE;                                                                                              // 19820\n            sqrtBase = SQRT_BASE;                                                                                     // 19821\n                                                                                                                      // 19822\n            for ( i = ycL; --i >= 0; ) {                                                                              // 19823\n                c = 0;                                                                                                // 19824\n                ylo = yc[i] % sqrtBase;                                                                               // 19825\n                yhi = yc[i] / sqrtBase | 0;                                                                           // 19826\n                                                                                                                      // 19827\n                for ( k = xcL, j = i + k; j > i; ) {                                                                  // 19828\n                    xlo = xc[--k] % sqrtBase;                                                                         // 19829\n                    xhi = xc[k] / sqrtBase | 0;                                                                       // 19830\n                    m = yhi * xlo + xhi * ylo;                                                                        // 19831\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                    // 19832\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                        // 19833\n                    zc[j--] = xlo % base;                                                                             // 19834\n                }                                                                                                     // 19835\n                                                                                                                      // 19836\n                zc[j] = c;                                                                                            // 19837\n            }                                                                                                         // 19838\n                                                                                                                      // 19839\n            if (c) {                                                                                                  // 19840\n                ++e;                                                                                                  // 19841\n            } else {                                                                                                  // 19842\n                zc.shift();                                                                                           // 19843\n            }                                                                                                         // 19844\n                                                                                                                      // 19845\n            return normalise( y, zc, e );                                                                             // 19846\n        };                                                                                                            // 19847\n                                                                                                                      // 19848\n                                                                                                                      // 19849\n        /*                                                                                                            // 19850\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                  // 19851\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                           // 19852\n         *                                                                                                            // 19853\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                             // 19854\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 19855\n         *                                                                                                            // 19856\n         * 'toDigits() precision out of range: {sd}'                                                                  // 19857\n         * 'toDigits() precision not an integer: {sd}'                                                                // 19858\n         * 'toDigits() rounding mode not an integer: {rm}'                                                            // 19859\n         * 'toDigits() rounding mode out of range: {rm}'                                                              // 19860\n         */                                                                                                           // 19861\n        P.toDigits = function ( sd, rm ) {                                                                            // 19862\n            var n = new BigNumber(this);                                                                              // 19863\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                            // 19864\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                    // 19865\n            return sd ? round( n, sd, rm ) : n;                                                                       // 19866\n        };                                                                                                            // 19867\n                                                                                                                      // 19868\n                                                                                                                      // 19869\n        /*                                                                                                            // 19870\n         * Return a string representing the value of this BigNumber in exponential notation and                       // 19871\n         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                    // 19872\n         *                                                                                                            // 19873\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 19874\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 19875\n         *                                                                                                            // 19876\n         * 'toExponential() decimal places not an integer: {dp}'                                                      // 19877\n         * 'toExponential() decimal places out of range: {dp}'                                                        // 19878\n         * 'toExponential() rounding mode not an integer: {rm}'                                                       // 19879\n         * 'toExponential() rounding mode out of range: {rm}'                                                         // 19880\n         */                                                                                                           // 19881\n        P.toExponential = function ( dp, rm ) {                                                                       // 19882\n            return format( this,                                                                                      // 19883\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                 // 19884\n        };                                                                                                            // 19885\n                                                                                                                      // 19886\n                                                                                                                      // 19887\n        /*                                                                                                            // 19888\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding                  // 19889\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                      // 19890\n         *                                                                                                            // 19891\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                            // 19892\n         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                    // 19893\n         *                                                                                                            // 19894\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 19895\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 19896\n         *                                                                                                            // 19897\n         * 'toFixed() decimal places not an integer: {dp}'                                                            // 19898\n         * 'toFixed() decimal places out of range: {dp}'                                                              // 19899\n         * 'toFixed() rounding mode not an integer: {rm}'                                                             // 19900\n         * 'toFixed() rounding mode out of range: {rm}'                                                               // 19901\n         */                                                                                                           // 19902\n        P.toFixed = function ( dp, rm ) {                                                                             // 19903\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                           // 19904\n              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                   // 19905\n        };                                                                                                            // 19906\n                                                                                                                      // 19907\n                                                                                                                      // 19908\n        /*                                                                                                            // 19909\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded                   // 19910\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                  // 19911\n         * of the FORMAT object (see BigNumber.config).                                                               // 19912\n         *                                                                                                            // 19913\n         * FORMAT = {                                                                                                 // 19914\n         *      decimalSeparator : '.',                                                                               // 19915\n         *      groupSeparator : ',',                                                                                 // 19916\n         *      groupSize : 3,                                                                                        // 19917\n         *      secondaryGroupSize : 0,                                                                               // 19918\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space                                             // 19919\n         *      fractionGroupSize : 0                                                                                 // 19920\n         * };                                                                                                         // 19921\n         *                                                                                                            // 19922\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 19923\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 19924\n         *                                                                                                            // 19925\n         * 'toFormat() decimal places not an integer: {dp}'                                                           // 19926\n         * 'toFormat() decimal places out of range: {dp}'                                                             // 19927\n         * 'toFormat() rounding mode not an integer: {rm}'                                                            // 19928\n         * 'toFormat() rounding mode out of range: {rm}'                                                              // 19929\n         */                                                                                                           // 19930\n        P.toFormat = function ( dp, rm ) {                                                                            // 19931\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                        // 19932\n              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                   // 19933\n                                                                                                                      // 19934\n            if ( this.c ) {                                                                                           // 19935\n                var i,                                                                                                // 19936\n                    arr = str.split('.'),                                                                             // 19937\n                    g1 = +FORMAT.groupSize,                                                                           // 19938\n                    g2 = +FORMAT.secondaryGroupSize,                                                                  // 19939\n                    groupSeparator = FORMAT.groupSeparator,                                                           // 19940\n                    intPart = arr[0],                                                                                 // 19941\n                    fractionPart = arr[1],                                                                            // 19942\n                    isNeg = this.s < 0,                                                                               // 19943\n                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                   // 19944\n                    len = intDigits.length;                                                                           // 19945\n                                                                                                                      // 19946\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                            // 19947\n                                                                                                                      // 19948\n                if ( g1 > 0 && len > 0 ) {                                                                            // 19949\n                    i = len % g1 || g1;                                                                               // 19950\n                    intPart = intDigits.substr( 0, i );                                                               // 19951\n                                                                                                                      // 19952\n                    for ( ; i < len; i += g1 ) {                                                                      // 19953\n                        intPart += groupSeparator + intDigits.substr( i, g1 );                                        // 19954\n                    }                                                                                                 // 19955\n                                                                                                                      // 19956\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                     // 19957\n                    if (isNeg) intPart = '-' + intPart;                                                               // 19958\n                }                                                                                                     // 19959\n                                                                                                                      // 19960\n                str = fractionPart                                                                                    // 19961\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                          // 19962\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),                                  // 19963\n                      '$&' + FORMAT.fractionGroupSeparator )                                                          // 19964\n                    : fractionPart )                                                                                  // 19965\n                  : intPart;                                                                                          // 19966\n            }                                                                                                         // 19967\n                                                                                                                      // 19968\n            return str;                                                                                               // 19969\n        };                                                                                                            // 19970\n                                                                                                                      // 19971\n                                                                                                                      // 19972\n        /*                                                                                                            // 19973\n         * Return a string array representing the value of this BigNumber as a simple fraction with                   // 19974\n         * an integer numerator and an integer denominator. The denominator will be a positive                        // 19975\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum                       // 19976\n         * denominator is not specified, the denominator will be the lowest value necessary to                        // 19977\n         * represent the number exactly.                                                                              // 19978\n         *                                                                                                            // 19979\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                       // 19980\n         *                                                                                                            // 19981\n         * 'toFraction() max denominator not an integer: {md}'                                                        // 19982\n         * 'toFraction() max denominator out of range: {md}'                                                          // 19983\n         */                                                                                                           // 19984\n        P.toFraction = function (md) {                                                                                // 19985\n            var arr, d0, d2, e, exp, n, n0, q, s,                                                                     // 19986\n                k = ERRORS,                                                                                           // 19987\n                x = this,                                                                                             // 19988\n                xc = x.c,                                                                                             // 19989\n                d = new BigNumber(ONE),                                                                               // 19990\n                n1 = d0 = new BigNumber(ONE),                                                                         // 19991\n                d1 = n0 = new BigNumber(ONE);                                                                         // 19992\n                                                                                                                      // 19993\n            if ( md != null ) {                                                                                       // 19994\n                ERRORS = false;                                                                                       // 19995\n                n = new BigNumber(md);                                                                                // 19996\n                ERRORS = k;                                                                                           // 19997\n                                                                                                                      // 19998\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                              // 19999\n                                                                                                                      // 20000\n                    if (ERRORS) {                                                                                     // 20001\n                        raise( 22,                                                                                    // 20002\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                       // 20003\n                    }                                                                                                 // 20004\n                                                                                                                      // 20005\n                    // ERRORS is false:                                                                               // 20006\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.                         // 20007\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                     // 20008\n                }                                                                                                     // 20009\n            }                                                                                                         // 20010\n                                                                                                                      // 20011\n            if ( !xc ) return x.toString();                                                                           // 20012\n            s = coeffToString(xc);                                                                                    // 20013\n                                                                                                                      // 20014\n            // Determine initial denominator.                                                                         // 20015\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                   // 20016\n            e = d.e = s.length - x.e - 1;                                                                             // 20017\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                   // 20018\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                        // 20019\n                                                                                                                      // 20020\n            exp = MAX_EXP;                                                                                            // 20021\n            MAX_EXP = 1 / 0;                                                                                          // 20022\n            n = new BigNumber(s);                                                                                     // 20023\n                                                                                                                      // 20024\n            // n0 = d1 = 0                                                                                            // 20025\n            n0.c[0] = 0;                                                                                              // 20026\n                                                                                                                      // 20027\n            for ( ; ; )  {                                                                                            // 20028\n                q = div( n, d, 0, 1 );                                                                                // 20029\n                d2 = d0.plus( q.times(d1) );                                                                          // 20030\n                if ( d2.cmp(md) == 1 ) break;                                                                         // 20031\n                d0 = d1;                                                                                              // 20032\n                d1 = d2;                                                                                              // 20033\n                n1 = n0.plus( q.times( d2 = n1 ) );                                                                   // 20034\n                n0 = d2;                                                                                              // 20035\n                d = n.minus( q.times( d2 = d ) );                                                                     // 20036\n                n = d2;                                                                                               // 20037\n            }                                                                                                         // 20038\n                                                                                                                      // 20039\n            d2 = div( md.minus(d0), d1, 0, 1 );                                                                       // 20040\n            n0 = n0.plus( d2.times(n1) );                                                                             // 20041\n            d0 = d0.plus( d2.times(d1) );                                                                             // 20042\n            n0.s = n1.s = x.s;                                                                                        // 20043\n            e *= 2;                                                                                                   // 20044\n                                                                                                                      // 20045\n            // Determine which fraction is closer to x, n0/d0 or n1/d1                                                // 20046\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                 // 20047\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                                // 20048\n                    ? [ n1.toString(), d1.toString() ]                                                                // 20049\n                    : [ n0.toString(), d0.toString() ];                                                               // 20050\n                                                                                                                      // 20051\n            MAX_EXP = exp;                                                                                            // 20052\n            return arr;                                                                                               // 20053\n        };                                                                                                            // 20054\n                                                                                                                      // 20055\n                                                                                                                      // 20056\n        /*                                                                                                            // 20057\n         * Return the value of this BigNumber converted to a number primitive.                                        // 20058\n         */                                                                                                           // 20059\n        P.toNumber = function () {                                                                                    // 20060\n            var x = this;                                                                                             // 20061\n                                                                                                                      // 20062\n            // Ensure zero has correct sign.                                                                          // 20063\n            return +x || ( x.s ? x.s * 0 : NaN );                                                                     // 20064\n        };                                                                                                            // 20065\n                                                                                                                      // 20066\n                                                                                                                      // 20067\n        /*                                                                                                            // 20068\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                       // 20069\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                      // 20070\n         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.                                     // 20071\n         *                                                                                                            // 20072\n         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.                                       // 20073\n         * (Performs 54 loop iterations for n of 9007199254740992.)                                                   // 20074\n         *                                                                                                            // 20075\n         * 'pow() exponent not an integer: {n}'                                                                       // 20076\n         * 'pow() exponent out of range: {n}'                                                                         // 20077\n         */                                                                                                           // 20078\n        P.toPower = P.pow = function (n) {                                                                            // 20079\n            var k, y,                                                                                                 // 20080\n                i = mathfloor( n < 0 ? -n : +n ),                                                                     // 20081\n                x = this;                                                                                             // 20082\n                                                                                                                      // 20083\n            // Pass ±Infinity to Math.pow if exponent is out of range.                                                // 20084\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                             // 20085\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                 // 20086\n                parseFloat(n) != n && !( n = NaN ) ) ) {                                                              // 20087\n                return new BigNumber( Math.pow( +x, n ) );                                                            // 20088\n            }                                                                                                         // 20089\n                                                                                                                      // 20090\n            // Truncating each coefficient array to a length of k after each multiplication equates                   // 20091\n            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a                     // 20092\n            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)                    // 20093\n            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;                                         // 20094\n            y = new BigNumber(ONE);                                                                                   // 20095\n                                                                                                                      // 20096\n            for ( ; ; ) {                                                                                             // 20097\n                                                                                                                      // 20098\n                if ( i % 2 ) {                                                                                        // 20099\n                    y = y.times(x);                                                                                   // 20100\n                    if ( !y.c ) break;                                                                                // 20101\n                    if ( k && y.c.length > k ) y.c.length = k;                                                        // 20102\n                }                                                                                                     // 20103\n                                                                                                                      // 20104\n                i = mathfloor( i / 2 );                                                                               // 20105\n                if ( !i ) break;                                                                                      // 20106\n                                                                                                                      // 20107\n                x = x.times(x);                                                                                       // 20108\n                if ( k && x.c && x.c.length > k ) x.c.length = k;                                                     // 20109\n            }                                                                                                         // 20110\n                                                                                                                      // 20111\n            if ( n < 0 ) y = ONE.div(y);                                                                              // 20112\n            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                                  // 20113\n        };                                                                                                            // 20114\n                                                                                                                      // 20115\n                                                                                                                      // 20116\n        /*                                                                                                            // 20117\n         * Return a string representing the value of this BigNumber rounded to sd significant digits                  // 20118\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                           // 20119\n         * necessary to represent the integer part of the value in fixed-point notation, then use                     // 20120\n         * exponential notation.                                                                                      // 20121\n         *                                                                                                            // 20122\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                             // 20123\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 20124\n         *                                                                                                            // 20125\n         * 'toPrecision() precision not an integer: {sd}'                                                             // 20126\n         * 'toPrecision() precision out of range: {sd}'                                                               // 20127\n         * 'toPrecision() rounding mode not an integer: {rm}'                                                         // 20128\n         * 'toPrecision() rounding mode out of range: {rm}'                                                           // 20129\n         */                                                                                                           // 20130\n        P.toPrecision = function ( sd, rm ) {                                                                         // 20131\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                              // 20132\n              ? sd | 0 : null, rm, 24 );                                                                              // 20133\n        };                                                                                                            // 20134\n                                                                                                                      // 20135\n                                                                                                                      // 20136\n        /*                                                                                                            // 20137\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                     // 20138\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                  // 20139\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                      // 20140\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                  // 20141\n         * TO_EXP_NEG, return exponential notation.                                                                   // 20142\n         *                                                                                                            // 20143\n         * [b] {number} Integer, 2 to 64 inclusive.                                                                   // 20144\n         *                                                                                                            // 20145\n         * 'toString() base not an integer: {b}'                                                                      // 20146\n         * 'toString() base out of range: {b}'                                                                        // 20147\n         */                                                                                                           // 20148\n        P.toString = function (b) {                                                                                   // 20149\n            var str,                                                                                                  // 20150\n                n = this,                                                                                             // 20151\n                s = n.s,                                                                                              // 20152\n                e = n.e;                                                                                              // 20153\n                                                                                                                      // 20154\n            // Infinity or NaN?                                                                                       // 20155\n            if ( e === null ) {                                                                                       // 20156\n                                                                                                                      // 20157\n                if (s) {                                                                                              // 20158\n                    str = 'Infinity';                                                                                 // 20159\n                    if ( s < 0 ) str = '-' + str;                                                                     // 20160\n                } else {                                                                                              // 20161\n                    str = 'NaN';                                                                                      // 20162\n                }                                                                                                     // 20163\n            } else {                                                                                                  // 20164\n                str = coeffToString( n.c );                                                                           // 20165\n                                                                                                                      // 20166\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                             // 20167\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                          // 20168\n                      ? toExponential( str, e )                                                                       // 20169\n                      : toFixedPoint( str, e );                                                                       // 20170\n                } else {                                                                                              // 20171\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                        // 20172\n                }                                                                                                     // 20173\n                                                                                                                      // 20174\n                if ( s < 0 && n.c[0] ) str = '-' + str;                                                               // 20175\n            }                                                                                                         // 20176\n                                                                                                                      // 20177\n            return str;                                                                                               // 20178\n        };                                                                                                            // 20179\n                                                                                                                      // 20180\n                                                                                                                      // 20181\n        /*                                                                                                            // 20182\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                     // 20183\n         * number.                                                                                                    // 20184\n         */                                                                                                           // 20185\n        P.truncated = P.trunc = function () {                                                                         // 20186\n            return round( new BigNumber(this), this.e + 1, 1 );                                                       // 20187\n        };                                                                                                            // 20188\n                                                                                                                      // 20189\n                                                                                                                      // 20190\n                                                                                                                      // 20191\n        /*                                                                                                            // 20192\n         * Return as toString, but do not accept a base argument.                                                     // 20193\n         */                                                                                                           // 20194\n        P.valueOf = P.toJSON = function () {                                                                          // 20195\n            return this.toString();                                                                                   // 20196\n        };                                                                                                            // 20197\n                                                                                                                      // 20198\n                                                                                                                      // 20199\n        // Aliases for BigDecimal methods.                                                                            // 20200\n        //P.add = P.plus;         // P.add included above                                                             // 20201\n        //P.subtract = P.minus;   // P.sub included above                                                             // 20202\n        //P.multiply = P.times;   // P.mul included above                                                             // 20203\n        //P.divide = P.div;                                                                                           // 20204\n        //P.remainder = P.mod;                                                                                        // 20205\n        //P.compareTo = P.cmp;                                                                                        // 20206\n        //P.negate = P.neg;                                                                                           // 20207\n                                                                                                                      // 20208\n                                                                                                                      // 20209\n        if ( configObj != null ) BigNumber.config(configObj);                                                         // 20210\n                                                                                                                      // 20211\n        return BigNumber;                                                                                             // 20212\n    }                                                                                                                 // 20213\n                                                                                                                      // 20214\n                                                                                                                      // 20215\n    // PRIVATE HELPER FUNCTIONS                                                                                       // 20216\n                                                                                                                      // 20217\n                                                                                                                      // 20218\n    function bitFloor(n) {                                                                                            // 20219\n        var i = n | 0;                                                                                                // 20220\n        return n > 0 || n === i ? i : i - 1;                                                                          // 20221\n    }                                                                                                                 // 20222\n                                                                                                                      // 20223\n                                                                                                                      // 20224\n    // Return a coefficient array as a string of base 10 digits.                                                      // 20225\n    function coeffToString(a) {                                                                                       // 20226\n        var s, z,                                                                                                     // 20227\n            i = 1,                                                                                                    // 20228\n            j = a.length,                                                                                             // 20229\n            r = a[0] + '';                                                                                            // 20230\n                                                                                                                      // 20231\n        for ( ; i < j; ) {                                                                                            // 20232\n            s = a[i++] + '';                                                                                          // 20233\n            z = LOG_BASE - s.length;                                                                                  // 20234\n            for ( ; z--; s = '0' + s );                                                                               // 20235\n            r += s;                                                                                                   // 20236\n        }                                                                                                             // 20237\n                                                                                                                      // 20238\n        // Determine trailing zeros.                                                                                  // 20239\n        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                              // 20240\n        return r.slice( 0, j + 1 || 1 );                                                                              // 20241\n    }                                                                                                                 // 20242\n                                                                                                                      // 20243\n                                                                                                                      // 20244\n    // Compare the value of BigNumbers x and y.                                                                       // 20245\n    function compare( x, y ) {                                                                                        // 20246\n        var a, b,                                                                                                     // 20247\n            xc = x.c,                                                                                                 // 20248\n            yc = y.c,                                                                                                 // 20249\n            i = x.s,                                                                                                  // 20250\n            j = y.s,                                                                                                  // 20251\n            k = x.e,                                                                                                  // 20252\n            l = y.e;                                                                                                  // 20253\n                                                                                                                      // 20254\n        // Either NaN?                                                                                                // 20255\n        if ( !i || !j ) return null;                                                                                  // 20256\n                                                                                                                      // 20257\n        a = xc && !xc[0];                                                                                             // 20258\n        b = yc && !yc[0];                                                                                             // 20259\n                                                                                                                      // 20260\n        // Either zero?                                                                                               // 20261\n        if ( a || b ) return a ? b ? 0 : -j : i;                                                                      // 20262\n                                                                                                                      // 20263\n        // Signs differ?                                                                                              // 20264\n        if ( i != j ) return i;                                                                                       // 20265\n                                                                                                                      // 20266\n        a = i < 0;                                                                                                    // 20267\n        b = k == l;                                                                                                   // 20268\n                                                                                                                      // 20269\n        // Either Infinity?                                                                                           // 20270\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                            // 20271\n                                                                                                                      // 20272\n        // Compare exponents.                                                                                         // 20273\n        if ( !b ) return k > l ^ a ? 1 : -1;                                                                          // 20274\n                                                                                                                      // 20275\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                            // 20276\n                                                                                                                      // 20277\n        // Compare digit by digit.                                                                                    // 20278\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                            // 20279\n                                                                                                                      // 20280\n        // Compare lengths.                                                                                           // 20281\n        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                       // 20282\n    }                                                                                                                 // 20283\n                                                                                                                      // 20284\n                                                                                                                      // 20285\n    /*                                                                                                                // 20286\n     * Return true if n is a valid number in range, otherwise false.                                                  // 20287\n     * Use for argument validation when ERRORS is false.                                                              // 20288\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                      // 20289\n     */                                                                                                               // 20290\n    function intValidatorNoErrors( n, min, max ) {                                                                    // 20291\n        return ( n = truncate(n) ) >= min && n <= max;                                                                // 20292\n    }                                                                                                                 // 20293\n                                                                                                                      // 20294\n                                                                                                                      // 20295\n    function isArray(obj) {                                                                                           // 20296\n        return Object.prototype.toString.call(obj) == '[object Array]';                                               // 20297\n    }                                                                                                                 // 20298\n                                                                                                                      // 20299\n                                                                                                                      // 20300\n    /*                                                                                                                // 20301\n     * Convert string of baseIn to an array of numbers of baseOut.                                                    // 20302\n     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                               // 20303\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                               // 20304\n     */                                                                                                               // 20305\n    function toBaseOut( str, baseIn, baseOut ) {                                                                      // 20306\n        var j,                                                                                                        // 20307\n            arr = [0],                                                                                                // 20308\n            arrL,                                                                                                     // 20309\n            i = 0,                                                                                                    // 20310\n            len = str.length;                                                                                         // 20311\n                                                                                                                      // 20312\n        for ( ; i < len; ) {                                                                                          // 20313\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                   // 20314\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                    // 20315\n                                                                                                                      // 20316\n            for ( ; j < arr.length; j++ ) {                                                                           // 20317\n                                                                                                                      // 20318\n                if ( arr[j] > baseOut - 1 ) {                                                                         // 20319\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                         // 20320\n                    arr[j + 1] += arr[j] / baseOut | 0;                                                               // 20321\n                    arr[j] %= baseOut;                                                                                // 20322\n                }                                                                                                     // 20323\n            }                                                                                                         // 20324\n        }                                                                                                             // 20325\n                                                                                                                      // 20326\n        return arr.reverse();                                                                                         // 20327\n    }                                                                                                                 // 20328\n                                                                                                                      // 20329\n                                                                                                                      // 20330\n    function toExponential( str, e ) {                                                                                // 20331\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                        // 20332\n          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                 // 20333\n    }                                                                                                                 // 20334\n                                                                                                                      // 20335\n                                                                                                                      // 20336\n    function toFixedPoint( str, e ) {                                                                                 // 20337\n        var len, z;                                                                                                   // 20338\n                                                                                                                      // 20339\n        // Negative exponent?                                                                                         // 20340\n        if ( e < 0 ) {                                                                                                // 20341\n                                                                                                                      // 20342\n            // Prepend zeros.                                                                                         // 20343\n            for ( z = '0.'; ++e; z += '0' );                                                                          // 20344\n            str = z + str;                                                                                            // 20345\n                                                                                                                      // 20346\n        // Positive exponent                                                                                          // 20347\n        } else {                                                                                                      // 20348\n            len = str.length;                                                                                         // 20349\n                                                                                                                      // 20350\n            // Append zeros.                                                                                          // 20351\n            if ( ++e > len ) {                                                                                        // 20352\n                for ( z = '0', e -= len; --e; z += '0' );                                                             // 20353\n                str += z;                                                                                             // 20354\n            } else if ( e < len ) {                                                                                   // 20355\n                str = str.slice( 0, e ) + '.' + str.slice(e);                                                         // 20356\n            }                                                                                                         // 20357\n        }                                                                                                             // 20358\n                                                                                                                      // 20359\n        return str;                                                                                                   // 20360\n    }                                                                                                                 // 20361\n                                                                                                                      // 20362\n                                                                                                                      // 20363\n    function truncate(n) {                                                                                            // 20364\n        n = parseFloat(n);                                                                                            // 20365\n        return n < 0 ? mathceil(n) : mathfloor(n);                                                                    // 20366\n    }                                                                                                                 // 20367\n                                                                                                                      // 20368\n                                                                                                                      // 20369\n    // EXPORT                                                                                                         // 20370\n                                                                                                                      // 20371\n                                                                                                                      // 20372\n    BigNumber = another();                                                                                            // 20373\n                                                                                                                      // 20374\n    // AMD.                                                                                                           // 20375\n    if ( typeof define == 'function' && define.amd ) {                                                                // 20376\n        define( function () { return BigNumber; } );                                                                  // 20377\n                                                                                                                      // 20378\n    // Node and other environments that support module.exports.                                                       // 20379\n    } else if ( typeof module != 'undefined' && module.exports ) {                                                    // 20380\n        module.exports = BigNumber;                                                                                   // 20381\n        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}                                               // 20382\n                                                                                                                      // 20383\n    // Browser.                                                                                                       // 20384\n    } else {                                                                                                          // 20385\n        global.BigNumber = BigNumber;                                                                                 // 20386\n    }                                                                                                                 // 20387\n})(this);                                                                                                             // 20388\n                                                                                                                      // 20389\n},{\"crypto\":6}]},{},[162])                                                                                            // 20390\n//# sourceMappingURL=3stack:bignumber/bignumber.browserify.js                                                         // 20391\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 20393\n}).call(this);                                                                                                        // 20394\n                                                                                                                      // 20395\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['3stack:bignumber'] = {\n  BigNumber: BigNumber\n};\n\n})();\n","servePath":"/packages/3stack_bignumber.js","sourceMap":{"version":3,"sources":["/packages/3stack_bignumber/packages/3stack_bignumber.js"],"names":[],"mappingsfile":"/packages/3stack_bignumber.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/3stack:bignumber/bignumber.browserify.js                                                               //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\n},{}],2:[function(require,module,exports){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('is-array')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar kMaxLength = 0x3fffffff\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Note:\n *\n * - Implementation must support adding new properties to `Uint8Array` instances.\n *   Firefox 4-29 lacked support, fixed in Firefox 30+.\n *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *    incorrect length in some situations.\n *\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will\n * get the Object implementation, which is slower but will work correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = (function () {\n  try {\n    var buf = new ArrayBuffer(0)\n    var arr = new Uint8Array(buf)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n})()\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  this.length = 0\n  this.parent = undefined\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {\n    return fromTypedArray(that, object)\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = Buffer._augment(new Uint8Array(length))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n    that._isBuffer = true\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  } else if (list.length === 1) {\n    return list[0]\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = String(string)\n\n  if (string.length === 0) return 0\n\n  switch (encoding || 'utf8') {\n    case 'ascii':\n    case 'binary':\n    case 'raw':\n      return string.length\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return string.length * 2\n    case 'hex':\n      return string.length >>> 1\n    case 'utf8':\n    case 'utf-8':\n      return utf8ToBytes(string).length\n    case 'base64':\n      return base64ToBytes(string).length\n    default:\n      return string.length\n  }\n}\nBuffer.byteLength = byteLength\n\n// pre-set for values that may exist in the future\nBuffer.prototype.length = undefined\nBuffer.prototype.parent = undefined\n\n// toString(encoding, start=0, end=buffer.length)\nBuffer.prototype.toString = function toString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\n// `get` will be removed in Node 0.13+\nBuffer.prototype.get = function get (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` will be removed in Node 0.13+\nBuffer.prototype.set = function set (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  var res = ''\n  var tmp = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    if (buf[i] <= 0x7F) {\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])\n      tmp = ''\n    } else {\n      tmp += '%' + buf[i].toString(16)\n    }\n  }\n\n  return res + decodeUtf8Char(tmp)\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = value\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = value\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = value\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), targetStart)\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function _augment (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array set method before overwriting\n  arr._set = arr.set\n\n  // deprecated, will be removed in node 0.13+\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.indexOf = BP.indexOf\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUIntLE = BP.readUIntLE\n  arr.readUIntBE = BP.readUIntBE\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readIntLE = BP.readIntLE\n  arr.readIntBE = BP.readIntBE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUIntLE = BP.writeUIntLE\n  arr.writeUIntBE = BP.writeUIntBE\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeIntLE = BP.writeIntLE\n  arr.writeIntBE = BP.writeIntBE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-z\\-]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n  var i = 0\n\n  for (; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (leadSurrogate) {\n        // 2 leads in a row\n        if (codePoint < 0xDC00) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          leadSurrogate = codePoint\n          continue\n        } else {\n          // valid surrogate pair\n          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000\n          leadSurrogate = null\n        }\n      } else {\n        // no lead yet\n\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else {\n          // valid lead\n          leadSurrogate = codePoint\n          continue\n        }\n      }\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n      leadSurrogate = null\n    }\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x200000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction decodeUtf8Char (str) {\n  try {\n    return decodeURIComponent(str)\n  } catch (err) {\n    return String.fromCharCode(0xFFFD) // UTF 8 invalid char\n  }\n}\n\n},{\"base64-js\":3,\"ieee754\":4,\"is-array\":5}],3:[function(require,module,exports){\nvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n\n},{}],4:[function(require,module,exports){\nexports.read = function(buffer, offset, isLE, mLen, nBytes) {\n  var e, m,\n      eLen = nBytes * 8 - mLen - 1,\n      eMax = (1 << eLen) - 1,\n      eBias = eMax >> 1,\n      nBits = -7,\n      i = isLE ? (nBytes - 1) : 0,\n      d = isLE ? -1 : 1,\n      s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity);\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c,\n      eLen = nBytes * 8 - mLen - 1,\n      eMax = (1 << eLen) - 1,\n      eBias = eMax >> 1,\n      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\n      i = isLE ? 0 : (nBytes - 1),\n      d = isLE ? 1 : -1,\n      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\n\n  buffer[offset + i - d] |= s * 128;\n};\n\n},{}],5:[function(require,module,exports){\n\n/**\n * isArray\n */\n\nvar isArray = Array.isArray;\n\n/**\n * toString\n */\n\nvar str = Object.prototype.toString;\n\n/**\n * Whether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}\n */\n\nmodule.exports = isArray || function (val) {\n  return !! val && '[object Array]' == str.call(val);\n};\n\n},{}],6:[function(require,module,exports){\n'use strict';\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\n\nexports.createHash = exports.Hash = require('create-hash')\n\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))\nexports.getHashes = function () {\n  return hashes;\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-aes');\n[\n  'Cipher',\n  'createCipher',\n  'Cipheriv',\n  'createCipheriv',\n  'Decipher',\n  'createDecipher',\n  'Decipheriv',\n  'createDecipheriv',\n  'getCiphers',\n  'listCiphers'\n].forEach(function (key) {\n  exports[key] = aes[key];\n})\n\nvar dh = require('diffie-hellman');\n[\n  'DiffieHellmanGroup',\n  'createDiffieHellmanGroup',\n  'getDiffieHellman',\n  'createDiffieHellman',\n  'DiffieHellman'\n].forEach(function (key) {\n  exports[key] = dh[key];\n})\n\nvar sign = require('browserify-sign');\n[\n  'createSign',\n  'Sign',\n  'createVerify',\n  'Verify'\n].forEach(function (key) {\n  exports[key] = sign[key];\n})\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt');\n\n[\n  'publicEncrypt',\n  'privateEncrypt',\n  'publicDecrypt',\n  'privateDecrypt'\n].forEach(function (key) {\n  exports[key] = publicEncrypt[key];\n})\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n;[\n  'createCredentials'\n].forEach(function (name) {\n  exports[name] = function () {\n    throw new Error([\n      'sorry, ' + name + ' is not implemented yet',\n      'we accept pull requests',\n      'https://github.com/crypto-browserify/crypto-browserify'\n    ].join('\\n'));\n  }\n})\n\n},{\"browserify-aes\":10,\"browserify-sign\":26,\"browserify-sign/algos\":25,\"create-ecdh\":72,\"create-hash\":94,\"create-hmac\":106,\"diffie-hellman\":107,\"pbkdf2\":114,\"public-encrypt\":115,\"randombytes\":142}],7:[function(require,module,exports){\n(function (Buffer){\nvar md5 = require('create-hash/md5');\nmodule.exports = EVP_BytesToKey;\nfunction EVP_BytesToKey(password, keyLen, ivLen) {\n  if (!Buffer.isBuffer(password)) {\n    password = new Buffer(password, 'binary');\n  }\n  keyLen = keyLen/8;\n  ivLen = ivLen || 0;\n  var ki = 0;\n  var ii = 0;\n  var key = new Buffer(keyLen);\n  var iv = new Buffer(ivLen);\n  var addmd = 0;\n  var md_buf;\n  var i;\n  var bufs =  [];\n  while (true) {\n    if(addmd++ > 0) {\n       bufs.push(md_buf);\n    }\n    bufs.push(password);\n    md_buf = md5(Buffer.concat(bufs));\n    bufs = [];\n    i = 0;\n    if(keyLen > 0) {\n      while(true) {\n        if(keyLen === 0) {\n          break;\n        }\n        if(i === md_buf.length) {\n          break;\n        }\n        key[ki++] = md_buf[i];\n        keyLen--;\n        i++;\n       }\n    }\n    if(ivLen > 0 && i !== md_buf.length) {\n      while(true) {\n        if(ivLen === 0) {\n          break;\n        }\n        if(i === md_buf.length) {\n          break;\n        }\n       iv[ii++] = md_buf[i];\n       ivLen--;\n       i++;\n     }\n   }\n   if(keyLen === 0 && ivLen === 0) {\n      break;\n    }\n  }\n  for(i=0;i<md_buf.length;i++) {\n    md_buf[i] = 0;\n  }\n  return {\n    key: key,\n    iv: iv\n  };\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2,\"create-hash/md5\":96}],8:[function(require,module,exports){\n(function (Buffer){\n// based on the aes implimentation in triple sec\n// https://github.com/keybase/triplesec\n\n// which is in turn based on the one from crypto-js\n// https://code.google.com/p/crypto-js/\n\nvar uint_max = Math.pow(2, 32);\nfunction fixup_uint32(x) {\n    var ret, x_pos;\n    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;\n    return ret;\n}\nfunction scrub_vec(v) {\n  var i, _i, _ref;\n  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n    v[i] = 0;\n  }\n  return false;\n}\n\nfunction Global() {\n  var i;\n  this.SBOX = [];\n  this.INV_SBOX = [];\n  this.SUB_MIX = (function() {\n    var _i, _results;\n    _results = [];\n    for (i = _i = 0; _i < 4; i = ++_i) {\n      _results.push([]);\n    }\n    return _results;\n  })();\n  this.INV_SUB_MIX = (function() {\n    var _i, _results;\n    _results = [];\n    for (i = _i = 0; _i < 4; i = ++_i) {\n      _results.push([]);\n    }\n    return _results;\n  })();\n  this.init();\n  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n}\n\nGlobal.prototype.init = function() {\n  var d, i, sx, t, x, x2, x4, x8, xi, _i;\n  d = (function() {\n    var _i, _results;\n    _results = [];\n    for (i = _i = 0; _i < 256; i = ++_i) {\n      if (i < 128) {\n        _results.push(i << 1);\n      } else {\n        _results.push((i << 1) ^ 0x11b);\n      }\n    }\n    return _results;\n  })();\n  x = 0;\n  xi = 0;\n  for (i = _i = 0; _i < 256; i = ++_i) {\n    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n    this.SBOX[x] = sx;\n    this.INV_SBOX[sx] = x;\n    x2 = d[x];\n    x4 = d[x2];\n    x8 = d[x4];\n    t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);\n    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);\n    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);\n    this.SUB_MIX[3][x] = t;\n    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);\n    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);\n    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);\n    this.INV_SUB_MIX[3][sx] = t;\n    if (x === 0) {\n      x = xi = 1;\n    } else {\n      x = x2 ^ d[d[d[x8 ^ x2]]];\n      xi ^= d[d[xi]];\n    }\n  }\n  return true;\n};\n\nvar G = new Global();\n\n\nAES.blockSize = 4 * 4;\n\nAES.prototype.blockSize = AES.blockSize;\n\nAES.keySize = 256 / 8;\n\nAES.prototype.keySize = AES.keySize;\n\n function bufferToArray(buf) {\n  var len = buf.length/4;\n  var out = new Array(len);\n  var i = -1;\n  while (++i < len) {\n    out[i] = buf.readUInt32BE(i * 4);\n  }\n  return out;\n }\nfunction AES(key) {\n  this._key = bufferToArray(key);\n  this._doReset();\n}\n\nAES.prototype._doReset = function() {\n  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;\n  keyWords = this._key;\n  keySize = keyWords.length;\n  this._nRounds = keySize + 6;\n  ksRows = (this._nRounds + 1) * 4;\n  this._keySchedule = [];\n  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {\n    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);\n  }\n  this._invKeySchedule = [];\n  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {\n    ksRow = ksRows - invKsRow;\n    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];\n    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];\n  }\n  return true;\n};\n\nAES.prototype.encryptBlock = function(M) {\n  M = bufferToArray(new Buffer(M));\n  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);\n  var buf = new Buffer(16);\n  buf.writeUInt32BE(out[0], 0);\n  buf.writeUInt32BE(out[1], 4);\n  buf.writeUInt32BE(out[2], 8);\n  buf.writeUInt32BE(out[3], 12);\n  return buf;\n};\n\nAES.prototype.decryptBlock = function(M) {\n  M = bufferToArray(new Buffer(M));\n  var temp = [M[3], M[1]];\n  M[1] = temp[0];\n  M[3] = temp[1];\n  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);\n  var buf = new Buffer(16);\n  buf.writeUInt32BE(out[0], 0);\n  buf.writeUInt32BE(out[3], 4);\n  buf.writeUInt32BE(out[2], 8);\n  buf.writeUInt32BE(out[1], 12);\n  return buf;\n};\n\nAES.prototype.scrub = function() {\n  scrub_vec(this._keySchedule);\n  scrub_vec(this._invKeySchedule);\n  scrub_vec(this._key);\n};\n\nAES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {\n  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;\n\n  s0 = M[0] ^ keySchedule[0];\n  s1 = M[1] ^ keySchedule[1];\n  s2 = M[2] ^ keySchedule[2];\n  s3 = M[3] ^ keySchedule[3];\n  ksRow = 4;\n  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {\n    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];\n    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];\n    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];\n    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];\n    s0 = t0;\n    s1 = t1;\n    s2 = t2;\n    s3 = t3;\n  }\n  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n  return [\n    fixup_uint32(t0),\n    fixup_uint32(t1),\n    fixup_uint32(t2),\n    fixup_uint32(t3)\n  ];\n\n};\n\n\n\n\n  exports.AES = AES;\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2}],9:[function(require,module,exports){\n(function (Buffer){\nvar aes = require('./aes');\nvar Transform = require('./cipherBase');\nvar inherits = require('inherits');\nvar GHASH = require('./ghash');\nvar xor = require('./xor');\ninherits(StreamCipher, Transform);\nmodule.exports = StreamCipher;\n\nfunction StreamCipher(mode, key, iv, decrypt) {\n  if (!(this instanceof StreamCipher)) {\n    return new StreamCipher(mode, key, iv);\n  }\n  Transform.call(this);\n  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])]);\n  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])]);\n  this._cipher = new aes.AES(key);\n  this._prev = new Buffer(iv.length);\n  this._cache = new Buffer('');\n  this._secCache = new Buffer('');\n  this._decrypt = decrypt;\n  this._alen = 0;\n  this._len = 0;\n  iv.copy(this._prev);\n  this._mode = mode;\n  var h = new Buffer(4);\n  h.fill(0);\n  this._ghash = new GHASH(this._cipher.encryptBlock(h));\n  this._authTag = null;\n  this._called = false;\n}\nStreamCipher.prototype._update = function (chunk) {\n  if (!this._called && this._alen) {\n    var rump = 16 - (this._alen % 16);\n    if (rump <16) {\n      rump = new Buffer(rump);\n      rump.fill(0);\n      this._ghash.update(rump);\n    }\n  }\n  this._called = true;\n  var out = this._mode.encrypt(this, chunk);\n  if (this._decrypt) {\n    this._ghash.update(chunk);\n  } else {\n    this._ghash.update(out);\n  }\n  this._len += chunk.length;\n  return out;\n};\nStreamCipher.prototype._final = function () {\n  if (this._decrypt && !this._authTag) {\n    throw new Error('Unsupported state or unable to authenticate data');\n  }\n  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));\n  if (this._decrypt) {\n    if (xorTest(tag, this._authTag)) {\n      throw new Error('Unsupported state or unable to authenticate data');\n    }\n  } else {\n    this._authTag = tag;\n  }\n  this._cipher.scrub();\n};\nStreamCipher.prototype.getAuthTag = function getAuthTag () {\n  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {\n    return this._authTag;\n  } else {\n    throw new Error('Attempting to get auth tag in unsupported state');\n  }\n};\nStreamCipher.prototype.setAuthTag = function setAuthTag (tag) {\n  if (this._decrypt) {\n    this._authTag = tag;\n  } else {\n    throw new Error('Attempting to set auth tag in unsupported state');\n  }\n};\nStreamCipher.prototype.setAAD = function setAAD (buf) {\n  if (!this._called) {\n    this._ghash.update(buf);\n    this._alen += buf.length;\n  } else {\n    throw new Error('Attempting to set AAD in unsupported state');\n  }\n};\nfunction xorTest(a, b) {\n  var out = 0;\n  if (a.length !== b.length) {\n    out++;\n  }\n  var len = Math.min(a.length, b.length);\n  var i = -1;\n  while (++i < len) {\n    out += (a[i] ^ b[i]);\n  }\n  return out;\n}\n\n\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./aes\":8,\"./cipherBase\":11,\"./ghash\":14,\"./xor\":24,\"buffer\":2,\"inherits\":144}],10:[function(require,module,exports){\nvar ciphers = require('./encrypter');\nexports.createCipher = exports.Cipher = ciphers.createCipher;\nexports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;\nvar deciphers = require('./decrypter');\nexports.createDecipher = exports.Decipher = deciphers.createDecipher;\nexports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;\nvar modes = require('./modes');\nfunction getCiphers () {\n  return Object.keys(modes);\n}\nexports.listCiphers = exports.getCiphers = getCiphers;\n\n},{\"./decrypter\":12,\"./encrypter\":13,\"./modes\":15}],11:[function(require,module,exports){\n(function (Buffer){\nvar Transform = require('stream').Transform;\nvar inherits = require('inherits');\n\nmodule.exports = CipherBase;\ninherits(CipherBase, Transform);\nfunction CipherBase() {\n  Transform.call(this);\n}\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n  if (typeof data === 'string') {\n    data = new Buffer(data, inputEnc);\n  }\n  var outData = this._update(data);\n  if (outputEnc) {\n    outData = outData.toString(outputEnc);\n  }\n  return outData;\n};\nCipherBase.prototype._transform = function (data, _, next) {\n  this.push(this._update(data));\n  next();\n};\nCipherBase.prototype._flush = function (next) {\n  try {\n    this.push(this._final());\n  } catch(e) {\n    return next(e);\n  }\n  next();\n};\nCipherBase.prototype.final = function (outputEnc) {\n  var outData = this._final() || new Buffer('');\n  if (outputEnc) {\n    outData = outData.toString(outputEnc);\n  }\n  return outData;\n};\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2,\"inherits\":144,\"stream\":158}],12:[function(require,module,exports){\n(function (Buffer){\nvar aes = require('./aes');\nvar Transform = require('./cipherBase');\nvar inherits = require('inherits');\nvar modes = require('./modes');\nvar StreamCipher = require('./streamCipher');\nvar AuthCipher = require('./authCipher');\nvar ebtk = require('./EVP_BytesToKey');\n\ninherits(Decipher, Transform);\nfunction Decipher(mode, key, iv) {\n  if (!(this instanceof Decipher)) {\n    return new Decipher(mode, key, iv);\n  }\n  Transform.call(this);\n  this._cache = new Splitter();\n  this._last = void 0;\n  this._cipher = new aes.AES(key);\n  this._prev = new Buffer(iv.length);\n  iv.copy(this._prev);\n  this._mode = mode;\n  this._autopadding = true;\n}\nDecipher.prototype._update = function (data) {\n  this._cache.add(data);\n  var chunk;\n  var thing;\n  var out = [];\n  while ((chunk = this._cache.get(this._autopadding))) {\n    thing = this._mode.decrypt(this, chunk);\n    out.push(thing);\n  }\n  return Buffer.concat(out);\n};\nDecipher.prototype._final = function () {\n  var chunk = this._cache.flush();\n  if (this._autopadding) {\n    return unpad(this._mode.decrypt(this, chunk));\n  } else if (chunk) {\n    throw new Error('data not multiple of block length');\n  }\n};\nDecipher.prototype.setAutoPadding = function (setTo) {\n  this._autopadding = !!setTo;\n};\nfunction Splitter() {\n   if (!(this instanceof Splitter)) {\n    return new Splitter();\n  }\n  this.cache = new Buffer('');\n}\nSplitter.prototype.add = function (data) {\n  this.cache = Buffer.concat([this.cache, data]);\n};\n\nSplitter.prototype.get = function (autoPadding) {\n  var out;\n  if (autoPadding) {\n    if (this.cache.length > 16) {\n      out = this.cache.slice(0, 16);\n      this.cache = this.cache.slice(16);\n      return out;\n    }\n  } else {\n    if (this.cache.length >= 16) {\n      out = this.cache.slice(0, 16);\n      this.cache = this.cache.slice(16);\n      return out;\n    }\n  }\n  return null;\n};\nSplitter.prototype.flush = function () {\n  if (this.cache.length) {\n    return this.cache;\n  }\n};\nfunction unpad(last) {\n  var padded = last[15];\n  var i = -1;\n  while (++i < padded) {\n    if (last[(i + (16 - padded))] !== padded) {\n      throw new Error('unable to decrypt data');\n    }\n  }\n  if (padded === 16) {\n    return;\n  }\n  return last.slice(0, 16 - padded);\n}\n\nvar modelist = {\n  ECB: require('./modes/ecb'),\n  CBC: require('./modes/cbc'),\n  CFB: require('./modes/cfb'),\n  CFB8: require('./modes/cfb8'),\n  CFB1: require('./modes/cfb1'),\n  OFB: require('./modes/ofb'),\n  CTR: require('./modes/ctr'),\n  GCM: require('./modes/ctr')\n};\n\n\nfunction createDecipheriv(suite, password, iv) {\n  var config = modes[suite.toLowerCase()];\n  if (!config) {\n    throw new TypeError('invalid suite type');\n  }\n  if (typeof iv === 'string') {\n    iv = new Buffer(iv);\n  }\n  if (typeof password === 'string') {\n    password = new Buffer(password);\n  }\n  if (password.length !== config.key/8) {\n    throw new TypeError('invalid key length ' + password.length);\n  }\n  if (iv.length !== config.iv) {\n    throw new TypeError('invalid iv length ' + iv.length);\n  }\n  if (config.type === 'stream') {\n    return new StreamCipher(modelist[config.mode], password, iv, true);\n  } else if (config.type === 'auth') {\n    return new AuthCipher(modelist[config.mode], password, iv, true);\n  }\n  return new Decipher(modelist[config.mode], password, iv);\n}\n\nfunction createDecipher (suite, password) {\n  var config = modes[suite.toLowerCase()];\n  if (!config) {\n    throw new TypeError('invalid suite type');\n  }\n  var keys = ebtk(password, config.key, config.iv);\n  return createDecipheriv(suite, keys.key, keys.iv);\n}\nexports.createDecipher = createDecipher;\nexports.createDecipheriv = createDecipheriv;\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./EVP_BytesToKey\":7,\"./aes\":8,\"./authCipher\":9,\"./cipherBase\":11,\"./modes\":15,\"./modes/cbc\":16,\"./modes/cfb\":17,\"./modes/cfb1\":18,\"./modes/cfb8\":19,\"./modes/ctr\":20,\"./modes/ecb\":21,\"./modes/ofb\":22,\"./streamCipher\":23,\"buffer\":2,\"inherits\":144}],13:[function(require,module,exports){\n(function (Buffer){\nvar aes = require('./aes');\nvar Transform = require('./cipherBase');\nvar inherits = require('inherits');\nvar modes = require('./modes');\nvar ebtk = require('./EVP_BytesToKey');\nvar StreamCipher = require('./streamCipher');\nvar AuthCipher = require('./authCipher');\ninherits(Cipher, Transform);\nfunction Cipher(mode, key, iv) {\n  if (!(this instanceof Cipher)) {\n    return new Cipher(mode, key, iv);\n  }\n  Transform.call(this);\n  this._cache = new Splitter();\n  this._cipher = new aes.AES(key);\n  this._prev = new Buffer(iv.length);\n  iv.copy(this._prev);\n  this._mode = mode;\n  this._autopadding = true;\n}\nCipher.prototype._update = function (data) {\n  this._cache.add(data);\n  var chunk;\n  var thing;\n  var out = [];\n  while ((chunk = this._cache.get())) {\n    thing = this._mode.encrypt(this, chunk);\n    out.push(thing);\n  }\n  return Buffer.concat(out);\n};\nCipher.prototype._final = function () {\n  var chunk = this._cache.flush();\n  if (this._autopadding) {\n    chunk = this._mode.encrypt(this, chunk);\n    this._cipher.scrub();\n    return chunk;\n  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {\n    this._cipher.scrub();\n    throw new Error('data not multiple of block length');\n  }\n};\nCipher.prototype.setAutoPadding = function (setTo) {\n  this._autopadding = !!setTo;\n};\n\nfunction Splitter() {\n   if (!(this instanceof Splitter)) {\n    return new Splitter();\n  }\n  this.cache = new Buffer('');\n}\nSplitter.prototype.add = function (data) {\n  this.cache = Buffer.concat([this.cache, data]);\n};\n\nSplitter.prototype.get = function () {\n  if (this.cache.length > 15) {\n    var out = this.cache.slice(0, 16);\n    this.cache = this.cache.slice(16);\n    return out;\n  }\n  return null;\n};\nSplitter.prototype.flush = function () {\n  var len = 16 - this.cache.length;\n  var padBuff = new Buffer(len);\n\n  var i = -1;\n  while (++i < len) {\n    padBuff.writeUInt8(len, i);\n  }\n  var out = Buffer.concat([this.cache, padBuff]);\n  return out;\n};\nvar modelist = {\n  ECB: require('./modes/ecb'),\n  CBC: require('./modes/cbc'),\n  CFB: require('./modes/cfb'),\n  CFB8: require('./modes/cfb8'),\n  CFB1: require('./modes/cfb1'),\n  OFB: require('./modes/ofb'),\n  CTR: require('./modes/ctr'),\n  GCM: require('./modes/ctr')\n};\n\nfunction createCipheriv(suite, password, iv) {\n  var config = modes[suite.toLowerCase()];\n  if (!config) {\n    throw new TypeError('invalid suite type');\n  }\n  if (typeof iv === 'string') {\n    iv = new Buffer(iv);\n  }\n  if (typeof password === 'string') {\n    password = new Buffer(password);\n  }\n  if (password.length !== config.key/8) {\n    throw new TypeError('invalid key length ' + password.length);\n  }\n  if (iv.length !== config.iv) {\n    throw new TypeError('invalid iv length ' + iv.length);\n  }\n  if (config.type === 'stream') {\n    return new StreamCipher(modelist[config.mode], password, iv);\n  } else if (config.type === 'auth') {\n    return new AuthCipher(modelist[config.mode], password, iv);\n  }\n  return new Cipher(modelist[config.mode], password, iv);\n}\nfunction createCipher (suite, password) {\n  var config = modes[suite.toLowerCase()];\n  if (!config) {\n    throw new TypeError('invalid suite type');\n  }\n  var keys = ebtk(password, config.key, config.iv);\n  return createCipheriv(suite, keys.key, keys.iv);\n}\n\nexports.createCipheriv = createCipheriv;\nexports.createCipher = createCipher;\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./EVP_BytesToKey\":7,\"./aes\":8,\"./authCipher\":9,\"./cipherBase\":11,\"./modes\":15,\"./modes/cbc\":16,\"./modes/cfb\":17,\"./modes/cfb1\":18,\"./modes/cfb8\":19,\"./modes/ctr\":20,\"./modes/ecb\":21,\"./modes/ofb\":22,\"./streamCipher\":23,\"buffer\":2,\"inherits\":144}],14:[function(require,module,exports){\n(function (Buffer){\nvar zeros = new Buffer(16);\nzeros.fill(0);\nmodule.exports = GHASH;\nfunction GHASH(key){\n  this.h = key;\n  this.state = new Buffer(16);\n  this.state.fill(0);\n  this.cache = new Buffer('');\n}\n// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html\n// by Juho Vähä-Herttua\nGHASH.prototype.ghash = function (block) {\n  var i = -1;\n  while (++i < block.length) {\n   this.state[i] ^= block[i];\n  }\n  this._multiply();\n};\n\nGHASH.prototype._multiply = function () {\n  var Vi = toArray(this.h);\n  var Zi = [0, 0, 0, 0];\n  var j, xi, lsb_Vi;\n  var i = -1;\n  while (++i < 128) {\n    xi = (this.state[~~(i/8)] & (1 << (7-i%8))) !== 0;\n    if (xi) {\n      // Z_i+1 = Z_i ^ V_i\n      Zi = xor(Zi, Vi);\n    }\n\n    // Store the value of LSB(V_i)\n    lsb_Vi = (Vi[3] & 1) !== 0;\n\n    // V_i+1 = V_i >> 1\n    for (j=3; j>0; j--) {\n      Vi[j] = (Vi[j] >>> 1) | ((Vi[j-1]&1) << 31);\n    }\n    Vi[0] = Vi[0] >>> 1;\n\n    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R\n    if (lsb_Vi) {\n      Vi[0] = Vi[0] ^ (0xe1 << 24);\n    }\n  }\n  this.state = fromArray(Zi);\n};\nGHASH.prototype.update = function (buf) {\n  this.cache = Buffer.concat([this.cache, buf]);\n  var chunk;\n  while (this.cache.length >= 16) {\n    chunk = this.cache.slice(0, 16);\n    this.cache = this.cache.slice(16);\n    this.ghash(chunk);\n  }\n};\nGHASH.prototype.final = function (abl, bl) {\n  if (this.cache.length) {\n    this.ghash(Buffer.concat([this.cache, zeros], 16));\n  }\n  this.ghash(fromArray([\n     0, abl,\n     0, bl\n   ]));\n  return this.state;\n};\n\nfunction toArray(buf) {\n  return [\n    buf.readUInt32BE(0),\n    buf.readUInt32BE(4),\n    buf.readUInt32BE(8),\n    buf.readUInt32BE(12)\n  ];\n}\nfunction fromArray(out) {\n  out = out.map(fixup_uint32);\n  var buf = new Buffer(16);\n  buf.writeUInt32BE(out[0], 0);\n  buf.writeUInt32BE(out[1], 4);\n  buf.writeUInt32BE(out[2], 8);\n  buf.writeUInt32BE(out[3], 12);\n  return buf;\n}\nvar uint_max = Math.pow(2, 32);\nfunction fixup_uint32(x) {\n    var ret, x_pos;\n    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;\n    return ret;\n}\nfunction xor(a, b) {\n  return [\n    a[0] ^ b[0],\n    a[1] ^ b[1],\n    a[2] ^ b[2],\n    a[3] ^ b[3],\n  ];\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2}],15:[function(require,module,exports){\nexports['aes-128-ecb'] = {\n  cipher: 'AES',\n  key: 128,\n  iv: 0,\n  mode: 'ECB',\n  type: 'block'\n};\nexports['aes-192-ecb'] = {\n  cipher: 'AES',\n  key: 192,\n  iv: 0,\n  mode: 'ECB',\n  type: 'block'\n};\nexports['aes-256-ecb'] = {\n  cipher: 'AES',\n  key: 256,\n  iv: 0,\n  mode: 'ECB',\n  type: 'block'\n};\nexports['aes-128-cbc'] = {\n  cipher: 'AES',\n  key: 128,\n  iv: 16,\n  mode: 'CBC',\n  type: 'block'\n};\nexports['aes-192-cbc'] = {\n  cipher: 'AES',\n  key: 192,\n  iv: 16,\n  mode: 'CBC',\n  type: 'block'\n};\nexports['aes-256-cbc'] = {\n  cipher: 'AES',\n  key: 256,\n  iv: 16,\n  mode: 'CBC',\n  type: 'block'\n};\nexports['aes128'] = exports['aes-128-cbc'];\nexports['aes192'] = exports['aes-192-cbc'];\nexports['aes256'] = exports['aes-256-cbc'];\nexports['aes-128-cfb'] = {\n  cipher: 'AES',\n  key: 128,\n  iv: 16,\n  mode: 'CFB',\n  type: 'stream'\n};\nexports['aes-192-cfb'] = {\n  cipher: 'AES',\n  key: 192,\n  iv: 16,\n  mode: 'CFB',\n  type: 'stream'\n};\nexports['aes-256-cfb'] = {\n  cipher: 'AES',\n  key: 256,\n  iv: 16,\n  mode: 'CFB',\n  type: 'stream'\n};\nexports['aes-128-cfb8'] = {\n  cipher: 'AES',\n  key: 128,\n  iv: 16,\n  mode: 'CFB8',\n  type: 'stream'\n};\nexports['aes-192-cfb8'] = {\n  cipher: 'AES',\n  key: 192,\n  iv: 16,\n  mode: 'CFB8',\n  type: 'stream'\n};\nexports['aes-256-cfb8'] = {\n  cipher: 'AES',\n  key: 256,\n  iv: 16,\n  mode: 'CFB8',\n  type: 'stream'\n};\nexports['aes-128-cfb1'] = {\n  cipher: 'AES',\n  key: 128,\n  iv: 16,\n  mode: 'CFB1',\n  type: 'stream'\n};\nexports['aes-192-cfb1'] = {\n  cipher: 'AES',\n  key: 192,\n  iv: 16,\n  mode: 'CFB1',\n  type: 'stream'\n};\nexports['aes-256-cfb1'] = {\n  cipher: 'AES',\n  key: 256,\n  iv: 16,\n  mode: 'CFB1',\n  type: 'stream'\n};\nexports['aes-128-ofb'] = {\n  cipher: 'AES',\n  key: 128,\n  iv: 16,\n  mode: 'OFB',\n  type: 'stream'\n};\nexports['aes-192-ofb'] = {\n  cipher: 'AES',\n  key: 192,\n  iv: 16,\n  mode: 'OFB',\n  type: 'stream'\n};\nexports['aes-256-ofb'] = {\n  cipher: 'AES',\n  key: 256,\n  iv: 16,\n  mode: 'OFB',\n  type: 'stream'\n};\nexports['aes-128-ctr'] = {\n  cipher: 'AES',\n  key: 128,\n  iv: 16,\n  mode: 'CTR',\n  type: 'stream'\n};\nexports['aes-192-ctr'] = {\n  cipher: 'AES',\n  key: 192,\n  iv: 16,\n  mode: 'CTR',\n  type: 'stream'\n};\nexports['aes-256-ctr'] = {\n  cipher: 'AES',\n  key: 256,\n  iv: 16,\n  mode: 'CTR',\n  type: 'stream'\n};\nexports['aes-128-gcm'] = {\n  cipher: 'AES',\n  key: 128,\n  iv: 12,\n  mode: 'GCM',\n  type: 'auth'\n};\nexports['aes-192-gcm'] = {\n  cipher: 'AES',\n  key: 192,\n  iv: 12,\n  mode: 'GCM',\n  type: 'auth'\n};\nexports['aes-256-gcm'] = {\n  cipher: 'AES',\n  key: 256,\n  iv: 12,\n  mode: 'GCM',\n  type: 'auth'\n};\n},{}],16:[function(require,module,exports){\nvar xor = require('../xor');\nexports.encrypt = function (self, block) {\n  var data = xor(block, self._prev);\n  self._prev = self._cipher.encryptBlock(data);\n  return self._prev;\n};\nexports.decrypt = function (self, block) {\n  var pad = self._prev;\n  self._prev = block;\n  var out = self._cipher.decryptBlock(block);\n  return xor(out, pad);\n};\n},{\"../xor\":24}],17:[function(require,module,exports){\n(function (Buffer){\nvar xor = require('../xor');\nexports.encrypt = function (self, data, decrypt) {\n  var out = new Buffer('');\n  var len;\n  while (data.length) {\n    if (self._cache.length === 0) {\n      self._cache = self._cipher.encryptBlock(self._prev);\n      self._prev = new Buffer('');\n    }\n    if (self._cache.length <= data.length) {\n      len = self._cache.length;\n      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);\n      data = data.slice(len);\n    } else {\n      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);\n      break;\n    }\n  }\n  return out;\n};\nfunction encryptStart(self, data, decrypt) {\n  var len = data.length;\n  var out = xor(data, self._cache);\n  self._cache = self._cache.slice(len);\n  self._prev = Buffer.concat([self._prev, decrypt?data:out]);\n  return out;\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"../xor\":24,\"buffer\":2}],18:[function(require,module,exports){\n(function (Buffer){\n\nfunction encryptByte(self, byte, decrypt) {\n  var pad;\n  var i = -1;\n  var len = 8;\n  var out = 0;\n  var bit, value;\n  while (++i < len) {\n    pad = self._cipher.encryptBlock(self._prev);\n    bit = (byte & (1 << (7-i))) ? 0x80:0;\n    value = pad[0] ^ bit;\n    out += ((value&0x80) >> (i%8));\n    self._prev = shiftIn(self._prev, decrypt?bit:value);\n  }\n  return out;\n}\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length;\n  var out = new Buffer(len);\n  var i = -1;\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt);\n  }\n  return out;\n};\nfunction shiftIn(buffer, value) {\n  var len = buffer.length;\n  var i = -1;\n  var out = new Buffer(buffer.length);\n  buffer = Buffer.concat([buffer, new Buffer([value])]);\n  while(++i < len) {\n    out[i] = buffer[i]<<1 | buffer[i+1]>>(7);\n  }\n  return out;\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2}],19:[function(require,module,exports){\n(function (Buffer){\nfunction encryptByte(self, byte, decrypt) {\n  var pad = self._cipher.encryptBlock(self._prev);\n  var out = pad[0] ^ byte;\n  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt?byte:out])]);\n  return out;\n}\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length;\n  var out = new Buffer(len);\n  var i = -1;\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt);\n  }\n  return out;\n};\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2}],20:[function(require,module,exports){\n(function (Buffer){\nvar xor = require('../xor');\nfunction getBlock(self) {\n  var out = self._cipher.encryptBlock(self._prev);\n  incr32(self._prev);\n  return out;\n}\nexports.encrypt = function (self, chunk) {\n  while (self._cache.length < chunk.length) {\n    self._cache = Buffer.concat([self._cache, getBlock(self)]);\n  }\n  var pad = self._cache.slice(0, chunk.length);\n  self._cache = self._cache.slice(chunk.length);\n  return xor(chunk, pad);\n};\nfunction incr32(iv) {\n  var len = iv.length;\n  var item;\n  while (len--) {\n    item = iv.readUInt8(len);\n    if (item === 255) {\n      iv.writeUInt8(0, len);\n    } else {\n      item++;\n      iv.writeUInt8(item, len);\n      break;\n    }\n  }\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"../xor\":24,\"buffer\":2}],21:[function(require,module,exports){\nexports.encrypt = function (self, block) {\n  return self._cipher.encryptBlock(block);\n};\nexports.decrypt = function (self, block) {\n  return self._cipher.decryptBlock(block);\n};\n},{}],22:[function(require,module,exports){\n(function (Buffer){\nvar xor = require('../xor');\nfunction getBlock(self) {\n  self._prev = self._cipher.encryptBlock(self._prev);\n  return self._prev;\n}\nexports.encrypt = function (self, chunk) {\n  while (self._cache.length < chunk.length) {\n    self._cache = Buffer.concat([self._cache, getBlock(self)]);\n  }\n  var pad = self._cache.slice(0, chunk.length);\n  self._cache = self._cache.slice(chunk.length);\n  return xor(chunk, pad);\n};\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"../xor\":24,\"buffer\":2}],23:[function(require,module,exports){\n(function (Buffer){\nvar aes = require('./aes');\nvar Transform = require('./cipherBase');\nvar inherits = require('inherits');\n\ninherits(StreamCipher, Transform);\nmodule.exports = StreamCipher;\nfunction StreamCipher(mode, key, iv, decrypt) {\n  if (!(this instanceof StreamCipher)) {\n    return new StreamCipher(mode, key, iv);\n  }\n  Transform.call(this);\n  this._cipher = new aes.AES(key);\n  this._prev = new Buffer(iv.length);\n  this._cache = new Buffer('');\n  this._secCache = new Buffer('');\n  this._decrypt = decrypt;\n  iv.copy(this._prev);\n  this._mode = mode;\n}\nStreamCipher.prototype._update = function (chunk) {\n  return this._mode.encrypt(this, chunk, this._decrypt);\n};\nStreamCipher.prototype._final = function () {\n  this._cipher.scrub();\n};\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./aes\":8,\"./cipherBase\":11,\"buffer\":2,\"inherits\":144}],24:[function(require,module,exports){\n(function (Buffer){\nmodule.exports = xor;\nfunction xor(a, b) {\n  var len = Math.min(a.length, b.length);\n  var out = new Buffer(len);\n  var i = -1;\n  while (++i < len) {\n    out.writeUInt8(a[i] ^ b[i], i);\n  }\n  return out;\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2}],25:[function(require,module,exports){\n(function (Buffer){\n'use strict'\nexports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {\n  sign: 'rsa',\n  hash: 'sha224',\n  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')\n}\nexports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {\n  sign: 'rsa',\n  hash: 'sha256',\n  id: new Buffer('3031300d060960864801650304020105000420', 'hex')\n}\nexports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {\n  sign: 'rsa',\n  hash: 'sha384',\n  id: new Buffer('3041300d060960864801650304020205000430', 'hex')\n}\nexports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {\n  sign: 'rsa',\n  hash: 'sha512',\n  id: new Buffer('3051300d060960864801650304020305000440', 'hex')\n}\nexports['RSA-SHA1'] = {\n\tsign: 'rsa',\n\thash: 'sha1',\n\tid: new Buffer('3021300906052b0e03021a05000414', 'hex')\n}\nexports['ecdsa-with-SHA1'] = {\n\tsign: 'ecdsa',\n\thash: 'sha1',\n\tid: new Buffer('', 'hex')\n}\nexports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {\n  sign: 'dsa',\n  hash: 'sha1',\n  id: new Buffer('', 'hex')\n}\nexports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {\n  sign: 'dsa',\n  hash: 'sha224',\n  id: new Buffer('', 'hex')\n}\nexports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {\n  sign: 'dsa',\n  hash: 'sha256',\n  id: new Buffer('', 'hex')\n}\nexports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {\n  sign: 'dsa',\n  hash: 'sha384',\n  id: new Buffer('', 'hex')\n}\nexports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {\n  sign: 'dsa',\n  hash: 'sha512',\n  id: new Buffer('', 'hex')\n}\nexports['DSA-RIPEMD160'] = {\n  sign: 'dsa',\n  hash: 'rmd160',\n  id: new Buffer('', 'hex')\n}\nexports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {\n  sign: 'rsa',\n  hash: 'rmd160',\n  id: new Buffer('3021300906052b2403020105000414', 'hex')\n}\nexports['RSA-MD5'] = exports.md5WithRSAEncryption = {\n  sign: 'rsa',\n  hash: 'md5',\n  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')\n}\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2}],26:[function(require,module,exports){\n(function (Buffer){\n'use strict'\nvar sign = require('./sign')\nvar verify = require('./verify')\nvar stream = require('stream')\nvar inherits = require('inherits')\nvar _algos = require('./algos')\nvar createHash = require('create-hash')\nvar algos = {}\nObject.keys(_algos).forEach(function (key) {\n  algos[key] = algos[key.toLowerCase()] = _algos[key]\n})\n\nexports.createSign = exports.Sign = createSign\n\nfunction createSign (algorithm) {\n  return new Sign(algorithm)\n}\n\nexports.createVerify = exports.Verify = createVerify\n\nfunction createVerify (algorithm) {\n  return new Verify(algorithm)\n}\n\ninherits(Sign, stream.Writable)\n\nfunction Sign (algorithm) {\n  stream.Writable.call(this)\n  var data = algos[algorithm]\n  if (!data)\n    throw new Error('Unknown message digest')\n\n  this._hashType = data.hash\n  this._hash = createHash(data.hash)\n  this._tag = data.id\n  this._signType = data.sign\n}\n\nSign.prototype._write = function _write (data, _, done) {\n  this._hash.update(data)\n  done()\n}\n\nSign.prototype.update = function update (data, enc) {\n  if (typeof data === 'string')\n    data = new Buffer(data, enc)\n  this._hash.update(data)\n  return this\n}\n\nSign.prototype.sign = function signMethod (key, enc) {\n  this.end()\n  var hash = this._hash.digest()\n  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)\n  if (enc) {\n    sig = sig.toString(enc)\n  }\n  return sig\n}\n\ninherits(Verify, stream.Writable)\nfunction Verify (algorithm) {\n  stream.Writable.call(this)\n  var data = algos[algorithm]\n  if (!data)\n    throw new Error('Unknown message digest')\n\n  this._hash = createHash(data.hash)\n  this._tag = data.id\n  this._signType = data.sign\n}\n\nVerify.prototype._write = function _write (data, _, done) {\n  this._hash.update(data)\n  done()\n}\n\nVerify.prototype.update = function update (data, enc) {\n  if (typeof data === 'string')\n    data = new Buffer(data, enc)\n\n  this._hash.update(data)\n  return this\n}\n\nVerify.prototype.verify = function verifyMethod (key, sig, enc) {\n  this.end()\n  var hash = this._hash.digest()\n  if (typeof sig === 'string')\n    sig = new Buffer(sig, enc)\n\n  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)\n}\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./algos\":25,\"./sign\":69,\"./verify\":70,\"buffer\":2,\"create-hash\":94,\"inherits\":144,\"stream\":158}],27:[function(require,module,exports){\n'use strict'\nexports['1.3.132.0.10'] = 'secp256k1'\n\nexports['1.3.132.0.33'] = 'p224'\n\nexports['1.2.840.10045.3.1.1'] = 'p192'\n\nexports['1.2.840.10045.3.1.7'] = 'p256'\n\n},{}],28:[function(require,module,exports){\n(function(module, exports) {\n\n'use strict';\n\n// Utils\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\n// Could use `inherits` module, but don't want to move from single file\n// architecture yet.\nfunction inherits(ctor, superCtor) {\n  ctor.super_ = superCtor;\n  var TempCtor = function () {};\n  TempCtor.prototype = superCtor.prototype;\n  ctor.prototype = new TempCtor();\n  ctor.prototype.constructor = ctor;\n}\n\n// BN\n\nfunction BN(number, base, endian) {\n  // May be `new BN(bn)` ?\n  if (number !== null &&\n      typeof number === 'object' &&\n      Array.isArray(number.words)) {\n    return number;\n  }\n\n  this.sign = false;\n  this.words = null;\n  this.length = 0;\n\n  // Reduction context\n  this.red = null;\n\n  if (base === 'le' || base === 'be') {\n    endian = base;\n    base = 10;\n  }\n\n  if (number !== null)\n    this._init(number || 0, base || 10, endian || 'be');\n}\nif (typeof module === 'object')\n  module.exports = BN;\nelse\n  exports.BN = BN;\n\nBN.BN = BN;\nBN.wordSize = 26;\n\nBN.prototype._init = function init(number, base, endian) {\n  if (typeof number === 'number') {\n    if (number < 0) {\n      this.sign = true;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    }\n    return;\n  } else if (typeof number === 'object') {\n    return this._initArray(number, base, endian);\n  }\n  if (base === 'hex')\n    base = 16;\n  assert(base === (base | 0) && base >= 2 && base <= 36);\n\n  number = number.toString().replace(/\\s+/g, '');\n  var start = 0;\n  if (number[0] === '-')\n    start++;\n\n  if (base === 16)\n    this._parseHex(number, start);\n  else\n    this._parseBase(number, base, start);\n\n  if (number[0] === '-')\n    this.sign = true;\n\n  this.strip();\n};\n\nBN.prototype._initArray = function _initArray(number, base, endian) {\n  // Perhaps a Uint8Array\n  assert(typeof number.length === 'number');\n  this.length = Math.ceil(number.length / 3);\n  this.words = new Array(this.length);\n  for (var i = 0; i < this.length; i++)\n    this.words[i] = 0;\n\n  var off = 0;\n  if (endian === 'be') {\n    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {\n      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n  } else if (endian === 'le') {\n    for (var i = 0, j = 0; i < number.length; i += 3) {\n      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n  }\n  return this.strip();\n};\n\nfunction parseHex(str, start, end) {\n  var r = 0;\n  var len = Math.min(str.length, end);\n  for (var i = start; i < len; i++) {\n    var c = str.charCodeAt(i) - 48;\n\n    r <<= 4;\n\n    // 'a' - 'f'\n    if (c >= 49 && c <= 54)\n      r |= c - 49 + 0xa;\n\n    // 'A' - 'F'\n    else if (c >= 17 && c <= 22)\n      r |= c - 17 + 0xa;\n\n    // '0' - '9'\n    else\n      r |= c & 0xf;\n  }\n  return r;\n}\n\nBN.prototype._parseHex = function _parseHex(number, start) {\n  // Create possibly bigger array to ensure that it fits the number\n  this.length = Math.ceil((number.length - start) / 6);\n  this.words = new Array(this.length);\n  for (var i = 0; i < this.length; i++)\n    this.words[i] = 0;\n\n  // Scan 24-bit chunks and add them to the number\n  var off = 0;\n  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {\n    var w = parseHex(number, i, i + 6);\n    this.words[j] |= (w << off) & 0x3ffffff;\n    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    off += 24;\n    if (off >= 26) {\n      off -= 26;\n      j++;\n    }\n  }\n  if (i + 6 !== start) {\n    var w = parseHex(number, start, i + 6);\n    this.words[j] |= (w << off) & 0x3ffffff;\n    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n  }\n  this.strip();\n};\n\nfunction parseBase(str, start, end, mul) {\n  var r = 0;\n  var len = Math.min(str.length, end);\n  for (var i = start; i < len; i++) {\n    var c = str.charCodeAt(i) - 48;\n\n    r *= mul;\n\n    // 'a'\n    if (c >= 49)\n      r += c - 49 + 0xa;\n\n    // 'A'\n    else if (c >= 17)\n      r += c - 17 + 0xa;\n\n    // '0' - '9'\n    else\n      r += c;\n  }\n  return r;\n}\n\nBN.prototype._parseBase = function _parseBase(number, base, start) {\n  // Initialize as zero\n  this.words = [ 0 ];\n  this.length = 1;\n\n  // Find length of limb in base\n  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)\n    limbLen++;\n  limbLen--;\n  limbPow = (limbPow / base) | 0;\n\n  var total = number.length - start;\n  var mod = total % limbLen;\n  var end = Math.min(total, total - mod) + start;\n\n  var word = 0;\n  for (var i = start; i < end; i += limbLen) {\n    word = parseBase(number, i, i + limbLen, base);\n\n    this.imuln(limbPow);\n    if (this.words[0] + word < 0x4000000)\n      this.words[0] += word;\n    else\n      this._iaddn(word);\n  }\n\n  if (mod !== 0) {\n    var pow = 1;\n    var word = parseBase(number, i, number.length, base);\n\n    for (var i = 0; i < mod; i++)\n      pow *= base;\n    this.imuln(pow);\n    if (this.words[0] + word < 0x4000000)\n      this.words[0] += word;\n    else\n      this._iaddn(word);\n  }\n};\n\nBN.prototype.copy = function copy(dest) {\n  dest.words = new Array(this.length);\n  for (var i = 0; i < this.length; i++)\n    dest.words[i] = this.words[i];\n  dest.length = this.length;\n  dest.sign = this.sign;\n  dest.red = this.red;\n};\n\nBN.prototype.clone = function clone() {\n  var r = new BN(null);\n  this.copy(r);\n  return r;\n};\n\n// Remove leading `0` from `this`\nBN.prototype.strip = function strip() {\n  while (this.length > 1 && this.words[this.length - 1] === 0)\n    this.length--;\n  return this._normSign();\n};\n\nBN.prototype._normSign = function _normSign() {\n  // -0 = 0\n  if (this.length === 1 && this.words[0] === 0)\n    this.sign = false;\n  return this;\n};\n\nBN.prototype.inspect = function inspect() {\n  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n};\n\n/*\n\nvar zeros = [];\nvar groupSizes = [];\nvar groupBases = [];\n\nvar s = '';\nvar i = -1;\nwhile (++i < BN.wordSize) {\n  zeros[i] = s;\n  s += '0';\n}\ngroupSizes[0] = 0;\ngroupSizes[1] = 0;\ngroupBases[0] = 0;\ngroupBases[1] = 0;\nvar base = 2 - 1;\nwhile (++base < 36 + 1) {\n  var groupSize = 0;\n  var groupBase = 1;\n  while (groupBase < (1 << BN.wordSize) / base) {\n    groupBase *= base;\n    groupSize += 1;\n  }\n  groupSizes[base] = groupSize;\n  groupBases[base] = groupBase;\n}\n\n*/\n\nvar zeros = [\n  '',\n  '0',\n  '00',\n  '000',\n  '0000',\n  '00000',\n  '000000',\n  '0000000',\n  '00000000',\n  '000000000',\n  '0000000000',\n  '00000000000',\n  '000000000000',\n  '0000000000000',\n  '00000000000000',\n  '000000000000000',\n  '0000000000000000',\n  '00000000000000000',\n  '000000000000000000',\n  '0000000000000000000',\n  '00000000000000000000',\n  '000000000000000000000',\n  '0000000000000000000000',\n  '00000000000000000000000',\n  '000000000000000000000000',\n  '0000000000000000000000000'\n];\n\nvar groupSizes = [\n  0, 0,\n  25, 16, 12, 11, 10, 9, 8,\n  8, 7, 7, 7, 7, 6, 6,\n  6, 6, 6, 6, 6, 5, 5,\n  5, 5, 5, 5, 5, 5, 5,\n  5, 5, 5, 5, 5, 5, 5\n];\n\nvar groupBases = [\n  0, 0,\n  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n];\n\nBN.prototype.toString = function toString(base, padding) {\n  base = base || 10;\n  if (base === 16 || base === 'hex') {\n    var out = '';\n    var off = 0;\n    var padding = padding | 0 || 1;\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = this.words[i];\n      var word = (((w << off) | carry) & 0xffffff).toString(16);\n      carry = (w >>> (24 - off)) & 0xffffff;\n      if (carry !== 0 || i !== this.length - 1)\n        out = zeros[6 - word.length] + word + out;\n      else\n        out = word + out;\n      off += 2;\n      if (off >= 26) {\n        off -= 26;\n        i--;\n      }\n    }\n    if (carry !== 0)\n      out = carry.toString(16) + out;\n    while (out.length % padding !== 0)\n      out = '0' + out;\n    if (this.sign)\n      out = '-' + out;\n    return out;\n  } else if (base === (base | 0) && base >= 2 && base <= 36) {\n    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n    var groupSize = groupSizes[base];\n    // var groupBase = Math.pow(base, groupSize);\n    var groupBase = groupBases[base];\n    var out = '';\n    var c = this.clone();\n    c.sign = false;\n    while (c.cmpn(0) !== 0) {\n      var r = c.modn(groupBase).toString(base);\n      c = c.idivn(groupBase);\n\n      if (c.cmpn(0) !== 0)\n        out = zeros[groupSize - r.length] + r + out;\n      else\n        out = r + out;\n    }\n    if (this.cmpn(0) === 0)\n      out = '0' + out;\n    if (this.sign)\n      out = '-' + out;\n    return out;\n  } else {\n    assert(false, 'Base should be between 2 and 36');\n  }\n};\n\nBN.prototype.toJSON = function toJSON() {\n  return this.toString(16);\n};\n\nBN.prototype.toArray = function toArray() {\n  this.strip();\n  var res = new Array(this.byteLength());\n  res[0] = 0;\n\n  var q = this.clone();\n  for (var i = 0; q.cmpn(0) !== 0; i++) {\n    var b = q.andln(0xff);\n    q.ishrn(8);\n\n    // Assume big-endian\n    res[res.length - i - 1] = b;\n  }\n\n  return res;\n};\n\n/*\nfunction genCountBits(bits) {\n  var arr = [];\n\n  for (var i = bits - 1; i >= 0; i--) {\n    var bit = '0x' + (1 << i).toString(16);\n    arr.push('w >= ' + bit + ' ? ' + (i + 1));\n  }\n\n  return new Function('w', 'return ' + arr.join(' :\\n') + ' :\\n0;');\n};\n\nBN.prototype._countBits = genCountBits(26);\n*/\n\n// Sadly chrome apps could not contain `new Function()` calls\nBN.prototype._countBits = function _countBits(w) {\n  return w >= 0x2000000 ? 26 :\n         w >= 0x1000000 ? 25 :\n         w >= 0x800000 ? 24 :\n         w >= 0x400000 ? 23 :\n         w >= 0x200000 ? 22 :\n         w >= 0x100000 ? 21 :\n         w >= 0x80000 ? 20 :\n         w >= 0x40000 ? 19 :\n         w >= 0x20000 ? 18 :\n         w >= 0x10000 ? 17 :\n         w >= 0x8000 ? 16 :\n         w >= 0x4000 ? 15 :\n         w >= 0x2000 ? 14 :\n         w >= 0x1000 ? 13 :\n         w >= 0x800 ? 12 :\n         w >= 0x400 ? 11 :\n         w >= 0x200 ? 10 :\n         w >= 0x100 ? 9 :\n         w >= 0x80 ? 8 :\n         w >= 0x40 ? 7 :\n         w >= 0x20 ? 6 :\n         w >= 0x10 ? 5 :\n         w >= 0x8 ? 4 :\n         w >= 0x4 ? 3 :\n         w >= 0x2 ? 2 :\n         w >= 0x1 ? 1 :\n         0;\n};\n\n// Return number of used bits in a BN\nBN.prototype.bitLength = function bitLength() {\n  var hi = 0;\n  var w = this.words[this.length - 1];\n  var hi = this._countBits(w);\n  return (this.length - 1) * 26 + hi;\n};\n\nBN.prototype.byteLength = function byteLength() {\n  return Math.ceil(this.bitLength() / 8);\n};\n\n// Return negative clone of `this`\nBN.prototype.neg = function neg() {\n  if (this.cmpn(0) === 0)\n    return this.clone();\n\n  var r = this.clone();\n  r.sign = !this.sign;\n  return r;\n};\n\n\n// Or `num` with `this` in-place\nBN.prototype.ior = function ior(num) {\n  this.sign = this.sign || num.sign;\n\n  while (this.length < num.length)\n    this.words[this.length++] = 0;\n\n  for (var i = 0; i < num.length; i++)\n    this.words[i] = this.words[i] | num.words[i];\n\n  return this.strip();\n};\n\n\n// Or `num` with `this`\nBN.prototype.or = function or(num) {\n  if (this.length > num.length)\n    return this.clone().ior(num);\n  else\n    return num.clone().ior(this);\n};\n\n\n// And `num` with `this` in-place\nBN.prototype.iand = function iand(num) {\n  this.sign = this.sign && num.sign;\n\n  // b = min-length(num, this)\n  var b;\n  if (this.length > num.length)\n    b = num;\n  else\n    b = this;\n\n  for (var i = 0; i < b.length; i++)\n    this.words[i] = this.words[i] & num.words[i];\n\n  this.length = b.length;\n\n  return this.strip();\n};\n\n\n// And `num` with `this`\nBN.prototype.and = function and(num) {\n  if (this.length > num.length)\n    return this.clone().iand(num);\n  else\n    return num.clone().iand(this);\n};\n\n\n// Xor `num` with `this` in-place\nBN.prototype.ixor = function ixor(num) {\n  this.sign = this.sign || num.sign;\n\n  // a.length > b.length\n  var a;\n  var b;\n  if (this.length > num.length) {\n    a = this;\n    b = num;\n  } else {\n    a = num;\n    b = this;\n  }\n\n  for (var i = 0; i < b.length; i++)\n    this.words[i] = a.words[i] ^ b.words[i];\n\n  if (this !== a)\n    for (; i < a.length; i++)\n      this.words[i] = a.words[i];\n\n  this.length = a.length;\n\n  return this.strip();\n};\n\n\n// Xor `num` with `this`\nBN.prototype.xor = function xor(num) {\n  if (this.length > num.length)\n    return this.clone().ixor(num);\n  else\n    return num.clone().ixor(this);\n};\n\n\n// Set `bit` of `this`\nBN.prototype.setn = function setn(bit, val) {\n  assert(typeof bit === 'number' && bit >= 0);\n\n  var off = (bit / 26) | 0;\n  var wbit = bit % 26;\n\n  while (this.length <= off)\n    this.words[this.length++] = 0;\n\n  if (val)\n    this.words[off] = this.words[off] | (1 << wbit);\n  else\n    this.words[off] = this.words[off] & ~(1 << wbit);\n\n  return this.strip();\n};\n\n\n// Add `num` to `this` in-place\nBN.prototype.iadd = function iadd(num) {\n  // negative + positive\n  if (this.sign && !num.sign) {\n    this.sign = false;\n    var r = this.isub(num);\n    this.sign = !this.sign;\n    return this._normSign();\n\n  // positive + negative\n  } else if (!this.sign && num.sign) {\n    num.sign = false;\n    var r = this.isub(num);\n    num.sign = true;\n    return r._normSign();\n  }\n\n  // a.length > b.length\n  var a;\n  var b;\n  if (this.length > num.length) {\n    a = this;\n    b = num;\n  } else {\n    a = num;\n    b = this;\n  }\n\n  var carry = 0;\n  for (var i = 0; i < b.length; i++) {\n    var r = a.words[i] + b.words[i] + carry;\n    this.words[i] = r & 0x3ffffff;\n    carry = r >>> 26;\n  }\n  for (; carry !== 0 && i < a.length; i++) {\n    var r = a.words[i] + carry;\n    this.words[i] = r & 0x3ffffff;\n    carry = r >>> 26;\n  }\n\n  this.length = a.length;\n  if (carry !== 0) {\n    this.words[this.length] = carry;\n    this.length++;\n  // Copy the rest of the words\n  } else if (a !== this) {\n    for (; i < a.length; i++)\n      this.words[i] = a.words[i];\n  }\n\n  return this;\n};\n\n// Add `num` to `this`\nBN.prototype.add = function add(num) {\n  if (num.sign && !this.sign) {\n    num.sign = false;\n    var res = this.sub(num);\n    num.sign = true;\n    return res;\n  } else if (!num.sign && this.sign) {\n    this.sign = false;\n    var res = num.sub(this);\n    this.sign = true;\n    return res;\n  }\n\n  if (this.length > num.length)\n    return this.clone().iadd(num);\n  else\n    return num.clone().iadd(this);\n};\n\n// Subtract `num` from `this` in-place\nBN.prototype.isub = function isub(num) {\n  // this - (-num) = this + num\n  if (num.sign) {\n    num.sign = false;\n    var r = this.iadd(num);\n    num.sign = true;\n    return r._normSign();\n\n  // -this - num = -(this + num)\n  } else if (this.sign) {\n    this.sign = false;\n    this.iadd(num);\n    this.sign = true;\n    return this._normSign();\n  }\n\n  // At this point both numbers are positive\n  var cmp = this.cmp(num);\n\n  // Optimization - zeroify\n  if (cmp === 0) {\n    this.sign = false;\n    this.length = 1;\n    this.words[0] = 0;\n    return this;\n  }\n\n  // a > b\n  var a;\n  var b;\n  if (cmp > 0) {\n    a = this;\n    b = num;\n  } else {\n    a = num;\n    b = this;\n  }\n\n  var carry = 0;\n  for (var i = 0; i < b.length; i++) {\n    var r = a.words[i] - b.words[i] + carry;\n    carry = r >> 26;\n    this.words[i] = r & 0x3ffffff;\n  }\n  for (; carry !== 0 && i < a.length; i++) {\n    var r = a.words[i] + carry;\n    carry = r >> 26;\n    this.words[i] = r & 0x3ffffff;\n  }\n\n  // Copy rest of the words\n  if (carry === 0 && i < a.length && a !== this)\n    for (; i < a.length; i++)\n      this.words[i] = a.words[i];\n  this.length = Math.max(this.length, i);\n\n  if (a !== this)\n    this.sign = true;\n\n  return this.strip();\n};\n\n// Subtract `num` from `this`\nBN.prototype.sub = function sub(num) {\n  return this.clone().isub(num);\n};\n\n/*\n// NOTE: This could be potentionally used to generate loop-less multiplications\nfunction _genCombMulTo(alen, blen) {\n  var len = alen + blen - 1;\n  var src = [\n    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +\n        'mask = 0x3ffffff, shift = 0x4000000;',\n    'out.length = ' + len + ';'\n  ];\n  for (var k = 0; k < len; k++) {\n    var minJ = Math.max(0, k - alen + 1);\n    var maxJ = Math.min(k, blen - 1);\n\n    for (var j = minJ; j <= maxJ; j++) {\n      var i = k - j;\n      var mul = 'a[' + i + '] * b[' + j + ']';\n\n      if (j === minJ) {\n        src.push('w = ' + mul + ' + c;');\n        src.push('c = (w / shift) | 0;');\n      } else {\n        src.push('w += ' + mul + ';');\n        src.push('c += (w / shift) | 0;');\n      }\n      src.push('w &= mask;');\n    }\n    src.push('o[' + k + '] = w;');\n  }\n  src.push('if (c !== 0) {',\n           '  o[' + k + '] = c;',\n           '  out.length++;',\n           '}',\n           'return out;');\n\n  return src.join('\\n');\n}\n*/\n\nBN.prototype._smallMulTo = function _smallMulTo(num, out) {\n  out.sign = num.sign !== this.sign;\n  out.length = this.length + num.length;\n\n  var carry = 0;\n  for (var k = 0; k < out.length - 1; k++) {\n    // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n    // note that ncarry could be >= 0x3ffffff\n    var ncarry = carry >>> 26;\n    var rword = carry & 0x3ffffff;\n    var maxJ = Math.min(k, num.length - 1);\n    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {\n      var i = k - j;\n      var a = this.words[i] | 0;\n      var b = num.words[j] | 0;\n      var r = a * b;\n\n      var lo = r & 0x3ffffff;\n      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n      lo = (lo + rword) | 0;\n      rword = lo & 0x3ffffff;\n      ncarry = (ncarry + (lo >>> 26)) | 0;\n    }\n    out.words[k] = rword;\n    carry = ncarry;\n  }\n  if (carry !== 0) {\n    out.words[k] = carry;\n  } else {\n    out.length--;\n  }\n\n  return out.strip();\n};\n\nBN.prototype._bigMulTo = function _bigMulTo(num, out) {\n  out.sign = num.sign !== this.sign;\n  out.length = this.length + num.length;\n\n  var carry = 0;\n  var hncarry = 0;\n  for (var k = 0; k < out.length - 1; k++) {\n    // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n    // note that ncarry could be >= 0x3ffffff\n    var ncarry = hncarry;\n    hncarry = 0;\n    var rword = carry & 0x3ffffff;\n    var maxJ = Math.min(k, num.length - 1);\n    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {\n      var i = k - j;\n      var a = this.words[i] | 0;\n      var b = num.words[j] | 0;\n      var r = a * b;\n\n      var lo = r & 0x3ffffff;\n      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n      lo = (lo + rword) | 0;\n      rword = lo & 0x3ffffff;\n      ncarry = (ncarry + (lo >>> 26)) | 0;\n\n      hncarry += ncarry >>> 26;\n      ncarry &= 0x3ffffff;\n    }\n    out.words[k] = rword;\n    carry = ncarry;\n    ncarry = hncarry;\n  }\n  if (carry !== 0) {\n    out.words[k] = carry;\n  } else {\n    out.length--;\n  }\n\n  return out.strip();\n};\n\nBN.prototype.mulTo = function mulTo(num, out) {\n  var res;\n  if (this.length + num.length < 63)\n    res = this._smallMulTo(num, out);\n  else\n    res = this._bigMulTo(num, out);\n  return res;\n};\n\n// Multiply `this` by `num`\nBN.prototype.mul = function mul(num) {\n  var out = new BN(null);\n  out.words = new Array(this.length + num.length);\n  return this.mulTo(num, out);\n};\n\n// In-place Multiplication\nBN.prototype.imul = function imul(num) {\n  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {\n    this.words[0] = 0;\n    this.length = 1;\n    return this;\n  }\n\n  var tlen = this.length;\n  var nlen = num.length;\n\n  this.sign = num.sign !== this.sign;\n  this.length = this.length + num.length;\n  this.words[this.length - 1] = 0;\n\n  for (var k = this.length - 2; k >= 0; k--) {\n    // Sum all words with the same `i + j = k` and accumulate `carry`,\n    // note that carry could be >= 0x3ffffff\n    var carry = 0;\n    var rword = 0;\n    var maxJ = Math.min(k, nlen - 1);\n    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {\n      var i = k - j;\n      var a = this.words[i];\n      var b = num.words[j];\n      var r = a * b;\n\n      var lo = r & 0x3ffffff;\n      carry += (r / 0x4000000) | 0;\n      lo += rword;\n      rword = lo & 0x3ffffff;\n      carry += lo >>> 26;\n    }\n    this.words[k] = rword;\n    this.words[k + 1] += carry;\n    carry = 0;\n  }\n\n  // Propagate overflows\n  var carry = 0;\n  for (var i = 1; i < this.length; i++) {\n    var w = this.words[i] + carry;\n    this.words[i] = w & 0x3ffffff;\n    carry = w >>> 26;\n  }\n\n  return this.strip();\n};\n\nBN.prototype.imuln = function imuln(num) {\n  assert(typeof num === 'number');\n\n  // Carry\n  var carry = 0;\n  for (var i = 0; i < this.length; i++) {\n    var w = this.words[i] * num;\n    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n    carry >>= 26;\n    carry += (w / 0x4000000) | 0;\n    // NOTE: lo is 27bit maximum\n    carry += lo >>> 26;\n    this.words[i] = lo & 0x3ffffff;\n  }\n\n  if (carry !== 0) {\n    this.words[i] = carry;\n    this.length++;\n  }\n\n  return this;\n};\n\n// `this` * `this`\nBN.prototype.sqr = function sqr() {\n  return this.mul(this);\n};\n\n// `this` * `this` in-place\nBN.prototype.isqr = function isqr() {\n  return this.mul(this);\n};\n\n// Shift-left in-place\nBN.prototype.ishln = function ishln(bits) {\n  assert(typeof bits === 'number' && bits >= 0);\n  var r = bits % 26;\n  var s = (bits - r) / 26;\n  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n\n  if (r !== 0) {\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var newCarry = this.words[i] & carryMask;\n      var c = (this.words[i] - newCarry) << r;\n      this.words[i] = c | carry;\n      carry = newCarry >>> (26 - r);\n    }\n    if (carry) {\n      this.words[i] = carry;\n      this.length++;\n    }\n  }\n\n  if (s !== 0) {\n    for (var i = this.length - 1; i >= 0; i--)\n      this.words[i + s] = this.words[i];\n    for (var i = 0; i < s; i++)\n      this.words[i] = 0;\n    this.length += s;\n  }\n\n  return this.strip();\n};\n\n// Shift-right in-place\n// NOTE: `hint` is a lowest bit before trailing zeroes\n// NOTE: if `extended` is true - { lo: ..., hi: } object will be returned\nBN.prototype.ishrn = function ishrn(bits, hint, extended) {\n  assert(typeof bits === 'number' && bits >= 0);\n  if (hint)\n    hint = (hint - (hint % 26)) / 26;\n  else\n    hint = 0;\n\n  var r = bits % 26;\n  var s = Math.min((bits - r) / 26, this.length);\n  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n  var maskedWords = extended;\n\n  hint -= s;\n  hint = Math.max(0, hint);\n\n  // Extended mode, copy masked part\n  if (maskedWords) {\n    for (var i = 0; i < s; i++)\n      maskedWords.words[i] = this.words[i];\n    maskedWords.length = s;\n  }\n\n  if (s === 0) {\n    // No-op, we should not move anything at all\n  } else if (this.length > s) {\n    this.length -= s;\n    for (var i = 0; i < this.length; i++)\n      this.words[i] = this.words[i + s];\n  } else {\n    this.words[0] = 0;\n    this.length = 1;\n  }\n\n  var carry = 0;\n  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= hint); i--) {\n    var word = this.words[i];\n    this.words[i] = (carry << (26 - r)) | (word >>> r);\n    carry = word & mask;\n  }\n\n  // Push carried bits as a mask\n  if (maskedWords && carry !== 0)\n    maskedWords.words[maskedWords.length++] = carry;\n\n  if (this.length === 0) {\n    this.words[0] = 0;\n    this.length = 1;\n  }\n\n  this.strip();\n  if (extended)\n    return { hi: this, lo: maskedWords };\n\n  return this;\n};\n\n// Shift-left\nBN.prototype.shln = function shln(bits) {\n  return this.clone().ishln(bits);\n};\n\n// Shift-right\nBN.prototype.shrn = function shrn(bits) {\n  return this.clone().ishrn(bits);\n};\n\n// Test if n bit is set\nBN.prototype.testn = function testn(bit) {\n  assert(typeof bit === 'number' && bit >= 0);\n  var r = bit % 26;\n  var s = (bit - r) / 26;\n  var q = 1 << r;\n\n  // Fast case: bit is much higher than all existing words\n  if (this.length <= s) {\n    return false;\n  }\n\n  // Check bit and return\n  var w = this.words[s];\n\n  return !!(w & q);\n};\n\n// Return only lowers bits of number (in-place)\nBN.prototype.imaskn = function imaskn(bits) {\n  assert(typeof bits === 'number' && bits >= 0);\n  var r = bits % 26;\n  var s = (bits - r) / 26;\n\n  assert(!this.sign, 'imaskn works only with positive numbers');\n\n  if (r !== 0)\n    s++;\n  this.length = Math.min(s, this.length);\n\n  if (r !== 0) {\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    this.words[this.length - 1] &= mask;\n  }\n\n  return this.strip();\n};\n\n// Return only lowers bits of number\nBN.prototype.maskn = function maskn(bits) {\n  return this.clone().imaskn(bits);\n};\n\n// Add plain number `num` to `this`\nBN.prototype.iaddn = function iaddn(num) {\n  assert(typeof num === 'number');\n  if (num < 0)\n    return this.isubn(-num);\n\n  // Possible sign change\n  if (this.sign) {\n    if (this.length === 1 && this.words[0] < num) {\n      this.words[0] = num - this.words[0];\n      this.sign = false;\n      return this;\n    }\n\n    this.sign = false;\n    this.isubn(num);\n    this.sign = true;\n    return this;\n  }\n\n  // Add without checks\n  return this._iaddn(num);\n};\n\nBN.prototype._iaddn = function _iaddn(num) {\n  this.words[0] += num;\n\n  // Carry\n  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n    this.words[i] -= 0x4000000;\n    if (i === this.length - 1)\n      this.words[i + 1] = 1;\n    else\n      this.words[i + 1]++;\n  }\n  this.length = Math.max(this.length, i + 1);\n\n  return this;\n};\n\n// Subtract plain number `num` from `this`\nBN.prototype.isubn = function isubn(num) {\n  assert(typeof num === 'number');\n  if (num < 0)\n    return this.iaddn(-num);\n\n  if (this.sign) {\n    this.sign = false;\n    this.iaddn(num);\n    this.sign = true;\n    return this;\n  }\n\n  this.words[0] -= num;\n\n  // Carry\n  for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n    this.words[i] += 0x4000000;\n    this.words[i + 1] -= 1;\n  }\n\n  return this.strip();\n};\n\nBN.prototype.addn = function addn(num) {\n  return this.clone().iaddn(num);\n};\n\nBN.prototype.subn = function subn(num) {\n  return this.clone().isubn(num);\n};\n\nBN.prototype.iabs = function iabs() {\n  this.sign = false;\n\n  return this;\n};\n\nBN.prototype.abs = function abs() {\n  return this.clone().iabs();\n};\n\nBN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n  // Bigger storage is needed\n  var len = num.length + shift;\n  var i;\n  if (this.words.length < len) {\n    var t = new Array(len);\n    for (var i = 0; i < this.length; i++)\n      t[i] = this.words[i];\n    this.words = t;\n  } else {\n    i = this.length;\n  }\n\n  // Zeroify rest\n  this.length = Math.max(this.length, len);\n  for (; i < this.length; i++)\n    this.words[i] = 0;\n\n  var carry = 0;\n  for (var i = 0; i < num.length; i++) {\n    var w = this.words[i + shift] + carry;\n    var right = num.words[i] * mul;\n    w -= right & 0x3ffffff;\n    carry = (w >> 26) - ((right / 0x4000000) | 0);\n    this.words[i + shift] = w & 0x3ffffff;\n  }\n  for (; i < this.length - shift; i++) {\n    var w = this.words[i + shift] + carry;\n    carry = w >> 26;\n    this.words[i + shift] = w & 0x3ffffff;\n  }\n\n  if (carry === 0)\n    return this.strip();\n\n  // Subtraction overflow\n  assert(carry === -1);\n  carry = 0;\n  for (var i = 0; i < this.length; i++) {\n    var w = -this.words[i] + carry;\n    carry = w >> 26;\n    this.words[i] = w & 0x3ffffff;\n  }\n  this.sign = true;\n\n  return this.strip();\n};\n\nBN.prototype._wordDiv = function _wordDiv(num, mode) {\n  var shift = this.length - num.length;\n\n  var a = this.clone();\n  var b = num;\n\n  // Normalize\n  var bhi = b.words[b.length - 1];\n  for (var shift = 0; bhi < 0x2000000; shift++)\n    bhi <<= 1;\n  if (shift !== 0) {\n    b = b.shln(shift);\n    a.ishln(shift);\n    bhi = b.words[b.length - 1];\n  }\n\n  // Initialize quotient\n  var m = a.length - b.length;\n  var q;\n\n  if (mode !== 'mod') {\n    q = new BN(null);\n    q.length = m + 1;\n    q.words = new Array(q.length);\n    for (var i = 0; i < q.length; i++)\n      q.words[i] = 0;\n  }\n\n  var diff = a.clone()._ishlnsubmul(b, 1, m);\n  if (!diff.sign) {\n    a = diff;\n    if (q)\n      q.words[m] = 1;\n  }\n\n  for (var j = m - 1; j >= 0; j--) {\n    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];\n\n    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n    // (0x7ffffff)\n    qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n    a._ishlnsubmul(b, qj, j);\n    while (a.sign) {\n      qj--;\n      a.sign = false;\n      a._ishlnsubmul(b, 1, j);\n      a.sign = !a.sign;\n    }\n    if (q)\n      q.words[j] = qj;\n  }\n  if (q)\n    q.strip();\n  a.strip();\n\n  // Denormalize\n  if (mode !== 'div' && shift !== 0)\n    a.ishrn(shift);\n  return { div: q ? q : null, mod: a };\n};\n\nBN.prototype.divmod = function divmod(num, mode) {\n  assert(num.cmpn(0) !== 0);\n\n  if (this.sign && !num.sign) {\n    var res = this.neg().divmod(num, mode);\n    var div;\n    var mod;\n    if (mode !== 'mod')\n      div = res.div.neg();\n    if (mode !== 'div')\n      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);\n    return {\n      div: div,\n      mod: mod\n    };\n  } else if (!this.sign && num.sign) {\n    var res = this.divmod(num.neg(), mode);\n    var div;\n    if (mode !== 'mod')\n      div = res.div.neg();\n    return { div: div, mod: res.mod };\n  } else if (this.sign && num.sign) {\n    return this.neg().divmod(num.neg(), mode);\n  }\n\n  // Both numbers are positive at this point\n\n  // Strip both numbers to approximate shift value\n  if (num.length > this.length || this.cmp(num) < 0)\n    return { div: new BN(0), mod: this };\n\n  // Very short reduction\n  if (num.length === 1) {\n    if (mode === 'div')\n      return { div: this.divn(num.words[0]), mod: null };\n    else if (mode === 'mod')\n      return { div: null, mod: new BN(this.modn(num.words[0])) };\n    return {\n      div: this.divn(num.words[0]),\n      mod: new BN(this.modn(num.words[0]))\n    };\n  }\n\n  return this._wordDiv(num, mode);\n};\n\n// Find `this` / `num`\nBN.prototype.div = function div(num) {\n  return this.divmod(num, 'div').div;\n};\n\n// Find `this` % `num`\nBN.prototype.mod = function mod(num) {\n  return this.divmod(num, 'mod').mod;\n};\n\n// Find Round(`this` / `num`)\nBN.prototype.divRound = function divRound(num) {\n  var dm = this.divmod(num);\n\n  // Fast case - exact division\n  if (dm.mod.cmpn(0) === 0)\n    return dm.div;\n\n  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;\n\n  var half = num.shrn(1);\n  var r2 = num.andln(1);\n  var cmp = mod.cmp(half);\n\n  // Round down\n  if (cmp < 0 || r2 === 1 && cmp === 0)\n    return dm.div;\n\n  // Round up\n  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);\n};\n\nBN.prototype.modn = function modn(num) {\n  assert(num <= 0x3ffffff);\n  var p = (1 << 26) % num;\n\n  var acc = 0;\n  for (var i = this.length - 1; i >= 0; i--)\n    acc = (p * acc + this.words[i]) % num;\n\n  return acc;\n};\n\n// In-place division by number\nBN.prototype.idivn = function idivn(num) {\n  assert(num <= 0x3ffffff);\n\n  var carry = 0;\n  for (var i = this.length - 1; i >= 0; i--) {\n    var w = this.words[i] + carry * 0x4000000;\n    this.words[i] = (w / num) | 0;\n    carry = w % num;\n  }\n\n  return this.strip();\n};\n\nBN.prototype.divn = function divn(num) {\n  return this.clone().idivn(num);\n};\n\nBN.prototype._egcd = function _egcd(x1, p) {\n  assert(!p.sign);\n  assert(p.cmpn(0) !== 0);\n\n  var a = this;\n  var b = p.clone();\n\n  if (a.sign)\n    a = a.mod(p);\n  else\n    a = a.clone();\n\n  var x2 = new BN(0);\n  while (b.isEven())\n    b.ishrn(1);\n  var delta = b.clone();\n  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n    while (a.isEven()) {\n      a.ishrn(1);\n      if (x1.isEven())\n        x1.ishrn(1);\n      else\n        x1.iadd(delta).ishrn(1);\n    }\n    while (b.isEven()) {\n      b.ishrn(1);\n      if (x2.isEven())\n        x2.ishrn(1);\n      else\n        x2.iadd(delta).ishrn(1);\n    }\n    if (a.cmp(b) >= 0) {\n      a.isub(b);\n      x1.isub(x2);\n    } else {\n      b.isub(a);\n      x2.isub(x1);\n    }\n  }\n  if (a.cmpn(1) === 0)\n    return x1;\n  else\n    return x2;\n};\n\nBN.prototype.gcd = function gcd(num) {\n  if (this.cmpn(0) === 0)\n    return num.clone();\n  if (num.cmpn(0) === 0)\n    return this.clone();\n\n  var a = this.clone();\n  var b = num.clone();\n  a.sign = false;\n  b.sign = false;\n\n  // Remove common factor of two\n  for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n    a.ishrn(1);\n    b.ishrn(1);\n  }\n\n  while (a.isEven())\n    a.ishrn(1);\n\n  do {\n    while (b.isEven())\n      b.ishrn(1);\n\n    // Swap `a` and `b` to make `a` always bigger than `b`\n    if (a.cmp(b) < 0) {\n      var t = a;\n      a = b;\n      b = t;\n    }\n    a.isub(a.div(b).mul(b));\n  } while (a.cmpn(0) !== 0 && b.cmpn(0) !== 0);\n  if (a.cmpn(0) === 0)\n    return b.ishln(shift);\n  else\n    return a.ishln(shift);\n};\n\n// Invert number in the field F(num)\nBN.prototype.invm = function invm(num) {\n  return this._egcd(new BN(1), num).mod(num);\n};\n\nBN.prototype.isEven = function isEven() {\n  return (this.words[0] & 1) === 0;\n};\n\nBN.prototype.isOdd = function isOdd() {\n  return (this.words[0] & 1) === 1;\n};\n\n// And first word and num\nBN.prototype.andln = function andln(num) {\n  return this.words[0] & num;\n};\n\n// Increment at the bit position in-line\nBN.prototype.bincn = function bincn(bit) {\n  assert(typeof bit === 'number');\n  var r = bit % 26;\n  var s = (bit - r) / 26;\n  var q = 1 << r;\n\n  // Fast case: bit is much higher than all existing words\n  if (this.length <= s) {\n    for (var i = this.length; i < s + 1; i++)\n      this.words[i] = 0;\n    this.words[s] |= q;\n    this.length = s + 1;\n    return this;\n  }\n\n  // Add bit and propagate, if needed\n  var carry = q;\n  for (var i = s; carry !== 0 && i < this.length; i++) {\n    var w = this.words[i];\n    w += carry;\n    carry = w >>> 26;\n    w &= 0x3ffffff;\n    this.words[i] = w;\n  }\n  if (carry !== 0) {\n    this.words[i] = carry;\n    this.length++;\n  }\n  return this;\n};\n\nBN.prototype.cmpn = function cmpn(num) {\n  var sign = num < 0;\n  if (sign)\n    num = -num;\n\n  if (this.sign && !sign)\n    return -1;\n  else if (!this.sign && sign)\n    return 1;\n\n  num &= 0x3ffffff;\n  this.strip();\n\n  var res;\n  if (this.length > 1) {\n    res = 1;\n  } else {\n    var w = this.words[0];\n    res = w === num ? 0 : w < num ? -1 : 1;\n  }\n  if (this.sign)\n    res = -res;\n  return res;\n};\n\n// Compare two numbers and return:\n// 1 - if `this` > `num`\n// 0 - if `this` == `num`\n// -1 - if `this` < `num`\nBN.prototype.cmp = function cmp(num) {\n  if (this.sign && !num.sign)\n    return -1;\n  else if (!this.sign && num.sign)\n    return 1;\n\n  var res = this.ucmp(num);\n  if (this.sign)\n    return -res;\n  else\n    return res;\n};\n\n// Unsigned comparison\nBN.prototype.ucmp = function ucmp(num) {\n  // At this point both numbers have the same sign\n  if (this.length > num.length)\n    return 1;\n  else if (this.length < num.length)\n    return -1;\n\n  var res = 0;\n  for (var i = this.length - 1; i >= 0; i--) {\n    var a = this.words[i];\n    var b = num.words[i];\n\n    if (a === b)\n      continue;\n    if (a < b)\n      res = -1;\n    else if (a > b)\n      res = 1;\n    break;\n  }\n  return res;\n};\n\n//\n// A reduce context, could be using montgomery or something better, depending\n// on the `m` itself.\n//\nBN.red = function red(num) {\n  return new Red(num);\n};\n\nBN.prototype.toRed = function toRed(ctx) {\n  assert(!this.red, 'Already a number in reduction context');\n  assert(!this.sign, 'red works only with positives');\n  return ctx.convertTo(this)._forceRed(ctx);\n};\n\nBN.prototype.fromRed = function fromRed() {\n  assert(this.red, 'fromRed works only with numbers in reduction context');\n  return this.red.convertFrom(this);\n};\n\nBN.prototype._forceRed = function _forceRed(ctx) {\n  this.red = ctx;\n  return this;\n};\n\nBN.prototype.forceRed = function forceRed(ctx) {\n  assert(!this.red, 'Already a number in reduction context');\n  return this._forceRed(ctx);\n};\n\nBN.prototype.redAdd = function redAdd(num) {\n  assert(this.red, 'redAdd works only with red numbers');\n  return this.red.add(this, num);\n};\n\nBN.prototype.redIAdd = function redIAdd(num) {\n  assert(this.red, 'redIAdd works only with red numbers');\n  return this.red.iadd(this, num);\n};\n\nBN.prototype.redSub = function redSub(num) {\n  assert(this.red, 'redSub works only with red numbers');\n  return this.red.sub(this, num);\n};\n\nBN.prototype.redISub = function redISub(num) {\n  assert(this.red, 'redISub works only with red numbers');\n  return this.red.isub(this, num);\n};\n\nBN.prototype.redShl = function redShl(num) {\n  assert(this.red, 'redShl works only with red numbers');\n  return this.red.shl(this, num);\n};\n\nBN.prototype.redMul = function redMul(num) {\n  assert(this.red, 'redMul works only with red numbers');\n  this.red._verify2(this, num);\n  return this.red.mul(this, num);\n};\n\nBN.prototype.redIMul = function redIMul(num) {\n  assert(this.red, 'redMul works only with red numbers');\n  this.red._verify2(this, num);\n  return this.red.imul(this, num);\n};\n\nBN.prototype.redSqr = function redSqr() {\n  assert(this.red, 'redSqr works only with red numbers');\n  this.red._verify1(this);\n  return this.red.sqr(this);\n};\n\nBN.prototype.redISqr = function redISqr() {\n  assert(this.red, 'redISqr works only with red numbers');\n  this.red._verify1(this);\n  return this.red.isqr(this);\n};\n\n// Square root over p\nBN.prototype.redSqrt = function redSqrt() {\n  assert(this.red, 'redSqrt works only with red numbers');\n  this.red._verify1(this);\n  return this.red.sqrt(this);\n};\n\nBN.prototype.redInvm = function redInvm() {\n  assert(this.red, 'redInvm works only with red numbers');\n  this.red._verify1(this);\n  return this.red.invm(this);\n};\n\n// Return negative clone of `this` % `red modulo`\nBN.prototype.redNeg = function redNeg() {\n  assert(this.red, 'redNeg works only with red numbers');\n  this.red._verify1(this);\n  return this.red.neg(this);\n};\n\nBN.prototype.redPow = function redPow(num) {\n  assert(this.red && !num.red, 'redPow(normalNum)');\n  this.red._verify1(this);\n  return this.red.pow(this, num);\n};\n\n// Prime numbers with efficient reduction\nvar primes = {\n  k256: null,\n  p224: null,\n  p192: null,\n  p25519: null\n};\n\n// Pseudo-Mersenne prime\nfunction MPrime(name, p) {\n  // P = 2 ^ N - K\n  this.name = name;\n  this.p = new BN(p, 16);\n  this.n = this.p.bitLength();\n  this.k = new BN(1).ishln(this.n).isub(this.p);\n\n  this.tmp = this._tmp();\n}\n\nMPrime.prototype._tmp = function _tmp() {\n  var tmp = new BN(null);\n  tmp.words = new Array(Math.ceil(this.n / 13));\n  return tmp;\n};\n\nMPrime.prototype.ireduce = function ireduce(num) {\n  // Assumes that `num` is less than `P^2`\n  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n  var r = num;\n  var rlen;\n\n  do {\n    var pair = r.ishrn(this.n, 0, this.tmp);\n    r = this.imulK(pair.hi);\n    r = r.iadd(pair.lo);\n    rlen = r.bitLength();\n  } while (rlen > this.n);\n\n  var cmp = rlen < this.n ? -1 : r.cmp(this.p);\n  if (cmp === 0) {\n    r.words[0] = 0;\n    r.length = 1;\n  } else if (cmp > 0) {\n    r.isub(this.p);\n  } else {\n    r.strip();\n  }\n\n  return r;\n};\n\nMPrime.prototype.imulK = function imulK(num) {\n  return num.imul(this.k);\n};\n\nfunction K256() {\n  MPrime.call(\n    this,\n    'k256',\n    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n}\ninherits(K256, MPrime);\n\nK256.prototype.imulK = function imulK(num) {\n  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n  num.words[num.length] = 0;\n  num.words[num.length + 1] = 0;\n  num.length += 2;\n\n  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n  var hi;\n  var lo = 0;\n  for (var i = 0; i < num.length; i++) {\n    var w = num.words[i];\n    hi = w * 0x40;\n    lo += w * 0x3d1;\n    hi += (lo / 0x4000000) | 0;\n    lo &= 0x3ffffff;\n\n    num.words[i] = lo;\n\n    lo = hi;\n  }\n\n  // Fast length reduction\n  if (num.words[num.length - 1] === 0) {\n    num.length--;\n    if (num.words[num.length - 1] === 0)\n      num.length--;\n  }\n  return num;\n};\n\nfunction P224() {\n  MPrime.call(\n    this,\n    'p224',\n    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n}\ninherits(P224, MPrime);\n\nfunction P192() {\n  MPrime.call(\n    this,\n    'p192',\n    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n}\ninherits(P192, MPrime);\n\nfunction P25519() {\n  // 2 ^ 255 - 19\n  MPrime.call(\n    this,\n    '25519',\n    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n}\ninherits(P25519, MPrime);\n\nP25519.prototype.imulK = function imulK(num) {\n  // K = 0x13\n  var carry = 0;\n  for (var i = 0; i < num.length; i++) {\n    var hi = num.words[i] * 0x13 + carry;\n    var lo = hi & 0x3ffffff;\n    hi >>>= 26;\n\n    num.words[i] = lo;\n    carry = hi;\n  }\n  if (carry !== 0)\n    num.words[num.length++] = carry;\n  return num;\n};\n\n// Exported mostly for testing purposes, use plain name instead\nBN._prime = function prime(name) {\n  // Cached version of prime\n  if (primes[name])\n    return primes[name];\n\n  var prime;\n  if (name === 'k256')\n    prime = new K256();\n  else if (name === 'p224')\n    prime = new P224();\n  else if (name === 'p192')\n    prime = new P192();\n  else if (name === 'p25519')\n    prime = new P25519();\n  else\n    throw new Error('Unknown prime ' + name);\n  primes[name] = prime;\n\n  return prime;\n};\n\n//\n// Base reduction engine\n//\nfunction Red(m) {\n  if (typeof m === 'string') {\n    var prime = BN._prime(m);\n    this.m = prime.p;\n    this.prime = prime;\n  } else {\n    this.m = m;\n    this.prime = null;\n  }\n}\n\nRed.prototype._verify1 = function _verify1(a) {\n  assert(!a.sign, 'red works only with positives');\n  assert(a.red, 'red works only with red numbers');\n};\n\nRed.prototype._verify2 = function _verify2(a, b) {\n  assert(!a.sign && !b.sign, 'red works only with positives');\n  assert(a.red && a.red === b.red,\n         'red works only with red numbers');\n};\n\nRed.prototype.imod = function imod(a) {\n  if (this.prime)\n    return this.prime.ireduce(a)._forceRed(this);\n  return a.mod(this.m)._forceRed(this);\n};\n\nRed.prototype.neg = function neg(a) {\n  var r = a.clone();\n  r.sign = !r.sign;\n  return r.iadd(this.m)._forceRed(this);\n};\n\nRed.prototype.add = function add(a, b) {\n  this._verify2(a, b);\n\n  var res = a.add(b);\n  if (res.cmp(this.m) >= 0)\n    res.isub(this.m);\n  return res._forceRed(this);\n};\n\nRed.prototype.iadd = function iadd(a, b) {\n  this._verify2(a, b);\n\n  var res = a.iadd(b);\n  if (res.cmp(this.m) >= 0)\n    res.isub(this.m);\n  return res;\n};\n\nRed.prototype.sub = function sub(a, b) {\n  this._verify2(a, b);\n\n  var res = a.sub(b);\n  if (res.cmpn(0) < 0)\n    res.iadd(this.m);\n  return res._forceRed(this);\n};\n\nRed.prototype.isub = function isub(a, b) {\n  this._verify2(a, b);\n\n  var res = a.isub(b);\n  if (res.cmpn(0) < 0)\n    res.iadd(this.m);\n  return res;\n};\n\nRed.prototype.shl = function shl(a, num) {\n  this._verify1(a);\n  return this.imod(a.shln(num));\n};\n\nRed.prototype.imul = function imul(a, b) {\n  this._verify2(a, b);\n  return this.imod(a.imul(b));\n};\n\nRed.prototype.mul = function mul(a, b) {\n  this._verify2(a, b);\n  return this.imod(a.mul(b));\n};\n\nRed.prototype.isqr = function isqr(a) {\n  return this.imul(a, a);\n};\n\nRed.prototype.sqr = function sqr(a) {\n  return this.mul(a, a);\n};\n\nRed.prototype.sqrt = function sqrt(a) {\n  if (a.cmpn(0) === 0)\n    return a.clone();\n\n  var mod3 = this.m.andln(3);\n  assert(mod3 % 2 === 1);\n\n  // Fast case\n  if (mod3 === 3) {\n    var pow = this.m.add(new BN(1)).ishrn(2);\n    var r = this.pow(a, pow);\n    return r;\n  }\n\n  // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n  //\n  // Find Q and S, that Q * 2 ^ S = (P - 1)\n  var q = this.m.subn(1);\n  var s = 0;\n  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {\n    s++;\n    q.ishrn(1);\n  }\n  assert(q.cmpn(0) !== 0);\n\n  var one = new BN(1).toRed(this);\n  var nOne = one.redNeg();\n\n  // Find quadratic non-residue\n  // NOTE: Max is such because of generalized Riemann hypothesis.\n  var lpow = this.m.subn(1).ishrn(1);\n  var z = this.m.bitLength();\n  z = new BN(2 * z * z).toRed(this);\n  while (this.pow(z, lpow).cmp(nOne) !== 0)\n    z.redIAdd(nOne);\n\n  var c = this.pow(z, q);\n  var r = this.pow(a, q.addn(1).ishrn(1));\n  var t = this.pow(a, q);\n  var m = s;\n  while (t.cmp(one) !== 0) {\n    var tmp = t;\n    for (var i = 0; tmp.cmp(one) !== 0; i++)\n      tmp = tmp.redSqr();\n    assert(i < m);\n    var b = this.pow(c, new BN(1).ishln(m - i - 1));\n\n    r = r.redMul(b);\n    c = b.redSqr();\n    t = t.redMul(c);\n    m = i;\n  }\n\n  return r;\n};\n\nRed.prototype.invm = function invm(a) {\n  var inv = a._egcd(new BN(1), this.m);\n  if (inv.sign) {\n    inv.sign = false;\n    return this.imod(inv).redNeg();\n  } else {\n    return this.imod(inv);\n  }\n};\n\nRed.prototype.pow = function pow(a, num) {\n  var w = [];\n  var q = num.clone();\n  while (q.cmpn(0) !== 0) {\n    w.push(q.andln(1));\n    q.ishrn(1);\n  }\n\n  // Skip leading zeroes\n  var res = a;\n  for (var i = 0; i < w.length; i++, res = this.sqr(res))\n    if (w[i] !== 0)\n      break;\n\n  if (++i < w.length) {\n    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {\n      if (w[i] === 0)\n        continue;\n      res = this.mul(res, q);\n    }\n  }\n\n  return res;\n};\n\nRed.prototype.convertTo = function convertTo(num) {\n  return num.clone();\n};\n\nRed.prototype.convertFrom = function convertFrom(num) {\n  var res = num.clone();\n  res.red = null;\n  return res;\n};\n\n//\n// Montgomery method engine\n//\n\nBN.mont = function mont(num) {\n  return new Mont(num);\n};\n\nfunction Mont(m) {\n  Red.call(this, m);\n\n  this.shift = this.m.bitLength();\n  if (this.shift % 26 !== 0)\n    this.shift += 26 - (this.shift % 26);\n  this.r = new BN(1).ishln(this.shift);\n  this.r2 = this.imod(this.r.sqr());\n  this.rinv = this.r.invm(this.m);\n\n  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n  this.minv.sign = true;\n  this.minv = this.minv.mod(this.r);\n}\ninherits(Mont, Red);\n\nMont.prototype.convertTo = function convertTo(num) {\n  return this.imod(num.shln(this.shift));\n};\n\nMont.prototype.convertFrom = function convertFrom(num) {\n  var r = this.imod(num.mul(this.rinv));\n  r.red = null;\n  return r;\n};\n\nMont.prototype.imul = function imul(a, b) {\n  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {\n    a.words[0] = 0;\n    a.length = 1;\n    return a;\n  }\n\n  var t = a.imul(b);\n  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n  var u = t.isub(c).ishrn(this.shift);\n  var res = u;\n  if (u.cmp(this.m) >= 0)\n    res = u.isub(this.m);\n  else if (u.cmpn(0) < 0)\n    res = u.iadd(this.m);\n\n  return res._forceRed(this);\n};\n\nMont.prototype.mul = function mul(a, b) {\n  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)\n    return new BN(0)._forceRed(this);\n\n  var t = a.mul(b);\n  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n  var u = t.isub(c).ishrn(this.shift);\n  var res = u;\n  if (u.cmp(this.m) >= 0)\n    res = u.isub(this.m);\n  else if (u.cmpn(0) < 0)\n    res = u.iadd(this.m);\n\n  return res._forceRed(this);\n};\n\nMont.prototype.invm = function invm(a) {\n  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n  var res = this.imod(a.invm(this.m).mul(this.r2));\n  return res._forceRed(this);\n};\n\n})(typeof module === 'undefined' || module, this);\n\n},{}],29:[function(require,module,exports){\n(function (Buffer){\nvar bn = require('bn.js');\nvar randomBytes = require('randombytes');\nmodule.exports = crt;\nfunction blind(priv) {\n  var r = getr(priv);\n  var blinder = r.toRed(bn.mont(priv.modulus))\n  .redPow(new bn(priv.publicExponent)).fromRed();\n  return {\n    blinder: blinder,\n    unblinder:r.invm(priv.modulus)\n  };\n}\nfunction crt(msg, priv) {\n  var blinds = blind(priv);\n  var len = priv.modulus.byteLength();\n  var mod = bn.mont(priv.modulus);\n  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);\n  var c1 = blinded.toRed(bn.mont(priv.prime1));\n  var c2 = blinded.toRed(bn.mont(priv.prime2));\n  var qinv = priv.coefficient;\n  var p = priv.prime1;\n  var q = priv.prime2;\n  var m1 = c1.redPow(priv.exponent1);\n  var m2 = c2.redPow(priv.exponent2);\n  m1 = m1.fromRed();\n  m2 = m2.fromRed();\n  var h = m1.isub(m2).imul(qinv).mod(p);\n  h.imul(q);\n  m2.iadd(h);\n  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());\n  if (out.length < len) {\n    var prefix = new Buffer(len - out.length);\n    prefix.fill(0);\n    out = Buffer.concat([prefix, out], len);\n  }\n  return out;\n}\ncrt.getr = getr;\nfunction getr(priv) {\n  var len = priv.modulus.byteLength();\n  var r = new bn(randomBytes(len));\n  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {\n    r = new bn(randomBytes(len));\n  }\n  return r;\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"bn.js\":28,\"buffer\":2,\"randombytes\":142}],30:[function(require,module,exports){\nvar elliptic = exports;\n\nelliptic.version = require('../package.json').version;\nelliptic.utils = require('./elliptic/utils');\nelliptic.rand = require('brorand');\nelliptic.hmacDRBG = require('./elliptic/hmac-drbg');\nelliptic.curve = require('./elliptic/curve');\nelliptic.curves = require('./elliptic/curves');\n\n// Protocols\nelliptic.ec = require('./elliptic/ec');\n\n},{\"../package.json\":49,\"./elliptic/curve\":33,\"./elliptic/curves\":36,\"./elliptic/ec\":37,\"./elliptic/hmac-drbg\":40,\"./elliptic/utils\":41,\"brorand\":42}],31:[function(require,module,exports){\nvar bn = require('bn.js');\nvar elliptic = require('../../elliptic');\n\nvar getNAF = elliptic.utils.getNAF;\nvar getJSF = elliptic.utils.getJSF;\nvar assert = elliptic.utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new bn(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new bn(0).toRed(this.red);\n  this.one = new bn(1).toRed(this.red);\n  this.two = new bn(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new bn(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate(point) {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  for (var j = 0; j < naf.length; j += doubles.step) {\n    var nafW = 0;\n    for (var k = j + doubles.step - 1; k >= j; k--)\n      nafW = (nafW << 1) + naf[k];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (var j = 0; j < repr.length; j++) {\n      var nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var k = 0; i >= 0 && naf[i] === 0; i--)\n      k++;\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n                                                       points,\n                                                       coeffs,\n                                                       len) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  for (var i = 0; i < len; i++) {\n    var p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (var i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a]);\n      naf[b] = getNAF(coeffs[b], wndWidth[b]);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b] /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (var j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (var i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (var j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (var j = 0; j < len; j++) {\n      var z = tmp[j];\n      var p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (var i = 0; i < len; i++)\n    wnd[i] = null;\n  return acc.toP();\n};\n\nBaseCurve.BasePoint = BasePoint;\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBasePoint.prototype.precompute = function precompute(power, _beta) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n\n},{\"../../elliptic\":30,\"bn.js\":28}],32:[function(require,module,exports){\nvar curve = require('../curve');\nvar elliptic = require('../../elliptic');\nvar bn = require('bn.js');\nvar inherits = require('inherits');\nvar Base = curve.base;\n\nvar getNAF = elliptic.utils.getNAF;\nvar assert = elliptic.utils.assert;\n\nfunction EdwardsCurve(conf) {\n  // NOTE: Important as we are creating point in Base.call()\n  this.twisted = conf.a != 1;\n  this.mOneA = this.twisted && conf.a == -1;\n  this.extended = this.mOneA;\n\n  Base.call(this, 'mont', conf);\n\n  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);\n  this.c = new bn(conf.c, 16).toRed(this.red);\n  this.c2 = this.c.redSqr();\n  this.d = new bn(conf.d, 16).toRed(this.red);\n  this.dd = this.d.redAdd(this.d);\n\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n  this.oneC = conf.c == 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\n\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n  if (this.mOneA)\n    return num.redNeg();\n  else\n    return this.a.redMul(num);\n};\n\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n  if (this.oneC)\n    return num;\n  else\n    return this.c.redMul(num);\n};\n\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n  return new Point(this, x, y, z, t);\n};\n\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n  return this.point(x, y, z, t);\n};\n\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nEdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {\n  x = new bn(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var x2 = x.redSqr();\n  var rhs = this.c2.redSub(this.a.redMul(x2));\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n\n  var y = rhs.redMul(lhs.redInvm()).redSqrt();\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y, curve.one);\n};\n\nEdwardsCurve.prototype.validate = function validate(point) {\n  if (point.isInfinity())\n    return true;\n\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n  point.normalize();\n\n  var x2 = point.x.redSqr();\n  var y2 = point.y.redSqr();\n  var lhs = x2.redMul(this.a).redAdd(y2);\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n\n  return lhs.cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, y, z, t) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = true;\n  } else {\n    this.x = new bn(x, 16);\n    this.y = new bn(y, 16);\n    this.z = z ? new bn(z, 16) : this.curve.one;\n    this.t = t && new bn(t, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n\n    // Use extended coordinates\n    if (this.curve.extended && !this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redMul(this.z.redInvm());\n    }\n  }\n}\ninherits(Point, Base.BasePoint);\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1], obj[2]);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.x.cmpn(0) === 0 &&\n         this.y.cmp(this.z) === 0;\n};\n\nPoint.prototype._extDbl = function _extDbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#doubling-dbl-2008-hwcd\n  // 4M + 4S\n\n  // A = X1^2\n  var a = this.x.redSqr();\n  // B = Y1^2\n  var b = this.y.redSqr();\n  // C = 2 * Z1^2\n  var c = this.z.redSqr();\n  c = c.redIAdd(c);\n  // D = a * A\n  var d = this.curve._mulA(a);\n  // E = (X1 + Y1)^2 - A - B\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n  // G = D + B\n  var g = d.redAdd(b);\n  // F = G - C\n  var f = g.redSub(c);\n  // H = D - B\n  var h = d.redSub(b);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projDbl = function _projDbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#doubling-dbl-2008-bbjlp\n  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#doubling-dbl-2007-bl\n  // and others\n  // Generally 3M + 4S or 2M + 4S\n\n  // B = (X1 + Y1)^2\n  var b = this.x.redAdd(this.y).redSqr();\n  // C = X1^2\n  var c = this.x.redSqr();\n  // D = Y1^2\n  var d = this.y.redSqr();\n\n  if (this.curve.twisted) {\n    // E = a * C\n    var e = this.curve._mulA(c);\n    // F = E + D\n    var f = e.redAdd(d);\n    if (this.zOne) {\n      // X3 = (B - C - D) * (F - 2)\n      var nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n      // Y3 = F * (E - D)\n      var ny = f.redMul(e.redSub(d));\n      // Z3 = F^2 - 2 * F\n      var nz = f.redSqr().redSub(f).redSub(f);\n    } else {\n      // H = Z1^2\n      var h = this.z.redSqr();\n      // J = F - 2 * H\n      var j = f.redSub(h).redISub(h);\n      // X3 = (B-C-D)*J\n      var nx = b.redSub(c).redISub(d).redMul(j);\n      // Y3 = F * (E - D)\n      var ny = f.redMul(e.redSub(d));\n      // Z3 = F * J\n      var nz = f.redMul(j);\n    }\n  } else {\n    // E = C + D\n    var e = c.redAdd(d);\n    // H = (c * Z1)^2\n    var h = this.curve._mulC(redMul(this.z)).redSqr();\n    // J = E - 2 * H\n    var j = e.redSub(h).redSub(h);\n    // X3 = c * (B - E) * J\n    var nx = this.curve._mulC(b.redISub(e)).redMul(j);\n    // Y3 = c * E * (C - D)\n    var ny = this.curve._mulC(e).redMul(c.redISub(d));\n    // Z3 = E * J\n    var nz = e.redMul(j);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  // Double in extended coordinates\n  if (this.curve.extended)\n    return this._extDbl();\n  else\n    return this._projDbl();\n};\n\nPoint.prototype._extAdd = function _extAdd(p) {\n  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3\n  // 8M\n\n  // A = (Y1 - X1) * (Y2 - X2)\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n  // B = (Y1 + X1) * (Y2 + X2)\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n  // C = T1 * k * T2\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\n  // D = Z1 * 2 * Z2\n  var d = this.z.redMul(p.z.redAdd(p.z));\n  // E = B - A\n  var e = b.redSub(a);\n  // F = D - C\n  var f = d.redSub(c);\n  // G = D + C\n  var g = d.redAdd(c);\n  // H = B + A\n  var h = b.redAdd(a);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projAdd = function _projAdd(p) {\n  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#addition-add-2008-bbjlp\n  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#addition-add-2007-bl\n  // 10M + 1S\n\n  // A = Z1 * Z2\n  var a = this.z.redMul(p.z);\n  // B = A^2\n  var b = a.redSqr();\n  // C = X1 * X2\n  var c = this.x.redMul(p.x);\n  // D = Y1 * Y2\n  var d = this.y.redMul(p.y);\n  // E = d * C * D\n  var e = this.curve.d.redMul(c).redMul(d);\n  // F = B - E\n  var f = b.redSub(e);\n  // G = B + E\n  var g = b.redAdd(e);\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n  var nx = a.redMul(f).redMul(tmp);\n  if (this.curve.twisted) {\n    // Y3 = A * G * (D - a * C)\n    var ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n    // Z3 = F * G\n    var nz = f.redMul(g);\n  } else {\n    // Y3 = A * G * (D - C)\n    var ny = a.redMul(g).redMul(d.redSub(c));\n    // Z3 = c * F * G\n    var nz = this.curve._mulC(f).redMul(g);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  if (this.isInfinity())\n    return p;\n  if (p.isInfinity())\n    return this;\n\n  if (this.curve.extended)\n    return this._extAdd(p);\n  else\n    return this._projAdd(p);\n};\n\nPoint.prototype.mul = function mul(k) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.curve._fixedNafMul(this, k);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);\n};\n\nPoint.prototype.normalize = function normalize() {\n  if (this.zOne)\n    return this;\n\n  // Normalize coordinates\n  var zi = this.z.redInvm();\n  this.x = this.x.redMul(zi);\n  this.y = this.y.redMul(zi);\n  if (this.t)\n    this.t = this.t.redMul(zi);\n  this.z = this.curve.one;\n  this.zOne = true;\n  return this;\n};\n\nPoint.prototype.neg = function neg() {\n  return this.curve.point(this.x.redNeg(),\n                          this.y,\n                          this.z,\n                          this.t && this.t.redNeg());\n};\n\nPoint.prototype.getX = function getX() {\n  this.normalize();\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  this.normalize();\n  return this.y.fromRed();\n};\n\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n\n},{\"../../elliptic\":30,\"../curve\":33,\"bn.js\":28,\"inherits\":144}],33:[function(require,module,exports){\nvar curve = exports;\n\ncurve.base = require('./base');\ncurve.short = require('./short');\ncurve.mont = require('./mont');\ncurve.edwards = require('./edwards');\n\n},{\"./base\":31,\"./edwards\":32,\"./mont\":34,\"./short\":35}],34:[function(require,module,exports){\nvar curve = require('../curve');\nvar elliptic = require('../../elliptic');\nvar bn = require('bn.js');\nvar inherits = require('inherits');\nvar Base = curve.base;\n\nvar getNAF = elliptic.utils.getNAF;\nvar assert = elliptic.utils.assert;\n\nfunction MontCurve(conf) {\n  Base.call(this, 'mont', conf);\n\n  this.a = new bn(conf.a, 16).toRed(this.red);\n  this.b = new bn(conf.b, 16).toRed(this.red);\n  this.i4 = new bn(4).toRed(this.red).redInvm();\n  this.two = new bn(2).toRed(this.red);\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\n\nMontCurve.prototype.point = function point(x, z) {\n  return new Point(this, x, z);\n};\n\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n}\n\nMontCurve.prototype.validate = function validate(point) {\n  var x = point.normalize().x;\n  var x2 = x.redSqr();\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n  var y = rhs.redSqrt();\n\n  return y.redSqr().cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, z) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && z === null) {\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n  } else {\n    this.x = new bn(x, 16);\n    this.z = new bn(z, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n}\ninherits(Point, Base.BasePoint);\n\nPoint.prototype.precompute = function precompute() {\n  // No-op\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1] || curve.one);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nPoint.prototype.dbl = function dbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n  // 2M + 2S + 4A\n\n  // A = X1 + Z1\n  var a = this.x.redAdd(this.z);\n  // AA = A^2\n  var aa = a.redSqr();\n  // B = X1 - Z1\n  var b = this.x.redSub(this.z);\n  // BB = B^2\n  var bb = b.redSqr();\n  // C = AA - BB\n  var c = aa.redSub(bb);\n  // X3 = AA * BB\n  var nx = aa.redMul(bb);\n  // Z3 = C * (BB + A24 * C)\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n  // 4M + 2S + 6A\n\n  // A = X2 + Z2\n  var a = this.x.redAdd(this.z);\n  // B = X2 - Z2\n  var b = this.x.redSub(this.z);\n  // C = X3 + Z3\n  var c = p.x.redAdd(p.z);\n  // D = X3 - Z3\n  var d = p.x.redSub(p.z);\n  // DA = D * A\n  var da = d.redMul(a);\n  // CB = C * B\n  var cb = c.redMul(b);\n  // X5 = Z1 * (DA + CB)^2\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n  // Z5 = X1 * (DA - CB)^2\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.mul = function mul(k) {\n  var t = k.clone();\n  var a = this; // (N / 2) * Q + Q\n  var b = this.curve.point(null, null); // (N / 2) * Q\n  var c = this; // Q\n\n  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))\n    bits.push(t.andln(1));\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    if (bits[i] === 0) {\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n      a = a.diffAdd(b, c);\n      // N * Q = 2 * ((N / 2) * Q + Q))\n      b = b.dbl();\n    } else {\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n      b = a.diffAdd(b, c);\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\n      a = a.dbl();\n    }\n  }\n  return b;\n};\n\nPoint.prototype.mulAdd = function mulAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.normalize = function normalize() {\n  this.x = this.x.redMul(this.z.redInvm());\n  this.z = this.curve.one;\n  return this;\n};\n\nPoint.prototype.getX = function getX() {\n  // Normalize coordinates\n  this.normalize();\n\n  return this.x.fromRed();\n};\n\n},{\"../../elliptic\":30,\"../curve\":33,\"bn.js\":28,\"inherits\":144}],35:[function(require,module,exports){\nvar curve = require('../curve');\nvar elliptic = require('../../elliptic');\nvar bn = require('bn.js');\nvar inherits = require('inherits');\nvar Base = curve.base;\n\nvar getNAF = elliptic.utils.getNAF;\nvar assert = elliptic.utils.assert;\n\nfunction ShortCurve(conf) {\n  Base.call(this, 'short', conf);\n\n  this.a = new bn(conf.a, 16).toRed(this.red);\n  this.b = new bn(conf.b, 16).toRed(this.red);\n  this.tinv = this.two.redInvm();\n\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n  // If the curve is endomorphic, precalculate beta and lambda\n  this.endo = this._getEndomorphism(conf);\n  this._endoWnafT1 = new Array(4);\n  this._endoWnafT2 = new Array(4);\n}\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\n\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n  // No efficient endomorphism\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n    return;\n\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n  var beta;\n  var lambda;\n  if (conf.beta) {\n    beta = new bn(conf.beta, 16).toRed(this.red);\n  } else {\n    var betas = this._getEndoRoots(this.p);\n    // Choose the smallest beta\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n    beta = beta.toRed(this.red);\n  }\n  if (conf.lambda) {\n    lambda = new bn(conf.lambda, 16);\n  } else {\n    // Choose the lambda that is matching selected beta\n    var lambdas = this._getEndoRoots(this.n);\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n      lambda = lambdas[0];\n    } else {\n      lambda = lambdas[1];\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n    }\n  }\n\n  // Get basis vectors, used for balanced length-two representation\n  var basis;\n  if (conf.basis) {\n    basis = conf.basis.map(function(vec) {\n      return {\n        a: new bn(vec.a, 16),\n        b: new bn(vec.b, 16),\n      };\n    });\n  } else {\n    basis = this._getEndoBasis(lambda);\n  }\n\n  return {\n    beta: beta,\n    lambda: lambda,\n    basis: basis\n  };\n};\n\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n  // Find roots of for x^2 + x + 1 in F\n  // Root = (-1 +- Sqrt(-3)) / 2\n  //\n  var red = num === this.p ? this.red : bn.mont(num);\n  var tinv = new bn(2).toRed(red).redInvm();\n  var ntinv = tinv.redNeg();\n  var one = new bn(1).toRed(red);\n\n  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n  var l1 = ntinv.redAdd(s).fromRed();\n  var l2 = ntinv.redSub(s).fromRed();\n  return [ l1, l2 ];\n};\n\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n  // aprxSqrt >= sqrt(this.n)\n  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));\n\n  // 3.74\n  // Run EGCD, until r(L + 1) < aprxSqrt\n  var u = lambda;\n  var v = this.n.clone();\n  var x1 = new bn(1);\n  var y1 = new bn(0);\n  var x2 = new bn(0);\n  var y2 = new bn(1);\n\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n  var a0;\n  var b0;\n  // First vector\n  var a1;\n  var b1;\n  // Second vector\n  var a2;\n  var b2;\n\n  var prevR;\n  var i = 0;\n  while (u.cmpn(0) !== 0) {\n    var q = v.div(u);\n    var r = v.sub(q.mul(u));\n    var x = x2.sub(q.mul(x1));\n    var y = y2.sub(q.mul(y1));\n\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\n      a0 = prevR.neg();\n      b0 = x1;\n      a1 = r.neg();\n      b1 = x;\n    } else if (a1 && ++i === 2) {\n      break;\n    }\n    prevR = r;\n\n    v = u;\n    u = r;\n    x2 = x1;\n    x1 = x;\n    y2 = y1;\n    y1 = y;\n  }\n  a2 = r.neg();\n  b2 = x;\n\n  var len1 = a1.sqr().add(b1.sqr());\n  var len2 = a2.sqr().add(b2.sqr());\n  if (len2.cmp(len1) >= 0) {\n    a2 = a0;\n    b2 = b0;\n  }\n\n  // Normalize signs\n  if (a1.sign) {\n    a1 = a1.neg();\n    b1 = b1.neg();\n  }\n  if (a2.sign) {\n    a2 = a2.neg();\n    b2 = b2.neg();\n  }\n\n  return [\n    { a: a1, b: b1 },\n    { a: a2, b: b2 }\n  ];\n};\n\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n  var basis = this.endo.basis;\n  var v1 = basis[0];\n  var v2 = basis[1];\n\n  var c1 = v2.b.mul(k).divRound(this.n);\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n  var p1 = c1.mul(v1.a);\n  var p2 = c2.mul(v2.a);\n  var q1 = c1.mul(v1.b);\n  var q2 = c2.mul(v2.b);\n\n  // Calculate answer\n  var k1 = k.sub(p1).sub(p2);\n  var k2 = q1.add(q2).neg();\n  return { k1: k1, k2: k2 };\n};\n\nShortCurve.prototype.point = function point(x, y, isRed) {\n  return new Point(this, x, y, isRed);\n};\n\nShortCurve.prototype.pointFromX = function pointFromX(odd, x) {\n  x = new bn(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n  var y = y2.redSqrt();\n\n  // XXX Is there any way to tell if the number is odd without converting it\n  // to non-red form?\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n  return new JPoint(this, x, y, z);\n};\n\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n  return Point.fromJSON(this, obj, red);\n};\n\nShortCurve.prototype.validate = function validate(point) {\n  if (point.inf)\n    return true;\n\n  var x = point.x;\n  var y = point.y;\n\n  var ax = this.a.redMul(x);\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\n\nShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs) {\n  var npoints = this._endoWnafT1;\n  var ncoeffs = this._endoWnafT2;\n  for (var i = 0; i < points.length; i++) {\n    var split = this._endoSplit(coeffs[i]);\n    var p = points[i];\n    var beta = p._getBeta();\n\n    if (split.k1.sign) {\n      split.k1.sign = !split.k1.sign;\n      p = p.neg(true);\n    }\n    if (split.k2.sign) {\n      split.k2.sign = !split.k2.sign;\n      beta = beta.neg(true);\n    }\n\n    npoints[i * 2] = p;\n    npoints[i * 2 + 1] = beta;\n    ncoeffs[i * 2] = split.k1;\n    ncoeffs[i * 2 + 1] = split.k2;\n  }\n  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);\n\n  // Clean-up references to points and coefficients\n  for (var j = 0; j < i * 2; j++) {\n    npoints[j] = null;\n    ncoeffs[j] = null;\n  }\n  return res;\n};\n\nfunction Point(curve, x, y, isRed) {\n  Base.BasePoint.call(this, curve, 'affine');\n  if (x === null && y === null) {\n    this.x = null;\n    this.y = null;\n    this.inf = true;\n  } else {\n    this.x = new bn(x, 16);\n    this.y = new bn(y, 16);\n    // Force redgomery representation when loading from JSON\n    if (isRed) {\n      this.x.forceRed(this.curve.red);\n      this.y.forceRed(this.curve.red);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    this.inf = false;\n  }\n}\ninherits(Point, Base.BasePoint);\n\nPoint.prototype._getBeta = function _getBeta() {\n  if (!this.curve.endo)\n    return;\n\n  var pre = this.precomputed;\n  if (pre && pre.beta)\n    return pre.beta;\n\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n  if (pre) {\n    var curve = this.curve;\n    function endoMul(p) {\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n    }\n    pre.beta = beta;\n    beta.precomputed = {\n      beta: null,\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(endoMul)\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(endoMul)\n      }\n    };\n  }\n  return beta;\n};\n\nPoint.prototype.toJSON = function toJSON() {\n  if (!this.precomputed)\n    return [ this.x, this.y ];\n\n  return [ this.x, this.y, this.precomputed && {\n    doubles: this.precomputed.doubles && {\n      step: this.precomputed.doubles.step,\n      points: this.precomputed.doubles.points.slice(1)\n    },\n    naf: this.precomputed.naf && {\n      wnd: this.precomputed.naf.wnd,\n      points: this.precomputed.naf.points.slice(1)\n    }\n  }];\n};\n\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n  if (typeof obj === 'string')\n    obj = JSON.parse(obj);\n  var res = curve.point(obj[0], obj[1], red);\n  if (!obj[2])\n    return res;\n\n  function obj2point(obj) {\n    return curve.point(obj[0], obj[1], red);\n  }\n\n  var pre = obj[2];\n  res.precomputed = {\n    beta: null,\n    doubles: pre.doubles && {\n      step: pre.doubles.step,\n      points: [ res ].concat(pre.doubles.points.map(obj2point))\n    },\n    naf: pre.naf && {\n      wnd: pre.naf.wnd,\n      points: [ res ].concat(pre.naf.points.map(obj2point))\n    }\n  };\n  return res;\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16 ,2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  return this.inf;\n};\n\nPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.inf)\n    return p;\n\n  // P + O = P\n  if (p.inf)\n    return this;\n\n  // P + P = 2P\n  if (this.eq(p))\n    return this.dbl();\n\n  // P + (-P) = O\n  if (this.neg().eq(p))\n    return this.curve.point(null, null);\n\n  // P + Q = O\n  if (this.x.cmp(p.x) === 0)\n    return this.curve.point(null, null);\n\n  var c = this.y.redSub(p.y);\n  if (c.cmpn(0) !== 0)\n    c = c.redMul(this.x.redSub(p.x).redInvm());\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.inf)\n    return this;\n\n  // 2P = O\n  var ys1 = this.y.redAdd(this.y);\n  if (ys1.cmpn(0) === 0)\n    return this.curve.point(null, null);\n\n  var a = this.curve.a;\n\n  var x2 = this.x.redSqr();\n  var dyinv = ys1.redInvm();\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.getX = function getX() {\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  return this.y.fromRed();\n};\n\nPoint.prototype.mul = function mul(k) {\n  k = new bn(k, 16);\n\n  if (this.precomputed && this.precomputed.doubles)\n    return this.curve._fixedNafMul(this, k);\n  else if (this.curve.endo)\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\n\nPoint.prototype.eq = function eq(p) {\n  return this === p ||\n         this.inf === p.inf &&\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\n\nPoint.prototype.neg = function neg(_precompute) {\n  if (this.inf)\n    return this;\n\n  var res = this.curve.point(this.x, this.y.redNeg());\n  if (_precompute && this.precomputed) {\n    var pre = this.precomputed;\n    function negate(p) {\n      return p.neg();\n    }\n    res.precomputed = {\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(negate)\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(negate)\n      }\n    };\n  }\n  return res;\n};\n\nPoint.prototype.toJ = function toJ() {\n  if (this.inf)\n    return this.curve.jpoint(null, null, null);\n\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n  return res;\n};\n\nfunction JPoint(curve, x, y, z) {\n  Base.BasePoint.call(this, curve, 'jacobian');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = new bn(0);\n  } else {\n    this.x = new bn(x, 16);\n    this.y = new bn(y, 16);\n    this.z = new bn(z, 16);\n  }\n  if (!this.x.red)\n    this.x = this.x.toRed(this.curve.red);\n  if (!this.y.red)\n    this.y = this.y.toRed(this.curve.red);\n  if (!this.z.red)\n    this.z = this.z.toRed(this.curve.red);\n\n  this.zOne = this.z === this.curve.one;\n}\ninherits(JPoint, Base.BasePoint);\n\nJPoint.prototype.toP = function toP() {\n  if (this.isInfinity())\n    return this.curve.point(null, null);\n\n  var zinv = this.z.redInvm();\n  var zinv2 = zinv.redSqr();\n  var ax = this.x.redMul(zinv2);\n  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n  return this.curve.point(ax, ay);\n};\n\nJPoint.prototype.neg = function neg() {\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\n\nJPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p;\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 12M + 4S + 7A\n  var pz2 = p.z.redSqr();\n  var z2 = this.z.redSqr();\n  var u1 = this.x.redMul(pz2);\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y.redMul(pz2.redMul(p.z));\n  var s2 = p.y.redMul(z2.redMul(this.z));\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(p.z).redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p.toJ();\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 8M + 3S + 7A\n  var z2 = this.z.redSqr();\n  var u1 = this.x;\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y;\n  var s2 = p.y.redMul(z2).redMul(this.z);\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.dblp = function dblp(pow) {\n  if (pow === 0)\n    return this;\n  if (this.isInfinity())\n    return this;\n  if (!pow)\n    return this.dbl();\n\n  if (this.curve.zeroA || this.curve.threeA) {\n    var r = this;\n    for (var i = 0; i < pow; i++)\n      r = r.dbl();\n    return r;\n  }\n\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n  // N = 1 => 6M + 6S + 9A\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  // Reuse results\n  var jyd = jy.redAdd(jy);\n  for (var i = 0; i < pow; i++) {\n    var jx2 = jx.redSqr();\n    var jyd2 = jyd.redSqr();\n    var jyd4 = jyd2.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n    var t1 = jx.redMul(jyd2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var dny = c.redMul(t2);\n    dny = dny.redIAdd(dny).redISub(jyd4);\n    var nz = jyd.redMul(jz);\n    if (i + 1 < pow)\n      jz4 = jz4.redMul(jyd4);\n\n    jx = nx;\n    jz = nz;\n    jyd = dny;\n  }\n\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\n\nJPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  if (this.curve.zeroA)\n    return this._zeroDbl();\n  else if (this.curve.threeA)\n    return this._threeDbl();\n  else\n    return this._dbl();\n};\n\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n  // Z = 1\n  if (this.zOne) {\n    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-mdbl-2007-bl\n    // 1M + 5S + 14A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // T = M ^ 2 - 2*S\n    var t = m.redSqr().redISub(s).redISub(s);\n\n    // 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n    // X3 = T\n    var nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2*Y1\n    var nz = this.y.redAdd(this.y);\n  } else {\n    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l\n    // 2M + 5S + 13A\n\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = B^2\n    var c = b.redSqr();\n    // D = 2 * ((X1 + B)^2 - A - C)\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n    d = d.redIAdd(d);\n    // E = 3 * A\n    var e = a.redAdd(a).redIAdd(a);\n    // F = E^2\n    var f = e.redSqr();\n\n    // 8 * C\n    var c8 = c.redIAdd(c);\n    c8 = c8.redIAdd(c8);\n    c8 = c8.redIAdd(c8);\n\n    // X3 = F - 2 * D\n    var nx = f.redISub(d).redISub(d);\n    // Y3 = E * (D - X3) - 8 * C\n    var ny = e.redMul(d.redISub(nx)).redISub(c8);\n    // Z3 = 2 * Y1 * Z1\n    var nz = this.y.redMul(this.z);\n    nz = nz.redIAdd(nz);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._threeDbl = function _threeDbl() {\n  // Z = 1\n  if (this.zOne) {\n    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-mdbl-2007-bl\n    // 1M + 5S + 15A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n    // T = M^2 - 2 * S\n    var t = m.redSqr().redISub(s).redISub(s);\n    // X3 = T\n    var nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2 * Y1\n    var nz = this.y.redAdd(this.y);\n  } else {\n    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S\n\n    // delta = Z1^2\n    var delta = this.z.redSqr();\n    // gamma = Y1^2\n    var gamma = this.y.redSqr();\n    // beta = X1 * gamma\n    var beta = this.x.redMul(gamma);\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n    // X3 = alpha^2 - 8 * beta\n    var beta4 = beta.redIAdd(beta);\n    beta4 = beta4.redIAdd(beta4);\n    var beta8 = beta4.redAdd(beta4);\n    var nx = alpha.redSqr().redISub(beta8);\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    var nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    var ggamma8 = gamma.redSqr();\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    var ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._dbl = function _dbl() {\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  // 4M + 6S + 10A\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  var jx2 = jx.redSqr();\n  var jy2 = jy.redSqr();\n\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n  var jxd4 = jx.redAdd(jx);\n  jxd4 = jxd4.redIAdd(jxd4);\n  var t1 = jxd4.redMul(jy2);\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\n  var t2 = t1.redISub(nx);\n\n  var jyd8 = jy2.redSqr();\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  var ny = c.redMul(t2).redISub(jyd8);\n  var nz = jy.redAdd(jy).redMul(jz);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.trpl = function trpl() {\n  if (!this.curve.zeroA)\n    return this.dbl().add(this);\n\n  // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n  // 5M + 10S + ...\n\n  // XX = X1^2\n  var xx = this.x.redSqr();\n  // YY = Y1^2\n  var yy = this.y.redSqr();\n  // ZZ = Z1^2\n  var zz = this.z.redSqr();\n  // YYYY = YY^2\n  var yyyy = yy.redSqr();\n  // M = 3 * XX + a * ZZ2; a = 0\n  var m = xx.redAdd(xx).redIAdd(xx);\n  // MM = M^2\n  var mm = m.redSqr();\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n  e = e.redIAdd(e);\n  e = e.redAdd(e).redIAdd(e);\n  e = e.redISub(mm);\n  // EE = E^2\n  var ee = e.redSqr();\n  // T = 16*YYYY\n  var t = yyyy.redIAdd(yyyy);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  // U = (M + E)^2 - MM - EE - T\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\n  var yyu4 = yy.redMul(u);\n  yyu4 = yyu4.redIAdd(yyu4);\n  yyu4 = yyu4.redIAdd(yyu4);\n  var nx = this.x.redMul(ee).redISub(yyu4);\n  nx = nx.redIAdd(nx);\n  nx = nx.redIAdd(nx);\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  // Z3 = (Z1 + E)^2 - ZZ - EE\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mul = function mul(k, kbase) {\n  k = new bn(k, kbase);\n\n  return this.curve._wnafMul(this, k);\n};\n\nJPoint.prototype.eq = function eq(p) {\n  if (p.type === 'affine')\n    return this.eq(p.toJ());\n\n  if (this === p)\n    return true;\n\n  // x1 * z2^2 == x2 * z1^2\n  var z2 = this.z.redSqr();\n  var pz2 = p.z.redSqr();\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n    return false;\n\n  // y1 * z2^3 == y2 * z1^3\n  var z3 = z2.redMul(this.z);\n  var pz3 = pz2.redMul(p.z);\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\n\nJPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC JPoint Infinity>';\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n      ' y: ' + this.y.toString(16, 2) +\n      ' z: ' + this.z.toString(16, 2) + '>';\n};\n\nJPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\n},{\"../../elliptic\":30,\"../curve\":33,\"bn.js\":28,\"inherits\":144}],36:[function(require,module,exports){\nvar curves = exports;\n\nvar hash = require('hash.js');\nvar bn = require('bn.js');\nvar elliptic = require('../elliptic');\n\nvar assert = elliptic.utils.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new elliptic.curve.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new elliptic.curve.edwards(options);\n  else\n    this.curve = new elliptic.curve.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve\n      });\n      return curve;\n    }\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'\n  ],\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'\n  ],\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'\n  ],\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '0',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '9'\n  ]\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658'\n  ]\n});\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: hash.sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3'\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15'\n    }\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    {\n      'doubles': {\n        'step': 4,\n        'points': [\n          [\n            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\n            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'\n          ],\n          [\n            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\n            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'\n          ],\n          [\n            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\n            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'\n          ],\n          [\n            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\n            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'\n          ],\n          [\n            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\n            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'\n          ],\n          [\n            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\n            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'\n          ],\n          [\n            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\n            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'\n          ],\n          [\n            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\n            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'\n          ],\n          [\n            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\n            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'\n          ],\n          [\n            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\n            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'\n          ],\n          [\n            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\n            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'\n          ],\n          [\n            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\n            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'\n          ],\n          [\n            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\n            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'\n          ],\n          [\n            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\n            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'\n          ],\n          [\n            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\n            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'\n          ],\n          [\n            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\n            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'\n          ],\n          [\n            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\n            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'\n          ],\n          [\n            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\n            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'\n          ],\n          [\n            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\n            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'\n          ],\n          [\n            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\n            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'\n          ],\n          [\n            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\n            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'\n          ],\n          [\n            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\n            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'\n          ],\n          [\n            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\n            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'\n          ],\n          [\n            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\n            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'\n          ],\n          [\n            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\n            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'\n          ],\n          [\n            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\n            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'\n          ],\n          [\n            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\n            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'\n          ],\n          [\n            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\n            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'\n          ],\n          [\n            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\n            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'\n          ],\n          [\n            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\n            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'\n          ],\n          [\n            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\n            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'\n          ],\n          [\n            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\n            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'\n          ],\n          [\n            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\n            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'\n          ],\n          [\n            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\n            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'\n          ],\n          [\n            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\n            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'\n          ],\n          [\n            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\n            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'\n          ],\n          [\n            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\n            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'\n          ],\n          [\n            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\n            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'\n          ],\n          [\n            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\n            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'\n          ],\n          [\n            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\n            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'\n          ],\n          [\n            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\n            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'\n          ],\n          [\n            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\n            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'\n          ],\n          [\n            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\n            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'\n          ],\n          [\n            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\n            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'\n          ],\n          [\n            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\n            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'\n          ],\n          [\n            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\n            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'\n          ],\n          [\n            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\n            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'\n          ],\n          [\n            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\n            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'\n          ],\n          [\n            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\n            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'\n          ],\n          [\n            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\n            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'\n          ],\n          [\n            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\n            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'\n          ],\n          [\n            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\n            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'\n          ],\n          [\n            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\n            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'\n          ],\n          [\n            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\n            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'\n          ],\n          [\n            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\n            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'\n          ],\n          [\n            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\n            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'\n          ],\n          [\n            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\n            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'\n          ],\n          [\n            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\n            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'\n          ],\n          [\n            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\n            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'\n          ],\n          [\n            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\n            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'\n          ],\n          [\n            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\n            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'\n          ],\n          [\n            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\n            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'\n          ],\n          [\n            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\n            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'\n          ],\n          [\n            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\n            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'\n          ],\n          [\n            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\n            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'\n          ]\n        ]\n      },\n      'naf': {\n        'wnd': 7,\n        'points': [\n          [\n            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\n            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'\n          ],\n          [\n            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\n            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'\n          ],\n          [\n            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\n            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'\n          ],\n          [\n            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\n            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'\n          ],\n          [\n            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\n            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'\n          ],\n          [\n            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\n            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'\n          ],\n          [\n            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\n            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'\n          ],\n          [\n            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\n            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'\n          ],\n          [\n            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\n            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'\n          ],\n          [\n            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\n            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'\n          ],\n          [\n            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\n            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'\n          ],\n          [\n            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\n            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'\n          ],\n          [\n            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\n            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'\n          ],\n          [\n            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\n            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'\n          ],\n          [\n            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\n            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'\n          ],\n          [\n            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\n            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'\n          ],\n          [\n            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\n            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'\n          ],\n          [\n            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\n            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'\n          ],\n          [\n            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\n            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'\n          ],\n          [\n            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\n            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'\n          ],\n          [\n            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\n            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'\n          ],\n          [\n            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\n            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'\n          ],\n          [\n            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\n            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'\n          ],\n          [\n            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\n            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'\n          ],\n          [\n            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\n            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'\n          ],\n          [\n            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\n            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'\n          ],\n          [\n            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\n            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'\n          ],\n          [\n            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\n            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'\n          ],\n          [\n            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\n            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'\n          ],\n          [\n            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\n            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'\n          ],\n          [\n            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\n            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'\n          ],\n          [\n            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\n            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'\n          ],\n          [\n            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\n            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'\n          ],\n          [\n            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\n            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'\n          ],\n          [\n            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\n            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'\n          ],\n          [\n            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\n            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'\n          ],\n          [\n            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\n            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'\n          ],\n          [\n            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\n            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'\n          ],\n          [\n            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\n            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'\n          ],\n          [\n            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\n            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'\n          ],\n          [\n            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\n            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'\n          ],\n          [\n            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\n            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'\n          ],\n          [\n            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\n            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'\n          ],\n          [\n            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\n            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'\n          ],\n          [\n            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\n            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'\n          ],\n          [\n            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\n            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'\n          ],\n          [\n            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\n            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'\n          ],\n          [\n            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\n            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'\n          ],\n          [\n            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\n            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'\n          ],\n          [\n            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\n            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'\n          ],\n          [\n            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\n            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'\n          ],\n          [\n            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\n            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'\n          ],\n          [\n            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\n            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'\n          ],\n          [\n            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\n            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'\n          ],\n          [\n            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\n            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'\n          ],\n          [\n            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\n            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'\n          ],\n          [\n            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\n            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'\n          ],\n          [\n            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\n            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'\n          ],\n          [\n            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\n            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'\n          ],\n          [\n            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\n            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'\n          ],\n          [\n            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\n            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'\n          ],\n          [\n            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\n            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'\n          ],\n          [\n            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\n            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'\n          ],\n          [\n            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\n            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'\n          ],\n          [\n            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\n            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'\n          ],\n          [\n            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\n            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'\n          ],\n          [\n            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\n            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'\n          ],\n          [\n            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\n            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'\n          ],\n          [\n            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\n            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'\n          ],\n          [\n            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\n            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'\n          ],\n          [\n            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\n            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'\n          ],\n          [\n            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\n            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'\n          ],\n          [\n            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\n            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'\n          ],\n          [\n            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\n            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'\n          ],\n          [\n            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\n            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'\n          ],\n          [\n            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\n            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'\n          ],\n          [\n            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\n            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'\n          ],\n          [\n            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\n            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'\n          ],\n          [\n            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\n            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'\n          ],\n          [\n            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\n            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'\n          ],\n          [\n            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\n            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'\n          ],\n          [\n            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\n            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'\n          ],\n          [\n            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\n            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'\n          ],\n          [\n            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\n            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'\n          ],\n          [\n            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\n            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'\n          ],\n          [\n            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\n            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'\n          ],\n          [\n            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\n            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'\n          ],\n          [\n            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\n            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'\n          ],\n          [\n            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\n            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'\n          ],\n          [\n            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\n            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'\n          ],\n          [\n            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\n            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'\n          ],\n          [\n            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\n            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'\n          ],\n          [\n            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\n            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'\n          ],\n          [\n            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\n            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'\n          ],\n          [\n            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\n            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'\n          ],\n          [\n            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\n            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'\n          ],\n          [\n            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\n            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'\n          ],\n          [\n            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\n            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'\n          ],\n          [\n            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\n            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'\n          ],\n          [\n            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\n            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'\n          ],\n          [\n            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\n            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'\n          ],\n          [\n            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\n            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'\n          ],\n          [\n            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\n            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'\n          ],\n          [\n            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\n            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'\n          ],\n          [\n            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\n            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'\n          ],\n          [\n            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\n            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'\n          ],\n          [\n            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\n            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'\n          ],\n          [\n            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\n            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'\n          ],\n          [\n            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\n            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'\n          ],\n          [\n            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\n            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'\n          ],\n          [\n            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\n            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'\n          ],\n          [\n            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\n            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'\n          ],\n          [\n            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\n            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'\n          ],\n          [\n            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\n            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'\n          ],\n          [\n            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\n            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'\n          ],\n          [\n            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\n            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'\n          ],\n          [\n            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\n            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'\n          ],\n          [\n            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\n            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'\n          ],\n          [\n            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\n            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'\n          ],\n          [\n            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\n            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'\n          ],\n          [\n            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\n            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'\n          ],\n          [\n            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\n            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'\n          ],\n          [\n            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\n            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'\n          ],\n          [\n            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\n            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'\n          ],\n          [\n            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\n            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'\n          ],\n          [\n            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\n            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'\n          ],\n          [\n            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\n            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'\n          ]\n        ]\n      }\n    }\n  ]\n});\n\n},{\"../elliptic\":30,\"bn.js\":28,\"hash.js\":43}],37:[function(require,module,exports){\nvar bn = require('bn.js');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\n\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EC(options) {\n  if (!(this instanceof EC))\n    return new EC(options);\n\n  // Shortcut `elliptic.ec(curve-name)`\n  if (typeof options === 'string') {\n    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);\n\n    options = elliptic.curves[options];\n  }\n\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n  if (options instanceof elliptic.curves.PresetCurve)\n    options = { curve: options };\n\n  this.curve = options.curve.curve;\n  this.n = this.curve.n;\n  this.nh = this.n.shrn(1);\n  this.g = this.curve.g;\n\n  // Point on curve\n  this.g = options.curve.g;\n  this.g.precompute(options.curve.n.bitLength() + 1);\n\n  // Hash for function for DRBG\n  this.hash = options.hash || options.curve.hash;\n}\nmodule.exports = EC;\n\nEC.prototype.keyPair = function keyPair(priv, pub) {\n  return new KeyPair(this, priv, pub);\n};\n\nEC.prototype.genKeyPair = function genKeyPair(options) {\n  if (!options)\n    options = {};\n\n  // Instantiate Hmac_DRBG\n  var drbg = new elliptic.hmacDRBG({\n    hash: this.hash,\n    pers: options.pers,\n    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),\n    nonce: this.n.toArray()\n  });\n\n  var bytes = this.n.byteLength();\n  var ns2 = this.n.sub(new bn(2));\n  do {\n    var priv = new bn(drbg.generate(bytes));\n    if (priv.cmp(ns2) > 0)\n      continue;\n\n    priv.iaddn(1);\n    return this.keyPair(priv);\n  } while (true);\n};\n\nEC.prototype._truncateToN = function truncateToN(msg, truncOnly) {\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\n  if (delta > 0)\n    msg = msg.shrn(delta);\n  if (!truncOnly && msg.cmp(this.n) >= 0)\n    return msg.sub(this.n);\n  else\n    return msg;\n};\n\nEC.prototype.sign = function sign(msg, key, options) {\n  key = this.keyPair(key, 'hex');\n  msg = this._truncateToN(new bn(msg, 16));\n  if (!options)\n    options = {};\n\n  // Zero-extend key to provide enough entropy\n  var bytes = this.n.byteLength();\n  var bkey = key.getPrivate().toArray();\n  for (var i = bkey.length; i < 21; i++)\n    bkey.unshift(0);\n\n  // Zero-extend nonce to have the same byte size as N\n  var nonce = msg.toArray();\n  for (var i = nonce.length; i < bytes; i++)\n    nonce.unshift(0);\n\n  // Instantiate Hmac_DRBG\n  var drbg = new elliptic.hmacDRBG({\n    hash: this.hash,\n    entropy: bkey,\n    nonce: nonce\n  });\n\n  // Number of bytes to generate\n  var ns1 = this.n.sub(new bn(1));\n  do {\n    var k = new bn(drbg.generate(this.n.byteLength()));\n    k = this._truncateToN(k, true);\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n      continue;\n\n    var kp = this.g.mul(k);\n    if (kp.isInfinity())\n      continue;\n\n    var r = kp.getX().mod(this.n);\n    if (r.cmpn(0) === 0)\n      continue;\n\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);\n    if (s.cmpn(0) === 0)\n      continue;\n\n    // Use complement of `s`, if it is > `n / 2`\n    if (options.canonical && s.cmp(this.nh) > 0)\n      s = this.n.sub(s);\n\n    return new Signature(r, s);\n  } while (true);\n};\n\nEC.prototype.verify = function verify(msg, signature, key) {\n  msg = this._truncateToN(new bn(msg, 16));\n  key = this.keyPair(key, 'hex');\n  signature = new Signature(signature, 'hex');\n\n  // Perform primitive values validation\n  var r = signature.r;\n  var s = signature.s;\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n    return false;\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n    return false;\n\n  // Validate signature\n  var sinv = s.invm(this.n);\n  var u1 = sinv.mul(msg).mod(this.n);\n  var u2 = sinv.mul(r).mod(this.n);\n\n  var p = this.g.mulAdd(u1, key.getPublic(), u2);\n  if (p.isInfinity())\n    return false;\n\n  return p.getX().mod(this.n).cmp(r) === 0;\n};\n\n},{\"../../elliptic\":30,\"./key\":38,\"./signature\":39,\"bn.js\":28}],38:[function(require,module,exports){\nvar bn = require('bn.js');\n\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\n\nfunction KeyPair(ec, priv, pub) {\n  if (priv instanceof KeyPair)\n    return priv;\n  if (pub instanceof KeyPair)\n    return pub;\n\n  if (!priv) {\n    priv = pub;\n    pub = null;\n  }\n  if (priv !== null && typeof priv === 'object') {\n    if (priv.x) {\n      // KeyPair(public)\n      pub = priv;\n      priv = null;\n    } else if (priv.priv || priv.pub) {\n      // KeyPair({ priv: ..., pub: ... })\n      pub = priv.pub;\n      priv = priv.priv;\n    }\n  }\n\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(public, 'hex')\n  if (this._importPublicHex(priv, pub))\n    return;\n\n  if (pub === 'hex')\n    pub = null;\n\n  // KeyPair(priv, pub)\n  if (priv)\n    this._importPrivate(priv);\n  if (pub)\n    this._importPublic(pub);\n}\nmodule.exports = KeyPair;\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!enc)\n    return this.pub;\n\n  var len = this.ec.curve.p.byteLength();\n  var x = this.pub.getX().toArray();\n\n  for (var i = x.length; i < len; i++)\n    x.unshift(0);\n\n  if (compact) {\n    var res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n  } else {\n    var y = this.pub.getY().toArray();\n    for (var i = y.length; i < len; i++)\n      y.unshift(0);\n    var res = [ 0x04 ].concat(x, y);\n  }\n  return utils.encode(res, enc);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key) {\n  this.priv = new bn(key, 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.mod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key) {\n  this.pub = this.ec.curve.point(key.x, key.y);\n};\n\nKeyPair.prototype._importPublicHex = function _importPublic(key, enc) {\n  key = utils.toArray(key, enc);\n  var len = this.ec.curve.p.byteLength();\n  if (key[0] === 0x04 && key.length - 1 === 2 * len) {\n    this.pub = this.ec.curve.point(\n      key.slice(1, 1 + len),\n      key.slice(1 + len, 1 + 2 * len));\n  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {\n    this.pub = this.ec.curve.pointFromX(key[0] === 0x03,\n                                        key.slice(1, 1 +len));\n  } else {\n    return false;\n  }\n\n  return true;\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg) {\n  return this.ec.sign(msg, this);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n\n},{\"../../elliptic\":30,\"bn.js\":28}],39:[function(require,module,exports){\nvar bn = require('bn.js');\n\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\n\nfunction Signature(r, s) {\n  if (r instanceof Signature)\n    return r;\n\n  if (this._importDER(r, s))\n    return;\n\n  assert(r && s, 'Signature without r or s');\n  this.r = new bn(r, 16);\n  this.s = new bn(s, 16);\n}\nmodule.exports = Signature;\n\nSignature.prototype._importDER = function _importDER(data, enc) {\n  data = utils.toArray(data, enc);\n  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)\n    return false;\n  var total = data[1];\n  if (1 + total > data.length)\n    return false;\n  var rlen = data[3];\n  // Short length notation\n  if (rlen >= 0x80)\n    return false;\n  if (4 + rlen + 2 >= data.length)\n    return false;\n  if (data[4 + rlen] !== 0x02)\n    return false;\n  var slen = data[5 + rlen];\n  // Short length notation\n  if (slen >= 0x80)\n    return false;\n  if (4 + rlen + 2 + slen > data.length)\n    return false;\n\n  this.r = new bn(data.slice(4, 4 + rlen));\n  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));\n\n  return true;\n};\n\nSignature.prototype.toDER = function toDER(enc) {\n  var r = this.r.toArray();\n  var s = this.s.toArray();\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r);\n  // Pad values\n  if (s[0] & 0x80)\n    s = [ 0 ].concat(s);\n\n  var total = r.length + s.length + 4;\n  var res = [ 0x30, total, 0x02, r.length ];\n  res = res.concat(r, [ 0x02, s.length ], s);\n  return utils.encode(res, enc);\n};\n\n},{\"../../elliptic\":30,\"bn.js\":28}],40:[function(require,module,exports){\nvar hash = require('hash.js');\nvar elliptic = require('../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this.reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc);\n  var nonce = utils.toArray(options.nonce, options.nonceEnc);\n  var pers = utils.toArray(options.pers, options.persEnc);\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this.reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toBuffer(entropy, entropyEnc);\n  add = utils.toBuffer(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this.reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this.reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc);\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this.reseed++;\n  return utils.encode(res, enc);\n};\n\n},{\"../elliptic\":30,\"hash.js\":43}],41:[function(require,module,exports){\nvar bn = require('bn.js');\n\nvar utils = exports;\n\nutils.assert = function assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n};\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        var hi = c >> 8;\n        var lo = c & 0xff;\n        if (hi)\n          res.push(hi, lo);\n        else\n          res.push(lo);\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (var i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex')\n    return toHex(arr);\n  else\n    return arr;\n};\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w) {\n  var naf = [];\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n  while (k.cmpn(1) >= 0) {\n    var z;\n    if (k.isOdd()) {\n      var mod = k.andln(ws - 1);\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n    naf.push(z);\n\n    // Optimization, shift by word if possible\n    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;\n    for (var i = 1; i < shift; i++)\n      naf.push(0);\n    k.ishrn(shift);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    []\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      var m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      var m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.ishrn(1);\n    k2.ishrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\n},{\"bn.js\":28}],42:[function(require,module,exports){\nvar r;\n\nmodule.exports = function rand(len) {\n  if (!r)\n    r = new Rand(null);\n\n  return r.generate(len);\n};\n\nfunction Rand(rand) {\n  this.rand = rand;\n}\nmodule.exports.Rand = Rand;\n\nRand.prototype.generate = function generate(len) {\n  return this._rand(len);\n};\n\nif (typeof window === 'object') {\n  if (window.crypto && window.crypto.getRandomValues) {\n    // Modern browsers\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      window.crypto.getRandomValues(arr);\n      return arr;\n    };\n  } else if (window.msCrypto && window.msCrypto.getRandomValues) {\n    // IE\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      window.msCrypto.getRandomValues(arr);\n      return arr;\n    };\n  } else {\n    // Old junk\n    Rand.prototype._rand = function() {\n      throw new Error('Not implemented yet');\n    };\n  }\n} else {\n  // Node.js or Web worker\n  try {\n    var crypto = require('cry' + 'pto');\n\n    Rand.prototype._rand = function _rand(n) {\n      return crypto.randomBytes(n);\n    };\n  } catch (e) {\n    // Emulate crypto API using randy\n    Rand.prototype._rand = function _rand(n) {\n      var res = new Uint8Array(n);\n      for (var i = 0; i < res.length; i++)\n        res[i] = this.rand.getByte();\n      return res;\n    };\n  }\n}\n\n},{}],43:[function(require,module,exports){\nvar hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n\n},{\"./hash/common\":44,\"./hash/hmac\":45,\"./hash/ripemd\":46,\"./hash/sha\":47,\"./hash/utils\":48}],44:[function(require,module,exports){\nvar hash = require('../hash');\nvar utils = hash.utils;\nvar assert = utils.assert;\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n\n},{\"../hash\":43}],45:[function(require,module,exports){\nvar hmac = exports;\n\nvar hash = require('../hash');\nvar utils = hash.utils;\nvar assert = utils.assert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (var i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (var i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n\n},{\"../hash\":43}],46:[function(require,module,exports){\nvar hash = require('../hash');\nvar utils = hash.utils;\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = hash.common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n\n},{\"../hash\":43}],47:[function(require,module,exports){\nvar hash = require('../hash');\nvar utils = hash.utils;\nvar assert = utils.assert;\n\nvar rotr32 = utils.rotr32;\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\nvar BlockHash = hash.common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nexports.sha256 = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nexports.sha224 = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [ 0x6a09e667, 0xf3bcc908,\n             0xbb67ae85, 0x84caa73b,\n             0x3c6ef372, 0xfe94f82b,\n             0xa54ff53a, 0x5f1d36f1,\n             0x510e527f, 0xade682d1,\n             0x9b05688c, 0x2b3e6c1f,\n             0x1f83d9ab, 0xfb41bd6b,\n             0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nexports.sha512 = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(c0_hi, c0_lo,\n                      c1_hi, c1_lo,\n                      c2_hi, c2_lo,\n                      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,\n                          c1_hi, c1_lo,\n                          c2_hi, c2_lo,\n                          c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo,\n                           c1_hi, c1_lo,\n                           c2_hi, c2_lo,\n                           c3_hi, c3_lo,\n                           c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo,\n                           c1_hi, c1_lo,\n                           c2_hi, c2_lo,\n                           c3_hi, c3_lo,\n                           c4_hi, c4_lo);\n\n    var c0_hi = s0_512_hi(ah, al);\n    var c0_lo = s0_512_lo(ah, al);\n    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [ 0xcbbb9d5d, 0xc1059ed8,\n             0x629a292a, 0x367cd507,\n             0x9159015a, 0x3070dd17,\n             0x152fecd8, 0xf70e5939,\n             0x67332667, 0xffc00b31,\n             0x8eb44a87, 0x68581511,\n             0xdb0c2e0d, 0x64f98fa7,\n             0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nexports.sha384 = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,\n             0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nexports.sha1 = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (var i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\n\nfunction ch64_hi(xh, xl, yh, yl, zh, zl) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh, zl) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\n},{\"../hash\":43}],48:[function(require,module,exports){\nvar utils = exports;\nvar inherits = require('inherits');\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        var hi = c >> 8;\n        var lo = c & 0xff;\n        if (hi)\n          res.push(hi, lo);\n        else\n          res.push(lo);\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (var i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nutils.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nutils.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nutils.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nutils.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nutils.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nutils.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nutils.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nutils.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nutils.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nutils.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nutils.sum32_5 = sum32_5;\n\nfunction assert(cond, msg) {\n  if (!cond)\n    throw new Error(msg || 'Assertion failed');\n}\nutils.assert = assert;\n\nutils.inherits = inherits;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n};\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n};\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n};\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n};\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n};\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n};\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n};\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n};\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n};\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n};\nexports.shr64_lo = shr64_lo;\n\n},{\"inherits\":144}],49:[function(require,module,exports){\nmodule.exports={\n  \"name\": \"elliptic\",\n  \"version\": \"1.0.1\",\n  \"description\": \"EC cryptography\",\n  \"main\": \"lib/elliptic.js\",\n  \"scripts\": {\n    \"test\": \"mocha --reporter=spec test/*-test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:indutny/elliptic\"\n  },\n  \"keywords\": [\n    \"EC\",\n    \"Elliptic\",\n    \"curve\",\n    \"Cryptography\"\n  ],\n  \"author\": {\n    \"name\": \"Fedor Indutny\",\n    \"email\": \"fedor@indutny.com\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/indutny/elliptic/issues\"\n  },\n  \"homepage\": \"https://github.com/indutny/elliptic\",\n  \"devDependencies\": {\n    \"browserify\": \"^3.44.2\",\n    \"mocha\": \"^1.18.2\",\n    \"uglify-js\": \"^2.4.13\"\n  },\n  \"dependencies\": {\n    \"bn.js\": \"^1.0.0\",\n    \"brorand\": \"^1.0.1\",\n    \"hash.js\": \"^1.0.0\",\n    \"inherits\": \"^2.0.1\"\n  },\n  \"gitHead\": \"17dc013761dd1efcfb868e2b06b0b897627b40be\",\n  \"_id\": \"elliptic@1.0.1\",\n  \"_shasum\": \"d180376b66a17d74995c837796362ac4d22aefe3\",\n  \"_from\": \"elliptic@1.0.1\",\n  \"_npmVersion\": \"1.4.28\",\n  \"_npmUser\": {\n    \"name\": \"indutny\",\n    \"email\": \"fedor@indutny.com\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"indutny\",\n      \"email\": \"fedor@indutny.com\"\n    }\n  ],\n  \"dist\": {\n    \"shasum\": \"d180376b66a17d74995c837796362ac4d22aefe3\",\n    \"tarball\": \"http://registry.npmjs.org/elliptic/-/elliptic-1.0.1.tgz\"\n  },\n  \"directories\": {},\n  \"_resolved\": \"https://registry.npmjs.org/elliptic/-/elliptic-1.0.1.tgz\",\n  \"readme\": \"ERROR: No README data found!\"\n}\n\n},{}],50:[function(require,module,exports){\n(function (Buffer){\nvar createHash = require('create-hash');\nmodule.exports = function evp(password, salt, keyLen) {\n  keyLen = keyLen/8;\n  var ki = 0;\n  var ii = 0;\n  var key = new Buffer(keyLen);\n  var addmd = 0;\n  var md, md_buf;\n  var i;\n  while (true) {\n    md = createHash('md5');\n    if(addmd++ > 0) {\n       md.update(md_buf);\n    }\n    md.update(password);\n    md.update(salt);\n    md_buf = md.digest();\n    i = 0;\n    if(keyLen > 0) {\n      while(true) {\n        if(keyLen === 0) {\n          break;\n        }\n        if(i === md_buf.length) {\n          break;\n        }\n        key[ki++] = md_buf[i++];\n        keyLen--;\n       }\n    }\n   if(keyLen === 0) {\n      break;\n    }\n  }\n  for(i=0;i<md_buf.length;i++) {\n    md_buf[i] = 0;\n  }\n  return key;\n};\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2,\"create-hash\":94}],51:[function(require,module,exports){\nmodule.exports={\"2.16.840.1.101.3.4.1.1\": \"aes-128-ecb\",\n\"2.16.840.1.101.3.4.1.2\": \"aes-128-cbc\",\n\"2.16.840.1.101.3.4.1.3\": \"aes-128-ofb\",\n\"2.16.840.1.101.3.4.1.4\": \"aes-128-cfb\",\n\"2.16.840.1.101.3.4.1.21\": \"aes-192-ecb\",\n\"2.16.840.1.101.3.4.1.22\": \"aes-192-cbc\",\n\"2.16.840.1.101.3.4.1.23\": \"aes-192-ofb\",\n\"2.16.840.1.101.3.4.1.24\": \"aes-192-cfb\",\n\"2.16.840.1.101.3.4.1.41\": \"aes-256-ecb\",\n\"2.16.840.1.101.3.4.1.42\": \"aes-256-cbc\",\n\"2.16.840.1.101.3.4.1.43\": \"aes-256-ofb\",\n\"2.16.840.1.101.3.4.1.44\": \"aes-256-cfb\"\n}\n},{}],52:[function(require,module,exports){\n// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js\n// Fedor, you are amazing.\n\nvar asn1 = require('asn1.js');\n\nvar RSAPrivateKey = asn1.define('RSAPrivateKey', function() {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('modulus').int(),\n    this.key('publicExponent').int(),\n    this.key('privateExponent').int(),\n    this.key('prime1').int(),\n    this.key('prime2').int(),\n    this.key('exponent1').int(),\n    this.key('exponent2').int(),\n    this.key('coefficient').int()\n  );\n});\nexports.RSAPrivateKey = RSAPrivateKey;\n\nvar RSAPublicKey = asn1.define('RSAPublicKey', function() {\n  this.seq().obj(\n    this.key('modulus').int(),\n    this.key('publicExponent').int()\n  );\n});\nexports.RSAPublicKey = RSAPublicKey;\n\nvar PublicKey = asn1.define('SubjectPublicKeyInfo', function() {\n  this.seq().obj(\n    this.key('algorithm').use(AlgorithmIdentifier),\n    this.key('subjectPublicKey').bitstr()\n  );\n});\nexports.PublicKey = PublicKey;\n\nvar AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {\n  this.seq().obj(\n    this.key('algorithm').objid(),\n    this.key('none').null_().optional(),\n    this.key('curve').objid().optional(),\n    this.key('params').seq().obj(\n        this.key('p').int(),\n        this.key('q').int(),\n        this.key('g').int()\n      ).optional()\n  );\n});\n\nvar PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('algorithm').use(AlgorithmIdentifier),\n    this.key('subjectPrivateKey').octstr()\n  );\n});\nexports.PrivateKey = PrivateKeyInfo;\nvar EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {\n  this.seq().obj(\n    this.key('algorithm').seq().obj(\n      this.key('id').objid(),\n      this.key('decrypt').seq().obj(\n        this.key('kde').seq().obj(\n          this.key('id').objid(),\n          this.key('kdeparams').seq().obj(\n            this.key('salt').octstr(),\n            this.key('iters').int()\n          )\n        ),\n        this.key('cipher').seq().obj(\n          this.key('algo').objid(),\n          this.key('iv').octstr()\n        )\n      )\n    ),\n    this.key('subjectPrivateKey').octstr()\n  );\n});\n\nexports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;\n\nvar DSAPrivateKey = asn1.define('DSAPrivateKey', function() {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('p').int(),\n    this.key('q').int(),\n    this.key('g').int(),\n    this.key('pub_key').int(),\n    this.key('priv_key').int()\n  );\n});\nexports.DSAPrivateKey = DSAPrivateKey;\n\nexports.DSAparam = asn1.define('DSAparam', function () {\n  this.int();\n});\nvar ECPrivateKey = asn1.define('ECPrivateKey', function() {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('privateKey').octstr(),\n    this.key('parameters').optional().explicit(0).use(ECParameters),\n    this.key('publicKey').optional().explicit(1).bitstr()\n  );\n});\nexports.ECPrivateKey = ECPrivateKey;\nvar ECParameters = asn1.define('ECParameters', function() {\n  this.choice({\n    namedCurve: this.objid()\n  });\n});\n\nexports.signature = asn1.define('signature', function() {\n  this.seq().obj(\n    this.key('r').int(),\n    this.key('s').int()\n  );\n});\n\n},{\"asn1.js\":55}],53:[function(require,module,exports){\n(function (Buffer){\n// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED\\n\\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\\n\\r?\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?/m;\nvar startRegex =/^-----BEGIN (.*) KEY-----\\n/m;\nvar fullRegex = /^-----BEGIN (.*) KEY-----\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?-----END \\1 KEY-----$/m;\nvar evp = require('./EVP_BytesToKey');\nvar ciphers = require('browserify-aes');\nmodule.exports = function (okey, password) {\n  var key = okey.toString();\n  var match = key.match(findProc);\n  var decrypted;\n  if (!match) {\n    var match2 = key.match(fullRegex);\n    decrypted = new Buffer(match2[2].replace(/\\n\\r?/g, ''), 'base64');\n  } else {\n    var suite = 'aes' + match[1];\n    var iv = new Buffer(match[2], 'hex');\n    var cipherText = new Buffer(match[3].replace(/\\n\\r?/g, ''), 'base64');\n    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));\n    var out = [];\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);\n    out.push(cipher.update(cipherText));\n    out.push(cipher.final());\n    decrypted = Buffer.concat(out);\n  }\n  var tag = key.match(startRegex)[1] + ' KEY';\n  return {\n    tag: tag,\n    data: decrypted\n  };\n};\n// http://stackoverflow.com/a/7033705\nfunction wrap(str) {\n  var chunks = [];\n  while (str) {\n    if (str.length < 64) {\n      chunks.push(str);\n      break;\n    }\n    else {\n      chunks.push(str.slice(0, 64));\n      str = str.slice(64);\n    }\n  }\n  return chunks.join(\"\\n\");\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./EVP_BytesToKey\":50,\"browserify-aes\":10,\"buffer\":2}],54:[function(require,module,exports){\n(function (Buffer){\nvar asn1 = require('./asn1');\nvar aesid = require('./aesid.json');\nvar fixProc = require('./fixProc');\nvar ciphers = require('browserify-aes');\nvar compat = require('pbkdf2-compat');\nmodule.exports = parseKeys;\n\nfunction parseKeys(buffer) {\n  var password;\n  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {\n    password = buffer.passphrase;\n    buffer = buffer.key;\n  }\n  if (typeof buffer === 'string') {\n    buffer = new Buffer(buffer);\n  }\n\n  var stripped = fixProc(buffer, password);\n\n  var type = stripped.tag;\n  var data = stripped.data;\n  var subtype,ndata;\n  switch (type) {\n    case 'PUBLIC KEY':\n      ndata = asn1.PublicKey.decode(data, 'der');\n      subtype = ndata.algorithm.algorithm.join('.');\n      switch(subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');\n        case '1.2.840.10045.2.1':\n        ndata.subjectPrivateKey = ndata.subjectPublicKey;\n          return {\n            type: 'ec',\n            data:  ndata\n          };\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');\n          return {\n            type: 'dsa',\n            data: ndata.algorithm.params\n          };\n        default: throw new Error('unknown key id ' +  subtype);\n      }\n      throw new Error('unknown key type ' +  type);\n    case 'ENCRYPTED PRIVATE KEY':\n      data = asn1.EncryptedPrivateKey.decode(data, 'der');\n      data = decrypt(data, password);\n      //falling through\n    case 'PRIVATE KEY':\n      ndata = asn1.PrivateKey.decode(data, 'der');\n      subtype = ndata.algorithm.algorithm.join('.');\n      switch(subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');\n        case '1.2.840.10045.2.1':\n          return {\n            curve: ndata.algorithm.curve,\n            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey\n          };\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');\n          return {\n            type: 'dsa',\n            params: ndata.algorithm.params\n          };\n        default: throw new Error('unknown key id ' +  subtype);\n      }\n      throw new Error('unknown key type ' +  type);\n    case 'RSA PUBLIC KEY':\n      return asn1.RSAPublicKey.decode(data, 'der');\n    case 'RSA PRIVATE KEY':\n      return asn1.RSAPrivateKey.decode(data, 'der');\n    case 'DSA PRIVATE KEY':\n      return {\n        type: 'dsa',\n        params: asn1.DSAPrivateKey.decode(data, 'der')\n      };\n    case 'EC PRIVATE KEY':\n      data = asn1.ECPrivateKey.decode(data, 'der');\n      return {\n        curve: data.parameters.value,\n        privateKey: data.privateKey\n      };\n    default: throw new Error('unknown key type ' +  type);\n  }\n}\nparseKeys.signature = asn1.signature;\nfunction decrypt(data, password) {\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt;\n  var iters = data.algorithm.decrypt.kde.kdeparams.iters;\n  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];\n  var iv = data.algorithm.decrypt.cipher.iv;\n  var cipherText = data.subjectPrivateKey;\n  var keylen = parseInt(algo.split('-')[1], 10)/8;\n  var key = compat.pbkdf2Sync(password, salt, iters, keylen);\n  var cipher = ciphers.createDecipheriv(algo, key, iv);\n  var out = [];\n  out.push(cipher.update(cipherText));\n  out.push(cipher.final());\n  return Buffer.concat(out);\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./aesid.json\":51,\"./asn1\":52,\"./fixProc\":53,\"browserify-aes\":10,\"buffer\":2,\"pbkdf2-compat\":68}],55:[function(require,module,exports){\nvar asn1 = exports;\n\nasn1.bignum = require('bn.js');\n\nasn1.define = require('./asn1/api').define;\nasn1.base = require('./asn1/base');\nasn1.constants = require('./asn1/constants');\nasn1.decoders = require('./asn1/decoders');\nasn1.encoders = require('./asn1/encoders');\n\n},{\"./asn1/api\":56,\"./asn1/base\":58,\"./asn1/constants\":62,\"./asn1/decoders\":64,\"./asn1/encoders\":66,\"bn.js\":28}],56:[function(require,module,exports){\nvar asn1 = require('../asn1');\nvar inherits = require('inherits');\n\nvar api = exports;\n\napi.define = function define(name, body) {\n  return new Entity(name, body);\n};\n\nfunction Entity(name, body) {\n  this.name = name;\n  this.body = body;\n\n  this.decoders = {};\n  this.encoders = {};\n};\n\nEntity.prototype._createNamed = function createNamed(base) {\n  var named;\n  try {\n    named = require('vm').runInThisContext(\n      '(function ' + this.name + '(entity) {\\n' +\n      '  this._initNamed(entity);\\n' +\n      '})'\n    );\n  } catch (e) {\n    named = function (entity) {\n      this._initNamed(entity);\n    };\n  }\n  inherits(named, base);\n  named.prototype._initNamed = function initnamed(entity) {\n    base.call(this, entity);\n  };\n\n  return new named(this);\n};\n\nEntity.prototype._getDecoder = function _getDecoder(enc) {\n  // Lazily create decoder\n  if (!this.decoders.hasOwnProperty(enc))\n    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);\n  return this.decoders[enc];\n};\n\nEntity.prototype.decode = function decode(data, enc, options) {\n  return this._getDecoder(enc).decode(data, options);\n};\n\nEntity.prototype._getEncoder = function _getEncoder(enc) {\n  // Lazily create encoder\n  if (!this.encoders.hasOwnProperty(enc))\n    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);\n  return this.encoders[enc];\n};\n\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\n  return this._getEncoder(enc).encode(data, reporter);\n};\n\n},{\"../asn1\":55,\"inherits\":144,\"vm\":160}],57:[function(require,module,exports){\nvar inherits = require('inherits');\nvar Reporter = require('../base').Reporter;\nvar Buffer = require('buffer').Buffer;\n\nfunction DecoderBuffer(base, options) {\n  Reporter.call(this, options);\n  if (!Buffer.isBuffer(base)) {\n    this.error('Input not Buffer');\n    return;\n  }\n\n  this.base = base;\n  this.offset = 0;\n  this.length = base.length;\n}\ninherits(DecoderBuffer, Reporter);\nexports.DecoderBuffer = DecoderBuffer;\n\nDecoderBuffer.prototype.save = function save() {\n  return { offset: this.offset };\n};\n\nDecoderBuffer.prototype.restore = function restore(save) {\n  // Return skipped data\n  var res = new DecoderBuffer(this.base);\n  res.offset = save.offset;\n  res.length = this.offset;\n\n  this.offset = save.offset;\n\n  return res;\n};\n\nDecoderBuffer.prototype.isEmpty = function isEmpty() {\n  return this.offset === this.length;\n};\n\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n  if (this.offset + 1 <= this.length)\n    return this.base.readUInt8(this.offset++, true);\n  else\n    return this.error(fail || 'DecoderBuffer overrun');\n}\n\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {\n  if (!(this.offset + bytes <= this.length))\n    return this.error(fail || 'DecoderBuffer overrun');\n\n  var res = new DecoderBuffer(this.base);\n\n  // Share reporter state\n  res._reporterState = this._reporterState;\n\n  res.offset = this.offset;\n  res.length = this.offset + bytes;\n  this.offset += bytes;\n  return res;\n}\n\nDecoderBuffer.prototype.raw = function raw(save) {\n  return this.base.slice(save ? save.offset : this.offset, this.length);\n}\n\nfunction EncoderBuffer(value, reporter) {\n  if (Array.isArray(value)) {\n    this.length = 0;\n    this.value = value.map(function(item) {\n      if (!(item instanceof EncoderBuffer))\n        item = new EncoderBuffer(item, reporter);\n      this.length += item.length;\n      return item;\n    }, this);\n  } else if (typeof value === 'number') {\n    if (!(0 <= value && value <= 0xff))\n      return reporter.error('non-byte EncoderBuffer value');\n    this.value = value;\n    this.length = 1;\n  } else if (typeof value === 'string') {\n    this.value = value;\n    this.length = Buffer.byteLength(value);\n  } else if (Buffer.isBuffer(value)) {\n    this.value = value;\n    this.length = value.length;\n  } else {\n    return reporter.error('Unsupported type: ' + typeof value);\n  }\n}\nexports.EncoderBuffer = EncoderBuffer;\n\nEncoderBuffer.prototype.join = function join(out, offset) {\n  if (!out)\n    out = new Buffer(this.length);\n  if (!offset)\n    offset = 0;\n\n  if (this.length === 0)\n    return out;\n\n  if (Array.isArray(this.value)) {\n    this.value.forEach(function(item) {\n      item.join(out, offset);\n      offset += item.length;\n    });\n  } else {\n    if (typeof this.value === 'number')\n      out[offset] = this.value;\n    else if (typeof this.value === 'string')\n      out.write(this.value, offset);\n    else if (Buffer.isBuffer(this.value))\n      this.value.copy(out, offset);\n    offset += this.length;\n  }\n\n  return out;\n};\n\n},{\"../base\":58,\"buffer\":2,\"inherits\":144}],58:[function(require,module,exports){\nvar base = exports;\n\nbase.Reporter = require('./reporter').Reporter;\nbase.DecoderBuffer = require('./buffer').DecoderBuffer;\nbase.EncoderBuffer = require('./buffer').EncoderBuffer;\nbase.Node = require('./node');\n\n},{\"./buffer\":57,\"./node\":59,\"./reporter\":60}],59:[function(require,module,exports){\nvar Reporter = require('../base').Reporter;\nvar EncoderBuffer = require('../base').EncoderBuffer;\nvar assert = require('minimalistic-assert');\n\n// Supported tags\nvar tags = [\n  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',\n  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str'\n];\n\n// Public methods list\nvar methods = [\n  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',\n  'any'\n].concat(tags);\n\n// Overrided methods list\nvar overrided = [\n  '_peekTag', '_decodeTag', '_use',\n  '_decodeStr', '_decodeObjid', '_decodeTime',\n  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',\n\n  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',\n  '_encodeNull', '_encodeInt', '_encodeBool'\n];\n\nfunction Node(enc, parent) {\n  var state = {};\n  this._baseState = state;\n\n  state.enc = enc;\n\n  state.parent = parent || null;\n  state.children = null;\n\n  // State\n  state.tag = null;\n  state.args = null;\n  state.reverseArgs = null;\n  state.choice = null;\n  state.optional = false;\n  state.any = false;\n  state.obj = false;\n  state.use = null;\n  state.useDecoder = null;\n  state.key = null;\n  state['default'] = null;\n  state.explicit = null;\n  state.implicit = null;\n\n  // Should create new instance on each method\n  if (!state.parent) {\n    state.children = [];\n    this._wrap();\n  }\n}\nmodule.exports = Node;\n\nvar stateProps = [\n  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',\n  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',\n  'implicit'\n];\n\nNode.prototype.clone = function clone() {\n  var state = this._baseState;\n  var cstate = {};\n  stateProps.forEach(function(prop) {\n    cstate[prop] = state[prop];\n  });\n  var res = new this.constructor(cstate.parent);\n  res._baseState = cstate;\n  return res;\n};\n\nNode.prototype._wrap = function wrap() {\n  var state = this._baseState;\n  methods.forEach(function(method) {\n    this[method] = function _wrappedMethod() {\n      var clone = new this.constructor(this);\n      state.children.push(clone);\n      return clone[method].apply(clone, arguments);\n    };\n  }, this);\n};\n\nNode.prototype._init = function init(body) {\n  var state = this._baseState;\n\n  assert(state.parent === null);\n  body.call(this);\n\n  // Filter children\n  state.children = state.children.filter(function(child) {\n    return child._baseState.parent === this;\n  }, this);\n  assert.equal(state.children.length, 1, 'Root node can have only one child');\n};\n\nNode.prototype._useArgs = function useArgs(args) {\n  var state = this._baseState;\n\n  // Filter children and args\n  var children = args.filter(function(arg) {\n    return arg instanceof this.constructor;\n  }, this);\n  args = args.filter(function(arg) {\n    return !(arg instanceof this.constructor);\n  }, this);\n\n  if (children.length !== 0) {\n    assert(state.children === null);\n    state.children = children;\n\n    // Replace parent to maintain backward link\n    children.forEach(function(child) {\n      child._baseState.parent = this;\n    }, this);\n  }\n  if (args.length !== 0) {\n    assert(state.args === null);\n    state.args = args;\n    state.reverseArgs = args.map(function(arg) {\n      if (typeof arg !== 'object' || arg.constructor !== Object)\n        return arg;\n\n      var res = {};\n      Object.keys(arg).forEach(function(key) {\n        if (key == (key | 0))\n          key |= 0;\n        var value = arg[key];\n        res[value] = key;\n      });\n      return res;\n    });\n  }\n};\n\n//\n// Overrided methods\n//\n\noverrided.forEach(function(method) {\n  Node.prototype[method] = function _overrided() {\n    var state = this._baseState;\n    throw new Error(method + ' not implemented for encoding: ' + state.enc);\n  };\n});\n\n//\n// Public methods\n//\n\ntags.forEach(function(tag) {\n  Node.prototype[tag] = function _tagMethod() {\n    var state = this._baseState;\n    var args = Array.prototype.slice.call(arguments);\n\n    assert(state.tag === null);\n    state.tag = tag;\n\n    this._useArgs(args);\n\n    return this;\n  };\n});\n\nNode.prototype.use = function use(item) {\n  var state = this._baseState;\n\n  assert(state.use === null);\n  state.use = item;\n\n  return this;\n};\n\nNode.prototype.optional = function optional() {\n  var state = this._baseState;\n\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.def = function def(val) {\n  var state = this._baseState;\n\n  assert(state['default'] === null);\n  state['default'] = val;\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.explicit = function explicit(num) {\n  var state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.explicit = num;\n\n  return this;\n};\n\nNode.prototype.implicit = function implicit(num) {\n  var state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.implicit = num;\n\n  return this;\n};\n\nNode.prototype.obj = function obj() {\n  var state = this._baseState;\n  var args = Array.prototype.slice.call(arguments);\n\n  state.obj = true;\n\n  if (args.length !== 0)\n    this._useArgs(args);\n\n  return this;\n};\n\nNode.prototype.key = function key(newKey) {\n  var state = this._baseState;\n\n  assert(state.key === null);\n  state.key = newKey;\n\n  return this;\n};\n\nNode.prototype.any = function any() {\n  var state = this._baseState;\n\n  state.any = true;\n\n  return this;\n};\n\nNode.prototype.choice = function choice(obj) {\n  var state = this._baseState;\n\n  assert(state.choice === null);\n  state.choice = obj;\n  this._useArgs(Object.keys(obj).map(function(key) {\n    return obj[key];\n  }));\n\n  return this;\n};\n\n//\n// Decoding\n//\n\nNode.prototype._decode = function decode(input) {\n  var state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return input.wrapResult(state.children[0]._decode(input));\n\n  var result = state['default'];\n  var present = true;\n\n  var prevKey;\n  if (state.key !== null)\n    prevKey = input.enterKey(state.key);\n\n  // Check if tag is there\n  if (state.optional) {\n    present = this._peekTag(\n      input,\n      state.explicit !== null ? state.explicit :\n          state.implicit !== null ? state.implicit :\n              state.tag || 0\n    );\n    if (input.isError(present))\n      return present;\n  }\n\n  // Push object on stack\n  var prevObj;\n  if (state.obj && present)\n    prevObj = input.enterObject();\n\n  if (present) {\n    // Unwrap explicit values\n    if (state.explicit !== null) {\n      var explicit = this._decodeTag(input, state.explicit);\n      if (input.isError(explicit))\n        return explicit;\n      input = explicit;\n    }\n\n    // Unwrap implicit and normal values\n    if (state.use === null && state.choice === null) {\n      if (state.any)\n        var save = input.save();\n      var body = this._decodeTag(\n        input,\n        state.implicit !== null ? state.implicit : state.tag,\n        state.any\n      );\n      if (input.isError(body))\n        return body;\n\n      if (state.any)\n        result = input.raw(save);\n      else\n        input = body;\n    }\n\n    // Select proper method for tag\n    if (state.any)\n      result = result;\n    else if (state.choice === null)\n      result = this._decodeGeneric(state.tag, input);\n    else\n      result = this._decodeChoice(input);\n\n    if (input.isError(result))\n      return result;\n\n    // Decode children\n    if (!state.any && state.choice === null && state.children !== null) {\n      var fail = state.children.some(function decodeChildren(child) {\n        // NOTE: We are ignoring errors here, to let parser continue with other\n        // parts of encoded data\n        child._decode(input);\n      });\n      if (fail)\n        return err;\n    }\n  }\n\n  // Pop object\n  if (state.obj && present)\n    result = input.leaveObject(prevObj);\n\n  // Set key\n  if (state.key !== null && (result !== null || present === true))\n    input.leaveKey(prevKey, state.key, result);\n\n  return result;\n};\n\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input) {\n  var state = this._baseState;\n\n  if (tag === 'seq' || tag === 'set')\n    return null;\n  if (tag === 'seqof' || tag === 'setof')\n    return this._decodeList(input, tag, state.args[0]);\n  else if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')\n    return this._decodeStr(input, tag);\n  else if (tag === 'objid' && state.args)\n    return this._decodeObjid(input, state.args[0], state.args[1]);\n  else if (tag === 'objid')\n    return this._decodeObjid(input, null, null);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._decodeTime(input, tag);\n  else if (tag === 'null_')\n    return this._decodeNull(input);\n  else if (tag === 'bool')\n    return this._decodeBool(input);\n  else if (tag === 'int' || tag === 'enum')\n    return this._decodeInt(input, state.args && state.args[0]);\n  else if (state.use !== null)\n    return this._getUse(state.use, input._reporterState.obj)._decode(input);\n  else\n    return input.error('unknown tag: ' + tag);\n\n  return null;\n};\n\nNode.prototype._getUse = function _getUse(entity, obj) {\n\n  var state = this._baseState;\n  // Create altered use decoder if implicit is set\n  state.useDecoder = this._use(entity, obj);\n  assert(state.useDecoder._baseState.parent === null);\n  state.useDecoder = state.useDecoder._baseState.children[0];\n  if (state.implicit !== state.useDecoder._baseState.implicit) {\n    state.useDecoder = state.useDecoder.clone();\n    state.useDecoder._baseState.implicit = state.implicit;\n  }\n  return state.useDecoder;\n};\n\nNode.prototype._decodeChoice = function decodeChoice(input) {\n  var state = this._baseState;\n  var result = null;\n  var match = false;\n\n  Object.keys(state.choice).some(function(key) {\n    var save = input.save();\n    var node = state.choice[key];\n    try {\n      var value = node._decode(input);\n      if (input.isError(value))\n        return false;\n\n      result = { type: key, value: value };\n      match = true;\n    } catch (e) {\n      input.restore(save);\n      return false;\n    }\n    return true;\n  }, this);\n\n  if (!match)\n    return input.error('Choice not matched');\n\n  return result;\n};\n\n//\n// Encoding\n//\n\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n  return new EncoderBuffer(data, this.reporter);\n};\n\nNode.prototype._encode = function encode(data, reporter, parent) {\n  var state = this._baseState;\n  if (state['default'] !== null && state['default'] === data)\n    return;\n\n  var result = this._encodeValue(data, reporter, parent);\n  if (result === undefined)\n    return;\n\n  if (this._skipDefault(result, reporter, parent))\n    return;\n\n  return result;\n};\n\nNode.prototype._encodeValue = function encode(data, reporter, parent) {\n  var state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return state.children[0]._encode(data, reporter || new Reporter());\n\n  var result = null;\n  var present = true;\n\n  // Set reporter to share it with a child class\n  this.reporter = reporter;\n\n  // Check if data is there\n  if (state.optional && data === undefined) {\n    if (state['default'] !== null)\n      data = state['default']\n    else\n      return;\n  }\n\n  // For error reporting\n  var prevKey;\n\n  // Encode children first\n  var content = null;\n  var primitive = false;\n  if (state.any) {\n    // Anything that was given is translated to buffer\n    result = this._createEncoderBuffer(data);\n  } else if (state.choice) {\n    result = this._encodeChoice(data, reporter);\n  } else if (state.children) {\n    content = state.children.map(function(child) {\n      if (child._baseState.tag === 'null_')\n        return child._encode(null, reporter, data);\n\n      if (child._baseState.key === null)\n        return reporter.error('Child should have a key');\n      var prevKey = reporter.enterKey(child._baseState.key);\n\n      if (typeof data !== 'object')\n        return reporter.error('Child expected, but input is not object');\n\n      var res = child._encode(data[child._baseState.key], reporter, data);\n      reporter.leaveKey(prevKey);\n\n      return res;\n    }, this).filter(function(child) {\n      return child;\n    });\n\n    content = this._createEncoderBuffer(content);\n  } else {\n    if (state.tag === 'seqof' || state.tag === 'setof') {\n      // TODO(indutny): this should be thrown on DSL level\n      if (!(state.args && state.args.length === 1))\n        return reporter.error('Too many args for : ' + state.tag);\n\n      if (!Array.isArray(data))\n        return reporter.error('seqof/setof, but data is not Array');\n\n      var child = this.clone();\n      child._baseState.implicit = null;\n      content = this._createEncoderBuffer(data.map(function(item) {\n        var state = this._baseState;\n\n        return this._getUse(state.args[0], data)._encode(item, reporter);\n      }, child));\n    } else if (state.use !== null) {\n      result = this._getUse(state.use, parent)._encode(data, reporter);\n    } else {\n      content = this._encodePrimitive(state.tag, data);\n      primitive = true;\n    }\n  }\n\n  // Encode data itself\n  var result;\n  if (!state.any && state.choice === null) {\n    var tag = state.implicit !== null ? state.implicit : state.tag;\n    var cls = state.implicit === null ? 'universal' : 'context';\n\n    if (tag === null) {\n      if (state.use === null)\n        reporter.error('Tag could be ommited only for .use()');\n    } else {\n      if (state.use === null)\n        result = this._encodeComposite(tag, primitive, cls, content);\n    }\n  }\n\n  // Wrap in explicit\n  if (state.explicit !== null)\n    result = this._encodeComposite(state.explicit, false, 'context', result);\n\n  return result;\n};\n\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {\n  var state = this._baseState;\n\n  var node = state.choice[data.type];\n  if (!node) {\n    assert(\n        false,\n        data.type + ' not found in ' +\n            JSON.stringify(Object.keys(state.choice)));\n  }\n  return node._encode(data.value, reporter);\n};\n\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n  var state = this._baseState;\n\n  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')\n    return this._encodeStr(data, tag);\n  else if (tag === 'objid' && state.args)\n    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n  else if (tag === 'objid')\n    return this._encodeObjid(data, null, null);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._encodeTime(data, tag);\n  else if (tag === 'null_')\n    return this._encodeNull();\n  else if (tag === 'int' || tag === 'enum')\n    return this._encodeInt(data, state.args && state.reverseArgs[0]);\n  else if (tag === 'bool')\n    return this._encodeBool(data);\n  else\n    throw new Error('Unsupported tag: ' + tag);\n};\n\n},{\"../base\":58,\"minimalistic-assert\":67}],60:[function(require,module,exports){\nvar inherits = require('inherits');\n\nfunction Reporter(options) {\n  this._reporterState = {\n    obj: null,\n    path: [],\n    options: options || {},\n    errors: []\n  };\n}\nexports.Reporter = Reporter;\n\nReporter.prototype.isError = function isError(obj) {\n  return obj instanceof ReporterError;\n};\n\nReporter.prototype.enterKey = function enterKey(key) {\n  return this._reporterState.path.push(key);\n};\n\nReporter.prototype.leaveKey = function leaveKey(index, key, value) {\n  var state = this._reporterState;\n\n  state.path = state.path.slice(0, index - 1);\n  if (state.obj !== null)\n    state.obj[key] = value;\n};\n\nReporter.prototype.enterObject = function enterObject() {\n  var state = this._reporterState;\n\n  var prev = state.obj;\n  state.obj = {};\n  return prev;\n};\n\nReporter.prototype.leaveObject = function leaveObject(prev) {\n  var state = this._reporterState;\n\n  var now = state.obj;\n  state.obj = prev;\n  return now;\n};\n\nReporter.prototype.error = function error(msg) {\n  var err;\n  var state = this._reporterState;\n\n  var inherited = msg instanceof ReporterError;\n  if (inherited) {\n    err = msg;\n  } else {\n    err = new ReporterError(state.path.map(function(elem) {\n      return '[' + JSON.stringify(elem) + ']';\n    }).join(''), msg.message || msg, msg.stack);\n  }\n\n  if (!state.options.partial)\n    throw err;\n\n  if (!inherited)\n    state.errors.push(err);\n\n  return err;\n};\n\nReporter.prototype.wrapResult = function wrapResult(result) {\n  var state = this._reporterState;\n  if (!state.options.partial)\n    return result;\n\n  return {\n    result: this.isError(result) ? null : result,\n    errors: state.errors\n  };\n};\n\nfunction ReporterError(path, msg) {\n  this.path = path;\n  this.rethrow(msg);\n};\ninherits(ReporterError, Error);\n\nReporterError.prototype.rethrow = function rethrow(msg) {\n  this.message = msg + ' at: ' + (this.path || '(shallow)');\n  Error.captureStackTrace(this, ReporterError);\n\n  return this;\n};\n\n},{\"inherits\":144}],61:[function(require,module,exports){\nvar constants = require('../constants');\n\nexports.tagClass = {\n  0: 'universal',\n  1: 'application',\n  2: 'context',\n  3: 'private'\n};\nexports.tagClassByName = constants._reverse(exports.tagClass);\n\nexports.tag = {\n  0x00: 'end',\n  0x01: 'bool',\n  0x02: 'int',\n  0x03: 'bitstr',\n  0x04: 'octstr',\n  0x05: 'null_',\n  0x06: 'objid',\n  0x07: 'objDesc',\n  0x08: 'external',\n  0x09: 'real',\n  0x0a: 'enum',\n  0x0b: 'embed',\n  0x0c: 'utf8str',\n  0x0d: 'relativeOid',\n  0x10: 'seq',\n  0x11: 'set',\n  0x12: 'numstr',\n  0x13: 'printstr',\n  0x14: 't61str',\n  0x15: 'videostr',\n  0x16: 'ia5str',\n  0x17: 'utctime',\n  0x18: 'gentime',\n  0x19: 'graphstr',\n  0x1a: 'iso646str',\n  0x1b: 'genstr',\n  0x1c: 'unistr',\n  0x1d: 'charstr',\n  0x1e: 'bmpstr'\n};\nexports.tagByName = constants._reverse(exports.tag);\n\n},{\"../constants\":62}],62:[function(require,module,exports){\nvar constants = exports;\n\n// Helper\nconstants._reverse = function reverse(map) {\n  var res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    var value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n};\n\nconstants.der = require('./der');\n\n},{\"./der\":61}],63:[function(require,module,exports){\nvar inherits = require('inherits');\n\nvar asn1 = require('../../asn1');\nvar base = asn1.base;\nvar bignum = asn1.bignum;\n\n// Import DER constants\nvar der = asn1.constants.der;\n\nfunction DERDecoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n};\nmodule.exports = DERDecoder;\n\nDERDecoder.prototype.decode = function decode(data, options) {\n  if (!(data instanceof base.DecoderBuffer))\n    data = new base.DecoderBuffer(data, options);\n\n  return this.tree._decode(data, options);\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  base.Node.call(this, 'der', parent);\n}\ninherits(DERNode, base.Node);\n\nDERNode.prototype._peekTag = function peekTag(buffer, tag) {\n  if (buffer.isEmpty())\n    return false;\n\n  var state = buffer.save();\n  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  buffer.restore(state);\n\n  return decodedTag.tag === tag || decodedTag.tagStr === tag;\n};\n\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n  var decodedTag = derDecodeTag(buffer,\n                                'Failed to decode tag of \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  var len = derDecodeLen(buffer,\n                         decodedTag.primitive,\n                         'Failed to get length of \"' + tag + '\"');\n\n  // Failure\n  if (buffer.isError(len))\n    return len;\n\n  if (!any &&\n      decodedTag.tag !== tag &&\n      decodedTag.tagStr !== tag &&\n      decodedTag.tagStr + 'of' !== tag) {\n    return buffer.error('Failed to match tag: \"' + tag + '\"');\n  }\n\n  if (decodedTag.primitive || len !== null)\n    return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n\n  // Indefinite length... find END tag\n  var state = buffer.start();\n  var res = this._skipUntilEnd(\n      buffer,\n      'Failed to skip indefinite length body: \"' + this.tag + '\"');\n  if (buffer.isError(res))\n    return res;\n\n  return buffer.cut(state);\n};\n\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n  while (true) {\n    var tag = derDecodeTag(buffer, fail);\n    if (buffer.isError(tag))\n      return tag;\n    var len = derDecodeLen(buffer, tag.primitive, fail);\n    if (buffer.isError(len))\n      return len;\n\n    var res;\n    if (tag.primitive || len !== null)\n      res = buffer.skip(len)\n    else\n      res = this._skipUntilEnd(buffer, fail);\n\n    // Failure\n    if (buffer.isError(res))\n      return res;\n\n    if (tag.tagStr === 'end')\n      break;\n  }\n};\n\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {\n  var result = [];\n  while (!buffer.isEmpty()) {\n    var possibleEnd = this._peekTag(buffer, 'end');\n    if (buffer.isError(possibleEnd))\n      return possibleEnd;\n\n    var res = decoder.decode(buffer, 'der');\n    if (buffer.isError(res) && possibleEnd)\n      break;\n    result.push(res);\n  }\n  return result;\n};\n\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n  if (tag === 'octstr') {\n    return buffer.raw();\n  } else if (tag === 'bitstr') {\n    var unused = buffer.readUInt8();\n    if (buffer.isError(unused))\n      return unused;\n\n    return { unused: unused, data: buffer.raw() };\n  } else if (tag === 'ia5str') {\n    return buffer.raw().toString();\n  } else {\n    return this.error('Decoding of string type: ' + tag + ' unsupported');\n  }\n};\n\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n  var identifiers = [];\n  var ident = 0;\n  while (!buffer.isEmpty()) {\n    var subident = buffer.readUInt8();\n    ident <<= 7;\n    ident |= subident & 0x7f;\n    if ((subident & 0x80) === 0) {\n      identifiers.push(ident);\n      ident = 0;\n    }\n  }\n  if (subident & 0x80)\n    identifiers.push(ident);\n\n  var first = (identifiers[0] / 40) | 0;\n  var second = identifiers[0] % 40;\n\n  if (relative)\n    result = identifiers;\n  else\n    result = [first, second].concat(identifiers.slice(1));\n\n  if (values)\n    result = values[result.join(' ')];\n\n  return result;\n};\n\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n  var str = buffer.raw().toString();\n  if (tag === 'gentime') {\n    var year = str.slice(0, 4) | 0;\n    var mon = str.slice(4, 6) | 0;\n    var day = str.slice(6, 8) | 0;\n    var hour = str.slice(8, 10) | 0;\n    var min = str.slice(10, 12) | 0;\n    var sec = str.slice(12, 14) | 0;\n  } else if (tag === 'utctime') {\n    var year = str.slice(0, 2) | 0;\n    var mon = str.slice(2, 4) | 0;\n    var day = str.slice(4, 6) | 0;\n    var hour = str.slice(6, 8) | 0;\n    var min = str.slice(8, 10) | 0;\n    var sec = str.slice(10, 12) | 0;\n    if (year < 70)\n      year = 2000 + year;\n    else\n      year = 1900 + year;\n  } else {\n    return this.error('Decoding ' + tag + ' time is not supported yet');\n  }\n\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\n\nDERNode.prototype._decodeNull = function decodeNull(buffer) {\n  return null;\n};\n\nDERNode.prototype._decodeBool = function decodeBool(buffer) {\n  var res = buffer.readUInt8();\n  if (buffer.isError(res))\n    return res;\n  else\n    return res !== 0;\n};\n\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n  var res = 0;\n\n  // Bigint, return as it is (assume big endian)\n  var raw = buffer.raw();\n  if (raw.length > 3)\n    return new bignum(raw);\n\n  while (!buffer.isEmpty()) {\n    res <<= 8;\n    var i = buffer.readUInt8();\n    if (buffer.isError(i))\n      return i;\n    res |= i;\n  }\n\n  if (values)\n    res = values[res] || res;\n\n  return res;\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getDecoder('der').tree;\n};\n\n// Utility methods\n\nfunction derDecodeTag(buf, fail) {\n  var tag = buf.readUInt8(fail);\n  if (buf.isError(tag))\n    return tag;\n\n  var cls = der.tagClass[tag >> 6];\n  var primitive = (tag & 0x20) === 0;\n\n  // Multi-octet tag - load\n  if ((tag & 0x1f) === 0x1f) {\n    var oct = tag;\n    tag = 0;\n    while ((oct & 0x80) === 0x80) {\n      oct = buf.readUInt8(fail);\n      if (buf.isError(oct))\n        return oct;\n\n      tag <<= 7;\n      tag |= oct & 0x7f;\n    }\n  } else {\n    tag &= 0x1f;\n  }\n  var tagStr = der.tag[tag];\n\n  return {\n    cls: cls,\n    primitive: primitive,\n    tag: tag,\n    tagStr: tagStr\n  };\n}\n\nfunction derDecodeLen(buf, primitive, fail) {\n  var len = buf.readUInt8(fail);\n  if (buf.isError(len))\n    return len;\n\n  // Indefinite form\n  if (!primitive && len === 0x80)\n    return null;\n\n  // Definite form\n  if ((len & 0x80) === 0) {\n    // Short form\n    return len;\n  }\n\n  // Long form\n  var num = len & 0x7f;\n  if (num >= 4)\n    return buf.error('length octect is too long');\n\n  len = 0;\n  for (var i = 0; i < num; i++) {\n    len <<= 8;\n    var j = buf.readUInt8(fail);\n    if (buf.isError(j))\n      return j;\n    len |= j;\n  }\n\n  return len;\n}\n\n},{\"../../asn1\":55,\"inherits\":144}],64:[function(require,module,exports){\nvar decoders = exports;\n\ndecoders.der = require('./der');\n\n},{\"./der\":63}],65:[function(require,module,exports){\nvar inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar asn1 = require('../../asn1');\nvar base = asn1.base;\nvar bignum = asn1.bignum;\n\n// Import DER constants\nvar der = asn1.constants.der;\n\nfunction DEREncoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n};\nmodule.exports = DEREncoder;\n\nDEREncoder.prototype.encode = function encode(data, reporter) {\n  return this.tree._encode(data, reporter).join();\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  base.Node.call(this, 'der', parent);\n}\ninherits(DERNode, base.Node);\n\nDERNode.prototype._encodeComposite = function encodeComposite(tag,\n                                                              primitive,\n                                                              cls,\n                                                              content) {\n  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n\n  // Short form\n  if (content.length < 0x80) {\n    var header = new Buffer(2);\n    header[0] = encodedTag;\n    header[1] = content.length;\n    return this._createEncoderBuffer([ header, content ]);\n  }\n\n  // Long form\n  // Count octets required to store length\n  var lenOctets = 1;\n  for (var i = content.length; i >= 0x100; i >>= 8)\n    lenOctets++;\n\n  var header = new Buffer(1 + 1 + lenOctets);\n  header[0] = encodedTag;\n  header[1] = 0x80 | lenOctets;\n\n  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)\n    header[i] = j & 0xff;\n\n  return this._createEncoderBuffer([ header, content ]);\n};\n\nDERNode.prototype._encodeStr = function encodeStr(str, tag) {\n  if (tag === 'octstr')\n    return this._createEncoderBuffer(str);\n  else if (tag === 'bitstr')\n    return this._createEncoderBuffer([ str.unused | 0, str.data ]);\n  else if (tag === 'ia5str')\n    return this._createEncoderBuffer(str);\n  return this.reporter.error('Encoding of string type: ' + tag +\n                             ' unsupported');\n};\n\nDERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n  if (typeof id === 'string') {\n    if (!values)\n      return this.reporter.error('string objid given, but no values map found');\n    if (!values.hasOwnProperty(id))\n      return this.reporter.error('objid not found in values map');\n    id = values[id].split(/\\s+/g);\n    for (var i = 0; i < id.length; i++)\n      id[i] |= 0;\n  } else if (Array.isArray(id)) {\n    id = id.slice();\n  }\n\n  if (!Array.isArray(id)) {\n    return this.reporter.error('objid() should be either array or string, ' +\n                               'got: ' + JSON.stringify(id));\n  }\n\n  if (!relative) {\n    if (id[1] >= 40)\n      return this.reporter.error('Second objid identifier OOB');\n    id.splice(0, 2, id[0] * 40 + id[1]);\n  }\n\n  // Count number of octets\n  var size = 0;\n  for (var i = 0; i < id.length; i++) {\n    var ident = id[i];\n    for (size++; ident >= 0x80; ident >>= 7)\n      size++;\n  }\n\n  var objid = new Buffer(size);\n  var offset = objid.length - 1;\n  for (var i = id.length - 1; i >= 0; i--) {\n    var ident = id[i];\n    objid[offset--] = ident & 0x7f;\n    while ((ident >>= 7) > 0)\n      objid[offset--] = 0x80 | (ident & 0x7f);\n  }\n\n  return this._createEncoderBuffer(objid);\n};\n\nfunction two(num) {\n  if (num <= 10)\n    return '0' + num;\n  else\n    return num;\n}\n\nDERNode.prototype._encodeTime = function encodeTime(time, tag) {\n  var str;\n  var date = new Date(time);\n\n  if (tag === 'gentime') {\n    str = [\n      date.getFullYear(),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else if (tag === 'utctime') {\n    str = [\n      date.getFullYear() % 100,\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else {\n    this.reporter.error('Encoding ' + tag + ' time is not supported yet');\n  }\n\n  return this._encodeStr(str, 'octstr');\n};\n\nDERNode.prototype._encodeNull = function encodeNull() {\n  return this._createEncoderBuffer('');\n};\n\nDERNode.prototype._encodeInt = function encodeInt(num, values) {\n  if (typeof num === 'string') {\n    if (!values)\n      return this.reporter.error('String int or enum given, but no values map');\n    if (!values.hasOwnProperty(num)) {\n      return this.reporter.error('Values map doesn\\'t contain: ' +\n                                 JSON.stringify(num));\n    }\n    num = values[num];\n  }\n\n  // Bignum, assume big endian\n  if (bignum !== null && num instanceof bignum) {\n    var numArray = num.toArray();\n    if(num.sign === false && numArray[0] & 0x80) {\n      numArray.unshift(0);\n    }\n    num = new Buffer(numArray);\n  }\n\n  if (Buffer.isBuffer(num)) {\n    var size = num.length;\n    if (num.length === 0)\n      size++;\n\n    var out = new Buffer(size);\n    num.copy(out);\n    if (num.length === 0)\n      out[0] = 0\n    return this._createEncoderBuffer(out);\n  }\n\n  if (num < 0x80)\n    return this._createEncoderBuffer(num);\n\n  if (num < 0x100)\n    return this._createEncoderBuffer([0, num]);\n\n  var size = 1;\n  for (var i = num; i >= 0x100; i >>= 8)\n    size++;\n\n  var out = new Array(size);\n  for (var i = out.length - 1; i >= 0; i--) {\n    out[i] = num & 0xff;\n    num >>= 8;\n  }\n  if(out[0] & 0x80) {\n    out.unshift(0);\n  }\n\n  return this._createEncoderBuffer(new Buffer(out));\n};\n\nDERNode.prototype._encodeBool = function encodeBool(value) {\n  return this._createEncoderBuffer(value ? 0xff : 0);\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getEncoder('der').tree;\n};\n\nDERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n  var state = this._baseState;\n  var i;\n  if (state['default'] === null)\n    return false;\n\n  var data = dataBuffer.join();\n  if (state.defaultBuffer === undefined)\n    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();\n\n  if (data.length !== state.defaultBuffer.length)\n    return false;\n\n  for (i=0; i < data.length; i++)\n    if (data[i] !== state.defaultBuffer[i])\n      return false;\n\n  return true;\n};\n\n// Utility methods\n\nfunction encodeTag(tag, primitive, cls, reporter) {\n  var res;\n\n  if (tag === 'seqof')\n    tag = 'seq';\n  else if (tag === 'setof')\n    tag = 'set';\n\n  if (der.tagByName.hasOwnProperty(tag))\n    res = der.tagByName[tag];\n  else if (typeof tag === 'number' && (tag | 0) === tag)\n    res = tag;\n  else\n    return reporter.error('Unknown tag: ' + tag);\n\n  if (res >= 0x1f)\n    return reporter.error('Multi-octet tag encoding unsupported');\n\n  if (!primitive)\n    res |= 0x20;\n\n  res |= (der.tagClassByName[cls || 'universal'] << 6);\n\n  return res;\n}\n\n},{\"../../asn1\":55,\"buffer\":2,\"inherits\":144}],66:[function(require,module,exports){\nvar encoders = exports;\n\nencoders.der = require('./der');\n\n},{\"./der\":65}],67:[function(require,module,exports){\nmodule.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n\n},{}],68:[function(require,module,exports){\n(function (Buffer){\nvar createHmac = require('create-hmac')\n\nexports.pbkdf2 = pbkdf2\nfunction pbkdf2 (password, salt, iterations, keylen, digest, callback) {\n  if (typeof digest === 'function') {\n    callback = digest\n    digest = undefined\n  }\n\n  if (typeof callback !== 'function') {\n    throw new Error('No callback provided to pbkdf2')\n  }\n\n  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)\n  setTimeout(function () {\n    callback(undefined, result)\n  })\n}\n\nexports.pbkdf2Sync = pbkdf2Sync\nfunction pbkdf2Sync (password, salt, iterations, keylen, digest) {\n  if (typeof iterations !== 'number')\n    throw new TypeError('Iterations not a number')\n\n  if (iterations < 0)\n    throw new TypeError('Bad iterations')\n\n  if (typeof keylen !== 'number')\n    throw new TypeError('Key length not a number')\n\n  if (keylen < 0)\n    throw new TypeError('Bad key length')\n\n  digest = digest || 'sha1'\n\n  if (!Buffer.isBuffer(password)) password = new Buffer(password)\n  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)\n\n  var hLen\n  var l = 1\n  var DK = new Buffer(keylen)\n  var block1 = new Buffer(salt.length + 4)\n  salt.copy(block1, 0, 0, salt.length)\n\n  var r\n  var T\n\n  for (var i = 1; i <= l; i++) {\n    block1.writeUInt32BE(i, salt.length)\n    var U = createHmac(digest, password).update(block1).digest()\n\n    if (!hLen) {\n      hLen = U.length\n      T = new Buffer(hLen)\n      l = Math.ceil(keylen / hLen)\n      r = keylen - (l - 1) * hLen\n\n      if (keylen > (Math.pow(2, 32) - 1) * hLen)\n        throw new TypeError('keylen exceeds maximum length')\n    }\n\n    U.copy(T, 0, 0, hLen)\n\n    for (var j = 1; j < iterations; j++) {\n      U = createHmac(digest, password).update(U).digest()\n\n      for (var k = 0; k < hLen; k++) {\n        T[k] ^= U[k]\n      }\n    }\n\n    var destPos = (i - 1) * hLen\n    var len = (i === l ? r : hLen)\n    T.copy(DK, destPos, 0, len)\n  }\n\n  return DK\n}\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2,\"create-hmac\":106}],69:[function(require,module,exports){\n(function (Buffer){\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar parseKeys = require('parse-asn1')\nvar BN = require('bn.js')\nvar elliptic = require('elliptic')\nvar crt = require('browserify-rsa')\nvar createHmac = require('create-hmac')\nvar curves = require('./curves')\n\nmodule.exports = sign\nfunction sign (hash, key, hashType, signType) {\n  var priv = parseKeys(key)\n  if (priv.curve) {\n    if (signType !== 'ecdsa') {\n      throw new Error('wrong public key type')\n    }\n    return ecSign(hash, priv)\n  } else if (priv.type === 'dsa') {\n    return dsaSign(hash, priv, hashType)\n    if (signType !== 'dsa') {\n      throw new Error('wrong public key type')\n    }\n  } else {\n    if (signType !== 'rsa') {\n      throw new Error('wrong public key type')\n    }\n  }\n  var len = priv.modulus.byteLength()\n  var pad = [ 0, 1 ]\n  while (hash.length + pad.length + 1 < len) {\n    pad.push(0xff)\n  }\n  pad.push(0x00)\n  var i = -1\n  while (++i < hash.length) {\n    pad.push(hash[i])\n  }\n\n  var out = crt(pad, priv)\n  return out\n}\nfunction ecSign (hash, priv) {\n  var curveId = curves[priv.curve.join('.')]\n  if (!curveId)\n    throw new Error('unknown curve ' + priv.curve.join('.'))\n\n  var curve = new elliptic.ec(curveId)\n\n  var key = curve.genKeyPair()\n  key._importPrivate(priv.privateKey)\n  var out = key.sign(hash)\n  return new Buffer(out.toDER())\n}\nfunction dsaSign (hash, priv, algo) {\n  var x = priv.params.priv_key\n  var p = priv.params.p\n  var q = priv.params.q\n  var montq = BN.mont(q)\n  var g = priv.params.g\n  var r = new BN(0)\n  var k\n  var H = bits2int(hash, q).mod(q)\n  var s = false\n  var kv = getKey(x, q, hash, algo)\n  while (s === false) {\n    k = makeKey(q, kv, algo)\n    r = makeR(g, k, p, q)\n    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)\n    if (!s.cmpn(0)) {\n      s = false\n      r = new BN(0)\n    }\n  }\n  return toDER(r, s)\n}\nfunction toDER (r, s) {\n  r = r.toArray()\n  s = s.toArray()\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r)\n  // Pad values\n  if (s[0] & 0x80)\n    s = [0].concat(s)\n\n  var total = r.length + s.length + 4\n  var res = [ 0x30, total, 0x02, r.length ]\n  res = res.concat(r, [ 0x02, s.length ], s)\n  return new Buffer(res)\n}\nmodule.exports.getKey = getKey\nfunction getKey (x, q, hash, algo) {\n  x = new Buffer(x.toArray())\n  if (x.length < q.byteLength()) {\n    var zeros = new Buffer(q.byteLength() - x.length)\n    zeros.fill(0)\n    x = Buffer.concat([zeros, x])\n  }\n  var hlen = hash.length\n  var hbits = bits2octets(hash, q)\n  var v = new Buffer(hlen)\n  v.fill(1)\n  var k = new Buffer(hlen)\n  k.fill(0)\n  k = createHmac(algo, k)\n    .update(v)\n    .update(new Buffer([0]))\n    .update(x)\n    .update(hbits)\n    .digest()\n  v = createHmac(algo, k)\n    .update(v)\n    .digest()\n  k = createHmac(algo, k)\n    .update(v)\n    .update(new Buffer([1]))\n    .update(x)\n    .update(hbits)\n    .digest()\n  v = createHmac(algo, k)\n    .update(v)\n    .digest()\n  return {\n    k: k,\n    v: v\n  }\n}\nfunction bits2int (obits, q) {\n  var bits = new BN(obits)\n  var shift = (obits.length << 3) - q.bitLength()\n  if (shift > 0) {\n    bits.ishrn(shift)\n  }\n  return bits\n}\nfunction bits2octets (bits, q) {\n  bits = bits2int(bits, q)\n  bits = bits.mod(q)\n  var out = new Buffer(bits.toArray())\n  if (out.length < q.byteLength()) {\n    var zeros = new Buffer(q.byteLength() - out.length)\n    zeros.fill(0)\n    out = Buffer.concat([zeros, out])\n  }\n  return out\n}\nmodule.exports.makeKey = makeKey\nfunction makeKey (q, kv, algo) {\n  var t\n  var k\n  while (true) {\n    t = new Buffer('')\n    while (t.length * 8 < q.bitLength()) {\n      kv.v = createHmac(algo, kv.k)\n        .update(kv.v)\n        .digest()\n      t = Buffer.concat([t, kv.v])\n    }\n    k = bits2int(t, q)\n    kv.k =  createHmac(algo, kv.k)\n        .update(kv.v)\n        .update(new Buffer([0]))\n        .digest()\n    kv.v = createHmac(algo, kv.k)\n        .update(kv.v)\n        .digest()\n    if (k.cmp(q) === -1) {\n      return k\n    }\n  }\n}\nfunction makeR (g, k, p, q) {\n  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)\n}\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./curves\":27,\"bn.js\":28,\"browserify-rsa\":29,\"buffer\":2,\"create-hmac\":106,\"elliptic\":30,\"parse-asn1\":54}],70:[function(require,module,exports){\n(function (Buffer){\n'use strict'\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar parseKeys = require('parse-asn1')\nvar elliptic = require('elliptic')\nvar curves = require('./curves')\nvar BN = require('bn.js')\nmodule.exports = verify\n\nfunction verify (sig, hash, key, signType) {\n  var pub = parseKeys(key)\n  if (pub.type === 'ec') {\n    if (signType !== 'ecdsa') {\n      throw new Error('wrong public key type')\n    }\n    return ecVerify(sig, hash, pub)\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') {\n      throw new Error('wrong public key type')\n    }\n    return dsaVerify(sig, hash, pub)\n  } else {\n    if (signType !== 'rsa') {\n      throw new Error('wrong public key type')\n    }\n  }\n  var len = pub.modulus.byteLength()\n  var pad = [ 1 ]\n  var padNum = 0\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff)\n    padNum++\n  }\n  pad.push(0x00)\n  var i = -1\n  while (++i < hash.length) {\n    pad.push(hash[i])\n  }\n  pad = new Buffer(pad)\n  var red = BN.mont(pub.modulus)\n  sig = new BN(sig).toRed(red)\n\n  sig = sig.redPow(new BN(pub.publicExponent))\n\n  sig = new Buffer(sig.fromRed().toArray())\n  var out = 0\n  if (padNum < 8) {\n    out = 1\n  }\n  len = Math.min(sig.length, pad.length)\n  if (sig.length !== pad.length) {\n    out = 1\n  }\n\n  i = -1\n  while (++i < len) {\n    out |= (sig[i] ^ pad[i])\n  }\n  return out === 0\n}\nfunction ecVerify (sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\n  if (!curveId)\n    throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\n\n  var curve = new elliptic.ec(curveId)\n\n  var pubkey = pub.data.subjectPrivateKey.data\n  return curve.verify(hash.toString('hex'), sig.toString('hex'), pubkey.toString('hex'))\n}\nfunction dsaVerify (sig, hash, pub) {\n  var p = pub.data.p\n  var q = pub.data.q\n  var g = pub.data.g\n  var y = pub.data.pub_key\n  var unpacked = parseKeys.signature.decode(sig, 'der')\n  var s = unpacked.s\n  var r = unpacked.r\n  checkValue(s, q)\n  checkValue(r, q)\n  var montq = BN.mont(q)\n  var montp = BN.mont(p)\n  var w =  s.invm(q)\n  var v = g.toRed(montp)\n  .redPow(new BN(hash).mul(w).mod(q))\n  .fromRed()\n  .mul(\n    y.toRed(montp)\n    .redPow(r.mul(w).mod(q))\n    .fromRed()\n  ).mod(p).mod(q)\n  return !v.cmp(r)\n}\nfunction checkValue (b, q) {\n  if (b.cmpn(0) <= 0) {\n    throw new Error('invalid sig')\n  }\n  if (b.cmp(q) >= q) {\n    throw new Error('invalid sig')\n  }\n}\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./curves\":27,\"bn.js\":28,\"buffer\":2,\"elliptic\":30,\"parse-asn1\":54}],71:[function(require,module,exports){\n(function (Buffer){\nvar elliptic = require('elliptic');\nvar BN = require('bn.js');\n\nmodule.exports = function createECDH(curve) {\n\treturn new ECDH(curve);\n};\n\nvar aliases = {\n\tsecp256k1: {\n\t\tname: 'secp256k1',\n\t\tbyteLength: 32\n\t},\n\tsecp224r1: {\n\t\tname: 'p224',\n\t\tbyteLength: 28\n\t},\n\tprime256v1: {\n\t\tname: 'p256',\n\t\tbyteLength: 32\n\t},\n\tprime192v1: {\n\t\tname: 'p192',\n\t\tbyteLength: 24\n\t},\n\ted25519: {\n\t\tname: 'ed25519',\n\t\tbyteLength: 32\n\t}\n};\n\naliases.p224 = aliases.secp224r1;\naliases.p256 = aliases.secp256r1 = aliases.prime256v1;\naliases.p192 = aliases.secp192r1 = aliases.prime192v1;\n\nfunction ECDH(curve) {\n\tthis.curveType = aliases[curve];\n\tif (!this.curveType ) {\n\t\tthis.curveType = {\n\t\t\tname: curve\n\t\t};\n\t}\n\tthis.curve = new elliptic.ec(this.curveType.name);\n\tthis.keys = void 0;\n}\n\nECDH.prototype.generateKeys = function (enc, format) {\n\tthis.keys = this.curve.genKeyPair();\n\treturn this.getPublicKey(enc, format);\n};\n\nECDH.prototype.computeSecret = function (other, inenc, enc) {\n\tinenc = inenc || 'utf8';\n\tif (!Buffer.isBuffer(other)) {\n\t\tother = new Buffer(other, inenc);\n\t}\n\tother = new BN(other);\n\tother = other.toString(16);\n\tvar otherPub = this.curve.keyPair(other, 'hex').getPublic();\n\tvar out = otherPub.mul(this.keys.getPrivate()).getX();\n\treturn formatReturnValue(out, enc, this.curveType.byteLength);\n};\n\nECDH.prototype.getPublicKey = function (enc, format) {\n\tvar key = this.keys.getPublic(format === 'compressed', true);\n\tif (format === 'hybrid') {\n\t\tif (key[key.length - 1] % 2) {\n\t\t\tkey[0] = 7;\n\t\t} else {\n\t\t\tkey [0] = 6;\n\t\t}\n\t}\n\treturn formatReturnValue(key, enc);\n};\n\nECDH.prototype.getPrivateKey = function (enc) {\n\treturn formatReturnValue(this.keys.getPrivate(), enc);\n};\n\nECDH.prototype.setPublicKey = function (pub, enc) {\n\tenc = enc || 'utf8';\n\tif (!Buffer.isBuffer(pub)) {\n\t\tpub = new Buffer(pub, enc);\n\t}\n\tvar pkey = new BN(pub);\n\tpkey = pkey.toArray();\n\tthis.keys._importPublicHex(pkey);\n\treturn this;\n};\n\nECDH.prototype.setPrivateKey = function (priv, enc) {\n\tenc = enc || 'utf8';\n\tif (!Buffer.isBuffer(priv)) {\n\t\tpriv = new Buffer(priv, enc);\n\t}\n\tvar _priv = new BN(priv);\n\t_priv = _priv.toString(16);\n\tthis.keys._importPrivate(_priv);\n\treturn this;\n};\n\nfunction formatReturnValue(bn, enc, len) {\n\tif (!Array.isArray(bn)) {\n\t\tbn = bn.toArray();\n\t}\n\tvar buf = new Buffer(bn);\n\tif (len && buf.length < len) {\n\t\tvar zeros = new Buffer(len - buf.length);\n\t\tzeros.fill(0);\n\t\tbuf = Buffer.concat([zeros, buf]);\n\t}\n\tif (!enc) {\n\t\treturn buf;\n\t} else {\n\t\treturn buf.toString(enc);\n\t}\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"bn.js\":73,\"buffer\":2,\"elliptic\":74}],72:[function(require,module,exports){\nvar createECDH = require('crypto').createECDH;\n\nmodule.exports = createECDH || require('./browser');\n},{\"./browser\":71,\"crypto\":6}],73:[function(require,module,exports){\narguments[4][28][0].apply(exports,arguments)\n},{\"dup\":28}],74:[function(require,module,exports){\narguments[4][30][0].apply(exports,arguments)\n},{\"../package.json\":93,\"./elliptic/curve\":77,\"./elliptic/curves\":80,\"./elliptic/ec\":81,\"./elliptic/hmac-drbg\":84,\"./elliptic/utils\":85,\"brorand\":86,\"dup\":30}],75:[function(require,module,exports){\narguments[4][31][0].apply(exports,arguments)\n},{\"../../elliptic\":74,\"bn.js\":73,\"dup\":31}],76:[function(require,module,exports){\narguments[4][32][0].apply(exports,arguments)\n},{\"../../elliptic\":74,\"../curve\":77,\"bn.js\":73,\"dup\":32,\"inherits\":144}],77:[function(require,module,exports){\narguments[4][33][0].apply(exports,arguments)\n},{\"./base\":75,\"./edwards\":76,\"./mont\":78,\"./short\":79,\"dup\":33}],78:[function(require,module,exports){\narguments[4][34][0].apply(exports,arguments)\n},{\"../../elliptic\":74,\"../curve\":77,\"bn.js\":73,\"dup\":34,\"inherits\":144}],79:[function(require,module,exports){\narguments[4][35][0].apply(exports,arguments)\n},{\"../../elliptic\":74,\"../curve\":77,\"bn.js\":73,\"dup\":35,\"inherits\":144}],80:[function(require,module,exports){\narguments[4][36][0].apply(exports,arguments)\n},{\"../elliptic\":74,\"bn.js\":73,\"dup\":36,\"hash.js\":87}],81:[function(require,module,exports){\narguments[4][37][0].apply(exports,arguments)\n},{\"../../elliptic\":74,\"./key\":82,\"./signature\":83,\"bn.js\":73,\"dup\":37}],82:[function(require,module,exports){\narguments[4][38][0].apply(exports,arguments)\n},{\"../../elliptic\":74,\"bn.js\":73,\"dup\":38}],83:[function(require,module,exports){\narguments[4][39][0].apply(exports,arguments)\n},{\"../../elliptic\":74,\"bn.js\":73,\"dup\":39}],84:[function(require,module,exports){\narguments[4][40][0].apply(exports,arguments)\n},{\"../elliptic\":74,\"dup\":40,\"hash.js\":87}],85:[function(require,module,exports){\narguments[4][41][0].apply(exports,arguments)\n},{\"bn.js\":73,\"dup\":41}],86:[function(require,module,exports){\narguments[4][42][0].apply(exports,arguments)\n},{\"dup\":42}],87:[function(require,module,exports){\narguments[4][43][0].apply(exports,arguments)\n},{\"./hash/common\":88,\"./hash/hmac\":89,\"./hash/ripemd\":90,\"./hash/sha\":91,\"./hash/utils\":92,\"dup\":43}],88:[function(require,module,exports){\narguments[4][44][0].apply(exports,arguments)\n},{\"../hash\":87,\"dup\":44}],89:[function(require,module,exports){\narguments[4][45][0].apply(exports,arguments)\n},{\"../hash\":87,\"dup\":45}],90:[function(require,module,exports){\narguments[4][46][0].apply(exports,arguments)\n},{\"../hash\":87,\"dup\":46}],91:[function(require,module,exports){\narguments[4][47][0].apply(exports,arguments)\n},{\"../hash\":87,\"dup\":47}],92:[function(require,module,exports){\narguments[4][48][0].apply(exports,arguments)\n},{\"dup\":48,\"inherits\":144}],93:[function(require,module,exports){\narguments[4][49][0].apply(exports,arguments)\n},{\"dup\":49}],94:[function(require,module,exports){\n(function (Buffer){\n'use strict';\nvar inherits = require('inherits')\nvar md5 = require('./md5')\nvar rmd160 = require('ripemd160')\nvar sha = require('sha.js')\n\nvar Transform = require('stream').Transform\n\nfunction HashNoConstructor(hash) {\n  Transform.call(this)\n\n  this._hash = hash\n  this.buffers = []\n}\n\ninherits(HashNoConstructor, Transform)\n\nHashNoConstructor.prototype._transform = function (data, _, next) {\n  this.buffers.push(data)\n\n  next()\n}\n\nHashNoConstructor.prototype._flush = function (next) {\n  this.push(this.digest())\n  next()\n}\n\nHashNoConstructor.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    data = new Buffer(data, enc)\n  }\n\n  this.buffers.push(data)\n  return this\n}\n\nHashNoConstructor.prototype.digest = function (enc) {\n  var buf = Buffer.concat(this.buffers)\n  var r = this._hash(buf)\n  this.buffers = null\n\n  return enc ? r.toString(enc) : r\n}\n\nfunction Hash(hash) {\n  Transform.call(this)\n\n  this._hash = hash\n}\n\ninherits(Hash, Transform)\n\nHash.prototype._transform = function (data, enc, next) {\n  if (enc) data = new Buffer(data, enc)\n\n  this._hash.update(data)\n\n  next()\n}\n\nHash.prototype._flush = function (next) {\n  this.push(this._hash.digest())\n  this._hash = null\n\n  next()\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    data = new Buffer(data, enc)\n  }\n\n  this._hash.update(data)\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var outData = this._hash.digest()\n\n  return enc ? outData.toString(enc) : outData\n}\n\nmodule.exports = function createHash (alg) {\n  if ('md5' === alg) return new HashNoConstructor(md5)\n  if ('rmd160' === alg) return new HashNoConstructor(rmd160)\n\n  return new Hash(sha(alg))\n}\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./md5\":96,\"buffer\":2,\"inherits\":144,\"ripemd160\":97,\"sha.js\":99,\"stream\":158}],95:[function(require,module,exports){\n(function (Buffer){\n'use strict';\nvar intSize = 4;\nvar zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);\nvar chrsz = 8;\n\nfunction toArray(buf, bigEndian) {\n  if ((buf.length % intSize) !== 0) {\n    var len = buf.length + (intSize - (buf.length % intSize));\n    buf = Buffer.concat([buf, zeroBuffer], len);\n  }\n\n  var arr = [];\n  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;\n  for (var i = 0; i < buf.length; i += intSize) {\n    arr.push(fn.call(buf, i));\n  }\n  return arr;\n}\n\nfunction toBuffer(arr, size, bigEndian) {\n  var buf = new Buffer(size);\n  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;\n  for (var i = 0; i < arr.length; i++) {\n    fn.call(buf, arr[i], i * 4, true);\n  }\n  return buf;\n}\n\nfunction hash(buf, fn, hashSize, bigEndian) {\n  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);\n  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);\n  return toBuffer(arr, hashSize, bigEndian);\n}\nexports.hash = hash;\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2}],96:[function(require,module,exports){\n'use strict';\n/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\nvar helpers = require('./helpers');\n\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length\n */\nfunction core_md5(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << ((len) % 32);\n  x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n\n  for(var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n\n    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\n    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\n    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\n    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\n    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\n    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\n    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\n    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\n\n    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\n    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\n    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\n    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\n    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\n    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\n    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\n    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\n    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\n\n    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\n    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\n    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\n    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\n    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\n    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\n    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\n    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\n    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\n    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\n    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\n    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\n    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\n    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\n    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\n    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\n    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\n    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\n    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\n    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n  }\n  return Array(a, b, c, d);\n\n}\n\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\nfunction md5_cmn(q, a, b, x, s, t)\n{\n  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);\n}\nfunction md5_ff(a, b, c, d, x, s, t)\n{\n  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n}\nfunction md5_gg(a, b, c, d, x, s, t)\n{\n  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n}\nfunction md5_hh(a, b, c, d, x, s, t)\n{\n  return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction md5_ii(a, b, c, d, x, s, t)\n{\n  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bit_rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\nmodule.exports = function md5(buf) {\n  return helpers.hash(buf, core_md5, 16);\n};\n},{\"./helpers\":95}],97:[function(require,module,exports){\n(function (Buffer){\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/** @preserve\n(c) 2012 by Cédric Mesnil. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n// constants table\nvar zl = [\n    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]\n\nvar zr = [\n    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]\n\nvar sl = [\n     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]\n\nvar sr = [\n    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]\n\n\nvar hl =  [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]\nvar hr =  [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]\n\nfunction bytesToWords(bytes) {\n  var words = []\n  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n    words[b >>> 5] |= bytes[i] << (24 - b % 32)\n  }\n  return words\n}\n\nfunction wordsToBytes(words) {\n  var bytes = []\n  for (var b = 0; b < words.length * 32; b += 8) {\n    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)\n  }\n  return bytes\n}\n\nfunction processBlock(H, M, offset) {\n  // swap endian\n  for (var i = 0; i < 16; i++) {\n    var offset_i = offset + i;\n    var M_offset_i = M[offset_i]\n\n    // Swap\n    M[offset_i] = (\n        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n    )\n  }\n\n  // Working variables\n  var al, bl, cl, dl, el\n  var ar, br, cr, dr, er\n\n  ar = al = H[0]\n  br = bl = H[1]\n  cr = cl = H[2]\n  dr = dl = H[3]\n  er = el = H[4]\n\n  // computation\n  var t\n  for (var i = 0; i < 80; i += 1) {\n    t = (al +  M[offset+zl[i]])|0\n    if (i<16){\n        t +=  f1(bl,cl,dl) + hl[0]\n    } else if (i<32) {\n        t +=  f2(bl,cl,dl) + hl[1]\n    } else if (i<48) {\n        t +=  f3(bl,cl,dl) + hl[2]\n    } else if (i<64) {\n        t +=  f4(bl,cl,dl) + hl[3]\n    } else {// if (i<80) {\n        t +=  f5(bl,cl,dl) + hl[4]\n    }\n    t = t|0\n    t =  rotl(t,sl[i])\n    t = (t+el)|0\n    al = el\n    el = dl\n    dl = rotl(cl, 10)\n    cl = bl\n    bl = t\n\n    t = (ar + M[offset+zr[i]])|0\n    if (i<16) {\n      t +=  f5(br,cr,dr) + hr[0]\n    } else if (i<32) {\n      t +=  f4(br,cr,dr) + hr[1]\n    } else if (i<48) {\n      t +=  f3(br,cr,dr) + hr[2]\n    } else if (i<64) {\n      t +=  f2(br,cr,dr) + hr[3]\n    } else {// if (i<80) {\n      t +=  f1(br,cr,dr) + hr[4]\n    }\n\n    t = t|0\n    t =  rotl(t,sr[i]) \n    t = (t+er)|0\n    ar = er\n    er = dr\n    dr = rotl(cr, 10)\n    cr = br\n    br = t\n  }\n\n  // intermediate hash value\n  t    = (H[1] + cl + dr)|0\n  H[1] = (H[2] + dl + er)|0\n  H[2] = (H[3] + el + ar)|0\n  H[3] = (H[4] + al + br)|0\n  H[4] = (H[0] + bl + cr)|0\n  H[0] =  t\n}\n\nfunction f1(x, y, z) {\n  return ((x) ^ (y) ^ (z))\n}\n\nfunction f2(x, y, z) {\n  return (((x)&(y)) | ((~x)&(z)))\n}\n\nfunction f3(x, y, z) {\n  return (((x) | (~(y))) ^ (z))\n}\n\nfunction f4(x, y, z) {\n  return (((x) & (z)) | ((y)&(~(z))))\n}\n\nfunction f5(x, y, z) {\n  return ((x) ^ ((y) |(~(z))))\n}\n\nfunction rotl(x,n) {\n  return (x<<n) | (x>>>(32-n))\n}\n\nfunction ripemd160(message) {\n  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]\n\n  if (typeof message == 'string')\n    message = new Buffer(message, 'utf8')\n\n  var m = bytesToWords(message)\n\n  var nBitsLeft = message.length * 8\n  var nBitsTotal = message.length * 8\n\n  // Add padding\n  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)\n  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n  )\n\n  for (var i=0 ; i<m.length; i += 16) {\n    processBlock(H, m, i)\n  }\n\n  // swap endian\n  for (var i = 0; i < 5; i++) {\n      // shortcut\n    var H_i = H[i]\n\n    // Swap\n    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00)\n  }\n\n  var digestbytes = wordsToBytes(H)\n  return new Buffer(digestbytes)\n}\n\nmodule.exports = ripemd160\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2}],98:[function(require,module,exports){\n(function (Buffer){\n//prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n  this._s = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (\"string\" === typeof data) {\n    enc = enc || \"utf8\"\n    data = new Buffer(data, enc)\n  }\n\n  var l = this._len += data.length\n  var s = this._s || 0\n  var f = 0\n  var buffer = this._block\n\n  while (s < l) {\n    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))\n    var ch = (t - f)\n\n    for (var i = 0; i < ch; i++) {\n      buffer[(s % this._blockSize) + i] = data[i + f]\n    }\n\n    s += ch\n    f += ch\n\n    if ((s % this._blockSize) === 0) {\n      this._update(buffer)\n    }\n  }\n  this._s = s\n\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  // Suppose the length of the message M, in bits, is l\n  var l = this._len * 8\n\n  // Append the bit 1 to the end of the message\n  this._block[this._len % this._blockSize] = 0x80\n\n  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize\n  this._block.fill(0, this._len % this._blockSize + 1)\n\n  if (l % (this._blockSize * 8) >= this._finalSize * 8) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  // to this append the block which is equal to the number l written in binary\n  // TODO: handle case where l is > Math.pow(2, 29)\n  this._block.writeInt32BE(l, this._blockSize - 4)\n\n  var hash = this._update(this._block) || this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2}],99:[function(require,module,exports){\nvar exports = module.exports = function (alg) {\n  var Alg = exports[alg.toLowerCase()]\n  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')\n  return new Alg()\n}\n\n\nexports.sha = require('./sha')\nexports.sha1 = require('./sha1')\nexports.sha224 = require('./sha224')\nexports.sha256 = require('./sha256')\nexports.sha384 = require('./sha384')\nexports.sha512 = require('./sha512')\n\n},{\"./sha\":100,\"./sha1\":101,\"./sha224\":102,\"./sha256\":103,\"./sha384\":104,\"./sha512\":105}],100:[function(require,module,exports){\n(function (Buffer){\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined\n * in FIPS PUB 180-1\n * This source code is derived from sha1.js of the same repository.\n * The difference between SHA-0 and SHA-1 is just a bitwise rotate left\n * operation was added.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\n\nvar W = new Array(80)\n\nfunction Sha() {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha, Hash)\n\nSha.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt) {\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\nSha.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a\n  var b = this._b\n  var c = this._c\n  var d = this._d\n  var e = this._e\n\n  var j = 0, k\n\n  /*\n   * SHA-1 has a bitwise rotate left operation. But, SHA is not\n   * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }\n   */\n  function calcW() { return W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16] }\n  function loop(w, f) {\n    W[j] = w\n\n    var t = rol(a, 5) + f + e + w + k\n\n    e = d\n    d = c\n    c = rol(b, 30)\n    b = a\n    a = t\n    j++\n  }\n\n  k = 1518500249\n  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))\n  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))\n  k = 1859775393\n  while (j < 40) loop(calcW(), b ^ c ^ d)\n  k = -1894007588\n  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))\n  k = -899497514\n  while (j < 80) loop(calcW(), b ^ c ^ d)\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha.prototype._hash = function () {\n  var H = new Buffer(20)\n\n  H.writeInt32BE(this._a|0, 0)\n  H.writeInt32BE(this._b|0, 4)\n  H.writeInt32BE(this._c|0, 8)\n  H.writeInt32BE(this._d|0, 12)\n  H.writeInt32BE(this._e|0, 16)\n\n  return H\n}\n\nmodule.exports = Sha\n\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./hash\":98,\"buffer\":2,\"inherits\":144}],101:[function(require,module,exports){\n(function (Buffer){\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\n\nvar W = new Array(80)\n\nfunction Sha1() {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt) {\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a\n  var b = this._b\n  var c = this._c\n  var d = this._d\n  var e = this._e\n\n  var j = 0, k\n\n  function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }\n  function loop(w, f) {\n    W[j] = w\n\n    var t = rol(a, 5) + f + e + w + k\n\n    e = d\n    d = c\n    c = rol(b, 30)\n    b = a\n    a = t\n    j++\n  }\n\n  k = 1518500249\n  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))\n  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))\n  k = 1859775393\n  while (j < 40) loop(calcW(), b ^ c ^ d)\n  k = -1894007588\n  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))\n  k = -899497514\n  while (j < 80) loop(calcW(), b ^ c ^ d)\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = new Buffer(20)\n\n  H.writeInt32BE(this._a|0, 0)\n  H.writeInt32BE(this._b|0, 4)\n  H.writeInt32BE(this._c|0, 8)\n  H.writeInt32BE(this._d|0, 12)\n  H.writeInt32BE(this._e|0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./hash\":98,\"buffer\":2,\"inherits\":144}],102:[function(require,module,exports){\n(function (Buffer){\n/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar SHA256 = require('./sha256')\nvar Hash = require('./hash')\n\nvar W = new Array(64)\n\nfunction Sha224() {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha224, SHA256)\n\nSha224.prototype.init = function () {\n  this._a = 0xc1059ed8|0\n  this._b = 0x367cd507|0\n  this._c = 0x3070dd17|0\n  this._d = 0xf70e5939|0\n  this._e = 0xffc00b31|0\n  this._f = 0x68581511|0\n  this._g = 0x64f98fa7|0\n  this._h = 0xbefa4fa4|0\n\n  return this\n}\n\nSha224.prototype._hash = function () {\n  var H = new Buffer(28)\n\n  H.writeInt32BE(this._a,  0)\n  H.writeInt32BE(this._b,  4)\n  H.writeInt32BE(this._c,  8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n\n  return H\n}\n\nmodule.exports = Sha224\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./hash\":98,\"./sha256\":103,\"buffer\":2,\"inherits\":144}],103:[function(require,module,exports){\n(function (Buffer){\n/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\n\nvar K = [\n  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n]\n\nvar W = new Array(64)\n\nfunction Sha256() {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha256, Hash)\n\nSha256.prototype.init = function () {\n  this._a = 0x6a09e667|0\n  this._b = 0xbb67ae85|0\n  this._c = 0x3c6ef372|0\n  this._d = 0xa54ff53a|0\n  this._e = 0x510e527f|0\n  this._f = 0x9b05688c|0\n  this._g = 0x1f83d9ab|0\n  this._h = 0x5be0cd19|0\n\n  return this\n}\n\nfunction S (X, n) {\n  return (X >>> n) | (X << (32 - n));\n}\n\nfunction R (X, n) {\n  return (X >>> n);\n}\n\nfunction Ch (x, y, z) {\n  return ((x & y) ^ ((~x) & z));\n}\n\nfunction Maj (x, y, z) {\n  return ((x & y) ^ (x & z) ^ (y & z));\n}\n\nfunction Sigma0256 (x) {\n  return (S(x, 2) ^ S(x, 13) ^ S(x, 22));\n}\n\nfunction Sigma1256 (x) {\n  return (S(x, 6) ^ S(x, 11) ^ S(x, 25));\n}\n\nfunction Gamma0256 (x) {\n  return (S(x, 7) ^ S(x, 18) ^ R(x, 3));\n}\n\nfunction Gamma1256 (x) {\n  return (S(x, 17) ^ S(x, 19) ^ R(x, 10));\n}\n\nSha256.prototype._update = function(M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n  var f = this._f | 0\n  var g = this._g | 0\n  var h = this._h | 0\n\n  var j = 0\n\n  function calcW() { return Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16] }\n  function loop(w) {\n    W[j] = w\n\n    var T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w\n    var T2 = Sigma0256(a) + Maj(a, b, c);\n\n    h = g;\n    g = f;\n    f = e;\n    e = d + T1;\n    d = c;\n    c = b;\n    b = a;\n    a = T1 + T2;\n\n    j++\n  }\n\n  while (j < 16) loop(M.readInt32BE(j * 4))\n  while (j < 64) loop(calcW())\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n  this._f = (f + this._f) | 0\n  this._g = (g + this._g) | 0\n  this._h = (h + this._h) | 0\n};\n\nSha256.prototype._hash = function () {\n  var H = new Buffer(32)\n\n  H.writeInt32BE(this._a,  0)\n  H.writeInt32BE(this._b,  4)\n  H.writeInt32BE(this._c,  8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n  H.writeInt32BE(this._h, 28)\n\n  return H\n}\n\nmodule.exports = Sha256\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./hash\":98,\"buffer\":2,\"inherits\":144}],104:[function(require,module,exports){\n(function (Buffer){\nvar inherits = require('inherits')\nvar SHA512 = require('./sha512');\nvar Hash = require('./hash')\n\nvar W = new Array(160)\n\nfunction Sha384() {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha384, SHA512)\n\nSha384.prototype.init = function () {\n  this._a = 0xcbbb9d5d|0\n  this._b = 0x629a292a|0\n  this._c = 0x9159015a|0\n  this._d = 0x152fecd8|0\n  this._e = 0x67332667|0\n  this._f = 0x8eb44a87|0\n  this._g = 0xdb0c2e0d|0\n  this._h = 0x47b5481d|0\n\n  this._al = 0xc1059ed8|0\n  this._bl = 0x367cd507|0\n  this._cl = 0x3070dd17|0\n  this._dl = 0xf70e5939|0\n  this._el = 0xffc00b31|0\n  this._fl = 0x68581511|0\n  this._gl = 0x64f98fa7|0\n  this._hl = 0xbefa4fa4|0\n\n  return this\n}\n\nSha384.prototype._hash = function () {\n  var H = new Buffer(48)\n\n  function writeInt64BE(h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._a, this._al, 0)\n  writeInt64BE(this._b, this._bl, 8)\n  writeInt64BE(this._c, this._cl, 16)\n  writeInt64BE(this._d, this._dl, 24)\n  writeInt64BE(this._e, this._el, 32)\n  writeInt64BE(this._f, this._fl, 40)\n\n  return H\n}\n\nmodule.exports = Sha384\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./hash\":98,\"./sha512\":105,\"buffer\":2,\"inherits\":144}],105:[function(require,module,exports){\n(function (Buffer){\nvar inherits = require('inherits')\nvar Hash = require('./hash')\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]\n\nvar W = new Array(160)\n\nfunction Sha512() {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha512, Hash)\n\nSha512.prototype.init = function () {\n  this._a = 0x6a09e667|0\n  this._b = 0xbb67ae85|0\n  this._c = 0x3c6ef372|0\n  this._d = 0xa54ff53a|0\n  this._e = 0x510e527f|0\n  this._f = 0x9b05688c|0\n  this._g = 0x1f83d9ab|0\n  this._h = 0x5be0cd19|0\n\n  this._al = 0xf3bcc908|0\n  this._bl = 0x84caa73b|0\n  this._cl = 0xfe94f82b|0\n  this._dl = 0x5f1d36f1|0\n  this._el = 0xade682d1|0\n  this._fl = 0x2b3e6c1f|0\n  this._gl = 0xfb41bd6b|0\n  this._hl = 0x137e2179|0\n\n  return this\n}\n\nfunction S (X, Xl, n) {\n  return (X >>> n) | (Xl << (32 - n))\n}\n\nfunction Ch (x, y, z) {\n  return ((x & y) ^ ((~x) & z));\n}\n\nfunction Maj (x, y, z) {\n  return ((x & y) ^ (x & z) ^ (y & z));\n}\n\nSha512.prototype._update = function(M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n  var f = this._f | 0\n  var g = this._g | 0\n  var h = this._h | 0\n\n  var al = this._al | 0\n  var bl = this._bl | 0\n  var cl = this._cl | 0\n  var dl = this._dl | 0\n  var el = this._el | 0\n  var fl = this._fl | 0\n  var gl = this._gl | 0\n  var hl = this._hl | 0\n\n  var i = 0, j = 0\n  var Wi, Wil\n  function calcW() {\n    var x  = W[j - 15*2]\n    var xl = W[j - 15*2 + 1]\n    var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)\n    var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)\n\n    x  = W[j - 2*2]\n    xl = W[j - 2*2 + 1]\n    var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)\n    var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)\n\n    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n    var Wi7  = W[j - 7*2]\n    var Wi7l = W[j - 7*2 + 1]\n\n    var Wi16  = W[j - 16*2]\n    var Wi16l = W[j - 16*2 + 1]\n\n    Wil = gamma0l + Wi7l\n    Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)\n    Wil = Wil + gamma1l\n    Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)\n    Wil = Wil + Wi16l\n    Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)\n  }\n\n  function loop() {\n    W[j] = Wi\n    W[j + 1] = Wil\n\n    var maj = Maj(a, b, c)\n    var majl = Maj(al, bl, cl)\n\n    var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)\n    var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)\n    var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)\n    var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)\n\n    // t1 = h + sigma1 + ch + K[i] + W[i]\n    var Ki = K[j]\n    var Kil = K[j + 1]\n\n    var ch = Ch(e, f, g)\n    var chl = Ch(el, fl, gl)\n\n    var t1l = hl + sigma1l\n    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)\n    t1l = t1l + chl\n    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)\n    t1l = t1l + Kil\n    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)\n    t1l = t1l + Wil\n    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)\n\n    // t2 = sigma0 + maj\n    var t2l = sigma0l + majl\n    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)\n\n    h  = g\n    hl = gl\n    g  = f\n    gl = fl\n    f  = e\n    fl = el\n    el = (dl + t1l) | 0\n    e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0\n    d  = c\n    dl = cl\n    c  = b\n    cl = bl\n    b  = a\n    bl = al\n    al = (t1l + t2l) | 0\n    a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0\n\n    i++\n    j += 2\n  }\n\n  while (i < 16) {\n    Wi = M.readInt32BE(j * 4)\n    Wil = M.readInt32BE(j * 4 + 4)\n\n    loop()\n  }\n\n  while (i < 80) {\n    calcW()\n    loop()\n  }\n\n  this._al = (this._al + al) | 0\n  this._bl = (this._bl + bl) | 0\n  this._cl = (this._cl + cl) | 0\n  this._dl = (this._dl + dl) | 0\n  this._el = (this._el + el) | 0\n  this._fl = (this._fl + fl) | 0\n  this._gl = (this._gl + gl) | 0\n  this._hl = (this._hl + hl) | 0\n\n  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0\n  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0\n  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0\n  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0\n  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0\n  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0\n  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0\n  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0\n}\n\nSha512.prototype._hash = function () {\n  var H = new Buffer(64)\n\n  function writeInt64BE(h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._a, this._al, 0)\n  writeInt64BE(this._b, this._bl, 8)\n  writeInt64BE(this._c, this._cl, 16)\n  writeInt64BE(this._d, this._dl, 24)\n  writeInt64BE(this._e, this._el, 32)\n  writeInt64BE(this._f, this._fl, 40)\n  writeInt64BE(this._g, this._gl, 48)\n  writeInt64BE(this._h, this._hl, 56)\n\n  return H\n}\n\nmodule.exports = Sha512\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./hash\":98,\"buffer\":2,\"inherits\":144}],106:[function(require,module,exports){\n(function (Buffer){\n'use strict';\nvar createHash = require('create-hash/browser');\nvar inherits = require('inherits')\n\nvar Transform = require('stream').Transform\n\nvar ZEROS = new Buffer(128)\nZEROS.fill(0)\n\nfunction Hmac(alg, key) {\n  Transform.call(this)\n\n  if (typeof key === 'string') {\n    key = new Buffer(key)\n  }\n\n  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64\n\n  this._alg = alg\n  this._key = key\n\n  if (key.length > blocksize) {\n    key = createHash(alg).update(key).digest()\n\n  } else if (key.length < blocksize) {\n    key = Buffer.concat([key, ZEROS], blocksize)\n  }\n\n  var ipad = this._ipad = new Buffer(blocksize)\n  var opad = this._opad = new Buffer(blocksize)\n\n  for (var i = 0; i < blocksize; i++) {\n    ipad[i] = key[i] ^ 0x36\n    opad[i] = key[i] ^ 0x5C\n  }\n\n  this._hash = createHash(alg).update(ipad)\n}\n\ninherits(Hmac, Transform)\n\nHmac.prototype.update = function (data, enc) {\n  this._hash.update(data, enc)\n\n  return this\n}\n\nHmac.prototype._transform = function (data, _, next) {\n  this._hash.update(data)\n\n  next()\n}\n\nHmac.prototype._flush = function (next) {\n  this.push(this.digest())\n\n  next()\n}\n\nHmac.prototype.digest = function (enc) {\n  var h = this._hash.digest()\n\n  return createHash(this._alg).update(this._opad).update(h).digest(enc)\n}\n\nmodule.exports = function createHmac(alg, key) {\n  return new Hmac(alg, key)\n}\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2,\"create-hash/browser\":94,\"inherits\":144,\"stream\":158}],107:[function(require,module,exports){\n(function (Buffer){\nvar generatePrime = require('./lib/generatePrime');\nvar primes = require('./lib/primes');\n\nvar DH = require('./lib/dh');\n\nfunction getDiffieHellman(mod) {\n  var prime = new Buffer(primes[mod].prime, 'hex');\n  var gen = new Buffer(primes[mod].gen, 'hex');\n\n  return new DH(prime, gen);\n}\n\nfunction createDiffieHellman(prime, enc, generator, genc) {\n  if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {\n    genc = generator;\n    generator = enc;\n    enc = undefined;\n  }\n\n  enc = enc || 'binary';\n  genc = genc || 'binary';\n  generator = generator || new Buffer([2]);\n\n  if (!Buffer.isBuffer(generator)) {\n    generator = new Buffer(generator, genc);\n  }\n\n  if (typeof prime === 'number') {\n    return new DH(generatePrime(prime, generator), generator, true);\n  }\n\n  if (!Buffer.isBuffer(prime)) {\n    prime = new Buffer(prime, enc);\n  }\n\n  return new DH(prime, generator, true);\n}\n\nexports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;\nexports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./lib/dh\":108,\"./lib/generatePrime\":109,\"./lib/primes\":110,\"buffer\":2}],108:[function(require,module,exports){\n(function (Buffer){\nvar BN = require('bn.js');\nvar MillerRabin = require('miller-rabin');\nvar millerRabin = new MillerRabin();\nvar TWENTYFOUR = new BN(24);\nvar ELEVEN = new BN(11);\nvar TEN = new BN(10);\nvar THREE = new BN(3);\nvar SEVEN = new BN(7);\nvar primes = require('./generatePrime');\nvar randomBytes = require('randombytes');\nmodule.exports = DH;\n\nfunction setPublicKey(pub, enc) {\n  enc = enc || 'utf8';\n  if (!Buffer.isBuffer(pub)) {\n    pub = new Buffer(pub, enc);\n  }\n  this._pub = new BN(pub);\n  return this;\n}\n\nfunction setPrivateKey(priv, enc) {\n  enc = enc || 'utf8';\n  if (!Buffer.isBuffer(priv)) {\n    priv = new Buffer(priv, enc);\n  }\n  this._priv = new BN(priv);\n  return this;\n}\n\nvar primeCache = {};\nfunction checkPrime(prime, generator) {\n  var gen = generator.toString('hex');\n  var hex = [gen, prime.toString(16)].join('_');\n  if (hex in primeCache) {\n    return primeCache[hex];\n  }\n  var error = 0;\n  \n  if (prime.isEven() ||\n    !primes.simpleSieve ||\n    !primes.fermatTest(prime) ||\n    !millerRabin.test(prime)) {\n    //not a prime so +1\n    error += 1;\n    \n    if (gen === '02' || gen === '05') {\n      // we'd be able to check the generator\n      // it would fail so +8\n      error += 8;\n    } else {\n      //we wouldn't be able to test the generator\n      // so +4\n      error += 4;\n    }\n    primeCache[hex] = error;\n    return error;\n  }\n  if (!millerRabin.test(prime.shrn(1))) {\n    //not a safe prime\n    error += 2;\n  }\n  var rem;\n  switch (gen) {\n    case '02':\n      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {\n        // unsuidable generator\n        error += 8;\n      }\n      break;\n    case '05':\n      rem = prime.mod(TEN);\n      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {\n        // prime mod 10 needs to equal 3 or 7\n        error += 8;\n      } \n      break;\n    default: \n      error += 4;\n  }\n  primeCache[hex] = error;\n  return error;\n}\n\nfunction defineError (self, error) {\n  try {\n    Object.defineProperty(self, 'verifyError', {\n      enumerable: true,\n      value: error,\n      writable: false\n    });\n  } catch(e) {\n    self.verifyError = error;\n  }\n}\nfunction DH(prime, generator, malleable) {\n  this.setGenerator(generator);\n  this.__prime = new BN(prime);\n  this._prime = BN.mont(this.__prime);\n  this._primeLen = prime.length;\n  this._pub = void 0;\n  this._priv = void 0;\n  \n  if (malleable) {\n    this.setPublicKey = setPublicKey;\n    this.setPrivateKey = setPrivateKey;\n    defineError(this, checkPrime(this.__prime, generator));\n  } else {\n    defineError(this, 8);\n  }\n}\n\nDH.prototype.generateKeys = function () {\n  if (!this._priv) {\n    this._priv = new BN(randomBytes(this._primeLen));\n  }\n  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();\n  return this.getPublicKey();\n};\n\nDH.prototype.computeSecret = function (other) {\n  other = new BN(other);\n  other = other.toRed(this._prime);\n  var secret = other.redPow(this._priv).fromRed();\n  var out = new Buffer(secret.toArray());\n  var prime = this.getPrime();\n  if (out.length < prime.length) {\n    var front = new Buffer(prime.length - out.length);\n    front.fill(0);\n    out = Buffer.concat([front, out]);\n  }\n  return out;\n};\n\nDH.prototype.getPublicKey = function getPublicKey(enc) {\n  return formatReturnValue(this._pub, enc);\n};\n\nDH.prototype.getPrivateKey = function getPrivateKey(enc) {\n  return formatReturnValue(this._priv, enc);\n};\n\nDH.prototype.getPrime = function (enc) {\n  return formatReturnValue(this.__prime, enc);\n};\n\nDH.prototype.getGenerator = function (enc) {\n  return formatReturnValue(this._gen, enc);\n};\n\nDH.prototype.setGenerator = function (gen, enc) {\n  enc = enc || 'utf8';\n  if (!Buffer.isBuffer(gen)) {\n    gen = new Buffer(gen, enc);\n  }\n  this._gen = new BN(gen);\n  return this;\n};\n\nfunction formatReturnValue(bn, enc) {\n  var buf = new Buffer(bn.toArray());\n  if (!enc) {\n    return buf;\n  } else {\n    return buf.toString(enc);\n  }\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./generatePrime\":109,\"bn.js\":111,\"buffer\":2,\"miller-rabin\":112,\"randombytes\":142}],109:[function(require,module,exports){\nvar randomBytes = require('randombytes');\nmodule.exports = findPrime;\nfindPrime.simpleSieve = simpleSieve;\nfindPrime.fermatTest = fermatTest;\nvar BN = require('bn.js');\nvar TWENTYFOUR = new BN(24);\nvar MillerRabin = require('miller-rabin');\nvar millerRabin = new MillerRabin();\nvar ONE = new BN(1);\nvar TWO = new BN(2);\nvar FIVE = new BN(5);\nvar SIXTEEN = new BN(16);\nvar EIGHT = new BN(8);\nvar TEN = new BN(10);\nvar THREE = new BN(3);\nvar SEVEN = new BN(7);\nvar ELEVEN = new BN(11);\nvar FOUR = new BN(4);\nvar TWELVE = new BN(12);\nvar primes = null;\n\nfunction _getPrimes() {\n  if (primes !== null)\n    return primes;\n\n  var limit = 0x100000;\n  var res = [];\n  res[0] = 2;\n  for (var i = 1, k = 3; k < limit; k += 2) {\n    var sqrt = Math.ceil(Math.sqrt(k));\n    for (var j = 0; j < i && res[j] <= sqrt; j++)\n      if (k % res[j] === 0)\n        break;\n\n    if (i !== j && res[j] <= sqrt)\n      continue;\n\n    res[i++] = k;\n  }\n  primes = res;\n  return res;\n}\n\nfunction simpleSieve(p) {\n  var primes = _getPrimes();\n\n  for (var i = 0; i < primes.length; i++)\n    if (p.modn(primes[i]) === 0) {\n      if (p.cmpn(primes[i]) === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  return true;\n}\n\nfunction fermatTest(p) {\n  var red = BN.mont(p);\n  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;\n}\n\nfunction findPrime(bits, gen) {\n  if (bits < 16) {\n    // this is what openssl does\n    if (gen === 2 || gen === 5) {\n      return new BN([0x8c, 0x7b]);\n    } else {\n      return new BN([0x8c, 0x27]);\n    }\n  }\n  gen = new BN(gen);\n  var runs, comp;\n  function generateRandom(bits) {\n    runs = -1;\n    var out = new BN(randomBytes(Math.ceil(bits / 8)));\n    while (out.bitLength() > bits) {\n      out.ishrn(1);\n    }\n    if (out.isEven()) {\n      out.iadd(ONE);\n    }\n    if (!out.testn(1)) {\n      out.iadd(TWO);\n    }\n    if (!gen.cmp(TWO)) {\n      while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {\n        out.iadd(FOUR);\n      }\n      comp = {\n        major: [TWENTYFOUR],\n        minor: [TWELVE]\n      };\n    } else if (!gen.cmp(FIVE)) {\n      rem = out.mod(TEN);\n      while (rem.cmp(THREE)) {\n        out.iadd(FOUR);\n        rem = out.mod(TEN);\n      }\n      comp = {\n        major: [FOUR, SIXTEEN],\n        minor: [TWO, EIGHT]\n      };\n    } else {\n      comp = {\n        major: [FOUR],\n        minor: [TWO]\n      };\n    }\n    return out;\n  }\n  var num = generateRandom(bits);\n\n  var n2 = num.shrn(1);\n\n  while (true) {\n    while (num.bitLength() > bits) {\n      num = generateRandom(bits);\n      n2 = num.shrn(1);\n    }\n    runs++;\n    if (simpleSieve(n2) &&  simpleSieve(num) &&\n      fermatTest(n2) &&  fermatTest(num) &&\n      millerRabin.test(n2) && millerRabin.test(num)) {\n      return num;\n    }\n    num.iadd(comp.major[runs%comp.major.length]);\n    n2.iadd(comp.minor[runs%comp.minor.length]);\n  }\n\n}\n},{\"bn.js\":111,\"miller-rabin\":112,\"randombytes\":142}],110:[function(require,module,exports){\nmodule.exports={\n    \"modp1\": {\n        \"gen\": \"02\",\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"\n    },\n    \"modp2\": {\n        \"gen\": \"02\",\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"\n    },\n    \"modp5\": {\n        \"gen\": \"02\",\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"\n    },\n    \"modp14\": {\n        \"gen\": \"02\",\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"\n    },\n    \"modp15\": {\n        \"gen\": \"02\",\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"\n    },\n    \"modp16\": {\n        \"gen\": \"02\",\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"\n    },\n    \"modp17\": {\n        \"gen\": \"02\",\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"\n    },\n    \"modp18\": {\n        \"gen\": \"02\",\n        \"prime\": \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"\n    }\n}\n},{}],111:[function(require,module,exports){\narguments[4][28][0].apply(exports,arguments)\n},{\"dup\":28}],112:[function(require,module,exports){\nvar bn = require('bn.js');\nvar brorand = require('brorand');\n\nfunction MillerRabin(rand) {\n  this.rand = rand || new brorand.Rand();\n}\nmodule.exports = MillerRabin;\n\nMillerRabin.create = function create(rand) {\n  return new MillerRabin(rand);\n};\n\nMillerRabin.prototype._rand = function _rand(n) {\n  var len = n.bitLength();\n  var buf = this.rand.generate(Math.ceil(len / 8));\n\n  // Set low bits\n  buf[0] |= 3;\n\n  // Mask high bits\n  var mask = len & 0x7;\n  if (mask !== 0)\n    buf[buf.length - 1] >>= 7 - mask;\n\n  return new bn(buf);\n}\n\nMillerRabin.prototype.test = function test(n, k, cb) {\n  var len = n.bitLength();\n  var red = bn.mont(n);\n  var rone = new bn(1).toRed(red);\n\n  if (!k)\n    k = Math.max(1, (len / 48) | 0);\n\n  // Find d and s, (n - 1) = (2 ^ s) * d;\n  var n1 = n.subn(1);\n  var n2 = n1.subn(1);\n  for (var s = 0; !n1.testn(s); s++) {}\n  var d = n.shrn(s);\n\n  var rn1 = n1.toRed(red);\n\n  var prime = true;\n  for (; k > 0; k--) {\n    var a = this._rand(n2);\n    if (cb)\n      cb(a);\n\n    var x = a.toRed(red).redPow(d);\n    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)\n      continue;\n\n    for (var i = 1; i < s; i++) {\n      x = x.redSqr();\n\n      if (x.cmp(rone) === 0)\n        return false;\n      if (x.cmp(rn1) === 0)\n        break;\n    }\n\n    if (i === s)\n      return false;\n  }\n\n  return prime;\n};\n\nMillerRabin.prototype.getDivisor = function getDivisor(n, k) {\n  var len = n.bitLength();\n  var red = bn.mont(n);\n  var rone = new bn(1).toRed(red);\n\n  if (!k)\n    k = Math.max(1, (len / 48) | 0);\n\n  // Find d and s, (n - 1) = (2 ^ s) * d;\n  var n1 = n.subn(1);\n  var n2 = n1.subn(1);\n  for (var s = 0; !n1.testn(s); s++) {}\n  var d = n.shrn(s);\n\n  var rn1 = n1.toRed(red);\n\n  var prime = true;\n  for (; k > 0; k--) {\n    var a = this._rand(n2);\n\n    var g = n.gcd(a);\n    if (g.cmpn(1) !== 0)\n      return g;\n\n    var x = a.toRed(red).redPow(d);\n    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)\n      continue;\n\n    for (var i = 1; i < s; i++) {\n      x = x.redSqr();\n\n      if (x.cmp(rone) === 0)\n        return x.fromRed().subn(1).gcd(n);\n      if (x.cmp(rn1) === 0)\n        break;\n    }\n\n    if (i === s) {\n      x = x.redSqr();\n      return x.fromRed().subn(1).gcd(n);\n    }\n  }\n\n  return prime;\n};\n\n},{\"bn.js\":111,\"brorand\":113}],113:[function(require,module,exports){\narguments[4][42][0].apply(exports,arguments)\n},{\"dup\":42}],114:[function(require,module,exports){\n(function (Buffer){\nvar createHmac = require('create-hmac')\nvar MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs\n\nexports.pbkdf2 = pbkdf2\nfunction pbkdf2 (password, salt, iterations, keylen, digest, callback) {\n  if (typeof digest === 'function') {\n    callback = digest\n    digest = undefined\n  }\n\n  if (typeof callback !== 'function') {\n    throw new Error('No callback provided to pbkdf2')\n  }\n\n  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)\n  setTimeout(function () {\n    callback(undefined, result)\n  })\n}\n\nexports.pbkdf2Sync = pbkdf2Sync\nfunction pbkdf2Sync (password, salt, iterations, keylen, digest) {\n  if (typeof iterations !== 'number') {\n    throw new TypeError('Iterations not a number')\n  }\n\n  if (iterations < 0) {\n    throw new TypeError('Bad iterations')\n  }\n\n  if (typeof keylen !== 'number') {\n    throw new TypeError('Key length not a number')\n  }\n\n  if (keylen < 0 || keylen > MAX_ALLOC) {\n    throw new TypeError('Bad key length')\n  }\n\n  digest = digest || 'sha1'\n\n  if (!Buffer.isBuffer(password)) password = new Buffer(password, 'binary')\n  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, 'binary')\n\n  var hLen\n  var l = 1\n  var DK = new Buffer(keylen)\n  var block1 = new Buffer(salt.length + 4)\n  salt.copy(block1, 0, 0, salt.length)\n\n  var r\n  var T\n\n  for (var i = 1; i <= l; i++) {\n    block1.writeUInt32BE(i, salt.length)\n    var U = createHmac(digest, password).update(block1).digest()\n\n    if (!hLen) {\n      hLen = U.length\n      T = new Buffer(hLen)\n      l = Math.ceil(keylen / hLen)\n      r = keylen - (l - 1) * hLen\n    }\n\n    U.copy(T, 0, 0, hLen)\n\n    for (var j = 1; j < iterations; j++) {\n      U = createHmac(digest, password).update(U).digest()\n\n      for (var k = 0; k < hLen; k++) {\n        T[k] ^= U[k]\n      }\n    }\n\n    var destPos = (i - 1) * hLen\n    var len = (i === l ? r : hLen)\n    T.copy(DK, destPos, 0, len)\n  }\n\n  return DK\n}\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2,\"create-hmac\":106}],115:[function(require,module,exports){\nexports.publicEncrypt = require('./publicEncrypt');\nexports.privateDecrypt = require('./privateDecrypt');\n\nexports.privateEncrypt = function privateEncrypt(key, buf) {\n  return exports.publicEncrypt(key, buf, true);\n};\n\nexports.publicDecrypt = function publicDecrypt(key, buf) {\n  return exports.privateDecrypt(key, buf, true);\n};\n},{\"./privateDecrypt\":138,\"./publicEncrypt\":139}],116:[function(require,module,exports){\n(function (Buffer){\nvar createHash = require('create-hash');\nmodule.exports = function (seed, len) {\n  var t = new Buffer('');\n  var  i = 0, c;\n  while (t.length < len) {\n    c = i2ops(i++);\n    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);\n  }\n  return t.slice(0, len);\n};\n\nfunction i2ops(c) {\n  var out = new Buffer(4);\n  out.writeUInt32BE(c,0);\n  return out;\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2,\"create-hash\":94}],117:[function(require,module,exports){\narguments[4][28][0].apply(exports,arguments)\n},{\"dup\":28}],118:[function(require,module,exports){\n(function (Buffer){\nvar bn = require('bn.js');\nvar randomBytes = require('randombytes');\nmodule.exports = crt;\nfunction blind(priv) {\n  var r = getr(priv);\n  var blinder = r.toRed(bn.mont(priv.modulus))\n  .redPow(new bn(priv.publicExponent)).fromRed();\n  return {\n    blinder: blinder,\n    unblinder:r.invm(priv.modulus)\n  };\n}\nfunction crt(msg, priv) {\n  var blinds = blind(priv);\n  var len = priv.modulus.byteLength();\n  var mod = bn.mont(priv.modulus);\n  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);\n  var c1 = blinded.toRed(bn.mont(priv.prime1));\n  var c2 = blinded.toRed(bn.mont(priv.prime2));\n  var qinv = priv.coefficient;\n  var p = priv.prime1;\n  var q = priv.prime2;\n  var m1 = c1.redPow(priv.exponent1);\n  var m2 = c2.redPow(priv.exponent2);\n  m1 = m1.fromRed();\n  m2 = m2.fromRed();\n  var h = m1.isub(m2).imul(qinv).mod(p);\n  h.imul(q);\n  m2.iadd(h);\n  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());\n  if (out.length < len) {\n    var prefix = new Buffer(len - out.length);\n    prefix.fill(0);\n    out = Buffer.concat([prefix, out], len);\n  }\n  return out;\n}\ncrt.getr = getr;\nfunction getr(priv) {\n  var len = priv.modulus.byteLength();\n  var r = new bn(randomBytes(len));\n  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {\n    r = new bn(randomBytes(len));\n  }\n  return r;\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"bn.js\":117,\"buffer\":2,\"randombytes\":142}],119:[function(require,module,exports){\n(function (Buffer){\nvar createHash = require('create-hash');\nmodule.exports = function evp(password, salt, keyLen) {\n  keyLen = keyLen/8;\n  var ki = 0;\n  var ii = 0;\n  var key = new Buffer(keyLen);\n  var addmd = 0;\n  var md, md_buf;\n  var i;\n  while (true) {\n    md = createHash('md5');\n    if(addmd++ > 0) {\n       md.update(md_buf);\n    }\n    md.update(password);\n    md.update(salt);\n    md_buf = md.digest();\n    i = 0;\n    if(keyLen > 0) {\n      while(true) {\n        if(keyLen === 0) {\n          break;\n        }\n        if(i === md_buf.length) {\n          break;\n        }\n        key[ki++] = md_buf[i++];\n        keyLen--;\n       }\n    }\n   if(keyLen === 0) {\n      break;\n    }\n  }\n  for(i=0;i<md_buf.length;i++) {\n    md_buf[i] = 0;\n  }\n  return key;\n};\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2,\"create-hash\":94}],120:[function(require,module,exports){\narguments[4][51][0].apply(exports,arguments)\n},{\"dup\":51}],121:[function(require,module,exports){\narguments[4][52][0].apply(exports,arguments)\n},{\"asn1.js\":124,\"dup\":52}],122:[function(require,module,exports){\n(function (Buffer){\n// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED\\n\\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\\n\\r?\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?/m;\nvar startRegex =/^-----BEGIN (.*) KEY-----\\n/m;\nvar fullRegex = /^-----BEGIN (.*) KEY-----\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?-----END \\1 KEY-----$/m;\nvar evp = require('./EVP_BytesToKey');\nvar ciphers = require('browserify-aes');\nmodule.exports = function (okey, password) {\n  var key = okey.toString();\n  var match = key.match(findProc);\n  var decrypted;\n  if (!match) {\n    var match2 = key.match(fullRegex);\n    decrypted = new Buffer(match2[2].replace(/\\n\\r?/g, ''), 'base64');\n  } else {\n    var suite = 'aes' + match[1];\n    var iv = new Buffer(match[2], 'hex');\n    var cipherText = new Buffer(match[3].replace(/\\n\\r?/g, ''), 'base64');\n    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));\n    var out = [];\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);\n    out.push(cipher.update(cipherText));\n    out.push(cipher.final());\n    decrypted = Buffer.concat(out);\n  }\n  var tag = key.match(startRegex)[1] + ' KEY';\n  return {\n    tag: tag,\n    data: decrypted\n  };\n};\n// http://stackoverflow.com/a/7033705\nfunction wrap(str) {\n  var chunks = [];\n  while (str) {\n    if (str.length < 64) {\n      chunks.push(str);\n      break;\n    }\n    else {\n      chunks.push(str.slice(0, 64));\n      str = str.slice(64);\n    }\n  }\n  return chunks.join(\"\\n\");\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./EVP_BytesToKey\":119,\"browserify-aes\":10,\"buffer\":2}],123:[function(require,module,exports){\n(function (Buffer){\nvar asn1 = require('./asn1');\nvar aesid = require('./aesid.json');\nvar fixProc = require('./fixProc');\nvar ciphers = require('browserify-aes');\nvar compat = require('pbkdf2-compat');\nmodule.exports = parseKeys;\n\nfunction parseKeys(buffer) {\n  var password;\n  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {\n    password = buffer.passphrase;\n    buffer = buffer.key;\n  }\n  if (typeof buffer === 'string') {\n    buffer = new Buffer(buffer);\n  }\n\n  var stripped = fixProc(buffer, password);\n\n  var type = stripped.tag;\n  var data = stripped.data;\n  var subtype,ndata;\n  switch (type) {\n    case 'PUBLIC KEY':\n      ndata = asn1.PublicKey.decode(data, 'der');\n      subtype = ndata.algorithm.algorithm.join('.');\n      switch(subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');\n        case '1.2.840.10045.2.1':\n        ndata.subjectPrivateKey = ndata.subjectPublicKey;\n          return {\n            type: 'ec',\n            data:  ndata\n          };\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');\n          return {\n            type: 'dsa',\n            data: ndata.algorithm.params\n          };\n        default: throw new Error('unknown key id ' +  subtype);\n      }\n      throw new Error('unknown key type ' +  type);\n    case 'ENCRYPTED PRIVATE KEY':\n      data = asn1.EncryptedPrivateKey.decode(data, 'der');\n      data = decrypt(data, password);\n      //falling through\n    case 'PRIVATE KEY':\n      ndata = asn1.PrivateKey.decode(data, 'der');\n      subtype = ndata.algorithm.algorithm.join('.');\n      switch(subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');\n        case '1.2.840.10045.2.1':\n          return {\n            curve: ndata.algorithm.curve,\n            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey\n          };\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');\n          return {\n            type: 'dsa',\n            params: ndata.algorithm.params\n          };\n        default: throw new Error('unknown key id ' +  subtype);\n      }\n      throw new Error('unknown key type ' +  type);\n    case 'RSA PUBLIC KEY':\n      return asn1.RSAPublicKey.decode(data, 'der');\n    case 'RSA PRIVATE KEY':\n      return asn1.RSAPrivateKey.decode(data, 'der');\n    case 'DSA PRIVATE KEY':\n      return {\n        type: 'dsa',\n        params: asn1.DSAPrivateKey.decode(data, 'der')\n      };\n    case 'EC PRIVATE KEY':\n      data = asn1.ECPrivateKey.decode(data, 'der');\n      return {\n        curve: data.parameters.value,\n        privateKey: data.privateKey\n      };\n    default: throw new Error('unknown key type ' +  type);\n  }\n}\nparseKeys.signature = asn1.signature;\nfunction decrypt(data, password) {\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt;\n  var iters = data.algorithm.decrypt.kde.kdeparams.iters;\n  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];\n  var iv = data.algorithm.decrypt.cipher.iv;\n  var cipherText = data.subjectPrivateKey;\n  var keylen = parseInt(algo.split('-')[1], 10)/8;\n  var key = compat.pbkdf2Sync(password, salt, iters, keylen);\n  var cipher = ciphers.createDecipheriv(algo, key, iv);\n  var out = [];\n  out.push(cipher.update(cipherText));\n  out.push(cipher.final());\n  return Buffer.concat(out);\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./aesid.json\":120,\"./asn1\":121,\"./fixProc\":122,\"browserify-aes\":10,\"buffer\":2,\"pbkdf2-compat\":137}],124:[function(require,module,exports){\narguments[4][55][0].apply(exports,arguments)\n},{\"./asn1/api\":125,\"./asn1/base\":127,\"./asn1/constants\":131,\"./asn1/decoders\":133,\"./asn1/encoders\":135,\"bn.js\":117,\"dup\":55}],125:[function(require,module,exports){\narguments[4][56][0].apply(exports,arguments)\n},{\"../asn1\":124,\"dup\":56,\"inherits\":144,\"vm\":160}],126:[function(require,module,exports){\narguments[4][57][0].apply(exports,arguments)\n},{\"../base\":127,\"buffer\":2,\"dup\":57,\"inherits\":144}],127:[function(require,module,exports){\narguments[4][58][0].apply(exports,arguments)\n},{\"./buffer\":126,\"./node\":128,\"./reporter\":129,\"dup\":58}],128:[function(require,module,exports){\narguments[4][59][0].apply(exports,arguments)\n},{\"../base\":127,\"dup\":59,\"minimalistic-assert\":136}],129:[function(require,module,exports){\narguments[4][60][0].apply(exports,arguments)\n},{\"dup\":60,\"inherits\":144}],130:[function(require,module,exports){\narguments[4][61][0].apply(exports,arguments)\n},{\"../constants\":131,\"dup\":61}],131:[function(require,module,exports){\narguments[4][62][0].apply(exports,arguments)\n},{\"./der\":130,\"dup\":62}],132:[function(require,module,exports){\narguments[4][63][0].apply(exports,arguments)\n},{\"../../asn1\":124,\"dup\":63,\"inherits\":144}],133:[function(require,module,exports){\narguments[4][64][0].apply(exports,arguments)\n},{\"./der\":132,\"dup\":64}],134:[function(require,module,exports){\narguments[4][65][0].apply(exports,arguments)\n},{\"../../asn1\":124,\"buffer\":2,\"dup\":65,\"inherits\":144}],135:[function(require,module,exports){\narguments[4][66][0].apply(exports,arguments)\n},{\"./der\":134,\"dup\":66}],136:[function(require,module,exports){\narguments[4][67][0].apply(exports,arguments)\n},{\"dup\":67}],137:[function(require,module,exports){\n(function (Buffer){\nvar createHmac = require('create-hmac')\n\nexports.pbkdf2 = pbkdf2\nfunction pbkdf2 (password, salt, iterations, keylen, digest, callback) {\n  if (typeof digest === 'function') {\n    callback = digest\n    digest = undefined\n  }\n\n  if (typeof callback !== 'function') {\n    throw new Error('No callback provided to pbkdf2')\n  }\n\n  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)\n  setTimeout(function () {\n    callback(undefined, result)\n  })\n}\n\nexports.pbkdf2Sync = pbkdf2Sync\nfunction pbkdf2Sync (password, salt, iterations, keylen, digest) {\n  if (typeof iterations !== 'number')\n    throw new TypeError('Iterations not a number')\n\n  if (iterations < 0)\n    throw new TypeError('Bad iterations')\n\n  if (typeof keylen !== 'number')\n    throw new TypeError('Key length not a number')\n\n  if (keylen < 0)\n    throw new TypeError('Bad key length')\n\n  digest = digest || 'sha1'\n\n  if (!Buffer.isBuffer(password)) password = new Buffer(password)\n  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)\n\n  var hLen\n  var l = 1\n  var DK = new Buffer(keylen)\n  var block1 = new Buffer(salt.length + 4)\n  salt.copy(block1, 0, 0, salt.length)\n\n  var r\n  var T\n\n  for (var i = 1; i <= l; i++) {\n    block1.writeUInt32BE(i, salt.length)\n    var U = createHmac(digest, password).update(block1).digest()\n\n    if (!hLen) {\n      hLen = U.length\n      T = new Buffer(hLen)\n      l = Math.ceil(keylen / hLen)\n      r = keylen - (l - 1) * hLen\n\n      if (keylen > (Math.pow(2, 32) - 1) * hLen)\n        throw new TypeError('keylen exceeds maximum length')\n    }\n\n    U.copy(T, 0, 0, hLen)\n\n    for (var j = 1; j < iterations; j++) {\n      U = createHmac(digest, password).update(U).digest()\n\n      for (var k = 0; k < hLen; k++) {\n        T[k] ^= U[k]\n      }\n    }\n\n    var destPos = (i - 1) * hLen\n    var len = (i === l ? r : hLen)\n    T.copy(DK, destPos, 0, len)\n  }\n\n  return DK\n}\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2,\"create-hmac\":106}],138:[function(require,module,exports){\n(function (Buffer){\nvar parseKeys = require('parse-asn1');\nvar mgf = require('./mgf');\nvar xor = require('./xor');\nvar bn = require('bn.js');\nvar crt = require('browserify-rsa');\nvar createHash = require('create-hash');\nvar withPublic = require('./withPublic');\nmodule.exports = function privateDecrypt(private_key, enc, reverse) {\n  var padding;\n  if (private_key.padding) {\n    padding = private_key.padding;\n  } else if (reverse) {\n    padding = 1;\n  } else {\n    padding = 4;\n  }\n  \n  var key = parseKeys(private_key);\n  var k = key.modulus.byteLength();\n  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {\n    throw new Error('decryption error');\n  }\n  var msg;\n  if (reverse) {\n    msg = withPublic(new bn(enc), key);\n  } else {\n    msg = crt(enc, key);\n  }\n  var zBuffer = new Buffer(k - msg.length);\n  zBuffer.fill(0);\n  msg = Buffer.concat([zBuffer, msg], k);\n  if (padding === 4) {\n    return oaep(key, msg);\n  } else if (padding === 1) {\n    return pkcs1(key, msg, reverse);\n  } else if (padding === 3) {\n    return msg;\n  } else {\n    throw new Error('unknown padding');\n  }\n};\n\nfunction oaep(key, msg){\n  var n = key.modulus;\n  var k = key.modulus.byteLength();\n  var mLen = msg.length;\n  var iHash = createHash('sha1').update(new Buffer('')).digest();\n  var hLen = iHash.length;\n  var hLen2 = 2 * hLen;\n  if (msg[0] !== 0) {\n    throw new Error('decryption error');\n  }\n  var maskedSeed = msg.slice(1, hLen + 1);\n  var maskedDb =  msg.slice(hLen + 1);\n  var seed = xor(maskedSeed, mgf(maskedDb, hLen));\n  var db = xor(maskedDb, mgf(seed, k - hLen - 1));\n  if (compare(iHash, db.slice(0, hLen))) {\n    throw new Error('decryption error');\n  }\n  var i = hLen;\n  while (db[i] === 0) {\n    i++;\n  }\n  if (db[i++] !== 1) {\n    throw new Error('decryption error');\n  }\n  return db.slice(i);\n}\n\nfunction pkcs1(key, msg, reverse){\n  var p1 = msg.slice(0, 2);\n  var i = 2;\n  var status = 0;\n  while (msg[i++] !== 0) {\n    if (i >= msg.length) {\n      status++;\n      break;\n    }\n  }\n  var ps = msg.slice(2, i - 1);\n  var p2 = msg.slice(i - 1, i);\n\n  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){\n    status++;\n  }\n  if (ps.length < 8) {\n    status++;\n  }\n  if (status) {\n    throw new Error('decryption error');\n  }\n  return  msg.slice(i);\n}\nfunction compare(a, b){\n  a = new Buffer(a);\n  b = new Buffer(b);\n  var dif = 0;\n  var len = a.length;\n  if (a.length !== b.length) {\n    dif++;\n    len = Math.min(a.length, b.length);\n  }\n  var i = -1;\n  while (++i < len) {\n    dif += (a[i] ^ b[i]);\n  }\n  return dif;\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./mgf\":116,\"./withPublic\":140,\"./xor\":141,\"bn.js\":117,\"browserify-rsa\":118,\"buffer\":2,\"create-hash\":94,\"parse-asn1\":123}],139:[function(require,module,exports){\n(function (Buffer){\nvar parseKeys = require('parse-asn1');\nvar randomBytes = require('randombytes');\nvar createHash = require('create-hash');\nvar mgf = require('./mgf');\nvar xor = require('./xor');\nvar bn = require('bn.js');\nvar withPublic = require('./withPublic');\nvar crt = require('browserify-rsa');\n\nvar constants = {\n  RSA_PKCS1_OAEP_PADDING: 4,\n  RSA_PKCS1_PADDIN: 1,\n  RSA_NO_PADDING: 3\n};\n\nmodule.exports = function publicEncrypt(public_key, msg, reverse) {\n  var padding;\n  if (public_key.padding) {\n    padding = public_key.padding;\n  } else if (reverse) {\n    padding = 1;\n  } else {\n    padding = 4;\n  }\n  var key = parseKeys(public_key);\n  var paddedMsg;\n  if (padding === 4) {\n    paddedMsg = oaep(key, msg);\n  } else if (padding === 1) {\n    paddedMsg = pkcs1(key, msg, reverse);\n  } else if (padding === 3) {\n    paddedMsg = new bn(msg);\n    if (paddedMsg.cmp(key.modulus) >= 0) {\n      throw new Error('data too long for modulus');\n    }\n  } else {\n    throw new Error('unknown padding');\n  }\n  if (reverse) {\n    return crt(paddedMsg, key);\n  } else {\n    return withPublic(paddedMsg, key);\n  }\n};\n\nfunction oaep(key, msg){\n  var k = key.modulus.byteLength();\n  var mLen = msg.length;\n  var iHash = createHash('sha1').update(new Buffer('')).digest();\n  var hLen = iHash.length;\n  var hLen2 = 2 * hLen;\n  if (mLen > k - hLen2 - 2) {\n    throw new Error('message too long');\n  }\n  var ps = new Buffer(k - mLen - hLen2 - 2);\n  ps.fill(0);\n  var dblen = k - hLen - 1;\n  var seed = randomBytes(hLen);\n  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen));\n  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));\n}\nfunction pkcs1(key, msg, reverse){\n  var mLen = msg.length;\n  var k = key.modulus.byteLength();\n  if (mLen > k - 11) {\n    throw new Error('message too long');\n  }\n  var ps;\n  if (reverse) {\n    ps = new Buffer(k - mLen - 3);\n    ps.fill(0xff);\n  } else {\n    ps = nonZero(k - mLen - 3);\n  }\n  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));\n}\nfunction nonZero(len, crypto) {\n  var out = new Buffer(len);\n  var i = 0;\n  var cache = randomBytes(len*2);\n  var cur = 0;\n  var num;\n  while (i < len) {\n    if (cur === cache.length) {\n      cache = randomBytes(len*2);\n      cur = 0;\n    }\n    num = cache[cur++];\n    if (num) {\n      out[i++] = num;\n    }\n  }\n  return out;\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./mgf\":116,\"./withPublic\":140,\"./xor\":141,\"bn.js\":117,\"browserify-rsa\":118,\"buffer\":2,\"create-hash\":94,\"parse-asn1\":123,\"randombytes\":142}],140:[function(require,module,exports){\n(function (Buffer){\nvar bn = require('bn.js');\nfunction withPublic(paddedMsg, key) {\n  return new Buffer(paddedMsg\n    .toRed(bn.mont(key.modulus))\n    .redPow(new bn(key.publicExponent))\n    .fromRed()\n    .toArray());\n}\n\nmodule.exports = withPublic;\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"bn.js\":117,\"buffer\":2}],141:[function(require,module,exports){\nmodule.exports = function xor(a, b) {\n  var len = a.length;\n  var i = -1;\n  while (++i < len) {\n    a[i] ^= b[i];\n  }\n  return a\n};\n},{}],142:[function(require,module,exports){\n(function (process,global,Buffer){\n'use strict';\n\nvar crypto = global.crypto || global.msCrypto\nif(crypto && crypto.getRandomValues) {\n  module.exports = randomBytes;\n} else {\n  module.exports = oldBrowser;\n}\nfunction randomBytes(size, cb) {\n  var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array\n    /* This will not work in older browsers.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n     */\n\n  crypto.getRandomValues(bytes);\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes);\n    });\n  }\n  return bytes;\n}\nfunction oldBrowser() {\n  throw new Error(\n      'secure random number generation not supported by this browser\\n'+\n      'use chrome, FireFox or Internet Explorer 11'\n    )\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"buffer\").Buffer)\n\n},{\"_process\":146,\"buffer\":2}],143:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],144:[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],145:[function(require,module,exports){\nmodule.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n},{}],146:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],147:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_duplex.js\")\n\n},{\"./lib/_stream_duplex.js\":148}],148:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nforEach(objectKeys(Writable.prototype), function(method) {\n  if (!Duplex.prototype[method])\n    Duplex.prototype[method] = Writable.prototype[method];\n});\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false)\n    this.readable = false;\n\n  if (options && options.writable === false)\n    this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false)\n    this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended)\n    return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  process.nextTick(this.end.bind(this));\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"./_stream_readable\":150,\"./_stream_writable\":152,\"_process\":146,\"core-util-is\":153,\"inherits\":144}],149:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough))\n    return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n},{\"./_stream_transform\":151,\"core-util-is\":153,\"inherits\":144}],150:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n\n\n/*<replacement>*/\nvar debug = require('util');\nif (debug && debug.debuglog) {\n  debug = debug.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (util.isString(chunk) && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (util.isNullOrUndefined(chunk)) {\n    state.reading = false;\n    if (!state.ended)\n      onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding)\n        chunk = state.decoder.write(chunk);\n\n      if (!addToFront)\n        state.reading = false;\n\n      // if we want the data now, just emit it.\n      if (state.flowing && state.length === 0 && !state.sync) {\n        stream.emit('data', chunk);\n        stream.read(0);\n      } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (isNaN(n) || util.isNull(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n\n  if (n <= 0)\n    return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark)\n    state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else\n      return state.length;\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (!util.isNumber(n) || n > 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended)\n      endReadable(this);\n    else\n      emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0)\n      endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (util.isNull(ret)) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0)\n    endReadable(this);\n\n  if (!util.isNull(ret))\n    this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync)\n      process.nextTick(function() {\n        emitReadable_(stream);\n      });\n    else\n      emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function() {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&\n              dest !== process.stdout &&\n              dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    process.nextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain &&\n        (!dest._writableState || dest._writableState.needDrain))\n      ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      debug('false write response, pause',\n            src._readableState.awaitDrain);\n      src._readableState.awaitDrain++;\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error)\n    dest.on('error', onerror);\n  else if (isArray(dest._events.error))\n    dest._events.error.unshift(onerror);\n  else\n    dest._events.error = [onerror, dest._events.error];\n\n\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain)\n      state.awaitDrain--;\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        var self = this;\n        process.nextTick(function() {\n          debug('readable nexttick read 0');\n          self.read(0);\n        });\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    if (!state.reading) {\n      debug('resume read 0');\n      this.read(0);\n    }\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(function() {\n      resume_(stream, state);\n    });\n  }\n}\n\nfunction resume_(stream, state) {\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading)\n    stream.read(0);\n}\n\nReadable.prototype.pause = function() {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    debug('wrapped data');\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n    if (!chunk || !state.objectMode && !chunk.length)\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }}(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(function() {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf (xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n\n}).call(this,require('_process'))\n\n},{\"./_stream_duplex\":148,\"_process\":146,\"buffer\":2,\"core-util-is\":153,\"events\":143,\"inherits\":144,\"isarray\":145,\"stream\":158,\"string_decoder/\":159,\"util\":1}],151:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\n\nfunction TransformState(options, stream) {\n  this.afterTransform = function(er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb)\n    return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (!util.isNullOrUndefined(data))\n    stream.push(data);\n\n  if (cb)\n    cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\n\nfunction Transform(options) {\n  if (!(this instanceof Transform))\n    return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(options, this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  this.once('prefinish', function() {\n    if (util.isFunction(this._flush))\n      this._flush(function(er) {\n        done(stream, er);\n      });\n    else\n      done(stream);\n  });\n}\n\nTransform.prototype.push = function(chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function(chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform ||\n        rs.needReadable ||\n        rs.length < rs.highWaterMark)\n      this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n  var ts = this._transformState;\n\n  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\n\nfunction done(stream, er) {\n  if (er)\n    return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length)\n    throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming)\n    throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n},{\"./_stream_duplex\":148,\"core-util-is\":153,\"inherits\":144}],152:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\n\nutil.inherits(Writable, Stream);\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\n\nfunction WritableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.buffer = [];\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n}\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex))\n    return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\n\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  process.nextTick(function() {\n    cb(er);\n  });\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function() {\n      cb(er);\n    });\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (!util.isFunction(cb))\n    cb = function() {};\n\n  if (state.ended)\n    writeAfterEnd(this, state, cb);\n  else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function() {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function() {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing &&\n        !state.corked &&\n        !state.finished &&\n        !state.bufferProcessing &&\n        state.buffer.length)\n      clearBuffer(this, state);\n  }\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      util.isString(chunk)) {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing || state.corked)\n    state.buffer.push(new WriteReq(chunk, encoding, cb));\n  else\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev)\n    stream._writev(chunk, state.onwrite);\n  else\n    stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync)\n    process.nextTick(function() {\n      state.pendingcb--;\n      cb(er);\n    });\n  else {\n    state.pendingcb--;\n    cb(er);\n  }\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n\n    if (!finished &&\n        !state.corked &&\n        !state.bufferProcessing &&\n        state.buffer.length) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(function() {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n\n  if (stream._writev && state.buffer.length > 1) {\n    // Fast case, write everything using _writev()\n    var cbs = [];\n    for (var c = 0; c < state.buffer.length; c++)\n      cbs.push(state.buffer[c].callback);\n\n    // count the one we are adding, as well.\n    // TODO(isaacs) clean this up\n    state.pendingcb++;\n    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {\n      for (var i = 0; i < cbs.length; i++) {\n        state.pendingcb--;\n        cbs[i](err);\n      }\n    });\n\n    // Clear buffer\n    state.buffer = [];\n  } else {\n    // Slow case, write chunks one-by-one\n    for (var c = 0; c < state.buffer.length; c++) {\n      var entry = state.buffer[c];\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        c++;\n        break;\n      }\n    }\n\n    if (c < state.buffer.length)\n      state.buffer = state.buffer.slice(c);\n    else\n      state.buffer.length = 0;\n  }\n\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (util.isFunction(chunk)) {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (!util.isNullOrUndefined(chunk))\n    this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(stream, state) {\n  return (state.ending &&\n          state.length === 0 &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else\n      prefinish(stream, state);\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      process.nextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n}\n\n}).call(this,require('_process'))\n\n},{\"./_stream_duplex\":148,\"_process\":146,\"buffer\":2,\"core-util-is\":153,\"inherits\":144,\"stream\":158}],153:[function(require,module,exports){\n(function (Buffer){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nfunction isBuffer(arg) {\n  return Buffer.isBuffer(arg);\n}\nexports.isBuffer = isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":2}],154:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_passthrough.js\")\n\n},{\"./lib/_stream_passthrough.js\":149}],155:[function(require,module,exports){\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = require('stream');\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\n},{\"./lib/_stream_duplex.js\":148,\"./lib/_stream_passthrough.js\":149,\"./lib/_stream_readable.js\":150,\"./lib/_stream_transform.js\":151,\"./lib/_stream_writable.js\":152,\"stream\":158}],156:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_transform.js\")\n\n},{\"./lib/_stream_transform.js\":151}],157:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_writable.js\")\n\n},{\"./lib/_stream_writable.js\":152}],158:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n},{\"events\":143,\"inherits\":144,\"readable-stream/duplex.js\":147,\"readable-stream/passthrough.js\":154,\"readable-stream/readable.js\":155,\"readable-stream/transform.js\":156,\"readable-stream/writable.js\":157}],159:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n\n},{\"buffer\":2}],160:[function(require,module,exports){\nvar indexOf = require('indexof');\n\nvar Object_keys = function (obj) {\n    if (Object.keys) return Object.keys(obj)\n    else {\n        var res = [];\n        for (var key in obj) res.push(key)\n        return res;\n    }\n};\n\nvar forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn)\n    else for (var i = 0; i < xs.length; i++) {\n        fn(xs[i], i, xs);\n    }\n};\n\nvar defineProp = (function() {\n    try {\n        Object.defineProperty({}, '_', {});\n        return function(obj, name, value) {\n            Object.defineProperty(obj, name, {\n                writable: true,\n                enumerable: false,\n                configurable: true,\n                value: value\n            })\n        };\n    } catch(e) {\n        return function(obj, name, value) {\n            obj[name] = value;\n        };\n    }\n}());\n\nvar globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',\n'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',\n'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',\n'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',\n'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];\n\nfunction Context() {}\nContext.prototype = {};\n\nvar Script = exports.Script = function NodeScript (code) {\n    if (!(this instanceof Script)) return new Script(code);\n    this.code = code;\n};\n\nScript.prototype.runInContext = function (context) {\n    if (!(context instanceof Context)) {\n        throw new TypeError(\"needs a 'context' argument.\");\n    }\n    \n    var iframe = document.createElement('iframe');\n    if (!iframe.style) iframe.style = {};\n    iframe.style.display = 'none';\n    \n    document.body.appendChild(iframe);\n    \n    var win = iframe.contentWindow;\n    var wEval = win.eval, wExecScript = win.execScript;\n\n    if (!wEval && wExecScript) {\n        // win.eval() magically appears when this is called in IE:\n        wExecScript.call(win, 'null');\n        wEval = win.eval;\n    }\n    \n    forEach(Object_keys(context), function (key) {\n        win[key] = context[key];\n    });\n    forEach(globals, function (key) {\n        if (context[key]) {\n            win[key] = context[key];\n        }\n    });\n    \n    var winKeys = Object_keys(win);\n\n    var res = wEval.call(win, this.code);\n    \n    forEach(Object_keys(win), function (key) {\n        // Avoid copying circular objects like `top` and `window` by only\n        // updating existing context properties or new properties in the `win`\n        // that was only introduced after the eval.\n        if (key in context || indexOf(winKeys, key) === -1) {\n            context[key] = win[key];\n        }\n    });\n\n    forEach(globals, function (key) {\n        if (!(key in context)) {\n            defineProp(context, key, win[key]);\n        }\n    });\n    \n    document.body.removeChild(iframe);\n    \n    return res;\n};\n\nScript.prototype.runInThisContext = function () {\n    return eval(this.code); // maybe...\n};\n\nScript.prototype.runInNewContext = function (context) {\n    var ctx = Script.createContext(context);\n    var res = this.runInContext(ctx);\n\n    forEach(Object_keys(ctx), function (key) {\n        context[key] = ctx[key];\n    });\n\n    return res;\n};\n\nforEach(Object_keys(Script.prototype), function (name) {\n    exports[name] = Script[name] = function (code) {\n        var s = Script(code);\n        return s[name].apply(s, [].slice.call(arguments, 1));\n    };\n});\n\nexports.createScript = function (code) {\n    return exports.Script(code);\n};\n\nexports.createContext = Script.createContext = function (context) {\n    var copy = new Context();\n    if(typeof context === 'object') {\n        forEach(Object_keys(context), function (key) {\n            copy[key] = context[key];\n        });\n    }\n    return copy;\n};\n\n},{\"indexof\":161}],161:[function(require,module,exports){\n\nvar indexOf = [].indexOf;\n\nmodule.exports = function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};\n},{}],162:[function(require,module,exports){\nBigNumber = require('bignumber.js');\n\n},{\"bignumber.js\":163}],163:[function(require,module,exports){\n/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */\n\n;(function (global) {\n    'use strict';\n\n    /*\n      bignumber.js v2.0.7\n      A JavaScript library for arbitrary-precision arithmetic.\n      https://github.com/MikeMcl/bignumber.js\n      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>\n      MIT Expat Licence\n    */\n\n\n    var BigNumber, crypto, parseNumeric,\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n        notBool = ' not a boolean or binary digit',\n        roundingMode = 'rounding mode',\n        tooManyDigits = 'number type has more than 15 significant digits',\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n        /*\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\n         * exception is thrown (if ERRORS is true).\n         */\n        MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n    /*\n     * Create and return a BigNumber constructor.\n     */\n    function another(configObj) {\n        var div,\n\n            // id tracks the caller function, so its name can be included in error messages.\n            id = 0,\n            P = BigNumber.prototype,\n            ONE = new BigNumber(1),\n\n\n            /********************************* EDITABLE DEFAULTS **********************************/\n\n\n            /*\n             * The default values below must be integers within the inclusive ranges stated.\n             * The values can also be changed at run-time using BigNumber.config.\n             */\n\n            // The maximum number of decimal places for operations involving division.\n            DECIMAL_PLACES = 20,                     // 0 to MAX\n\n            /*\n             * The rounding mode used when rounding to the above decimal places, and when using\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\n             * UP         0 Away from zero.\n             * DOWN       1 Towards zero.\n             * CEIL       2 Towards +Infinity.\n             * FLOOR      3 Towards -Infinity.\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n             */\n            ROUNDING_MODE = 4,                       // 0 to 8\n\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n            // The exponent value at and beneath which toString returns exponential notation.\n            // Number type: -7\n            TO_EXP_NEG = -7,                         // 0 to -MAX\n\n            // The exponent value at and above which toString returns exponential notation.\n            // Number type: 21\n            TO_EXP_POS = 21,                         // 0 to MAX\n\n            // RANGE : [MIN_EXP, MAX_EXP]\n\n            // The minimum exponent value, beneath which underflow to zero occurs.\n            // Number type: -324  (5e-324)\n            MIN_EXP = -1e7,                          // -1 to -MAX\n\n            // The maximum exponent value, above which overflow to Infinity occurs.\n            // Number type:  308  (1.7976931348623157e+308)\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n            MAX_EXP = 1e7,                           // 1 to MAX\n\n            // Whether BigNumber Errors are ever thrown.\n            ERRORS = true,                           // true or false\n\n            // Change to intValidatorNoErrors if ERRORS is false.\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\n\n            // Whether to use cryptographically-secure random number generation, if available.\n            CRYPTO = false,                          // true or false\n\n            /*\n             * The modulo mode used when calculating the modulus: a mod n.\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n             * The remainder (r) is calculated as: r = a - n * q.\n             *\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\n             * DOWN      1 The remainder has the same sign as the dividend.\n             *             This modulo mode is commonly known as 'truncated division' and is\n             *             equivalent to (a % n) in JavaScript.\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n             *             The remainder is always positive.\n             *\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\n             * modes are commonly used for the modulus operation.\n             * Although the other rounding modes can also be used, they may not give useful results.\n             */\n            MODULO_MODE = 1,                         // 0 to 9\n\n            // The maximum number of significant digits of the result of the toPower operation.\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\n            POW_PRECISION = 100,                     // 0 to MAX\n\n            // The format specification used by the BigNumber.prototype.toFormat method.\n            FORMAT = {\n                decimalSeparator: '.',\n                groupSeparator: ',',\n                groupSize: 3,\n                secondaryGroupSize: 0,\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\n                fractionGroupSize: 0\n            };\n\n\n        /******************************************************************************************/\n\n\n        // CONSTRUCTOR\n\n\n        /*\n         * The BigNumber constructor and exported function.\n         * Create and return a new instance of a BigNumber object.\n         *\n         * n {number|string|BigNumber} A numeric value.\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\n         */\n        function BigNumber( n, b ) {\n            var c, e, i, num, len, str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if ( !( x instanceof BigNumber ) ) {\n\n                // 'BigNumber() constructor call without new: {n}'\n                if (ERRORS) raise( 26, 'constructor call without new', n );\n                return new BigNumber( n, b );\n            }\n\n            // 'new BigNumber() base not an integer: {b}'\n            // 'new BigNumber() base out of range: {b}'\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\n\n                // Duplicate.\n                if ( n instanceof BigNumber ) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = ( n = n.c ) ? n.slice() : n;\n                    id = 0;\n                    return;\n                }\n\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\n\n                    // Fast path for integers.\n                    if ( n === ~~n ) {\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\n                        x.e = e;\n                        x.c = [n];\n                        id = 0;\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\n                }\n            } else {\n                b = b | 0;\n                str = n + '';\n\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n                // Allow exponential notation to be used with base 10 argument.\n                if ( b == 10 ) {\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\n                }\n\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                // Any number in exponential form will fail due to the [Ee][+-].\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\n                    return parseNumeric( x, str, num, b );\n                }\n\n                if (num) {\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\n\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\n\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                        raise( id, tooManyDigits, n );\n                    }\n\n                    // Prevent later check for length on converted number.\n                    num = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\n                }\n\n                str = convertBase( str, 10, b, x.s );\n            }\n\n            // Decimal point?\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\n\n            // Exponential form?\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\n\n                // Determine exponent.\n                if ( e < 0 ) e = i;\n                e += +str.slice( i + 1 );\n                str = str.substring( 0, i );\n            } else if ( e < 0 ) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\n\n            // Determine trailing zeros.\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\n            str = str.slice( i, len + 1 );\n\n            if (str) {\n                len = str.length;\n\n                // Disallow numbers with over 15 significant digits if number type.\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );\n\n                e = e - i - 1;\n\n                 // Overflow?\n                if ( e > MAX_EXP ) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                // Underflow?\n                } else if ( e < MIN_EXP ) {\n\n                    // Zero.\n                    x.c = [ x.e = 0 ];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = ( e + 1 ) % LOG_BASE;\n                    if ( e < 0 ) i += LOG_BASE;\n\n                    if ( i < len ) {\n                        if (i) x.c.push( +str.slice( 0, i ) );\n\n                        for ( len -= LOG_BASE; i < len; ) {\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for ( ; i--; str += '0' );\n                    x.c.push( +str );\n                }\n            } else {\n\n                // Zero.\n                x.c = [ x.e = 0 ];\n            }\n\n            id = 0;\n        }\n\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.another = another;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n\n        /*\n         * Configure infrequently-changing library-wide settings.\n         *\n         * Accept an object or an argument list, with one or many of the following properties or\n         * parameters respectively:\n         *\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\n         *   MODULO_MODE     {number}           0 to 9 inclusive\n         *   POW_PRECISION   {number}           0 to MAX inclusive\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\n         *      decimalSeparator       {string}\n         *      groupSeparator         {string}\n         *      groupSize              {number}\n         *      secondaryGroupSize     {number}\n         *      fractionGroupSeparator {string}\n         *      fractionGroupSize      {number}\n         *\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\n         *\n         * E.g.\n         * BigNumber.config(20, 4) is equivalent to\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n         *\n         * Ignore properties/parameters set to null or undefined.\n         * Return an object with the properties current values.\n         */\n        BigNumber.config = function () {\n            var v, p,\n                i = 0,\n                r = {},\n                a = arguments,\n                o = a[0],\n                has = o && typeof o == 'object'\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\n\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n            // 'config() DECIMAL_PLACES not an integer: {v}'\n            // 'config() DECIMAL_PLACES out of range: {v}'\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\n                DECIMAL_PLACES = v | 0;\n            }\n            r[p] = DECIMAL_PLACES;\n\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n            // 'config() ROUNDING_MODE not an integer: {v}'\n            // 'config() ROUNDING_MODE out of range: {v}'\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\n                ROUNDING_MODE = v | 0;\n            }\n            r[p] = ROUNDING_MODE;\n\n            // EXPONENTIAL_AT {number|number[]}\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\n            // 'config() EXPONENTIAL_AT out of range: {v}'\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\n\n                if ( isArray(v) ) {\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\n                        TO_EXP_NEG = v[0] | 0;\n                        TO_EXP_POS = v[1] | 0;\n                    }\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\n                }\n            }\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\n\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n            // 'config() RANGE not an integer: {v}'\n            // 'config() RANGE cannot be zero: {v}'\n            // 'config() RANGE out of range: {v}'\n            if ( has( p = 'RANGE' ) ) {\n\n                if ( isArray(v) ) {\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\n                        MIN_EXP = v[0] | 0;\n                        MAX_EXP = v[1] | 0;\n                    }\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\n                }\n            }\n            r[p] = [ MIN_EXP, MAX_EXP ];\n\n            // ERRORS {boolean|number} true, false, 1 or 0.\n            // 'config() ERRORS not a boolean or binary digit: {v}'\n            if ( has( p = 'ERRORS' ) ) {\n\n                if ( v === !!v || v === 1 || v === 0 ) {\n                    id = 0;\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\n                } else if (ERRORS) {\n                    raise( 2, p + notBool, v );\n                }\n            }\n            r[p] = ERRORS;\n\n            // CRYPTO {boolean|number} true, false, 1 or 0.\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\n            // 'config() crypto unavailable: {crypto}'\n            if ( has( p = 'CRYPTO' ) ) {\n\n                if ( v === !!v || v === 1 || v === 0 ) {\n                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );\n                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );\n                } else if (ERRORS) {\n                    raise( 2, p + notBool, v );\n                }\n            }\n            r[p] = CRYPTO;\n\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n            // 'config() MODULO_MODE not an integer: {v}'\n            // 'config() MODULO_MODE out of range: {v}'\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\n                MODULO_MODE = v | 0;\n            }\n            r[p] = MODULO_MODE;\n\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n            // 'config() POW_PRECISION not an integer: {v}'\n            // 'config() POW_PRECISION out of range: {v}'\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\n                POW_PRECISION = v | 0;\n            }\n            r[p] = POW_PRECISION;\n\n            // FORMAT {object}\n            // 'config() FORMAT not an object: {v}'\n            if ( has( p = 'FORMAT' ) ) {\n\n                if ( typeof v == 'object' ) {\n                    FORMAT = v;\n                } else if (ERRORS) {\n                    raise( 2, p + ' not an object', v );\n                }\n            }\n            r[p] = FORMAT;\n\n            return r;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the maximum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\n\n\n        /*\n         * Return a new BigNumber whose value is the minimum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\n\n\n        /*\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n         * zeros are produced).\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         *\n         * 'random() decimal places not an integer: {dp}'\n         * 'random() decimal places out of range: {dp}'\n         * 'random() crypto unavailable: {crypto}'\n         */\n        BigNumber.random = (function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n                  (Math.random() * 0x800000 | 0); };\n\n            return function (dp) {\n                var a, b, e, k, v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\n                k = mathceil( dp / LOG_BASE );\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if ( crypto && crypto.getRandomValues ) {\n\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\n\n                        for ( ; i < k; ) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if ( v >= 9e15 ) {\n                                b = crypto.getRandomValues( new Uint32Array(2) );\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push( v % 1e14 );\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                    // Node.js supporting crypto.randomBytes.\n                    } else if ( crypto && crypto.randomBytes ) {\n\n                        // buffer\n                        a = crypto.randomBytes( k *= 7 );\n\n                        for ( ; i < k; ) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\n\n                            if ( v >= 9e15 ) {\n                                crypto.randomBytes(7).copy( a, i );\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push( v % 1e14 );\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else if (ERRORS) {\n                        raise( 14, 'crypto unavailable', crypto );\n                    }\n                }\n\n                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.\n                if (!i) {\n\n                    for ( ; i < k; ) {\n                        v = random53bitInt();\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if ( k && dp ) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor( k / v ) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for ( ; c[i] === 0; c.pop(), i-- );\n\n                // Zero?\n                if ( i < 0 ) {\n                    c = [ e = 0 ];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        })();\n\n\n        // PRIVATE FUNCTIONS\n\n\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\n        function convertBase( str, baseOut, baseIn, sign ) {\n            var d, e, k, r, x, xc, y,\n                i = str.indexOf( '.' ),\n                dp = DECIMAL_PLACES,\n                rm = ROUNDING_MODE;\n\n            if ( baseIn < 37 ) str = str.toLowerCase();\n\n            // Non-integer.\n            if ( i >= 0 ) {\n                k = POW_PRECISION;\n\n                // Unlimited precision.\n                POW_PRECISION = 0;\n                str = str.replace( '.', '' );\n                y = new BigNumber(baseIn);\n                x = y.pow( str.length - i );\n                POW_PRECISION = k;\n\n                // Convert str as if an integer, then restore the fraction part by dividing the\n                // result by its base raised to a power.\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\n                y.e = y.c.length;\n            }\n\n            // Convert the number as integer.\n            xc = toBaseOut( str, baseIn, baseOut );\n            e = k = xc.length;\n\n            // Remove trailing zeros.\n            for ( ; xc[--k] == 0; xc.pop() );\n            if ( !xc[0] ) return '0';\n\n            if ( i < 0 ) {\n                --e;\n            } else {\n                x.c = xc;\n                x.e = e;\n\n                // sign is needed for correct rounding.\n                x.s = sign;\n                x = div( x, y, dp, rm, baseOut );\n                xc = x.c;\n                r = x.r;\n                e = x.e;\n            }\n\n            d = e + dp + 1;\n\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\n            i = xc[d];\n            k = baseOut / 2;\n            r = r || d < 0 || xc[d + 1] != null;\n\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n                         rm == ( x.s < 0 ? 8 : 7 ) );\n\n            if ( d < 1 || !xc[0] ) {\n\n                // 1^-dp or 0.\n                str = r ? toFixedPoint( '1', -dp ) : '0';\n            } else {\n                xc.length = d;\n\n                if (r) {\n\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\n                        xc[d] = 0;\n\n                        if ( !d ) {\n                            ++e;\n                            xc.unshift(1);\n                        }\n                    }\n                }\n\n                // Determine trailing zeros.\n                for ( k = xc.length; !xc[--k]; );\n\n                // E.g. [4, 11, 15] becomes 4bf.\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\n                str = toFixedPoint( str, e );\n            }\n\n            // The caller will add the sign.\n            return str;\n        }\n\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = (function () {\n\n            // Assume non-zero x and k.\n            function multiply( x, k, base ) {\n                var m, temp, xlo, xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for ( x = x.slice(); i--; ) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x.unshift(carry);\n\n                return x;\n            }\n\n            function compare( a, b, aL, bL ) {\n                var i, cmp;\n\n                if ( aL != bL ) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for ( i = cmp = 0; i < aL; i++ ) {\n\n                        if ( a[i] != b[i] ) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n                return cmp;\n            }\n\n            function subtract( a, b, aL, base ) {\n                var i = 0;\n\n                // Subtract b from a.\n                for ( ; aL--; ) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for ( ; !a[0] && a.length > 1; a.shift() );\n            }\n\n            // x: dividend, y: divisor.\n            return function ( x, y, dp, rm, base ) {\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n                    yL, yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\n\n                    return new BigNumber(\n\n                      // Return NaN if either NaN, or both Infinity or 0.\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\n\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n                    );\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if ( !base ) {\n                    base = BASE;\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\n\n                if ( s < 0 ) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor( base / ( yc[0] + 1 ) );\n\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\n                    if ( n > 1 ) {\n                        yc = multiply( yc, n, base );\n                        xc = multiply( xc, n, base );\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice( 0, yL );\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for ( ; remL < yL; rem[remL++] = 0 );\n                    yz = yc.slice();\n                    yz.unshift(0);\n                    yc0 = yc[0];\n                    if ( yc[1] >= base / 2 ) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare( yc, rem, yL, remL );\n\n                        // If divisor < remainder.\n                        if ( cmp < 0 ) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor( rem0 / yc0 );\n\n                            //  Algorithm:\n                            //  1. product = divisor * trial digit (n)\n                            //  2. if product > remainder: product -= divisor, n--\n                            //  3. remainder -= product\n                            //  4. if product was < remainder at 2:\n                            //    5. compare new remainder and divisor\n                            //    6. If remainder > divisor: remainder -= divisor, n++\n\n                            if ( n > 1 ) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply( yc, n, base );\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder.\n                                // Trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if ( n == 0 ) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if ( prodL < remL ) prod.unshift(0);\n\n                            // Subtract product from remainder.\n                            subtract( rem, prod, remL, base );\n                            remL = rem.length;\n\n                             // If product was < remainder.\n                            if ( cmp == -1 ) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if ( cmp === 0 ) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if ( rem[0] ) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [ xc[xi] ];\n                            remL = 1;\n                        }\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if ( !qc[0] ) qc.shift();\n                }\n\n                if ( base == BASE ) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\n\n                // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        })();\n\n\n        /*\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\n         * notation rounded to the specified decimal places or significant digits.\n         *\n         * n is a BigNumber.\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\n         * rm is the rounding mode.\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\n         */\n        function format( n, i, rm, caller ) {\n            var c0, e, ne, len, str;\n\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\n              ? rm | 0 : ROUNDING_MODE;\n\n            if ( !n.c ) return n.toString();\n            c0 = n.c[0];\n            ne = n.e;\n\n            if ( i == null ) {\n                str = coeffToString( n.c );\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\n                  ? toExponential( str, ne )\n                  : toFixedPoint( str, ne );\n            } else {\n                n = round( new BigNumber(n), i, rm );\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString( n.c );\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\n\n                    // Append zeros?\n                    for ( ; len < i; str += '0', len++ );\n                    str = toExponential( str, e );\n\n                // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint( str, e );\n\n                    // Append zeros?\n                    if ( e + 1 > len ) {\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\n                    } else {\n                        i += e - len;\n                        if ( i > 0 ) {\n                            if ( e + 1 == len ) str += '.';\n                            for ( ; i--; str += '0' );\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin( args, method ) {\n            var m, n,\n                i = 0;\n\n            if ( isArray( args[0] ) ) args = args[0];\n            m = new BigNumber( args[0] );\n\n            for ( ; ++i < args.length; ) {\n                n = new BigNumber( args[i] );\n\n                // If any number is NaN, return NaN.\n                if ( !n.s ) {\n                    m = n;\n                    break;\n                } else if ( method.call( m, n ) ) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n\n        /*\n         * Return true if n is an integer in range, otherwise throw.\n         * Use for argument validation when ERRORS is true.\n         */\n        function intValidatorWithErrors( n, min, max, caller, name ) {\n            if ( n < min || n > max || n != truncate(n) ) {\n                raise( caller, ( name || 'decimal places' ) +\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\n            }\n\n            return true;\n        }\n\n\n        /*\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n         * Called by minus, plus and times.\n         */\n        function normalise( n, c, e ) {\n            var i = 1,\n                j = c.length;\n\n             // Remove trailing zeros.\n            for ( ; !c[--j]; c.pop() );\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\n\n            // Overflow?\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n            // Underflow?\n            } else if ( e < MIN_EXP ) {\n\n                // Zero.\n                n.c = [ n.e = 0 ];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = (function () {\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n            return function ( x, str, num, b ) {\n                var base,\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\n\n                // No exception on ±Infinity or NaN.\n                if ( isInfinityOrNaN.test(s) ) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                } else {\n                    if ( !num ) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\n                        }\n\n                        if ( str != s ) return new BigNumber( s, base );\n                    }\n\n                    // 'new BigNumber() not a number: {n}'\n                    // 'new BigNumber() not a base {b} number: {n}'\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\n                    x.s = null;\n                }\n\n                x.c = x.e = null;\n                id = 0;\n            }\n        })();\n\n\n        // Throw a BigNumber Error.\n        function raise( caller, msg, val ) {\n            var error = new Error( [\n                'new BigNumber',     // 0\n                'cmp',               // 1\n                'config',            // 2\n                'div',               // 3\n                'divToInt',          // 4\n                'eq',                // 5\n                'gt',                // 6\n                'gte',               // 7\n                'lt',                // 8\n                'lte',               // 9\n                'minus',             // 10\n                'mod',               // 11\n                'plus',              // 12\n                'precision',         // 13\n                'random',            // 14\n                'round',             // 15\n                'shift',             // 16\n                'times',             // 17\n                'toDigits',          // 18\n                'toExponential',     // 19\n                'toFixed',           // 20\n                'toFormat',          // 21\n                'toFraction',        // 22\n                'pow',               // 23\n                'toPrecision',       // 24\n                'toString',          // 25\n                'BigNumber'          // 26\n            ][caller] + '() ' + msg + ': ' + val );\n\n            error.name = 'BigNumber Error';\n            id = 0;\n            throw error;\n        }\n\n\n        /*\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n         * If r is truthy, it is known that there are more digits after the rounding digit.\n         */\n        function round( x, sd, rm, r ) {\n            var d, i, j, k, n, ni, rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if ( i < 0 ) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ ni = 0 ];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\n                    } else {\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\n\n                        if ( ni >= xc.length ) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for ( ; xc.length <= ni; xc.push(0) );\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for ( d = 1; k >= 10; k /= 10, d++ );\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                    // Are there any non-zero digits after the rounding digit?\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\n\n                    r = rm < 4\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\n\n                        // Check whether the digit to the left of the rounding digit is odd.\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\n                          rm == ( x.s < 0 ? 8 : 7 ) );\n\n                    if ( sd < 1 || !xc[0] ) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[ sd % LOG_BASE ];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if ( i == 0 ) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[ LOG_BASE - i ];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for ( ; ; ) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if ( ni == 0 ) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\n                                j = xc[0] += k;\n                                for ( k = 1; j >= 10; j /= 10, k++ );\n\n                                // if i != k the length has increased.\n                                if ( i != k ) {\n                                    x.e++;\n                                    if ( xc[0] == BASE ) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if ( xc[ni] != BASE ) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\n                }\n\n                // Overflow? Infinity.\n                if ( x.e > MAX_EXP ) {\n                    x.c = x.e = null;\n\n                // Underflow? Zero.\n                } else if ( x.e < MIN_EXP ) {\n                    x.c = [ x.e = 0 ];\n                }\n            }\n\n            return x;\n        }\n\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if ( x.s < 0 ) x.s = 1;\n            return x;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n         * number in the direction of Infinity.\n         */\n        P.ceil = function () {\n            return round( new BigNumber(this), this.e + 1, 2 );\n        };\n\n\n        /*\n         * Return\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * 0 if they have the same value,\n         * or null if the value of either is NaN.\n         */\n        P.comparedTo = P.cmp = function ( y, b ) {\n            id = 1;\n            return compare( this, new BigNumber( y, b ) );\n        };\n\n\n        /*\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\n         * of this BigNumber is ±Infinity or NaN.\n         */\n        P.decimalPlaces = P.dp = function () {\n            var n, v,\n                c = this.c;\n\n            if ( !c ) return null;\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\n            if ( n < 0 ) n = 0;\n\n            return n;\n        };\n\n\n        /*\n         *  n / 0 = I\n         *  n / N = N\n         *  n / I = 0\n         *  0 / n = 0\n         *  0 / 0 = N\n         *  0 / N = N\n         *  0 / I = 0\n         *  N / n = N\n         *  N / 0 = N\n         *  N / N = N\n         *  N / I = N\n         *  I / n = I\n         *  I / 0 = I\n         *  I / N = N\n         *  I / I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.dividedBy = P.div = function ( y, b ) {\n            id = 3;\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\n         * BigNumber by the value of BigNumber(y, b).\n         */\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\n            id = 4;\n            return div( this, new BigNumber( y, b ), 0, 1 );\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.equals = P.eq = function ( y, b ) {\n            id = 5;\n            return compare( this, new BigNumber( y, b ) ) === 0;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n         * number in the direction of -Infinity.\n         */\n        P.floor = function () {\n            return round( new BigNumber(this), this.e + 1, 3 );\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.greaterThan = P.gt = function ( y, b ) {\n            id = 6;\n            return compare( this, new BigNumber( y, b ) ) > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than or equal to the value of\n         * BigNumber(y, b), otherwise returns false.\n         */\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\n            id = 7;\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\n\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\n         */\n        P.isInteger = P.isInt = function () {\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\n         */\n        P.isNegative = P.isNeg = function () {\n            return this.s < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.lessThan = P.lt = function ( y, b ) {\n            id = 8;\n            return compare( this, new BigNumber( y, b ) ) < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than or equal to the value of\n         * BigNumber(y, b), otherwise returns false.\n         */\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\n            id = 9;\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\n        };\n\n\n        /*\n         *  n - 0 = n\n         *  n - N = N\n         *  n - I = -I\n         *  0 - n = -n\n         *  0 - 0 = 0\n         *  0 - N = N\n         *  0 - I = -I\n         *  N - n = N\n         *  N - 0 = N\n         *  N - N = N\n         *  N - I = N\n         *  I - n = I\n         *  I - 0 = I\n         *  I - N = N\n         *  I - I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n         * BigNumber(y, b).\n         */\n        P.minus = P.sub = function ( y, b ) {\n            var i, j, t, xLTy,\n                x = this,\n                a = x.s;\n\n            id = 10;\n            y = new BigNumber( y, b );\n            b = y.s;\n\n            // Either NaN?\n            if ( !a || !b ) return new BigNumber(NaN);\n\n            // Signs differ?\n            if ( a != b ) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if ( !xe || !ye ) {\n\n                // Either Infinity?\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\n\n                // Either zero?\n                if ( !xc[0] || !yc[0] ) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\n\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                      ROUNDING_MODE == 3 ? -0 : 0 );\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if ( a = xe - ye ) {\n\n                if ( xLTy = a < 0 ) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for ( b = a; b--; t.push(0) );\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\n\n                for ( a = b = 0; b < j; b++ ) {\n\n                    if ( xc[b] != yc[b] ) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = ( j = yc.length ) - ( i = xc.length );\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for ( ; j > a; ) {\n\n                if ( xc[--j] < yc[j] ) {\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for ( ; xc[0] == 0; xc.shift(), --ye );\n\n            // Zero?\n            if ( !xc[0] ) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [ y.e = 0 ];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise( y, xc, ye );\n        };\n\n\n        /*\n         *   n % 0 =  N\n         *   n % N =  N\n         *   n % I =  n\n         *   0 % n =  0\n         *  -0 % n = -0\n         *   0 % 0 =  N\n         *   0 % N =  N\n         *   0 % I =  0\n         *   N % n =  N\n         *   N % 0 =  N\n         *   N % N =  N\n         *   N % I =  N\n         *   I % n =  N\n         *   I % 0 =  N\n         *   I % N =  N\n         *   I % I =  N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n         */\n        P.modulo = P.mod = function ( y, b ) {\n            var q, s,\n                x = this;\n\n            id = 11;\n            y = new BigNumber( y, b );\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\n                return new BigNumber(NaN);\n\n            // Return x if y is Infinity or x is zero.\n            } else if ( !y.c || x.c && !x.c[0] ) {\n                return new BigNumber(x);\n            }\n\n            if ( MODULO_MODE == 9 ) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div( x, y, 0, 3 );\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div( x, y, 0, MODULO_MODE );\n            }\n\n            return x.minus( q.times(y) );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\n         * i.e. multiplied by -1.\n         */\n        P.negated = P.neg = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n\n        /*\n         *  n + 0 = n\n         *  n + N = N\n         *  n + I = I\n         *  0 + n = n\n         *  0 + 0 = 0\n         *  0 + N = N\n         *  0 + I = I\n         *  N + n = N\n         *  N + 0 = N\n         *  N + N = N\n         *  N + I = N\n         *  I + n = I\n         *  I + 0 = I\n         *  I + N = N\n         *  I + I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n         * BigNumber(y, b).\n         */\n        P.plus = P.add = function ( y, b ) {\n            var t,\n                x = this,\n                a = x.s;\n\n            id = 12;\n            y = new BigNumber( y, b );\n            b = y.s;\n\n            // Either NaN?\n            if ( !a || !b ) return new BigNumber(NaN);\n\n            // Signs differ?\n             if ( a != b ) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if ( !xe || !ye ) {\n\n                // Return ±Infinity if either ±Infinity.\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if ( a = xe - ye ) {\n                if ( a > 0 ) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for ( ; a--; t.push(0) );\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for ( a = 0; b; ) {\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\n                xc[b] %= BASE;\n            }\n\n            if (a) {\n                xc.unshift(a);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise( y, xc, ye );\n        };\n\n\n        /*\n         * Return the number of significant digits of the value of this BigNumber.\n         *\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n         */\n        P.precision = P.sd = function (z) {\n            var n, v,\n                x = this,\n                c = x.c;\n\n            // 'precision() argument not a boolean or binary digit: {z}'\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\n                if ( z != !!z ) z = null;\n            }\n\n            if ( !c ) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if ( v = c[v] ) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for ( ; v % 10 == 0; v /= 10, n-- );\n\n                // Add the number of digits of the first element.\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\n            }\n\n            if ( z && x.e + 1 > n ) n = x.e + 1;\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\n         * omitted.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'round() decimal places out of range: {dp}'\n         * 'round() decimal places not an integer: {dp}'\n         * 'round() rounding mode not an integer: {rm}'\n         * 'round() rounding mode out of range: {rm}'\n         */\n        P.round = function ( dp, rm ) {\n            var n = new BigNumber(this);\n\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\n                round( n, ~~dp + this.e + 1, rm == null ||\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\n            }\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n         *\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n         *\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\n         * otherwise.\n         *\n         * 'shift() argument not an integer: {k}'\n         * 'shift() argument out of range: {k}'\n         */\n        P.shift = function (k) {\n            var n = this;\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\n\n              // k < 1e+21, or truncate(k) will produce exponential notation.\n              ? n.times( '1e' + truncate(k) )\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\n                : n );\n        };\n\n\n        /*\n         *  sqrt(-n) =  N\n         *  sqrt( N) =  N\n         *  sqrt(-I) =  N\n         *  sqrt( I) =  I\n         *  sqrt( 0) =  0\n         *  sqrt(-0) = -0\n         *\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m, n, r, rep, t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if ( s !== 1 || !c || !c[0] ) {\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\n            }\n\n            // Initial estimate.\n            s = Math.sqrt( +x );\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if ( s == 0 || s == 1 / 0 ) {\n                n = coeffToString(c);\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\n\n                if ( s == 1 / 0 ) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber( s + '' );\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if ( r.c[0] ) {\n                e = r.e;\n                s = e + dp;\n                if ( s < 3 ) s = 0;\n\n                // Newton-Raphson iteration.\n                for ( ; ; ) {\n                    t = r;\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\n\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if ( r.e < e ) --s;\n                        n = n.slice( s - 3, s + 1 );\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if ( n == '9999' || !rep && n == '4999' ) {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if ( !rep ) {\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\n\n                                if ( t.times(t).eq(x) ) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\n\n                                // Truncate to the first rounding digit.\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\n        };\n\n\n        /*\n         *  n * 0 = 0\n         *  n * N = N\n         *  n * I = I\n         *  0 * n = 0\n         *  0 * 0 = 0\n         *  0 * N = N\n         *  0 * I = N\n         *  N * n = N\n         *  N * 0 = N\n         *  N * N = N\n         *  N * I = N\n         *  I * n = I\n         *  I * 0 = N\n         *  I * N = N\n         *  I * I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\n         * BigNumber(y, b).\n         */\n        P.times = P.mul = function ( y, b ) {\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n                base, sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if ( !xc || !yc ) {\n                        y.c = y.e = null;\n\n                    // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for ( i = ycL; --i >= 0; ) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for ( k = xcL, j = i + k; j > i; ) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.shift();\n            }\n\n            return normalise( y, zc, e );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toDigits() precision out of range: {sd}'\n         * 'toDigits() precision not an integer: {sd}'\n         * 'toDigits() rounding mode not an integer: {rm}'\n         * 'toDigits() rounding mode out of range: {rm}'\n         */\n        P.toDigits = function ( sd, rm ) {\n            var n = new BigNumber(this);\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\n            return sd ? round( n, sd, rm ) : n;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in exponential notation and\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toExponential() decimal places not an integer: {dp}'\n         * 'toExponential() decimal places out of range: {dp}'\n         * 'toExponential() rounding mode not an integer: {rm}'\n         * 'toExponential() rounding mode out of range: {rm}'\n         */\n        P.toExponential = function ( dp, rm ) {\n            return format( this,\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toFixed() decimal places not an integer: {dp}'\n         * 'toFixed() decimal places out of range: {dp}'\n         * 'toFixed() rounding mode not an integer: {rm}'\n         * 'toFixed() rounding mode out of range: {rm}'\n         */\n        P.toFixed = function ( dp, rm ) {\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\n              ? ~~dp + this.e + 1 : null, rm, 20 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n         * of the FORMAT object (see BigNumber.config).\n         *\n         * FORMAT = {\n         *      decimalSeparator : '.',\n         *      groupSeparator : ',',\n         *      groupSize : 3,\n         *      secondaryGroupSize : 0,\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n         *      fractionGroupSize : 0\n         * };\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toFormat() decimal places not an integer: {dp}'\n         * 'toFormat() decimal places out of range: {dp}'\n         * 'toFormat() rounding mode not an integer: {rm}'\n         * 'toFormat() rounding mode out of range: {rm}'\n         */\n        P.toFormat = function ( dp, rm ) {\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\n              ? ~~dp + this.e + 1 : null, rm, 21 );\n\n            if ( this.c ) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if ( g1 > 0 && len > 0 ) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr( 0, i );\n\n                    for ( ; i < len; i += g1 ) {\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\n                    }\n\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\n                      '$&' + FORMAT.fractionGroupSeparator )\n                    : fractionPart )\n                  : intPart;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a string array representing the value of this BigNumber as a simple fraction with\n         * an integer numerator and an integer denominator. The denominator will be a positive\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\n         * denominator is not specified, the denominator will be the lowest value necessary to\n         * represent the number exactly.\n         *\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\n         *\n         * 'toFraction() max denominator not an integer: {md}'\n         * 'toFraction() max denominator out of range: {md}'\n         */\n        P.toFraction = function (md) {\n            var arr, d0, d2, e, exp, n, n0, q, s,\n                k = ERRORS,\n                x = this,\n                xc = x.c,\n                d = new BigNumber(ONE),\n                n1 = d0 = new BigNumber(ONE),\n                d1 = n0 = new BigNumber(ONE);\n\n            if ( md != null ) {\n                ERRORS = false;\n                n = new BigNumber(md);\n                ERRORS = k;\n\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\n\n                    if (ERRORS) {\n                        raise( 22,\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\n                    }\n\n                    // ERRORS is false:\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\n                }\n            }\n\n            if ( !xc ) return x.toString();\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for ( ; ; )  {\n                q = div( n, d, 0, 1 );\n                d2 = d0.plus( q.times(d1) );\n                if ( d2.cmp(md) == 1 ) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus( q.times( d2 = n1 ) );\n                n0 = d2;\n                d = n.minus( q.times( d2 = d ) );\n                n = d2;\n            }\n\n            d2 = div( md.minus(d0), d1, 0, 1 );\n            n0 = n0.plus( d2.times(n1) );\n            d0 = d0.plus( d2.times(d1) );\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\n                    ? [ n1.toString(), d1.toString() ]\n                    : [ n0.toString(), d0.toString() ];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n\n        /*\n         * Return the value of this BigNumber converted to a number primitive.\n         */\n        P.toNumber = function () {\n            var x = this;\n\n            // Ensure zero has correct sign.\n            return +x || ( x.s ? x.s * 0 : NaN );\n        };\n\n\n        /*\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.\n         *\n         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.\n         * (Performs 54 loop iterations for n of 9007199254740992.)\n         *\n         * 'pow() exponent not an integer: {n}'\n         * 'pow() exponent out of range: {n}'\n         */\n        P.toPower = P.pow = function (n) {\n            var k, y,\n                i = mathfloor( n < 0 ? -n : +n ),\n                x = this;\n\n            // Pass ±Infinity to Math.pow if exponent is out of range.\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\n                parseFloat(n) != n && !( n = NaN ) ) ) {\n                return new BigNumber( Math.pow( +x, n ) );\n            }\n\n            // Truncating each coefficient array to a length of k after each multiplication equates\n            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a\n            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)\n            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;\n            y = new BigNumber(ONE);\n\n            for ( ; ; ) {\n\n                if ( i % 2 ) {\n                    y = y.times(x);\n                    if ( !y.c ) break;\n                    if ( k && y.c.length > k ) y.c.length = k;\n                }\n\n                i = mathfloor( i / 2 );\n                if ( !i ) break;\n\n                x = x.times(x);\n                if ( k && x.c && x.c.length > k ) x.c.length = k;\n            }\n\n            if ( n < 0 ) y = ONE.div(y);\n            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n         * necessary to represent the integer part of the value in fixed-point notation, then use\n         * exponential notation.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toPrecision() precision not an integer: {sd}'\n         * 'toPrecision() precision out of range: {sd}'\n         * 'toPrecision() rounding mode not an integer: {rm}'\n         * 'toPrecision() rounding mode out of range: {rm}'\n         */\n        P.toPrecision = function ( sd, rm ) {\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\n              ? sd | 0 : null, rm, 24 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n         * TO_EXP_NEG, return exponential notation.\n         *\n         * [b] {number} Integer, 2 to 64 inclusive.\n         *\n         * 'toString() base not an integer: {b}'\n         * 'toString() base out of range: {b}'\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if ( e === null ) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if ( s < 0 ) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString( n.c );\n\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                      ? toExponential( str, e )\n                      : toFixedPoint( str, e );\n                } else {\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\n                }\n\n                if ( s < 0 && n.c[0] ) str = '-' + str;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\n         * number.\n         */\n        P.truncated = P.trunc = function () {\n            return round( new BigNumber(this), this.e + 1, 1 );\n        };\n\n\n\n        /*\n         * Return as toString, but do not accept a base argument.\n         */\n        P.valueOf = P.toJSON = function () {\n            return this.toString();\n        };\n\n\n        // Aliases for BigDecimal methods.\n        //P.add = P.plus;         // P.add included above\n        //P.subtract = P.minus;   // P.sub included above\n        //P.multiply = P.times;   // P.mul included above\n        //P.divide = P.div;\n        //P.remainder = P.mod;\n        //P.compareTo = P.cmp;\n        //P.negate = P.neg;\n\n\n        if ( configObj != null ) BigNumber.config(configObj);\n\n        return BigNumber;\n    }\n\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s, z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for ( ; i < j; ) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for ( ; z--; s = '0' + s );\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\n        return r.slice( 0, j + 1 || 1 );\n    }\n\n\n    // Compare the value of BigNumbers x and y.\n    function compare( x, y ) {\n        var a, b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if ( !i || !j ) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if ( a || b ) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if ( i != j ) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if ( !b ) return k > l ^ a ? 1 : -1;\n\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\n\n        // Compare digit by digit.\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n\n    /*\n     * Return true if n is a valid number in range, otherwise false.\n     * Use for argument validation when ERRORS is false.\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\n     */\n    function intValidatorNoErrors( n, min, max ) {\n        return ( n = truncate(n) ) >= min && n <= max;\n    }\n\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n\n    /*\n     * Convert string of baseIn to an array of numbers of baseOut.\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n     */\n    function toBaseOut( str, baseIn, baseOut ) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for ( ; i < len; ) {\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\n\n            for ( ; j < arr.length; j++ ) {\n\n                if ( arr[j] > baseOut - 1 ) {\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\n                    arr[j + 1] += arr[j] / baseOut | 0;\n                    arr[j] %= baseOut;\n                }\n            }\n        }\n\n        return arr.reverse();\n    }\n\n\n    function toExponential( str, e ) {\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\n          ( e < 0 ? 'e' : 'e+' ) + e;\n    }\n\n\n    function toFixedPoint( str, e ) {\n        var len, z;\n\n        // Negative exponent?\n        if ( e < 0 ) {\n\n            // Prepend zeros.\n            for ( z = '0.'; ++e; z += '0' );\n            str = z + str;\n\n        // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if ( ++e > len ) {\n                for ( z = '0', e -= len; --e; z += '0' );\n                str += z;\n            } else if ( e < len ) {\n                str = str.slice( 0, e ) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n\n    function truncate(n) {\n        n = parseFloat(n);\n        return n < 0 ? mathceil(n) : mathfloor(n);\n    }\n\n\n    // EXPORT\n\n\n    BigNumber = another();\n\n    // AMD.\n    if ( typeof define == 'function' && define.amd ) {\n        define( function () { return BigNumber; } );\n\n    // Node and other environments that support module.exports.\n    } else if ( typeof module != 'undefined' && module.exports ) {\n        module.exports = BigNumber;\n        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}\n\n    // Browser.\n    } else {\n        global.BigNumber = BigNumber;\n    }\n})(this);\n\n},{\"crypto\":6}]},{},[162])\n//# sourceMappingURL=3stack:bignumber/bignumber.browserify.js\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]