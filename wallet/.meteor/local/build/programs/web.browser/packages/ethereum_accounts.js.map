{"version":3,"sources":["meteor://ðŸ’»app/packages/ethereum_accounts/accounts.js"],"names":[],"mappingsiH","file":"/packages/ethereum_accounts.js","sourcesContent":["/**\n\n@module Ethereum:accounts\n*/\n\n\n\n/**\nThe accounts collection, with some ethereum additions.\n\n@class EthAccounts\n@constructor\n*/\nvar collection = new Mongo.Collection('ethereum_accounts', {connection: null});\nEthAccounts = _.clone(collection);\nEthAccounts._collection = collection;\n\n\nif(typeof PersistentMinimongo !== 'undefined')\n    new PersistentMinimongo(EthAccounts._collection);\n\n\nEthAccounts._watching = false;\n\n/**\nUpdates the accounts balances, by watching for new blocks and checking the balance.\n\n@method _watchBalance\n*/\nEthAccounts._watchBalance = function(){\n    var _this = this;\n\n    this._watching = true;\n\n    // UPDATE SIMPLE ACCOUNTS balance on each new block\n    web3.eth.filter('latest').watch(function(e, res){\n        if(!e) {\n            _this._updateBalance();\n        }\n    });\n};\n\n/**\nUpdates the accounts balances.\n\n@method _updateBalance\n*/\nEthAccounts._updateBalance = function(){\n    _.each(EthAccounts.find().fetch(), function(account){\n        web3.eth.getBalance(account.address, function(err, res){\n            if(!err) {\n                EthAccounts.update(account._id, {$set: {\n                    balance: res.toString(10)\n                }});\n            }\n        });\n    });\n}\n\n/**\nUpdates the accounts list,\nif its finds a difference between the accounts in the collection and the accounts in the accounts array.\n\n@method _addAccounts\n*/\nEthAccounts._addAccounts = function(){\n    var _this = this;\n\n    // UPDATE normal accounts on start\n    web3.eth.getAccounts(function(e, accounts){\n        if(!e) {\n            var visibleAccounts = _.pluck(EthAccounts.find().fetch(), 'address');\n\n\n            if(!_.isEmpty(accounts) &&\n                _.difference(accounts, visibleAccounts).length === 0 &&\n                _.difference(visibleAccounts, accounts).length === 0)\n                return;\n\n\n            var localAccounts = EthAccounts.findAll().fetch();\n\n            // if the accounts are different, update the local ones\n            _.each(localAccounts, function(account){\n\n                // needs to have the balance\n                if(!account.balance)\n                    return;\n\n                // set status deactivated, if it seem to be gone\n                if(!_.contains(accounts, account.address)) {\n                    EthAccounts.updateAll(account._id, {$set: {\n                        deactivated: true\n                    }});\n                } else {\n                    EthAccounts.updateAll(account._id, {$unset: {\n                        deactivated: ''\n                    }});\n                }\n\n                accounts = _.without(accounts, account.address);\n            });\n\n            // ADD missing accounts\n            var accountsCount = visibleAccounts.length + 1;\n            _.each(accounts, function(address){\n\n                web3.eth.getBalance(address, function(e, balance){\n                    if(!e) {\n                        web3.eth.getCoinbase(function(e, coinbase){\n                            var doc = EthAccounts.findAll({address: address}).fetch()[0];\n\n                            var insert = {\n                                    type: 'account',\n                                    address: address,\n                                    balance: balance.toString(10),\n                                    name: (address === coinbase) ? 'Etherbase' : 'Account '+ accountsCount\n                                };\n\n                            if(doc) {\n                                EthAccounts.updateAll({_id: doc._id}, {$set: insert});\n                            } else {\n                                EthAccounts.insert(insert);\n                            }\n\n                            if(address !== coinbase)\n                                accountsCount++;\n                        });\n                    }\n                });\n\n            });\n        }\n    });\n};\n\n\n\n/**\nBuilds the query with the addition of \"{deactivated: {$exists: false}}\"\n\n@method _addToQuery\n@param {Mixed} arg\n@return {Object} The query\n*/\nEthAccounts._addToQuery = function(args){\n    var args = Array.prototype.slice.call(args);\n\n    if(_.isObject(args[0]))\n        args[0] = _.extend(args[0], {deactivated: {$exists: false}});\n    else if(_.isString(args[0]))\n        args[0] = {_id: args[0], deactivated: {$exists: false}};\n    else\n        args[0] = {deactivated: {$exists: false}};\n\n    return args;\n};\n\n\n/**\nFind all accounts, besides the deactivated ones\n\n@method find\n@return {Object} cursor\n*/\nEthAccounts.find = function(){    \n    return this._collection.find.apply(this, this._addToQuery(arguments));\n};\n\n/**\nFind all accounts, including the deactivated ones\n\n@method findAll\n@return {Object} cursor\n*/\nEthAccounts.findAll = EthAccounts._collection.find;\n\n/**\nFind one accounts, besides the deactivated ones\n\n@method findOne\n@return {Object} cursor\n*/\nEthAccounts.findOne = function(){\n    return this._collection.findOne.apply(this, this._addToQuery(arguments));\n};\n\n/**\nUpdate accounts, besides the deactivated ones\n\n@method update\n@return {Object} cursor\n*/\nEthAccounts.update = function(){\n    return this._collection.update.apply(this, this._addToQuery(arguments));\n};\n\n/**\nUpdate accounts, including the deactivated ones\n\n@method updateAll\n@return {Object} cursor\n*/\nEthAccounts.updateAll = EthAccounts._collection.update;\n\n/**\nUpdate accounts, including the deactivated ones\n\n@method upsert\n@return {Object} cursor\n*/\nEthAccounts.upsert = EthAccounts._collection.upsert;\n\n/**\nStarts fetching and watching the accounts\n\n@method init\n*/\nEthAccounts.init = function(){\n    var _this = this;\n\n    if(typeof web3 === 'undefined') {\n        console.warn('EthAccounts couldn\\'t find web3, please make sure to instantiate a web3 object before calling EthAccounts.init()');\n        return;\n    }\n\n    /**\n    Overwrite web3.reset, to also stop the interval\n\n    @method web3.reset\n    */\n    web3._reset = Web3.prototype.reset;\n    web3.reset = function(keepIsSyncing){\n        Meteor.clearInterval(_this._intervalId);\n        _this._watching = false;\n        web3._reset(keepIsSyncing);\n    };\n\n    Tracker.nonreactive(function(){\n\n        _this._addAccounts();\n\n        if(!_this._watching) {\n            _this._updateBalance();\n            _this._watchBalance();\n\n            // check for new accounts every 2s\n            Meteor.clearInterval(_this._intervalId);\n            _this._intervalId = Meteor.setInterval(function(){\n                _this._addAccounts();\n            }, 2000);\n        }\n    });\n};"]}