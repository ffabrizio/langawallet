//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var result, rem, BigNumber;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
// packages/3stack_bignumber/packages/3stack_bignumber.js                                                             //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      //
(function () {                                                                                                        // 1
                                                                                                                      // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                 //
// packages/3stack:bignumber/bignumber.browserify.js                                                               //
//                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                   //
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
                                                                                                                      // 10
},{}],2:[function(require,module,exports){                                                                            // 11
/*!                                                                                                                   // 12
 * The buffer module from node.js, for the browser.                                                                   // 13
 *                                                                                                                    // 14
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                              // 15
 * @license  MIT                                                                                                      // 16
 */                                                                                                                   // 17
                                                                                                                      // 18
var base64 = require('base64-js')                                                                                     // 19
var ieee754 = require('ieee754')                                                                                      // 20
var isArray = require('is-array')                                                                                     // 21
                                                                                                                      // 22
exports.Buffer = Buffer                                                                                               // 23
exports.SlowBuffer = SlowBuffer                                                                                       // 24
exports.INSPECT_MAX_BYTES = 50                                                                                        // 25
Buffer.poolSize = 8192 // not used by this implementation                                                             // 26
                                                                                                                      // 27
var kMaxLength = 0x3fffffff                                                                                           // 28
var rootParent = {}                                                                                                   // 29
                                                                                                                      // 30
/**                                                                                                                   // 31
 * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                   // 32
 *   === true    Use Uint8Array implementation (fastest)                                                              // 33
 *   === false   Use Object implementation (most compatible, even IE6)                                                // 34
 *                                                                                                                    // 35
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                                 // 36
 * Opera 11.6+, iOS 4.2+.                                                                                             // 37
 *                                                                                                                    // 38
 * Note:                                                                                                              // 39
 *                                                                                                                    // 40
 * - Implementation must support adding new properties to `Uint8Array` instances.                                     // 41
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.                                                               // 42
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                        // 43
 *                                                                                                                    // 44
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                            // 45
 *                                                                                                                    // 46
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                              // 47
 *    incorrect length in some situations.                                                                            // 48
 *                                                                                                                    // 49
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will                        // 50
 * get the Object implementation, which is slower but will work correctly.                                            // 51
 */                                                                                                                   // 52
Buffer.TYPED_ARRAY_SUPPORT = (function () {                                                                           // 53
  try {                                                                                                               // 54
    var buf = new ArrayBuffer(0)                                                                                      // 55
    var arr = new Uint8Array(buf)                                                                                     // 56
    arr.foo = function () { return 42 }                                                                               // 57
    return arr.foo() === 42 && // typed array instances can be augmented                                              // 58
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                          // 59
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                               // 60
  } catch (e) {                                                                                                       // 61
    return false                                                                                                      // 62
  }                                                                                                                   // 63
})()                                                                                                                  // 64
                                                                                                                      // 65
/**                                                                                                                   // 66
 * Class: Buffer                                                                                                      // 67
 * =============                                                                                                      // 68
 *                                                                                                                    // 69
 * The Buffer constructor returns instances of `Uint8Array` that are augmented                                        // 70
 * with function properties for all the node `Buffer` API functions. We use                                           // 71
 * `Uint8Array` so that square bracket notation works as expected -- it returns                                       // 72
 * a single octet.                                                                                                    // 73
 *                                                                                                                    // 74
 * By augmenting the instances, we can avoid modifying the `Uint8Array`                                               // 75
 * prototype.                                                                                                         // 76
 */                                                                                                                   // 77
function Buffer (arg) {                                                                                               // 78
  if (!(this instanceof Buffer)) {                                                                                    // 79
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.                                          // 80
    if (arguments.length > 1) return new Buffer(arg, arguments[1])                                                    // 81
    return new Buffer(arg)                                                                                            // 82
  }                                                                                                                   // 83
                                                                                                                      // 84
  this.length = 0                                                                                                     // 85
  this.parent = undefined                                                                                             // 86
                                                                                                                      // 87
  // Common case.                                                                                                     // 88
  if (typeof arg === 'number') {                                                                                      // 89
    return fromNumber(this, arg)                                                                                      // 90
  }                                                                                                                   // 91
                                                                                                                      // 92
  // Slightly less common case.                                                                                       // 93
  if (typeof arg === 'string') {                                                                                      // 94
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')                                        // 95
  }                                                                                                                   // 96
                                                                                                                      // 97
  // Unusual.                                                                                                         // 98
  return fromObject(this, arg)                                                                                        // 99
}                                                                                                                     // 100
                                                                                                                      // 101
function fromNumber (that, length) {                                                                                  // 102
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)                                                         // 103
  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                  // 104
    for (var i = 0; i < length; i++) {                                                                                // 105
      that[i] = 0                                                                                                     // 106
    }                                                                                                                 // 107
  }                                                                                                                   // 108
  return that                                                                                                         // 109
}                                                                                                                     // 110
                                                                                                                      // 111
function fromString (that, string, encoding) {                                                                        // 112
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'                                              // 113
                                                                                                                      // 114
  // Assumption: byteLength() return value is always < kMaxLength.                                                    // 115
  var length = byteLength(string, encoding) | 0                                                                       // 116
  that = allocate(that, length)                                                                                       // 117
                                                                                                                      // 118
  that.write(string, encoding)                                                                                        // 119
  return that                                                                                                         // 120
}                                                                                                                     // 121
                                                                                                                      // 122
function fromObject (that, object) {                                                                                  // 123
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)                                                        // 124
                                                                                                                      // 125
  if (isArray(object)) return fromArray(that, object)                                                                 // 126
                                                                                                                      // 127
  if (object == null) {                                                                                               // 128
    throw new TypeError('must start with number, buffer, array or string')                                            // 129
  }                                                                                                                   // 130
                                                                                                                      // 131
  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {                                   // 132
    return fromTypedArray(that, object)                                                                               // 133
  }                                                                                                                   // 134
                                                                                                                      // 135
  if (object.length) return fromArrayLike(that, object)                                                               // 136
                                                                                                                      // 137
  return fromJsonObject(that, object)                                                                                 // 138
}                                                                                                                     // 139
                                                                                                                      // 140
function fromBuffer (that, buffer) {                                                                                  // 141
  var length = checked(buffer.length) | 0                                                                             // 142
  that = allocate(that, length)                                                                                       // 143
  buffer.copy(that, 0, 0, length)                                                                                     // 144
  return that                                                                                                         // 145
}                                                                                                                     // 146
                                                                                                                      // 147
function fromArray (that, array) {                                                                                    // 148
  var length = checked(array.length) | 0                                                                              // 149
  that = allocate(that, length)                                                                                       // 150
  for (var i = 0; i < length; i += 1) {                                                                               // 151
    that[i] = array[i] & 255                                                                                          // 152
  }                                                                                                                   // 153
  return that                                                                                                         // 154
}                                                                                                                     // 155
                                                                                                                      // 156
// Duplicate of fromArray() to keep fromArray() monomorphic.                                                          // 157
function fromTypedArray (that, array) {                                                                               // 158
  var length = checked(array.length) | 0                                                                              // 159
  that = allocate(that, length)                                                                                       // 160
  // Truncating the elements is probably not what people expect from typed                                            // 161
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior                                          // 162
  // of the old Buffer constructor.                                                                                   // 163
  for (var i = 0; i < length; i += 1) {                                                                               // 164
    that[i] = array[i] & 255                                                                                          // 165
  }                                                                                                                   // 166
  return that                                                                                                         // 167
}                                                                                                                     // 168
                                                                                                                      // 169
function fromArrayLike (that, array) {                                                                                // 170
  var length = checked(array.length) | 0                                                                              // 171
  that = allocate(that, length)                                                                                       // 172
  for (var i = 0; i < length; i += 1) {                                                                               // 173
    that[i] = array[i] & 255                                                                                          // 174
  }                                                                                                                   // 175
  return that                                                                                                         // 176
}                                                                                                                     // 177
                                                                                                                      // 178
// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.                                            // 179
// Returns a zero-length buffer for inputs that don't conform to the spec.                                            // 180
function fromJsonObject (that, object) {                                                                              // 181
  var array                                                                                                           // 182
  var length = 0                                                                                                      // 183
                                                                                                                      // 184
  if (object.type === 'Buffer' && isArray(object.data)) {                                                             // 185
    array = object.data                                                                                               // 186
    length = checked(array.length) | 0                                                                                // 187
  }                                                                                                                   // 188
  that = allocate(that, length)                                                                                       // 189
                                                                                                                      // 190
  for (var i = 0; i < length; i += 1) {                                                                               // 191
    that[i] = array[i] & 255                                                                                          // 192
  }                                                                                                                   // 193
  return that                                                                                                         // 194
}                                                                                                                     // 195
                                                                                                                      // 196
function allocate (that, length) {                                                                                    // 197
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 198
    // Return an augmented `Uint8Array` instance, for best performance                                                // 199
    that = Buffer._augment(new Uint8Array(length))                                                                    // 200
  } else {                                                                                                            // 201
    // Fallback: Return an object instance of the Buffer class                                                        // 202
    that.length = length                                                                                              // 203
    that._isBuffer = true                                                                                             // 204
  }                                                                                                                   // 205
                                                                                                                      // 206
  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1                                                      // 207
  if (fromPool) that.parent = rootParent                                                                              // 208
                                                                                                                      // 209
  return that                                                                                                         // 210
}                                                                                                                     // 211
                                                                                                                      // 212
function checked (length) {                                                                                           // 213
  // Note: cannot use `length < kMaxLength` here because that fails when                                              // 214
  // length is NaN (which is otherwise coerced to zero.)                                                              // 215
  if (length >= kMaxLength) {                                                                                         // 216
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                          // 217
                         'size: 0x' + kMaxLength.toString(16) + ' bytes')                                             // 218
  }                                                                                                                   // 219
  return length | 0                                                                                                   // 220
}                                                                                                                     // 221
                                                                                                                      // 222
function SlowBuffer (subject, encoding) {                                                                             // 223
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)                                         // 224
                                                                                                                      // 225
  var buf = new Buffer(subject, encoding)                                                                             // 226
  delete buf.parent                                                                                                   // 227
  return buf                                                                                                          // 228
}                                                                                                                     // 229
                                                                                                                      // 230
Buffer.isBuffer = function isBuffer (b) {                                                                             // 231
  return !!(b != null && b._isBuffer)                                                                                 // 232
}                                                                                                                     // 233
                                                                                                                      // 234
Buffer.compare = function compare (a, b) {                                                                            // 235
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                   // 236
    throw new TypeError('Arguments must be Buffers')                                                                  // 237
  }                                                                                                                   // 238
                                                                                                                      // 239
  if (a === b) return 0                                                                                               // 240
                                                                                                                      // 241
  var x = a.length                                                                                                    // 242
  var y = b.length                                                                                                    // 243
                                                                                                                      // 244
  var i = 0                                                                                                           // 245
  var len = Math.min(x, y)                                                                                            // 246
  while (i < len) {                                                                                                   // 247
    if (a[i] !== b[i]) break                                                                                          // 248
                                                                                                                      // 249
    ++i                                                                                                               // 250
  }                                                                                                                   // 251
                                                                                                                      // 252
  if (i !== len) {                                                                                                    // 253
    x = a[i]                                                                                                          // 254
    y = b[i]                                                                                                          // 255
  }                                                                                                                   // 256
                                                                                                                      // 257
  if (x < y) return -1                                                                                                // 258
  if (y < x) return 1                                                                                                 // 259
  return 0                                                                                                            // 260
}                                                                                                                     // 261
                                                                                                                      // 262
Buffer.isEncoding = function isEncoding (encoding) {                                                                  // 263
  switch (String(encoding).toLowerCase()) {                                                                           // 264
    case 'hex':                                                                                                       // 265
    case 'utf8':                                                                                                      // 266
    case 'utf-8':                                                                                                     // 267
    case 'ascii':                                                                                                     // 268
    case 'binary':                                                                                                    // 269
    case 'base64':                                                                                                    // 270
    case 'raw':                                                                                                       // 271
    case 'ucs2':                                                                                                      // 272
    case 'ucs-2':                                                                                                     // 273
    case 'utf16le':                                                                                                   // 274
    case 'utf-16le':                                                                                                  // 275
      return true                                                                                                     // 276
    default:                                                                                                          // 277
      return false                                                                                                    // 278
  }                                                                                                                   // 279
}                                                                                                                     // 280
                                                                                                                      // 281
Buffer.concat = function concat (list, length) {                                                                      // 282
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')                               // 283
                                                                                                                      // 284
  if (list.length === 0) {                                                                                            // 285
    return new Buffer(0)                                                                                              // 286
  } else if (list.length === 1) {                                                                                     // 287
    return list[0]                                                                                                    // 288
  }                                                                                                                   // 289
                                                                                                                      // 290
  var i                                                                                                               // 291
  if (length === undefined) {                                                                                         // 292
    length = 0                                                                                                        // 293
    for (i = 0; i < list.length; i++) {                                                                               // 294
      length += list[i].length                                                                                        // 295
    }                                                                                                                 // 296
  }                                                                                                                   // 297
                                                                                                                      // 298
  var buf = new Buffer(length)                                                                                        // 299
  var pos = 0                                                                                                         // 300
  for (i = 0; i < list.length; i++) {                                                                                 // 301
    var item = list[i]                                                                                                // 302
    item.copy(buf, pos)                                                                                               // 303
    pos += item.length                                                                                                // 304
  }                                                                                                                   // 305
  return buf                                                                                                          // 306
}                                                                                                                     // 307
                                                                                                                      // 308
function byteLength (string, encoding) {                                                                              // 309
  if (typeof string !== 'string') string = String(string)                                                             // 310
                                                                                                                      // 311
  if (string.length === 0) return 0                                                                                   // 312
                                                                                                                      // 313
  switch (encoding || 'utf8') {                                                                                       // 314
    case 'ascii':                                                                                                     // 315
    case 'binary':                                                                                                    // 316
    case 'raw':                                                                                                       // 317
      return string.length                                                                                            // 318
    case 'ucs2':                                                                                                      // 319
    case 'ucs-2':                                                                                                     // 320
    case 'utf16le':                                                                                                   // 321
    case 'utf-16le':                                                                                                  // 322
      return string.length * 2                                                                                        // 323
    case 'hex':                                                                                                       // 324
      return string.length >>> 1                                                                                      // 325
    case 'utf8':                                                                                                      // 326
    case 'utf-8':                                                                                                     // 327
      return utf8ToBytes(string).length                                                                               // 328
    case 'base64':                                                                                                    // 329
      return base64ToBytes(string).length                                                                             // 330
    default:                                                                                                          // 331
      return string.length                                                                                            // 332
  }                                                                                                                   // 333
}                                                                                                                     // 334
Buffer.byteLength = byteLength                                                                                        // 335
                                                                                                                      // 336
// pre-set for values that may exist in the future                                                                    // 337
Buffer.prototype.length = undefined                                                                                   // 338
Buffer.prototype.parent = undefined                                                                                   // 339
                                                                                                                      // 340
// toString(encoding, start=0, end=buffer.length)                                                                     // 341
Buffer.prototype.toString = function toString (encoding, start, end) {                                                // 342
  var loweredCase = false                                                                                             // 343
                                                                                                                      // 344
  start = start | 0                                                                                                   // 345
  end = end === undefined || end === Infinity ? this.length : end | 0                                                 // 346
                                                                                                                      // 347
  if (!encoding) encoding = 'utf8'                                                                                    // 348
  if (start < 0) start = 0                                                                                            // 349
  if (end > this.length) end = this.length                                                                            // 350
  if (end <= start) return ''                                                                                         // 351
                                                                                                                      // 352
  while (true) {                                                                                                      // 353
    switch (encoding) {                                                                                               // 354
      case 'hex':                                                                                                     // 355
        return hexSlice(this, start, end)                                                                             // 356
                                                                                                                      // 357
      case 'utf8':                                                                                                    // 358
      case 'utf-8':                                                                                                   // 359
        return utf8Slice(this, start, end)                                                                            // 360
                                                                                                                      // 361
      case 'ascii':                                                                                                   // 362
        return asciiSlice(this, start, end)                                                                           // 363
                                                                                                                      // 364
      case 'binary':                                                                                                  // 365
        return binarySlice(this, start, end)                                                                          // 366
                                                                                                                      // 367
      case 'base64':                                                                                                  // 368
        return base64Slice(this, start, end)                                                                          // 369
                                                                                                                      // 370
      case 'ucs2':                                                                                                    // 371
      case 'ucs-2':                                                                                                   // 372
      case 'utf16le':                                                                                                 // 373
      case 'utf-16le':                                                                                                // 374
        return utf16leSlice(this, start, end)                                                                         // 375
                                                                                                                      // 376
      default:                                                                                                        // 377
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                         // 378
        encoding = (encoding + '').toLowerCase()                                                                      // 379
        loweredCase = true                                                                                            // 380
    }                                                                                                                 // 381
  }                                                                                                                   // 382
}                                                                                                                     // 383
                                                                                                                      // 384
Buffer.prototype.equals = function equals (b) {                                                                       // 385
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                           // 386
  if (this === b) return true                                                                                         // 387
  return Buffer.compare(this, b) === 0                                                                                // 388
}                                                                                                                     // 389
                                                                                                                      // 390
Buffer.prototype.inspect = function inspect () {                                                                      // 391
  var str = ''                                                                                                        // 392
  var max = exports.INSPECT_MAX_BYTES                                                                                 // 393
  if (this.length > 0) {                                                                                              // 394
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                       // 395
    if (this.length > max) str += ' ... '                                                                             // 396
  }                                                                                                                   // 397
  return '<Buffer ' + str + '>'                                                                                       // 398
}                                                                                                                     // 399
                                                                                                                      // 400
Buffer.prototype.compare = function compare (b) {                                                                     // 401
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                           // 402
  if (this === b) return 0                                                                                            // 403
  return Buffer.compare(this, b)                                                                                      // 404
}                                                                                                                     // 405
                                                                                                                      // 406
Buffer.prototype.indexOf = function indexOf (val, byteOffset) {                                                       // 407
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff                                                                // 408
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000                                                         // 409
  byteOffset >>= 0                                                                                                    // 410
                                                                                                                      // 411
  if (this.length === 0) return -1                                                                                    // 412
  if (byteOffset >= this.length) return -1                                                                            // 413
                                                                                                                      // 414
  // Negative offsets start from the end of the buffer                                                                // 415
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)                                              // 416
                                                                                                                      // 417
  if (typeof val === 'string') {                                                                                      // 418
    if (val.length === 0) return -1 // special case: looking for empty string always fails                            // 419
    return String.prototype.indexOf.call(this, val, byteOffset)                                                       // 420
  }                                                                                                                   // 421
  if (Buffer.isBuffer(val)) {                                                                                         // 422
    return arrayIndexOf(this, val, byteOffset)                                                                        // 423
  }                                                                                                                   // 424
  if (typeof val === 'number') {                                                                                      // 425
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {                                  // 426
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)                                                 // 427
    }                                                                                                                 // 428
    return arrayIndexOf(this, [ val ], byteOffset)                                                                    // 429
  }                                                                                                                   // 430
                                                                                                                      // 431
  function arrayIndexOf (arr, val, byteOffset) {                                                                      // 432
    var foundIndex = -1                                                                                               // 433
    for (var i = 0; byteOffset + i < arr.length; i++) {                                                               // 434
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {                                      // 435
        if (foundIndex === -1) foundIndex = i                                                                         // 436
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex                                         // 437
      } else {                                                                                                        // 438
        foundIndex = -1                                                                                               // 439
      }                                                                                                               // 440
    }                                                                                                                 // 441
    return -1                                                                                                         // 442
  }                                                                                                                   // 443
                                                                                                                      // 444
  throw new TypeError('val must be string, number or Buffer')                                                         // 445
}                                                                                                                     // 446
                                                                                                                      // 447
// `get` will be removed in Node 0.13+                                                                                // 448
Buffer.prototype.get = function get (offset) {                                                                        // 449
  console.log('.get() is deprecated. Access using array indexes instead.')                                            // 450
  return this.readUInt8(offset)                                                                                       // 451
}                                                                                                                     // 452
                                                                                                                      // 453
// `set` will be removed in Node 0.13+                                                                                // 454
Buffer.prototype.set = function set (v, offset) {                                                                     // 455
  console.log('.set() is deprecated. Access using array indexes instead.')                                            // 456
  return this.writeUInt8(v, offset)                                                                                   // 457
}                                                                                                                     // 458
                                                                                                                      // 459
function hexWrite (buf, string, offset, length) {                                                                     // 460
  offset = Number(offset) || 0                                                                                        // 461
  var remaining = buf.length - offset                                                                                 // 462
  if (!length) {                                                                                                      // 463
    length = remaining                                                                                                // 464
  } else {                                                                                                            // 465
    length = Number(length)                                                                                           // 466
    if (length > remaining) {                                                                                         // 467
      length = remaining                                                                                              // 468
    }                                                                                                                 // 469
  }                                                                                                                   // 470
                                                                                                                      // 471
  // must be an even number of digits                                                                                 // 472
  var strLen = string.length                                                                                          // 473
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')                                                         // 474
                                                                                                                      // 475
  if (length > strLen / 2) {                                                                                          // 476
    length = strLen / 2                                                                                               // 477
  }                                                                                                                   // 478
  for (var i = 0; i < length; i++) {                                                                                  // 479
    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                                // 480
    if (isNaN(parsed)) throw new Error('Invalid hex string')                                                          // 481
    buf[offset + i] = parsed                                                                                          // 482
  }                                                                                                                   // 483
  return i                                                                                                            // 484
}                                                                                                                     // 485
                                                                                                                      // 486
function utf8Write (buf, string, offset, length) {                                                                    // 487
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                    // 488
}                                                                                                                     // 489
                                                                                                                      // 490
function asciiWrite (buf, string, offset, length) {                                                                   // 491
  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                        // 492
}                                                                                                                     // 493
                                                                                                                      // 494
function binaryWrite (buf, string, offset, length) {                                                                  // 495
  return asciiWrite(buf, string, offset, length)                                                                      // 496
}                                                                                                                     // 497
                                                                                                                      // 498
function base64Write (buf, string, offset, length) {                                                                  // 499
  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                       // 500
}                                                                                                                     // 501
                                                                                                                      // 502
function ucs2Write (buf, string, offset, length) {                                                                    // 503
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                                 // 504
}                                                                                                                     // 505
                                                                                                                      // 506
Buffer.prototype.write = function write (string, offset, length, encoding) {                                          // 507
  // Buffer#write(string)                                                                                             // 508
  if (offset === undefined) {                                                                                         // 509
    encoding = 'utf8'                                                                                                 // 510
    length = this.length                                                                                              // 511
    offset = 0                                                                                                        // 512
  // Buffer#write(string, encoding)                                                                                   // 513
  } else if (length === undefined && typeof offset === 'string') {                                                    // 514
    encoding = offset                                                                                                 // 515
    length = this.length                                                                                              // 516
    offset = 0                                                                                                        // 517
  // Buffer#write(string, offset[, length][, encoding])                                                               // 518
  } else if (isFinite(offset)) {                                                                                      // 519
    offset = offset | 0                                                                                               // 520
    if (isFinite(length)) {                                                                                           // 521
      length = length | 0                                                                                             // 522
      if (encoding === undefined) encoding = 'utf8'                                                                   // 523
    } else {                                                                                                          // 524
      encoding = length                                                                                               // 525
      length = undefined                                                                                              // 526
    }                                                                                                                 // 527
  // legacy write(string, encoding, offset, length) - remove in v0.13                                                 // 528
  } else {                                                                                                            // 529
    var swap = encoding                                                                                               // 530
    encoding = offset                                                                                                 // 531
    offset = length | 0                                                                                               // 532
    length = swap                                                                                                     // 533
  }                                                                                                                   // 534
                                                                                                                      // 535
  var remaining = this.length - offset                                                                                // 536
  if (length === undefined || length > remaining) length = remaining                                                  // 537
                                                                                                                      // 538
  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                    // 539
    throw new RangeError('attempt to write outside buffer bounds')                                                    // 540
  }                                                                                                                   // 541
                                                                                                                      // 542
  if (!encoding) encoding = 'utf8'                                                                                    // 543
                                                                                                                      // 544
  var loweredCase = false                                                                                             // 545
  for (;;) {                                                                                                          // 546
    switch (encoding) {                                                                                               // 547
      case 'hex':                                                                                                     // 548
        return hexWrite(this, string, offset, length)                                                                 // 549
                                                                                                                      // 550
      case 'utf8':                                                                                                    // 551
      case 'utf-8':                                                                                                   // 552
        return utf8Write(this, string, offset, length)                                                                // 553
                                                                                                                      // 554
      case 'ascii':                                                                                                   // 555
        return asciiWrite(this, string, offset, length)                                                               // 556
                                                                                                                      // 557
      case 'binary':                                                                                                  // 558
        return binaryWrite(this, string, offset, length)                                                              // 559
                                                                                                                      // 560
      case 'base64':                                                                                                  // 561
        // Warning: maxLength not taken into account in base64Write                                                   // 562
        return base64Write(this, string, offset, length)                                                              // 563
                                                                                                                      // 564
      case 'ucs2':                                                                                                    // 565
      case 'ucs-2':                                                                                                   // 566
      case 'utf16le':                                                                                                 // 567
      case 'utf-16le':                                                                                                // 568
        return ucs2Write(this, string, offset, length)                                                                // 569
                                                                                                                      // 570
      default:                                                                                                        // 571
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                         // 572
        encoding = ('' + encoding).toLowerCase()                                                                      // 573
        loweredCase = true                                                                                            // 574
    }                                                                                                                 // 575
  }                                                                                                                   // 576
}                                                                                                                     // 577
                                                                                                                      // 578
Buffer.prototype.toJSON = function toJSON () {                                                                        // 579
  return {                                                                                                            // 580
    type: 'Buffer',                                                                                                   // 581
    data: Array.prototype.slice.call(this._arr || this, 0)                                                            // 582
  }                                                                                                                   // 583
}                                                                                                                     // 584
                                                                                                                      // 585
function base64Slice (buf, start, end) {                                                                              // 586
  if (start === 0 && end === buf.length) {                                                                            // 587
    return base64.fromByteArray(buf)                                                                                  // 588
  } else {                                                                                                            // 589
    return base64.fromByteArray(buf.slice(start, end))                                                                // 590
  }                                                                                                                   // 591
}                                                                                                                     // 592
                                                                                                                      // 593
function utf8Slice (buf, start, end) {                                                                                // 594
  var res = ''                                                                                                        // 595
  var tmp = ''                                                                                                        // 596
  end = Math.min(buf.length, end)                                                                                     // 597
                                                                                                                      // 598
  for (var i = start; i < end; i++) {                                                                                 // 599
    if (buf[i] <= 0x7F) {                                                                                             // 600
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])                                                        // 601
      tmp = ''                                                                                                        // 602
    } else {                                                                                                          // 603
      tmp += '%' + buf[i].toString(16)                                                                                // 604
    }                                                                                                                 // 605
  }                                                                                                                   // 606
                                                                                                                      // 607
  return res + decodeUtf8Char(tmp)                                                                                    // 608
}                                                                                                                     // 609
                                                                                                                      // 610
function asciiSlice (buf, start, end) {                                                                               // 611
  var ret = ''                                                                                                        // 612
  end = Math.min(buf.length, end)                                                                                     // 613
                                                                                                                      // 614
  for (var i = start; i < end; i++) {                                                                                 // 615
    ret += String.fromCharCode(buf[i] & 0x7F)                                                                         // 616
  }                                                                                                                   // 617
  return ret                                                                                                          // 618
}                                                                                                                     // 619
                                                                                                                      // 620
function binarySlice (buf, start, end) {                                                                              // 621
  var ret = ''                                                                                                        // 622
  end = Math.min(buf.length, end)                                                                                     // 623
                                                                                                                      // 624
  for (var i = start; i < end; i++) {                                                                                 // 625
    ret += String.fromCharCode(buf[i])                                                                                // 626
  }                                                                                                                   // 627
  return ret                                                                                                          // 628
}                                                                                                                     // 629
                                                                                                                      // 630
function hexSlice (buf, start, end) {                                                                                 // 631
  var len = buf.length                                                                                                // 632
                                                                                                                      // 633
  if (!start || start < 0) start = 0                                                                                  // 634
  if (!end || end < 0 || end > len) end = len                                                                         // 635
                                                                                                                      // 636
  var out = ''                                                                                                        // 637
  for (var i = start; i < end; i++) {                                                                                 // 638
    out += toHex(buf[i])                                                                                              // 639
  }                                                                                                                   // 640
  return out                                                                                                          // 641
}                                                                                                                     // 642
                                                                                                                      // 643
function utf16leSlice (buf, start, end) {                                                                             // 644
  var bytes = buf.slice(start, end)                                                                                   // 645
  var res = ''                                                                                                        // 646
  for (var i = 0; i < bytes.length; i += 2) {                                                                         // 647
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                         // 648
  }                                                                                                                   // 649
  return res                                                                                                          // 650
}                                                                                                                     // 651
                                                                                                                      // 652
Buffer.prototype.slice = function slice (start, end) {                                                                // 653
  var len = this.length                                                                                               // 654
  start = ~~start                                                                                                     // 655
  end = end === undefined ? len : ~~end                                                                               // 656
                                                                                                                      // 657
  if (start < 0) {                                                                                                    // 658
    start += len                                                                                                      // 659
    if (start < 0) start = 0                                                                                          // 660
  } else if (start > len) {                                                                                           // 661
    start = len                                                                                                       // 662
  }                                                                                                                   // 663
                                                                                                                      // 664
  if (end < 0) {                                                                                                      // 665
    end += len                                                                                                        // 666
    if (end < 0) end = 0                                                                                              // 667
  } else if (end > len) {                                                                                             // 668
    end = len                                                                                                         // 669
  }                                                                                                                   // 670
                                                                                                                      // 671
  if (end < start) end = start                                                                                        // 672
                                                                                                                      // 673
  var newBuf                                                                                                          // 674
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 675
    newBuf = Buffer._augment(this.subarray(start, end))                                                               // 676
  } else {                                                                                                            // 677
    var sliceLen = end - start                                                                                        // 678
    newBuf = new Buffer(sliceLen, undefined)                                                                          // 679
    for (var i = 0; i < sliceLen; i++) {                                                                              // 680
      newBuf[i] = this[i + start]                                                                                     // 681
    }                                                                                                                 // 682
  }                                                                                                                   // 683
                                                                                                                      // 684
  if (newBuf.length) newBuf.parent = this.parent || this                                                              // 685
                                                                                                                      // 686
  return newBuf                                                                                                       // 687
}                                                                                                                     // 688
                                                                                                                      // 689
/*                                                                                                                    // 690
 * Need to make sure that buffer isn't trying to write out of bounds.                                                 // 691
 */                                                                                                                   // 692
function checkOffset (offset, ext, length) {                                                                          // 693
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                    // 694
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                            // 695
}                                                                                                                     // 696
                                                                                                                      // 697
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                    // 698
  offset = offset | 0                                                                                                 // 699
  byteLength = byteLength | 0                                                                                         // 700
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                         // 701
                                                                                                                      // 702
  var val = this[offset]                                                                                              // 703
  var mul = 1                                                                                                         // 704
  var i = 0                                                                                                           // 705
  while (++i < byteLength && (mul *= 0x100)) {                                                                        // 706
    val += this[offset + i] * mul                                                                                     // 707
  }                                                                                                                   // 708
                                                                                                                      // 709
  return val                                                                                                          // 710
}                                                                                                                     // 711
                                                                                                                      // 712
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                    // 713
  offset = offset | 0                                                                                                 // 714
  byteLength = byteLength | 0                                                                                         // 715
  if (!noAssert) {                                                                                                    // 716
    checkOffset(offset, byteLength, this.length)                                                                      // 717
  }                                                                                                                   // 718
                                                                                                                      // 719
  var val = this[offset + --byteLength]                                                                               // 720
  var mul = 1                                                                                                         // 721
  while (byteLength > 0 && (mul *= 0x100)) {                                                                          // 722
    val += this[offset + --byteLength] * mul                                                                          // 723
  }                                                                                                                   // 724
                                                                                                                      // 725
  return val                                                                                                          // 726
}                                                                                                                     // 727
                                                                                                                      // 728
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                  // 729
  if (!noAssert) checkOffset(offset, 1, this.length)                                                                  // 730
  return this[offset]                                                                                                 // 731
}                                                                                                                     // 732
                                                                                                                      // 733
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                            // 734
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                  // 735
  return this[offset] | (this[offset + 1] << 8)                                                                       // 736
}                                                                                                                     // 737
                                                                                                                      // 738
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                            // 739
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                  // 740
  return (this[offset] << 8) | this[offset + 1]                                                                       // 741
}                                                                                                                     // 742
                                                                                                                      // 743
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                            // 744
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 745
                                                                                                                      // 746
  return ((this[offset]) |                                                                                            // 747
      (this[offset + 1] << 8) |                                                                                       // 748
      (this[offset + 2] << 16)) +                                                                                     // 749
      (this[offset + 3] * 0x1000000)                                                                                  // 750
}                                                                                                                     // 751
                                                                                                                      // 752
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                            // 753
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 754
                                                                                                                      // 755
  return (this[offset] * 0x1000000) +                                                                                 // 756
    ((this[offset + 1] << 16) |                                                                                       // 757
    (this[offset + 2] << 8) |                                                                                         // 758
    this[offset + 3])                                                                                                 // 759
}                                                                                                                     // 760
                                                                                                                      // 761
Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                      // 762
  offset = offset | 0                                                                                                 // 763
  byteLength = byteLength | 0                                                                                         // 764
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                         // 765
                                                                                                                      // 766
  var val = this[offset]                                                                                              // 767
  var mul = 1                                                                                                         // 768
  var i = 0                                                                                                           // 769
  while (++i < byteLength && (mul *= 0x100)) {                                                                        // 770
    val += this[offset + i] * mul                                                                                     // 771
  }                                                                                                                   // 772
  mul *= 0x80                                                                                                         // 773
                                                                                                                      // 774
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                  // 775
                                                                                                                      // 776
  return val                                                                                                          // 777
}                                                                                                                     // 778
                                                                                                                      // 779
Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                      // 780
  offset = offset | 0                                                                                                 // 781
  byteLength = byteLength | 0                                                                                         // 782
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                         // 783
                                                                                                                      // 784
  var i = byteLength                                                                                                  // 785
  var mul = 1                                                                                                         // 786
  var val = this[offset + --i]                                                                                        // 787
  while (i > 0 && (mul *= 0x100)) {                                                                                   // 788
    val += this[offset + --i] * mul                                                                                   // 789
  }                                                                                                                   // 790
  mul *= 0x80                                                                                                         // 791
                                                                                                                      // 792
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                  // 793
                                                                                                                      // 794
  return val                                                                                                          // 795
}                                                                                                                     // 796
                                                                                                                      // 797
Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                    // 798
  if (!noAssert) checkOffset(offset, 1, this.length)                                                                  // 799
  if (!(this[offset] & 0x80)) return (this[offset])                                                                   // 800
  return ((0xff - this[offset] + 1) * -1)                                                                             // 801
}                                                                                                                     // 802
                                                                                                                      // 803
Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                              // 804
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                  // 805
  var val = this[offset] | (this[offset + 1] << 8)                                                                    // 806
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                      // 807
}                                                                                                                     // 808
                                                                                                                      // 809
Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                              // 810
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                  // 811
  var val = this[offset + 1] | (this[offset] << 8)                                                                    // 812
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                      // 813
}                                                                                                                     // 814
                                                                                                                      // 815
Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                              // 816
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 817
                                                                                                                      // 818
  return (this[offset]) |                                                                                             // 819
    (this[offset + 1] << 8) |                                                                                         // 820
    (this[offset + 2] << 16) |                                                                                        // 821
    (this[offset + 3] << 24)                                                                                          // 822
}                                                                                                                     // 823
                                                                                                                      // 824
Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                              // 825
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 826
                                                                                                                      // 827
  return (this[offset] << 24) |                                                                                       // 828
    (this[offset + 1] << 16) |                                                                                        // 829
    (this[offset + 2] << 8) |                                                                                         // 830
    (this[offset + 3])                                                                                                // 831
}                                                                                                                     // 832
                                                                                                                      // 833
Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                              // 834
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 835
  return ieee754.read(this, offset, true, 23, 4)                                                                      // 836
}                                                                                                                     // 837
                                                                                                                      // 838
Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                              // 839
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                  // 840
  return ieee754.read(this, offset, false, 23, 4)                                                                     // 841
}                                                                                                                     // 842
                                                                                                                      // 843
Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                            // 844
  if (!noAssert) checkOffset(offset, 8, this.length)                                                                  // 845
  return ieee754.read(this, offset, true, 52, 8)                                                                      // 846
}                                                                                                                     // 847
                                                                                                                      // 848
Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                            // 849
  if (!noAssert) checkOffset(offset, 8, this.length)                                                                  // 850
  return ieee754.read(this, offset, false, 52, 8)                                                                     // 851
}                                                                                                                     // 852
                                                                                                                      // 853
function checkInt (buf, value, offset, ext, max, min) {                                                               // 854
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')                                  // 855
  if (value > max || value < min) throw new RangeError('value is out of bounds')                                      // 856
  if (offset + ext > buf.length) throw new RangeError('index out of range')                                           // 857
}                                                                                                                     // 858
                                                                                                                      // 859
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                           // 860
  value = +value                                                                                                      // 861
  offset = offset | 0                                                                                                 // 862
  byteLength = byteLength | 0                                                                                         // 863
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                            // 864
                                                                                                                      // 865
  var mul = 1                                                                                                         // 866
  var i = 0                                                                                                           // 867
  this[offset] = value & 0xFF                                                                                         // 868
  while (++i < byteLength && (mul *= 0x100)) {                                                                        // 869
    this[offset + i] = (value / mul) & 0xFF                                                                           // 870
  }                                                                                                                   // 871
                                                                                                                      // 872
  return offset + byteLength                                                                                          // 873
}                                                                                                                     // 874
                                                                                                                      // 875
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                           // 876
  value = +value                                                                                                      // 877
  offset = offset | 0                                                                                                 // 878
  byteLength = byteLength | 0                                                                                         // 879
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                            // 880
                                                                                                                      // 881
  var i = byteLength - 1                                                                                              // 882
  var mul = 1                                                                                                         // 883
  this[offset + i] = value & 0xFF                                                                                     // 884
  while (--i >= 0 && (mul *= 0x100)) {                                                                                // 885
    this[offset + i] = (value / mul) & 0xFF                                                                           // 886
  }                                                                                                                   // 887
                                                                                                                      // 888
  return offset + byteLength                                                                                          // 889
}                                                                                                                     // 890
                                                                                                                      // 891
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                         // 892
  value = +value                                                                                                      // 893
  offset = offset | 0                                                                                                 // 894
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                            // 895
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                          // 896
  this[offset] = value                                                                                                // 897
  return offset + 1                                                                                                   // 898
}                                                                                                                     // 899
                                                                                                                      // 900
function objectWriteUInt16 (buf, value, offset, littleEndian) {                                                       // 901
  if (value < 0) value = 0xffff + value + 1                                                                           // 902
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {                                                 // 903
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                        // 904
      (littleEndian ? i : 1 - i) * 8                                                                                  // 905
  }                                                                                                                   // 906
}                                                                                                                     // 907
                                                                                                                      // 908
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                   // 909
  value = +value                                                                                                      // 910
  offset = offset | 0                                                                                                 // 911
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                          // 912
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 913
    this[offset] = value                                                                                              // 914
    this[offset + 1] = (value >>> 8)                                                                                  // 915
  } else {                                                                                                            // 916
    objectWriteUInt16(this, value, offset, true)                                                                      // 917
  }                                                                                                                   // 918
  return offset + 2                                                                                                   // 919
}                                                                                                                     // 920
                                                                                                                      // 921
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                   // 922
  value = +value                                                                                                      // 923
  offset = offset | 0                                                                                                 // 924
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                          // 925
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 926
    this[offset] = (value >>> 8)                                                                                      // 927
    this[offset + 1] = value                                                                                          // 928
  } else {                                                                                                            // 929
    objectWriteUInt16(this, value, offset, false)                                                                     // 930
  }                                                                                                                   // 931
  return offset + 2                                                                                                   // 932
}                                                                                                                     // 933
                                                                                                                      // 934
function objectWriteUInt32 (buf, value, offset, littleEndian) {                                                       // 935
  if (value < 0) value = 0xffffffff + value + 1                                                                       // 936
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {                                                 // 937
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                               // 938
  }                                                                                                                   // 939
}                                                                                                                     // 940
                                                                                                                      // 941
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                   // 942
  value = +value                                                                                                      // 943
  offset = offset | 0                                                                                                 // 944
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                      // 945
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 946
    this[offset + 3] = (value >>> 24)                                                                                 // 947
    this[offset + 2] = (value >>> 16)                                                                                 // 948
    this[offset + 1] = (value >>> 8)                                                                                  // 949
    this[offset] = value                                                                                              // 950
  } else {                                                                                                            // 951
    objectWriteUInt32(this, value, offset, true)                                                                      // 952
  }                                                                                                                   // 953
  return offset + 4                                                                                                   // 954
}                                                                                                                     // 955
                                                                                                                      // 956
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                   // 957
  value = +value                                                                                                      // 958
  offset = offset | 0                                                                                                 // 959
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                      // 960
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 961
    this[offset] = (value >>> 24)                                                                                     // 962
    this[offset + 1] = (value >>> 16)                                                                                 // 963
    this[offset + 2] = (value >>> 8)                                                                                  // 964
    this[offset + 3] = value                                                                                          // 965
  } else {                                                                                                            // 966
    objectWriteUInt32(this, value, offset, false)                                                                     // 967
  }                                                                                                                   // 968
  return offset + 4                                                                                                   // 969
}                                                                                                                     // 970
                                                                                                                      // 971
Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                             // 972
  value = +value                                                                                                      // 973
  offset = offset | 0                                                                                                 // 974
  if (!noAssert) {                                                                                                    // 975
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                       // 976
                                                                                                                      // 977
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                      // 978
  }                                                                                                                   // 979
                                                                                                                      // 980
  var i = 0                                                                                                           // 981
  var mul = 1                                                                                                         // 982
  var sub = value < 0 ? 1 : 0                                                                                         // 983
  this[offset] = value & 0xFF                                                                                         // 984
  while (++i < byteLength && (mul *= 0x100)) {                                                                        // 985
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                              // 986
  }                                                                                                                   // 987
                                                                                                                      // 988
  return offset + byteLength                                                                                          // 989
}                                                                                                                     // 990
                                                                                                                      // 991
Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                             // 992
  value = +value                                                                                                      // 993
  offset = offset | 0                                                                                                 // 994
  if (!noAssert) {                                                                                                    // 995
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                       // 996
                                                                                                                      // 997
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                      // 998
  }                                                                                                                   // 999
                                                                                                                      // 1000
  var i = byteLength - 1                                                                                              // 1001
  var mul = 1                                                                                                         // 1002
  var sub = value < 0 ? 1 : 0                                                                                         // 1003
  this[offset + i] = value & 0xFF                                                                                     // 1004
  while (--i >= 0 && (mul *= 0x100)) {                                                                                // 1005
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                              // 1006
  }                                                                                                                   // 1007
                                                                                                                      // 1008
  return offset + byteLength                                                                                          // 1009
}                                                                                                                     // 1010
                                                                                                                      // 1011
Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                           // 1012
  value = +value                                                                                                      // 1013
  offset = offset | 0                                                                                                 // 1014
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                        // 1015
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                          // 1016
  if (value < 0) value = 0xff + value + 1                                                                             // 1017
  this[offset] = value                                                                                                // 1018
  return offset + 1                                                                                                   // 1019
}                                                                                                                     // 1020
                                                                                                                      // 1021
Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                     // 1022
  value = +value                                                                                                      // 1023
  offset = offset | 0                                                                                                 // 1024
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                    // 1025
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 1026
    this[offset] = value                                                                                              // 1027
    this[offset + 1] = (value >>> 8)                                                                                  // 1028
  } else {                                                                                                            // 1029
    objectWriteUInt16(this, value, offset, true)                                                                      // 1030
  }                                                                                                                   // 1031
  return offset + 2                                                                                                   // 1032
}                                                                                                                     // 1033
                                                                                                                      // 1034
Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                     // 1035
  value = +value                                                                                                      // 1036
  offset = offset | 0                                                                                                 // 1037
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                    // 1038
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 1039
    this[offset] = (value >>> 8)                                                                                      // 1040
    this[offset + 1] = value                                                                                          // 1041
  } else {                                                                                                            // 1042
    objectWriteUInt16(this, value, offset, false)                                                                     // 1043
  }                                                                                                                   // 1044
  return offset + 2                                                                                                   // 1045
}                                                                                                                     // 1046
                                                                                                                      // 1047
Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                     // 1048
  value = +value                                                                                                      // 1049
  offset = offset | 0                                                                                                 // 1050
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                            // 1051
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 1052
    this[offset] = value                                                                                              // 1053
    this[offset + 1] = (value >>> 8)                                                                                  // 1054
    this[offset + 2] = (value >>> 16)                                                                                 // 1055
    this[offset + 3] = (value >>> 24)                                                                                 // 1056
  } else {                                                                                                            // 1057
    objectWriteUInt32(this, value, offset, true)                                                                      // 1058
  }                                                                                                                   // 1059
  return offset + 4                                                                                                   // 1060
}                                                                                                                     // 1061
                                                                                                                      // 1062
Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                     // 1063
  value = +value                                                                                                      // 1064
  offset = offset | 0                                                                                                 // 1065
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                            // 1066
  if (value < 0) value = 0xffffffff + value + 1                                                                       // 1067
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 1068
    this[offset] = (value >>> 24)                                                                                     // 1069
    this[offset + 1] = (value >>> 16)                                                                                 // 1070
    this[offset + 2] = (value >>> 8)                                                                                  // 1071
    this[offset + 3] = value                                                                                          // 1072
  } else {                                                                                                            // 1073
    objectWriteUInt32(this, value, offset, false)                                                                     // 1074
  }                                                                                                                   // 1075
  return offset + 4                                                                                                   // 1076
}                                                                                                                     // 1077
                                                                                                                      // 1078
function checkIEEE754 (buf, value, offset, ext, max, min) {                                                           // 1079
  if (value > max || value < min) throw new RangeError('value is out of bounds')                                      // 1080
  if (offset + ext > buf.length) throw new RangeError('index out of range')                                           // 1081
  if (offset < 0) throw new RangeError('index out of range')                                                          // 1082
}                                                                                                                     // 1083
                                                                                                                      // 1084
function writeFloat (buf, value, offset, littleEndian, noAssert) {                                                    // 1085
  if (!noAssert) {                                                                                                    // 1086
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                              // 1087
  }                                                                                                                   // 1088
  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                              // 1089
  return offset + 4                                                                                                   // 1090
}                                                                                                                     // 1091
                                                                                                                      // 1092
Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                     // 1093
  return writeFloat(this, value, offset, true, noAssert)                                                              // 1094
}                                                                                                                     // 1095
                                                                                                                      // 1096
Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                     // 1097
  return writeFloat(this, value, offset, false, noAssert)                                                             // 1098
}                                                                                                                     // 1099
                                                                                                                      // 1100
function writeDouble (buf, value, offset, littleEndian, noAssert) {                                                   // 1101
  if (!noAssert) {                                                                                                    // 1102
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                            // 1103
  }                                                                                                                   // 1104
  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                              // 1105
  return offset + 8                                                                                                   // 1106
}                                                                                                                     // 1107
                                                                                                                      // 1108
Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                   // 1109
  return writeDouble(this, value, offset, true, noAssert)                                                             // 1110
}                                                                                                                     // 1111
                                                                                                                      // 1112
Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                   // 1113
  return writeDouble(this, value, offset, false, noAssert)                                                            // 1114
}                                                                                                                     // 1115
                                                                                                                      // 1116
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                          // 1117
Buffer.prototype.copy = function copy (target, targetStart, start, end) {                                             // 1118
  if (!start) start = 0                                                                                               // 1119
  if (!end && end !== 0) end = this.length                                                                            // 1120
  if (targetStart >= target.length) targetStart = target.length                                                       // 1121
  if (!targetStart) targetStart = 0                                                                                   // 1122
  if (end > 0 && end < start) end = start                                                                             // 1123
                                                                                                                      // 1124
  // Copy 0 bytes; we're done                                                                                         // 1125
  if (end === start) return 0                                                                                         // 1126
  if (target.length === 0 || this.length === 0) return 0                                                              // 1127
                                                                                                                      // 1128
  // Fatal error conditions                                                                                           // 1129
  if (targetStart < 0) {                                                                                              // 1130
    throw new RangeError('targetStart out of bounds')                                                                 // 1131
  }                                                                                                                   // 1132
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                            // 1133
  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                        // 1134
                                                                                                                      // 1135
  // Are we oob?                                                                                                      // 1136
  if (end > this.length) end = this.length                                                                            // 1137
  if (target.length - targetStart < end - start) {                                                                    // 1138
    end = target.length - targetStart + start                                                                         // 1139
  }                                                                                                                   // 1140
                                                                                                                      // 1141
  var len = end - start                                                                                               // 1142
                                                                                                                      // 1143
  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                                    // 1144
    for (var i = 0; i < len; i++) {                                                                                   // 1145
      target[i + targetStart] = this[i + start]                                                                       // 1146
    }                                                                                                                 // 1147
  } else {                                                                                                            // 1148
    target._set(this.subarray(start, start + len), targetStart)                                                       // 1149
  }                                                                                                                   // 1150
                                                                                                                      // 1151
  return len                                                                                                          // 1152
}                                                                                                                     // 1153
                                                                                                                      // 1154
// fill(value, start=0, end=buffer.length)                                                                            // 1155
Buffer.prototype.fill = function fill (value, start, end) {                                                           // 1156
  if (!value) value = 0                                                                                               // 1157
  if (!start) start = 0                                                                                               // 1158
  if (!end) end = this.length                                                                                         // 1159
                                                                                                                      // 1160
  if (end < start) throw new RangeError('end < start')                                                                // 1161
                                                                                                                      // 1162
  // Fill 0 bytes; we're done                                                                                         // 1163
  if (end === start) return                                                                                           // 1164
  if (this.length === 0) return                                                                                       // 1165
                                                                                                                      // 1166
  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')                                  // 1167
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')                                         // 1168
                                                                                                                      // 1169
  var i                                                                                                               // 1170
  if (typeof value === 'number') {                                                                                    // 1171
    for (i = start; i < end; i++) {                                                                                   // 1172
      this[i] = value                                                                                                 // 1173
    }                                                                                                                 // 1174
  } else {                                                                                                            // 1175
    var bytes = utf8ToBytes(value.toString())                                                                         // 1176
    var len = bytes.length                                                                                            // 1177
    for (i = start; i < end; i++) {                                                                                   // 1178
      this[i] = bytes[i % len]                                                                                        // 1179
    }                                                                                                                 // 1180
  }                                                                                                                   // 1181
                                                                                                                      // 1182
  return this                                                                                                         // 1183
}                                                                                                                     // 1184
                                                                                                                      // 1185
/**                                                                                                                   // 1186
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.                                       // 1187
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.                                           // 1188
 */                                                                                                                   // 1189
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {                                                          // 1190
  if (typeof Uint8Array !== 'undefined') {                                                                            // 1191
    if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                 // 1192
      return (new Buffer(this)).buffer                                                                                // 1193
    } else {                                                                                                          // 1194
      var buf = new Uint8Array(this.length)                                                                           // 1195
      for (var i = 0, len = buf.length; i < len; i += 1) {                                                            // 1196
        buf[i] = this[i]                                                                                              // 1197
      }                                                                                                               // 1198
      return buf.buffer                                                                                               // 1199
    }                                                                                                                 // 1200
  } else {                                                                                                            // 1201
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')                                         // 1202
  }                                                                                                                   // 1203
}                                                                                                                     // 1204
                                                                                                                      // 1205
// HELPER FUNCTIONS                                                                                                   // 1206
// ================                                                                                                   // 1207
                                                                                                                      // 1208
var BP = Buffer.prototype                                                                                             // 1209
                                                                                                                      // 1210
/**                                                                                                                   // 1211
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods                                    // 1212
 */                                                                                                                   // 1213
Buffer._augment = function _augment (arr) {                                                                           // 1214
  arr.constructor = Buffer                                                                                            // 1215
  arr._isBuffer = true                                                                                                // 1216
                                                                                                                      // 1217
  // save reference to original Uint8Array set method before overwriting                                              // 1218
  arr._set = arr.set                                                                                                  // 1219
                                                                                                                      // 1220
  // deprecated, will be removed in node 0.13+                                                                        // 1221
  arr.get = BP.get                                                                                                    // 1222
  arr.set = BP.set                                                                                                    // 1223
                                                                                                                      // 1224
  arr.write = BP.write                                                                                                // 1225
  arr.toString = BP.toString                                                                                          // 1226
  arr.toLocaleString = BP.toString                                                                                    // 1227
  arr.toJSON = BP.toJSON                                                                                              // 1228
  arr.equals = BP.equals                                                                                              // 1229
  arr.compare = BP.compare                                                                                            // 1230
  arr.indexOf = BP.indexOf                                                                                            // 1231
  arr.copy = BP.copy                                                                                                  // 1232
  arr.slice = BP.slice                                                                                                // 1233
  arr.readUIntLE = BP.readUIntLE                                                                                      // 1234
  arr.readUIntBE = BP.readUIntBE                                                                                      // 1235
  arr.readUInt8 = BP.readUInt8                                                                                        // 1236
  arr.readUInt16LE = BP.readUInt16LE                                                                                  // 1237
  arr.readUInt16BE = BP.readUInt16BE                                                                                  // 1238
  arr.readUInt32LE = BP.readUInt32LE                                                                                  // 1239
  arr.readUInt32BE = BP.readUInt32BE                                                                                  // 1240
  arr.readIntLE = BP.readIntLE                                                                                        // 1241
  arr.readIntBE = BP.readIntBE                                                                                        // 1242
  arr.readInt8 = BP.readInt8                                                                                          // 1243
  arr.readInt16LE = BP.readInt16LE                                                                                    // 1244
  arr.readInt16BE = BP.readInt16BE                                                                                    // 1245
  arr.readInt32LE = BP.readInt32LE                                                                                    // 1246
  arr.readInt32BE = BP.readInt32BE                                                                                    // 1247
  arr.readFloatLE = BP.readFloatLE                                                                                    // 1248
  arr.readFloatBE = BP.readFloatBE                                                                                    // 1249
  arr.readDoubleLE = BP.readDoubleLE                                                                                  // 1250
  arr.readDoubleBE = BP.readDoubleBE                                                                                  // 1251
  arr.writeUInt8 = BP.writeUInt8                                                                                      // 1252
  arr.writeUIntLE = BP.writeUIntLE                                                                                    // 1253
  arr.writeUIntBE = BP.writeUIntBE                                                                                    // 1254
  arr.writeUInt16LE = BP.writeUInt16LE                                                                                // 1255
  arr.writeUInt16BE = BP.writeUInt16BE                                                                                // 1256
  arr.writeUInt32LE = BP.writeUInt32LE                                                                                // 1257
  arr.writeUInt32BE = BP.writeUInt32BE                                                                                // 1258
  arr.writeIntLE = BP.writeIntLE                                                                                      // 1259
  arr.writeIntBE = BP.writeIntBE                                                                                      // 1260
  arr.writeInt8 = BP.writeInt8                                                                                        // 1261
  arr.writeInt16LE = BP.writeInt16LE                                                                                  // 1262
  arr.writeInt16BE = BP.writeInt16BE                                                                                  // 1263
  arr.writeInt32LE = BP.writeInt32LE                                                                                  // 1264
  arr.writeInt32BE = BP.writeInt32BE                                                                                  // 1265
  arr.writeFloatLE = BP.writeFloatLE                                                                                  // 1266
  arr.writeFloatBE = BP.writeFloatBE                                                                                  // 1267
  arr.writeDoubleLE = BP.writeDoubleLE                                                                                // 1268
  arr.writeDoubleBE = BP.writeDoubleBE                                                                                // 1269
  arr.fill = BP.fill                                                                                                  // 1270
  arr.inspect = BP.inspect                                                                                            // 1271
  arr.toArrayBuffer = BP.toArrayBuffer                                                                                // 1272
                                                                                                                      // 1273
  return arr                                                                                                          // 1274
}                                                                                                                     // 1275
                                                                                                                      // 1276
var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g                                                                             // 1277
                                                                                                                      // 1278
function base64clean (str) {                                                                                          // 1279
  // Node strips out invalid characters like \n and \t from the string, base64-js does not                            // 1280
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                                // 1281
  // Node converts strings with length < 2 to ''                                                                      // 1282
  if (str.length < 2) return ''                                                                                       // 1283
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                             // 1284
  while (str.length % 4 !== 0) {                                                                                      // 1285
    str = str + '='                                                                                                   // 1286
  }                                                                                                                   // 1287
  return str                                                                                                          // 1288
}                                                                                                                     // 1289
                                                                                                                      // 1290
function stringtrim (str) {                                                                                           // 1291
  if (str.trim) return str.trim()                                                                                     // 1292
  return str.replace(/^\s+|\s+$/g, '')                                                                                // 1293
}                                                                                                                     // 1294
                                                                                                                      // 1295
function toHex (n) {                                                                                                  // 1296
  if (n < 16) return '0' + n.toString(16)                                                                             // 1297
  return n.toString(16)                                                                                               // 1298
}                                                                                                                     // 1299
                                                                                                                      // 1300
function utf8ToBytes (string, units) {                                                                                // 1301
  units = units || Infinity                                                                                           // 1302
  var codePoint                                                                                                       // 1303
  var length = string.length                                                                                          // 1304
  var leadSurrogate = null                                                                                            // 1305
  var bytes = []                                                                                                      // 1306
  var i = 0                                                                                                           // 1307
                                                                                                                      // 1308
  for (; i < length; i++) {                                                                                           // 1309
    codePoint = string.charCodeAt(i)                                                                                  // 1310
                                                                                                                      // 1311
    // is surrogate component                                                                                         // 1312
    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                   // 1313
      // last char was a lead                                                                                         // 1314
      if (leadSurrogate) {                                                                                            // 1315
        // 2 leads in a row                                                                                           // 1316
        if (codePoint < 0xDC00) {                                                                                     // 1317
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                         // 1318
          leadSurrogate = codePoint                                                                                   // 1319
          continue                                                                                                    // 1320
        } else {                                                                                                      // 1321
          // valid surrogate pair                                                                                     // 1322
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000                                     // 1323
          leadSurrogate = null                                                                                        // 1324
        }                                                                                                             // 1325
      } else {                                                                                                        // 1326
        // no lead yet                                                                                                // 1327
                                                                                                                      // 1328
        if (codePoint > 0xDBFF) {                                                                                     // 1329
          // unexpected trail                                                                                         // 1330
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                         // 1331
          continue                                                                                                    // 1332
        } else if (i + 1 === length) {                                                                                // 1333
          // unpaired lead                                                                                            // 1334
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                         // 1335
          continue                                                                                                    // 1336
        } else {                                                                                                      // 1337
          // valid lead                                                                                               // 1338
          leadSurrogate = codePoint                                                                                   // 1339
          continue                                                                                                    // 1340
        }                                                                                                             // 1341
      }                                                                                                               // 1342
    } else if (leadSurrogate) {                                                                                       // 1343
      // valid bmp char, but last char was a lead                                                                     // 1344
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                             // 1345
      leadSurrogate = null                                                                                            // 1346
    }                                                                                                                 // 1347
                                                                                                                      // 1348
    // encode utf8                                                                                                    // 1349
    if (codePoint < 0x80) {                                                                                           // 1350
      if ((units -= 1) < 0) break                                                                                     // 1351
      bytes.push(codePoint)                                                                                           // 1352
    } else if (codePoint < 0x800) {                                                                                   // 1353
      if ((units -= 2) < 0) break                                                                                     // 1354
      bytes.push(                                                                                                     // 1355
        codePoint >> 0x6 | 0xC0,                                                                                      // 1356
        codePoint & 0x3F | 0x80                                                                                       // 1357
      )                                                                                                               // 1358
    } else if (codePoint < 0x10000) {                                                                                 // 1359
      if ((units -= 3) < 0) break                                                                                     // 1360
      bytes.push(                                                                                                     // 1361
        codePoint >> 0xC | 0xE0,                                                                                      // 1362
        codePoint >> 0x6 & 0x3F | 0x80,                                                                               // 1363
        codePoint & 0x3F | 0x80                                                                                       // 1364
      )                                                                                                               // 1365
    } else if (codePoint < 0x200000) {                                                                                // 1366
      if ((units -= 4) < 0) break                                                                                     // 1367
      bytes.push(                                                                                                     // 1368
        codePoint >> 0x12 | 0xF0,                                                                                     // 1369
        codePoint >> 0xC & 0x3F | 0x80,                                                                               // 1370
        codePoint >> 0x6 & 0x3F | 0x80,                                                                               // 1371
        codePoint & 0x3F | 0x80                                                                                       // 1372
      )                                                                                                               // 1373
    } else {                                                                                                          // 1374
      throw new Error('Invalid code point')                                                                           // 1375
    }                                                                                                                 // 1376
  }                                                                                                                   // 1377
                                                                                                                      // 1378
  return bytes                                                                                                        // 1379
}                                                                                                                     // 1380
                                                                                                                      // 1381
function asciiToBytes (str) {                                                                                         // 1382
  var byteArray = []                                                                                                  // 1383
  for (var i = 0; i < str.length; i++) {                                                                              // 1384
    // Node's code seems to be doing this and not & 0x7F..                                                            // 1385
    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                          // 1386
  }                                                                                                                   // 1387
  return byteArray                                                                                                    // 1388
}                                                                                                                     // 1389
                                                                                                                      // 1390
function utf16leToBytes (str, units) {                                                                                // 1391
  var c, hi, lo                                                                                                       // 1392
  var byteArray = []                                                                                                  // 1393
  for (var i = 0; i < str.length; i++) {                                                                              // 1394
    if ((units -= 2) < 0) break                                                                                       // 1395
                                                                                                                      // 1396
    c = str.charCodeAt(i)                                                                                             // 1397
    hi = c >> 8                                                                                                       // 1398
    lo = c % 256                                                                                                      // 1399
    byteArray.push(lo)                                                                                                // 1400
    byteArray.push(hi)                                                                                                // 1401
  }                                                                                                                   // 1402
                                                                                                                      // 1403
  return byteArray                                                                                                    // 1404
}                                                                                                                     // 1405
                                                                                                                      // 1406
function base64ToBytes (str) {                                                                                        // 1407
  return base64.toByteArray(base64clean(str))                                                                         // 1408
}                                                                                                                     // 1409
                                                                                                                      // 1410
function blitBuffer (src, dst, offset, length) {                                                                      // 1411
  for (var i = 0; i < length; i++) {                                                                                  // 1412
    if ((i + offset >= dst.length) || (i >= src.length)) break                                                        // 1413
    dst[i + offset] = src[i]                                                                                          // 1414
  }                                                                                                                   // 1415
  return i                                                                                                            // 1416
}                                                                                                                     // 1417
                                                                                                                      // 1418
function decodeUtf8Char (str) {                                                                                       // 1419
  try {                                                                                                               // 1420
    return decodeURIComponent(str)                                                                                    // 1421
  } catch (err) {                                                                                                     // 1422
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char                                                          // 1423
  }                                                                                                                   // 1424
}                                                                                                                     // 1425
                                                                                                                      // 1426
},{"base64-js":3,"ieee754":4,"is-array":5}],3:[function(require,module,exports){                                      // 1427
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';                                      // 1428
                                                                                                                      // 1429
;(function (exports) {                                                                                                // 1430
	'use strict';                                                                                                        // 1431
                                                                                                                      // 1432
  var Arr = (typeof Uint8Array !== 'undefined')                                                                       // 1433
    ? Uint8Array                                                                                                      // 1434
    : Array                                                                                                           // 1435
                                                                                                                      // 1436
	var PLUS   = '+'.charCodeAt(0)                                                                                       // 1437
	var SLASH  = '/'.charCodeAt(0)                                                                                       // 1438
	var NUMBER = '0'.charCodeAt(0)                                                                                       // 1439
	var LOWER  = 'a'.charCodeAt(0)                                                                                       // 1440
	var UPPER  = 'A'.charCodeAt(0)                                                                                       // 1441
	var PLUS_URL_SAFE = '-'.charCodeAt(0)                                                                                // 1442
	var SLASH_URL_SAFE = '_'.charCodeAt(0)                                                                               // 1443
                                                                                                                      // 1444
	function decode (elt) {                                                                                              // 1445
		var code = elt.charCodeAt(0)                                                                                        // 1446
		if (code === PLUS ||                                                                                                // 1447
		    code === PLUS_URL_SAFE)                                                                                         // 1448
			return 62 // '+'                                                                                                   // 1449
		if (code === SLASH ||                                                                                               // 1450
		    code === SLASH_URL_SAFE)                                                                                        // 1451
			return 63 // '/'                                                                                                   // 1452
		if (code < NUMBER)                                                                                                  // 1453
			return -1 //no match                                                                                               // 1454
		if (code < NUMBER + 10)                                                                                             // 1455
			return code - NUMBER + 26 + 26                                                                                     // 1456
		if (code < UPPER + 26)                                                                                              // 1457
			return code - UPPER                                                                                                // 1458
		if (code < LOWER + 26)                                                                                              // 1459
			return code - LOWER + 26                                                                                           // 1460
	}                                                                                                                    // 1461
                                                                                                                      // 1462
	function b64ToByteArray (b64) {                                                                                      // 1463
		var i, j, l, tmp, placeHolders, arr                                                                                 // 1464
                                                                                                                      // 1465
		if (b64.length % 4 > 0) {                                                                                           // 1466
			throw new Error('Invalid string. Length must be a multiple of 4')                                                  // 1467
		}                                                                                                                   // 1468
                                                                                                                      // 1469
		// the number of equal signs (place holders)                                                                        // 1470
		// if there are two placeholders, than the two characters before it                                                 // 1471
		// represent one byte                                                                                               // 1472
		// if there is only one, then the three characters before it represent 2 bytes                                      // 1473
		// this is just a cheap hack to not do indexOf twice                                                                // 1474
		var len = b64.length                                                                                                // 1475
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0                                // 1476
                                                                                                                      // 1477
		// base64 is 4/3 + up to two characters of the original data                                                        // 1478
		arr = new Arr(b64.length * 3 / 4 - placeHolders)                                                                    // 1479
                                                                                                                      // 1480
		// if there are placeholders, only get up to the last complete 4 chars                                              // 1481
		l = placeHolders > 0 ? b64.length - 4 : b64.length                                                                  // 1482
                                                                                                                      // 1483
		var L = 0                                                                                                           // 1484
                                                                                                                      // 1485
		function push (v) {                                                                                                 // 1486
			arr[L++] = v                                                                                                       // 1487
		}                                                                                                                   // 1488
                                                                                                                      // 1489
		for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                         // 1490
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)                                                                                       // 1492
			push((tmp & 0xFF00) >> 8)                                                                                          // 1493
			push(tmp & 0xFF)                                                                                                   // 1494
		}                                                                                                                   // 1495
                                                                                                                      // 1496
		if (placeHolders === 2) {                                                                                           // 1497
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)                                              // 1498
			push(tmp & 0xFF)                                                                                                   // 1499
		} else if (placeHolders === 1) {                                                                                    // 1500
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)          // 1501
			push((tmp >> 8) & 0xFF)                                                                                            // 1502
			push(tmp & 0xFF)                                                                                                   // 1503
		}                                                                                                                   // 1504
                                                                                                                      // 1505
		return arr                                                                                                          // 1506
	}                                                                                                                    // 1507
                                                                                                                      // 1508
	function uint8ToBase64 (uint8) {                                                                                     // 1509
		var i,                                                                                                              // 1510
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes                                              // 1511
			output = "",                                                                                                       // 1512
			temp, length                                                                                                       // 1513
                                                                                                                      // 1514
		function encode (num) {                                                                                             // 1515
			return lookup.charAt(num)                                                                                          // 1516
		}                                                                                                                   // 1517
                                                                                                                      // 1518
		function tripletToBase64 (num) {                                                                                    // 1519
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)          // 1520
		}                                                                                                                   // 1521
                                                                                                                      // 1522
		// go through the array every three bytes, we'll deal with trailing stuff later                                     // 1523
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {                                               // 1524
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                     // 1525
			output += tripletToBase64(temp)                                                                                    // 1526
		}                                                                                                                   // 1527
                                                                                                                      // 1528
		// pad the end with zeros, but make sure to not forget the extra bytes                                              // 1529
		switch (extraBytes) {                                                                                               // 1530
			case 1:                                                                                                            // 1531
				temp = uint8[uint8.length - 1]                                                                                    // 1532
				output += encode(temp >> 2)                                                                                       // 1533
				output += encode((temp << 4) & 0x3F)                                                                              // 1534
				output += '=='                                                                                                    // 1535
				break                                                                                                             // 1536
			case 2:                                                                                                            // 1537
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])                                                 // 1538
				output += encode(temp >> 10)                                                                                      // 1539
				output += encode((temp >> 4) & 0x3F)                                                                              // 1540
				output += encode((temp << 2) & 0x3F)                                                                              // 1541
				output += '='                                                                                                     // 1542
				break                                                                                                             // 1543
		}                                                                                                                   // 1544
                                                                                                                      // 1545
		return output                                                                                                       // 1546
	}                                                                                                                    // 1547
                                                                                                                      // 1548
	exports.toByteArray = b64ToByteArray                                                                                 // 1549
	exports.fromByteArray = uint8ToBase64                                                                                // 1550
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))                                                   // 1551
                                                                                                                      // 1552
},{}],4:[function(require,module,exports){                                                                            // 1553
exports.read = function(buffer, offset, isLE, mLen, nBytes) {                                                         // 1554
  var e, m,                                                                                                           // 1555
      eLen = nBytes * 8 - mLen - 1,                                                                                   // 1556
      eMax = (1 << eLen) - 1,                                                                                         // 1557
      eBias = eMax >> 1,                                                                                              // 1558
      nBits = -7,                                                                                                     // 1559
      i = isLE ? (nBytes - 1) : 0,                                                                                    // 1560
      d = isLE ? -1 : 1,                                                                                              // 1561
      s = buffer[offset + i];                                                                                         // 1562
                                                                                                                      // 1563
  i += d;                                                                                                             // 1564
                                                                                                                      // 1565
  e = s & ((1 << (-nBits)) - 1);                                                                                      // 1566
  s >>= (-nBits);                                                                                                     // 1567
  nBits += eLen;                                                                                                      // 1568
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);                                            // 1569
                                                                                                                      // 1570
  m = e & ((1 << (-nBits)) - 1);                                                                                      // 1571
  e >>= (-nBits);                                                                                                     // 1572
  nBits += mLen;                                                                                                      // 1573
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);                                            // 1574
                                                                                                                      // 1575
  if (e === 0) {                                                                                                      // 1576
    e = 1 - eBias;                                                                                                    // 1577
  } else if (e === eMax) {                                                                                            // 1578
    return m ? NaN : ((s ? -1 : 1) * Infinity);                                                                       // 1579
  } else {                                                                                                            // 1580
    m = m + Math.pow(2, mLen);                                                                                        // 1581
    e = e - eBias;                                                                                                    // 1582
  }                                                                                                                   // 1583
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);                                                                    // 1584
};                                                                                                                    // 1585
                                                                                                                      // 1586
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {                                                 // 1587
  var e, m, c,                                                                                                        // 1588
      eLen = nBytes * 8 - mLen - 1,                                                                                   // 1589
      eMax = (1 << eLen) - 1,                                                                                         // 1590
      eBias = eMax >> 1,                                                                                              // 1591
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),                                                   // 1592
      i = isLE ? 0 : (nBytes - 1),                                                                                    // 1593
      d = isLE ? 1 : -1,                                                                                              // 1594
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;                                                        // 1595
                                                                                                                      // 1596
  value = Math.abs(value);                                                                                            // 1597
                                                                                                                      // 1598
  if (isNaN(value) || value === Infinity) {                                                                           // 1599
    m = isNaN(value) ? 1 : 0;                                                                                         // 1600
    e = eMax;                                                                                                         // 1601
  } else {                                                                                                            // 1602
    e = Math.floor(Math.log(value) / Math.LN2);                                                                       // 1603
    if (value * (c = Math.pow(2, -e)) < 1) {                                                                          // 1604
      e--;                                                                                                            // 1605
      c *= 2;                                                                                                         // 1606
    }                                                                                                                 // 1607
    if (e + eBias >= 1) {                                                                                             // 1608
      value += rt / c;                                                                                                // 1609
    } else {                                                                                                          // 1610
      value += rt * Math.pow(2, 1 - eBias);                                                                           // 1611
    }                                                                                                                 // 1612
    if (value * c >= 2) {                                                                                             // 1613
      e++;                                                                                                            // 1614
      c /= 2;                                                                                                         // 1615
    }                                                                                                                 // 1616
                                                                                                                      // 1617
    if (e + eBias >= eMax) {                                                                                          // 1618
      m = 0;                                                                                                          // 1619
      e = eMax;                                                                                                       // 1620
    } else if (e + eBias >= 1) {                                                                                      // 1621
      m = (value * c - 1) * Math.pow(2, mLen);                                                                        // 1622
      e = e + eBias;                                                                                                  // 1623
    } else {                                                                                                          // 1624
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);                                                         // 1625
      e = 0;                                                                                                          // 1626
    }                                                                                                                 // 1627
  }                                                                                                                   // 1628
                                                                                                                      // 1629
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);                                      // 1630
                                                                                                                      // 1631
  e = (e << mLen) | m;                                                                                                // 1632
  eLen += mLen;                                                                                                       // 1633
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);                                       // 1634
                                                                                                                      // 1635
  buffer[offset + i - d] |= s * 128;                                                                                  // 1636
};                                                                                                                    // 1637
                                                                                                                      // 1638
},{}],5:[function(require,module,exports){                                                                            // 1639
                                                                                                                      // 1640
/**                                                                                                                   // 1641
 * isArray                                                                                                            // 1642
 */                                                                                                                   // 1643
                                                                                                                      // 1644
var isArray = Array.isArray;                                                                                          // 1645
                                                                                                                      // 1646
/**                                                                                                                   // 1647
 * toString                                                                                                           // 1648
 */                                                                                                                   // 1649
                                                                                                                      // 1650
var str = Object.prototype.toString;                                                                                  // 1651
                                                                                                                      // 1652
/**                                                                                                                   // 1653
 * Whether or not the given `val`                                                                                     // 1654
 * is an array.                                                                                                       // 1655
 *                                                                                                                    // 1656
 * example:                                                                                                           // 1657
 *                                                                                                                    // 1658
 *        isArray([]);                                                                                                // 1659
 *        // > true                                                                                                   // 1660
 *        isArray(arguments);                                                                                         // 1661
 *        // > false                                                                                                  // 1662
 *        isArray('');                                                                                                // 1663
 *        // > false                                                                                                  // 1664
 *                                                                                                                    // 1665
 * @param {mixed} val                                                                                                 // 1666
 * @return {bool}                                                                                                     // 1667
 */                                                                                                                   // 1668
                                                                                                                      // 1669
module.exports = isArray || function (val) {                                                                          // 1670
  return !! val && '[object Array]' == str.call(val);                                                                 // 1671
};                                                                                                                    // 1672
                                                                                                                      // 1673
},{}],6:[function(require,module,exports){                                                                            // 1674
'use strict';                                                                                                         // 1675
                                                                                                                      // 1676
exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')                 // 1677
                                                                                                                      // 1678
exports.createHash = exports.Hash = require('create-hash')                                                            // 1679
                                                                                                                      // 1680
exports.createHmac = exports.Hmac = require('create-hmac')                                                            // 1681
                                                                                                                      // 1682
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {                                                                                     // 1684
  return hashes;                                                                                                      // 1685
}                                                                                                                     // 1686
                                                                                                                      // 1687
var p = require('pbkdf2')                                                                                             // 1688
exports.pbkdf2 = p.pbkdf2                                                                                             // 1689
exports.pbkdf2Sync = p.pbkdf2Sync                                                                                     // 1690
                                                                                                                      // 1691
var aes = require('browserify-aes');                                                                                  // 1692
[                                                                                                                     // 1693
  'Cipher',                                                                                                           // 1694
  'createCipher',                                                                                                     // 1695
  'Cipheriv',                                                                                                         // 1696
  'createCipheriv',                                                                                                   // 1697
  'Decipher',                                                                                                         // 1698
  'createDecipher',                                                                                                   // 1699
  'Decipheriv',                                                                                                       // 1700
  'createDecipheriv',                                                                                                 // 1701
  'getCiphers',                                                                                                       // 1702
  'listCiphers'                                                                                                       // 1703
].forEach(function (key) {                                                                                            // 1704
  exports[key] = aes[key];                                                                                            // 1705
})                                                                                                                    // 1706
                                                                                                                      // 1707
var dh = require('diffie-hellman');                                                                                   // 1708
[                                                                                                                     // 1709
  'DiffieHellmanGroup',                                                                                               // 1710
  'createDiffieHellmanGroup',                                                                                         // 1711
  'getDiffieHellman',                                                                                                 // 1712
  'createDiffieHellman',                                                                                              // 1713
  'DiffieHellman'                                                                                                     // 1714
].forEach(function (key) {                                                                                            // 1715
  exports[key] = dh[key];                                                                                             // 1716
})                                                                                                                    // 1717
                                                                                                                      // 1718
var sign = require('browserify-sign');                                                                                // 1719
[                                                                                                                     // 1720
  'createSign',                                                                                                       // 1721
  'Sign',                                                                                                             // 1722
  'createVerify',                                                                                                     // 1723
  'Verify'                                                                                                            // 1724
].forEach(function (key) {                                                                                            // 1725
  exports[key] = sign[key];                                                                                           // 1726
})                                                                                                                    // 1727
                                                                                                                      // 1728
exports.createECDH = require('create-ecdh')                                                                           // 1729
                                                                                                                      // 1730
var publicEncrypt = require('public-encrypt');                                                                        // 1731
                                                                                                                      // 1732
[                                                                                                                     // 1733
  'publicEncrypt',                                                                                                    // 1734
  'privateEncrypt',                                                                                                   // 1735
  'publicDecrypt',                                                                                                    // 1736
  'privateDecrypt'                                                                                                    // 1737
].forEach(function (key) {                                                                                            // 1738
  exports[key] = publicEncrypt[key];                                                                                  // 1739
})                                                                                                                    // 1740
                                                                                                                      // 1741
// the least I can do is make error messages for the rest of the node.js/crypto api.                                  // 1742
;[                                                                                                                    // 1743
  'createCredentials'                                                                                                 // 1744
].forEach(function (name) {                                                                                           // 1745
  exports[name] = function () {                                                                                       // 1746
    throw new Error([                                                                                                 // 1747
      'sorry, ' + name + ' is not implemented yet',                                                                   // 1748
      'we accept pull requests',                                                                                      // 1749
      'https://github.com/crypto-browserify/crypto-browserify'                                                        // 1750
    ].join('\n'));                                                                                                    // 1751
  }                                                                                                                   // 1752
})                                                                                                                    // 1753
                                                                                                                      // 1754
},{"browserify-aes":10,"browserify-sign":26,"browserify-sign/algos":25,"create-ecdh":72,"create-hash":94,"create-hmac":106,"diffie-hellman":107,"pbkdf2":114,"public-encrypt":115,"randombytes":142}],7:[function(require,module,exports){
(function (Buffer){                                                                                                   // 1756
var md5 = require('create-hash/md5');                                                                                 // 1757
module.exports = EVP_BytesToKey;                                                                                      // 1758
function EVP_BytesToKey(password, keyLen, ivLen) {                                                                    // 1759
  if (!Buffer.isBuffer(password)) {                                                                                   // 1760
    password = new Buffer(password, 'binary');                                                                        // 1761
  }                                                                                                                   // 1762
  keyLen = keyLen/8;                                                                                                  // 1763
  ivLen = ivLen || 0;                                                                                                 // 1764
  var ki = 0;                                                                                                         // 1765
  var ii = 0;                                                                                                         // 1766
  var key = new Buffer(keyLen);                                                                                       // 1767
  var iv = new Buffer(ivLen);                                                                                         // 1768
  var addmd = 0;                                                                                                      // 1769
  var md_buf;                                                                                                         // 1770
  var i;                                                                                                              // 1771
  var bufs =  [];                                                                                                     // 1772
  while (true) {                                                                                                      // 1773
    if(addmd++ > 0) {                                                                                                 // 1774
       bufs.push(md_buf);                                                                                             // 1775
    }                                                                                                                 // 1776
    bufs.push(password);                                                                                              // 1777
    md_buf = md5(Buffer.concat(bufs));                                                                                // 1778
    bufs = [];                                                                                                        // 1779
    i = 0;                                                                                                            // 1780
    if(keyLen > 0) {                                                                                                  // 1781
      while(true) {                                                                                                   // 1782
        if(keyLen === 0) {                                                                                            // 1783
          break;                                                                                                      // 1784
        }                                                                                                             // 1785
        if(i === md_buf.length) {                                                                                     // 1786
          break;                                                                                                      // 1787
        }                                                                                                             // 1788
        key[ki++] = md_buf[i];                                                                                        // 1789
        keyLen--;                                                                                                     // 1790
        i++;                                                                                                          // 1791
       }                                                                                                              // 1792
    }                                                                                                                 // 1793
    if(ivLen > 0 && i !== md_buf.length) {                                                                            // 1794
      while(true) {                                                                                                   // 1795
        if(ivLen === 0) {                                                                                             // 1796
          break;                                                                                                      // 1797
        }                                                                                                             // 1798
        if(i === md_buf.length) {                                                                                     // 1799
          break;                                                                                                      // 1800
        }                                                                                                             // 1801
       iv[ii++] = md_buf[i];                                                                                          // 1802
       ivLen--;                                                                                                       // 1803
       i++;                                                                                                           // 1804
     }                                                                                                                // 1805
   }                                                                                                                  // 1806
   if(keyLen === 0 && ivLen === 0) {                                                                                  // 1807
      break;                                                                                                          // 1808
    }                                                                                                                 // 1809
  }                                                                                                                   // 1810
  for(i=0;i<md_buf.length;i++) {                                                                                      // 1811
    md_buf[i] = 0;                                                                                                    // 1812
  }                                                                                                                   // 1813
  return {                                                                                                            // 1814
    key: key,                                                                                                         // 1815
    iv: iv                                                                                                            // 1816
  };                                                                                                                  // 1817
}                                                                                                                     // 1818
}).call(this,require("buffer").Buffer)                                                                                // 1819
                                                                                                                      // 1820
},{"buffer":2,"create-hash/md5":96}],8:[function(require,module,exports){                                             // 1821
(function (Buffer){                                                                                                   // 1822
// based on the aes implimentation in triple sec                                                                      // 1823
// https://github.com/keybase/triplesec                                                                               // 1824
                                                                                                                      // 1825
// which is in turn based on the one from crypto-js                                                                   // 1826
// https://code.google.com/p/crypto-js/                                                                               // 1827
                                                                                                                      // 1828
var uint_max = Math.pow(2, 32);                                                                                       // 1829
function fixup_uint32(x) {                                                                                            // 1830
    var ret, x_pos;                                                                                                   // 1831
    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;             // 1832
    return ret;                                                                                                       // 1833
}                                                                                                                     // 1834
function scrub_vec(v) {                                                                                               // 1835
  var i, _i, _ref;                                                                                                    // 1836
  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {                 // 1837
    v[i] = 0;                                                                                                         // 1838
  }                                                                                                                   // 1839
  return false;                                                                                                       // 1840
}                                                                                                                     // 1841
                                                                                                                      // 1842
function Global() {                                                                                                   // 1843
  var i;                                                                                                              // 1844
  this.SBOX = [];                                                                                                     // 1845
  this.INV_SBOX = [];                                                                                                 // 1846
  this.SUB_MIX = (function() {                                                                                        // 1847
    var _i, _results;                                                                                                 // 1848
    _results = [];                                                                                                    // 1849
    for (i = _i = 0; _i < 4; i = ++_i) {                                                                              // 1850
      _results.push([]);                                                                                              // 1851
    }                                                                                                                 // 1852
    return _results;                                                                                                  // 1853
  })();                                                                                                               // 1854
  this.INV_SUB_MIX = (function() {                                                                                    // 1855
    var _i, _results;                                                                                                 // 1856
    _results = [];                                                                                                    // 1857
    for (i = _i = 0; _i < 4; i = ++_i) {                                                                              // 1858
      _results.push([]);                                                                                              // 1859
    }                                                                                                                 // 1860
    return _results;                                                                                                  // 1861
  })();                                                                                                               // 1862
  this.init();                                                                                                        // 1863
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];                                     // 1864
}                                                                                                                     // 1865
                                                                                                                      // 1866
Global.prototype.init = function() {                                                                                  // 1867
  var d, i, sx, t, x, x2, x4, x8, xi, _i;                                                                             // 1868
  d = (function() {                                                                                                   // 1869
    var _i, _results;                                                                                                 // 1870
    _results = [];                                                                                                    // 1871
    for (i = _i = 0; _i < 256; i = ++_i) {                                                                            // 1872
      if (i < 128) {                                                                                                  // 1873
        _results.push(i << 1);                                                                                        // 1874
      } else {                                                                                                        // 1875
        _results.push((i << 1) ^ 0x11b);                                                                              // 1876
      }                                                                                                               // 1877
    }                                                                                                                 // 1878
    return _results;                                                                                                  // 1879
  })();                                                                                                               // 1880
  x = 0;                                                                                                              // 1881
  xi = 0;                                                                                                             // 1882
  for (i = _i = 0; _i < 256; i = ++_i) {                                                                              // 1883
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);                                                          // 1884
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;                                                                             // 1885
    this.SBOX[x] = sx;                                                                                                // 1886
    this.INV_SBOX[sx] = x;                                                                                            // 1887
    x2 = d[x];                                                                                                        // 1888
    x4 = d[x2];                                                                                                       // 1889
    x8 = d[x4];                                                                                                       // 1890
    t = (d[sx] * 0x101) ^ (sx * 0x1010100);                                                                           // 1891
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);                                                                       // 1892
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);                                                                      // 1893
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);                                                                       // 1894
    this.SUB_MIX[3][x] = t;                                                                                           // 1895
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);                                           // 1896
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);                                                                  // 1897
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);                                                                 // 1898
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);                                                                  // 1899
    this.INV_SUB_MIX[3][sx] = t;                                                                                      // 1900
    if (x === 0) {                                                                                                    // 1901
      x = xi = 1;                                                                                                     // 1902
    } else {                                                                                                          // 1903
      x = x2 ^ d[d[d[x8 ^ x2]]];                                                                                      // 1904
      xi ^= d[d[xi]];                                                                                                 // 1905
    }                                                                                                                 // 1906
  }                                                                                                                   // 1907
  return true;                                                                                                        // 1908
};                                                                                                                    // 1909
                                                                                                                      // 1910
var G = new Global();                                                                                                 // 1911
                                                                                                                      // 1912
                                                                                                                      // 1913
AES.blockSize = 4 * 4;                                                                                                // 1914
                                                                                                                      // 1915
AES.prototype.blockSize = AES.blockSize;                                                                              // 1916
                                                                                                                      // 1917
AES.keySize = 256 / 8;                                                                                                // 1918
                                                                                                                      // 1919
AES.prototype.keySize = AES.keySize;                                                                                  // 1920
                                                                                                                      // 1921
 function bufferToArray(buf) {                                                                                        // 1922
  var len = buf.length/4;                                                                                             // 1923
  var out = new Array(len);                                                                                           // 1924
  var i = -1;                                                                                                         // 1925
  while (++i < len) {                                                                                                 // 1926
    out[i] = buf.readUInt32BE(i * 4);                                                                                 // 1927
  }                                                                                                                   // 1928
  return out;                                                                                                         // 1929
 }                                                                                                                    // 1930
function AES(key) {                                                                                                   // 1931
  this._key = bufferToArray(key);                                                                                     // 1932
  this._doReset();                                                                                                    // 1933
}                                                                                                                     // 1934
                                                                                                                      // 1935
AES.prototype._doReset = function() {                                                                                 // 1936
  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;                                                          // 1937
  keyWords = this._key;                                                                                               // 1938
  keySize = keyWords.length;                                                                                          // 1939
  this._nRounds = keySize + 6;                                                                                        // 1940
  ksRows = (this._nRounds + 1) * 4;                                                                                   // 1941
  this._keySchedule = [];                                                                                             // 1942
  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {                  // 1943
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
  }                                                                                                                   // 1945
  this._invKeySchedule = [];                                                                                          // 1946
  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {            // 1947
    ksRow = ksRows - invKsRow;                                                                                        // 1948
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];                                                            // 1949
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
  }                                                                                                                   // 1951
  return true;                                                                                                        // 1952
};                                                                                                                    // 1953
                                                                                                                      // 1954
AES.prototype.encryptBlock = function(M) {                                                                            // 1955
  M = bufferToArray(new Buffer(M));                                                                                   // 1956
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);                                              // 1957
  var buf = new Buffer(16);                                                                                           // 1958
  buf.writeUInt32BE(out[0], 0);                                                                                       // 1959
  buf.writeUInt32BE(out[1], 4);                                                                                       // 1960
  buf.writeUInt32BE(out[2], 8);                                                                                       // 1961
  buf.writeUInt32BE(out[3], 12);                                                                                      // 1962
  return buf;                                                                                                         // 1963
};                                                                                                                    // 1964
                                                                                                                      // 1965
AES.prototype.decryptBlock = function(M) {                                                                            // 1966
  M = bufferToArray(new Buffer(M));                                                                                   // 1967
  var temp = [M[3], M[1]];                                                                                            // 1968
  M[1] = temp[0];                                                                                                     // 1969
  M[3] = temp[1];                                                                                                     // 1970
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);                                   // 1971
  var buf = new Buffer(16);                                                                                           // 1972
  buf.writeUInt32BE(out[0], 0);                                                                                       // 1973
  buf.writeUInt32BE(out[3], 4);                                                                                       // 1974
  buf.writeUInt32BE(out[2], 8);                                                                                       // 1975
  buf.writeUInt32BE(out[1], 12);                                                                                      // 1976
  return buf;                                                                                                         // 1977
};                                                                                                                    // 1978
                                                                                                                      // 1979
AES.prototype.scrub = function() {                                                                                    // 1980
  scrub_vec(this._keySchedule);                                                                                       // 1981
  scrub_vec(this._invKeySchedule);                                                                                    // 1982
  scrub_vec(this._key);                                                                                               // 1983
};                                                                                                                    // 1984
                                                                                                                      // 1985
AES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {                                               // 1986
  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;                                                         // 1987
                                                                                                                      // 1988
  s0 = M[0] ^ keySchedule[0];                                                                                         // 1989
  s1 = M[1] ^ keySchedule[1];                                                                                         // 1990
  s2 = M[2] ^ keySchedule[2];                                                                                         // 1991
  s3 = M[3] ^ keySchedule[3];                                                                                         // 1992
  ksRow = 4;                                                                                                          // 1993
  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {    // 1994
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
    s0 = t0;                                                                                                          // 1999
    s1 = t1;                                                                                                          // 2000
    s2 = t2;                                                                                                          // 2001
    s3 = t3;                                                                                                          // 2002
  }                                                                                                                   // 2003
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
  return [                                                                                                            // 2008
    fixup_uint32(t0),                                                                                                 // 2009
    fixup_uint32(t1),                                                                                                 // 2010
    fixup_uint32(t2),                                                                                                 // 2011
    fixup_uint32(t3)                                                                                                  // 2012
  ];                                                                                                                  // 2013
                                                                                                                      // 2014
};                                                                                                                    // 2015
                                                                                                                      // 2016
                                                                                                                      // 2017
                                                                                                                      // 2018
                                                                                                                      // 2019
  exports.AES = AES;                                                                                                  // 2020
}).call(this,require("buffer").Buffer)                                                                                // 2021
                                                                                                                      // 2022
},{"buffer":2}],9:[function(require,module,exports){                                                                  // 2023
(function (Buffer){                                                                                                   // 2024
var aes = require('./aes');                                                                                           // 2025
var Transform = require('./cipherBase');                                                                              // 2026
var inherits = require('inherits');                                                                                   // 2027
var GHASH = require('./ghash');                                                                                       // 2028
var xor = require('./xor');                                                                                           // 2029
inherits(StreamCipher, Transform);                                                                                    // 2030
module.exports = StreamCipher;                                                                                        // 2031
                                                                                                                      // 2032
function StreamCipher(mode, key, iv, decrypt) {                                                                       // 2033
  if (!(this instanceof StreamCipher)) {                                                                              // 2034
    return new StreamCipher(mode, key, iv);                                                                           // 2035
  }                                                                                                                   // 2036
  Transform.call(this);                                                                                               // 2037
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])]);                                                        // 2038
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])]);                                                                 // 2039
  this._cipher = new aes.AES(key);                                                                                    // 2040
  this._prev = new Buffer(iv.length);                                                                                 // 2041
  this._cache = new Buffer('');                                                                                       // 2042
  this._secCache = new Buffer('');                                                                                    // 2043
  this._decrypt = decrypt;                                                                                            // 2044
  this._alen = 0;                                                                                                     // 2045
  this._len = 0;                                                                                                      // 2046
  iv.copy(this._prev);                                                                                                // 2047
  this._mode = mode;                                                                                                  // 2048
  var h = new Buffer(4);                                                                                              // 2049
  h.fill(0);                                                                                                          // 2050
  this._ghash = new GHASH(this._cipher.encryptBlock(h));                                                              // 2051
  this._authTag = null;                                                                                               // 2052
  this._called = false;                                                                                               // 2053
}                                                                                                                     // 2054
StreamCipher.prototype._update = function (chunk) {                                                                   // 2055
  if (!this._called && this._alen) {                                                                                  // 2056
    var rump = 16 - (this._alen % 16);                                                                                // 2057
    if (rump <16) {                                                                                                   // 2058
      rump = new Buffer(rump);                                                                                        // 2059
      rump.fill(0);                                                                                                   // 2060
      this._ghash.update(rump);                                                                                       // 2061
    }                                                                                                                 // 2062
  }                                                                                                                   // 2063
  this._called = true;                                                                                                // 2064
  var out = this._mode.encrypt(this, chunk);                                                                          // 2065
  if (this._decrypt) {                                                                                                // 2066
    this._ghash.update(chunk);                                                                                        // 2067
  } else {                                                                                                            // 2068
    this._ghash.update(out);                                                                                          // 2069
  }                                                                                                                   // 2070
  this._len += chunk.length;                                                                                          // 2071
  return out;                                                                                                         // 2072
};                                                                                                                    // 2073
StreamCipher.prototype._final = function () {                                                                         // 2074
  if (this._decrypt && !this._authTag) {                                                                              // 2075
    throw new Error('Unsupported state or unable to authenticate data');                                              // 2076
  }                                                                                                                   // 2077
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));            // 2078
  if (this._decrypt) {                                                                                                // 2079
    if (xorTest(tag, this._authTag)) {                                                                                // 2080
      throw new Error('Unsupported state or unable to authenticate data');                                            // 2081
    }                                                                                                                 // 2082
  } else {                                                                                                            // 2083
    this._authTag = tag;                                                                                              // 2084
  }                                                                                                                   // 2085
  this._cipher.scrub();                                                                                               // 2086
};                                                                                                                    // 2087
StreamCipher.prototype.getAuthTag = function getAuthTag () {                                                          // 2088
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {                                                             // 2089
    return this._authTag;                                                                                             // 2090
  } else {                                                                                                            // 2091
    throw new Error('Attempting to get auth tag in unsupported state');                                               // 2092
  }                                                                                                                   // 2093
};                                                                                                                    // 2094
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {                                                       // 2095
  if (this._decrypt) {                                                                                                // 2096
    this._authTag = tag;                                                                                              // 2097
  } else {                                                                                                            // 2098
    throw new Error('Attempting to set auth tag in unsupported state');                                               // 2099
  }                                                                                                                   // 2100
};                                                                                                                    // 2101
StreamCipher.prototype.setAAD = function setAAD (buf) {                                                               // 2102
  if (!this._called) {                                                                                                // 2103
    this._ghash.update(buf);                                                                                          // 2104
    this._alen += buf.length;                                                                                         // 2105
  } else {                                                                                                            // 2106
    throw new Error('Attempting to set AAD in unsupported state');                                                    // 2107
  }                                                                                                                   // 2108
};                                                                                                                    // 2109
function xorTest(a, b) {                                                                                              // 2110
  var out = 0;                                                                                                        // 2111
  if (a.length !== b.length) {                                                                                        // 2112
    out++;                                                                                                            // 2113
  }                                                                                                                   // 2114
  var len = Math.min(a.length, b.length);                                                                             // 2115
  var i = -1;                                                                                                         // 2116
  while (++i < len) {                                                                                                 // 2117
    out += (a[i] ^ b[i]);                                                                                             // 2118
  }                                                                                                                   // 2119
  return out;                                                                                                         // 2120
}                                                                                                                     // 2121
                                                                                                                      // 2122
                                                                                                                      // 2123
                                                                                                                      // 2124
}).call(this,require("buffer").Buffer)                                                                                // 2125
                                                                                                                      // 2126
},{"./aes":8,"./cipherBase":11,"./ghash":14,"./xor":24,"buffer":2,"inherits":144}],10:[function(require,module,exports){
var ciphers = require('./encrypter');                                                                                 // 2128
exports.createCipher = exports.Cipher = ciphers.createCipher;                                                         // 2129
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;                                                   // 2130
var deciphers = require('./decrypter');                                                                               // 2131
exports.createDecipher = exports.Decipher = deciphers.createDecipher;                                                 // 2132
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;                                           // 2133
var modes = require('./modes');                                                                                       // 2134
function getCiphers () {                                                                                              // 2135
  return Object.keys(modes);                                                                                          // 2136
}                                                                                                                     // 2137
exports.listCiphers = exports.getCiphers = getCiphers;                                                                // 2138
                                                                                                                      // 2139
},{"./decrypter":12,"./encrypter":13,"./modes":15}],11:[function(require,module,exports){                             // 2140
(function (Buffer){                                                                                                   // 2141
var Transform = require('stream').Transform;                                                                          // 2142
var inherits = require('inherits');                                                                                   // 2143
                                                                                                                      // 2144
module.exports = CipherBase;                                                                                          // 2145
inherits(CipherBase, Transform);                                                                                      // 2146
function CipherBase() {                                                                                               // 2147
  Transform.call(this);                                                                                               // 2148
}                                                                                                                     // 2149
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {                                                  // 2150
  if (typeof data === 'string') {                                                                                     // 2151
    data = new Buffer(data, inputEnc);                                                                                // 2152
  }                                                                                                                   // 2153
  var outData = this._update(data);                                                                                   // 2154
  if (outputEnc) {                                                                                                    // 2155
    outData = outData.toString(outputEnc);                                                                            // 2156
  }                                                                                                                   // 2157
  return outData;                                                                                                     // 2158
};                                                                                                                    // 2159
CipherBase.prototype._transform = function (data, _, next) {                                                          // 2160
  this.push(this._update(data));                                                                                      // 2161
  next();                                                                                                             // 2162
};                                                                                                                    // 2163
CipherBase.prototype._flush = function (next) {                                                                       // 2164
  try {                                                                                                               // 2165
    this.push(this._final());                                                                                         // 2166
  } catch(e) {                                                                                                        // 2167
    return next(e);                                                                                                   // 2168
  }                                                                                                                   // 2169
  next();                                                                                                             // 2170
};                                                                                                                    // 2171
CipherBase.prototype.final = function (outputEnc) {                                                                   // 2172
  var outData = this._final() || new Buffer('');                                                                      // 2173
  if (outputEnc) {                                                                                                    // 2174
    outData = outData.toString(outputEnc);                                                                            // 2175
  }                                                                                                                   // 2176
  return outData;                                                                                                     // 2177
};                                                                                                                    // 2178
}).call(this,require("buffer").Buffer)                                                                                // 2179
                                                                                                                      // 2180
},{"buffer":2,"inherits":144,"stream":158}],12:[function(require,module,exports){                                     // 2181
(function (Buffer){                                                                                                   // 2182
var aes = require('./aes');                                                                                           // 2183
var Transform = require('./cipherBase');                                                                              // 2184
var inherits = require('inherits');                                                                                   // 2185
var modes = require('./modes');                                                                                       // 2186
var StreamCipher = require('./streamCipher');                                                                         // 2187
var AuthCipher = require('./authCipher');                                                                             // 2188
var ebtk = require('./EVP_BytesToKey');                                                                               // 2189
                                                                                                                      // 2190
inherits(Decipher, Transform);                                                                                        // 2191
function Decipher(mode, key, iv) {                                                                                    // 2192
  if (!(this instanceof Decipher)) {                                                                                  // 2193
    return new Decipher(mode, key, iv);                                                                               // 2194
  }                                                                                                                   // 2195
  Transform.call(this);                                                                                               // 2196
  this._cache = new Splitter();                                                                                       // 2197
  this._last = void 0;                                                                                                // 2198
  this._cipher = new aes.AES(key);                                                                                    // 2199
  this._prev = new Buffer(iv.length);                                                                                 // 2200
  iv.copy(this._prev);                                                                                                // 2201
  this._mode = mode;                                                                                                  // 2202
  this._autopadding = true;                                                                                           // 2203
}                                                                                                                     // 2204
Decipher.prototype._update = function (data) {                                                                        // 2205
  this._cache.add(data);                                                                                              // 2206
  var chunk;                                                                                                          // 2207
  var thing;                                                                                                          // 2208
  var out = [];                                                                                                       // 2209
  while ((chunk = this._cache.get(this._autopadding))) {                                                              // 2210
    thing = this._mode.decrypt(this, chunk);                                                                          // 2211
    out.push(thing);                                                                                                  // 2212
  }                                                                                                                   // 2213
  return Buffer.concat(out);                                                                                          // 2214
};                                                                                                                    // 2215
Decipher.prototype._final = function () {                                                                             // 2216
  var chunk = this._cache.flush();                                                                                    // 2217
  if (this._autopadding) {                                                                                            // 2218
    return unpad(this._mode.decrypt(this, chunk));                                                                    // 2219
  } else if (chunk) {                                                                                                 // 2220
    throw new Error('data not multiple of block length');                                                             // 2221
  }                                                                                                                   // 2222
};                                                                                                                    // 2223
Decipher.prototype.setAutoPadding = function (setTo) {                                                                // 2224
  this._autopadding = !!setTo;                                                                                        // 2225
};                                                                                                                    // 2226
function Splitter() {                                                                                                 // 2227
   if (!(this instanceof Splitter)) {                                                                                 // 2228
    return new Splitter();                                                                                            // 2229
  }                                                                                                                   // 2230
  this.cache = new Buffer('');                                                                                        // 2231
}                                                                                                                     // 2232
Splitter.prototype.add = function (data) {                                                                            // 2233
  this.cache = Buffer.concat([this.cache, data]);                                                                     // 2234
};                                                                                                                    // 2235
                                                                                                                      // 2236
Splitter.prototype.get = function (autoPadding) {                                                                     // 2237
  var out;                                                                                                            // 2238
  if (autoPadding) {                                                                                                  // 2239
    if (this.cache.length > 16) {                                                                                     // 2240
      out = this.cache.slice(0, 16);                                                                                  // 2241
      this.cache = this.cache.slice(16);                                                                              // 2242
      return out;                                                                                                     // 2243
    }                                                                                                                 // 2244
  } else {                                                                                                            // 2245
    if (this.cache.length >= 16) {                                                                                    // 2246
      out = this.cache.slice(0, 16);                                                                                  // 2247
      this.cache = this.cache.slice(16);                                                                              // 2248
      return out;                                                                                                     // 2249
    }                                                                                                                 // 2250
  }                                                                                                                   // 2251
  return null;                                                                                                        // 2252
};                                                                                                                    // 2253
Splitter.prototype.flush = function () {                                                                              // 2254
  if (this.cache.length) {                                                                                            // 2255
    return this.cache;                                                                                                // 2256
  }                                                                                                                   // 2257
};                                                                                                                    // 2258
function unpad(last) {                                                                                                // 2259
  var padded = last[15];                                                                                              // 2260
  var i = -1;                                                                                                         // 2261
  while (++i < padded) {                                                                                              // 2262
    if (last[(i + (16 - padded))] !== padded) {                                                                       // 2263
      throw new Error('unable to decrypt data');                                                                      // 2264
    }                                                                                                                 // 2265
  }                                                                                                                   // 2266
  if (padded === 16) {                                                                                                // 2267
    return;                                                                                                           // 2268
  }                                                                                                                   // 2269
  return last.slice(0, 16 - padded);                                                                                  // 2270
}                                                                                                                     // 2271
                                                                                                                      // 2272
var modelist = {                                                                                                      // 2273
  ECB: require('./modes/ecb'),                                                                                        // 2274
  CBC: require('./modes/cbc'),                                                                                        // 2275
  CFB: require('./modes/cfb'),                                                                                        // 2276
  CFB8: require('./modes/cfb8'),                                                                                      // 2277
  CFB1: require('./modes/cfb1'),                                                                                      // 2278
  OFB: require('./modes/ofb'),                                                                                        // 2279
  CTR: require('./modes/ctr'),                                                                                        // 2280
  GCM: require('./modes/ctr')                                                                                         // 2281
};                                                                                                                    // 2282
                                                                                                                      // 2283
                                                                                                                      // 2284
function createDecipheriv(suite, password, iv) {                                                                      // 2285
  var config = modes[suite.toLowerCase()];                                                                            // 2286
  if (!config) {                                                                                                      // 2287
    throw new TypeError('invalid suite type');                                                                        // 2288
  }                                                                                                                   // 2289
  if (typeof iv === 'string') {                                                                                       // 2290
    iv = new Buffer(iv);                                                                                              // 2291
  }                                                                                                                   // 2292
  if (typeof password === 'string') {                                                                                 // 2293
    password = new Buffer(password);                                                                                  // 2294
  }                                                                                                                   // 2295
  if (password.length !== config.key/8) {                                                                             // 2296
    throw new TypeError('invalid key length ' + password.length);                                                     // 2297
  }                                                                                                                   // 2298
  if (iv.length !== config.iv) {                                                                                      // 2299
    throw new TypeError('invalid iv length ' + iv.length);                                                            // 2300
  }                                                                                                                   // 2301
  if (config.type === 'stream') {                                                                                     // 2302
    return new StreamCipher(modelist[config.mode], password, iv, true);                                               // 2303
  } else if (config.type === 'auth') {                                                                                // 2304
    return new AuthCipher(modelist[config.mode], password, iv, true);                                                 // 2305
  }                                                                                                                   // 2306
  return new Decipher(modelist[config.mode], password, iv);                                                           // 2307
}                                                                                                                     // 2308
                                                                                                                      // 2309
function createDecipher (suite, password) {                                                                           // 2310
  var config = modes[suite.toLowerCase()];                                                                            // 2311
  if (!config) {                                                                                                      // 2312
    throw new TypeError('invalid suite type');                                                                        // 2313
  }                                                                                                                   // 2314
  var keys = ebtk(password, config.key, config.iv);                                                                   // 2315
  return createDecipheriv(suite, keys.key, keys.iv);                                                                  // 2316
}                                                                                                                     // 2317
exports.createDecipher = createDecipher;                                                                              // 2318
exports.createDecipheriv = createDecipheriv;                                                                          // 2319
}).call(this,require("buffer").Buffer)                                                                                // 2320
                                                                                                                      // 2321
},{"./EVP_BytesToKey":7,"./aes":8,"./authCipher":9,"./cipherBase":11,"./modes":15,"./modes/cbc":16,"./modes/cfb":17,"./modes/cfb1":18,"./modes/cfb8":19,"./modes/ctr":20,"./modes/ecb":21,"./modes/ofb":22,"./streamCipher":23,"buffer":2,"inherits":144}],13:[function(require,module,exports){
(function (Buffer){                                                                                                   // 2323
var aes = require('./aes');                                                                                           // 2324
var Transform = require('./cipherBase');                                                                              // 2325
var inherits = require('inherits');                                                                                   // 2326
var modes = require('./modes');                                                                                       // 2327
var ebtk = require('./EVP_BytesToKey');                                                                               // 2328
var StreamCipher = require('./streamCipher');                                                                         // 2329
var AuthCipher = require('./authCipher');                                                                             // 2330
inherits(Cipher, Transform);                                                                                          // 2331
function Cipher(mode, key, iv) {                                                                                      // 2332
  if (!(this instanceof Cipher)) {                                                                                    // 2333
    return new Cipher(mode, key, iv);                                                                                 // 2334
  }                                                                                                                   // 2335
  Transform.call(this);                                                                                               // 2336
  this._cache = new Splitter();                                                                                       // 2337
  this._cipher = new aes.AES(key);                                                                                    // 2338
  this._prev = new Buffer(iv.length);                                                                                 // 2339
  iv.copy(this._prev);                                                                                                // 2340
  this._mode = mode;                                                                                                  // 2341
  this._autopadding = true;                                                                                           // 2342
}                                                                                                                     // 2343
Cipher.prototype._update = function (data) {                                                                          // 2344
  this._cache.add(data);                                                                                              // 2345
  var chunk;                                                                                                          // 2346
  var thing;                                                                                                          // 2347
  var out = [];                                                                                                       // 2348
  while ((chunk = this._cache.get())) {                                                                               // 2349
    thing = this._mode.encrypt(this, chunk);                                                                          // 2350
    out.push(thing);                                                                                                  // 2351
  }                                                                                                                   // 2352
  return Buffer.concat(out);                                                                                          // 2353
};                                                                                                                    // 2354
Cipher.prototype._final = function () {                                                                               // 2355
  var chunk = this._cache.flush();                                                                                    // 2356
  if (this._autopadding) {                                                                                            // 2357
    chunk = this._mode.encrypt(this, chunk);                                                                          // 2358
    this._cipher.scrub();                                                                                             // 2359
    return chunk;                                                                                                     // 2360
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {                                          // 2361
    this._cipher.scrub();                                                                                             // 2362
    throw new Error('data not multiple of block length');                                                             // 2363
  }                                                                                                                   // 2364
};                                                                                                                    // 2365
Cipher.prototype.setAutoPadding = function (setTo) {                                                                  // 2366
  this._autopadding = !!setTo;                                                                                        // 2367
};                                                                                                                    // 2368
                                                                                                                      // 2369
function Splitter() {                                                                                                 // 2370
   if (!(this instanceof Splitter)) {                                                                                 // 2371
    return new Splitter();                                                                                            // 2372
  }                                                                                                                   // 2373
  this.cache = new Buffer('');                                                                                        // 2374
}                                                                                                                     // 2375
Splitter.prototype.add = function (data) {                                                                            // 2376
  this.cache = Buffer.concat([this.cache, data]);                                                                     // 2377
};                                                                                                                    // 2378
                                                                                                                      // 2379
Splitter.prototype.get = function () {                                                                                // 2380
  if (this.cache.length > 15) {                                                                                       // 2381
    var out = this.cache.slice(0, 16);                                                                                // 2382
    this.cache = this.cache.slice(16);                                                                                // 2383
    return out;                                                                                                       // 2384
  }                                                                                                                   // 2385
  return null;                                                                                                        // 2386
};                                                                                                                    // 2387
Splitter.prototype.flush = function () {                                                                              // 2388
  var len = 16 - this.cache.length;                                                                                   // 2389
  var padBuff = new Buffer(len);                                                                                      // 2390
                                                                                                                      // 2391
  var i = -1;                                                                                                         // 2392
  while (++i < len) {                                                                                                 // 2393
    padBuff.writeUInt8(len, i);                                                                                       // 2394
  }                                                                                                                   // 2395
  var out = Buffer.concat([this.cache, padBuff]);                                                                     // 2396
  return out;                                                                                                         // 2397
};                                                                                                                    // 2398
var modelist = {                                                                                                      // 2399
  ECB: require('./modes/ecb'),                                                                                        // 2400
  CBC: require('./modes/cbc'),                                                                                        // 2401
  CFB: require('./modes/cfb'),                                                                                        // 2402
  CFB8: require('./modes/cfb8'),                                                                                      // 2403
  CFB1: require('./modes/cfb1'),                                                                                      // 2404
  OFB: require('./modes/ofb'),                                                                                        // 2405
  CTR: require('./modes/ctr'),                                                                                        // 2406
  GCM: require('./modes/ctr')                                                                                         // 2407
};                                                                                                                    // 2408
                                                                                                                      // 2409
function createCipheriv(suite, password, iv) {                                                                        // 2410
  var config = modes[suite.toLowerCase()];                                                                            // 2411
  if (!config) {                                                                                                      // 2412
    throw new TypeError('invalid suite type');                                                                        // 2413
  }                                                                                                                   // 2414
  if (typeof iv === 'string') {                                                                                       // 2415
    iv = new Buffer(iv);                                                                                              // 2416
  }                                                                                                                   // 2417
  if (typeof password === 'string') {                                                                                 // 2418
    password = new Buffer(password);                                                                                  // 2419
  }                                                                                                                   // 2420
  if (password.length !== config.key/8) {                                                                             // 2421
    throw new TypeError('invalid key length ' + password.length);                                                     // 2422
  }                                                                                                                   // 2423
  if (iv.length !== config.iv) {                                                                                      // 2424
    throw new TypeError('invalid iv length ' + iv.length);                                                            // 2425
  }                                                                                                                   // 2426
  if (config.type === 'stream') {                                                                                     // 2427
    return new StreamCipher(modelist[config.mode], password, iv);                                                     // 2428
  } else if (config.type === 'auth') {                                                                                // 2429
    return new AuthCipher(modelist[config.mode], password, iv);                                                       // 2430
  }                                                                                                                   // 2431
  return new Cipher(modelist[config.mode], password, iv);                                                             // 2432
}                                                                                                                     // 2433
function createCipher (suite, password) {                                                                             // 2434
  var config = modes[suite.toLowerCase()];                                                                            // 2435
  if (!config) {                                                                                                      // 2436
    throw new TypeError('invalid suite type');                                                                        // 2437
  }                                                                                                                   // 2438
  var keys = ebtk(password, config.key, config.iv);                                                                   // 2439
  return createCipheriv(suite, keys.key, keys.iv);                                                                    // 2440
}                                                                                                                     // 2441
                                                                                                                      // 2442
exports.createCipheriv = createCipheriv;                                                                              // 2443
exports.createCipher = createCipher;                                                                                  // 2444
}).call(this,require("buffer").Buffer)                                                                                // 2445
                                                                                                                      // 2446
},{"./EVP_BytesToKey":7,"./aes":8,"./authCipher":9,"./cipherBase":11,"./modes":15,"./modes/cbc":16,"./modes/cfb":17,"./modes/cfb1":18,"./modes/cfb8":19,"./modes/ctr":20,"./modes/ecb":21,"./modes/ofb":22,"./streamCipher":23,"buffer":2,"inherits":144}],14:[function(require,module,exports){
(function (Buffer){                                                                                                   // 2448
var zeros = new Buffer(16);                                                                                           // 2449
zeros.fill(0);                                                                                                        // 2450
module.exports = GHASH;                                                                                               // 2451
function GHASH(key){                                                                                                  // 2452
  this.h = key;                                                                                                       // 2453
  this.state = new Buffer(16);                                                                                        // 2454
  this.state.fill(0);                                                                                                 // 2455
  this.cache = new Buffer('');                                                                                        // 2456
}                                                                                                                     // 2457
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html                                       // 2458
// by Juho Vähä-Herttua                                                                                               // 2459
GHASH.prototype.ghash = function (block) {                                                                            // 2460
  var i = -1;                                                                                                         // 2461
  while (++i < block.length) {                                                                                        // 2462
   this.state[i] ^= block[i];                                                                                         // 2463
  }                                                                                                                   // 2464
  this._multiply();                                                                                                   // 2465
};                                                                                                                    // 2466
                                                                                                                      // 2467
GHASH.prototype._multiply = function () {                                                                             // 2468
  var Vi = toArray(this.h);                                                                                           // 2469
  var Zi = [0, 0, 0, 0];                                                                                              // 2470
  var j, xi, lsb_Vi;                                                                                                  // 2471
  var i = -1;                                                                                                         // 2472
  while (++i < 128) {                                                                                                 // 2473
    xi = (this.state[~~(i/8)] & (1 << (7-i%8))) !== 0;                                                                // 2474
    if (xi) {                                                                                                         // 2475
      // Z_i+1 = Z_i ^ V_i                                                                                            // 2476
      Zi = xor(Zi, Vi);                                                                                               // 2477
    }                                                                                                                 // 2478
                                                                                                                      // 2479
    // Store the value of LSB(V_i)                                                                                    // 2480
    lsb_Vi = (Vi[3] & 1) !== 0;                                                                                       // 2481
                                                                                                                      // 2482
    // V_i+1 = V_i >> 1                                                                                               // 2483
    for (j=3; j>0; j--) {                                                                                             // 2484
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j-1]&1) << 31);                                                                    // 2485
    }                                                                                                                 // 2486
    Vi[0] = Vi[0] >>> 1;                                                                                              // 2487
                                                                                                                      // 2488
    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R                                                                       // 2489
    if (lsb_Vi) {                                                                                                     // 2490
      Vi[0] = Vi[0] ^ (0xe1 << 24);                                                                                   // 2491
    }                                                                                                                 // 2492
  }                                                                                                                   // 2493
  this.state = fromArray(Zi);                                                                                         // 2494
};                                                                                                                    // 2495
GHASH.prototype.update = function (buf) {                                                                             // 2496
  this.cache = Buffer.concat([this.cache, buf]);                                                                      // 2497
  var chunk;                                                                                                          // 2498
  while (this.cache.length >= 16) {                                                                                   // 2499
    chunk = this.cache.slice(0, 16);                                                                                  // 2500
    this.cache = this.cache.slice(16);                                                                                // 2501
    this.ghash(chunk);                                                                                                // 2502
  }                                                                                                                   // 2503
};                                                                                                                    // 2504
GHASH.prototype.final = function (abl, bl) {                                                                          // 2505
  if (this.cache.length) {                                                                                            // 2506
    this.ghash(Buffer.concat([this.cache, zeros], 16));                                                               // 2507
  }                                                                                                                   // 2508
  this.ghash(fromArray([                                                                                              // 2509
     0, abl,                                                                                                          // 2510
     0, bl                                                                                                            // 2511
   ]));                                                                                                               // 2512
  return this.state;                                                                                                  // 2513
};                                                                                                                    // 2514
                                                                                                                      // 2515
function toArray(buf) {                                                                                               // 2516
  return [                                                                                                            // 2517
    buf.readUInt32BE(0),                                                                                              // 2518
    buf.readUInt32BE(4),                                                                                              // 2519
    buf.readUInt32BE(8),                                                                                              // 2520
    buf.readUInt32BE(12)                                                                                              // 2521
  ];                                                                                                                  // 2522
}                                                                                                                     // 2523
function fromArray(out) {                                                                                             // 2524
  out = out.map(fixup_uint32);                                                                                        // 2525
  var buf = new Buffer(16);                                                                                           // 2526
  buf.writeUInt32BE(out[0], 0);                                                                                       // 2527
  buf.writeUInt32BE(out[1], 4);                                                                                       // 2528
  buf.writeUInt32BE(out[2], 8);                                                                                       // 2529
  buf.writeUInt32BE(out[3], 12);                                                                                      // 2530
  return buf;                                                                                                         // 2531
}                                                                                                                     // 2532
var uint_max = Math.pow(2, 32);                                                                                       // 2533
function fixup_uint32(x) {                                                                                            // 2534
    var ret, x_pos;                                                                                                   // 2535
    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;             // 2536
    return ret;                                                                                                       // 2537
}                                                                                                                     // 2538
function xor(a, b) {                                                                                                  // 2539
  return [                                                                                                            // 2540
    a[0] ^ b[0],                                                                                                      // 2541
    a[1] ^ b[1],                                                                                                      // 2542
    a[2] ^ b[2],                                                                                                      // 2543
    a[3] ^ b[3],                                                                                                      // 2544
  ];                                                                                                                  // 2545
}                                                                                                                     // 2546
}).call(this,require("buffer").Buffer)                                                                                // 2547
                                                                                                                      // 2548
},{"buffer":2}],15:[function(require,module,exports){                                                                 // 2549
exports['aes-128-ecb'] = {                                                                                            // 2550
  cipher: 'AES',                                                                                                      // 2551
  key: 128,                                                                                                           // 2552
  iv: 0,                                                                                                              // 2553
  mode: 'ECB',                                                                                                        // 2554
  type: 'block'                                                                                                       // 2555
};                                                                                                                    // 2556
exports['aes-192-ecb'] = {                                                                                            // 2557
  cipher: 'AES',                                                                                                      // 2558
  key: 192,                                                                                                           // 2559
  iv: 0,                                                                                                              // 2560
  mode: 'ECB',                                                                                                        // 2561
  type: 'block'                                                                                                       // 2562
};                                                                                                                    // 2563
exports['aes-256-ecb'] = {                                                                                            // 2564
  cipher: 'AES',                                                                                                      // 2565
  key: 256,                                                                                                           // 2566
  iv: 0,                                                                                                              // 2567
  mode: 'ECB',                                                                                                        // 2568
  type: 'block'                                                                                                       // 2569
};                                                                                                                    // 2570
exports['aes-128-cbc'] = {                                                                                            // 2571
  cipher: 'AES',                                                                                                      // 2572
  key: 128,                                                                                                           // 2573
  iv: 16,                                                                                                             // 2574
  mode: 'CBC',                                                                                                        // 2575
  type: 'block'                                                                                                       // 2576
};                                                                                                                    // 2577
exports['aes-192-cbc'] = {                                                                                            // 2578
  cipher: 'AES',                                                                                                      // 2579
  key: 192,                                                                                                           // 2580
  iv: 16,                                                                                                             // 2581
  mode: 'CBC',                                                                                                        // 2582
  type: 'block'                                                                                                       // 2583
};                                                                                                                    // 2584
exports['aes-256-cbc'] = {                                                                                            // 2585
  cipher: 'AES',                                                                                                      // 2586
  key: 256,                                                                                                           // 2587
  iv: 16,                                                                                                             // 2588
  mode: 'CBC',                                                                                                        // 2589
  type: 'block'                                                                                                       // 2590
};                                                                                                                    // 2591
exports['aes128'] = exports['aes-128-cbc'];                                                                           // 2592
exports['aes192'] = exports['aes-192-cbc'];                                                                           // 2593
exports['aes256'] = exports['aes-256-cbc'];                                                                           // 2594
exports['aes-128-cfb'] = {                                                                                            // 2595
  cipher: 'AES',                                                                                                      // 2596
  key: 128,                                                                                                           // 2597
  iv: 16,                                                                                                             // 2598
  mode: 'CFB',                                                                                                        // 2599
  type: 'stream'                                                                                                      // 2600
};                                                                                                                    // 2601
exports['aes-192-cfb'] = {                                                                                            // 2602
  cipher: 'AES',                                                                                                      // 2603
  key: 192,                                                                                                           // 2604
  iv: 16,                                                                                                             // 2605
  mode: 'CFB',                                                                                                        // 2606
  type: 'stream'                                                                                                      // 2607
};                                                                                                                    // 2608
exports['aes-256-cfb'] = {                                                                                            // 2609
  cipher: 'AES',                                                                                                      // 2610
  key: 256,                                                                                                           // 2611
  iv: 16,                                                                                                             // 2612
  mode: 'CFB',                                                                                                        // 2613
  type: 'stream'                                                                                                      // 2614
};                                                                                                                    // 2615
exports['aes-128-cfb8'] = {                                                                                           // 2616
  cipher: 'AES',                                                                                                      // 2617
  key: 128,                                                                                                           // 2618
  iv: 16,                                                                                                             // 2619
  mode: 'CFB8',                                                                                                       // 2620
  type: 'stream'                                                                                                      // 2621
};                                                                                                                    // 2622
exports['aes-192-cfb8'] = {                                                                                           // 2623
  cipher: 'AES',                                                                                                      // 2624
  key: 192,                                                                                                           // 2625
  iv: 16,                                                                                                             // 2626
  mode: 'CFB8',                                                                                                       // 2627
  type: 'stream'                                                                                                      // 2628
};                                                                                                                    // 2629
exports['aes-256-cfb8'] = {                                                                                           // 2630
  cipher: 'AES',                                                                                                      // 2631
  key: 256,                                                                                                           // 2632
  iv: 16,                                                                                                             // 2633
  mode: 'CFB8',                                                                                                       // 2634
  type: 'stream'                                                                                                      // 2635
};                                                                                                                    // 2636
exports['aes-128-cfb1'] = {                                                                                           // 2637
  cipher: 'AES',                                                                                                      // 2638
  key: 128,                                                                                                           // 2639
  iv: 16,                                                                                                             // 2640
  mode: 'CFB1',                                                                                                       // 2641
  type: 'stream'                                                                                                      // 2642
};                                                                                                                    // 2643
exports['aes-192-cfb1'] = {                                                                                           // 2644
  cipher: 'AES',                                                                                                      // 2645
  key: 192,                                                                                                           // 2646
  iv: 16,                                                                                                             // 2647
  mode: 'CFB1',                                                                                                       // 2648
  type: 'stream'                                                                                                      // 2649
};                                                                                                                    // 2650
exports['aes-256-cfb1'] = {                                                                                           // 2651
  cipher: 'AES',                                                                                                      // 2652
  key: 256,                                                                                                           // 2653
  iv: 16,                                                                                                             // 2654
  mode: 'CFB1',                                                                                                       // 2655
  type: 'stream'                                                                                                      // 2656
};                                                                                                                    // 2657
exports['aes-128-ofb'] = {                                                                                            // 2658
  cipher: 'AES',                                                                                                      // 2659
  key: 128,                                                                                                           // 2660
  iv: 16,                                                                                                             // 2661
  mode: 'OFB',                                                                                                        // 2662
  type: 'stream'                                                                                                      // 2663
};                                                                                                                    // 2664
exports['aes-192-ofb'] = {                                                                                            // 2665
  cipher: 'AES',                                                                                                      // 2666
  key: 192,                                                                                                           // 2667
  iv: 16,                                                                                                             // 2668
  mode: 'OFB',                                                                                                        // 2669
  type: 'stream'                                                                                                      // 2670
};                                                                                                                    // 2671
exports['aes-256-ofb'] = {                                                                                            // 2672
  cipher: 'AES',                                                                                                      // 2673
  key: 256,                                                                                                           // 2674
  iv: 16,                                                                                                             // 2675
  mode: 'OFB',                                                                                                        // 2676
  type: 'stream'                                                                                                      // 2677
};                                                                                                                    // 2678
exports['aes-128-ctr'] = {                                                                                            // 2679
  cipher: 'AES',                                                                                                      // 2680
  key: 128,                                                                                                           // 2681
  iv: 16,                                                                                                             // 2682
  mode: 'CTR',                                                                                                        // 2683
  type: 'stream'                                                                                                      // 2684
};                                                                                                                    // 2685
exports['aes-192-ctr'] = {                                                                                            // 2686
  cipher: 'AES',                                                                                                      // 2687
  key: 192,                                                                                                           // 2688
  iv: 16,                                                                                                             // 2689
  mode: 'CTR',                                                                                                        // 2690
  type: 'stream'                                                                                                      // 2691
};                                                                                                                    // 2692
exports['aes-256-ctr'] = {                                                                                            // 2693
  cipher: 'AES',                                                                                                      // 2694
  key: 256,                                                                                                           // 2695
  iv: 16,                                                                                                             // 2696
  mode: 'CTR',                                                                                                        // 2697
  type: 'stream'                                                                                                      // 2698
};                                                                                                                    // 2699
exports['aes-128-gcm'] = {                                                                                            // 2700
  cipher: 'AES',                                                                                                      // 2701
  key: 128,                                                                                                           // 2702
  iv: 12,                                                                                                             // 2703
  mode: 'GCM',                                                                                                        // 2704
  type: 'auth'                                                                                                        // 2705
};                                                                                                                    // 2706
exports['aes-192-gcm'] = {                                                                                            // 2707
  cipher: 'AES',                                                                                                      // 2708
  key: 192,                                                                                                           // 2709
  iv: 12,                                                                                                             // 2710
  mode: 'GCM',                                                                                                        // 2711
  type: 'auth'                                                                                                        // 2712
};                                                                                                                    // 2713
exports['aes-256-gcm'] = {                                                                                            // 2714
  cipher: 'AES',                                                                                                      // 2715
  key: 256,                                                                                                           // 2716
  iv: 12,                                                                                                             // 2717
  mode: 'GCM',                                                                                                        // 2718
  type: 'auth'                                                                                                        // 2719
};                                                                                                                    // 2720
},{}],16:[function(require,module,exports){                                                                           // 2721
var xor = require('../xor');                                                                                          // 2722
exports.encrypt = function (self, block) {                                                                            // 2723
  var data = xor(block, self._prev);                                                                                  // 2724
  self._prev = self._cipher.encryptBlock(data);                                                                       // 2725
  return self._prev;                                                                                                  // 2726
};                                                                                                                    // 2727
exports.decrypt = function (self, block) {                                                                            // 2728
  var pad = self._prev;                                                                                               // 2729
  self._prev = block;                                                                                                 // 2730
  var out = self._cipher.decryptBlock(block);                                                                         // 2731
  return xor(out, pad);                                                                                               // 2732
};                                                                                                                    // 2733
},{"../xor":24}],17:[function(require,module,exports){                                                                // 2734
(function (Buffer){                                                                                                   // 2735
var xor = require('../xor');                                                                                          // 2736
exports.encrypt = function (self, data, decrypt) {                                                                    // 2737
  var out = new Buffer('');                                                                                           // 2738
  var len;                                                                                                            // 2739
  while (data.length) {                                                                                               // 2740
    if (self._cache.length === 0) {                                                                                   // 2741
      self._cache = self._cipher.encryptBlock(self._prev);                                                            // 2742
      self._prev = new Buffer('');                                                                                    // 2743
    }                                                                                                                 // 2744
    if (self._cache.length <= data.length) {                                                                          // 2745
      len = self._cache.length;                                                                                       // 2746
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);                                    // 2747
      data = data.slice(len);                                                                                         // 2748
    } else {                                                                                                          // 2749
      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);                                                  // 2750
      break;                                                                                                          // 2751
    }                                                                                                                 // 2752
  }                                                                                                                   // 2753
  return out;                                                                                                         // 2754
};                                                                                                                    // 2755
function encryptStart(self, data, decrypt) {                                                                          // 2756
  var len = data.length;                                                                                              // 2757
  var out = xor(data, self._cache);                                                                                   // 2758
  self._cache = self._cache.slice(len);                                                                               // 2759
  self._prev = Buffer.concat([self._prev, decrypt?data:out]);                                                         // 2760
  return out;                                                                                                         // 2761
}                                                                                                                     // 2762
}).call(this,require("buffer").Buffer)                                                                                // 2763
                                                                                                                      // 2764
},{"../xor":24,"buffer":2}],18:[function(require,module,exports){                                                     // 2765
(function (Buffer){                                                                                                   // 2766
                                                                                                                      // 2767
function encryptByte(self, byte, decrypt) {                                                                           // 2768
  var pad;                                                                                                            // 2769
  var i = -1;                                                                                                         // 2770
  var len = 8;                                                                                                        // 2771
  var out = 0;                                                                                                        // 2772
  var bit, value;                                                                                                     // 2773
  while (++i < len) {                                                                                                 // 2774
    pad = self._cipher.encryptBlock(self._prev);                                                                      // 2775
    bit = (byte & (1 << (7-i))) ? 0x80:0;                                                                             // 2776
    value = pad[0] ^ bit;                                                                                             // 2777
    out += ((value&0x80) >> (i%8));                                                                                   // 2778
    self._prev = shiftIn(self._prev, decrypt?bit:value);                                                              // 2779
  }                                                                                                                   // 2780
  return out;                                                                                                         // 2781
}                                                                                                                     // 2782
exports.encrypt = function (self, chunk, decrypt) {                                                                   // 2783
  var len = chunk.length;                                                                                             // 2784
  var out = new Buffer(len);                                                                                          // 2785
  var i = -1;                                                                                                         // 2786
  while (++i < len) {                                                                                                 // 2787
    out[i] = encryptByte(self, chunk[i], decrypt);                                                                    // 2788
  }                                                                                                                   // 2789
  return out;                                                                                                         // 2790
};                                                                                                                    // 2791
function shiftIn(buffer, value) {                                                                                     // 2792
  var len = buffer.length;                                                                                            // 2793
  var i = -1;                                                                                                         // 2794
  var out = new Buffer(buffer.length);                                                                                // 2795
  buffer = Buffer.concat([buffer, new Buffer([value])]);                                                              // 2796
  while(++i < len) {                                                                                                  // 2797
    out[i] = buffer[i]<<1 | buffer[i+1]>>(7);                                                                         // 2798
  }                                                                                                                   // 2799
  return out;                                                                                                         // 2800
}                                                                                                                     // 2801
}).call(this,require("buffer").Buffer)                                                                                // 2802
                                                                                                                      // 2803
},{"buffer":2}],19:[function(require,module,exports){                                                                 // 2804
(function (Buffer){                                                                                                   // 2805
function encryptByte(self, byte, decrypt) {                                                                           // 2806
  var pad = self._cipher.encryptBlock(self._prev);                                                                    // 2807
  var out = pad[0] ^ byte;                                                                                            // 2808
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt?byte:out])]);                                  // 2809
  return out;                                                                                                         // 2810
}                                                                                                                     // 2811
exports.encrypt = function (self, chunk, decrypt) {                                                                   // 2812
  var len = chunk.length;                                                                                             // 2813
  var out = new Buffer(len);                                                                                          // 2814
  var i = -1;                                                                                                         // 2815
  while (++i < len) {                                                                                                 // 2816
    out[i] = encryptByte(self, chunk[i], decrypt);                                                                    // 2817
  }                                                                                                                   // 2818
  return out;                                                                                                         // 2819
};                                                                                                                    // 2820
}).call(this,require("buffer").Buffer)                                                                                // 2821
                                                                                                                      // 2822
},{"buffer":2}],20:[function(require,module,exports){                                                                 // 2823
(function (Buffer){                                                                                                   // 2824
var xor = require('../xor');                                                                                          // 2825
function getBlock(self) {                                                                                             // 2826
  var out = self._cipher.encryptBlock(self._prev);                                                                    // 2827
  incr32(self._prev);                                                                                                 // 2828
  return out;                                                                                                         // 2829
}                                                                                                                     // 2830
exports.encrypt = function (self, chunk) {                                                                            // 2831
  while (self._cache.length < chunk.length) {                                                                         // 2832
    self._cache = Buffer.concat([self._cache, getBlock(self)]);                                                       // 2833
  }                                                                                                                   // 2834
  var pad = self._cache.slice(0, chunk.length);                                                                       // 2835
  self._cache = self._cache.slice(chunk.length);                                                                      // 2836
  return xor(chunk, pad);                                                                                             // 2837
};                                                                                                                    // 2838
function incr32(iv) {                                                                                                 // 2839
  var len = iv.length;                                                                                                // 2840
  var item;                                                                                                           // 2841
  while (len--) {                                                                                                     // 2842
    item = iv.readUInt8(len);                                                                                         // 2843
    if (item === 255) {                                                                                               // 2844
      iv.writeUInt8(0, len);                                                                                          // 2845
    } else {                                                                                                          // 2846
      item++;                                                                                                         // 2847
      iv.writeUInt8(item, len);                                                                                       // 2848
      break;                                                                                                          // 2849
    }                                                                                                                 // 2850
  }                                                                                                                   // 2851
}                                                                                                                     // 2852
}).call(this,require("buffer").Buffer)                                                                                // 2853
                                                                                                                      // 2854
},{"../xor":24,"buffer":2}],21:[function(require,module,exports){                                                     // 2855
exports.encrypt = function (self, block) {                                                                            // 2856
  return self._cipher.encryptBlock(block);                                                                            // 2857
};                                                                                                                    // 2858
exports.decrypt = function (self, block) {                                                                            // 2859
  return self._cipher.decryptBlock(block);                                                                            // 2860
};                                                                                                                    // 2861
},{}],22:[function(require,module,exports){                                                                           // 2862
(function (Buffer){                                                                                                   // 2863
var xor = require('../xor');                                                                                          // 2864
function getBlock(self) {                                                                                             // 2865
  self._prev = self._cipher.encryptBlock(self._prev);                                                                 // 2866
  return self._prev;                                                                                                  // 2867
}                                                                                                                     // 2868
exports.encrypt = function (self, chunk) {                                                                            // 2869
  while (self._cache.length < chunk.length) {                                                                         // 2870
    self._cache = Buffer.concat([self._cache, getBlock(self)]);                                                       // 2871
  }                                                                                                                   // 2872
  var pad = self._cache.slice(0, chunk.length);                                                                       // 2873
  self._cache = self._cache.slice(chunk.length);                                                                      // 2874
  return xor(chunk, pad);                                                                                             // 2875
};                                                                                                                    // 2876
}).call(this,require("buffer").Buffer)                                                                                // 2877
                                                                                                                      // 2878
},{"../xor":24,"buffer":2}],23:[function(require,module,exports){                                                     // 2879
(function (Buffer){                                                                                                   // 2880
var aes = require('./aes');                                                                                           // 2881
var Transform = require('./cipherBase');                                                                              // 2882
var inherits = require('inherits');                                                                                   // 2883
                                                                                                                      // 2884
inherits(StreamCipher, Transform);                                                                                    // 2885
module.exports = StreamCipher;                                                                                        // 2886
function StreamCipher(mode, key, iv, decrypt) {                                                                       // 2887
  if (!(this instanceof StreamCipher)) {                                                                              // 2888
    return new StreamCipher(mode, key, iv);                                                                           // 2889
  }                                                                                                                   // 2890
  Transform.call(this);                                                                                               // 2891
  this._cipher = new aes.AES(key);                                                                                    // 2892
  this._prev = new Buffer(iv.length);                                                                                 // 2893
  this._cache = new Buffer('');                                                                                       // 2894
  this._secCache = new Buffer('');                                                                                    // 2895
  this._decrypt = decrypt;                                                                                            // 2896
  iv.copy(this._prev);                                                                                                // 2897
  this._mode = mode;                                                                                                  // 2898
}                                                                                                                     // 2899
StreamCipher.prototype._update = function (chunk) {                                                                   // 2900
  return this._mode.encrypt(this, chunk, this._decrypt);                                                              // 2901
};                                                                                                                    // 2902
StreamCipher.prototype._final = function () {                                                                         // 2903
  this._cipher.scrub();                                                                                               // 2904
};                                                                                                                    // 2905
}).call(this,require("buffer").Buffer)                                                                                // 2906
                                                                                                                      // 2907
},{"./aes":8,"./cipherBase":11,"buffer":2,"inherits":144}],24:[function(require,module,exports){                      // 2908
(function (Buffer){                                                                                                   // 2909
module.exports = xor;                                                                                                 // 2910
function xor(a, b) {                                                                                                  // 2911
  var len = Math.min(a.length, b.length);                                                                             // 2912
  var out = new Buffer(len);                                                                                          // 2913
  var i = -1;                                                                                                         // 2914
  while (++i < len) {                                                                                                 // 2915
    out.writeUInt8(a[i] ^ b[i], i);                                                                                   // 2916
  }                                                                                                                   // 2917
  return out;                                                                                                         // 2918
}                                                                                                                     // 2919
}).call(this,require("buffer").Buffer)                                                                                // 2920
                                                                                                                      // 2921
},{"buffer":2}],25:[function(require,module,exports){                                                                 // 2922
(function (Buffer){                                                                                                   // 2923
'use strict'                                                                                                          // 2924
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {                                                           // 2925
  sign: 'rsa',                                                                                                        // 2926
  hash: 'sha224',                                                                                                     // 2927
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')                                                     // 2928
}                                                                                                                     // 2929
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {                                                           // 2930
  sign: 'rsa',                                                                                                        // 2931
  hash: 'sha256',                                                                                                     // 2932
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')                                                     // 2933
}                                                                                                                     // 2934
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {                                                           // 2935
  sign: 'rsa',                                                                                                        // 2936
  hash: 'sha384',                                                                                                     // 2937
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')                                                     // 2938
}                                                                                                                     // 2939
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {                                                           // 2940
  sign: 'rsa',                                                                                                        // 2941
  hash: 'sha512',                                                                                                     // 2942
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')                                                     // 2943
}                                                                                                                     // 2944
exports['RSA-SHA1'] = {                                                                                               // 2945
	sign: 'rsa',                                                                                                         // 2946
	hash: 'sha1',                                                                                                        // 2947
	id: new Buffer('3021300906052b0e03021a05000414', 'hex')                                                              // 2948
}                                                                                                                     // 2949
exports['ecdsa-with-SHA1'] = {                                                                                        // 2950
	sign: 'ecdsa',                                                                                                       // 2951
	hash: 'sha1',                                                                                                        // 2952
	id: new Buffer('', 'hex')                                                                                            // 2953
}                                                                                                                     // 2954
exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {                                                            // 2955
  sign: 'dsa',                                                                                                        // 2956
  hash: 'sha1',                                                                                                       // 2957
  id: new Buffer('', 'hex')                                                                                           // 2958
}                                                                                                                     // 2959
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {                                                                // 2960
  sign: 'dsa',                                                                                                        // 2961
  hash: 'sha224',                                                                                                     // 2962
  id: new Buffer('', 'hex')                                                                                           // 2963
}                                                                                                                     // 2964
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {                                                                // 2965
  sign: 'dsa',                                                                                                        // 2966
  hash: 'sha256',                                                                                                     // 2967
  id: new Buffer('', 'hex')                                                                                           // 2968
}                                                                                                                     // 2969
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {                                                                // 2970
  sign: 'dsa',                                                                                                        // 2971
  hash: 'sha384',                                                                                                     // 2972
  id: new Buffer('', 'hex')                                                                                           // 2973
}                                                                                                                     // 2974
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {                                                                // 2975
  sign: 'dsa',                                                                                                        // 2976
  hash: 'sha512',                                                                                                     // 2977
  id: new Buffer('', 'hex')                                                                                           // 2978
}                                                                                                                     // 2979
exports['DSA-RIPEMD160'] = {                                                                                          // 2980
  sign: 'dsa',                                                                                                        // 2981
  hash: 'rmd160',                                                                                                     // 2982
  id: new Buffer('', 'hex')                                                                                           // 2983
}                                                                                                                     // 2984
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {                                                               // 2985
  sign: 'rsa',                                                                                                        // 2986
  hash: 'rmd160',                                                                                                     // 2987
  id: new Buffer('3021300906052b2403020105000414', 'hex')                                                             // 2988
}                                                                                                                     // 2989
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {                                                                 // 2990
  sign: 'rsa',                                                                                                        // 2991
  hash: 'md5',                                                                                                        // 2992
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')                                                       // 2993
}                                                                                                                     // 2994
                                                                                                                      // 2995
}).call(this,require("buffer").Buffer)                                                                                // 2996
                                                                                                                      // 2997
},{"buffer":2}],26:[function(require,module,exports){                                                                 // 2998
(function (Buffer){                                                                                                   // 2999
'use strict'                                                                                                          // 3000
var sign = require('./sign')                                                                                          // 3001
var verify = require('./verify')                                                                                      // 3002
var stream = require('stream')                                                                                        // 3003
var inherits = require('inherits')                                                                                    // 3004
var _algos = require('./algos')                                                                                       // 3005
var createHash = require('create-hash')                                                                               // 3006
var algos = {}                                                                                                        // 3007
Object.keys(_algos).forEach(function (key) {                                                                          // 3008
  algos[key] = algos[key.toLowerCase()] = _algos[key]                                                                 // 3009
})                                                                                                                    // 3010
                                                                                                                      // 3011
exports.createSign = exports.Sign = createSign                                                                        // 3012
                                                                                                                      // 3013
function createSign (algorithm) {                                                                                     // 3014
  return new Sign(algorithm)                                                                                          // 3015
}                                                                                                                     // 3016
                                                                                                                      // 3017
exports.createVerify = exports.Verify = createVerify                                                                  // 3018
                                                                                                                      // 3019
function createVerify (algorithm) {                                                                                   // 3020
  return new Verify(algorithm)                                                                                        // 3021
}                                                                                                                     // 3022
                                                                                                                      // 3023
inherits(Sign, stream.Writable)                                                                                       // 3024
                                                                                                                      // 3025
function Sign (algorithm) {                                                                                           // 3026
  stream.Writable.call(this)                                                                                          // 3027
  var data = algos[algorithm]                                                                                         // 3028
  if (!data)                                                                                                          // 3029
    throw new Error('Unknown message digest')                                                                         // 3030
                                                                                                                      // 3031
  this._hashType = data.hash                                                                                          // 3032
  this._hash = createHash(data.hash)                                                                                  // 3033
  this._tag = data.id                                                                                                 // 3034
  this._signType = data.sign                                                                                          // 3035
}                                                                                                                     // 3036
                                                                                                                      // 3037
Sign.prototype._write = function _write (data, _, done) {                                                             // 3038
  this._hash.update(data)                                                                                             // 3039
  done()                                                                                                              // 3040
}                                                                                                                     // 3041
                                                                                                                      // 3042
Sign.prototype.update = function update (data, enc) {                                                                 // 3043
  if (typeof data === 'string')                                                                                       // 3044
    data = new Buffer(data, enc)                                                                                      // 3045
  this._hash.update(data)                                                                                             // 3046
  return this                                                                                                         // 3047
}                                                                                                                     // 3048
                                                                                                                      // 3049
Sign.prototype.sign = function signMethod (key, enc) {                                                                // 3050
  this.end()                                                                                                          // 3051
  var hash = this._hash.digest()                                                                                      // 3052
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)                               // 3053
  if (enc) {                                                                                                          // 3054
    sig = sig.toString(enc)                                                                                           // 3055
  }                                                                                                                   // 3056
  return sig                                                                                                          // 3057
}                                                                                                                     // 3058
                                                                                                                      // 3059
inherits(Verify, stream.Writable)                                                                                     // 3060
function Verify (algorithm) {                                                                                         // 3061
  stream.Writable.call(this)                                                                                          // 3062
  var data = algos[algorithm]                                                                                         // 3063
  if (!data)                                                                                                          // 3064
    throw new Error('Unknown message digest')                                                                         // 3065
                                                                                                                      // 3066
  this._hash = createHash(data.hash)                                                                                  // 3067
  this._tag = data.id                                                                                                 // 3068
  this._signType = data.sign                                                                                          // 3069
}                                                                                                                     // 3070
                                                                                                                      // 3071
Verify.prototype._write = function _write (data, _, done) {                                                           // 3072
  this._hash.update(data)                                                                                             // 3073
  done()                                                                                                              // 3074
}                                                                                                                     // 3075
                                                                                                                      // 3076
Verify.prototype.update = function update (data, enc) {                                                               // 3077
  if (typeof data === 'string')                                                                                       // 3078
    data = new Buffer(data, enc)                                                                                      // 3079
                                                                                                                      // 3080
  this._hash.update(data)                                                                                             // 3081
  return this                                                                                                         // 3082
}                                                                                                                     // 3083
                                                                                                                      // 3084
Verify.prototype.verify = function verifyMethod (key, sig, enc) {                                                     // 3085
  this.end()                                                                                                          // 3086
  var hash = this._hash.digest()                                                                                      // 3087
  if (typeof sig === 'string')                                                                                        // 3088
    sig = new Buffer(sig, enc)                                                                                        // 3089
                                                                                                                      // 3090
  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)                                           // 3091
}                                                                                                                     // 3092
                                                                                                                      // 3093
}).call(this,require("buffer").Buffer)                                                                                // 3094
                                                                                                                      // 3095
},{"./algos":25,"./sign":69,"./verify":70,"buffer":2,"create-hash":94,"inherits":144,"stream":158}],27:[function(require,module,exports){
'use strict'                                                                                                          // 3097
exports['1.3.132.0.10'] = 'secp256k1'                                                                                 // 3098
                                                                                                                      // 3099
exports['1.3.132.0.33'] = 'p224'                                                                                      // 3100
                                                                                                                      // 3101
exports['1.2.840.10045.3.1.1'] = 'p192'                                                                               // 3102
                                                                                                                      // 3103
exports['1.2.840.10045.3.1.7'] = 'p256'                                                                               // 3104
                                                                                                                      // 3105
},{}],28:[function(require,module,exports){                                                                           // 3106
(function(module, exports) {                                                                                          // 3107
                                                                                                                      // 3108
'use strict';                                                                                                         // 3109
                                                                                                                      // 3110
// Utils                                                                                                              // 3111
                                                                                                                      // 3112
function assert(val, msg) {                                                                                           // 3113
  if (!val)                                                                                                           // 3114
    throw new Error(msg || 'Assertion failed');                                                                       // 3115
}                                                                                                                     // 3116
                                                                                                                      // 3117
// Could use `inherits` module, but don't want to move from single file                                               // 3118
// architecture yet.                                                                                                  // 3119
function inherits(ctor, superCtor) {                                                                                  // 3120
  ctor.super_ = superCtor;                                                                                            // 3121
  var TempCtor = function () {};                                                                                      // 3122
  TempCtor.prototype = superCtor.prototype;                                                                           // 3123
  ctor.prototype = new TempCtor();                                                                                    // 3124
  ctor.prototype.constructor = ctor;                                                                                  // 3125
}                                                                                                                     // 3126
                                                                                                                      // 3127
// BN                                                                                                                 // 3128
                                                                                                                      // 3129
function BN(number, base, endian) {                                                                                   // 3130
  // May be `new BN(bn)` ?                                                                                            // 3131
  if (number !== null &&                                                                                              // 3132
      typeof number === 'object' &&                                                                                   // 3133
      Array.isArray(number.words)) {                                                                                  // 3134
    return number;                                                                                                    // 3135
  }                                                                                                                   // 3136
                                                                                                                      // 3137
  this.sign = false;                                                                                                  // 3138
  this.words = null;                                                                                                  // 3139
  this.length = 0;                                                                                                    // 3140
                                                                                                                      // 3141
  // Reduction context                                                                                                // 3142
  this.red = null;                                                                                                    // 3143
                                                                                                                      // 3144
  if (base === 'le' || base === 'be') {                                                                               // 3145
    endian = base;                                                                                                    // 3146
    base = 10;                                                                                                        // 3147
  }                                                                                                                   // 3148
                                                                                                                      // 3149
  if (number !== null)                                                                                                // 3150
    this._init(number || 0, base || 10, endian || 'be');                                                              // 3151
}                                                                                                                     // 3152
if (typeof module === 'object')                                                                                       // 3153
  module.exports = BN;                                                                                                // 3154
else                                                                                                                  // 3155
  exports.BN = BN;                                                                                                    // 3156
                                                                                                                      // 3157
BN.BN = BN;                                                                                                           // 3158
BN.wordSize = 26;                                                                                                     // 3159
                                                                                                                      // 3160
BN.prototype._init = function init(number, base, endian) {                                                            // 3161
  if (typeof number === 'number') {                                                                                   // 3162
    if (number < 0) {                                                                                                 // 3163
      this.sign = true;                                                                                               // 3164
      number = -number;                                                                                               // 3165
    }                                                                                                                 // 3166
    if (number < 0x4000000) {                                                                                         // 3167
      this.words = [ number & 0x3ffffff ];                                                                            // 3168
      this.length = 1;                                                                                                // 3169
    } else {                                                                                                          // 3170
      this.words = [                                                                                                  // 3171
        number & 0x3ffffff,                                                                                           // 3172
        (number / 0x4000000) & 0x3ffffff                                                                              // 3173
      ];                                                                                                              // 3174
      this.length = 2;                                                                                                // 3175
    }                                                                                                                 // 3176
    return;                                                                                                           // 3177
  } else if (typeof number === 'object') {                                                                            // 3178
    return this._initArray(number, base, endian);                                                                     // 3179
  }                                                                                                                   // 3180
  if (base === 'hex')                                                                                                 // 3181
    base = 16;                                                                                                        // 3182
  assert(base === (base | 0) && base >= 2 && base <= 36);                                                             // 3183
                                                                                                                      // 3184
  number = number.toString().replace(/\s+/g, '');                                                                     // 3185
  var start = 0;                                                                                                      // 3186
  if (number[0] === '-')                                                                                              // 3187
    start++;                                                                                                          // 3188
                                                                                                                      // 3189
  if (base === 16)                                                                                                    // 3190
    this._parseHex(number, start);                                                                                    // 3191
  else                                                                                                                // 3192
    this._parseBase(number, base, start);                                                                             // 3193
                                                                                                                      // 3194
  if (number[0] === '-')                                                                                              // 3195
    this.sign = true;                                                                                                 // 3196
                                                                                                                      // 3197
  this.strip();                                                                                                       // 3198
};                                                                                                                    // 3199
                                                                                                                      // 3200
BN.prototype._initArray = function _initArray(number, base, endian) {                                                 // 3201
  // Perhaps a Uint8Array                                                                                             // 3202
  assert(typeof number.length === 'number');                                                                          // 3203
  this.length = Math.ceil(number.length / 3);                                                                         // 3204
  this.words = new Array(this.length);                                                                                // 3205
  for (var i = 0; i < this.length; i++)                                                                               // 3206
    this.words[i] = 0;                                                                                                // 3207
                                                                                                                      // 3208
  var off = 0;                                                                                                        // 3209
  if (endian === 'be') {                                                                                              // 3210
    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {                                                          // 3211
      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);                                               // 3212
      this.words[j] |= (w << off) & 0x3ffffff;                                                                        // 3213
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;                                                             // 3214
      off += 24;                                                                                                      // 3215
      if (off >= 26) {                                                                                                // 3216
        off -= 26;                                                                                                    // 3217
        j++;                                                                                                          // 3218
      }                                                                                                               // 3219
    }                                                                                                                 // 3220
  } else if (endian === 'le') {                                                                                       // 3221
    for (var i = 0, j = 0; i < number.length; i += 3) {                                                               // 3222
      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);                                               // 3223
      this.words[j] |= (w << off) & 0x3ffffff;                                                                        // 3224
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;                                                             // 3225
      off += 24;                                                                                                      // 3226
      if (off >= 26) {                                                                                                // 3227
        off -= 26;                                                                                                    // 3228
        j++;                                                                                                          // 3229
      }                                                                                                               // 3230
    }                                                                                                                 // 3231
  }                                                                                                                   // 3232
  return this.strip();                                                                                                // 3233
};                                                                                                                    // 3234
                                                                                                                      // 3235
function parseHex(str, start, end) {                                                                                  // 3236
  var r = 0;                                                                                                          // 3237
  var len = Math.min(str.length, end);                                                                                // 3238
  for (var i = start; i < len; i++) {                                                                                 // 3239
    var c = str.charCodeAt(i) - 48;                                                                                   // 3240
                                                                                                                      // 3241
    r <<= 4;                                                                                                          // 3242
                                                                                                                      // 3243
    // 'a' - 'f'                                                                                                      // 3244
    if (c >= 49 && c <= 54)                                                                                           // 3245
      r |= c - 49 + 0xa;                                                                                              // 3246
                                                                                                                      // 3247
    // 'A' - 'F'                                                                                                      // 3248
    else if (c >= 17 && c <= 22)                                                                                      // 3249
      r |= c - 17 + 0xa;                                                                                              // 3250
                                                                                                                      // 3251
    // '0' - '9'                                                                                                      // 3252
    else                                                                                                              // 3253
      r |= c & 0xf;                                                                                                   // 3254
  }                                                                                                                   // 3255
  return r;                                                                                                           // 3256
}                                                                                                                     // 3257
                                                                                                                      // 3258
BN.prototype._parseHex = function _parseHex(number, start) {                                                          // 3259
  // Create possibly bigger array to ensure that it fits the number                                                   // 3260
  this.length = Math.ceil((number.length - start) / 6);                                                               // 3261
  this.words = new Array(this.length);                                                                                // 3262
  for (var i = 0; i < this.length; i++)                                                                               // 3263
    this.words[i] = 0;                                                                                                // 3264
                                                                                                                      // 3265
  // Scan 24-bit chunks and add them to the number                                                                    // 3266
  var off = 0;                                                                                                        // 3267
  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {                                                        // 3268
    var w = parseHex(number, i, i + 6);                                                                               // 3269
    this.words[j] |= (w << off) & 0x3ffffff;                                                                          // 3270
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;                                                                 // 3271
    off += 24;                                                                                                        // 3272
    if (off >= 26) {                                                                                                  // 3273
      off -= 26;                                                                                                      // 3274
      j++;                                                                                                            // 3275
    }                                                                                                                 // 3276
  }                                                                                                                   // 3277
  if (i + 6 !== start) {                                                                                              // 3278
    var w = parseHex(number, start, i + 6);                                                                           // 3279
    this.words[j] |= (w << off) & 0x3ffffff;                                                                          // 3280
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;                                                                 // 3281
  }                                                                                                                   // 3282
  this.strip();                                                                                                       // 3283
};                                                                                                                    // 3284
                                                                                                                      // 3285
function parseBase(str, start, end, mul) {                                                                            // 3286
  var r = 0;                                                                                                          // 3287
  var len = Math.min(str.length, end);                                                                                // 3288
  for (var i = start; i < len; i++) {                                                                                 // 3289
    var c = str.charCodeAt(i) - 48;                                                                                   // 3290
                                                                                                                      // 3291
    r *= mul;                                                                                                         // 3292
                                                                                                                      // 3293
    // 'a'                                                                                                            // 3294
    if (c >= 49)                                                                                                      // 3295
      r += c - 49 + 0xa;                                                                                              // 3296
                                                                                                                      // 3297
    // 'A'                                                                                                            // 3298
    else if (c >= 17)                                                                                                 // 3299
      r += c - 17 + 0xa;                                                                                              // 3300
                                                                                                                      // 3301
    // '0' - '9'                                                                                                      // 3302
    else                                                                                                              // 3303
      r += c;                                                                                                         // 3304
  }                                                                                                                   // 3305
  return r;                                                                                                           // 3306
}                                                                                                                     // 3307
                                                                                                                      // 3308
BN.prototype._parseBase = function _parseBase(number, base, start) {                                                  // 3309
  // Initialize as zero                                                                                               // 3310
  this.words = [ 0 ];                                                                                                 // 3311
  this.length = 1;                                                                                                    // 3312
                                                                                                                      // 3313
  // Find length of limb in base                                                                                      // 3314
  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)                                           // 3315
    limbLen++;                                                                                                        // 3316
  limbLen--;                                                                                                          // 3317
  limbPow = (limbPow / base) | 0;                                                                                     // 3318
                                                                                                                      // 3319
  var total = number.length - start;                                                                                  // 3320
  var mod = total % limbLen;                                                                                          // 3321
  var end = Math.min(total, total - mod) + start;                                                                     // 3322
                                                                                                                      // 3323
  var word = 0;                                                                                                       // 3324
  for (var i = start; i < end; i += limbLen) {                                                                        // 3325
    word = parseBase(number, i, i + limbLen, base);                                                                   // 3326
                                                                                                                      // 3327
    this.imuln(limbPow);                                                                                              // 3328
    if (this.words[0] + word < 0x4000000)                                                                             // 3329
      this.words[0] += word;                                                                                          // 3330
    else                                                                                                              // 3331
      this._iaddn(word);                                                                                              // 3332
  }                                                                                                                   // 3333
                                                                                                                      // 3334
  if (mod !== 0) {                                                                                                    // 3335
    var pow = 1;                                                                                                      // 3336
    var word = parseBase(number, i, number.length, base);                                                             // 3337
                                                                                                                      // 3338
    for (var i = 0; i < mod; i++)                                                                                     // 3339
      pow *= base;                                                                                                    // 3340
    this.imuln(pow);                                                                                                  // 3341
    if (this.words[0] + word < 0x4000000)                                                                             // 3342
      this.words[0] += word;                                                                                          // 3343
    else                                                                                                              // 3344
      this._iaddn(word);                                                                                              // 3345
  }                                                                                                                   // 3346
};                                                                                                                    // 3347
                                                                                                                      // 3348
BN.prototype.copy = function copy(dest) {                                                                             // 3349
  dest.words = new Array(this.length);                                                                                // 3350
  for (var i = 0; i < this.length; i++)                                                                               // 3351
    dest.words[i] = this.words[i];                                                                                    // 3352
  dest.length = this.length;                                                                                          // 3353
  dest.sign = this.sign;                                                                                              // 3354
  dest.red = this.red;                                                                                                // 3355
};                                                                                                                    // 3356
                                                                                                                      // 3357
BN.prototype.clone = function clone() {                                                                               // 3358
  var r = new BN(null);                                                                                               // 3359
  this.copy(r);                                                                                                       // 3360
  return r;                                                                                                           // 3361
};                                                                                                                    // 3362
                                                                                                                      // 3363
// Remove leading `0` from `this`                                                                                     // 3364
BN.prototype.strip = function strip() {                                                                               // 3365
  while (this.length > 1 && this.words[this.length - 1] === 0)                                                        // 3366
    this.length--;                                                                                                    // 3367
  return this._normSign();                                                                                            // 3368
};                                                                                                                    // 3369
                                                                                                                      // 3370
BN.prototype._normSign = function _normSign() {                                                                       // 3371
  // -0 = 0                                                                                                           // 3372
  if (this.length === 1 && this.words[0] === 0)                                                                       // 3373
    this.sign = false;                                                                                                // 3374
  return this;                                                                                                        // 3375
};                                                                                                                    // 3376
                                                                                                                      // 3377
BN.prototype.inspect = function inspect() {                                                                           // 3378
  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';                                                  // 3379
};                                                                                                                    // 3380
                                                                                                                      // 3381
/*                                                                                                                    // 3382
                                                                                                                      // 3383
var zeros = [];                                                                                                       // 3384
var groupSizes = [];                                                                                                  // 3385
var groupBases = [];                                                                                                  // 3386
                                                                                                                      // 3387
var s = '';                                                                                                           // 3388
var i = -1;                                                                                                           // 3389
while (++i < BN.wordSize) {                                                                                           // 3390
  zeros[i] = s;                                                                                                       // 3391
  s += '0';                                                                                                           // 3392
}                                                                                                                     // 3393
groupSizes[0] = 0;                                                                                                    // 3394
groupSizes[1] = 0;                                                                                                    // 3395
groupBases[0] = 0;                                                                                                    // 3396
groupBases[1] = 0;                                                                                                    // 3397
var base = 2 - 1;                                                                                                     // 3398
while (++base < 36 + 1) {                                                                                             // 3399
  var groupSize = 0;                                                                                                  // 3400
  var groupBase = 1;                                                                                                  // 3401
  while (groupBase < (1 << BN.wordSize) / base) {                                                                     // 3402
    groupBase *= base;                                                                                                // 3403
    groupSize += 1;                                                                                                   // 3404
  }                                                                                                                   // 3405
  groupSizes[base] = groupSize;                                                                                       // 3406
  groupBases[base] = groupBase;                                                                                       // 3407
}                                                                                                                     // 3408
                                                                                                                      // 3409
*/                                                                                                                    // 3410
                                                                                                                      // 3411
var zeros = [                                                                                                         // 3412
  '',                                                                                                                 // 3413
  '0',                                                                                                                // 3414
  '00',                                                                                                               // 3415
  '000',                                                                                                              // 3416
  '0000',                                                                                                             // 3417
  '00000',                                                                                                            // 3418
  '000000',                                                                                                           // 3419
  '0000000',                                                                                                          // 3420
  '00000000',                                                                                                         // 3421
  '000000000',                                                                                                        // 3422
  '0000000000',                                                                                                       // 3423
  '00000000000',                                                                                                      // 3424
  '000000000000',                                                                                                     // 3425
  '0000000000000',                                                                                                    // 3426
  '00000000000000',                                                                                                   // 3427
  '000000000000000',                                                                                                  // 3428
  '0000000000000000',                                                                                                 // 3429
  '00000000000000000',                                                                                                // 3430
  '000000000000000000',                                                                                               // 3431
  '0000000000000000000',                                                                                              // 3432
  '00000000000000000000',                                                                                             // 3433
  '000000000000000000000',                                                                                            // 3434
  '0000000000000000000000',                                                                                           // 3435
  '00000000000000000000000',                                                                                          // 3436
  '000000000000000000000000',                                                                                         // 3437
  '0000000000000000000000000'                                                                                         // 3438
];                                                                                                                    // 3439
                                                                                                                      // 3440
var groupSizes = [                                                                                                    // 3441
  0, 0,                                                                                                               // 3442
  25, 16, 12, 11, 10, 9, 8,                                                                                           // 3443
  8, 7, 7, 7, 7, 6, 6,                                                                                                // 3444
  6, 6, 6, 6, 6, 5, 5,                                                                                                // 3445
  5, 5, 5, 5, 5, 5, 5,                                                                                                // 3446
  5, 5, 5, 5, 5, 5, 5                                                                                                 // 3447
];                                                                                                                    // 3448
                                                                                                                      // 3449
var groupBases = [                                                                                                    // 3450
  0, 0,                                                                                                               // 3451
  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,                                               // 3452
  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,                                                // 3453
  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,                                                 // 3454
  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,                                                  // 3455
  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176                                                // 3456
];                                                                                                                    // 3457
                                                                                                                      // 3458
BN.prototype.toString = function toString(base, padding) {                                                            // 3459
  base = base || 10;                                                                                                  // 3460
  if (base === 16 || base === 'hex') {                                                                                // 3461
    var out = '';                                                                                                     // 3462
    var off = 0;                                                                                                      // 3463
    var padding = padding | 0 || 1;                                                                                   // 3464
    var carry = 0;                                                                                                    // 3465
    for (var i = 0; i < this.length; i++) {                                                                           // 3466
      var w = this.words[i];                                                                                          // 3467
      var word = (((w << off) | carry) & 0xffffff).toString(16);                                                      // 3468
      carry = (w >>> (24 - off)) & 0xffffff;                                                                          // 3469
      if (carry !== 0 || i !== this.length - 1)                                                                       // 3470
        out = zeros[6 - word.length] + word + out;                                                                    // 3471
      else                                                                                                            // 3472
        out = word + out;                                                                                             // 3473
      off += 2;                                                                                                       // 3474
      if (off >= 26) {                                                                                                // 3475
        off -= 26;                                                                                                    // 3476
        i--;                                                                                                          // 3477
      }                                                                                                               // 3478
    }                                                                                                                 // 3479
    if (carry !== 0)                                                                                                  // 3480
      out = carry.toString(16) + out;                                                                                 // 3481
    while (out.length % padding !== 0)                                                                                // 3482
      out = '0' + out;                                                                                                // 3483
    if (this.sign)                                                                                                    // 3484
      out = '-' + out;                                                                                                // 3485
    return out;                                                                                                       // 3486
  } else if (base === (base | 0) && base >= 2 && base <= 36) {                                                        // 3487
    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));                                           // 3488
    var groupSize = groupSizes[base];                                                                                 // 3489
    // var groupBase = Math.pow(base, groupSize);                                                                     // 3490
    var groupBase = groupBases[base];                                                                                 // 3491
    var out = '';                                                                                                     // 3492
    var c = this.clone();                                                                                             // 3493
    c.sign = false;                                                                                                   // 3494
    while (c.cmpn(0) !== 0) {                                                                                         // 3495
      var r = c.modn(groupBase).toString(base);                                                                       // 3496
      c = c.idivn(groupBase);                                                                                         // 3497
                                                                                                                      // 3498
      if (c.cmpn(0) !== 0)                                                                                            // 3499
        out = zeros[groupSize - r.length] + r + out;                                                                  // 3500
      else                                                                                                            // 3501
        out = r + out;                                                                                                // 3502
    }                                                                                                                 // 3503
    if (this.cmpn(0) === 0)                                                                                           // 3504
      out = '0' + out;                                                                                                // 3505
    if (this.sign)                                                                                                    // 3506
      out = '-' + out;                                                                                                // 3507
    return out;                                                                                                       // 3508
  } else {                                                                                                            // 3509
    assert(false, 'Base should be between 2 and 36');                                                                 // 3510
  }                                                                                                                   // 3511
};                                                                                                                    // 3512
                                                                                                                      // 3513
BN.prototype.toJSON = function toJSON() {                                                                             // 3514
  return this.toString(16);                                                                                           // 3515
};                                                                                                                    // 3516
                                                                                                                      // 3517
BN.prototype.toArray = function toArray() {                                                                           // 3518
  this.strip();                                                                                                       // 3519
  var res = new Array(this.byteLength());                                                                             // 3520
  res[0] = 0;                                                                                                         // 3521
                                                                                                                      // 3522
  var q = this.clone();                                                                                               // 3523
  for (var i = 0; q.cmpn(0) !== 0; i++) {                                                                             // 3524
    var b = q.andln(0xff);                                                                                            // 3525
    q.ishrn(8);                                                                                                       // 3526
                                                                                                                      // 3527
    // Assume big-endian                                                                                              // 3528
    res[res.length - i - 1] = b;                                                                                      // 3529
  }                                                                                                                   // 3530
                                                                                                                      // 3531
  return res;                                                                                                         // 3532
};                                                                                                                    // 3533
                                                                                                                      // 3534
/*                                                                                                                    // 3535
function genCountBits(bits) {                                                                                         // 3536
  var arr = [];                                                                                                       // 3537
                                                                                                                      // 3538
  for (var i = bits - 1; i >= 0; i--) {                                                                               // 3539
    var bit = '0x' + (1 << i).toString(16);                                                                           // 3540
    arr.push('w >= ' + bit + ' ? ' + (i + 1));                                                                        // 3541
  }                                                                                                                   // 3542
                                                                                                                      // 3543
  return new Function('w', 'return ' + arr.join(' :\n') + ' :\n0;');                                                  // 3544
};                                                                                                                    // 3545
                                                                                                                      // 3546
BN.prototype._countBits = genCountBits(26);                                                                           // 3547
*/                                                                                                                    // 3548
                                                                                                                      // 3549
// Sadly chrome apps could not contain `new Function()` calls                                                         // 3550
BN.prototype._countBits = function _countBits(w) {                                                                    // 3551
  return w >= 0x2000000 ? 26 :                                                                                        // 3552
         w >= 0x1000000 ? 25 :                                                                                        // 3553
         w >= 0x800000 ? 24 :                                                                                         // 3554
         w >= 0x400000 ? 23 :                                                                                         // 3555
         w >= 0x200000 ? 22 :                                                                                         // 3556
         w >= 0x100000 ? 21 :                                                                                         // 3557
         w >= 0x80000 ? 20 :                                                                                          // 3558
         w >= 0x40000 ? 19 :                                                                                          // 3559
         w >= 0x20000 ? 18 :                                                                                          // 3560
         w >= 0x10000 ? 17 :                                                                                          // 3561
         w >= 0x8000 ? 16 :                                                                                           // 3562
         w >= 0x4000 ? 15 :                                                                                           // 3563
         w >= 0x2000 ? 14 :                                                                                           // 3564
         w >= 0x1000 ? 13 :                                                                                           // 3565
         w >= 0x800 ? 12 :                                                                                            // 3566
         w >= 0x400 ? 11 :                                                                                            // 3567
         w >= 0x200 ? 10 :                                                                                            // 3568
         w >= 0x100 ? 9 :                                                                                             // 3569
         w >= 0x80 ? 8 :                                                                                              // 3570
         w >= 0x40 ? 7 :                                                                                              // 3571
         w >= 0x20 ? 6 :                                                                                              // 3572
         w >= 0x10 ? 5 :                                                                                              // 3573
         w >= 0x8 ? 4 :                                                                                               // 3574
         w >= 0x4 ? 3 :                                                                                               // 3575
         w >= 0x2 ? 2 :                                                                                               // 3576
         w >= 0x1 ? 1 :                                                                                               // 3577
         0;                                                                                                           // 3578
};                                                                                                                    // 3579
                                                                                                                      // 3580
// Return number of used bits in a BN                                                                                 // 3581
BN.prototype.bitLength = function bitLength() {                                                                       // 3582
  var hi = 0;                                                                                                         // 3583
  var w = this.words[this.length - 1];                                                                                // 3584
  var hi = this._countBits(w);                                                                                        // 3585
  return (this.length - 1) * 26 + hi;                                                                                 // 3586
};                                                                                                                    // 3587
                                                                                                                      // 3588
BN.prototype.byteLength = function byteLength() {                                                                     // 3589
  return Math.ceil(this.bitLength() / 8);                                                                             // 3590
};                                                                                                                    // 3591
                                                                                                                      // 3592
// Return negative clone of `this`                                                                                    // 3593
BN.prototype.neg = function neg() {                                                                                   // 3594
  if (this.cmpn(0) === 0)                                                                                             // 3595
    return this.clone();                                                                                              // 3596
                                                                                                                      // 3597
  var r = this.clone();                                                                                               // 3598
  r.sign = !this.sign;                                                                                                // 3599
  return r;                                                                                                           // 3600
};                                                                                                                    // 3601
                                                                                                                      // 3602
                                                                                                                      // 3603
// Or `num` with `this` in-place                                                                                      // 3604
BN.prototype.ior = function ior(num) {                                                                                // 3605
  this.sign = this.sign || num.sign;                                                                                  // 3606
                                                                                                                      // 3607
  while (this.length < num.length)                                                                                    // 3608
    this.words[this.length++] = 0;                                                                                    // 3609
                                                                                                                      // 3610
  for (var i = 0; i < num.length; i++)                                                                                // 3611
    this.words[i] = this.words[i] | num.words[i];                                                                     // 3612
                                                                                                                      // 3613
  return this.strip();                                                                                                // 3614
};                                                                                                                    // 3615
                                                                                                                      // 3616
                                                                                                                      // 3617
// Or `num` with `this`                                                                                               // 3618
BN.prototype.or = function or(num) {                                                                                  // 3619
  if (this.length > num.length)                                                                                       // 3620
    return this.clone().ior(num);                                                                                     // 3621
  else                                                                                                                // 3622
    return num.clone().ior(this);                                                                                     // 3623
};                                                                                                                    // 3624
                                                                                                                      // 3625
                                                                                                                      // 3626
// And `num` with `this` in-place                                                                                     // 3627
BN.prototype.iand = function iand(num) {                                                                              // 3628
  this.sign = this.sign && num.sign;                                                                                  // 3629
                                                                                                                      // 3630
  // b = min-length(num, this)                                                                                        // 3631
  var b;                                                                                                              // 3632
  if (this.length > num.length)                                                                                       // 3633
    b = num;                                                                                                          // 3634
  else                                                                                                                // 3635
    b = this;                                                                                                         // 3636
                                                                                                                      // 3637
  for (var i = 0; i < b.length; i++)                                                                                  // 3638
    this.words[i] = this.words[i] & num.words[i];                                                                     // 3639
                                                                                                                      // 3640
  this.length = b.length;                                                                                             // 3641
                                                                                                                      // 3642
  return this.strip();                                                                                                // 3643
};                                                                                                                    // 3644
                                                                                                                      // 3645
                                                                                                                      // 3646
// And `num` with `this`                                                                                              // 3647
BN.prototype.and = function and(num) {                                                                                // 3648
  if (this.length > num.length)                                                                                       // 3649
    return this.clone().iand(num);                                                                                    // 3650
  else                                                                                                                // 3651
    return num.clone().iand(this);                                                                                    // 3652
};                                                                                                                    // 3653
                                                                                                                      // 3654
                                                                                                                      // 3655
// Xor `num` with `this` in-place                                                                                     // 3656
BN.prototype.ixor = function ixor(num) {                                                                              // 3657
  this.sign = this.sign || num.sign;                                                                                  // 3658
                                                                                                                      // 3659
  // a.length > b.length                                                                                              // 3660
  var a;                                                                                                              // 3661
  var b;                                                                                                              // 3662
  if (this.length > num.length) {                                                                                     // 3663
    a = this;                                                                                                         // 3664
    b = num;                                                                                                          // 3665
  } else {                                                                                                            // 3666
    a = num;                                                                                                          // 3667
    b = this;                                                                                                         // 3668
  }                                                                                                                   // 3669
                                                                                                                      // 3670
  for (var i = 0; i < b.length; i++)                                                                                  // 3671
    this.words[i] = a.words[i] ^ b.words[i];                                                                          // 3672
                                                                                                                      // 3673
  if (this !== a)                                                                                                     // 3674
    for (; i < a.length; i++)                                                                                         // 3675
      this.words[i] = a.words[i];                                                                                     // 3676
                                                                                                                      // 3677
  this.length = a.length;                                                                                             // 3678
                                                                                                                      // 3679
  return this.strip();                                                                                                // 3680
};                                                                                                                    // 3681
                                                                                                                      // 3682
                                                                                                                      // 3683
// Xor `num` with `this`                                                                                              // 3684
BN.prototype.xor = function xor(num) {                                                                                // 3685
  if (this.length > num.length)                                                                                       // 3686
    return this.clone().ixor(num);                                                                                    // 3687
  else                                                                                                                // 3688
    return num.clone().ixor(this);                                                                                    // 3689
};                                                                                                                    // 3690
                                                                                                                      // 3691
                                                                                                                      // 3692
// Set `bit` of `this`                                                                                                // 3693
BN.prototype.setn = function setn(bit, val) {                                                                         // 3694
  assert(typeof bit === 'number' && bit >= 0);                                                                        // 3695
                                                                                                                      // 3696
  var off = (bit / 26) | 0;                                                                                           // 3697
  var wbit = bit % 26;                                                                                                // 3698
                                                                                                                      // 3699
  while (this.length <= off)                                                                                          // 3700
    this.words[this.length++] = 0;                                                                                    // 3701
                                                                                                                      // 3702
  if (val)                                                                                                            // 3703
    this.words[off] = this.words[off] | (1 << wbit);                                                                  // 3704
  else                                                                                                                // 3705
    this.words[off] = this.words[off] & ~(1 << wbit);                                                                 // 3706
                                                                                                                      // 3707
  return this.strip();                                                                                                // 3708
};                                                                                                                    // 3709
                                                                                                                      // 3710
                                                                                                                      // 3711
// Add `num` to `this` in-place                                                                                       // 3712
BN.prototype.iadd = function iadd(num) {                                                                              // 3713
  // negative + positive                                                                                              // 3714
  if (this.sign && !num.sign) {                                                                                       // 3715
    this.sign = false;                                                                                                // 3716
    var r = this.isub(num);                                                                                           // 3717
    this.sign = !this.sign;                                                                                           // 3718
    return this._normSign();                                                                                          // 3719
                                                                                                                      // 3720
  // positive + negative                                                                                              // 3721
  } else if (!this.sign && num.sign) {                                                                                // 3722
    num.sign = false;                                                                                                 // 3723
    var r = this.isub(num);                                                                                           // 3724
    num.sign = true;                                                                                                  // 3725
    return r._normSign();                                                                                             // 3726
  }                                                                                                                   // 3727
                                                                                                                      // 3728
  // a.length > b.length                                                                                              // 3729
  var a;                                                                                                              // 3730
  var b;                                                                                                              // 3731
  if (this.length > num.length) {                                                                                     // 3732
    a = this;                                                                                                         // 3733
    b = num;                                                                                                          // 3734
  } else {                                                                                                            // 3735
    a = num;                                                                                                          // 3736
    b = this;                                                                                                         // 3737
  }                                                                                                                   // 3738
                                                                                                                      // 3739
  var carry = 0;                                                                                                      // 3740
  for (var i = 0; i < b.length; i++) {                                                                                // 3741
    var r = a.words[i] + b.words[i] + carry;                                                                          // 3742
    this.words[i] = r & 0x3ffffff;                                                                                    // 3743
    carry = r >>> 26;                                                                                                 // 3744
  }                                                                                                                   // 3745
  for (; carry !== 0 && i < a.length; i++) {                                                                          // 3746
    var r = a.words[i] + carry;                                                                                       // 3747
    this.words[i] = r & 0x3ffffff;                                                                                    // 3748
    carry = r >>> 26;                                                                                                 // 3749
  }                                                                                                                   // 3750
                                                                                                                      // 3751
  this.length = a.length;                                                                                             // 3752
  if (carry !== 0) {                                                                                                  // 3753
    this.words[this.length] = carry;                                                                                  // 3754
    this.length++;                                                                                                    // 3755
  // Copy the rest of the words                                                                                       // 3756
  } else if (a !== this) {                                                                                            // 3757
    for (; i < a.length; i++)                                                                                         // 3758
      this.words[i] = a.words[i];                                                                                     // 3759
  }                                                                                                                   // 3760
                                                                                                                      // 3761
  return this;                                                                                                        // 3762
};                                                                                                                    // 3763
                                                                                                                      // 3764
// Add `num` to `this`                                                                                                // 3765
BN.prototype.add = function add(num) {                                                                                // 3766
  if (num.sign && !this.sign) {                                                                                       // 3767
    num.sign = false;                                                                                                 // 3768
    var res = this.sub(num);                                                                                          // 3769
    num.sign = true;                                                                                                  // 3770
    return res;                                                                                                       // 3771
  } else if (!num.sign && this.sign) {                                                                                // 3772
    this.sign = false;                                                                                                // 3773
    var res = num.sub(this);                                                                                          // 3774
    this.sign = true;                                                                                                 // 3775
    return res;                                                                                                       // 3776
  }                                                                                                                   // 3777
                                                                                                                      // 3778
  if (this.length > num.length)                                                                                       // 3779
    return this.clone().iadd(num);                                                                                    // 3780
  else                                                                                                                // 3781
    return num.clone().iadd(this);                                                                                    // 3782
};                                                                                                                    // 3783
                                                                                                                      // 3784
// Subtract `num` from `this` in-place                                                                                // 3785
BN.prototype.isub = function isub(num) {                                                                              // 3786
  // this - (-num) = this + num                                                                                       // 3787
  if (num.sign) {                                                                                                     // 3788
    num.sign = false;                                                                                                 // 3789
    var r = this.iadd(num);                                                                                           // 3790
    num.sign = true;                                                                                                  // 3791
    return r._normSign();                                                                                             // 3792
                                                                                                                      // 3793
  // -this - num = -(this + num)                                                                                      // 3794
  } else if (this.sign) {                                                                                             // 3795
    this.sign = false;                                                                                                // 3796
    this.iadd(num);                                                                                                   // 3797
    this.sign = true;                                                                                                 // 3798
    return this._normSign();                                                                                          // 3799
  }                                                                                                                   // 3800
                                                                                                                      // 3801
  // At this point both numbers are positive                                                                          // 3802
  var cmp = this.cmp(num);                                                                                            // 3803
                                                                                                                      // 3804
  // Optimization - zeroify                                                                                           // 3805
  if (cmp === 0) {                                                                                                    // 3806
    this.sign = false;                                                                                                // 3807
    this.length = 1;                                                                                                  // 3808
    this.words[0] = 0;                                                                                                // 3809
    return this;                                                                                                      // 3810
  }                                                                                                                   // 3811
                                                                                                                      // 3812
  // a > b                                                                                                            // 3813
  var a;                                                                                                              // 3814
  var b;                                                                                                              // 3815
  if (cmp > 0) {                                                                                                      // 3816
    a = this;                                                                                                         // 3817
    b = num;                                                                                                          // 3818
  } else {                                                                                                            // 3819
    a = num;                                                                                                          // 3820
    b = this;                                                                                                         // 3821
  }                                                                                                                   // 3822
                                                                                                                      // 3823
  var carry = 0;                                                                                                      // 3824
  for (var i = 0; i < b.length; i++) {                                                                                // 3825
    var r = a.words[i] - b.words[i] + carry;                                                                          // 3826
    carry = r >> 26;                                                                                                  // 3827
    this.words[i] = r & 0x3ffffff;                                                                                    // 3828
  }                                                                                                                   // 3829
  for (; carry !== 0 && i < a.length; i++) {                                                                          // 3830
    var r = a.words[i] + carry;                                                                                       // 3831
    carry = r >> 26;                                                                                                  // 3832
    this.words[i] = r & 0x3ffffff;                                                                                    // 3833
  }                                                                                                                   // 3834
                                                                                                                      // 3835
  // Copy rest of the words                                                                                           // 3836
  if (carry === 0 && i < a.length && a !== this)                                                                      // 3837
    for (; i < a.length; i++)                                                                                         // 3838
      this.words[i] = a.words[i];                                                                                     // 3839
  this.length = Math.max(this.length, i);                                                                             // 3840
                                                                                                                      // 3841
  if (a !== this)                                                                                                     // 3842
    this.sign = true;                                                                                                 // 3843
                                                                                                                      // 3844
  return this.strip();                                                                                                // 3845
};                                                                                                                    // 3846
                                                                                                                      // 3847
// Subtract `num` from `this`                                                                                         // 3848
BN.prototype.sub = function sub(num) {                                                                                // 3849
  return this.clone().isub(num);                                                                                      // 3850
};                                                                                                                    // 3851
                                                                                                                      // 3852
/*                                                                                                                    // 3853
// NOTE: This could be potentionally used to generate loop-less multiplications                                       // 3854
function _genCombMulTo(alen, blen) {                                                                                  // 3855
  var len = alen + blen - 1;                                                                                          // 3856
  var src = [                                                                                                         // 3857
    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +                                                  // 3858
        'mask = 0x3ffffff, shift = 0x4000000;',                                                                       // 3859
    'out.length = ' + len + ';'                                                                                       // 3860
  ];                                                                                                                  // 3861
  for (var k = 0; k < len; k++) {                                                                                     // 3862
    var minJ = Math.max(0, k - alen + 1);                                                                             // 3863
    var maxJ = Math.min(k, blen - 1);                                                                                 // 3864
                                                                                                                      // 3865
    for (var j = minJ; j <= maxJ; j++) {                                                                              // 3866
      var i = k - j;                                                                                                  // 3867
      var mul = 'a[' + i + '] * b[' + j + ']';                                                                        // 3868
                                                                                                                      // 3869
      if (j === minJ) {                                                                                               // 3870
        src.push('w = ' + mul + ' + c;');                                                                             // 3871
        src.push('c = (w / shift) | 0;');                                                                             // 3872
      } else {                                                                                                        // 3873
        src.push('w += ' + mul + ';');                                                                                // 3874
        src.push('c += (w / shift) | 0;');                                                                            // 3875
      }                                                                                                               // 3876
      src.push('w &= mask;');                                                                                         // 3877
    }                                                                                                                 // 3878
    src.push('o[' + k + '] = w;');                                                                                    // 3879
  }                                                                                                                   // 3880
  src.push('if (c !== 0) {',                                                                                          // 3881
           '  o[' + k + '] = c;',                                                                                     // 3882
           '  out.length++;',                                                                                         // 3883
           '}',                                                                                                       // 3884
           'return out;');                                                                                            // 3885
                                                                                                                      // 3886
  return src.join('\n');                                                                                              // 3887
}                                                                                                                     // 3888
*/                                                                                                                    // 3889
                                                                                                                      // 3890
BN.prototype._smallMulTo = function _smallMulTo(num, out) {                                                           // 3891
  out.sign = num.sign !== this.sign;                                                                                  // 3892
  out.length = this.length + num.length;                                                                              // 3893
                                                                                                                      // 3894
  var carry = 0;                                                                                                      // 3895
  for (var k = 0; k < out.length - 1; k++) {                                                                          // 3896
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,                                               // 3897
    // note that ncarry could be >= 0x3ffffff                                                                         // 3898
    var ncarry = carry >>> 26;                                                                                        // 3899
    var rword = carry & 0x3ffffff;                                                                                    // 3900
    var maxJ = Math.min(k, num.length - 1);                                                                           // 3901
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {                                                  // 3902
      var i = k - j;                                                                                                  // 3903
      var a = this.words[i] | 0;                                                                                      // 3904
      var b = num.words[j] | 0;                                                                                       // 3905
      var r = a * b;                                                                                                  // 3906
                                                                                                                      // 3907
      var lo = r & 0x3ffffff;                                                                                         // 3908
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;                                                                  // 3909
      lo = (lo + rword) | 0;                                                                                          // 3910
      rword = lo & 0x3ffffff;                                                                                         // 3911
      ncarry = (ncarry + (lo >>> 26)) | 0;                                                                            // 3912
    }                                                                                                                 // 3913
    out.words[k] = rword;                                                                                             // 3914
    carry = ncarry;                                                                                                   // 3915
  }                                                                                                                   // 3916
  if (carry !== 0) {                                                                                                  // 3917
    out.words[k] = carry;                                                                                             // 3918
  } else {                                                                                                            // 3919
    out.length--;                                                                                                     // 3920
  }                                                                                                                   // 3921
                                                                                                                      // 3922
  return out.strip();                                                                                                 // 3923
};                                                                                                                    // 3924
                                                                                                                      // 3925
BN.prototype._bigMulTo = function _bigMulTo(num, out) {                                                               // 3926
  out.sign = num.sign !== this.sign;                                                                                  // 3927
  out.length = this.length + num.length;                                                                              // 3928
                                                                                                                      // 3929
  var carry = 0;                                                                                                      // 3930
  var hncarry = 0;                                                                                                    // 3931
  for (var k = 0; k < out.length - 1; k++) {                                                                          // 3932
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,                                               // 3933
    // note that ncarry could be >= 0x3ffffff                                                                         // 3934
    var ncarry = hncarry;                                                                                             // 3935
    hncarry = 0;                                                                                                      // 3936
    var rword = carry & 0x3ffffff;                                                                                    // 3937
    var maxJ = Math.min(k, num.length - 1);                                                                           // 3938
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {                                                  // 3939
      var i = k - j;                                                                                                  // 3940
      var a = this.words[i] | 0;                                                                                      // 3941
      var b = num.words[j] | 0;                                                                                       // 3942
      var r = a * b;                                                                                                  // 3943
                                                                                                                      // 3944
      var lo = r & 0x3ffffff;                                                                                         // 3945
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;                                                                  // 3946
      lo = (lo + rword) | 0;                                                                                          // 3947
      rword = lo & 0x3ffffff;                                                                                         // 3948
      ncarry = (ncarry + (lo >>> 26)) | 0;                                                                            // 3949
                                                                                                                      // 3950
      hncarry += ncarry >>> 26;                                                                                       // 3951
      ncarry &= 0x3ffffff;                                                                                            // 3952
    }                                                                                                                 // 3953
    out.words[k] = rword;                                                                                             // 3954
    carry = ncarry;                                                                                                   // 3955
    ncarry = hncarry;                                                                                                 // 3956
  }                                                                                                                   // 3957
  if (carry !== 0) {                                                                                                  // 3958
    out.words[k] = carry;                                                                                             // 3959
  } else {                                                                                                            // 3960
    out.length--;                                                                                                     // 3961
  }                                                                                                                   // 3962
                                                                                                                      // 3963
  return out.strip();                                                                                                 // 3964
};                                                                                                                    // 3965
                                                                                                                      // 3966
BN.prototype.mulTo = function mulTo(num, out) {                                                                       // 3967
  var res;                                                                                                            // 3968
  if (this.length + num.length < 63)                                                                                  // 3969
    res = this._smallMulTo(num, out);                                                                                 // 3970
  else                                                                                                                // 3971
    res = this._bigMulTo(num, out);                                                                                   // 3972
  return res;                                                                                                         // 3973
};                                                                                                                    // 3974
                                                                                                                      // 3975
// Multiply `this` by `num`                                                                                           // 3976
BN.prototype.mul = function mul(num) {                                                                                // 3977
  var out = new BN(null);                                                                                             // 3978
  out.words = new Array(this.length + num.length);                                                                    // 3979
  return this.mulTo(num, out);                                                                                        // 3980
};                                                                                                                    // 3981
                                                                                                                      // 3982
// In-place Multiplication                                                                                            // 3983
BN.prototype.imul = function imul(num) {                                                                              // 3984
  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {                                                                      // 3985
    this.words[0] = 0;                                                                                                // 3986
    this.length = 1;                                                                                                  // 3987
    return this;                                                                                                      // 3988
  }                                                                                                                   // 3989
                                                                                                                      // 3990
  var tlen = this.length;                                                                                             // 3991
  var nlen = num.length;                                                                                              // 3992
                                                                                                                      // 3993
  this.sign = num.sign !== this.sign;                                                                                 // 3994
  this.length = this.length + num.length;                                                                             // 3995
  this.words[this.length - 1] = 0;                                                                                    // 3996
                                                                                                                      // 3997
  for (var k = this.length - 2; k >= 0; k--) {                                                                        // 3998
    // Sum all words with the same `i + j = k` and accumulate `carry`,                                                // 3999
    // note that carry could be >= 0x3ffffff                                                                          // 4000
    var carry = 0;                                                                                                    // 4001
    var rword = 0;                                                                                                    // 4002
    var maxJ = Math.min(k, nlen - 1);                                                                                 // 4003
    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {                                                         // 4004
      var i = k - j;                                                                                                  // 4005
      var a = this.words[i];                                                                                          // 4006
      var b = num.words[j];                                                                                           // 4007
      var r = a * b;                                                                                                  // 4008
                                                                                                                      // 4009
      var lo = r & 0x3ffffff;                                                                                         // 4010
      carry += (r / 0x4000000) | 0;                                                                                   // 4011
      lo += rword;                                                                                                    // 4012
      rword = lo & 0x3ffffff;                                                                                         // 4013
      carry += lo >>> 26;                                                                                             // 4014
    }                                                                                                                 // 4015
    this.words[k] = rword;                                                                                            // 4016
    this.words[k + 1] += carry;                                                                                       // 4017
    carry = 0;                                                                                                        // 4018
  }                                                                                                                   // 4019
                                                                                                                      // 4020
  // Propagate overflows                                                                                              // 4021
  var carry = 0;                                                                                                      // 4022
  for (var i = 1; i < this.length; i++) {                                                                             // 4023
    var w = this.words[i] + carry;                                                                                    // 4024
    this.words[i] = w & 0x3ffffff;                                                                                    // 4025
    carry = w >>> 26;                                                                                                 // 4026
  }                                                                                                                   // 4027
                                                                                                                      // 4028
  return this.strip();                                                                                                // 4029
};                                                                                                                    // 4030
                                                                                                                      // 4031
BN.prototype.imuln = function imuln(num) {                                                                            // 4032
  assert(typeof num === 'number');                                                                                    // 4033
                                                                                                                      // 4034
  // Carry                                                                                                            // 4035
  var carry = 0;                                                                                                      // 4036
  for (var i = 0; i < this.length; i++) {                                                                             // 4037
    var w = this.words[i] * num;                                                                                      // 4038
    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);                                                                   // 4039
    carry >>= 26;                                                                                                     // 4040
    carry += (w / 0x4000000) | 0;                                                                                     // 4041
    // NOTE: lo is 27bit maximum                                                                                      // 4042
    carry += lo >>> 26;                                                                                               // 4043
    this.words[i] = lo & 0x3ffffff;                                                                                   // 4044
  }                                                                                                                   // 4045
                                                                                                                      // 4046
  if (carry !== 0) {                                                                                                  // 4047
    this.words[i] = carry;                                                                                            // 4048
    this.length++;                                                                                                    // 4049
  }                                                                                                                   // 4050
                                                                                                                      // 4051
  return this;                                                                                                        // 4052
};                                                                                                                    // 4053
                                                                                                                      // 4054
// `this` * `this`                                                                                                    // 4055
BN.prototype.sqr = function sqr() {                                                                                   // 4056
  return this.mul(this);                                                                                              // 4057
};                                                                                                                    // 4058
                                                                                                                      // 4059
// `this` * `this` in-place                                                                                           // 4060
BN.prototype.isqr = function isqr() {                                                                                 // 4061
  return this.mul(this);                                                                                              // 4062
};                                                                                                                    // 4063
                                                                                                                      // 4064
// Shift-left in-place                                                                                                // 4065
BN.prototype.ishln = function ishln(bits) {                                                                           // 4066
  assert(typeof bits === 'number' && bits >= 0);                                                                      // 4067
  var r = bits % 26;                                                                                                  // 4068
  var s = (bits - r) / 26;                                                                                            // 4069
  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);                                                               // 4070
                                                                                                                      // 4071
  if (r !== 0) {                                                                                                      // 4072
    var carry = 0;                                                                                                    // 4073
    for (var i = 0; i < this.length; i++) {                                                                           // 4074
      var newCarry = this.words[i] & carryMask;                                                                       // 4075
      var c = (this.words[i] - newCarry) << r;                                                                        // 4076
      this.words[i] = c | carry;                                                                                      // 4077
      carry = newCarry >>> (26 - r);                                                                                  // 4078
    }                                                                                                                 // 4079
    if (carry) {                                                                                                      // 4080
      this.words[i] = carry;                                                                                          // 4081
      this.length++;                                                                                                  // 4082
    }                                                                                                                 // 4083
  }                                                                                                                   // 4084
                                                                                                                      // 4085
  if (s !== 0) {                                                                                                      // 4086
    for (var i = this.length - 1; i >= 0; i--)                                                                        // 4087
      this.words[i + s] = this.words[i];                                                                              // 4088
    for (var i = 0; i < s; i++)                                                                                       // 4089
      this.words[i] = 0;                                                                                              // 4090
    this.length += s;                                                                                                 // 4091
  }                                                                                                                   // 4092
                                                                                                                      // 4093
  return this.strip();                                                                                                // 4094
};                                                                                                                    // 4095
                                                                                                                      // 4096
// Shift-right in-place                                                                                               // 4097
// NOTE: `hint` is a lowest bit before trailing zeroes                                                                // 4098
// NOTE: if `extended` is true - { lo: ..., hi: } object will be returned                                             // 4099
BN.prototype.ishrn = function ishrn(bits, hint, extended) {                                                           // 4100
  assert(typeof bits === 'number' && bits >= 0);                                                                      // 4101
  if (hint)                                                                                                           // 4102
    hint = (hint - (hint % 26)) / 26;                                                                                 // 4103
  else                                                                                                                // 4104
    hint = 0;                                                                                                         // 4105
                                                                                                                      // 4106
  var r = bits % 26;                                                                                                  // 4107
  var s = Math.min((bits - r) / 26, this.length);                                                                     // 4108
  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);                                                                    // 4109
  var maskedWords = extended;                                                                                         // 4110
                                                                                                                      // 4111
  hint -= s;                                                                                                          // 4112
  hint = Math.max(0, hint);                                                                                           // 4113
                                                                                                                      // 4114
  // Extended mode, copy masked part                                                                                  // 4115
  if (maskedWords) {                                                                                                  // 4116
    for (var i = 0; i < s; i++)                                                                                       // 4117
      maskedWords.words[i] = this.words[i];                                                                           // 4118
    maskedWords.length = s;                                                                                           // 4119
  }                                                                                                                   // 4120
                                                                                                                      // 4121
  if (s === 0) {                                                                                                      // 4122
    // No-op, we should not move anything at all                                                                      // 4123
  } else if (this.length > s) {                                                                                       // 4124
    this.length -= s;                                                                                                 // 4125
    for (var i = 0; i < this.length; i++)                                                                             // 4126
      this.words[i] = this.words[i + s];                                                                              // 4127
  } else {                                                                                                            // 4128
    this.words[0] = 0;                                                                                                // 4129
    this.length = 1;                                                                                                  // 4130
  }                                                                                                                   // 4131
                                                                                                                      // 4132
  var carry = 0;                                                                                                      // 4133
  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= hint); i--) {                                          // 4134
    var word = this.words[i];                                                                                         // 4135
    this.words[i] = (carry << (26 - r)) | (word >>> r);                                                               // 4136
    carry = word & mask;                                                                                              // 4137
  }                                                                                                                   // 4138
                                                                                                                      // 4139
  // Push carried bits as a mask                                                                                      // 4140
  if (maskedWords && carry !== 0)                                                                                     // 4141
    maskedWords.words[maskedWords.length++] = carry;                                                                  // 4142
                                                                                                                      // 4143
  if (this.length === 0) {                                                                                            // 4144
    this.words[0] = 0;                                                                                                // 4145
    this.length = 1;                                                                                                  // 4146
  }                                                                                                                   // 4147
                                                                                                                      // 4148
  this.strip();                                                                                                       // 4149
  if (extended)                                                                                                       // 4150
    return { hi: this, lo: maskedWords };                                                                             // 4151
                                                                                                                      // 4152
  return this;                                                                                                        // 4153
};                                                                                                                    // 4154
                                                                                                                      // 4155
// Shift-left                                                                                                         // 4156
BN.prototype.shln = function shln(bits) {                                                                             // 4157
  return this.clone().ishln(bits);                                                                                    // 4158
};                                                                                                                    // 4159
                                                                                                                      // 4160
// Shift-right                                                                                                        // 4161
BN.prototype.shrn = function shrn(bits) {                                                                             // 4162
  return this.clone().ishrn(bits);                                                                                    // 4163
};                                                                                                                    // 4164
                                                                                                                      // 4165
// Test if n bit is set                                                                                               // 4166
BN.prototype.testn = function testn(bit) {                                                                            // 4167
  assert(typeof bit === 'number' && bit >= 0);                                                                        // 4168
  var r = bit % 26;                                                                                                   // 4169
  var s = (bit - r) / 26;                                                                                             // 4170
  var q = 1 << r;                                                                                                     // 4171
                                                                                                                      // 4172
  // Fast case: bit is much higher than all existing words                                                            // 4173
  if (this.length <= s) {                                                                                             // 4174
    return false;                                                                                                     // 4175
  }                                                                                                                   // 4176
                                                                                                                      // 4177
  // Check bit and return                                                                                             // 4178
  var w = this.words[s];                                                                                              // 4179
                                                                                                                      // 4180
  return !!(w & q);                                                                                                   // 4181
};                                                                                                                    // 4182
                                                                                                                      // 4183
// Return only lowers bits of number (in-place)                                                                       // 4184
BN.prototype.imaskn = function imaskn(bits) {                                                                         // 4185
  assert(typeof bits === 'number' && bits >= 0);                                                                      // 4186
  var r = bits % 26;                                                                                                  // 4187
  var s = (bits - r) / 26;                                                                                            // 4188
                                                                                                                      // 4189
  assert(!this.sign, 'imaskn works only with positive numbers');                                                      // 4190
                                                                                                                      // 4191
  if (r !== 0)                                                                                                        // 4192
    s++;                                                                                                              // 4193
  this.length = Math.min(s, this.length);                                                                             // 4194
                                                                                                                      // 4195
  if (r !== 0) {                                                                                                      // 4196
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);                                                                  // 4197
    this.words[this.length - 1] &= mask;                                                                              // 4198
  }                                                                                                                   // 4199
                                                                                                                      // 4200
  return this.strip();                                                                                                // 4201
};                                                                                                                    // 4202
                                                                                                                      // 4203
// Return only lowers bits of number                                                                                  // 4204
BN.prototype.maskn = function maskn(bits) {                                                                           // 4205
  return this.clone().imaskn(bits);                                                                                   // 4206
};                                                                                                                    // 4207
                                                                                                                      // 4208
// Add plain number `num` to `this`                                                                                   // 4209
BN.prototype.iaddn = function iaddn(num) {                                                                            // 4210
  assert(typeof num === 'number');                                                                                    // 4211
  if (num < 0)                                                                                                        // 4212
    return this.isubn(-num);                                                                                          // 4213
                                                                                                                      // 4214
  // Possible sign change                                                                                             // 4215
  if (this.sign) {                                                                                                    // 4216
    if (this.length === 1 && this.words[0] < num) {                                                                   // 4217
      this.words[0] = num - this.words[0];                                                                            // 4218
      this.sign = false;                                                                                              // 4219
      return this;                                                                                                    // 4220
    }                                                                                                                 // 4221
                                                                                                                      // 4222
    this.sign = false;                                                                                                // 4223
    this.isubn(num);                                                                                                  // 4224
    this.sign = true;                                                                                                 // 4225
    return this;                                                                                                      // 4226
  }                                                                                                                   // 4227
                                                                                                                      // 4228
  // Add without checks                                                                                               // 4229
  return this._iaddn(num);                                                                                            // 4230
};                                                                                                                    // 4231
                                                                                                                      // 4232
BN.prototype._iaddn = function _iaddn(num) {                                                                          // 4233
  this.words[0] += num;                                                                                               // 4234
                                                                                                                      // 4235
  // Carry                                                                                                            // 4236
  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {                                               // 4237
    this.words[i] -= 0x4000000;                                                                                       // 4238
    if (i === this.length - 1)                                                                                        // 4239
      this.words[i + 1] = 1;                                                                                          // 4240
    else                                                                                                              // 4241
      this.words[i + 1]++;                                                                                            // 4242
  }                                                                                                                   // 4243
  this.length = Math.max(this.length, i + 1);                                                                         // 4244
                                                                                                                      // 4245
  return this;                                                                                                        // 4246
};                                                                                                                    // 4247
                                                                                                                      // 4248
// Subtract plain number `num` from `this`                                                                            // 4249
BN.prototype.isubn = function isubn(num) {                                                                            // 4250
  assert(typeof num === 'number');                                                                                    // 4251
  if (num < 0)                                                                                                        // 4252
    return this.iaddn(-num);                                                                                          // 4253
                                                                                                                      // 4254
  if (this.sign) {                                                                                                    // 4255
    this.sign = false;                                                                                                // 4256
    this.iaddn(num);                                                                                                  // 4257
    this.sign = true;                                                                                                 // 4258
    return this;                                                                                                      // 4259
  }                                                                                                                   // 4260
                                                                                                                      // 4261
  this.words[0] -= num;                                                                                               // 4262
                                                                                                                      // 4263
  // Carry                                                                                                            // 4264
  for (var i = 0; i < this.length && this.words[i] < 0; i++) {                                                        // 4265
    this.words[i] += 0x4000000;                                                                                       // 4266
    this.words[i + 1] -= 1;                                                                                           // 4267
  }                                                                                                                   // 4268
                                                                                                                      // 4269
  return this.strip();                                                                                                // 4270
};                                                                                                                    // 4271
                                                                                                                      // 4272
BN.prototype.addn = function addn(num) {                                                                              // 4273
  return this.clone().iaddn(num);                                                                                     // 4274
};                                                                                                                    // 4275
                                                                                                                      // 4276
BN.prototype.subn = function subn(num) {                                                                              // 4277
  return this.clone().isubn(num);                                                                                     // 4278
};                                                                                                                    // 4279
                                                                                                                      // 4280
BN.prototype.iabs = function iabs() {                                                                                 // 4281
  this.sign = false;                                                                                                  // 4282
                                                                                                                      // 4283
  return this;                                                                                                        // 4284
};                                                                                                                    // 4285
                                                                                                                      // 4286
BN.prototype.abs = function abs() {                                                                                   // 4287
  return this.clone().iabs();                                                                                         // 4288
};                                                                                                                    // 4289
                                                                                                                      // 4290
BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {                                                  // 4291
  // Bigger storage is needed                                                                                         // 4292
  var len = num.length + shift;                                                                                       // 4293
  var i;                                                                                                              // 4294
  if (this.words.length < len) {                                                                                      // 4295
    var t = new Array(len);                                                                                           // 4296
    for (var i = 0; i < this.length; i++)                                                                             // 4297
      t[i] = this.words[i];                                                                                           // 4298
    this.words = t;                                                                                                   // 4299
  } else {                                                                                                            // 4300
    i = this.length;                                                                                                  // 4301
  }                                                                                                                   // 4302
                                                                                                                      // 4303
  // Zeroify rest                                                                                                     // 4304
  this.length = Math.max(this.length, len);                                                                           // 4305
  for (; i < this.length; i++)                                                                                        // 4306
    this.words[i] = 0;                                                                                                // 4307
                                                                                                                      // 4308
  var carry = 0;                                                                                                      // 4309
  for (var i = 0; i < num.length; i++) {                                                                              // 4310
    var w = this.words[i + shift] + carry;                                                                            // 4311
    var right = num.words[i] * mul;                                                                                   // 4312
    w -= right & 0x3ffffff;                                                                                           // 4313
    carry = (w >> 26) - ((right / 0x4000000) | 0);                                                                    // 4314
    this.words[i + shift] = w & 0x3ffffff;                                                                            // 4315
  }                                                                                                                   // 4316
  for (; i < this.length - shift; i++) {                                                                              // 4317
    var w = this.words[i + shift] + carry;                                                                            // 4318
    carry = w >> 26;                                                                                                  // 4319
    this.words[i + shift] = w & 0x3ffffff;                                                                            // 4320
  }                                                                                                                   // 4321
                                                                                                                      // 4322
  if (carry === 0)                                                                                                    // 4323
    return this.strip();                                                                                              // 4324
                                                                                                                      // 4325
  // Subtraction overflow                                                                                             // 4326
  assert(carry === -1);                                                                                               // 4327
  carry = 0;                                                                                                          // 4328
  for (var i = 0; i < this.length; i++) {                                                                             // 4329
    var w = -this.words[i] + carry;                                                                                   // 4330
    carry = w >> 26;                                                                                                  // 4331
    this.words[i] = w & 0x3ffffff;                                                                                    // 4332
  }                                                                                                                   // 4333
  this.sign = true;                                                                                                   // 4334
                                                                                                                      // 4335
  return this.strip();                                                                                                // 4336
};                                                                                                                    // 4337
                                                                                                                      // 4338
BN.prototype._wordDiv = function _wordDiv(num, mode) {                                                                // 4339
  var shift = this.length - num.length;                                                                               // 4340
                                                                                                                      // 4341
  var a = this.clone();                                                                                               // 4342
  var b = num;                                                                                                        // 4343
                                                                                                                      // 4344
  // Normalize                                                                                                        // 4345
  var bhi = b.words[b.length - 1];                                                                                    // 4346
  for (var shift = 0; bhi < 0x2000000; shift++)                                                                       // 4347
    bhi <<= 1;                                                                                                        // 4348
  if (shift !== 0) {                                                                                                  // 4349
    b = b.shln(shift);                                                                                                // 4350
    a.ishln(shift);                                                                                                   // 4351
    bhi = b.words[b.length - 1];                                                                                      // 4352
  }                                                                                                                   // 4353
                                                                                                                      // 4354
  // Initialize quotient                                                                                              // 4355
  var m = a.length - b.length;                                                                                        // 4356
  var q;                                                                                                              // 4357
                                                                                                                      // 4358
  if (mode !== 'mod') {                                                                                               // 4359
    q = new BN(null);                                                                                                 // 4360
    q.length = m + 1;                                                                                                 // 4361
    q.words = new Array(q.length);                                                                                    // 4362
    for (var i = 0; i < q.length; i++)                                                                                // 4363
      q.words[i] = 0;                                                                                                 // 4364
  }                                                                                                                   // 4365
                                                                                                                      // 4366
  var diff = a.clone()._ishlnsubmul(b, 1, m);                                                                         // 4367
  if (!diff.sign) {                                                                                                   // 4368
    a = diff;                                                                                                         // 4369
    if (q)                                                                                                            // 4370
      q.words[m] = 1;                                                                                                 // 4371
  }                                                                                                                   // 4372
                                                                                                                      // 4373
  for (var j = m - 1; j >= 0; j--) {                                                                                  // 4374
    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];                                           // 4375
                                                                                                                      // 4376
    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max                                        // 4377
    // (0x7ffffff)                                                                                                    // 4378
    qj = Math.min((qj / bhi) | 0, 0x3ffffff);                                                                         // 4379
                                                                                                                      // 4380
    a._ishlnsubmul(b, qj, j);                                                                                         // 4381
    while (a.sign) {                                                                                                  // 4382
      qj--;                                                                                                           // 4383
      a.sign = false;                                                                                                 // 4384
      a._ishlnsubmul(b, 1, j);                                                                                        // 4385
      a.sign = !a.sign;                                                                                               // 4386
    }                                                                                                                 // 4387
    if (q)                                                                                                            // 4388
      q.words[j] = qj;                                                                                                // 4389
  }                                                                                                                   // 4390
  if (q)                                                                                                              // 4391
    q.strip();                                                                                                        // 4392
  a.strip();                                                                                                          // 4393
                                                                                                                      // 4394
  // Denormalize                                                                                                      // 4395
  if (mode !== 'div' && shift !== 0)                                                                                  // 4396
    a.ishrn(shift);                                                                                                   // 4397
  return { div: q ? q : null, mod: a };                                                                               // 4398
};                                                                                                                    // 4399
                                                                                                                      // 4400
BN.prototype.divmod = function divmod(num, mode) {                                                                    // 4401
  assert(num.cmpn(0) !== 0);                                                                                          // 4402
                                                                                                                      // 4403
  if (this.sign && !num.sign) {                                                                                       // 4404
    var res = this.neg().divmod(num, mode);                                                                           // 4405
    var div;                                                                                                          // 4406
    var mod;                                                                                                          // 4407
    if (mode !== 'mod')                                                                                               // 4408
      div = res.div.neg();                                                                                            // 4409
    if (mode !== 'div')                                                                                               // 4410
      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);                                                       // 4411
    return {                                                                                                          // 4412
      div: div,                                                                                                       // 4413
      mod: mod                                                                                                        // 4414
    };                                                                                                                // 4415
  } else if (!this.sign && num.sign) {                                                                                // 4416
    var res = this.divmod(num.neg(), mode);                                                                           // 4417
    var div;                                                                                                          // 4418
    if (mode !== 'mod')                                                                                               // 4419
      div = res.div.neg();                                                                                            // 4420
    return { div: div, mod: res.mod };                                                                                // 4421
  } else if (this.sign && num.sign) {                                                                                 // 4422
    return this.neg().divmod(num.neg(), mode);                                                                        // 4423
  }                                                                                                                   // 4424
                                                                                                                      // 4425
  // Both numbers are positive at this point                                                                          // 4426
                                                                                                                      // 4427
  // Strip both numbers to approximate shift value                                                                    // 4428
  if (num.length > this.length || this.cmp(num) < 0)                                                                  // 4429
    return { div: new BN(0), mod: this };                                                                             // 4430
                                                                                                                      // 4431
  // Very short reduction                                                                                             // 4432
  if (num.length === 1) {                                                                                             // 4433
    if (mode === 'div')                                                                                               // 4434
      return { div: this.divn(num.words[0]), mod: null };                                                             // 4435
    else if (mode === 'mod')                                                                                          // 4436
      return { div: null, mod: new BN(this.modn(num.words[0])) };                                                     // 4437
    return {                                                                                                          // 4438
      div: this.divn(num.words[0]),                                                                                   // 4439
      mod: new BN(this.modn(num.words[0]))                                                                            // 4440
    };                                                                                                                // 4441
  }                                                                                                                   // 4442
                                                                                                                      // 4443
  return this._wordDiv(num, mode);                                                                                    // 4444
};                                                                                                                    // 4445
                                                                                                                      // 4446
// Find `this` / `num`                                                                                                // 4447
BN.prototype.div = function div(num) {                                                                                // 4448
  return this.divmod(num, 'div').div;                                                                                 // 4449
};                                                                                                                    // 4450
                                                                                                                      // 4451
// Find `this` % `num`                                                                                                // 4452
BN.prototype.mod = function mod(num) {                                                                                // 4453
  return this.divmod(num, 'mod').mod;                                                                                 // 4454
};                                                                                                                    // 4455
                                                                                                                      // 4456
// Find Round(`this` / `num`)                                                                                         // 4457
BN.prototype.divRound = function divRound(num) {                                                                      // 4458
  var dm = this.divmod(num);                                                                                          // 4459
                                                                                                                      // 4460
  // Fast case - exact division                                                                                       // 4461
  if (dm.mod.cmpn(0) === 0)                                                                                           // 4462
    return dm.div;                                                                                                    // 4463
                                                                                                                      // 4464
  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;                                                                  // 4465
                                                                                                                      // 4466
  var half = num.shrn(1);                                                                                             // 4467
  var r2 = num.andln(1);                                                                                              // 4468
  var cmp = mod.cmp(half);                                                                                            // 4469
                                                                                                                      // 4470
  // Round down                                                                                                       // 4471
  if (cmp < 0 || r2 === 1 && cmp === 0)                                                                               // 4472
    return dm.div;                                                                                                    // 4473
                                                                                                                      // 4474
  // Round up                                                                                                         // 4475
  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);                                                             // 4476
};                                                                                                                    // 4477
                                                                                                                      // 4478
BN.prototype.modn = function modn(num) {                                                                              // 4479
  assert(num <= 0x3ffffff);                                                                                           // 4480
  var p = (1 << 26) % num;                                                                                            // 4481
                                                                                                                      // 4482
  var acc = 0;                                                                                                        // 4483
  for (var i = this.length - 1; i >= 0; i--)                                                                          // 4484
    acc = (p * acc + this.words[i]) % num;                                                                            // 4485
                                                                                                                      // 4486
  return acc;                                                                                                         // 4487
};                                                                                                                    // 4488
                                                                                                                      // 4489
// In-place division by number                                                                                        // 4490
BN.prototype.idivn = function idivn(num) {                                                                            // 4491
  assert(num <= 0x3ffffff);                                                                                           // 4492
                                                                                                                      // 4493
  var carry = 0;                                                                                                      // 4494
  for (var i = this.length - 1; i >= 0; i--) {                                                                        // 4495
    var w = this.words[i] + carry * 0x4000000;                                                                        // 4496
    this.words[i] = (w / num) | 0;                                                                                    // 4497
    carry = w % num;                                                                                                  // 4498
  }                                                                                                                   // 4499
                                                                                                                      // 4500
  return this.strip();                                                                                                // 4501
};                                                                                                                    // 4502
                                                                                                                      // 4503
BN.prototype.divn = function divn(num) {                                                                              // 4504
  return this.clone().idivn(num);                                                                                     // 4505
};                                                                                                                    // 4506
                                                                                                                      // 4507
BN.prototype._egcd = function _egcd(x1, p) {                                                                          // 4508
  assert(!p.sign);                                                                                                    // 4509
  assert(p.cmpn(0) !== 0);                                                                                            // 4510
                                                                                                                      // 4511
  var a = this;                                                                                                       // 4512
  var b = p.clone();                                                                                                  // 4513
                                                                                                                      // 4514
  if (a.sign)                                                                                                         // 4515
    a = a.mod(p);                                                                                                     // 4516
  else                                                                                                                // 4517
    a = a.clone();                                                                                                    // 4518
                                                                                                                      // 4519
  var x2 = new BN(0);                                                                                                 // 4520
  while (b.isEven())                                                                                                  // 4521
    b.ishrn(1);                                                                                                       // 4522
  var delta = b.clone();                                                                                              // 4523
  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {                                                                            // 4524
    while (a.isEven()) {                                                                                              // 4525
      a.ishrn(1);                                                                                                     // 4526
      if (x1.isEven())                                                                                                // 4527
        x1.ishrn(1);                                                                                                  // 4528
      else                                                                                                            // 4529
        x1.iadd(delta).ishrn(1);                                                                                      // 4530
    }                                                                                                                 // 4531
    while (b.isEven()) {                                                                                              // 4532
      b.ishrn(1);                                                                                                     // 4533
      if (x2.isEven())                                                                                                // 4534
        x2.ishrn(1);                                                                                                  // 4535
      else                                                                                                            // 4536
        x2.iadd(delta).ishrn(1);                                                                                      // 4537
    }                                                                                                                 // 4538
    if (a.cmp(b) >= 0) {                                                                                              // 4539
      a.isub(b);                                                                                                      // 4540
      x1.isub(x2);                                                                                                    // 4541
    } else {                                                                                                          // 4542
      b.isub(a);                                                                                                      // 4543
      x2.isub(x1);                                                                                                    // 4544
    }                                                                                                                 // 4545
  }                                                                                                                   // 4546
  if (a.cmpn(1) === 0)                                                                                                // 4547
    return x1;                                                                                                        // 4548
  else                                                                                                                // 4549
    return x2;                                                                                                        // 4550
};                                                                                                                    // 4551
                                                                                                                      // 4552
BN.prototype.gcd = function gcd(num) {                                                                                // 4553
  if (this.cmpn(0) === 0)                                                                                             // 4554
    return num.clone();                                                                                               // 4555
  if (num.cmpn(0) === 0)                                                                                              // 4556
    return this.clone();                                                                                              // 4557
                                                                                                                      // 4558
  var a = this.clone();                                                                                               // 4559
  var b = num.clone();                                                                                                // 4560
  a.sign = false;                                                                                                     // 4561
  b.sign = false;                                                                                                     // 4562
                                                                                                                      // 4563
  // Remove common factor of two                                                                                      // 4564
  for (var shift = 0; a.isEven() && b.isEven(); shift++) {                                                            // 4565
    a.ishrn(1);                                                                                                       // 4566
    b.ishrn(1);                                                                                                       // 4567
  }                                                                                                                   // 4568
                                                                                                                      // 4569
  while (a.isEven())                                                                                                  // 4570
    a.ishrn(1);                                                                                                       // 4571
                                                                                                                      // 4572
  do {                                                                                                                // 4573
    while (b.isEven())                                                                                                // 4574
      b.ishrn(1);                                                                                                     // 4575
                                                                                                                      // 4576
    // Swap `a` and `b` to make `a` always bigger than `b`                                                            // 4577
    if (a.cmp(b) < 0) {                                                                                               // 4578
      var t = a;                                                                                                      // 4579
      a = b;                                                                                                          // 4580
      b = t;                                                                                                          // 4581
    }                                                                                                                 // 4582
    a.isub(a.div(b).mul(b));                                                                                          // 4583
  } while (a.cmpn(0) !== 0 && b.cmpn(0) !== 0);                                                                       // 4584
  if (a.cmpn(0) === 0)                                                                                                // 4585
    return b.ishln(shift);                                                                                            // 4586
  else                                                                                                                // 4587
    return a.ishln(shift);                                                                                            // 4588
};                                                                                                                    // 4589
                                                                                                                      // 4590
// Invert number in the field F(num)                                                                                  // 4591
BN.prototype.invm = function invm(num) {                                                                              // 4592
  return this._egcd(new BN(1), num).mod(num);                                                                         // 4593
};                                                                                                                    // 4594
                                                                                                                      // 4595
BN.prototype.isEven = function isEven() {                                                                             // 4596
  return (this.words[0] & 1) === 0;                                                                                   // 4597
};                                                                                                                    // 4598
                                                                                                                      // 4599
BN.prototype.isOdd = function isOdd() {                                                                               // 4600
  return (this.words[0] & 1) === 1;                                                                                   // 4601
};                                                                                                                    // 4602
                                                                                                                      // 4603
// And first word and num                                                                                             // 4604
BN.prototype.andln = function andln(num) {                                                                            // 4605
  return this.words[0] & num;                                                                                         // 4606
};                                                                                                                    // 4607
                                                                                                                      // 4608
// Increment at the bit position in-line                                                                              // 4609
BN.prototype.bincn = function bincn(bit) {                                                                            // 4610
  assert(typeof bit === 'number');                                                                                    // 4611
  var r = bit % 26;                                                                                                   // 4612
  var s = (bit - r) / 26;                                                                                             // 4613
  var q = 1 << r;                                                                                                     // 4614
                                                                                                                      // 4615
  // Fast case: bit is much higher than all existing words                                                            // 4616
  if (this.length <= s) {                                                                                             // 4617
    for (var i = this.length; i < s + 1; i++)                                                                         // 4618
      this.words[i] = 0;                                                                                              // 4619
    this.words[s] |= q;                                                                                               // 4620
    this.length = s + 1;                                                                                              // 4621
    return this;                                                                                                      // 4622
  }                                                                                                                   // 4623
                                                                                                                      // 4624
  // Add bit and propagate, if needed                                                                                 // 4625
  var carry = q;                                                                                                      // 4626
  for (var i = s; carry !== 0 && i < this.length; i++) {                                                              // 4627
    var w = this.words[i];                                                                                            // 4628
    w += carry;                                                                                                       // 4629
    carry = w >>> 26;                                                                                                 // 4630
    w &= 0x3ffffff;                                                                                                   // 4631
    this.words[i] = w;                                                                                                // 4632
  }                                                                                                                   // 4633
  if (carry !== 0) {                                                                                                  // 4634
    this.words[i] = carry;                                                                                            // 4635
    this.length++;                                                                                                    // 4636
  }                                                                                                                   // 4637
  return this;                                                                                                        // 4638
};                                                                                                                    // 4639
                                                                                                                      // 4640
BN.prototype.cmpn = function cmpn(num) {                                                                              // 4641
  var sign = num < 0;                                                                                                 // 4642
  if (sign)                                                                                                           // 4643
    num = -num;                                                                                                       // 4644
                                                                                                                      // 4645
  if (this.sign && !sign)                                                                                             // 4646
    return -1;                                                                                                        // 4647
  else if (!this.sign && sign)                                                                                        // 4648
    return 1;                                                                                                         // 4649
                                                                                                                      // 4650
  num &= 0x3ffffff;                                                                                                   // 4651
  this.strip();                                                                                                       // 4652
                                                                                                                      // 4653
  var res;                                                                                                            // 4654
  if (this.length > 1) {                                                                                              // 4655
    res = 1;                                                                                                          // 4656
  } else {                                                                                                            // 4657
    var w = this.words[0];                                                                                            // 4658
    res = w === num ? 0 : w < num ? -1 : 1;                                                                           // 4659
  }                                                                                                                   // 4660
  if (this.sign)                                                                                                      // 4661
    res = -res;                                                                                                       // 4662
  return res;                                                                                                         // 4663
};                                                                                                                    // 4664
                                                                                                                      // 4665
// Compare two numbers and return:                                                                                    // 4666
// 1 - if `this` > `num`                                                                                              // 4667
// 0 - if `this` == `num`                                                                                             // 4668
// -1 - if `this` < `num`                                                                                             // 4669
BN.prototype.cmp = function cmp(num) {                                                                                // 4670
  if (this.sign && !num.sign)                                                                                         // 4671
    return -1;                                                                                                        // 4672
  else if (!this.sign && num.sign)                                                                                    // 4673
    return 1;                                                                                                         // 4674
                                                                                                                      // 4675
  var res = this.ucmp(num);                                                                                           // 4676
  if (this.sign)                                                                                                      // 4677
    return -res;                                                                                                      // 4678
  else                                                                                                                // 4679
    return res;                                                                                                       // 4680
};                                                                                                                    // 4681
                                                                                                                      // 4682
// Unsigned comparison                                                                                                // 4683
BN.prototype.ucmp = function ucmp(num) {                                                                              // 4684
  // At this point both numbers have the same sign                                                                    // 4685
  if (this.length > num.length)                                                                                       // 4686
    return 1;                                                                                                         // 4687
  else if (this.length < num.length)                                                                                  // 4688
    return -1;                                                                                                        // 4689
                                                                                                                      // 4690
  var res = 0;                                                                                                        // 4691
  for (var i = this.length - 1; i >= 0; i--) {                                                                        // 4692
    var a = this.words[i];                                                                                            // 4693
    var b = num.words[i];                                                                                             // 4694
                                                                                                                      // 4695
    if (a === b)                                                                                                      // 4696
      continue;                                                                                                       // 4697
    if (a < b)                                                                                                        // 4698
      res = -1;                                                                                                       // 4699
    else if (a > b)                                                                                                   // 4700
      res = 1;                                                                                                        // 4701
    break;                                                                                                            // 4702
  }                                                                                                                   // 4703
  return res;                                                                                                         // 4704
};                                                                                                                    // 4705
                                                                                                                      // 4706
//                                                                                                                    // 4707
// A reduce context, could be using montgomery or something better, depending                                         // 4708
// on the `m` itself.                                                                                                 // 4709
//                                                                                                                    // 4710
BN.red = function red(num) {                                                                                          // 4711
  return new Red(num);                                                                                                // 4712
};                                                                                                                    // 4713
                                                                                                                      // 4714
BN.prototype.toRed = function toRed(ctx) {                                                                            // 4715
  assert(!this.red, 'Already a number in reduction context');                                                         // 4716
  assert(!this.sign, 'red works only with positives');                                                                // 4717
  return ctx.convertTo(this)._forceRed(ctx);                                                                          // 4718
};                                                                                                                    // 4719
                                                                                                                      // 4720
BN.prototype.fromRed = function fromRed() {                                                                           // 4721
  assert(this.red, 'fromRed works only with numbers in reduction context');                                           // 4722
  return this.red.convertFrom(this);                                                                                  // 4723
};                                                                                                                    // 4724
                                                                                                                      // 4725
BN.prototype._forceRed = function _forceRed(ctx) {                                                                    // 4726
  this.red = ctx;                                                                                                     // 4727
  return this;                                                                                                        // 4728
};                                                                                                                    // 4729
                                                                                                                      // 4730
BN.prototype.forceRed = function forceRed(ctx) {                                                                      // 4731
  assert(!this.red, 'Already a number in reduction context');                                                         // 4732
  return this._forceRed(ctx);                                                                                         // 4733
};                                                                                                                    // 4734
                                                                                                                      // 4735
BN.prototype.redAdd = function redAdd(num) {                                                                          // 4736
  assert(this.red, 'redAdd works only with red numbers');                                                             // 4737
  return this.red.add(this, num);                                                                                     // 4738
};                                                                                                                    // 4739
                                                                                                                      // 4740
BN.prototype.redIAdd = function redIAdd(num) {                                                                        // 4741
  assert(this.red, 'redIAdd works only with red numbers');                                                            // 4742
  return this.red.iadd(this, num);                                                                                    // 4743
};                                                                                                                    // 4744
                                                                                                                      // 4745
BN.prototype.redSub = function redSub(num) {                                                                          // 4746
  assert(this.red, 'redSub works only with red numbers');                                                             // 4747
  return this.red.sub(this, num);                                                                                     // 4748
};                                                                                                                    // 4749
                                                                                                                      // 4750
BN.prototype.redISub = function redISub(num) {                                                                        // 4751
  assert(this.red, 'redISub works only with red numbers');                                                            // 4752
  return this.red.isub(this, num);                                                                                    // 4753
};                                                                                                                    // 4754
                                                                                                                      // 4755
BN.prototype.redShl = function redShl(num) {                                                                          // 4756
  assert(this.red, 'redShl works only with red numbers');                                                             // 4757
  return this.red.shl(this, num);                                                                                     // 4758
};                                                                                                                    // 4759
                                                                                                                      // 4760
BN.prototype.redMul = function redMul(num) {                                                                          // 4761
  assert(this.red, 'redMul works only with red numbers');                                                             // 4762
  this.red._verify2(this, num);                                                                                       // 4763
  return this.red.mul(this, num);                                                                                     // 4764
};                                                                                                                    // 4765
                                                                                                                      // 4766
BN.prototype.redIMul = function redIMul(num) {                                                                        // 4767
  assert(this.red, 'redMul works only with red numbers');                                                             // 4768
  this.red._verify2(this, num);                                                                                       // 4769
  return this.red.imul(this, num);                                                                                    // 4770
};                                                                                                                    // 4771
                                                                                                                      // 4772
BN.prototype.redSqr = function redSqr() {                                                                             // 4773
  assert(this.red, 'redSqr works only with red numbers');                                                             // 4774
  this.red._verify1(this);                                                                                            // 4775
  return this.red.sqr(this);                                                                                          // 4776
};                                                                                                                    // 4777
                                                                                                                      // 4778
BN.prototype.redISqr = function redISqr() {                                                                           // 4779
  assert(this.red, 'redISqr works only with red numbers');                                                            // 4780
  this.red._verify1(this);                                                                                            // 4781
  return this.red.isqr(this);                                                                                         // 4782
};                                                                                                                    // 4783
                                                                                                                      // 4784
// Square root over p                                                                                                 // 4785
BN.prototype.redSqrt = function redSqrt() {                                                                           // 4786
  assert(this.red, 'redSqrt works only with red numbers');                                                            // 4787
  this.red._verify1(this);                                                                                            // 4788
  return this.red.sqrt(this);                                                                                         // 4789
};                                                                                                                    // 4790
                                                                                                                      // 4791
BN.prototype.redInvm = function redInvm() {                                                                           // 4792
  assert(this.red, 'redInvm works only with red numbers');                                                            // 4793
  this.red._verify1(this);                                                                                            // 4794
  return this.red.invm(this);                                                                                         // 4795
};                                                                                                                    // 4796
                                                                                                                      // 4797
// Return negative clone of `this` % `red modulo`                                                                     // 4798
BN.prototype.redNeg = function redNeg() {                                                                             // 4799
  assert(this.red, 'redNeg works only with red numbers');                                                             // 4800
  this.red._verify1(this);                                                                                            // 4801
  return this.red.neg(this);                                                                                          // 4802
};                                                                                                                    // 4803
                                                                                                                      // 4804
BN.prototype.redPow = function redPow(num) {                                                                          // 4805
  assert(this.red && !num.red, 'redPow(normalNum)');                                                                  // 4806
  this.red._verify1(this);                                                                                            // 4807
  return this.red.pow(this, num);                                                                                     // 4808
};                                                                                                                    // 4809
                                                                                                                      // 4810
// Prime numbers with efficient reduction                                                                             // 4811
var primes = {                                                                                                        // 4812
  k256: null,                                                                                                         // 4813
  p224: null,                                                                                                         // 4814
  p192: null,                                                                                                         // 4815
  p25519: null                                                                                                        // 4816
};                                                                                                                    // 4817
                                                                                                                      // 4818
// Pseudo-Mersenne prime                                                                                              // 4819
function MPrime(name, p) {                                                                                            // 4820
  // P = 2 ^ N - K                                                                                                    // 4821
  this.name = name;                                                                                                   // 4822
  this.p = new BN(p, 16);                                                                                             // 4823
  this.n = this.p.bitLength();                                                                                        // 4824
  this.k = new BN(1).ishln(this.n).isub(this.p);                                                                      // 4825
                                                                                                                      // 4826
  this.tmp = this._tmp();                                                                                             // 4827
}                                                                                                                     // 4828
                                                                                                                      // 4829
MPrime.prototype._tmp = function _tmp() {                                                                             // 4830
  var tmp = new BN(null);                                                                                             // 4831
  tmp.words = new Array(Math.ceil(this.n / 13));                                                                      // 4832
  return tmp;                                                                                                         // 4833
};                                                                                                                    // 4834
                                                                                                                      // 4835
MPrime.prototype.ireduce = function ireduce(num) {                                                                    // 4836
  // Assumes that `num` is less than `P^2`                                                                            // 4837
  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)                                                       // 4838
  var r = num;                                                                                                        // 4839
  var rlen;                                                                                                           // 4840
                                                                                                                      // 4841
  do {                                                                                                                // 4842
    var pair = r.ishrn(this.n, 0, this.tmp);                                                                          // 4843
    r = this.imulK(pair.hi);                                                                                          // 4844
    r = r.iadd(pair.lo);                                                                                              // 4845
    rlen = r.bitLength();                                                                                             // 4846
  } while (rlen > this.n);                                                                                            // 4847
                                                                                                                      // 4848
  var cmp = rlen < this.n ? -1 : r.cmp(this.p);                                                                       // 4849
  if (cmp === 0) {                                                                                                    // 4850
    r.words[0] = 0;                                                                                                   // 4851
    r.length = 1;                                                                                                     // 4852
  } else if (cmp > 0) {                                                                                               // 4853
    r.isub(this.p);                                                                                                   // 4854
  } else {                                                                                                            // 4855
    r.strip();                                                                                                        // 4856
  }                                                                                                                   // 4857
                                                                                                                      // 4858
  return r;                                                                                                           // 4859
};                                                                                                                    // 4860
                                                                                                                      // 4861
MPrime.prototype.imulK = function imulK(num) {                                                                        // 4862
  return num.imul(this.k);                                                                                            // 4863
};                                                                                                                    // 4864
                                                                                                                      // 4865
function K256() {                                                                                                     // 4866
  MPrime.call(                                                                                                        // 4867
    this,                                                                                                             // 4868
    'k256',                                                                                                           // 4869
    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');                                       // 4870
}                                                                                                                     // 4871
inherits(K256, MPrime);                                                                                               // 4872
                                                                                                                      // 4873
K256.prototype.imulK = function imulK(num) {                                                                          // 4874
  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]                                                                                // 4875
  num.words[num.length] = 0;                                                                                          // 4876
  num.words[num.length + 1] = 0;                                                                                      // 4877
  num.length += 2;                                                                                                    // 4878
                                                                                                                      // 4879
  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390                                                               // 4880
  var hi;                                                                                                             // 4881
  var lo = 0;                                                                                                         // 4882
  for (var i = 0; i < num.length; i++) {                                                                              // 4883
    var w = num.words[i];                                                                                             // 4884
    hi = w * 0x40;                                                                                                    // 4885
    lo += w * 0x3d1;                                                                                                  // 4886
    hi += (lo / 0x4000000) | 0;                                                                                       // 4887
    lo &= 0x3ffffff;                                                                                                  // 4888
                                                                                                                      // 4889
    num.words[i] = lo;                                                                                                // 4890
                                                                                                                      // 4891
    lo = hi;                                                                                                          // 4892
  }                                                                                                                   // 4893
                                                                                                                      // 4894
  // Fast length reduction                                                                                            // 4895
  if (num.words[num.length - 1] === 0) {                                                                              // 4896
    num.length--;                                                                                                     // 4897
    if (num.words[num.length - 1] === 0)                                                                              // 4898
      num.length--;                                                                                                   // 4899
  }                                                                                                                   // 4900
  return num;                                                                                                         // 4901
};                                                                                                                    // 4902
                                                                                                                      // 4903
function P224() {                                                                                                     // 4904
  MPrime.call(                                                                                                        // 4905
    this,                                                                                                             // 4906
    'p224',                                                                                                           // 4907
    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');                                                // 4908
}                                                                                                                     // 4909
inherits(P224, MPrime);                                                                                               // 4910
                                                                                                                      // 4911
function P192() {                                                                                                     // 4912
  MPrime.call(                                                                                                        // 4913
    this,                                                                                                             // 4914
    'p192',                                                                                                           // 4915
    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');                                                         // 4916
}                                                                                                                     // 4917
inherits(P192, MPrime);                                                                                               // 4918
                                                                                                                      // 4919
function P25519() {                                                                                                   // 4920
  // 2 ^ 255 - 19                                                                                                     // 4921
  MPrime.call(                                                                                                        // 4922
    this,                                                                                                             // 4923
    '25519',                                                                                                          // 4924
    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');                                           // 4925
}                                                                                                                     // 4926
inherits(P25519, MPrime);                                                                                             // 4927
                                                                                                                      // 4928
P25519.prototype.imulK = function imulK(num) {                                                                        // 4929
  // K = 0x13                                                                                                         // 4930
  var carry = 0;                                                                                                      // 4931
  for (var i = 0; i < num.length; i++) {                                                                              // 4932
    var hi = num.words[i] * 0x13 + carry;                                                                             // 4933
    var lo = hi & 0x3ffffff;                                                                                          // 4934
    hi >>>= 26;                                                                                                       // 4935
                                                                                                                      // 4936
    num.words[i] = lo;                                                                                                // 4937
    carry = hi;                                                                                                       // 4938
  }                                                                                                                   // 4939
  if (carry !== 0)                                                                                                    // 4940
    num.words[num.length++] = carry;                                                                                  // 4941
  return num;                                                                                                         // 4942
};                                                                                                                    // 4943
                                                                                                                      // 4944
// Exported mostly for testing purposes, use plain name instead                                                       // 4945
BN._prime = function prime(name) {                                                                                    // 4946
  // Cached version of prime                                                                                          // 4947
  if (primes[name])                                                                                                   // 4948
    return primes[name];                                                                                              // 4949
                                                                                                                      // 4950
  var prime;                                                                                                          // 4951
  if (name === 'k256')                                                                                                // 4952
    prime = new K256();                                                                                               // 4953
  else if (name === 'p224')                                                                                           // 4954
    prime = new P224();                                                                                               // 4955
  else if (name === 'p192')                                                                                           // 4956
    prime = new P192();                                                                                               // 4957
  else if (name === 'p25519')                                                                                         // 4958
    prime = new P25519();                                                                                             // 4959
  else                                                                                                                // 4960
    throw new Error('Unknown prime ' + name);                                                                         // 4961
  primes[name] = prime;                                                                                               // 4962
                                                                                                                      // 4963
  return prime;                                                                                                       // 4964
};                                                                                                                    // 4965
                                                                                                                      // 4966
//                                                                                                                    // 4967
// Base reduction engine                                                                                              // 4968
//                                                                                                                    // 4969
function Red(m) {                                                                                                     // 4970
  if (typeof m === 'string') {                                                                                        // 4971
    var prime = BN._prime(m);                                                                                         // 4972
    this.m = prime.p;                                                                                                 // 4973
    this.prime = prime;                                                                                               // 4974
  } else {                                                                                                            // 4975
    this.m = m;                                                                                                       // 4976
    this.prime = null;                                                                                                // 4977
  }                                                                                                                   // 4978
}                                                                                                                     // 4979
                                                                                                                      // 4980
Red.prototype._verify1 = function _verify1(a) {                                                                       // 4981
  assert(!a.sign, 'red works only with positives');                                                                   // 4982
  assert(a.red, 'red works only with red numbers');                                                                   // 4983
};                                                                                                                    // 4984
                                                                                                                      // 4985
Red.prototype._verify2 = function _verify2(a, b) {                                                                    // 4986
  assert(!a.sign && !b.sign, 'red works only with positives');                                                        // 4987
  assert(a.red && a.red === b.red,                                                                                    // 4988
         'red works only with red numbers');                                                                          // 4989
};                                                                                                                    // 4990
                                                                                                                      // 4991
Red.prototype.imod = function imod(a) {                                                                               // 4992
  if (this.prime)                                                                                                     // 4993
    return this.prime.ireduce(a)._forceRed(this);                                                                     // 4994
  return a.mod(this.m)._forceRed(this);                                                                               // 4995
};                                                                                                                    // 4996
                                                                                                                      // 4997
Red.prototype.neg = function neg(a) {                                                                                 // 4998
  var r = a.clone();                                                                                                  // 4999
  r.sign = !r.sign;                                                                                                   // 5000
  return r.iadd(this.m)._forceRed(this);                                                                              // 5001
};                                                                                                                    // 5002
                                                                                                                      // 5003
Red.prototype.add = function add(a, b) {                                                                              // 5004
  this._verify2(a, b);                                                                                                // 5005
                                                                                                                      // 5006
  var res = a.add(b);                                                                                                 // 5007
  if (res.cmp(this.m) >= 0)                                                                                           // 5008
    res.isub(this.m);                                                                                                 // 5009
  return res._forceRed(this);                                                                                         // 5010
};                                                                                                                    // 5011
                                                                                                                      // 5012
Red.prototype.iadd = function iadd(a, b) {                                                                            // 5013
  this._verify2(a, b);                                                                                                // 5014
                                                                                                                      // 5015
  var res = a.iadd(b);                                                                                                // 5016
  if (res.cmp(this.m) >= 0)                                                                                           // 5017
    res.isub(this.m);                                                                                                 // 5018
  return res;                                                                                                         // 5019
};                                                                                                                    // 5020
                                                                                                                      // 5021
Red.prototype.sub = function sub(a, b) {                                                                              // 5022
  this._verify2(a, b);                                                                                                // 5023
                                                                                                                      // 5024
  var res = a.sub(b);                                                                                                 // 5025
  if (res.cmpn(0) < 0)                                                                                                // 5026
    res.iadd(this.m);                                                                                                 // 5027
  return res._forceRed(this);                                                                                         // 5028
};                                                                                                                    // 5029
                                                                                                                      // 5030
Red.prototype.isub = function isub(a, b) {                                                                            // 5031
  this._verify2(a, b);                                                                                                // 5032
                                                                                                                      // 5033
  var res = a.isub(b);                                                                                                // 5034
  if (res.cmpn(0) < 0)                                                                                                // 5035
    res.iadd(this.m);                                                                                                 // 5036
  return res;                                                                                                         // 5037
};                                                                                                                    // 5038
                                                                                                                      // 5039
Red.prototype.shl = function shl(a, num) {                                                                            // 5040
  this._verify1(a);                                                                                                   // 5041
  return this.imod(a.shln(num));                                                                                      // 5042
};                                                                                                                    // 5043
                                                                                                                      // 5044
Red.prototype.imul = function imul(a, b) {                                                                            // 5045
  this._verify2(a, b);                                                                                                // 5046
  return this.imod(a.imul(b));                                                                                        // 5047
};                                                                                                                    // 5048
                                                                                                                      // 5049
Red.prototype.mul = function mul(a, b) {                                                                              // 5050
  this._verify2(a, b);                                                                                                // 5051
  return this.imod(a.mul(b));                                                                                         // 5052
};                                                                                                                    // 5053
                                                                                                                      // 5054
Red.prototype.isqr = function isqr(a) {                                                                               // 5055
  return this.imul(a, a);                                                                                             // 5056
};                                                                                                                    // 5057
                                                                                                                      // 5058
Red.prototype.sqr = function sqr(a) {                                                                                 // 5059
  return this.mul(a, a);                                                                                              // 5060
};                                                                                                                    // 5061
                                                                                                                      // 5062
Red.prototype.sqrt = function sqrt(a) {                                                                               // 5063
  if (a.cmpn(0) === 0)                                                                                                // 5064
    return a.clone();                                                                                                 // 5065
                                                                                                                      // 5066
  var mod3 = this.m.andln(3);                                                                                         // 5067
  assert(mod3 % 2 === 1);                                                                                             // 5068
                                                                                                                      // 5069
  // Fast case                                                                                                        // 5070
  if (mod3 === 3) {                                                                                                   // 5071
    var pow = this.m.add(new BN(1)).ishrn(2);                                                                         // 5072
    var r = this.pow(a, pow);                                                                                         // 5073
    return r;                                                                                                         // 5074
  }                                                                                                                   // 5075
                                                                                                                      // 5076
  // Tonelli-Shanks algorithm (Totally unoptimized and slow)                                                          // 5077
  //                                                                                                                  // 5078
  // Find Q and S, that Q * 2 ^ S = (P - 1)                                                                           // 5079
  var q = this.m.subn(1);                                                                                             // 5080
  var s = 0;                                                                                                          // 5081
  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {                                                                       // 5082
    s++;                                                                                                              // 5083
    q.ishrn(1);                                                                                                       // 5084
  }                                                                                                                   // 5085
  assert(q.cmpn(0) !== 0);                                                                                            // 5086
                                                                                                                      // 5087
  var one = new BN(1).toRed(this);                                                                                    // 5088
  var nOne = one.redNeg();                                                                                            // 5089
                                                                                                                      // 5090
  // Find quadratic non-residue                                                                                       // 5091
  // NOTE: Max is such because of generalized Riemann hypothesis.                                                     // 5092
  var lpow = this.m.subn(1).ishrn(1);                                                                                 // 5093
  var z = this.m.bitLength();                                                                                         // 5094
  z = new BN(2 * z * z).toRed(this);                                                                                  // 5095
  while (this.pow(z, lpow).cmp(nOne) !== 0)                                                                           // 5096
    z.redIAdd(nOne);                                                                                                  // 5097
                                                                                                                      // 5098
  var c = this.pow(z, q);                                                                                             // 5099
  var r = this.pow(a, q.addn(1).ishrn(1));                                                                            // 5100
  var t = this.pow(a, q);                                                                                             // 5101
  var m = s;                                                                                                          // 5102
  while (t.cmp(one) !== 0) {                                                                                          // 5103
    var tmp = t;                                                                                                      // 5104
    for (var i = 0; tmp.cmp(one) !== 0; i++)                                                                          // 5105
      tmp = tmp.redSqr();                                                                                             // 5106
    assert(i < m);                                                                                                    // 5107
    var b = this.pow(c, new BN(1).ishln(m - i - 1));                                                                  // 5108
                                                                                                                      // 5109
    r = r.redMul(b);                                                                                                  // 5110
    c = b.redSqr();                                                                                                   // 5111
    t = t.redMul(c);                                                                                                  // 5112
    m = i;                                                                                                            // 5113
  }                                                                                                                   // 5114
                                                                                                                      // 5115
  return r;                                                                                                           // 5116
};                                                                                                                    // 5117
                                                                                                                      // 5118
Red.prototype.invm = function invm(a) {                                                                               // 5119
  var inv = a._egcd(new BN(1), this.m);                                                                               // 5120
  if (inv.sign) {                                                                                                     // 5121
    inv.sign = false;                                                                                                 // 5122
    return this.imod(inv).redNeg();                                                                                   // 5123
  } else {                                                                                                            // 5124
    return this.imod(inv);                                                                                            // 5125
  }                                                                                                                   // 5126
};                                                                                                                    // 5127
                                                                                                                      // 5128
Red.prototype.pow = function pow(a, num) {                                                                            // 5129
  var w = [];                                                                                                         // 5130
  var q = num.clone();                                                                                                // 5131
  while (q.cmpn(0) !== 0) {                                                                                           // 5132
    w.push(q.andln(1));                                                                                               // 5133
    q.ishrn(1);                                                                                                       // 5134
  }                                                                                                                   // 5135
                                                                                                                      // 5136
  // Skip leading zeroes                                                                                              // 5137
  var res = a;                                                                                                        // 5138
  for (var i = 0; i < w.length; i++, res = this.sqr(res))                                                             // 5139
    if (w[i] !== 0)                                                                                                   // 5140
      break;                                                                                                          // 5141
                                                                                                                      // 5142
  if (++i < w.length) {                                                                                               // 5143
    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {                                                 // 5144
      if (w[i] === 0)                                                                                                 // 5145
        continue;                                                                                                     // 5146
      res = this.mul(res, q);                                                                                         // 5147
    }                                                                                                                 // 5148
  }                                                                                                                   // 5149
                                                                                                                      // 5150
  return res;                                                                                                         // 5151
};                                                                                                                    // 5152
                                                                                                                      // 5153
Red.prototype.convertTo = function convertTo(num) {                                                                   // 5154
  return num.clone();                                                                                                 // 5155
};                                                                                                                    // 5156
                                                                                                                      // 5157
Red.prototype.convertFrom = function convertFrom(num) {                                                               // 5158
  var res = num.clone();                                                                                              // 5159
  res.red = null;                                                                                                     // 5160
  return res;                                                                                                         // 5161
};                                                                                                                    // 5162
                                                                                                                      // 5163
//                                                                                                                    // 5164
// Montgomery method engine                                                                                           // 5165
//                                                                                                                    // 5166
                                                                                                                      // 5167
BN.mont = function mont(num) {                                                                                        // 5168
  return new Mont(num);                                                                                               // 5169
};                                                                                                                    // 5170
                                                                                                                      // 5171
function Mont(m) {                                                                                                    // 5172
  Red.call(this, m);                                                                                                  // 5173
                                                                                                                      // 5174
  this.shift = this.m.bitLength();                                                                                    // 5175
  if (this.shift % 26 !== 0)                                                                                          // 5176
    this.shift += 26 - (this.shift % 26);                                                                             // 5177
  this.r = new BN(1).ishln(this.shift);                                                                               // 5178
  this.r2 = this.imod(this.r.sqr());                                                                                  // 5179
  this.rinv = this.r.invm(this.m);                                                                                    // 5180
                                                                                                                      // 5181
  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);                                                             // 5182
  this.minv.sign = true;                                                                                              // 5183
  this.minv = this.minv.mod(this.r);                                                                                  // 5184
}                                                                                                                     // 5185
inherits(Mont, Red);                                                                                                  // 5186
                                                                                                                      // 5187
Mont.prototype.convertTo = function convertTo(num) {                                                                  // 5188
  return this.imod(num.shln(this.shift));                                                                             // 5189
};                                                                                                                    // 5190
                                                                                                                      // 5191
Mont.prototype.convertFrom = function convertFrom(num) {                                                              // 5192
  var r = this.imod(num.mul(this.rinv));                                                                              // 5193
  r.red = null;                                                                                                       // 5194
  return r;                                                                                                           // 5195
};                                                                                                                    // 5196
                                                                                                                      // 5197
Mont.prototype.imul = function imul(a, b) {                                                                           // 5198
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {                                                                           // 5199
    a.words[0] = 0;                                                                                                   // 5200
    a.length = 1;                                                                                                     // 5201
    return a;                                                                                                         // 5202
  }                                                                                                                   // 5203
                                                                                                                      // 5204
  var t = a.imul(b);                                                                                                  // 5205
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);                                          // 5206
  var u = t.isub(c).ishrn(this.shift);                                                                                // 5207
  var res = u;                                                                                                        // 5208
  if (u.cmp(this.m) >= 0)                                                                                             // 5209
    res = u.isub(this.m);                                                                                             // 5210
  else if (u.cmpn(0) < 0)                                                                                             // 5211
    res = u.iadd(this.m);                                                                                             // 5212
                                                                                                                      // 5213
  return res._forceRed(this);                                                                                         // 5214
};                                                                                                                    // 5215
                                                                                                                      // 5216
Mont.prototype.mul = function mul(a, b) {                                                                             // 5217
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)                                                                             // 5218
    return new BN(0)._forceRed(this);                                                                                 // 5219
                                                                                                                      // 5220
  var t = a.mul(b);                                                                                                   // 5221
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);                                          // 5222
  var u = t.isub(c).ishrn(this.shift);                                                                                // 5223
  var res = u;                                                                                                        // 5224
  if (u.cmp(this.m) >= 0)                                                                                             // 5225
    res = u.isub(this.m);                                                                                             // 5226
  else if (u.cmpn(0) < 0)                                                                                             // 5227
    res = u.iadd(this.m);                                                                                             // 5228
                                                                                                                      // 5229
  return res._forceRed(this);                                                                                         // 5230
};                                                                                                                    // 5231
                                                                                                                      // 5232
Mont.prototype.invm = function invm(a) {                                                                              // 5233
  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R                                                                   // 5234
  var res = this.imod(a.invm(this.m).mul(this.r2));                                                                   // 5235
  return res._forceRed(this);                                                                                         // 5236
};                                                                                                                    // 5237
                                                                                                                      // 5238
})(typeof module === 'undefined' || module, this);                                                                    // 5239
                                                                                                                      // 5240
},{}],29:[function(require,module,exports){                                                                           // 5241
(function (Buffer){                                                                                                   // 5242
var bn = require('bn.js');                                                                                            // 5243
var randomBytes = require('randombytes');                                                                             // 5244
module.exports = crt;                                                                                                 // 5245
function blind(priv) {                                                                                                // 5246
  var r = getr(priv);                                                                                                 // 5247
  var blinder = r.toRed(bn.mont(priv.modulus))                                                                        // 5248
  .redPow(new bn(priv.publicExponent)).fromRed();                                                                     // 5249
  return {                                                                                                            // 5250
    blinder: blinder,                                                                                                 // 5251
    unblinder:r.invm(priv.modulus)                                                                                    // 5252
  };                                                                                                                  // 5253
}                                                                                                                     // 5254
function crt(msg, priv) {                                                                                             // 5255
  var blinds = blind(priv);                                                                                           // 5256
  var len = priv.modulus.byteLength();                                                                                // 5257
  var mod = bn.mont(priv.modulus);                                                                                    // 5258
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);                                                    // 5259
  var c1 = blinded.toRed(bn.mont(priv.prime1));                                                                       // 5260
  var c2 = blinded.toRed(bn.mont(priv.prime2));                                                                       // 5261
  var qinv = priv.coefficient;                                                                                        // 5262
  var p = priv.prime1;                                                                                                // 5263
  var q = priv.prime2;                                                                                                // 5264
  var m1 = c1.redPow(priv.exponent1);                                                                                 // 5265
  var m2 = c2.redPow(priv.exponent2);                                                                                 // 5266
  m1 = m1.fromRed();                                                                                                  // 5267
  m2 = m2.fromRed();                                                                                                  // 5268
  var h = m1.isub(m2).imul(qinv).mod(p);                                                                              // 5269
  h.imul(q);                                                                                                          // 5270
  m2.iadd(h);                                                                                                         // 5271
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());                                        // 5272
  if (out.length < len) {                                                                                             // 5273
    var prefix = new Buffer(len - out.length);                                                                        // 5274
    prefix.fill(0);                                                                                                   // 5275
    out = Buffer.concat([prefix, out], len);                                                                          // 5276
  }                                                                                                                   // 5277
  return out;                                                                                                         // 5278
}                                                                                                                     // 5279
crt.getr = getr;                                                                                                      // 5280
function getr(priv) {                                                                                                 // 5281
  var len = priv.modulus.byteLength();                                                                                // 5282
  var r = new bn(randomBytes(len));                                                                                   // 5283
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {                                   // 5284
    r = new bn(randomBytes(len));                                                                                     // 5285
  }                                                                                                                   // 5286
  return r;                                                                                                           // 5287
}                                                                                                                     // 5288
}).call(this,require("buffer").Buffer)                                                                                // 5289
                                                                                                                      // 5290
},{"bn.js":28,"buffer":2,"randombytes":142}],30:[function(require,module,exports){                                    // 5291
var elliptic = exports;                                                                                               // 5292
                                                                                                                      // 5293
elliptic.version = require('../package.json').version;                                                                // 5294
elliptic.utils = require('./elliptic/utils');                                                                         // 5295
elliptic.rand = require('brorand');                                                                                   // 5296
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');                                                                  // 5297
elliptic.curve = require('./elliptic/curve');                                                                         // 5298
elliptic.curves = require('./elliptic/curves');                                                                       // 5299
                                                                                                                      // 5300
// Protocols                                                                                                          // 5301
elliptic.ec = require('./elliptic/ec');                                                                               // 5302
                                                                                                                      // 5303
},{"../package.json":49,"./elliptic/curve":33,"./elliptic/curves":36,"./elliptic/ec":37,"./elliptic/hmac-drbg":40,"./elliptic/utils":41,"brorand":42}],31:[function(require,module,exports){
var bn = require('bn.js');                                                                                            // 5305
var elliptic = require('../../elliptic');                                                                             // 5306
                                                                                                                      // 5307
var getNAF = elliptic.utils.getNAF;                                                                                   // 5308
var getJSF = elliptic.utils.getJSF;                                                                                   // 5309
var assert = elliptic.utils.assert;                                                                                   // 5310
                                                                                                                      // 5311
function BaseCurve(type, conf) {                                                                                      // 5312
  this.type = type;                                                                                                   // 5313
  this.p = new bn(conf.p, 16);                                                                                        // 5314
                                                                                                                      // 5315
  // Use Montgomery, when there is no fast reduction for the prime                                                    // 5316
  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);                                                       // 5317
                                                                                                                      // 5318
  // Useful for many curves                                                                                           // 5319
  this.zero = new bn(0).toRed(this.red);                                                                              // 5320
  this.one = new bn(1).toRed(this.red);                                                                               // 5321
  this.two = new bn(2).toRed(this.red);                                                                               // 5322
                                                                                                                      // 5323
  // Curve configuration, optional                                                                                    // 5324
  this.n = conf.n && new bn(conf.n, 16);                                                                              // 5325
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);                                                           // 5326
                                                                                                                      // 5327
  // Temporary arrays                                                                                                 // 5328
  this._wnafT1 = new Array(4);                                                                                        // 5329
  this._wnafT2 = new Array(4);                                                                                        // 5330
  this._wnafT3 = new Array(4);                                                                                        // 5331
  this._wnafT4 = new Array(4);                                                                                        // 5332
}                                                                                                                     // 5333
module.exports = BaseCurve;                                                                                           // 5334
                                                                                                                      // 5335
BaseCurve.prototype.point = function point() {                                                                        // 5336
  throw new Error('Not implemented');                                                                                 // 5337
};                                                                                                                    // 5338
                                                                                                                      // 5339
BaseCurve.prototype.validate = function validate(point) {                                                             // 5340
  throw new Error('Not implemented');                                                                                 // 5341
};                                                                                                                    // 5342
                                                                                                                      // 5343
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {                                                      // 5344
  var doubles = p._getDoubles();                                                                                      // 5345
                                                                                                                      // 5346
  var naf = getNAF(k, 1);                                                                                             // 5347
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);                                               // 5348
  I /= 3;                                                                                                             // 5349
                                                                                                                      // 5350
  // Translate into more windowed form                                                                                // 5351
  var repr = [];                                                                                                      // 5352
  for (var j = 0; j < naf.length; j += doubles.step) {                                                                // 5353
    var nafW = 0;                                                                                                     // 5354
    for (var k = j + doubles.step - 1; k >= j; k--)                                                                   // 5355
      nafW = (nafW << 1) + naf[k];                                                                                    // 5356
    repr.push(nafW);                                                                                                  // 5357
  }                                                                                                                   // 5358
                                                                                                                      // 5359
  var a = this.jpoint(null, null, null);                                                                              // 5360
  var b = this.jpoint(null, null, null);                                                                              // 5361
  for (var i = I; i > 0; i--) {                                                                                       // 5362
    for (var j = 0; j < repr.length; j++) {                                                                           // 5363
      var nafW = repr[j];                                                                                             // 5364
      if (nafW === i)                                                                                                 // 5365
        b = b.mixedAdd(doubles.points[j]);                                                                            // 5366
      else if (nafW === -i)                                                                                           // 5367
        b = b.mixedAdd(doubles.points[j].neg());                                                                      // 5368
    }                                                                                                                 // 5369
    a = a.add(b);                                                                                                     // 5370
  }                                                                                                                   // 5371
  return a.toP();                                                                                                     // 5372
};                                                                                                                    // 5373
                                                                                                                      // 5374
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {                                                              // 5375
  var w = 4;                                                                                                          // 5376
                                                                                                                      // 5377
  // Precompute window                                                                                                // 5378
  var nafPoints = p._getNAFPoints(w);                                                                                 // 5379
  w = nafPoints.wnd;                                                                                                  // 5380
  var wnd = nafPoints.points;                                                                                         // 5381
                                                                                                                      // 5382
  // Get NAF form                                                                                                     // 5383
  var naf = getNAF(k, w);                                                                                             // 5384
                                                                                                                      // 5385
  // Add `this`*(N+1) for every w-NAF index                                                                           // 5386
  var acc = this.jpoint(null, null, null);                                                                            // 5387
  for (var i = naf.length - 1; i >= 0; i--) {                                                                         // 5388
    // Count zeroes                                                                                                   // 5389
    for (var k = 0; i >= 0 && naf[i] === 0; i--)                                                                      // 5390
      k++;                                                                                                            // 5391
    if (i >= 0)                                                                                                       // 5392
      k++;                                                                                                            // 5393
    acc = acc.dblp(k);                                                                                                // 5394
                                                                                                                      // 5395
    if (i < 0)                                                                                                        // 5396
      break;                                                                                                          // 5397
    var z = naf[i];                                                                                                   // 5398
    assert(z !== 0);                                                                                                  // 5399
    if (p.type === 'affine') {                                                                                        // 5400
      // J +- P                                                                                                       // 5401
      if (z > 0)                                                                                                      // 5402
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);                                                                        // 5403
      else                                                                                                            // 5404
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());                                                                 // 5405
    } else {                                                                                                          // 5406
      // J +- J                                                                                                       // 5407
      if (z > 0)                                                                                                      // 5408
        acc = acc.add(wnd[(z - 1) >> 1]);                                                                             // 5409
      else                                                                                                            // 5410
        acc = acc.add(wnd[(-z - 1) >> 1].neg());                                                                      // 5411
    }                                                                                                                 // 5412
  }                                                                                                                   // 5413
  return p.type === 'affine' ? acc.toP() : acc;                                                                       // 5414
};                                                                                                                    // 5415
                                                                                                                      // 5416
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,                                                          // 5417
                                                       points,                                                        // 5418
                                                       coeffs,                                                        // 5419
                                                       len) {                                                         // 5420
  var wndWidth = this._wnafT1;                                                                                        // 5421
  var wnd = this._wnafT2;                                                                                             // 5422
  var naf = this._wnafT3;                                                                                             // 5423
                                                                                                                      // 5424
  // Fill all arrays                                                                                                  // 5425
  var max = 0;                                                                                                        // 5426
  for (var i = 0; i < len; i++) {                                                                                     // 5427
    var p = points[i];                                                                                                // 5428
    var nafPoints = p._getNAFPoints(defW);                                                                            // 5429
    wndWidth[i] = nafPoints.wnd;                                                                                      // 5430
    wnd[i] = nafPoints.points;                                                                                        // 5431
  }                                                                                                                   // 5432
                                                                                                                      // 5433
  // Comb small window NAFs                                                                                           // 5434
  for (var i = len - 1; i >= 1; i -= 2) {                                                                             // 5435
    var a = i - 1;                                                                                                    // 5436
    var b = i;                                                                                                        // 5437
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {                                                                     // 5438
      naf[a] = getNAF(coeffs[a], wndWidth[a]);                                                                        // 5439
      naf[b] = getNAF(coeffs[b], wndWidth[b]);                                                                        // 5440
      max = Math.max(naf[a].length, max);                                                                             // 5441
      max = Math.max(naf[b].length, max);                                                                             // 5442
      continue;                                                                                                       // 5443
    }                                                                                                                 // 5444
                                                                                                                      // 5445
    var comb = [                                                                                                      // 5446
      points[a], /* 1 */                                                                                              // 5447
      null, /* 3 */                                                                                                   // 5448
      null, /* 5 */                                                                                                   // 5449
      points[b] /* 7 */                                                                                               // 5450
    ];                                                                                                                // 5451
                                                                                                                      // 5452
    // Try to avoid Projective points, if possible                                                                    // 5453
    if (points[a].y.cmp(points[b].y) === 0) {                                                                         // 5454
      comb[1] = points[a].add(points[b]);                                                                             // 5455
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());                                                            // 5456
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {                                                         // 5457
      comb[1] = points[a].toJ().mixedAdd(points[b]);                                                                  // 5458
      comb[2] = points[a].add(points[b].neg());                                                                       // 5459
    } else {                                                                                                          // 5460
      comb[1] = points[a].toJ().mixedAdd(points[b]);                                                                  // 5461
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());                                                            // 5462
    }                                                                                                                 // 5463
                                                                                                                      // 5464
    var index = [                                                                                                     // 5465
      -3, /* -1 -1 */                                                                                                 // 5466
      -1, /* -1 0 */                                                                                                  // 5467
      -5, /* -1 1 */                                                                                                  // 5468
      -7, /* 0 -1 */                                                                                                  // 5469
      0, /* 0 0 */                                                                                                    // 5470
      7, /* 0 1 */                                                                                                    // 5471
      5, /* 1 -1 */                                                                                                   // 5472
      1, /* 1 0 */                                                                                                    // 5473
      3  /* 1 1 */                                                                                                    // 5474
    ];                                                                                                                // 5475
                                                                                                                      // 5476
    var jsf = getJSF(coeffs[a], coeffs[b]);                                                                           // 5477
    max = Math.max(jsf[0].length, max);                                                                               // 5478
    naf[a] = new Array(max);                                                                                          // 5479
    naf[b] = new Array(max);                                                                                          // 5480
    for (var j = 0; j < max; j++) {                                                                                   // 5481
      var ja = jsf[0][j] | 0;                                                                                         // 5482
      var jb = jsf[1][j] | 0;                                                                                         // 5483
                                                                                                                      // 5484
      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];                                                                     // 5485
      naf[b][j] = 0;                                                                                                  // 5486
      wnd[a] = comb;                                                                                                  // 5487
    }                                                                                                                 // 5488
  }                                                                                                                   // 5489
                                                                                                                      // 5490
  var acc = this.jpoint(null, null, null);                                                                            // 5491
  var tmp = this._wnafT4;                                                                                             // 5492
  for (var i = max; i >= 0; i--) {                                                                                    // 5493
    var k = 0;                                                                                                        // 5494
                                                                                                                      // 5495
    while (i >= 0) {                                                                                                  // 5496
      var zero = true;                                                                                                // 5497
      for (var j = 0; j < len; j++) {                                                                                 // 5498
        tmp[j] = naf[j][i] | 0;                                                                                       // 5499
        if (tmp[j] !== 0)                                                                                             // 5500
          zero = false;                                                                                               // 5501
      }                                                                                                               // 5502
      if (!zero)                                                                                                      // 5503
        break;                                                                                                        // 5504
      k++;                                                                                                            // 5505
      i--;                                                                                                            // 5506
    }                                                                                                                 // 5507
    if (i >= 0)                                                                                                       // 5508
      k++;                                                                                                            // 5509
    acc = acc.dblp(k);                                                                                                // 5510
    if (i < 0)                                                                                                        // 5511
      break;                                                                                                          // 5512
                                                                                                                      // 5513
    for (var j = 0; j < len; j++) {                                                                                   // 5514
      var z = tmp[j];                                                                                                 // 5515
      var p;                                                                                                          // 5516
      if (z === 0)                                                                                                    // 5517
        continue;                                                                                                     // 5518
      else if (z > 0)                                                                                                 // 5519
        p = wnd[j][(z - 1) >> 1];                                                                                     // 5520
      else if (z < 0)                                                                                                 // 5521
        p = wnd[j][(-z - 1) >> 1].neg();                                                                              // 5522
                                                                                                                      // 5523
      if (p.type === 'affine')                                                                                        // 5524
        acc = acc.mixedAdd(p);                                                                                        // 5525
      else                                                                                                            // 5526
        acc = acc.add(p);                                                                                             // 5527
    }                                                                                                                 // 5528
  }                                                                                                                   // 5529
  // Zeroify references                                                                                               // 5530
  for (var i = 0; i < len; i++)                                                                                       // 5531
    wnd[i] = null;                                                                                                    // 5532
  return acc.toP();                                                                                                   // 5533
};                                                                                                                    // 5534
                                                                                                                      // 5535
BaseCurve.BasePoint = BasePoint;                                                                                      // 5536
                                                                                                                      // 5537
function BasePoint(curve, type) {                                                                                     // 5538
  this.curve = curve;                                                                                                 // 5539
  this.type = type;                                                                                                   // 5540
  this.precomputed = null;                                                                                            // 5541
}                                                                                                                     // 5542
                                                                                                                      // 5543
BasePoint.prototype.validate = function validate() {                                                                  // 5544
  return this.curve.validate(this);                                                                                   // 5545
};                                                                                                                    // 5546
                                                                                                                      // 5547
BasePoint.prototype.precompute = function precompute(power, _beta) {                                                  // 5548
  if (this.precomputed)                                                                                               // 5549
    return this;                                                                                                      // 5550
                                                                                                                      // 5551
  var precomputed = {                                                                                                 // 5552
    doubles: null,                                                                                                    // 5553
    naf: null,                                                                                                        // 5554
    beta: null                                                                                                        // 5555
  };                                                                                                                  // 5556
  precomputed.naf = this._getNAFPoints(8);                                                                            // 5557
  precomputed.doubles = this._getDoubles(4, power);                                                                   // 5558
  precomputed.beta = this._getBeta();                                                                                 // 5559
  this.precomputed = precomputed;                                                                                     // 5560
                                                                                                                      // 5561
  return this;                                                                                                        // 5562
};                                                                                                                    // 5563
                                                                                                                      // 5564
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {                                                 // 5565
  if (this.precomputed && this.precomputed.doubles)                                                                   // 5566
    return this.precomputed.doubles;                                                                                  // 5567
                                                                                                                      // 5568
  var doubles = [ this ];                                                                                             // 5569
  var acc = this;                                                                                                     // 5570
  for (var i = 0; i < power; i += step) {                                                                             // 5571
    for (var j = 0; j < step; j++)                                                                                    // 5572
      acc = acc.dbl();                                                                                                // 5573
    doubles.push(acc);                                                                                                // 5574
  }                                                                                                                   // 5575
  return {                                                                                                            // 5576
    step: step,                                                                                                       // 5577
    points: doubles                                                                                                   // 5578
  };                                                                                                                  // 5579
};                                                                                                                    // 5580
                                                                                                                      // 5581
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {                                                     // 5582
  if (this.precomputed && this.precomputed.naf)                                                                       // 5583
    return this.precomputed.naf;                                                                                      // 5584
                                                                                                                      // 5585
  var res = [ this ];                                                                                                 // 5586
  var max = (1 << wnd) - 1;                                                                                           // 5587
  var dbl = max === 1 ? null : this.dbl();                                                                            // 5588
  for (var i = 1; i < max; i++)                                                                                       // 5589
    res[i] = res[i - 1].add(dbl);                                                                                     // 5590
  return {                                                                                                            // 5591
    wnd: wnd,                                                                                                         // 5592
    points: res                                                                                                       // 5593
  };                                                                                                                  // 5594
};                                                                                                                    // 5595
                                                                                                                      // 5596
BasePoint.prototype._getBeta = function _getBeta() {                                                                  // 5597
  return null;                                                                                                        // 5598
};                                                                                                                    // 5599
                                                                                                                      // 5600
BasePoint.prototype.dblp = function dblp(k) {                                                                         // 5601
  var r = this;                                                                                                       // 5602
  for (var i = 0; i < k; i++)                                                                                         // 5603
    r = r.dbl();                                                                                                      // 5604
  return r;                                                                                                           // 5605
};                                                                                                                    // 5606
                                                                                                                      // 5607
},{"../../elliptic":30,"bn.js":28}],32:[function(require,module,exports){                                             // 5608
var curve = require('../curve');                                                                                      // 5609
var elliptic = require('../../elliptic');                                                                             // 5610
var bn = require('bn.js');                                                                                            // 5611
var inherits = require('inherits');                                                                                   // 5612
var Base = curve.base;                                                                                                // 5613
                                                                                                                      // 5614
var getNAF = elliptic.utils.getNAF;                                                                                   // 5615
var assert = elliptic.utils.assert;                                                                                   // 5616
                                                                                                                      // 5617
function EdwardsCurve(conf) {                                                                                         // 5618
  // NOTE: Important as we are creating point in Base.call()                                                          // 5619
  this.twisted = conf.a != 1;                                                                                         // 5620
  this.mOneA = this.twisted && conf.a == -1;                                                                          // 5621
  this.extended = this.mOneA;                                                                                         // 5622
                                                                                                                      // 5623
  Base.call(this, 'mont', conf);                                                                                      // 5624
                                                                                                                      // 5625
  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);                                                        // 5626
  this.c = new bn(conf.c, 16).toRed(this.red);                                                                        // 5627
  this.c2 = this.c.redSqr();                                                                                          // 5628
  this.d = new bn(conf.d, 16).toRed(this.red);                                                                        // 5629
  this.dd = this.d.redAdd(this.d);                                                                                    // 5630
                                                                                                                      // 5631
  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);                                                            // 5632
  this.oneC = conf.c == 1;                                                                                            // 5633
}                                                                                                                     // 5634
inherits(EdwardsCurve, Base);                                                                                         // 5635
module.exports = EdwardsCurve;                                                                                        // 5636
                                                                                                                      // 5637
EdwardsCurve.prototype._mulA = function _mulA(num) {                                                                  // 5638
  if (this.mOneA)                                                                                                     // 5639
    return num.redNeg();                                                                                              // 5640
  else                                                                                                                // 5641
    return this.a.redMul(num);                                                                                        // 5642
};                                                                                                                    // 5643
                                                                                                                      // 5644
EdwardsCurve.prototype._mulC = function _mulC(num) {                                                                  // 5645
  if (this.oneC)                                                                                                      // 5646
    return num;                                                                                                       // 5647
  else                                                                                                                // 5648
    return this.c.redMul(num);                                                                                        // 5649
};                                                                                                                    // 5650
                                                                                                                      // 5651
EdwardsCurve.prototype.point = function point(x, y, z, t) {                                                           // 5652
  return new Point(this, x, y, z, t);                                                                                 // 5653
};                                                                                                                    // 5654
                                                                                                                      // 5655
// Just for compatibility with Short curve                                                                            // 5656
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {                                                         // 5657
  return this.point(x, y, z, t);                                                                                      // 5658
};                                                                                                                    // 5659
                                                                                                                      // 5660
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {                                                  // 5661
  return Point.fromJSON(this, obj);                                                                                   // 5662
};                                                                                                                    // 5663
                                                                                                                      // 5664
EdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {                                                     // 5665
  x = new bn(x, 16);                                                                                                  // 5666
  if (!x.red)                                                                                                         // 5667
    x = x.toRed(this.red);                                                                                            // 5668
                                                                                                                      // 5669
  var x2 = x.redSqr();                                                                                                // 5670
  var rhs = this.c2.redSub(this.a.redMul(x2));                                                                        // 5671
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));                                                       // 5672
                                                                                                                      // 5673
  var y = rhs.redMul(lhs.redInvm()).redSqrt();                                                                        // 5674
  var isOdd = y.fromRed().isOdd();                                                                                    // 5675
  if (odd && !isOdd || !odd && isOdd)                                                                                 // 5676
    y = y.redNeg();                                                                                                   // 5677
                                                                                                                      // 5678
  return this.point(x, y, curve.one);                                                                                 // 5679
};                                                                                                                    // 5680
                                                                                                                      // 5681
EdwardsCurve.prototype.validate = function validate(point) {                                                          // 5682
  if (point.isInfinity())                                                                                             // 5683
    return true;                                                                                                      // 5684
                                                                                                                      // 5685
  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)                                                                 // 5686
  point.normalize();                                                                                                  // 5687
                                                                                                                      // 5688
  var x2 = point.x.redSqr();                                                                                          // 5689
  var y2 = point.y.redSqr();                                                                                          // 5690
  var lhs = x2.redMul(this.a).redAdd(y2);                                                                             // 5691
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));                                            // 5692
                                                                                                                      // 5693
  return lhs.cmp(rhs) === 0;                                                                                          // 5694
};                                                                                                                    // 5695
                                                                                                                      // 5696
function Point(curve, x, y, z, t) {                                                                                   // 5697
  Base.BasePoint.call(this, curve, 'projective');                                                                     // 5698
  if (x === null && y === null && z === null) {                                                                       // 5699
    this.x = this.curve.zero;                                                                                         // 5700
    this.y = this.curve.one;                                                                                          // 5701
    this.z = this.curve.one;                                                                                          // 5702
    this.t = this.curve.zero;                                                                                         // 5703
    this.zOne = true;                                                                                                 // 5704
  } else {                                                                                                            // 5705
    this.x = new bn(x, 16);                                                                                           // 5706
    this.y = new bn(y, 16);                                                                                           // 5707
    this.z = z ? new bn(z, 16) : this.curve.one;                                                                      // 5708
    this.t = t && new bn(t, 16);                                                                                      // 5709
    if (!this.x.red)                                                                                                  // 5710
      this.x = this.x.toRed(this.curve.red);                                                                          // 5711
    if (!this.y.red)                                                                                                  // 5712
      this.y = this.y.toRed(this.curve.red);                                                                          // 5713
    if (!this.z.red)                                                                                                  // 5714
      this.z = this.z.toRed(this.curve.red);                                                                          // 5715
    if (this.t && !this.t.red)                                                                                        // 5716
      this.t = this.t.toRed(this.curve.red);                                                                          // 5717
    this.zOne = this.z === this.curve.one;                                                                            // 5718
                                                                                                                      // 5719
    // Use extended coordinates                                                                                       // 5720
    if (this.curve.extended && !this.t) {                                                                             // 5721
      this.t = this.x.redMul(this.y);                                                                                 // 5722
      if (!this.zOne)                                                                                                 // 5723
        this.t = this.t.redMul(this.z.redInvm());                                                                     // 5724
    }                                                                                                                 // 5725
  }                                                                                                                   // 5726
}                                                                                                                     // 5727
inherits(Point, Base.BasePoint);                                                                                      // 5728
                                                                                                                      // 5729
Point.fromJSON = function fromJSON(curve, obj) {                                                                      // 5730
  return new Point(curve, obj[0], obj[1], obj[2]);                                                                    // 5731
};                                                                                                                    // 5732
                                                                                                                      // 5733
Point.prototype.inspect = function inspect() {                                                                        // 5734
  if (this.isInfinity())                                                                                              // 5735
    return '<EC Point Infinity>';                                                                                     // 5736
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +                                                         // 5737
      ' y: ' + this.y.fromRed().toString(16, 2) +                                                                     // 5738
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';                                                                // 5739
};                                                                                                                    // 5740
                                                                                                                      // 5741
Point.prototype.isInfinity = function isInfinity() {                                                                  // 5742
  // XXX This code assumes that zero is always zero in red                                                            // 5743
  return this.x.cmpn(0) === 0 &&                                                                                      // 5744
         this.y.cmp(this.z) === 0;                                                                                    // 5745
};                                                                                                                    // 5746
                                                                                                                      // 5747
Point.prototype._extDbl = function _extDbl() {                                                                        // 5748
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#doubling-dbl-2008-hwcd                             // 5749
  // 4M + 4S                                                                                                          // 5750
                                                                                                                      // 5751
  // A = X1^2                                                                                                         // 5752
  var a = this.x.redSqr();                                                                                            // 5753
  // B = Y1^2                                                                                                         // 5754
  var b = this.y.redSqr();                                                                                            // 5755
  // C = 2 * Z1^2                                                                                                     // 5756
  var c = this.z.redSqr();                                                                                            // 5757
  c = c.redIAdd(c);                                                                                                   // 5758
  // D = a * A                                                                                                        // 5759
  var d = this.curve._mulA(a);                                                                                        // 5760
  // E = (X1 + Y1)^2 - A - B                                                                                          // 5761
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);                                                       // 5762
  // G = D + B                                                                                                        // 5763
  var g = d.redAdd(b);                                                                                                // 5764
  // F = G - C                                                                                                        // 5765
  var f = g.redSub(c);                                                                                                // 5766
  // H = D - B                                                                                                        // 5767
  var h = d.redSub(b);                                                                                                // 5768
  // X3 = E * F                                                                                                       // 5769
  var nx = e.redMul(f);                                                                                               // 5770
  // Y3 = G * H                                                                                                       // 5771
  var ny = g.redMul(h);                                                                                               // 5772
  // T3 = E * H                                                                                                       // 5773
  var nt = e.redMul(h);                                                                                               // 5774
  // Z3 = F * G                                                                                                       // 5775
  var nz = f.redMul(g);                                                                                               // 5776
  return this.curve.point(nx, ny, nz, nt);                                                                            // 5777
};                                                                                                                    // 5778
                                                                                                                      // 5779
Point.prototype._projDbl = function _projDbl() {                                                                      // 5780
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#doubling-dbl-2008-bbjlp                            // 5781
  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#doubling-dbl-2007-bl                               // 5782
  // and others                                                                                                       // 5783
  // Generally 3M + 4S or 2M + 4S                                                                                     // 5784
                                                                                                                      // 5785
  // B = (X1 + Y1)^2                                                                                                  // 5786
  var b = this.x.redAdd(this.y).redSqr();                                                                             // 5787
  // C = X1^2                                                                                                         // 5788
  var c = this.x.redSqr();                                                                                            // 5789
  // D = Y1^2                                                                                                         // 5790
  var d = this.y.redSqr();                                                                                            // 5791
                                                                                                                      // 5792
  if (this.curve.twisted) {                                                                                           // 5793
    // E = a * C                                                                                                      // 5794
    var e = this.curve._mulA(c);                                                                                      // 5795
    // F = E + D                                                                                                      // 5796
    var f = e.redAdd(d);                                                                                              // 5797
    if (this.zOne) {                                                                                                  // 5798
      // X3 = (B - C - D) * (F - 2)                                                                                   // 5799
      var nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));                                                // 5800
      // Y3 = F * (E - D)                                                                                             // 5801
      var ny = f.redMul(e.redSub(d));                                                                                 // 5802
      // Z3 = F^2 - 2 * F                                                                                             // 5803
      var nz = f.redSqr().redSub(f).redSub(f);                                                                        // 5804
    } else {                                                                                                          // 5805
      // H = Z1^2                                                                                                     // 5806
      var h = this.z.redSqr();                                                                                        // 5807
      // J = F - 2 * H                                                                                                // 5808
      var j = f.redSub(h).redISub(h);                                                                                 // 5809
      // X3 = (B-C-D)*J                                                                                               // 5810
      var nx = b.redSub(c).redISub(d).redMul(j);                                                                      // 5811
      // Y3 = F * (E - D)                                                                                             // 5812
      var ny = f.redMul(e.redSub(d));                                                                                 // 5813
      // Z3 = F * J                                                                                                   // 5814
      var nz = f.redMul(j);                                                                                           // 5815
    }                                                                                                                 // 5816
  } else {                                                                                                            // 5817
    // E = C + D                                                                                                      // 5818
    var e = c.redAdd(d);                                                                                              // 5819
    // H = (c * Z1)^2                                                                                                 // 5820
    var h = this.curve._mulC(redMul(this.z)).redSqr();                                                                // 5821
    // J = E - 2 * H                                                                                                  // 5822
    var j = e.redSub(h).redSub(h);                                                                                    // 5823
    // X3 = c * (B - E) * J                                                                                           // 5824
    var nx = this.curve._mulC(b.redISub(e)).redMul(j);                                                                // 5825
    // Y3 = c * E * (C - D)                                                                                           // 5826
    var ny = this.curve._mulC(e).redMul(c.redISub(d));                                                                // 5827
    // Z3 = E * J                                                                                                     // 5828
    var nz = e.redMul(j);                                                                                             // 5829
  }                                                                                                                   // 5830
  return this.curve.point(nx, ny, nz);                                                                                // 5831
};                                                                                                                    // 5832
                                                                                                                      // 5833
Point.prototype.dbl = function dbl() {                                                                                // 5834
  if (this.isInfinity())                                                                                              // 5835
    return this;                                                                                                      // 5836
                                                                                                                      // 5837
  // Double in extended coordinates                                                                                   // 5838
  if (this.curve.extended)                                                                                            // 5839
    return this._extDbl();                                                                                            // 5840
  else                                                                                                                // 5841
    return this._projDbl();                                                                                           // 5842
};                                                                                                                    // 5843
                                                                                                                      // 5844
Point.prototype._extAdd = function _extAdd(p) {                                                                       // 5845
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3                           // 5846
  // 8M                                                                                                               // 5847
                                                                                                                      // 5848
  // A = (Y1 - X1) * (Y2 - X2)                                                                                        // 5849
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));                                                              // 5850
  // B = (Y1 + X1) * (Y2 + X2)                                                                                        // 5851
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));                                                              // 5852
  // C = T1 * k * T2                                                                                                  // 5853
  var c = this.t.redMul(this.curve.dd).redMul(p.t);                                                                   // 5854
  // D = Z1 * 2 * Z2                                                                                                  // 5855
  var d = this.z.redMul(p.z.redAdd(p.z));                                                                             // 5856
  // E = B - A                                                                                                        // 5857
  var e = b.redSub(a);                                                                                                // 5858
  // F = D - C                                                                                                        // 5859
  var f = d.redSub(c);                                                                                                // 5860
  // G = D + C                                                                                                        // 5861
  var g = d.redAdd(c);                                                                                                // 5862
  // H = B + A                                                                                                        // 5863
  var h = b.redAdd(a);                                                                                                // 5864
  // X3 = E * F                                                                                                       // 5865
  var nx = e.redMul(f);                                                                                               // 5866
  // Y3 = G * H                                                                                                       // 5867
  var ny = g.redMul(h);                                                                                               // 5868
  // T3 = E * H                                                                                                       // 5869
  var nt = e.redMul(h);                                                                                               // 5870
  // Z3 = F * G                                                                                                       // 5871
  var nz = f.redMul(g);                                                                                               // 5872
  return this.curve.point(nx, ny, nz, nt);                                                                            // 5873
};                                                                                                                    // 5874
                                                                                                                      // 5875
Point.prototype._projAdd = function _projAdd(p) {                                                                     // 5876
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#addition-add-2008-bbjlp                            // 5877
  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#addition-add-2007-bl                               // 5878
  // 10M + 1S                                                                                                         // 5879
                                                                                                                      // 5880
  // A = Z1 * Z2                                                                                                      // 5881
  var a = this.z.redMul(p.z);                                                                                         // 5882
  // B = A^2                                                                                                          // 5883
  var b = a.redSqr();                                                                                                 // 5884
  // C = X1 * X2                                                                                                      // 5885
  var c = this.x.redMul(p.x);                                                                                         // 5886
  // D = Y1 * Y2                                                                                                      // 5887
  var d = this.y.redMul(p.y);                                                                                         // 5888
  // E = d * C * D                                                                                                    // 5889
  var e = this.curve.d.redMul(c).redMul(d);                                                                           // 5890
  // F = B - E                                                                                                        // 5891
  var f = b.redSub(e);                                                                                                // 5892
  // G = B + E                                                                                                        // 5893
  var g = b.redAdd(e);                                                                                                // 5894
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)                                                                     // 5895
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);                                      // 5896
  var nx = a.redMul(f).redMul(tmp);                                                                                   // 5897
  if (this.curve.twisted) {                                                                                           // 5898
    // Y3 = A * G * (D - a * C)                                                                                       // 5899
    var ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));                                                       // 5900
    // Z3 = F * G                                                                                                     // 5901
    var nz = f.redMul(g);                                                                                             // 5902
  } else {                                                                                                            // 5903
    // Y3 = A * G * (D - C)                                                                                           // 5904
    var ny = a.redMul(g).redMul(d.redSub(c));                                                                         // 5905
    // Z3 = c * F * G                                                                                                 // 5906
    var nz = this.curve._mulC(f).redMul(g);                                                                           // 5907
  }                                                                                                                   // 5908
  return this.curve.point(nx, ny, nz);                                                                                // 5909
};                                                                                                                    // 5910
                                                                                                                      // 5911
Point.prototype.add = function add(p) {                                                                               // 5912
  if (this.isInfinity())                                                                                              // 5913
    return p;                                                                                                         // 5914
  if (p.isInfinity())                                                                                                 // 5915
    return this;                                                                                                      // 5916
                                                                                                                      // 5917
  if (this.curve.extended)                                                                                            // 5918
    return this._extAdd(p);                                                                                           // 5919
  else                                                                                                                // 5920
    return this._projAdd(p);                                                                                          // 5921
};                                                                                                                    // 5922
                                                                                                                      // 5923
Point.prototype.mul = function mul(k) {                                                                               // 5924
  if (this.precomputed && this.precomputed.doubles)                                                                   // 5925
    return this.curve._fixedNafMul(this, k);                                                                          // 5926
  else                                                                                                                // 5927
    return this.curve._wnafMul(this, k);                                                                              // 5928
};                                                                                                                    // 5929
                                                                                                                      // 5930
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {                                                                 // 5931
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);                                                       // 5932
};                                                                                                                    // 5933
                                                                                                                      // 5934
Point.prototype.normalize = function normalize() {                                                                    // 5935
  if (this.zOne)                                                                                                      // 5936
    return this;                                                                                                      // 5937
                                                                                                                      // 5938
  // Normalize coordinates                                                                                            // 5939
  var zi = this.z.redInvm();                                                                                          // 5940
  this.x = this.x.redMul(zi);                                                                                         // 5941
  this.y = this.y.redMul(zi);                                                                                         // 5942
  if (this.t)                                                                                                         // 5943
    this.t = this.t.redMul(zi);                                                                                       // 5944
  this.z = this.curve.one;                                                                                            // 5945
  this.zOne = true;                                                                                                   // 5946
  return this;                                                                                                        // 5947
};                                                                                                                    // 5948
                                                                                                                      // 5949
Point.prototype.neg = function neg() {                                                                                // 5950
  return this.curve.point(this.x.redNeg(),                                                                            // 5951
                          this.y,                                                                                     // 5952
                          this.z,                                                                                     // 5953
                          this.t && this.t.redNeg());                                                                 // 5954
};                                                                                                                    // 5955
                                                                                                                      // 5956
Point.prototype.getX = function getX() {                                                                              // 5957
  this.normalize();                                                                                                   // 5958
  return this.x.fromRed();                                                                                            // 5959
};                                                                                                                    // 5960
                                                                                                                      // 5961
Point.prototype.getY = function getY() {                                                                              // 5962
  this.normalize();                                                                                                   // 5963
  return this.y.fromRed();                                                                                            // 5964
};                                                                                                                    // 5965
                                                                                                                      // 5966
// Compatibility with BaseCurve                                                                                       // 5967
Point.prototype.toP = Point.prototype.normalize;                                                                      // 5968
Point.prototype.mixedAdd = Point.prototype.add;                                                                       // 5969
                                                                                                                      // 5970
},{"../../elliptic":30,"../curve":33,"bn.js":28,"inherits":144}],33:[function(require,module,exports){                // 5971
var curve = exports;                                                                                                  // 5972
                                                                                                                      // 5973
curve.base = require('./base');                                                                                       // 5974
curve.short = require('./short');                                                                                     // 5975
curve.mont = require('./mont');                                                                                       // 5976
curve.edwards = require('./edwards');                                                                                 // 5977
                                                                                                                      // 5978
},{"./base":31,"./edwards":32,"./mont":34,"./short":35}],34:[function(require,module,exports){                        // 5979
var curve = require('../curve');                                                                                      // 5980
var elliptic = require('../../elliptic');                                                                             // 5981
var bn = require('bn.js');                                                                                            // 5982
var inherits = require('inherits');                                                                                   // 5983
var Base = curve.base;                                                                                                // 5984
                                                                                                                      // 5985
var getNAF = elliptic.utils.getNAF;                                                                                   // 5986
var assert = elliptic.utils.assert;                                                                                   // 5987
                                                                                                                      // 5988
function MontCurve(conf) {                                                                                            // 5989
  Base.call(this, 'mont', conf);                                                                                      // 5990
                                                                                                                      // 5991
  this.a = new bn(conf.a, 16).toRed(this.red);                                                                        // 5992
  this.b = new bn(conf.b, 16).toRed(this.red);                                                                        // 5993
  this.i4 = new bn(4).toRed(this.red).redInvm();                                                                      // 5994
  this.two = new bn(2).toRed(this.red);                                                                               // 5995
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));                                                                 // 5996
}                                                                                                                     // 5997
inherits(MontCurve, Base);                                                                                            // 5998
module.exports = MontCurve;                                                                                           // 5999
                                                                                                                      // 6000
MontCurve.prototype.point = function point(x, z) {                                                                    // 6001
  return new Point(this, x, z);                                                                                       // 6002
};                                                                                                                    // 6003
                                                                                                                      // 6004
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {                                                     // 6005
  return Point.fromJSON(this, obj);                                                                                   // 6006
}                                                                                                                     // 6007
                                                                                                                      // 6008
MontCurve.prototype.validate = function validate(point) {                                                             // 6009
  var x = point.normalize().x;                                                                                        // 6010
  var x2 = x.redSqr();                                                                                                // 6011
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);                                                         // 6012
  var y = rhs.redSqrt();                                                                                              // 6013
                                                                                                                      // 6014
  return y.redSqr().cmp(rhs) === 0;                                                                                   // 6015
};                                                                                                                    // 6016
                                                                                                                      // 6017
function Point(curve, x, z) {                                                                                         // 6018
  Base.BasePoint.call(this, curve, 'projective');                                                                     // 6019
  if (x === null && z === null) {                                                                                     // 6020
    this.x = this.curve.one;                                                                                          // 6021
    this.z = this.curve.zero;                                                                                         // 6022
  } else {                                                                                                            // 6023
    this.x = new bn(x, 16);                                                                                           // 6024
    this.z = new bn(z, 16);                                                                                           // 6025
    if (!this.x.red)                                                                                                  // 6026
      this.x = this.x.toRed(this.curve.red);                                                                          // 6027
    if (!this.z.red)                                                                                                  // 6028
      this.z = this.z.toRed(this.curve.red);                                                                          // 6029
  }                                                                                                                   // 6030
}                                                                                                                     // 6031
inherits(Point, Base.BasePoint);                                                                                      // 6032
                                                                                                                      // 6033
Point.prototype.precompute = function precompute() {                                                                  // 6034
  // No-op                                                                                                            // 6035
};                                                                                                                    // 6036
                                                                                                                      // 6037
Point.fromJSON = function fromJSON(curve, obj) {                                                                      // 6038
  return new Point(curve, obj[0], obj[1] || curve.one);                                                               // 6039
};                                                                                                                    // 6040
                                                                                                                      // 6041
Point.prototype.inspect = function inspect() {                                                                        // 6042
  if (this.isInfinity())                                                                                              // 6043
    return '<EC Point Infinity>';                                                                                     // 6044
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +                                                         // 6045
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';                                                                // 6046
};                                                                                                                    // 6047
                                                                                                                      // 6048
Point.prototype.isInfinity = function isInfinity() {                                                                  // 6049
  // XXX This code assumes that zero is always zero in red                                                            // 6050
  return this.z.cmpn(0) === 0;                                                                                        // 6051
};                                                                                                                    // 6052
                                                                                                                      // 6053
Point.prototype.dbl = function dbl() {                                                                                // 6054
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3                                      // 6055
  // 2M + 2S + 4A                                                                                                     // 6056
                                                                                                                      // 6057
  // A = X1 + Z1                                                                                                      // 6058
  var a = this.x.redAdd(this.z);                                                                                      // 6059
  // AA = A^2                                                                                                         // 6060
  var aa = a.redSqr();                                                                                                // 6061
  // B = X1 - Z1                                                                                                      // 6062
  var b = this.x.redSub(this.z);                                                                                      // 6063
  // BB = B^2                                                                                                         // 6064
  var bb = b.redSqr();                                                                                                // 6065
  // C = AA - BB                                                                                                      // 6066
  var c = aa.redSub(bb);                                                                                              // 6067
  // X3 = AA * BB                                                                                                     // 6068
  var nx = aa.redMul(bb);                                                                                             // 6069
  // Z3 = C * (BB + A24 * C)                                                                                          // 6070
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));                                                             // 6071
  return this.curve.point(nx, nz);                                                                                    // 6072
};                                                                                                                    // 6073
                                                                                                                      // 6074
Point.prototype.add = function add(p) {                                                                               // 6075
  throw new Error('Not supported on Montgomery curve');                                                               // 6076
};                                                                                                                    // 6077
                                                                                                                      // 6078
Point.prototype.diffAdd = function diffAdd(p, diff) {                                                                 // 6079
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3                                      // 6080
  // 4M + 2S + 6A                                                                                                     // 6081
                                                                                                                      // 6082
  // A = X2 + Z2                                                                                                      // 6083
  var a = this.x.redAdd(this.z);                                                                                      // 6084
  // B = X2 - Z2                                                                                                      // 6085
  var b = this.x.redSub(this.z);                                                                                      // 6086
  // C = X3 + Z3                                                                                                      // 6087
  var c = p.x.redAdd(p.z);                                                                                            // 6088
  // D = X3 - Z3                                                                                                      // 6089
  var d = p.x.redSub(p.z);                                                                                            // 6090
  // DA = D * A                                                                                                       // 6091
  var da = d.redMul(a);                                                                                               // 6092
  // CB = C * B                                                                                                       // 6093
  var cb = c.redMul(b);                                                                                               // 6094
  // X5 = Z1 * (DA + CB)^2                                                                                            // 6095
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());                                                                     // 6096
  // Z5 = X1 * (DA - CB)^2                                                                                            // 6097
  var nz = diff.x.redMul(da.redISub(cb).redSqr());                                                                    // 6098
  return this.curve.point(nx, nz);                                                                                    // 6099
};                                                                                                                    // 6100
                                                                                                                      // 6101
Point.prototype.mul = function mul(k) {                                                                               // 6102
  var t = k.clone();                                                                                                  // 6103
  var a = this; // (N / 2) * Q + Q                                                                                    // 6104
  var b = this.curve.point(null, null); // (N / 2) * Q                                                                // 6105
  var c = this; // Q                                                                                                  // 6106
                                                                                                                      // 6107
  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))                                                                    // 6108
    bits.push(t.andln(1));                                                                                            // 6109
                                                                                                                      // 6110
  for (var i = bits.length - 1; i >= 0; i--) {                                                                        // 6111
    if (bits[i] === 0) {                                                                                              // 6112
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q                                                                 // 6113
      a = a.diffAdd(b, c);                                                                                            // 6114
      // N * Q = 2 * ((N / 2) * Q + Q))                                                                               // 6115
      b = b.dbl();                                                                                                    // 6116
    } else {                                                                                                          // 6117
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)                                                                    // 6118
      b = a.diffAdd(b, c);                                                                                            // 6119
      // N * Q + Q = 2 * ((N / 2) * Q + Q)                                                                            // 6120
      a = a.dbl();                                                                                                    // 6121
    }                                                                                                                 // 6122
  }                                                                                                                   // 6123
  return b;                                                                                                           // 6124
};                                                                                                                    // 6125
                                                                                                                      // 6126
Point.prototype.mulAdd = function mulAdd() {                                                                          // 6127
  throw new Error('Not supported on Montgomery curve');                                                               // 6128
};                                                                                                                    // 6129
                                                                                                                      // 6130
Point.prototype.normalize = function normalize() {                                                                    // 6131
  this.x = this.x.redMul(this.z.redInvm());                                                                           // 6132
  this.z = this.curve.one;                                                                                            // 6133
  return this;                                                                                                        // 6134
};                                                                                                                    // 6135
                                                                                                                      // 6136
Point.prototype.getX = function getX() {                                                                              // 6137
  // Normalize coordinates                                                                                            // 6138
  this.normalize();                                                                                                   // 6139
                                                                                                                      // 6140
  return this.x.fromRed();                                                                                            // 6141
};                                                                                                                    // 6142
                                                                                                                      // 6143
},{"../../elliptic":30,"../curve":33,"bn.js":28,"inherits":144}],35:[function(require,module,exports){                // 6144
var curve = require('../curve');                                                                                      // 6145
var elliptic = require('../../elliptic');                                                                             // 6146
var bn = require('bn.js');                                                                                            // 6147
var inherits = require('inherits');                                                                                   // 6148
var Base = curve.base;                                                                                                // 6149
                                                                                                                      // 6150
var getNAF = elliptic.utils.getNAF;                                                                                   // 6151
var assert = elliptic.utils.assert;                                                                                   // 6152
                                                                                                                      // 6153
function ShortCurve(conf) {                                                                                           // 6154
  Base.call(this, 'short', conf);                                                                                     // 6155
                                                                                                                      // 6156
  this.a = new bn(conf.a, 16).toRed(this.red);                                                                        // 6157
  this.b = new bn(conf.b, 16).toRed(this.red);                                                                        // 6158
  this.tinv = this.two.redInvm();                                                                                     // 6159
                                                                                                                      // 6160
  this.zeroA = this.a.fromRed().cmpn(0) === 0;                                                                        // 6161
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;                                                          // 6162
                                                                                                                      // 6163
  // If the curve is endomorphic, precalculate beta and lambda                                                        // 6164
  this.endo = this._getEndomorphism(conf);                                                                            // 6165
  this._endoWnafT1 = new Array(4);                                                                                    // 6166
  this._endoWnafT2 = new Array(4);                                                                                    // 6167
}                                                                                                                     // 6168
inherits(ShortCurve, Base);                                                                                           // 6169
module.exports = ShortCurve;                                                                                          // 6170
                                                                                                                      // 6171
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {                                             // 6172
  // No efficient endomorphism                                                                                        // 6173
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)                                                      // 6174
    return;                                                                                                           // 6175
                                                                                                                      // 6176
  // Compute beta and lambda, that lambda * P = (beta * Px; Py)                                                       // 6177
  var beta;                                                                                                           // 6178
  var lambda;                                                                                                         // 6179
  if (conf.beta) {                                                                                                    // 6180
    beta = new bn(conf.beta, 16).toRed(this.red);                                                                     // 6181
  } else {                                                                                                            // 6182
    var betas = this._getEndoRoots(this.p);                                                                           // 6183
    // Choose the smallest beta                                                                                       // 6184
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];                                                          // 6185
    beta = beta.toRed(this.red);                                                                                      // 6186
  }                                                                                                                   // 6187
  if (conf.lambda) {                                                                                                  // 6188
    lambda = new bn(conf.lambda, 16);                                                                                 // 6189
  } else {                                                                                                            // 6190
    // Choose the lambda that is matching selected beta                                                               // 6191
    var lambdas = this._getEndoRoots(this.n);                                                                         // 6192
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {                                                  // 6193
      lambda = lambdas[0];                                                                                            // 6194
    } else {                                                                                                          // 6195
      lambda = lambdas[1];                                                                                            // 6196
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);                                                  // 6197
    }                                                                                                                 // 6198
  }                                                                                                                   // 6199
                                                                                                                      // 6200
  // Get basis vectors, used for balanced length-two representation                                                   // 6201
  var basis;                                                                                                          // 6202
  if (conf.basis) {                                                                                                   // 6203
    basis = conf.basis.map(function(vec) {                                                                            // 6204
      return {                                                                                                        // 6205
        a: new bn(vec.a, 16),                                                                                         // 6206
        b: new bn(vec.b, 16),                                                                                         // 6207
      };                                                                                                              // 6208
    });                                                                                                               // 6209
  } else {                                                                                                            // 6210
    basis = this._getEndoBasis(lambda);                                                                               // 6211
  }                                                                                                                   // 6212
                                                                                                                      // 6213
  return {                                                                                                            // 6214
    beta: beta,                                                                                                       // 6215
    lambda: lambda,                                                                                                   // 6216
    basis: basis                                                                                                      // 6217
  };                                                                                                                  // 6218
};                                                                                                                    // 6219
                                                                                                                      // 6220
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {                                                    // 6221
  // Find roots of for x^2 + x + 1 in F                                                                               // 6222
  // Root = (-1 +- Sqrt(-3)) / 2                                                                                      // 6223
  //                                                                                                                  // 6224
  var red = num === this.p ? this.red : bn.mont(num);                                                                 // 6225
  var tinv = new bn(2).toRed(red).redInvm();                                                                          // 6226
  var ntinv = tinv.redNeg();                                                                                          // 6227
  var one = new bn(1).toRed(red);                                                                                     // 6228
                                                                                                                      // 6229
  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);                                                       // 6230
                                                                                                                      // 6231
  var l1 = ntinv.redAdd(s).fromRed();                                                                                 // 6232
  var l2 = ntinv.redSub(s).fromRed();                                                                                 // 6233
  return [ l1, l2 ];                                                                                                  // 6234
};                                                                                                                    // 6235
                                                                                                                      // 6236
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {                                                 // 6237
  // aprxSqrt >= sqrt(this.n)                                                                                         // 6238
  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));                                                     // 6239
                                                                                                                      // 6240
  // 3.74                                                                                                             // 6241
  // Run EGCD, until r(L + 1) < aprxSqrt                                                                              // 6242
  var u = lambda;                                                                                                     // 6243
  var v = this.n.clone();                                                                                             // 6244
  var x1 = new bn(1);                                                                                                 // 6245
  var y1 = new bn(0);                                                                                                 // 6246
  var x2 = new bn(0);                                                                                                 // 6247
  var y2 = new bn(1);                                                                                                 // 6248
                                                                                                                      // 6249
  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)                                                       // 6250
  var a0;                                                                                                             // 6251
  var b0;                                                                                                             // 6252
  // First vector                                                                                                     // 6253
  var a1;                                                                                                             // 6254
  var b1;                                                                                                             // 6255
  // Second vector                                                                                                    // 6256
  var a2;                                                                                                             // 6257
  var b2;                                                                                                             // 6258
                                                                                                                      // 6259
  var prevR;                                                                                                          // 6260
  var i = 0;                                                                                                          // 6261
  while (u.cmpn(0) !== 0) {                                                                                           // 6262
    var q = v.div(u);                                                                                                 // 6263
    var r = v.sub(q.mul(u));                                                                                          // 6264
    var x = x2.sub(q.mul(x1));                                                                                        // 6265
    var y = y2.sub(q.mul(y1));                                                                                        // 6266
                                                                                                                      // 6267
    if (!a1 && r.cmp(aprxSqrt) < 0) {                                                                                 // 6268
      a0 = prevR.neg();                                                                                               // 6269
      b0 = x1;                                                                                                        // 6270
      a1 = r.neg();                                                                                                   // 6271
      b1 = x;                                                                                                         // 6272
    } else if (a1 && ++i === 2) {                                                                                     // 6273
      break;                                                                                                          // 6274
    }                                                                                                                 // 6275
    prevR = r;                                                                                                        // 6276
                                                                                                                      // 6277
    v = u;                                                                                                            // 6278
    u = r;                                                                                                            // 6279
    x2 = x1;                                                                                                          // 6280
    x1 = x;                                                                                                           // 6281
    y2 = y1;                                                                                                          // 6282
    y1 = y;                                                                                                           // 6283
  }                                                                                                                   // 6284
  a2 = r.neg();                                                                                                       // 6285
  b2 = x;                                                                                                             // 6286
                                                                                                                      // 6287
  var len1 = a1.sqr().add(b1.sqr());                                                                                  // 6288
  var len2 = a2.sqr().add(b2.sqr());                                                                                  // 6289
  if (len2.cmp(len1) >= 0) {                                                                                          // 6290
    a2 = a0;                                                                                                          // 6291
    b2 = b0;                                                                                                          // 6292
  }                                                                                                                   // 6293
                                                                                                                      // 6294
  // Normalize signs                                                                                                  // 6295
  if (a1.sign) {                                                                                                      // 6296
    a1 = a1.neg();                                                                                                    // 6297
    b1 = b1.neg();                                                                                                    // 6298
  }                                                                                                                   // 6299
  if (a2.sign) {                                                                                                      // 6300
    a2 = a2.neg();                                                                                                    // 6301
    b2 = b2.neg();                                                                                                    // 6302
  }                                                                                                                   // 6303
                                                                                                                      // 6304
  return [                                                                                                            // 6305
    { a: a1, b: b1 },                                                                                                 // 6306
    { a: a2, b: b2 }                                                                                                  // 6307
  ];                                                                                                                  // 6308
};                                                                                                                    // 6309
                                                                                                                      // 6310
ShortCurve.prototype._endoSplit = function _endoSplit(k) {                                                            // 6311
  var basis = this.endo.basis;                                                                                        // 6312
  var v1 = basis[0];                                                                                                  // 6313
  var v2 = basis[1];                                                                                                  // 6314
                                                                                                                      // 6315
  var c1 = v2.b.mul(k).divRound(this.n);                                                                              // 6316
  var c2 = v1.b.neg().mul(k).divRound(this.n);                                                                        // 6317
                                                                                                                      // 6318
  var p1 = c1.mul(v1.a);                                                                                              // 6319
  var p2 = c2.mul(v2.a);                                                                                              // 6320
  var q1 = c1.mul(v1.b);                                                                                              // 6321
  var q2 = c2.mul(v2.b);                                                                                              // 6322
                                                                                                                      // 6323
  // Calculate answer                                                                                                 // 6324
  var k1 = k.sub(p1).sub(p2);                                                                                         // 6325
  var k2 = q1.add(q2).neg();                                                                                          // 6326
  return { k1: k1, k2: k2 };                                                                                          // 6327
};                                                                                                                    // 6328
                                                                                                                      // 6329
ShortCurve.prototype.point = function point(x, y, isRed) {                                                            // 6330
  return new Point(this, x, y, isRed);                                                                                // 6331
};                                                                                                                    // 6332
                                                                                                                      // 6333
ShortCurve.prototype.pointFromX = function pointFromX(odd, x) {                                                       // 6334
  x = new bn(x, 16);                                                                                                  // 6335
  if (!x.red)                                                                                                         // 6336
    x = x.toRed(this.red);                                                                                            // 6337
                                                                                                                      // 6338
  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);                                            // 6339
  var y = y2.redSqrt();                                                                                               // 6340
                                                                                                                      // 6341
  // XXX Is there any way to tell if the number is odd without converting it                                          // 6342
  // to non-red form?                                                                                                 // 6343
  var isOdd = y.fromRed().isOdd();                                                                                    // 6344
  if (odd && !isOdd || !odd && isOdd)                                                                                 // 6345
    y = y.redNeg();                                                                                                   // 6346
                                                                                                                      // 6347
  return this.point(x, y);                                                                                            // 6348
};                                                                                                                    // 6349
                                                                                                                      // 6350
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {                                                              // 6351
  return new JPoint(this, x, y, z);                                                                                   // 6352
};                                                                                                                    // 6353
                                                                                                                      // 6354
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {                                               // 6355
  return Point.fromJSON(this, obj, red);                                                                              // 6356
};                                                                                                                    // 6357
                                                                                                                      // 6358
ShortCurve.prototype.validate = function validate(point) {                                                            // 6359
  if (point.inf)                                                                                                      // 6360
    return true;                                                                                                      // 6361
                                                                                                                      // 6362
  var x = point.x;                                                                                                    // 6363
  var y = point.y;                                                                                                    // 6364
                                                                                                                      // 6365
  var ax = this.a.redMul(x);                                                                                          // 6366
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);                                                         // 6367
  return y.redSqr().redISub(rhs).cmpn(0) === 0;                                                                       // 6368
};                                                                                                                    // 6369
                                                                                                                      // 6370
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs) {                                     // 6371
  var npoints = this._endoWnafT1;                                                                                     // 6372
  var ncoeffs = this._endoWnafT2;                                                                                     // 6373
  for (var i = 0; i < points.length; i++) {                                                                           // 6374
    var split = this._endoSplit(coeffs[i]);                                                                           // 6375
    var p = points[i];                                                                                                // 6376
    var beta = p._getBeta();                                                                                          // 6377
                                                                                                                      // 6378
    if (split.k1.sign) {                                                                                              // 6379
      split.k1.sign = !split.k1.sign;                                                                                 // 6380
      p = p.neg(true);                                                                                                // 6381
    }                                                                                                                 // 6382
    if (split.k2.sign) {                                                                                              // 6383
      split.k2.sign = !split.k2.sign;                                                                                 // 6384
      beta = beta.neg(true);                                                                                          // 6385
    }                                                                                                                 // 6386
                                                                                                                      // 6387
    npoints[i * 2] = p;                                                                                               // 6388
    npoints[i * 2 + 1] = beta;                                                                                        // 6389
    ncoeffs[i * 2] = split.k1;                                                                                        // 6390
    ncoeffs[i * 2 + 1] = split.k2;                                                                                    // 6391
  }                                                                                                                   // 6392
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);                                                             // 6393
                                                                                                                      // 6394
  // Clean-up references to points and coefficients                                                                   // 6395
  for (var j = 0; j < i * 2; j++) {                                                                                   // 6396
    npoints[j] = null;                                                                                                // 6397
    ncoeffs[j] = null;                                                                                                // 6398
  }                                                                                                                   // 6399
  return res;                                                                                                         // 6400
};                                                                                                                    // 6401
                                                                                                                      // 6402
function Point(curve, x, y, isRed) {                                                                                  // 6403
  Base.BasePoint.call(this, curve, 'affine');                                                                         // 6404
  if (x === null && y === null) {                                                                                     // 6405
    this.x = null;                                                                                                    // 6406
    this.y = null;                                                                                                    // 6407
    this.inf = true;                                                                                                  // 6408
  } else {                                                                                                            // 6409
    this.x = new bn(x, 16);                                                                                           // 6410
    this.y = new bn(y, 16);                                                                                           // 6411
    // Force redgomery representation when loading from JSON                                                          // 6412
    if (isRed) {                                                                                                      // 6413
      this.x.forceRed(this.curve.red);                                                                                // 6414
      this.y.forceRed(this.curve.red);                                                                                // 6415
    }                                                                                                                 // 6416
    if (!this.x.red)                                                                                                  // 6417
      this.x = this.x.toRed(this.curve.red);                                                                          // 6418
    if (!this.y.red)                                                                                                  // 6419
      this.y = this.y.toRed(this.curve.red);                                                                          // 6420
    this.inf = false;                                                                                                 // 6421
  }                                                                                                                   // 6422
}                                                                                                                     // 6423
inherits(Point, Base.BasePoint);                                                                                      // 6424
                                                                                                                      // 6425
Point.prototype._getBeta = function _getBeta() {                                                                      // 6426
  if (!this.curve.endo)                                                                                               // 6427
    return;                                                                                                           // 6428
                                                                                                                      // 6429
  var pre = this.precomputed;                                                                                         // 6430
  if (pre && pre.beta)                                                                                                // 6431
    return pre.beta;                                                                                                  // 6432
                                                                                                                      // 6433
  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);                                           // 6434
  if (pre) {                                                                                                          // 6435
    var curve = this.curve;                                                                                           // 6436
    function endoMul(p) {                                                                                             // 6437
      return curve.point(p.x.redMul(curve.endo.beta), p.y);                                                           // 6438
    }                                                                                                                 // 6439
    pre.beta = beta;                                                                                                  // 6440
    beta.precomputed = {                                                                                              // 6441
      beta: null,                                                                                                     // 6442
      naf: pre.naf && {                                                                                               // 6443
        wnd: pre.naf.wnd,                                                                                             // 6444
        points: pre.naf.points.map(endoMul)                                                                           // 6445
      },                                                                                                              // 6446
      doubles: pre.doubles && {                                                                                       // 6447
        step: pre.doubles.step,                                                                                       // 6448
        points: pre.doubles.points.map(endoMul)                                                                       // 6449
      }                                                                                                               // 6450
    };                                                                                                                // 6451
  }                                                                                                                   // 6452
  return beta;                                                                                                        // 6453
};                                                                                                                    // 6454
                                                                                                                      // 6455
Point.prototype.toJSON = function toJSON() {                                                                          // 6456
  if (!this.precomputed)                                                                                              // 6457
    return [ this.x, this.y ];                                                                                        // 6458
                                                                                                                      // 6459
  return [ this.x, this.y, this.precomputed && {                                                                      // 6460
    doubles: this.precomputed.doubles && {                                                                            // 6461
      step: this.precomputed.doubles.step,                                                                            // 6462
      points: this.precomputed.doubles.points.slice(1)                                                                // 6463
    },                                                                                                                // 6464
    naf: this.precomputed.naf && {                                                                                    // 6465
      wnd: this.precomputed.naf.wnd,                                                                                  // 6466
      points: this.precomputed.naf.points.slice(1)                                                                    // 6467
    }                                                                                                                 // 6468
  }];                                                                                                                 // 6469
};                                                                                                                    // 6470
                                                                                                                      // 6471
Point.fromJSON = function fromJSON(curve, obj, red) {                                                                 // 6472
  if (typeof obj === 'string')                                                                                        // 6473
    obj = JSON.parse(obj);                                                                                            // 6474
  var res = curve.point(obj[0], obj[1], red);                                                                         // 6475
  if (!obj[2])                                                                                                        // 6476
    return res;                                                                                                       // 6477
                                                                                                                      // 6478
  function obj2point(obj) {                                                                                           // 6479
    return curve.point(obj[0], obj[1], red);                                                                          // 6480
  }                                                                                                                   // 6481
                                                                                                                      // 6482
  var pre = obj[2];                                                                                                   // 6483
  res.precomputed = {                                                                                                 // 6484
    beta: null,                                                                                                       // 6485
    doubles: pre.doubles && {                                                                                         // 6486
      step: pre.doubles.step,                                                                                         // 6487
      points: [ res ].concat(pre.doubles.points.map(obj2point))                                                       // 6488
    },                                                                                                                // 6489
    naf: pre.naf && {                                                                                                 // 6490
      wnd: pre.naf.wnd,                                                                                               // 6491
      points: [ res ].concat(pre.naf.points.map(obj2point))                                                           // 6492
    }                                                                                                                 // 6493
  };                                                                                                                  // 6494
  return res;                                                                                                         // 6495
};                                                                                                                    // 6496
                                                                                                                      // 6497
Point.prototype.inspect = function inspect() {                                                                        // 6498
  if (this.isInfinity())                                                                                              // 6499
    return '<EC Point Infinity>';                                                                                     // 6500
  return '<EC Point x: ' + this.x.fromRed().toString(16 ,2) +                                                         // 6501
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';                                                                // 6502
};                                                                                                                    // 6503
                                                                                                                      // 6504
Point.prototype.isInfinity = function isInfinity() {                                                                  // 6505
  return this.inf;                                                                                                    // 6506
};                                                                                                                    // 6507
                                                                                                                      // 6508
Point.prototype.add = function add(p) {                                                                               // 6509
  // O + P = P                                                                                                        // 6510
  if (this.inf)                                                                                                       // 6511
    return p;                                                                                                         // 6512
                                                                                                                      // 6513
  // P + O = P                                                                                                        // 6514
  if (p.inf)                                                                                                          // 6515
    return this;                                                                                                      // 6516
                                                                                                                      // 6517
  // P + P = 2P                                                                                                       // 6518
  if (this.eq(p))                                                                                                     // 6519
    return this.dbl();                                                                                                // 6520
                                                                                                                      // 6521
  // P + (-P) = O                                                                                                     // 6522
  if (this.neg().eq(p))                                                                                               // 6523
    return this.curve.point(null, null);                                                                              // 6524
                                                                                                                      // 6525
  // P + Q = O                                                                                                        // 6526
  if (this.x.cmp(p.x) === 0)                                                                                          // 6527
    return this.curve.point(null, null);                                                                              // 6528
                                                                                                                      // 6529
  var c = this.y.redSub(p.y);                                                                                         // 6530
  if (c.cmpn(0) !== 0)                                                                                                // 6531
    c = c.redMul(this.x.redSub(p.x).redInvm());                                                                       // 6532
  var nx = c.redSqr().redISub(this.x).redISub(p.x);                                                                   // 6533
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);                                                               // 6534
  return this.curve.point(nx, ny);                                                                                    // 6535
};                                                                                                                    // 6536
                                                                                                                      // 6537
Point.prototype.dbl = function dbl() {                                                                                // 6538
  if (this.inf)                                                                                                       // 6539
    return this;                                                                                                      // 6540
                                                                                                                      // 6541
  // 2P = O                                                                                                           // 6542
  var ys1 = this.y.redAdd(this.y);                                                                                    // 6543
  if (ys1.cmpn(0) === 0)                                                                                              // 6544
    return this.curve.point(null, null);                                                                              // 6545
                                                                                                                      // 6546
  var a = this.curve.a;                                                                                               // 6547
                                                                                                                      // 6548
  var x2 = this.x.redSqr();                                                                                           // 6549
  var dyinv = ys1.redInvm();                                                                                          // 6550
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);                                                         // 6551
                                                                                                                      // 6552
  var nx = c.redSqr().redISub(this.x.redAdd(this.x));                                                                 // 6553
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);                                                               // 6554
  return this.curve.point(nx, ny);                                                                                    // 6555
};                                                                                                                    // 6556
                                                                                                                      // 6557
Point.prototype.getX = function getX() {                                                                              // 6558
  return this.x.fromRed();                                                                                            // 6559
};                                                                                                                    // 6560
                                                                                                                      // 6561
Point.prototype.getY = function getY() {                                                                              // 6562
  return this.y.fromRed();                                                                                            // 6563
};                                                                                                                    // 6564
                                                                                                                      // 6565
Point.prototype.mul = function mul(k) {                                                                               // 6566
  k = new bn(k, 16);                                                                                                  // 6567
                                                                                                                      // 6568
  if (this.precomputed && this.precomputed.doubles)                                                                   // 6569
    return this.curve._fixedNafMul(this, k);                                                                          // 6570
  else if (this.curve.endo)                                                                                           // 6571
    return this.curve._endoWnafMulAdd([ this ], [ k ]);                                                               // 6572
  else                                                                                                                // 6573
    return this.curve._wnafMul(this, k);                                                                              // 6574
};                                                                                                                    // 6575
                                                                                                                      // 6576
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {                                                                // 6577
  var points = [ this, p2 ];                                                                                          // 6578
  var coeffs = [ k1, k2 ];                                                                                            // 6579
  if (this.curve.endo)                                                                                                // 6580
    return this.curve._endoWnafMulAdd(points, coeffs);                                                                // 6581
  else                                                                                                                // 6582
    return this.curve._wnafMulAdd(1, points, coeffs, 2);                                                              // 6583
};                                                                                                                    // 6584
                                                                                                                      // 6585
Point.prototype.eq = function eq(p) {                                                                                 // 6586
  return this === p ||                                                                                                // 6587
         this.inf === p.inf &&                                                                                        // 6588
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);                                            // 6589
};                                                                                                                    // 6590
                                                                                                                      // 6591
Point.prototype.neg = function neg(_precompute) {                                                                     // 6592
  if (this.inf)                                                                                                       // 6593
    return this;                                                                                                      // 6594
                                                                                                                      // 6595
  var res = this.curve.point(this.x, this.y.redNeg());                                                                // 6596
  if (_precompute && this.precomputed) {                                                                              // 6597
    var pre = this.precomputed;                                                                                       // 6598
    function negate(p) {                                                                                              // 6599
      return p.neg();                                                                                                 // 6600
    }                                                                                                                 // 6601
    res.precomputed = {                                                                                               // 6602
      naf: pre.naf && {                                                                                               // 6603
        wnd: pre.naf.wnd,                                                                                             // 6604
        points: pre.naf.points.map(negate)                                                                            // 6605
      },                                                                                                              // 6606
      doubles: pre.doubles && {                                                                                       // 6607
        step: pre.doubles.step,                                                                                       // 6608
        points: pre.doubles.points.map(negate)                                                                        // 6609
      }                                                                                                               // 6610
    };                                                                                                                // 6611
  }                                                                                                                   // 6612
  return res;                                                                                                         // 6613
};                                                                                                                    // 6614
                                                                                                                      // 6615
Point.prototype.toJ = function toJ() {                                                                                // 6616
  if (this.inf)                                                                                                       // 6617
    return this.curve.jpoint(null, null, null);                                                                       // 6618
                                                                                                                      // 6619
  var res = this.curve.jpoint(this.x, this.y, this.curve.one);                                                        // 6620
  return res;                                                                                                         // 6621
};                                                                                                                    // 6622
                                                                                                                      // 6623
function JPoint(curve, x, y, z) {                                                                                     // 6624
  Base.BasePoint.call(this, curve, 'jacobian');                                                                       // 6625
  if (x === null && y === null && z === null) {                                                                       // 6626
    this.x = this.curve.one;                                                                                          // 6627
    this.y = this.curve.one;                                                                                          // 6628
    this.z = new bn(0);                                                                                               // 6629
  } else {                                                                                                            // 6630
    this.x = new bn(x, 16);                                                                                           // 6631
    this.y = new bn(y, 16);                                                                                           // 6632
    this.z = new bn(z, 16);                                                                                           // 6633
  }                                                                                                                   // 6634
  if (!this.x.red)                                                                                                    // 6635
    this.x = this.x.toRed(this.curve.red);                                                                            // 6636
  if (!this.y.red)                                                                                                    // 6637
    this.y = this.y.toRed(this.curve.red);                                                                            // 6638
  if (!this.z.red)                                                                                                    // 6639
    this.z = this.z.toRed(this.curve.red);                                                                            // 6640
                                                                                                                      // 6641
  this.zOne = this.z === this.curve.one;                                                                              // 6642
}                                                                                                                     // 6643
inherits(JPoint, Base.BasePoint);                                                                                     // 6644
                                                                                                                      // 6645
JPoint.prototype.toP = function toP() {                                                                               // 6646
  if (this.isInfinity())                                                                                              // 6647
    return this.curve.point(null, null);                                                                              // 6648
                                                                                                                      // 6649
  var zinv = this.z.redInvm();                                                                                        // 6650
  var zinv2 = zinv.redSqr();                                                                                          // 6651
  var ax = this.x.redMul(zinv2);                                                                                      // 6652
  var ay = this.y.redMul(zinv2).redMul(zinv);                                                                         // 6653
                                                                                                                      // 6654
  return this.curve.point(ax, ay);                                                                                    // 6655
};                                                                                                                    // 6656
                                                                                                                      // 6657
JPoint.prototype.neg = function neg() {                                                                               // 6658
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);                                                          // 6659
};                                                                                                                    // 6660
                                                                                                                      // 6661
JPoint.prototype.add = function add(p) {                                                                              // 6662
  // O + P = P                                                                                                        // 6663
  if (this.isInfinity())                                                                                              // 6664
    return p;                                                                                                         // 6665
                                                                                                                      // 6666
  // P + O = P                                                                                                        // 6667
  if (p.isInfinity())                                                                                                 // 6668
    return this;                                                                                                      // 6669
                                                                                                                      // 6670
  // 12M + 4S + 7A                                                                                                    // 6671
  var pz2 = p.z.redSqr();                                                                                             // 6672
  var z2 = this.z.redSqr();                                                                                           // 6673
  var u1 = this.x.redMul(pz2);                                                                                        // 6674
  var u2 = p.x.redMul(z2);                                                                                            // 6675
  var s1 = this.y.redMul(pz2.redMul(p.z));                                                                            // 6676
  var s2 = p.y.redMul(z2.redMul(this.z));                                                                             // 6677
                                                                                                                      // 6678
  var h = u1.redSub(u2);                                                                                              // 6679
  var r = s1.redSub(s2);                                                                                              // 6680
  if (h.cmpn(0) === 0) {                                                                                              // 6681
    if (r.cmpn(0) !== 0)                                                                                              // 6682
      return this.curve.jpoint(null, null, null);                                                                     // 6683
    else                                                                                                              // 6684
      return this.dbl();                                                                                              // 6685
  }                                                                                                                   // 6686
                                                                                                                      // 6687
  var h2 = h.redSqr();                                                                                                // 6688
  var h3 = h2.redMul(h);                                                                                              // 6689
  var v = u1.redMul(h2);                                                                                              // 6690
                                                                                                                      // 6691
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);                                                              // 6692
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));                                                            // 6693
  var nz = this.z.redMul(p.z).redMul(h);                                                                              // 6694
                                                                                                                      // 6695
  return this.curve.jpoint(nx, ny, nz);                                                                               // 6696
};                                                                                                                    // 6697
                                                                                                                      // 6698
JPoint.prototype.mixedAdd = function mixedAdd(p) {                                                                    // 6699
  // O + P = P                                                                                                        // 6700
  if (this.isInfinity())                                                                                              // 6701
    return p.toJ();                                                                                                   // 6702
                                                                                                                      // 6703
  // P + O = P                                                                                                        // 6704
  if (p.isInfinity())                                                                                                 // 6705
    return this;                                                                                                      // 6706
                                                                                                                      // 6707
  // 8M + 3S + 7A                                                                                                     // 6708
  var z2 = this.z.redSqr();                                                                                           // 6709
  var u1 = this.x;                                                                                                    // 6710
  var u2 = p.x.redMul(z2);                                                                                            // 6711
  var s1 = this.y;                                                                                                    // 6712
  var s2 = p.y.redMul(z2).redMul(this.z);                                                                             // 6713
                                                                                                                      // 6714
  var h = u1.redSub(u2);                                                                                              // 6715
  var r = s1.redSub(s2);                                                                                              // 6716
  if (h.cmpn(0) === 0) {                                                                                              // 6717
    if (r.cmpn(0) !== 0)                                                                                              // 6718
      return this.curve.jpoint(null, null, null);                                                                     // 6719
    else                                                                                                              // 6720
      return this.dbl();                                                                                              // 6721
  }                                                                                                                   // 6722
                                                                                                                      // 6723
  var h2 = h.redSqr();                                                                                                // 6724
  var h3 = h2.redMul(h);                                                                                              // 6725
  var v = u1.redMul(h2);                                                                                              // 6726
                                                                                                                      // 6727
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);                                                              // 6728
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));                                                            // 6729
  var nz = this.z.redMul(h);                                                                                          // 6730
                                                                                                                      // 6731
  return this.curve.jpoint(nx, ny, nz);                                                                               // 6732
};                                                                                                                    // 6733
                                                                                                                      // 6734
JPoint.prototype.dblp = function dblp(pow) {                                                                          // 6735
  if (pow === 0)                                                                                                      // 6736
    return this;                                                                                                      // 6737
  if (this.isInfinity())                                                                                              // 6738
    return this;                                                                                                      // 6739
  if (!pow)                                                                                                           // 6740
    return this.dbl();                                                                                                // 6741
                                                                                                                      // 6742
  if (this.curve.zeroA || this.curve.threeA) {                                                                        // 6743
    var r = this;                                                                                                     // 6744
    for (var i = 0; i < pow; i++)                                                                                     // 6745
      r = r.dbl();                                                                                                    // 6746
    return r;                                                                                                         // 6747
  }                                                                                                                   // 6748
                                                                                                                      // 6749
  // 1M + 2S + 1A + N * (4S + 5M + 8A)                                                                                // 6750
  // N = 1 => 6M + 6S + 9A                                                                                            // 6751
  var a = this.curve.a;                                                                                               // 6752
  var tinv = this.curve.tinv;                                                                                         // 6753
                                                                                                                      // 6754
  var jx = this.x;                                                                                                    // 6755
  var jy = this.y;                                                                                                    // 6756
  var jz = this.z;                                                                                                    // 6757
  var jz4 = jz.redSqr().redSqr();                                                                                     // 6758
                                                                                                                      // 6759
  // Reuse results                                                                                                    // 6760
  var jyd = jy.redAdd(jy);                                                                                            // 6761
  for (var i = 0; i < pow; i++) {                                                                                     // 6762
    var jx2 = jx.redSqr();                                                                                            // 6763
    var jyd2 = jyd.redSqr();                                                                                          // 6764
    var jyd4 = jyd2.redSqr();                                                                                         // 6765
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));                                                      // 6766
                                                                                                                      // 6767
    var t1 = jx.redMul(jyd2);                                                                                         // 6768
    var nx = c.redSqr().redISub(t1.redAdd(t1));                                                                       // 6769
    var t2 = t1.redISub(nx);                                                                                          // 6770
    var dny = c.redMul(t2);                                                                                           // 6771
    dny = dny.redIAdd(dny).redISub(jyd4);                                                                             // 6772
    var nz = jyd.redMul(jz);                                                                                          // 6773
    if (i + 1 < pow)                                                                                                  // 6774
      jz4 = jz4.redMul(jyd4);                                                                                         // 6775
                                                                                                                      // 6776
    jx = nx;                                                                                                          // 6777
    jz = nz;                                                                                                          // 6778
    jyd = dny;                                                                                                        // 6779
  }                                                                                                                   // 6780
                                                                                                                      // 6781
  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);                                                                 // 6782
};                                                                                                                    // 6783
                                                                                                                      // 6784
JPoint.prototype.dbl = function dbl() {                                                                               // 6785
  if (this.isInfinity())                                                                                              // 6786
    return this;                                                                                                      // 6787
                                                                                                                      // 6788
  if (this.curve.zeroA)                                                                                               // 6789
    return this._zeroDbl();                                                                                           // 6790
  else if (this.curve.threeA)                                                                                         // 6791
    return this._threeDbl();                                                                                          // 6792
  else                                                                                                                // 6793
    return this._dbl();                                                                                               // 6794
};                                                                                                                    // 6795
                                                                                                                      // 6796
JPoint.prototype._zeroDbl = function _zeroDbl() {                                                                     // 6797
  // Z = 1                                                                                                            // 6798
  if (this.zOne) {                                                                                                    // 6799
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-mdbl-2007-bl                             // 6800
    // 1M + 5S + 14A                                                                                                  // 6801
                                                                                                                      // 6802
    // XX = X1^2                                                                                                      // 6803
    var xx = this.x.redSqr();                                                                                         // 6804
    // YY = Y1^2                                                                                                      // 6805
    var yy = this.y.redSqr();                                                                                         // 6806
    // YYYY = YY^2                                                                                                    // 6807
    var yyyy = yy.redSqr();                                                                                           // 6808
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)                                                                              // 6809
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);                                                     // 6810
    s = s.redIAdd(s);                                                                                                 // 6811
    // M = 3 * XX + a; a = 0                                                                                          // 6812
    var m = xx.redAdd(xx).redIAdd(xx);                                                                                // 6813
    // T = M ^ 2 - 2*S                                                                                                // 6814
    var t = m.redSqr().redISub(s).redISub(s);                                                                         // 6815
                                                                                                                      // 6816
    // 8 * YYYY                                                                                                       // 6817
    var yyyy8 = yyyy.redIAdd(yyyy);                                                                                   // 6818
    yyyy8 = yyyy8.redIAdd(yyyy8);                                                                                     // 6819
    yyyy8 = yyyy8.redIAdd(yyyy8);                                                                                     // 6820
                                                                                                                      // 6821
    // X3 = T                                                                                                         // 6822
    var nx = t;                                                                                                       // 6823
    // Y3 = M * (S - T) - 8 * YYYY                                                                                    // 6824
    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);                                                                   // 6825
    // Z3 = 2*Y1                                                                                                      // 6826
    var nz = this.y.redAdd(this.y);                                                                                   // 6827
  } else {                                                                                                            // 6828
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l                               // 6829
    // 2M + 5S + 13A                                                                                                  // 6830
                                                                                                                      // 6831
    // A = X1^2                                                                                                       // 6832
    var a = this.x.redSqr();                                                                                          // 6833
    // B = Y1^2                                                                                                       // 6834
    var b = this.y.redSqr();                                                                                          // 6835
    // C = B^2                                                                                                        // 6836
    var c = b.redSqr();                                                                                               // 6837
    // D = 2 * ((X1 + B)^2 - A - C)                                                                                   // 6838
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);                                                          // 6839
    d = d.redIAdd(d);                                                                                                 // 6840
    // E = 3 * A                                                                                                      // 6841
    var e = a.redAdd(a).redIAdd(a);                                                                                   // 6842
    // F = E^2                                                                                                        // 6843
    var f = e.redSqr();                                                                                               // 6844
                                                                                                                      // 6845
    // 8 * C                                                                                                          // 6846
    var c8 = c.redIAdd(c);                                                                                            // 6847
    c8 = c8.redIAdd(c8);                                                                                              // 6848
    c8 = c8.redIAdd(c8);                                                                                              // 6849
                                                                                                                      // 6850
    // X3 = F - 2 * D                                                                                                 // 6851
    var nx = f.redISub(d).redISub(d);                                                                                 // 6852
    // Y3 = E * (D - X3) - 8 * C                                                                                      // 6853
    var ny = e.redMul(d.redISub(nx)).redISub(c8);                                                                     // 6854
    // Z3 = 2 * Y1 * Z1                                                                                               // 6855
    var nz = this.y.redMul(this.z);                                                                                   // 6856
    nz = nz.redIAdd(nz);                                                                                              // 6857
  }                                                                                                                   // 6858
                                                                                                                      // 6859
  return this.curve.jpoint(nx, ny, nz);                                                                               // 6860
};                                                                                                                    // 6861
                                                                                                                      // 6862
JPoint.prototype._threeDbl = function _threeDbl() {                                                                   // 6863
  // Z = 1                                                                                                            // 6864
  if (this.zOne) {                                                                                                    // 6865
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-mdbl-2007-bl                             // 6866
    // 1M + 5S + 15A                                                                                                  // 6867
                                                                                                                      // 6868
    // XX = X1^2                                                                                                      // 6869
    var xx = this.x.redSqr();                                                                                         // 6870
    // YY = Y1^2                                                                                                      // 6871
    var yy = this.y.redSqr();                                                                                         // 6872
    // YYYY = YY^2                                                                                                    // 6873
    var yyyy = yy.redSqr();                                                                                           // 6874
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)                                                                              // 6875
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);                                                     // 6876
    s = s.redIAdd(s);                                                                                                 // 6877
    // M = 3 * XX + a                                                                                                 // 6878
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);                                                          // 6879
    // T = M^2 - 2 * S                                                                                                // 6880
    var t = m.redSqr().redISub(s).redISub(s);                                                                         // 6881
    // X3 = T                                                                                                         // 6882
    var nx = t;                                                                                                       // 6883
    // Y3 = M * (S - T) - 8 * YYYY                                                                                    // 6884
    var yyyy8 = yyyy.redIAdd(yyyy);                                                                                   // 6885
    yyyy8 = yyyy8.redIAdd(yyyy8);                                                                                     // 6886
    yyyy8 = yyyy8.redIAdd(yyyy8);                                                                                     // 6887
    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);                                                                   // 6888
    // Z3 = 2 * Y1                                                                                                    // 6889
    var nz = this.y.redAdd(this.y);                                                                                   // 6890
  } else {                                                                                                            // 6891
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b                               // 6892
    // 3M + 5S                                                                                                        // 6893
                                                                                                                      // 6894
    // delta = Z1^2                                                                                                   // 6895
    var delta = this.z.redSqr();                                                                                      // 6896
    // gamma = Y1^2                                                                                                   // 6897
    var gamma = this.y.redSqr();                                                                                      // 6898
    // beta = X1 * gamma                                                                                              // 6899
    var beta = this.x.redMul(gamma);                                                                                  // 6900
    // alpha = 3 * (X1 - delta) * (X1 + delta)                                                                        // 6901
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));                                                    // 6902
    alpha = alpha.redAdd(alpha).redIAdd(alpha);                                                                       // 6903
    // X3 = alpha^2 - 8 * beta                                                                                        // 6904
    var beta4 = beta.redIAdd(beta);                                                                                   // 6905
    beta4 = beta4.redIAdd(beta4);                                                                                     // 6906
    var beta8 = beta4.redAdd(beta4);                                                                                  // 6907
    var nx = alpha.redSqr().redISub(beta8);                                                                           // 6908
    // Z3 = (Y1 + Z1)^2 - gamma - delta                                                                               // 6909
    var nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);                                            // 6910
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2                                                                     // 6911
    var ggamma8 = gamma.redSqr();                                                                                     // 6912
    ggamma8 = ggamma8.redIAdd(ggamma8);                                                                               // 6913
    ggamma8 = ggamma8.redIAdd(ggamma8);                                                                               // 6914
    ggamma8 = ggamma8.redIAdd(ggamma8);                                                                               // 6915
    var ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);                                                        // 6916
  }                                                                                                                   // 6917
                                                                                                                      // 6918
  return this.curve.jpoint(nx, ny, nz);                                                                               // 6919
};                                                                                                                    // 6920
                                                                                                                      // 6921
JPoint.prototype._dbl = function _dbl() {                                                                             // 6922
  var a = this.curve.a;                                                                                               // 6923
  var tinv = this.curve.tinv;                                                                                         // 6924
                                                                                                                      // 6925
  // 4M + 6S + 10A                                                                                                    // 6926
  var jx = this.x;                                                                                                    // 6927
  var jy = this.y;                                                                                                    // 6928
  var jz = this.z;                                                                                                    // 6929
  var jz4 = jz.redSqr().redSqr();                                                                                     // 6930
                                                                                                                      // 6931
  var jx2 = jx.redSqr();                                                                                              // 6932
  var jy2 = jy.redSqr();                                                                                              // 6933
                                                                                                                      // 6934
  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));                                                        // 6935
                                                                                                                      // 6936
  var jxd4 = jx.redAdd(jx);                                                                                           // 6937
  jxd4 = jxd4.redIAdd(jxd4);                                                                                          // 6938
  var t1 = jxd4.redMul(jy2);                                                                                          // 6939
  var nx = c.redSqr().redISub(t1.redAdd(t1));                                                                         // 6940
  var t2 = t1.redISub(nx);                                                                                            // 6941
                                                                                                                      // 6942
  var jyd8 = jy2.redSqr();                                                                                            // 6943
  jyd8 = jyd8.redIAdd(jyd8);                                                                                          // 6944
  jyd8 = jyd8.redIAdd(jyd8);                                                                                          // 6945
  jyd8 = jyd8.redIAdd(jyd8);                                                                                          // 6946
  var ny = c.redMul(t2).redISub(jyd8);                                                                                // 6947
  var nz = jy.redAdd(jy).redMul(jz);                                                                                  // 6948
                                                                                                                      // 6949
  return this.curve.jpoint(nx, ny, nz);                                                                               // 6950
};                                                                                                                    // 6951
                                                                                                                      // 6952
JPoint.prototype.trpl = function trpl() {                                                                             // 6953
  if (!this.curve.zeroA)                                                                                              // 6954
    return this.dbl().add(this);                                                                                      // 6955
                                                                                                                      // 6956
  // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl                                // 6957
  // 5M + 10S + ...                                                                                                   // 6958
                                                                                                                      // 6959
  // XX = X1^2                                                                                                        // 6960
  var xx = this.x.redSqr();                                                                                           // 6961
  // YY = Y1^2                                                                                                        // 6962
  var yy = this.y.redSqr();                                                                                           // 6963
  // ZZ = Z1^2                                                                                                        // 6964
  var zz = this.z.redSqr();                                                                                           // 6965
  // YYYY = YY^2                                                                                                      // 6966
  var yyyy = yy.redSqr();                                                                                             // 6967
  // M = 3 * XX + a * ZZ2; a = 0                                                                                      // 6968
  var m = xx.redAdd(xx).redIAdd(xx);                                                                                  // 6969
  // MM = M^2                                                                                                         // 6970
  var mm = m.redSqr();                                                                                                // 6971
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM                                                                           // 6972
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);                                                       // 6973
  e = e.redIAdd(e);                                                                                                   // 6974
  e = e.redAdd(e).redIAdd(e);                                                                                         // 6975
  e = e.redISub(mm);                                                                                                  // 6976
  // EE = E^2                                                                                                         // 6977
  var ee = e.redSqr();                                                                                                // 6978
  // T = 16*YYYY                                                                                                      // 6979
  var t = yyyy.redIAdd(yyyy);                                                                                         // 6980
  t = t.redIAdd(t);                                                                                                   // 6981
  t = t.redIAdd(t);                                                                                                   // 6982
  t = t.redIAdd(t);                                                                                                   // 6983
  // U = (M + E)^2 - MM - EE - T                                                                                      // 6984
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);                                                   // 6985
  // X3 = 4 * (X1 * EE - 4 * YY * U)                                                                                  // 6986
  var yyu4 = yy.redMul(u);                                                                                            // 6987
  yyu4 = yyu4.redIAdd(yyu4);                                                                                          // 6988
  yyu4 = yyu4.redIAdd(yyu4);                                                                                          // 6989
  var nx = this.x.redMul(ee).redISub(yyu4);                                                                           // 6990
  nx = nx.redIAdd(nx);                                                                                                // 6991
  nx = nx.redIAdd(nx);                                                                                                // 6992
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)                                                                             // 6993
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));                                               // 6994
  ny = ny.redIAdd(ny);                                                                                                // 6995
  ny = ny.redIAdd(ny);                                                                                                // 6996
  ny = ny.redIAdd(ny);                                                                                                // 6997
  // Z3 = (Z1 + E)^2 - ZZ - EE                                                                                        // 6998
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);                                                         // 6999
                                                                                                                      // 7000
  return this.curve.jpoint(nx, ny, nz);                                                                               // 7001
};                                                                                                                    // 7002
                                                                                                                      // 7003
JPoint.prototype.mul = function mul(k, kbase) {                                                                       // 7004
  k = new bn(k, kbase);                                                                                               // 7005
                                                                                                                      // 7006
  return this.curve._wnafMul(this, k);                                                                                // 7007
};                                                                                                                    // 7008
                                                                                                                      // 7009
JPoint.prototype.eq = function eq(p) {                                                                                // 7010
  if (p.type === 'affine')                                                                                            // 7011
    return this.eq(p.toJ());                                                                                          // 7012
                                                                                                                      // 7013
  if (this === p)                                                                                                     // 7014
    return true;                                                                                                      // 7015
                                                                                                                      // 7016
  // x1 * z2^2 == x2 * z1^2                                                                                           // 7017
  var z2 = this.z.redSqr();                                                                                           // 7018
  var pz2 = p.z.redSqr();                                                                                             // 7019
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)                                                       // 7020
    return false;                                                                                                     // 7021
                                                                                                                      // 7022
  // y1 * z2^3 == y2 * z1^3                                                                                           // 7023
  var z3 = z2.redMul(this.z);                                                                                         // 7024
  var pz3 = pz2.redMul(p.z);                                                                                          // 7025
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;                                                    // 7026
};                                                                                                                    // 7027
                                                                                                                      // 7028
JPoint.prototype.inspect = function inspect() {                                                                       // 7029
  if (this.isInfinity())                                                                                              // 7030
    return '<EC JPoint Infinity>';                                                                                    // 7031
  return '<EC JPoint x: ' + this.x.toString(16, 2) +                                                                  // 7032
      ' y: ' + this.y.toString(16, 2) +                                                                               // 7033
      ' z: ' + this.z.toString(16, 2) + '>';                                                                          // 7034
};                                                                                                                    // 7035
                                                                                                                      // 7036
JPoint.prototype.isInfinity = function isInfinity() {                                                                 // 7037
  // XXX This code assumes that zero is always zero in red                                                            // 7038
  return this.z.cmpn(0) === 0;                                                                                        // 7039
};                                                                                                                    // 7040
                                                                                                                      // 7041
},{"../../elliptic":30,"../curve":33,"bn.js":28,"inherits":144}],36:[function(require,module,exports){                // 7042
var curves = exports;                                                                                                 // 7043
                                                                                                                      // 7044
var hash = require('hash.js');                                                                                        // 7045
var bn = require('bn.js');                                                                                            // 7046
var elliptic = require('../elliptic');                                                                                // 7047
                                                                                                                      // 7048
var assert = elliptic.utils.assert;                                                                                   // 7049
                                                                                                                      // 7050
function PresetCurve(options) {                                                                                       // 7051
  if (options.type === 'short')                                                                                       // 7052
    this.curve = new elliptic.curve.short(options);                                                                   // 7053
  else if (options.type === 'edwards')                                                                                // 7054
    this.curve = new elliptic.curve.edwards(options);                                                                 // 7055
  else                                                                                                                // 7056
    this.curve = new elliptic.curve.mont(options);                                                                    // 7057
  this.g = this.curve.g;                                                                                              // 7058
  this.n = this.curve.n;                                                                                              // 7059
  this.hash = options.hash;                                                                                           // 7060
                                                                                                                      // 7061
  assert(this.g.validate(), 'Invalid curve');                                                                         // 7062
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');                                                 // 7063
}                                                                                                                     // 7064
curves.PresetCurve = PresetCurve;                                                                                     // 7065
                                                                                                                      // 7066
function defineCurve(name, options) {                                                                                 // 7067
  Object.defineProperty(curves, name, {                                                                               // 7068
    configurable: true,                                                                                               // 7069
    enumerable: true,                                                                                                 // 7070
    get: function() {                                                                                                 // 7071
      var curve = new PresetCurve(options);                                                                           // 7072
      Object.defineProperty(curves, name, {                                                                           // 7073
        configurable: true,                                                                                           // 7074
        enumerable: true,                                                                                             // 7075
        value: curve                                                                                                  // 7076
      });                                                                                                             // 7077
      return curve;                                                                                                   // 7078
    }                                                                                                                 // 7079
  });                                                                                                                 // 7080
}                                                                                                                     // 7081
                                                                                                                      // 7082
defineCurve('p192', {                                                                                                 // 7083
  type: 'short',                                                                                                      // 7084
  prime: 'p192',                                                                                                      // 7085
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',                                                         // 7086
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',                                                         // 7087
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',                                                         // 7088
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',                                                         // 7089
  hash: hash.sha256,                                                                                                  // 7090
  gRed: false,                                                                                                        // 7091
  g: [                                                                                                                // 7092
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',                                                          // 7093
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'                                                           // 7094
  ],                                                                                                                  // 7095
});                                                                                                                   // 7096
                                                                                                                      // 7097
defineCurve('p224', {                                                                                                 // 7098
  type: 'short',                                                                                                      // 7099
  prime: 'p224',                                                                                                      // 7100
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',                                                // 7101
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',                                                // 7102
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',                                                // 7103
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',                                                // 7104
  hash: hash.sha256,                                                                                                  // 7105
  gRed: false,                                                                                                        // 7106
  g: [                                                                                                                // 7107
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',                                                 // 7108
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'                                                  // 7109
  ],                                                                                                                  // 7110
});                                                                                                                   // 7111
                                                                                                                      // 7112
defineCurve('p256', {                                                                                                 // 7113
  type: 'short',                                                                                                      // 7114
  prime: null,                                                                                                        // 7115
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',                                       // 7116
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',                                       // 7117
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',                                       // 7118
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',                                       // 7119
  hash: hash.sha256,                                                                                                  // 7120
  gRed: false,                                                                                                        // 7121
  g: [                                                                                                                // 7122
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',                                        // 7123
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'                                         // 7124
  ],                                                                                                                  // 7125
});                                                                                                                   // 7126
                                                                                                                      // 7127
defineCurve('curve25519', {                                                                                           // 7128
  type: 'mont',                                                                                                       // 7129
  prime: 'p25519',                                                                                                    // 7130
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',                                           // 7131
  a: '76d06',                                                                                                         // 7132
  b: '0',                                                                                                             // 7133
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',                                           // 7134
  hash: hash.sha256,                                                                                                  // 7135
  gRed: false,                                                                                                        // 7136
  g: [                                                                                                                // 7137
    '9'                                                                                                               // 7138
  ]                                                                                                                   // 7139
});                                                                                                                   // 7140
                                                                                                                      // 7141
defineCurve('ed25519', {                                                                                              // 7142
  type: 'edwards',                                                                                                    // 7143
  prime: 'p25519',                                                                                                    // 7144
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',                                           // 7145
  a: '-1',                                                                                                            // 7146
  c: '1',                                                                                                             // 7147
  // -121665 * (121666^(-1)) (mod P)                                                                                  // 7148
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',                                           // 7149
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',                                           // 7150
  hash: hash.sha256,                                                                                                  // 7151
  gRed: false,                                                                                                        // 7152
  g: [                                                                                                                // 7153
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',                                               // 7154
                                                                                                                      // 7155
    // 4/5                                                                                                            // 7156
    '6666666666666666666666666666666666666666666666666666666666666658'                                                // 7157
  ]                                                                                                                   // 7158
});                                                                                                                   // 7159
                                                                                                                      // 7160
defineCurve('secp256k1', {                                                                                            // 7161
  type: 'short',                                                                                                      // 7162
  prime: 'k256',                                                                                                      // 7163
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',                                       // 7164
  a: '0',                                                                                                             // 7165
  b: '7',                                                                                                             // 7166
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',                                       // 7167
  h: '1',                                                                                                             // 7168
  hash: hash.sha256,                                                                                                  // 7169
                                                                                                                      // 7170
  // Precomputed endomorphism                                                                                         // 7171
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',                                           // 7172
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',                                         // 7173
  basis: [                                                                                                            // 7174
    {                                                                                                                 // 7175
      a: '3086d221a7d46bcde86c90e49284eb15',                                                                          // 7176
      b: '-e4437ed6010e88286f547fa90abfe4c3'                                                                          // 7177
    },                                                                                                                // 7178
    {                                                                                                                 // 7179
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',                                                                         // 7180
      b: '3086d221a7d46bcde86c90e49284eb15'                                                                           // 7181
    }                                                                                                                 // 7182
  ],                                                                                                                  // 7183
                                                                                                                      // 7184
  gRed: false,                                                                                                        // 7185
  g: [                                                                                                                // 7186
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',                                               // 7187
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',                                               // 7188
    {                                                                                                                 // 7189
      'doubles': {                                                                                                    // 7190
        'step': 4,                                                                                                    // 7191
        'points': [                                                                                                   // 7192
          [                                                                                                           // 7193
            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',                                       // 7194
            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'                                        // 7195
          ],                                                                                                          // 7196
          [                                                                                                           // 7197
            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',                                       // 7198
            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'                                        // 7199
          ],                                                                                                          // 7200
          [                                                                                                           // 7201
            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',                                       // 7202
            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'                                        // 7203
          ],                                                                                                          // 7204
          [                                                                                                           // 7205
            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',                                       // 7206
            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'                                         // 7207
          ],                                                                                                          // 7208
          [                                                                                                           // 7209
            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',                                       // 7210
            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'                                        // 7211
          ],                                                                                                          // 7212
          [                                                                                                           // 7213
            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',                                       // 7214
            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'                                        // 7215
          ],                                                                                                          // 7216
          [                                                                                                           // 7217
            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',                                       // 7218
            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'                                        // 7219
          ],                                                                                                          // 7220
          [                                                                                                           // 7221
            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',                                       // 7222
            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'                                        // 7223
          ],                                                                                                          // 7224
          [                                                                                                           // 7225
            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',                                       // 7226
            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'                                        // 7227
          ],                                                                                                          // 7228
          [                                                                                                           // 7229
            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',                                       // 7230
            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'                                        // 7231
          ],                                                                                                          // 7232
          [                                                                                                           // 7233
            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',                                       // 7234
            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'                                        // 7235
          ],                                                                                                          // 7236
          [                                                                                                           // 7237
            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',                                       // 7238
            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'                                        // 7239
          ],                                                                                                          // 7240
          [                                                                                                           // 7241
            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',                                       // 7242
            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'                                        // 7243
          ],                                                                                                          // 7244
          [                                                                                                           // 7245
            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',                                       // 7246
            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'                                        // 7247
          ],                                                                                                          // 7248
          [                                                                                                           // 7249
            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',                                        // 7250
            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'                                        // 7251
          ],                                                                                                          // 7252
          [                                                                                                           // 7253
            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',                                       // 7254
            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'                                        // 7255
          ],                                                                                                          // 7256
          [                                                                                                           // 7257
            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',                                       // 7258
            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'                                        // 7259
          ],                                                                                                          // 7260
          [                                                                                                           // 7261
            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',                                        // 7262
            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'                                        // 7263
          ],                                                                                                          // 7264
          [                                                                                                           // 7265
            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',                                       // 7266
            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'                                        // 7267
          ],                                                                                                          // 7268
          [                                                                                                           // 7269
            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',                                       // 7270
            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'                                        // 7271
          ],                                                                                                          // 7272
          [                                                                                                           // 7273
            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',                                       // 7274
            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'                                        // 7275
          ],                                                                                                          // 7276
          [                                                                                                           // 7277
            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',                                       // 7278
            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'                                        // 7279
          ],                                                                                                          // 7280
          [                                                                                                           // 7281
            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',                                       // 7282
            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'                                        // 7283
          ],                                                                                                          // 7284
          [                                                                                                           // 7285
            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',                                       // 7286
            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'                                        // 7287
          ],                                                                                                          // 7288
          [                                                                                                           // 7289
            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',                                       // 7290
            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'                                        // 7291
          ],                                                                                                          // 7292
          [                                                                                                           // 7293
            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',                                       // 7294
            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'                                        // 7295
          ],                                                                                                          // 7296
          [                                                                                                           // 7297
            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',                                       // 7298
            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'                                        // 7299
          ],                                                                                                          // 7300
          [                                                                                                           // 7301
            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',                                       // 7302
            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'                                        // 7303
          ],                                                                                                          // 7304
          [                                                                                                           // 7305
            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',                                       // 7306
            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'                                        // 7307
          ],                                                                                                          // 7308
          [                                                                                                           // 7309
            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',                                       // 7310
            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'                                        // 7311
          ],                                                                                                          // 7312
          [                                                                                                           // 7313
            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',                                       // 7314
            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'                                         // 7315
          ],                                                                                                          // 7316
          [                                                                                                           // 7317
            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',                                       // 7318
            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'                                        // 7319
          ],                                                                                                          // 7320
          [                                                                                                           // 7321
            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',                                       // 7322
            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'                                        // 7323
          ],                                                                                                          // 7324
          [                                                                                                           // 7325
            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',                                       // 7326
            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'                                        // 7327
          ],                                                                                                          // 7328
          [                                                                                                           // 7329
            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',                                       // 7330
            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'                                        // 7331
          ],                                                                                                          // 7332
          [                                                                                                           // 7333
            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',                                       // 7334
            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'                                         // 7335
          ],                                                                                                          // 7336
          [                                                                                                           // 7337
            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',                                       // 7338
            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'                                        // 7339
          ],                                                                                                          // 7340
          [                                                                                                           // 7341
            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',                                       // 7342
            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'                                        // 7343
          ],                                                                                                          // 7344
          [                                                                                                           // 7345
            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',                                       // 7346
            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'                                          // 7347
          ],                                                                                                          // 7348
          [                                                                                                           // 7349
            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',                                       // 7350
            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'                                        // 7351
          ],                                                                                                          // 7352
          [                                                                                                           // 7353
            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',                                       // 7354
            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'                                        // 7355
          ],                                                                                                          // 7356
          [                                                                                                           // 7357
            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',                                       // 7358
            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'                                        // 7359
          ],                                                                                                          // 7360
          [                                                                                                           // 7361
            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',                                       // 7362
            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'                                        // 7363
          ],                                                                                                          // 7364
          [                                                                                                           // 7365
            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',                                        // 7366
            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'                                        // 7367
          ],                                                                                                          // 7368
          [                                                                                                           // 7369
            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',                                       // 7370
            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'                                        // 7371
          ],                                                                                                          // 7372
          [                                                                                                           // 7373
            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',                                       // 7374
            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'                                        // 7375
          ],                                                                                                          // 7376
          [                                                                                                           // 7377
            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',                                       // 7378
            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'                                        // 7379
          ],                                                                                                          // 7380
          [                                                                                                           // 7381
            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',                                       // 7382
            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'                                        // 7383
          ],                                                                                                          // 7384
          [                                                                                                           // 7385
            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',                                       // 7386
            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'                                        // 7387
          ],                                                                                                          // 7388
          [                                                                                                           // 7389
            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',                                       // 7390
            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'                                        // 7391
          ],                                                                                                          // 7392
          [                                                                                                           // 7393
            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',                                       // 7394
            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'                                        // 7395
          ],                                                                                                          // 7396
          [                                                                                                           // 7397
            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',                                       // 7398
            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'                                        // 7399
          ],                                                                                                          // 7400
          [                                                                                                           // 7401
            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',                                       // 7402
            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'                                        // 7403
          ],                                                                                                          // 7404
          [                                                                                                           // 7405
            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',                                       // 7406
            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'                                        // 7407
          ],                                                                                                          // 7408
          [                                                                                                           // 7409
            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',                                       // 7410
            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'                                        // 7411
          ],                                                                                                          // 7412
          [                                                                                                           // 7413
            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',                                       // 7414
            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'                                        // 7415
          ],                                                                                                          // 7416
          [                                                                                                           // 7417
            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',                                       // 7418
            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'                                        // 7419
          ],                                                                                                          // 7420
          [                                                                                                           // 7421
            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',                                       // 7422
            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'                                        // 7423
          ],                                                                                                          // 7424
          [                                                                                                           // 7425
            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',                                       // 7426
            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'                                        // 7427
          ],                                                                                                          // 7428
          [                                                                                                           // 7429
            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',                                       // 7430
            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'                                        // 7431
          ],                                                                                                          // 7432
          [                                                                                                           // 7433
            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',                                       // 7434
            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'                                         // 7435
          ],                                                                                                          // 7436
          [                                                                                                           // 7437
            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',                                       // 7438
            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'                                        // 7439
          ],                                                                                                          // 7440
          [                                                                                                           // 7441
            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',                                        // 7442
            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'                                        // 7443
          ],                                                                                                          // 7444
          [                                                                                                           // 7445
            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',                                       // 7446
            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'                                        // 7447
          ],                                                                                                          // 7448
          [                                                                                                           // 7449
            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',                                       // 7450
            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'                                        // 7451
          ]                                                                                                           // 7452
        ]                                                                                                             // 7453
      },                                                                                                              // 7454
      'naf': {                                                                                                        // 7455
        'wnd': 7,                                                                                                     // 7456
        'points': [                                                                                                   // 7457
          [                                                                                                           // 7458
            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',                                       // 7459
            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'                                        // 7460
          ],                                                                                                          // 7461
          [                                                                                                           // 7462
            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',                                       // 7463
            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'                                        // 7464
          ],                                                                                                          // 7465
          [                                                                                                           // 7466
            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',                                       // 7467
            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'                                        // 7468
          ],                                                                                                          // 7469
          [                                                                                                           // 7470
            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',                                       // 7471
            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'                                        // 7472
          ],                                                                                                          // 7473
          [                                                                                                           // 7474
            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',                                       // 7475
            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'                                        // 7476
          ],                                                                                                          // 7477
          [                                                                                                           // 7478
            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',                                       // 7479
            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'                                         // 7480
          ],                                                                                                          // 7481
          [                                                                                                           // 7482
            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',                                       // 7483
            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'                                        // 7484
          ],                                                                                                          // 7485
          [                                                                                                           // 7486
            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',                                       // 7487
            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'                                        // 7488
          ],                                                                                                          // 7489
          [                                                                                                           // 7490
            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',                                       // 7491
            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'                                        // 7492
          ],                                                                                                          // 7493
          [                                                                                                           // 7494
            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',                                       // 7495
            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'                                        // 7496
          ],                                                                                                          // 7497
          [                                                                                                           // 7498
            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',                                       // 7499
            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'                                         // 7500
          ],                                                                                                          // 7501
          [                                                                                                           // 7502
            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',                                       // 7503
            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'                                        // 7504
          ],                                                                                                          // 7505
          [                                                                                                           // 7506
            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',                                       // 7507
            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'                                        // 7508
          ],                                                                                                          // 7509
          [                                                                                                           // 7510
            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',                                       // 7511
            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'                                        // 7512
          ],                                                                                                          // 7513
          [                                                                                                           // 7514
            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',                                       // 7515
            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'                                        // 7516
          ],                                                                                                          // 7517
          [                                                                                                           // 7518
            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',                                       // 7519
            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'                                        // 7520
          ],                                                                                                          // 7521
          [                                                                                                           // 7522
            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',                                       // 7523
            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'                                         // 7524
          ],                                                                                                          // 7525
          [                                                                                                           // 7526
            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',                                       // 7527
            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'                                        // 7528
          ],                                                                                                          // 7529
          [                                                                                                           // 7530
            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',                                       // 7531
            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'                                        // 7532
          ],                                                                                                          // 7533
          [                                                                                                           // 7534
            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',                                       // 7535
            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'                                         // 7536
          ],                                                                                                          // 7537
          [                                                                                                           // 7538
            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',                                       // 7539
            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'                                        // 7540
          ],                                                                                                          // 7541
          [                                                                                                           // 7542
            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',                                        // 7543
            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'                                        // 7544
          ],                                                                                                          // 7545
          [                                                                                                           // 7546
            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',                                       // 7547
            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'                                        // 7548
          ],                                                                                                          // 7549
          [                                                                                                           // 7550
            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',                                       // 7551
            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'                                        // 7552
          ],                                                                                                          // 7553
          [                                                                                                           // 7554
            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',                                       // 7555
            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'                                        // 7556
          ],                                                                                                          // 7557
          [                                                                                                           // 7558
            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',                                       // 7559
            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'                                        // 7560
          ],                                                                                                          // 7561
          [                                                                                                           // 7562
            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',                                       // 7563
            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'                                        // 7564
          ],                                                                                                          // 7565
          [                                                                                                           // 7566
            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',                                       // 7567
            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'                                        // 7568
          ],                                                                                                          // 7569
          [                                                                                                           // 7570
            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',                                       // 7571
            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'                                         // 7572
          ],                                                                                                          // 7573
          [                                                                                                           // 7574
            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',                                       // 7575
            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'                                         // 7576
          ],                                                                                                          // 7577
          [                                                                                                           // 7578
            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',                                       // 7579
            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'                                        // 7580
          ],                                                                                                          // 7581
          [                                                                                                           // 7582
            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',                                       // 7583
            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'                                        // 7584
          ],                                                                                                          // 7585
          [                                                                                                           // 7586
            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',                                       // 7587
            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'                                        // 7588
          ],                                                                                                          // 7589
          [                                                                                                           // 7590
            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',                                       // 7591
            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'                                        // 7592
          ],                                                                                                          // 7593
          [                                                                                                           // 7594
            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',                                       // 7595
            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'                                        // 7596
          ],                                                                                                          // 7597
          [                                                                                                           // 7598
            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',                                       // 7599
            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'                                        // 7600
          ],                                                                                                          // 7601
          [                                                                                                           // 7602
            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',                                       // 7603
            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'                                        // 7604
          ],                                                                                                          // 7605
          [                                                                                                           // 7606
            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',                                       // 7607
            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'                                        // 7608
          ],                                                                                                          // 7609
          [                                                                                                           // 7610
            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',                                       // 7611
            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'                                        // 7612
          ],                                                                                                          // 7613
          [                                                                                                           // 7614
            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',                                       // 7615
            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'                                        // 7616
          ],                                                                                                          // 7617
          [                                                                                                           // 7618
            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',                                       // 7619
            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'                                        // 7620
          ],                                                                                                          // 7621
          [                                                                                                           // 7622
            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',                                       // 7623
            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'                                        // 7624
          ],                                                                                                          // 7625
          [                                                                                                           // 7626
            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',                                       // 7627
            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'                                        // 7628
          ],                                                                                                          // 7629
          [                                                                                                           // 7630
            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',                                       // 7631
            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'                                        // 7632
          ],                                                                                                          // 7633
          [                                                                                                           // 7634
            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',                                       // 7635
            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'                                        // 7636
          ],                                                                                                          // 7637
          [                                                                                                           // 7638
            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',                                       // 7639
            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'                                        // 7640
          ],                                                                                                          // 7641
          [                                                                                                           // 7642
            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',                                       // 7643
            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'                                        // 7644
          ],                                                                                                          // 7645
          [                                                                                                           // 7646
            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',                                       // 7647
            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'                                        // 7648
          ],                                                                                                          // 7649
          [                                                                                                           // 7650
            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',                                       // 7651
            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'                                         // 7652
          ],                                                                                                          // 7653
          [                                                                                                           // 7654
            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',                                       // 7655
            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'                                        // 7656
          ],                                                                                                          // 7657
          [                                                                                                           // 7658
            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',                                       // 7659
            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'                                         // 7660
          ],                                                                                                          // 7661
          [                                                                                                           // 7662
            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',                                       // 7663
            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'                                        // 7664
          ],                                                                                                          // 7665
          [                                                                                                           // 7666
            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',                                       // 7667
            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'                                        // 7668
          ],                                                                                                          // 7669
          [                                                                                                           // 7670
            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',                                       // 7671
            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'                                        // 7672
          ],                                                                                                          // 7673
          [                                                                                                           // 7674
            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',                                       // 7675
            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'                                        // 7676
          ],                                                                                                          // 7677
          [                                                                                                           // 7678
            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',                                       // 7679
            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'                                        // 7680
          ],                                                                                                          // 7681
          [                                                                                                           // 7682
            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',                                       // 7683
            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'                                        // 7684
          ],                                                                                                          // 7685
          [                                                                                                           // 7686
            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',                                       // 7687
            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'                                        // 7688
          ],                                                                                                          // 7689
          [                                                                                                           // 7690
            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',                                        // 7691
            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'                                        // 7692
          ],                                                                                                          // 7693
          [                                                                                                           // 7694
            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',                                       // 7695
            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'                                        // 7696
          ],                                                                                                          // 7697
          [                                                                                                           // 7698
            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',                                       // 7699
            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'                                        // 7700
          ],                                                                                                          // 7701
          [                                                                                                           // 7702
            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',                                       // 7703
            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'                                         // 7704
          ],                                                                                                          // 7705
          [                                                                                                           // 7706
            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',                                       // 7707
            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'                                         // 7708
          ],                                                                                                          // 7709
          [                                                                                                           // 7710
            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',                                       // 7711
            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'                                        // 7712
          ],                                                                                                          // 7713
          [                                                                                                           // 7714
            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',                                       // 7715
            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'                                        // 7716
          ],                                                                                                          // 7717
          [                                                                                                           // 7718
            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',                                        // 7719
            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'                                        // 7720
          ],                                                                                                          // 7721
          [                                                                                                           // 7722
            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',                                       // 7723
            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'                                        // 7724
          ],                                                                                                          // 7725
          [                                                                                                           // 7726
            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',                                       // 7727
            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'                                         // 7728
          ],                                                                                                          // 7729
          [                                                                                                           // 7730
            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',                                       // 7731
            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'                                        // 7732
          ],                                                                                                          // 7733
          [                                                                                                           // 7734
            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',                                       // 7735
            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'                                         // 7736
          ],                                                                                                          // 7737
          [                                                                                                           // 7738
            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',                                       // 7739
            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'                                        // 7740
          ],                                                                                                          // 7741
          [                                                                                                           // 7742
            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',                                        // 7743
            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'                                        // 7744
          ],                                                                                                          // 7745
          [                                                                                                           // 7746
            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',                                       // 7747
            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'                                        // 7748
          ],                                                                                                          // 7749
          [                                                                                                           // 7750
            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',                                       // 7751
            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'                                        // 7752
          ],                                                                                                          // 7753
          [                                                                                                           // 7754
            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',                                       // 7755
            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'                                        // 7756
          ],                                                                                                          // 7757
          [                                                                                                           // 7758
            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',                                         // 7759
            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'                                        // 7760
          ],                                                                                                          // 7761
          [                                                                                                           // 7762
            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',                                       // 7763
            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'                                        // 7764
          ],                                                                                                          // 7765
          [                                                                                                           // 7766
            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',                                       // 7767
            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'                                        // 7768
          ],                                                                                                          // 7769
          [                                                                                                           // 7770
            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',                                       // 7771
            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'                                        // 7772
          ],                                                                                                          // 7773
          [                                                                                                           // 7774
            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',                                       // 7775
            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'                                        // 7776
          ],                                                                                                          // 7777
          [                                                                                                           // 7778
            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',                                       // 7779
            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'                                        // 7780
          ],                                                                                                          // 7781
          [                                                                                                           // 7782
            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',                                        // 7783
            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'                                        // 7784
          ],                                                                                                          // 7785
          [                                                                                                           // 7786
            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',                                       // 7787
            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'                                         // 7788
          ],                                                                                                          // 7789
          [                                                                                                           // 7790
            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',                                       // 7791
            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'                                        // 7792
          ],                                                                                                          // 7793
          [                                                                                                           // 7794
            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',                                       // 7795
            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'                                        // 7796
          ],                                                                                                          // 7797
          [                                                                                                           // 7798
            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',                                       // 7799
            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'                                        // 7800
          ],                                                                                                          // 7801
          [                                                                                                           // 7802
            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',                                       // 7803
            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'                                        // 7804
          ],                                                                                                          // 7805
          [                                                                                                           // 7806
            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',                                       // 7807
            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'                                        // 7808
          ],                                                                                                          // 7809
          [                                                                                                           // 7810
            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',                                       // 7811
            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'                                        // 7812
          ],                                                                                                          // 7813
          [                                                                                                           // 7814
            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',                                       // 7815
            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'                                        // 7816
          ],                                                                                                          // 7817
          [                                                                                                           // 7818
            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',                                       // 7819
            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'                                        // 7820
          ],                                                                                                          // 7821
          [                                                                                                           // 7822
            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',                                       // 7823
            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'                                        // 7824
          ],                                                                                                          // 7825
          [                                                                                                           // 7826
            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',                                       // 7827
            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'                                        // 7828
          ],                                                                                                          // 7829
          [                                                                                                           // 7830
            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',                                       // 7831
            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'                                        // 7832
          ],                                                                                                          // 7833
          [                                                                                                           // 7834
            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',                                       // 7835
            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'                                        // 7836
          ],                                                                                                          // 7837
          [                                                                                                           // 7838
            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',                                       // 7839
            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'                                        // 7840
          ],                                                                                                          // 7841
          [                                                                                                           // 7842
            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',                                       // 7843
            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'                                        // 7844
          ],                                                                                                          // 7845
          [                                                                                                           // 7846
            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',                                       // 7847
            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'                                        // 7848
          ],                                                                                                          // 7849
          [                                                                                                           // 7850
            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',                                       // 7851
            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'                                        // 7852
          ],                                                                                                          // 7853
          [                                                                                                           // 7854
            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',                                       // 7855
            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'                                        // 7856
          ],                                                                                                          // 7857
          [                                                                                                           // 7858
            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',                                       // 7859
            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'                                        // 7860
          ],                                                                                                          // 7861
          [                                                                                                           // 7862
            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',                                       // 7863
            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'                                         // 7864
          ],                                                                                                          // 7865
          [                                                                                                           // 7866
            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',                                       // 7867
            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'                                        // 7868
          ],                                                                                                          // 7869
          [                                                                                                           // 7870
            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',                                       // 7871
            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'                                        // 7872
          ],                                                                                                          // 7873
          [                                                                                                           // 7874
            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',                                       // 7875
            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'                                         // 7876
          ],                                                                                                          // 7877
          [                                                                                                           // 7878
            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',                                       // 7879
            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'                                        // 7880
          ],                                                                                                          // 7881
          [                                                                                                           // 7882
            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',                                       // 7883
            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'                                        // 7884
          ],                                                                                                          // 7885
          [                                                                                                           // 7886
            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',                                       // 7887
            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'                                        // 7888
          ],                                                                                                          // 7889
          [                                                                                                           // 7890
            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',                                       // 7891
            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'                                        // 7892
          ],                                                                                                          // 7893
          [                                                                                                           // 7894
            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',                                       // 7895
            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'                                         // 7896
          ],                                                                                                          // 7897
          [                                                                                                           // 7898
            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',                                       // 7899
            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'                                        // 7900
          ],                                                                                                          // 7901
          [                                                                                                           // 7902
            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',                                       // 7903
            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'                                        // 7904
          ],                                                                                                          // 7905
          [                                                                                                           // 7906
            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',                                       // 7907
            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'                                        // 7908
          ],                                                                                                          // 7909
          [                                                                                                           // 7910
            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',                                       // 7911
            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'                                        // 7912
          ],                                                                                                          // 7913
          [                                                                                                           // 7914
            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',                                       // 7915
            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'                                        // 7916
          ],                                                                                                          // 7917
          [                                                                                                           // 7918
            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',                                       // 7919
            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'                                        // 7920
          ],                                                                                                          // 7921
          [                                                                                                           // 7922
            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',                                       // 7923
            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'                                        // 7924
          ],                                                                                                          // 7925
          [                                                                                                           // 7926
            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',                                       // 7927
            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'                                        // 7928
          ],                                                                                                          // 7929
          [                                                                                                           // 7930
            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',                                       // 7931
            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'                                        // 7932
          ],                                                                                                          // 7933
          [                                                                                                           // 7934
            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',                                       // 7935
            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'                                        // 7936
          ],                                                                                                          // 7937
          [                                                                                                           // 7938
            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',                                       // 7939
            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'                                        // 7940
          ],                                                                                                          // 7941
          [                                                                                                           // 7942
            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',                                       // 7943
            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'                                        // 7944
          ],                                                                                                          // 7945
          [                                                                                                           // 7946
            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',                                       // 7947
            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'                                         // 7948
          ],                                                                                                          // 7949
          [                                                                                                           // 7950
            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',                                       // 7951
            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'                                        // 7952
          ],                                                                                                          // 7953
          [                                                                                                           // 7954
            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',                                       // 7955
            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'                                        // 7956
          ],                                                                                                          // 7957
          [                                                                                                           // 7958
            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',                                       // 7959
            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'                                        // 7960
          ],                                                                                                          // 7961
          [                                                                                                           // 7962
            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',                                       // 7963
            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'                                        // 7964
          ]                                                                                                           // 7965
        ]                                                                                                             // 7966
      }                                                                                                               // 7967
    }                                                                                                                 // 7968
  ]                                                                                                                   // 7969
});                                                                                                                   // 7970
                                                                                                                      // 7971
},{"../elliptic":30,"bn.js":28,"hash.js":43}],37:[function(require,module,exports){                                   // 7972
var bn = require('bn.js');                                                                                            // 7973
var elliptic = require('../../elliptic');                                                                             // 7974
var utils = elliptic.utils;                                                                                           // 7975
var assert = utils.assert;                                                                                            // 7976
                                                                                                                      // 7977
var KeyPair = require('./key');                                                                                       // 7978
var Signature = require('./signature');                                                                               // 7979
                                                                                                                      // 7980
function EC(options) {                                                                                                // 7981
  if (!(this instanceof EC))                                                                                          // 7982
    return new EC(options);                                                                                           // 7983
                                                                                                                      // 7984
  // Shortcut `elliptic.ec(curve-name)`                                                                               // 7985
  if (typeof options === 'string') {                                                                                  // 7986
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);                                      // 7987
                                                                                                                      // 7988
    options = elliptic.curves[options];                                                                               // 7989
  }                                                                                                                   // 7990
                                                                                                                      // 7991
  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`                                                            // 7992
  if (options instanceof elliptic.curves.PresetCurve)                                                                 // 7993
    options = { curve: options };                                                                                     // 7994
                                                                                                                      // 7995
  this.curve = options.curve.curve;                                                                                   // 7996
  this.n = this.curve.n;                                                                                              // 7997
  this.nh = this.n.shrn(1);                                                                                           // 7998
  this.g = this.curve.g;                                                                                              // 7999
                                                                                                                      // 8000
  // Point on curve                                                                                                   // 8001
  this.g = options.curve.g;                                                                                           // 8002
  this.g.precompute(options.curve.n.bitLength() + 1);                                                                 // 8003
                                                                                                                      // 8004
  // Hash for function for DRBG                                                                                       // 8005
  this.hash = options.hash || options.curve.hash;                                                                     // 8006
}                                                                                                                     // 8007
module.exports = EC;                                                                                                  // 8008
                                                                                                                      // 8009
EC.prototype.keyPair = function keyPair(priv, pub) {                                                                  // 8010
  return new KeyPair(this, priv, pub);                                                                                // 8011
};                                                                                                                    // 8012
                                                                                                                      // 8013
EC.prototype.genKeyPair = function genKeyPair(options) {                                                              // 8014
  if (!options)                                                                                                       // 8015
    options = {};                                                                                                     // 8016
                                                                                                                      // 8017
  // Instantiate Hmac_DRBG                                                                                            // 8018
  var drbg = new elliptic.hmacDRBG({                                                                                  // 8019
    hash: this.hash,                                                                                                  // 8020
    pers: options.pers,                                                                                               // 8021
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),                                                // 8022
    nonce: this.n.toArray()                                                                                           // 8023
  });                                                                                                                 // 8024
                                                                                                                      // 8025
  var bytes = this.n.byteLength();                                                                                    // 8026
  var ns2 = this.n.sub(new bn(2));                                                                                    // 8027
  do {                                                                                                                // 8028
    var priv = new bn(drbg.generate(bytes));                                                                          // 8029
    if (priv.cmp(ns2) > 0)                                                                                            // 8030
      continue;                                                                                                       // 8031
                                                                                                                      // 8032
    priv.iaddn(1);                                                                                                    // 8033
    return this.keyPair(priv);                                                                                        // 8034
  } while (true);                                                                                                     // 8035
};                                                                                                                    // 8036
                                                                                                                      // 8037
EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {                                                    // 8038
  var delta = msg.byteLength() * 8 - this.n.bitLength();                                                              // 8039
  if (delta > 0)                                                                                                      // 8040
    msg = msg.shrn(delta);                                                                                            // 8041
  if (!truncOnly && msg.cmp(this.n) >= 0)                                                                             // 8042
    return msg.sub(this.n);                                                                                           // 8043
  else                                                                                                                // 8044
    return msg;                                                                                                       // 8045
};                                                                                                                    // 8046
                                                                                                                      // 8047
EC.prototype.sign = function sign(msg, key, options) {                                                                // 8048
  key = this.keyPair(key, 'hex');                                                                                     // 8049
  msg = this._truncateToN(new bn(msg, 16));                                                                           // 8050
  if (!options)                                                                                                       // 8051
    options = {};                                                                                                     // 8052
                                                                                                                      // 8053
  // Zero-extend key to provide enough entropy                                                                        // 8054
  var bytes = this.n.byteLength();                                                                                    // 8055
  var bkey = key.getPrivate().toArray();                                                                              // 8056
  for (var i = bkey.length; i < 21; i++)                                                                              // 8057
    bkey.unshift(0);                                                                                                  // 8058
                                                                                                                      // 8059
  // Zero-extend nonce to have the same byte size as N                                                                // 8060
  var nonce = msg.toArray();                                                                                          // 8061
  for (var i = nonce.length; i < bytes; i++)                                                                          // 8062
    nonce.unshift(0);                                                                                                 // 8063
                                                                                                                      // 8064
  // Instantiate Hmac_DRBG                                                                                            // 8065
  var drbg = new elliptic.hmacDRBG({                                                                                  // 8066
    hash: this.hash,                                                                                                  // 8067
    entropy: bkey,                                                                                                    // 8068
    nonce: nonce                                                                                                      // 8069
  });                                                                                                                 // 8070
                                                                                                                      // 8071
  // Number of bytes to generate                                                                                      // 8072
  var ns1 = this.n.sub(new bn(1));                                                                                    // 8073
  do {                                                                                                                // 8074
    var k = new bn(drbg.generate(this.n.byteLength()));                                                               // 8075
    k = this._truncateToN(k, true);                                                                                   // 8076
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)                                                                            // 8077
      continue;                                                                                                       // 8078
                                                                                                                      // 8079
    var kp = this.g.mul(k);                                                                                           // 8080
    if (kp.isInfinity())                                                                                              // 8081
      continue;                                                                                                       // 8082
                                                                                                                      // 8083
    var r = kp.getX().mod(this.n);                                                                                    // 8084
    if (r.cmpn(0) === 0)                                                                                              // 8085
      continue;                                                                                                       // 8086
                                                                                                                      // 8087
    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);                                        // 8088
    if (s.cmpn(0) === 0)                                                                                              // 8089
      continue;                                                                                                       // 8090
                                                                                                                      // 8091
    // Use complement of `s`, if it is > `n / 2`                                                                      // 8092
    if (options.canonical && s.cmp(this.nh) > 0)                                                                      // 8093
      s = this.n.sub(s);                                                                                              // 8094
                                                                                                                      // 8095
    return new Signature(r, s);                                                                                       // 8096
  } while (true);                                                                                                     // 8097
};                                                                                                                    // 8098
                                                                                                                      // 8099
EC.prototype.verify = function verify(msg, signature, key) {                                                          // 8100
  msg = this._truncateToN(new bn(msg, 16));                                                                           // 8101
  key = this.keyPair(key, 'hex');                                                                                     // 8102
  signature = new Signature(signature, 'hex');                                                                        // 8103
                                                                                                                      // 8104
  // Perform primitive values validation                                                                              // 8105
  var r = signature.r;                                                                                                // 8106
  var s = signature.s;                                                                                                // 8107
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)                                                                            // 8108
    return false;                                                                                                     // 8109
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)                                                                            // 8110
    return false;                                                                                                     // 8111
                                                                                                                      // 8112
  // Validate signature                                                                                               // 8113
  var sinv = s.invm(this.n);                                                                                          // 8114
  var u1 = sinv.mul(msg).mod(this.n);                                                                                 // 8115
  var u2 = sinv.mul(r).mod(this.n);                                                                                   // 8116
                                                                                                                      // 8117
  var p = this.g.mulAdd(u1, key.getPublic(), u2);                                                                     // 8118
  if (p.isInfinity())                                                                                                 // 8119
    return false;                                                                                                     // 8120
                                                                                                                      // 8121
  return p.getX().mod(this.n).cmp(r) === 0;                                                                           // 8122
};                                                                                                                    // 8123
                                                                                                                      // 8124
},{"../../elliptic":30,"./key":38,"./signature":39,"bn.js":28}],38:[function(require,module,exports){                 // 8125
var bn = require('bn.js');                                                                                            // 8126
                                                                                                                      // 8127
var elliptic = require('../../elliptic');                                                                             // 8128
var utils = elliptic.utils;                                                                                           // 8129
var assert = utils.assert;                                                                                            // 8130
                                                                                                                      // 8131
function KeyPair(ec, priv, pub) {                                                                                     // 8132
  if (priv instanceof KeyPair)                                                                                        // 8133
    return priv;                                                                                                      // 8134
  if (pub instanceof KeyPair)                                                                                         // 8135
    return pub;                                                                                                       // 8136
                                                                                                                      // 8137
  if (!priv) {                                                                                                        // 8138
    priv = pub;                                                                                                       // 8139
    pub = null;                                                                                                       // 8140
  }                                                                                                                   // 8141
  if (priv !== null && typeof priv === 'object') {                                                                    // 8142
    if (priv.x) {                                                                                                     // 8143
      // KeyPair(public)                                                                                              // 8144
      pub = priv;                                                                                                     // 8145
      priv = null;                                                                                                    // 8146
    } else if (priv.priv || priv.pub) {                                                                               // 8147
      // KeyPair({ priv: ..., pub: ... })                                                                             // 8148
      pub = priv.pub;                                                                                                 // 8149
      priv = priv.priv;                                                                                               // 8150
    }                                                                                                                 // 8151
  }                                                                                                                   // 8152
                                                                                                                      // 8153
  this.ec = ec;                                                                                                       // 8154
  this.priv = null;                                                                                                   // 8155
  this.pub = null;                                                                                                    // 8156
                                                                                                                      // 8157
  // KeyPair(public, 'hex')                                                                                           // 8158
  if (this._importPublicHex(priv, pub))                                                                               // 8159
    return;                                                                                                           // 8160
                                                                                                                      // 8161
  if (pub === 'hex')                                                                                                  // 8162
    pub = null;                                                                                                       // 8163
                                                                                                                      // 8164
  // KeyPair(priv, pub)                                                                                               // 8165
  if (priv)                                                                                                           // 8166
    this._importPrivate(priv);                                                                                        // 8167
  if (pub)                                                                                                            // 8168
    this._importPublic(pub);                                                                                          // 8169
}                                                                                                                     // 8170
module.exports = KeyPair;                                                                                             // 8171
                                                                                                                      // 8172
KeyPair.prototype.validate = function validate() {                                                                    // 8173
  var pub = this.getPublic();                                                                                         // 8174
                                                                                                                      // 8175
  if (pub.isInfinity())                                                                                               // 8176
    return { result: false, reason: 'Invalid public key' };                                                           // 8177
  if (!pub.validate())                                                                                                // 8178
    return { result: false, reason: 'Public key is not a point' };                                                    // 8179
  if (!pub.mul(this.ec.curve.n).isInfinity())                                                                         // 8180
    return { result: false, reason: 'Public key * N != O' };                                                          // 8181
                                                                                                                      // 8182
  return { result: true, reason: null };                                                                              // 8183
};                                                                                                                    // 8184
                                                                                                                      // 8185
KeyPair.prototype.getPublic = function getPublic(compact, enc) {                                                      // 8186
  if (!this.pub)                                                                                                      // 8187
    this.pub = this.ec.g.mul(this.priv);                                                                              // 8188
                                                                                                                      // 8189
  // compact is optional argument                                                                                     // 8190
  if (typeof compact === 'string') {                                                                                  // 8191
    enc = compact;                                                                                                    // 8192
    compact = null;                                                                                                   // 8193
  }                                                                                                                   // 8194
                                                                                                                      // 8195
  if (!enc)                                                                                                           // 8196
    return this.pub;                                                                                                  // 8197
                                                                                                                      // 8198
  var len = this.ec.curve.p.byteLength();                                                                             // 8199
  var x = this.pub.getX().toArray();                                                                                  // 8200
                                                                                                                      // 8201
  for (var i = x.length; i < len; i++)                                                                                // 8202
    x.unshift(0);                                                                                                     // 8203
                                                                                                                      // 8204
  if (compact) {                                                                                                      // 8205
    var res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);                                                   // 8206
  } else {                                                                                                            // 8207
    var y = this.pub.getY().toArray();                                                                                // 8208
    for (var i = y.length; i < len; i++)                                                                              // 8209
      y.unshift(0);                                                                                                   // 8210
    var res = [ 0x04 ].concat(x, y);                                                                                  // 8211
  }                                                                                                                   // 8212
  return utils.encode(res, enc);                                                                                      // 8213
};                                                                                                                    // 8214
                                                                                                                      // 8215
KeyPair.prototype.getPrivate = function getPrivate(enc) {                                                             // 8216
  if (enc === 'hex')                                                                                                  // 8217
    return this.priv.toString(16, 2);                                                                                 // 8218
  else                                                                                                                // 8219
    return this.priv;                                                                                                 // 8220
};                                                                                                                    // 8221
                                                                                                                      // 8222
KeyPair.prototype._importPrivate = function _importPrivate(key) {                                                     // 8223
  this.priv = new bn(key, 16);                                                                                        // 8224
                                                                                                                      // 8225
  // Ensure that the priv won't be bigger than n, otherwise we may fail                                               // 8226
  // in fixed multiplication method                                                                                   // 8227
  this.priv = this.priv.mod(this.ec.curve.n);                                                                         // 8228
};                                                                                                                    // 8229
                                                                                                                      // 8230
KeyPair.prototype._importPublic = function _importPublic(key) {                                                       // 8231
  this.pub = this.ec.curve.point(key.x, key.y);                                                                       // 8232
};                                                                                                                    // 8233
                                                                                                                      // 8234
KeyPair.prototype._importPublicHex = function _importPublic(key, enc) {                                               // 8235
  key = utils.toArray(key, enc);                                                                                      // 8236
  var len = this.ec.curve.p.byteLength();                                                                             // 8237
  if (key[0] === 0x04 && key.length - 1 === 2 * len) {                                                                // 8238
    this.pub = this.ec.curve.point(                                                                                   // 8239
      key.slice(1, 1 + len),                                                                                          // 8240
      key.slice(1 + len, 1 + 2 * len));                                                                               // 8241
  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {                                        // 8242
    this.pub = this.ec.curve.pointFromX(key[0] === 0x03,                                                              // 8243
                                        key.slice(1, 1 +len));                                                        // 8244
  } else {                                                                                                            // 8245
    return false;                                                                                                     // 8246
  }                                                                                                                   // 8247
                                                                                                                      // 8248
  return true;                                                                                                        // 8249
};                                                                                                                    // 8250
                                                                                                                      // 8251
// ECDH                                                                                                               // 8252
KeyPair.prototype.derive = function derive(pub) {                                                                     // 8253
  return pub.mul(this.priv).getX();                                                                                   // 8254
};                                                                                                                    // 8255
                                                                                                                      // 8256
// ECDSA                                                                                                              // 8257
KeyPair.prototype.sign = function sign(msg) {                                                                         // 8258
  return this.ec.sign(msg, this);                                                                                     // 8259
};                                                                                                                    // 8260
                                                                                                                      // 8261
KeyPair.prototype.verify = function verify(msg, signature) {                                                          // 8262
  return this.ec.verify(msg, signature, this);                                                                        // 8263
};                                                                                                                    // 8264
                                                                                                                      // 8265
KeyPair.prototype.inspect = function inspect() {                                                                      // 8266
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +                                                   // 8267
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';                                                          // 8268
};                                                                                                                    // 8269
                                                                                                                      // 8270
},{"../../elliptic":30,"bn.js":28}],39:[function(require,module,exports){                                             // 8271
var bn = require('bn.js');                                                                                            // 8272
                                                                                                                      // 8273
var elliptic = require('../../elliptic');                                                                             // 8274
var utils = elliptic.utils;                                                                                           // 8275
var assert = utils.assert;                                                                                            // 8276
                                                                                                                      // 8277
function Signature(r, s) {                                                                                            // 8278
  if (r instanceof Signature)                                                                                         // 8279
    return r;                                                                                                         // 8280
                                                                                                                      // 8281
  if (this._importDER(r, s))                                                                                          // 8282
    return;                                                                                                           // 8283
                                                                                                                      // 8284
  assert(r && s, 'Signature without r or s');                                                                         // 8285
  this.r = new bn(r, 16);                                                                                             // 8286
  this.s = new bn(s, 16);                                                                                             // 8287
}                                                                                                                     // 8288
module.exports = Signature;                                                                                           // 8289
                                                                                                                      // 8290
Signature.prototype._importDER = function _importDER(data, enc) {                                                     // 8291
  data = utils.toArray(data, enc);                                                                                    // 8292
  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)                                                        // 8293
    return false;                                                                                                     // 8294
  var total = data[1];                                                                                                // 8295
  if (1 + total > data.length)                                                                                        // 8296
    return false;                                                                                                     // 8297
  var rlen = data[3];                                                                                                 // 8298
  // Short length notation                                                                                            // 8299
  if (rlen >= 0x80)                                                                                                   // 8300
    return false;                                                                                                     // 8301
  if (4 + rlen + 2 >= data.length)                                                                                    // 8302
    return false;                                                                                                     // 8303
  if (data[4 + rlen] !== 0x02)                                                                                        // 8304
    return false;                                                                                                     // 8305
  var slen = data[5 + rlen];                                                                                          // 8306
  // Short length notation                                                                                            // 8307
  if (slen >= 0x80)                                                                                                   // 8308
    return false;                                                                                                     // 8309
  if (4 + rlen + 2 + slen > data.length)                                                                              // 8310
    return false;                                                                                                     // 8311
                                                                                                                      // 8312
  this.r = new bn(data.slice(4, 4 + rlen));                                                                           // 8313
  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));                                                     // 8314
                                                                                                                      // 8315
  return true;                                                                                                        // 8316
};                                                                                                                    // 8317
                                                                                                                      // 8318
Signature.prototype.toDER = function toDER(enc) {                                                                     // 8319
  var r = this.r.toArray();                                                                                           // 8320
  var s = this.s.toArray();                                                                                           // 8321
                                                                                                                      // 8322
  // Pad values                                                                                                       // 8323
  if (r[0] & 0x80)                                                                                                    // 8324
    r = [ 0 ].concat(r);                                                                                              // 8325
  // Pad values                                                                                                       // 8326
  if (s[0] & 0x80)                                                                                                    // 8327
    s = [ 0 ].concat(s);                                                                                              // 8328
                                                                                                                      // 8329
  var total = r.length + s.length + 4;                                                                                // 8330
  var res = [ 0x30, total, 0x02, r.length ];                                                                          // 8331
  res = res.concat(r, [ 0x02, s.length ], s);                                                                         // 8332
  return utils.encode(res, enc);                                                                                      // 8333
};                                                                                                                    // 8334
                                                                                                                      // 8335
},{"../../elliptic":30,"bn.js":28}],40:[function(require,module,exports){                                             // 8336
var hash = require('hash.js');                                                                                        // 8337
var elliptic = require('../elliptic');                                                                                // 8338
var utils = elliptic.utils;                                                                                           // 8339
var assert = utils.assert;                                                                                            // 8340
                                                                                                                      // 8341
function HmacDRBG(options) {                                                                                          // 8342
  if (!(this instanceof HmacDRBG))                                                                                    // 8343
    return new HmacDRBG(options);                                                                                     // 8344
  this.hash = options.hash;                                                                                           // 8345
  this.predResist = !!options.predResist;                                                                             // 8346
                                                                                                                      // 8347
  this.outLen = this.hash.outSize;                                                                                    // 8348
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;                                                     // 8349
                                                                                                                      // 8350
  this.reseed = null;                                                                                                 // 8351
  this.reseedInterval = null;                                                                                         // 8352
  this.K = null;                                                                                                      // 8353
  this.V = null;                                                                                                      // 8354
                                                                                                                      // 8355
  var entropy = utils.toArray(options.entropy, options.entropyEnc);                                                   // 8356
  var nonce = utils.toArray(options.nonce, options.nonceEnc);                                                         // 8357
  var pers = utils.toArray(options.pers, options.persEnc);                                                            // 8358
  assert(entropy.length >= (this.minEntropy / 8),                                                                     // 8359
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');                                             // 8360
  this._init(entropy, nonce, pers);                                                                                   // 8361
}                                                                                                                     // 8362
module.exports = HmacDRBG;                                                                                            // 8363
                                                                                                                      // 8364
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {                                                      // 8365
  var seed = entropy.concat(nonce).concat(pers);                                                                      // 8366
                                                                                                                      // 8367
  this.K = new Array(this.outLen / 8);                                                                                // 8368
  this.V = new Array(this.outLen / 8);                                                                                // 8369
  for (var i = 0; i < this.V.length; i++) {                                                                           // 8370
    this.K[i] = 0x00;                                                                                                 // 8371
    this.V[i] = 0x01;                                                                                                 // 8372
  }                                                                                                                   // 8373
                                                                                                                      // 8374
  this._update(seed);                                                                                                 // 8375
  this.reseed = 1;                                                                                                    // 8376
  this.reseedInterval = 0x1000000000000;  // 2^48                                                                     // 8377
};                                                                                                                    // 8378
                                                                                                                      // 8379
HmacDRBG.prototype._hmac = function hmac() {                                                                          // 8380
  return new hash.hmac(this.hash, this.K);                                                                            // 8381
};                                                                                                                    // 8382
                                                                                                                      // 8383
HmacDRBG.prototype._update = function update(seed) {                                                                  // 8384
  var kmac = this._hmac()                                                                                             // 8385
                 .update(this.V)                                                                                      // 8386
                 .update([ 0x00 ]);                                                                                   // 8387
  if (seed)                                                                                                           // 8388
    kmac = kmac.update(seed);                                                                                         // 8389
  this.K = kmac.digest();                                                                                             // 8390
  this.V = this._hmac().update(this.V).digest();                                                                      // 8391
  if (!seed)                                                                                                          // 8392
    return;                                                                                                           // 8393
                                                                                                                      // 8394
  this.K = this._hmac()                                                                                               // 8395
               .update(this.V)                                                                                        // 8396
               .update([ 0x01 ])                                                                                      // 8397
               .update(seed)                                                                                          // 8398
               .digest();                                                                                             // 8399
  this.V = this._hmac().update(this.V).digest();                                                                      // 8400
};                                                                                                                    // 8401
                                                                                                                      // 8402
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {                                       // 8403
  // Optional entropy enc                                                                                             // 8404
  if (typeof entropyEnc !== 'string') {                                                                               // 8405
    addEnc = add;                                                                                                     // 8406
    add = entropyEnc;                                                                                                 // 8407
    entropyEnc = null;                                                                                                // 8408
  }                                                                                                                   // 8409
                                                                                                                      // 8410
  entropy = utils.toBuffer(entropy, entropyEnc);                                                                      // 8411
  add = utils.toBuffer(add, addEnc);                                                                                  // 8412
                                                                                                                      // 8413
  assert(entropy.length >= (this.minEntropy / 8),                                                                     // 8414
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');                                             // 8415
                                                                                                                      // 8416
  this._update(entropy.concat(add || []));                                                                            // 8417
  this.reseed = 1;                                                                                                    // 8418
};                                                                                                                    // 8419
                                                                                                                      // 8420
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {                                              // 8421
  if (this.reseed > this.reseedInterval)                                                                              // 8422
    throw new Error('Reseed is required');                                                                            // 8423
                                                                                                                      // 8424
  // Optional encoding                                                                                                // 8425
  if (typeof enc !== 'string') {                                                                                      // 8426
    addEnc = add;                                                                                                     // 8427
    add = enc;                                                                                                        // 8428
    enc = null;                                                                                                       // 8429
  }                                                                                                                   // 8430
                                                                                                                      // 8431
  // Optional additional data                                                                                         // 8432
  if (add) {                                                                                                          // 8433
    add = utils.toArray(add, addEnc);                                                                                 // 8434
    this._update(add);                                                                                                // 8435
  }                                                                                                                   // 8436
                                                                                                                      // 8437
  var temp = [];                                                                                                      // 8438
  while (temp.length < len) {                                                                                         // 8439
    this.V = this._hmac().update(this.V).digest();                                                                    // 8440
    temp = temp.concat(this.V);                                                                                       // 8441
  }                                                                                                                   // 8442
                                                                                                                      // 8443
  var res = temp.slice(0, len);                                                                                       // 8444
  this._update(add);                                                                                                  // 8445
  this.reseed++;                                                                                                      // 8446
  return utils.encode(res, enc);                                                                                      // 8447
};                                                                                                                    // 8448
                                                                                                                      // 8449
},{"../elliptic":30,"hash.js":43}],41:[function(require,module,exports){                                              // 8450
var bn = require('bn.js');                                                                                            // 8451
                                                                                                                      // 8452
var utils = exports;                                                                                                  // 8453
                                                                                                                      // 8454
utils.assert = function assert(val, msg) {                                                                            // 8455
  if (!val)                                                                                                           // 8456
    throw new Error(msg || 'Assertion failed');                                                                       // 8457
};                                                                                                                    // 8458
                                                                                                                      // 8459
function toArray(msg, enc) {                                                                                          // 8460
  if (Array.isArray(msg))                                                                                             // 8461
    return msg.slice();                                                                                               // 8462
  if (!msg)                                                                                                           // 8463
    return [];                                                                                                        // 8464
  var res = [];                                                                                                       // 8465
  if (typeof msg === 'string') {                                                                                      // 8466
    if (!enc) {                                                                                                       // 8467
      for (var i = 0; i < msg.length; i++) {                                                                          // 8468
        var c = msg.charCodeAt(i);                                                                                    // 8469
        var hi = c >> 8;                                                                                              // 8470
        var lo = c & 0xff;                                                                                            // 8471
        if (hi)                                                                                                       // 8472
          res.push(hi, lo);                                                                                           // 8473
        else                                                                                                          // 8474
          res.push(lo);                                                                                               // 8475
      }                                                                                                               // 8476
    } else if (enc === 'hex') {                                                                                       // 8477
      msg = msg.replace(/[^a-z0-9]+/ig, '');                                                                          // 8478
      if (msg.length % 2 !== 0)                                                                                       // 8479
        msg = '0' + msg;                                                                                              // 8480
      for (var i = 0; i < msg.length; i += 2)                                                                         // 8481
        res.push(parseInt(msg[i] + msg[i + 1], 16));                                                                  // 8482
    }                                                                                                                 // 8483
  } else {                                                                                                            // 8484
    for (var i = 0; i < msg.length; i++)                                                                              // 8485
      res[i] = msg[i] | 0;                                                                                            // 8486
  }                                                                                                                   // 8487
  return res;                                                                                                         // 8488
}                                                                                                                     // 8489
utils.toArray = toArray;                                                                                              // 8490
                                                                                                                      // 8491
function toHex(msg) {                                                                                                 // 8492
  var res = '';                                                                                                       // 8493
  for (var i = 0; i < msg.length; i++)                                                                                // 8494
    res += zero2(msg[i].toString(16));                                                                                // 8495
  return res;                                                                                                         // 8496
}                                                                                                                     // 8497
utils.toHex = toHex;                                                                                                  // 8498
                                                                                                                      // 8499
utils.encode = function encode(arr, enc) {                                                                            // 8500
  if (enc === 'hex')                                                                                                  // 8501
    return toHex(arr);                                                                                                // 8502
  else                                                                                                                // 8503
    return arr;                                                                                                       // 8504
};                                                                                                                    // 8505
                                                                                                                      // 8506
function zero2(word) {                                                                                                // 8507
  if (word.length === 1)                                                                                              // 8508
    return '0' + word;                                                                                                // 8509
  else                                                                                                                // 8510
    return word;                                                                                                      // 8511
}                                                                                                                     // 8512
utils.zero2 = zero2;                                                                                                  // 8513
                                                                                                                      // 8514
// Represent num in a w-NAF form                                                                                      // 8515
function getNAF(num, w) {                                                                                             // 8516
  var naf = [];                                                                                                       // 8517
  var ws = 1 << (w + 1);                                                                                              // 8518
  var k = num.clone();                                                                                                // 8519
  while (k.cmpn(1) >= 0) {                                                                                            // 8520
    var z;                                                                                                            // 8521
    if (k.isOdd()) {                                                                                                  // 8522
      var mod = k.andln(ws - 1);                                                                                      // 8523
      if (mod > (ws >> 1) - 1)                                                                                        // 8524
        z = (ws >> 1) - mod;                                                                                          // 8525
      else                                                                                                            // 8526
        z = mod;                                                                                                      // 8527
      k.isubn(z);                                                                                                     // 8528
    } else {                                                                                                          // 8529
      z = 0;                                                                                                          // 8530
    }                                                                                                                 // 8531
    naf.push(z);                                                                                                      // 8532
                                                                                                                      // 8533
    // Optimization, shift by word if possible                                                                        // 8534
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;                                             // 8535
    for (var i = 1; i < shift; i++)                                                                                   // 8536
      naf.push(0);                                                                                                    // 8537
    k.ishrn(shift);                                                                                                   // 8538
  }                                                                                                                   // 8539
                                                                                                                      // 8540
  return naf;                                                                                                         // 8541
}                                                                                                                     // 8542
utils.getNAF = getNAF;                                                                                                // 8543
                                                                                                                      // 8544
// Represent k1, k2 in a Joint Sparse Form                                                                            // 8545
function getJSF(k1, k2) {                                                                                             // 8546
  var jsf = [                                                                                                         // 8547
    [],                                                                                                               // 8548
    []                                                                                                                // 8549
  ];                                                                                                                  // 8550
                                                                                                                      // 8551
  k1 = k1.clone();                                                                                                    // 8552
  k2 = k2.clone();                                                                                                    // 8553
  var d1 = 0;                                                                                                         // 8554
  var d2 = 0;                                                                                                         // 8555
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {                                                                      // 8556
                                                                                                                      // 8557
    // First phase                                                                                                    // 8558
    var m14 = (k1.andln(3) + d1) & 3;                                                                                 // 8559
    var m24 = (k2.andln(3) + d2) & 3;                                                                                 // 8560
    if (m14 === 3)                                                                                                    // 8561
      m14 = -1;                                                                                                       // 8562
    if (m24 === 3)                                                                                                    // 8563
      m24 = -1;                                                                                                       // 8564
    var u1;                                                                                                           // 8565
    if ((m14 & 1) === 0) {                                                                                            // 8566
      u1 = 0;                                                                                                         // 8567
    } else {                                                                                                          // 8568
      var m8 = (k1.andln(7) + d1) & 7;                                                                                // 8569
      if ((m8 === 3 || m8 === 5) && m24 === 2)                                                                        // 8570
        u1 = -m14;                                                                                                    // 8571
      else                                                                                                            // 8572
        u1 = m14;                                                                                                     // 8573
    }                                                                                                                 // 8574
    jsf[0].push(u1);                                                                                                  // 8575
                                                                                                                      // 8576
    var u2;                                                                                                           // 8577
    if ((m24 & 1) === 0) {                                                                                            // 8578
      u2 = 0;                                                                                                         // 8579
    } else {                                                                                                          // 8580
      var m8 = (k2.andln(7) + d2) & 7;                                                                                // 8581
      if ((m8 === 3 || m8 === 5) && m14 === 2)                                                                        // 8582
        u2 = -m24;                                                                                                    // 8583
      else                                                                                                            // 8584
        u2 = m24;                                                                                                     // 8585
    }                                                                                                                 // 8586
    jsf[1].push(u2);                                                                                                  // 8587
                                                                                                                      // 8588
    // Second phase                                                                                                   // 8589
    if (2 * d1 === u1 + 1)                                                                                            // 8590
      d1 = 1 - d1;                                                                                                    // 8591
    if (2 * d2 === u2 + 1)                                                                                            // 8592
      d2 = 1 - d2;                                                                                                    // 8593
    k1.ishrn(1);                                                                                                      // 8594
    k2.ishrn(1);                                                                                                      // 8595
  }                                                                                                                   // 8596
                                                                                                                      // 8597
  return jsf;                                                                                                         // 8598
}                                                                                                                     // 8599
utils.getJSF = getJSF;                                                                                                // 8600
                                                                                                                      // 8601
},{"bn.js":28}],42:[function(require,module,exports){                                                                 // 8602
var r;                                                                                                                // 8603
                                                                                                                      // 8604
module.exports = function rand(len) {                                                                                 // 8605
  if (!r)                                                                                                             // 8606
    r = new Rand(null);                                                                                               // 8607
                                                                                                                      // 8608
  return r.generate(len);                                                                                             // 8609
};                                                                                                                    // 8610
                                                                                                                      // 8611
function Rand(rand) {                                                                                                 // 8612
  this.rand = rand;                                                                                                   // 8613
}                                                                                                                     // 8614
module.exports.Rand = Rand;                                                                                           // 8615
                                                                                                                      // 8616
Rand.prototype.generate = function generate(len) {                                                                    // 8617
  return this._rand(len);                                                                                             // 8618
};                                                                                                                    // 8619
                                                                                                                      // 8620
if (typeof window === 'object') {                                                                                     // 8621
  if (window.crypto && window.crypto.getRandomValues) {                                                               // 8622
    // Modern browsers                                                                                                // 8623
    Rand.prototype._rand = function _rand(n) {                                                                        // 8624
      var arr = new Uint8Array(n);                                                                                    // 8625
      window.crypto.getRandomValues(arr);                                                                             // 8626
      return arr;                                                                                                     // 8627
    };                                                                                                                // 8628
  } else if (window.msCrypto && window.msCrypto.getRandomValues) {                                                    // 8629
    // IE                                                                                                             // 8630
    Rand.prototype._rand = function _rand(n) {                                                                        // 8631
      var arr = new Uint8Array(n);                                                                                    // 8632
      window.msCrypto.getRandomValues(arr);                                                                           // 8633
      return arr;                                                                                                     // 8634
    };                                                                                                                // 8635
  } else {                                                                                                            // 8636
    // Old junk                                                                                                       // 8637
    Rand.prototype._rand = function() {                                                                               // 8638
      throw new Error('Not implemented yet');                                                                         // 8639
    };                                                                                                                // 8640
  }                                                                                                                   // 8641
} else {                                                                                                              // 8642
  // Node.js or Web worker                                                                                            // 8643
  try {                                                                                                               // 8644
    var crypto = require('cry' + 'pto');                                                                              // 8645
                                                                                                                      // 8646
    Rand.prototype._rand = function _rand(n) {                                                                        // 8647
      return crypto.randomBytes(n);                                                                                   // 8648
    };                                                                                                                // 8649
  } catch (e) {                                                                                                       // 8650
    // Emulate crypto API using randy                                                                                 // 8651
    Rand.prototype._rand = function _rand(n) {                                                                        // 8652
      var res = new Uint8Array(n);                                                                                    // 8653
      for (var i = 0; i < res.length; i++)                                                                            // 8654
        res[i] = this.rand.getByte();                                                                                 // 8655
      return res;                                                                                                     // 8656
    };                                                                                                                // 8657
  }                                                                                                                   // 8658
}                                                                                                                     // 8659
                                                                                                                      // 8660
},{}],43:[function(require,module,exports){                                                                           // 8661
var hash = exports;                                                                                                   // 8662
                                                                                                                      // 8663
hash.utils = require('./hash/utils');                                                                                 // 8664
hash.common = require('./hash/common');                                                                               // 8665
hash.sha = require('./hash/sha');                                                                                     // 8666
hash.ripemd = require('./hash/ripemd');                                                                               // 8667
hash.hmac = require('./hash/hmac');                                                                                   // 8668
                                                                                                                      // 8669
// Proxy hash functions to the main object                                                                            // 8670
hash.sha1 = hash.sha.sha1;                                                                                            // 8671
hash.sha256 = hash.sha.sha256;                                                                                        // 8672
hash.sha224 = hash.sha.sha224;                                                                                        // 8673
hash.sha384 = hash.sha.sha384;                                                                                        // 8674
hash.sha512 = hash.sha.sha512;                                                                                        // 8675
hash.ripemd160 = hash.ripemd.ripemd160;                                                                               // 8676
                                                                                                                      // 8677
},{"./hash/common":44,"./hash/hmac":45,"./hash/ripemd":46,"./hash/sha":47,"./hash/utils":48}],44:[function(require,module,exports){
var hash = require('../hash');                                                                                        // 8679
var utils = hash.utils;                                                                                               // 8680
var assert = utils.assert;                                                                                            // 8681
                                                                                                                      // 8682
function BlockHash() {                                                                                                // 8683
  this.pending = null;                                                                                                // 8684
  this.pendingTotal = 0;                                                                                              // 8685
  this.blockSize = this.constructor.blockSize;                                                                        // 8686
  this.outSize = this.constructor.outSize;                                                                            // 8687
  this.hmacStrength = this.constructor.hmacStrength;                                                                  // 8688
  this.padLength = this.constructor.padLength / 8;                                                                    // 8689
  this.endian = 'big';                                                                                                // 8690
                                                                                                                      // 8691
  this._delta8 = this.blockSize / 8;                                                                                  // 8692
  this._delta32 = this.blockSize / 32;                                                                                // 8693
}                                                                                                                     // 8694
exports.BlockHash = BlockHash;                                                                                        // 8695
                                                                                                                      // 8696
BlockHash.prototype.update = function update(msg, enc) {                                                              // 8697
  // Convert message to array, pad it, and join into 32bit blocks                                                     // 8698
  msg = utils.toArray(msg, enc);                                                                                      // 8699
  if (!this.pending)                                                                                                  // 8700
    this.pending = msg;                                                                                               // 8701
  else                                                                                                                // 8702
    this.pending = this.pending.concat(msg);                                                                          // 8703
  this.pendingTotal += msg.length;                                                                                    // 8704
                                                                                                                      // 8705
  // Enough data, try updating                                                                                        // 8706
  if (this.pending.length >= this._delta8) {                                                                          // 8707
    msg = this.pending;                                                                                               // 8708
                                                                                                                      // 8709
    // Process pending data in blocks                                                                                 // 8710
    var r = msg.length % this._delta8;                                                                                // 8711
    this.pending = msg.slice(msg.length - r, msg.length);                                                             // 8712
    if (this.pending.length === 0)                                                                                    // 8713
      this.pending = null;                                                                                            // 8714
                                                                                                                      // 8715
    msg = utils.join32(msg, 0, msg.length - r, this.endian);                                                          // 8716
    for (var i = 0; i < msg.length; i += this._delta32)                                                               // 8717
      this._update(msg, i, i + this._delta32);                                                                        // 8718
  }                                                                                                                   // 8719
                                                                                                                      // 8720
  return this;                                                                                                        // 8721
};                                                                                                                    // 8722
                                                                                                                      // 8723
BlockHash.prototype.digest = function digest(enc) {                                                                   // 8724
  this.update(this._pad());                                                                                           // 8725
  assert(this.pending === null);                                                                                      // 8726
                                                                                                                      // 8727
  return this._digest(enc);                                                                                           // 8728
};                                                                                                                    // 8729
                                                                                                                      // 8730
BlockHash.prototype._pad = function pad() {                                                                           // 8731
  var len = this.pendingTotal;                                                                                        // 8732
  var bytes = this._delta8;                                                                                           // 8733
  var k = bytes - ((len + this.padLength) % bytes);                                                                   // 8734
  var res = new Array(k + this.padLength);                                                                            // 8735
  res[0] = 0x80;                                                                                                      // 8736
  for (var i = 1; i < k; i++)                                                                                         // 8737
    res[i] = 0;                                                                                                       // 8738
                                                                                                                      // 8739
  // Append length                                                                                                    // 8740
  len <<= 3;                                                                                                          // 8741
  if (this.endian === 'big') {                                                                                        // 8742
    for (var t = 8; t < this.padLength; t++)                                                                          // 8743
      res[i++] = 0;                                                                                                   // 8744
                                                                                                                      // 8745
    res[i++] = 0;                                                                                                     // 8746
    res[i++] = 0;                                                                                                     // 8747
    res[i++] = 0;                                                                                                     // 8748
    res[i++] = 0;                                                                                                     // 8749
    res[i++] = (len >>> 24) & 0xff;                                                                                   // 8750
    res[i++] = (len >>> 16) & 0xff;                                                                                   // 8751
    res[i++] = (len >>> 8) & 0xff;                                                                                    // 8752
    res[i++] = len & 0xff;                                                                                            // 8753
  } else {                                                                                                            // 8754
    res[i++] = len & 0xff;                                                                                            // 8755
    res[i++] = (len >>> 8) & 0xff;                                                                                    // 8756
    res[i++] = (len >>> 16) & 0xff;                                                                                   // 8757
    res[i++] = (len >>> 24) & 0xff;                                                                                   // 8758
    res[i++] = 0;                                                                                                     // 8759
    res[i++] = 0;                                                                                                     // 8760
    res[i++] = 0;                                                                                                     // 8761
    res[i++] = 0;                                                                                                     // 8762
                                                                                                                      // 8763
    for (var t = 8; t < this.padLength; t++)                                                                          // 8764
      res[i++] = 0;                                                                                                   // 8765
  }                                                                                                                   // 8766
                                                                                                                      // 8767
  return res;                                                                                                         // 8768
};                                                                                                                    // 8769
                                                                                                                      // 8770
},{"../hash":43}],45:[function(require,module,exports){                                                               // 8771
var hmac = exports;                                                                                                   // 8772
                                                                                                                      // 8773
var hash = require('../hash');                                                                                        // 8774
var utils = hash.utils;                                                                                               // 8775
var assert = utils.assert;                                                                                            // 8776
                                                                                                                      // 8777
function Hmac(hash, key, enc) {                                                                                       // 8778
  if (!(this instanceof Hmac))                                                                                        // 8779
    return new Hmac(hash, key, enc);                                                                                  // 8780
  this.Hash = hash;                                                                                                   // 8781
  this.blockSize = hash.blockSize / 8;                                                                                // 8782
  this.outSize = hash.outSize / 8;                                                                                    // 8783
  this.inner = null;                                                                                                  // 8784
  this.outer = null;                                                                                                  // 8785
                                                                                                                      // 8786
  this._init(utils.toArray(key, enc));                                                                                // 8787
}                                                                                                                     // 8788
module.exports = Hmac;                                                                                                // 8789
                                                                                                                      // 8790
Hmac.prototype._init = function init(key) {                                                                           // 8791
  // Shorten key, if needed                                                                                           // 8792
  if (key.length > this.blockSize)                                                                                    // 8793
    key = new this.Hash().update(key).digest();                                                                       // 8794
  assert(key.length <= this.blockSize);                                                                               // 8795
                                                                                                                      // 8796
  // Add padding to key                                                                                               // 8797
  for (var i = key.length; i < this.blockSize; i++)                                                                   // 8798
    key.push(0);                                                                                                      // 8799
                                                                                                                      // 8800
  for (var i = 0; i < key.length; i++)                                                                                // 8801
    key[i] ^= 0x36;                                                                                                   // 8802
  this.inner = new this.Hash().update(key);                                                                           // 8803
                                                                                                                      // 8804
  // 0x36 ^ 0x5c = 0x6a                                                                                               // 8805
  for (var i = 0; i < key.length; i++)                                                                                // 8806
    key[i] ^= 0x6a;                                                                                                   // 8807
  this.outer = new this.Hash().update(key);                                                                           // 8808
};                                                                                                                    // 8809
                                                                                                                      // 8810
Hmac.prototype.update = function update(msg, enc) {                                                                   // 8811
  this.inner.update(msg, enc);                                                                                        // 8812
  return this;                                                                                                        // 8813
};                                                                                                                    // 8814
                                                                                                                      // 8815
Hmac.prototype.digest = function digest(enc) {                                                                        // 8816
  this.outer.update(this.inner.digest());                                                                             // 8817
  return this.outer.digest(enc);                                                                                      // 8818
};                                                                                                                    // 8819
                                                                                                                      // 8820
},{"../hash":43}],46:[function(require,module,exports){                                                               // 8821
var hash = require('../hash');                                                                                        // 8822
var utils = hash.utils;                                                                                               // 8823
                                                                                                                      // 8824
var rotl32 = utils.rotl32;                                                                                            // 8825
var sum32 = utils.sum32;                                                                                              // 8826
var sum32_3 = utils.sum32_3;                                                                                          // 8827
var sum32_4 = utils.sum32_4;                                                                                          // 8828
var BlockHash = hash.common.BlockHash;                                                                                // 8829
                                                                                                                      // 8830
function RIPEMD160() {                                                                                                // 8831
  if (!(this instanceof RIPEMD160))                                                                                   // 8832
    return new RIPEMD160();                                                                                           // 8833
                                                                                                                      // 8834
  BlockHash.call(this);                                                                                               // 8835
                                                                                                                      // 8836
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];                                            // 8837
  this.endian = 'little';                                                                                             // 8838
}                                                                                                                     // 8839
utils.inherits(RIPEMD160, BlockHash);                                                                                 // 8840
exports.ripemd160 = RIPEMD160;                                                                                        // 8841
                                                                                                                      // 8842
RIPEMD160.blockSize = 512;                                                                                            // 8843
RIPEMD160.outSize = 160;                                                                                              // 8844
RIPEMD160.hmacStrength = 192;                                                                                         // 8845
RIPEMD160.padLength = 64;                                                                                             // 8846
                                                                                                                      // 8847
RIPEMD160.prototype._update = function update(msg, start) {                                                           // 8848
  var A = this.h[0];                                                                                                  // 8849
  var B = this.h[1];                                                                                                  // 8850
  var C = this.h[2];                                                                                                  // 8851
  var D = this.h[3];                                                                                                  // 8852
  var E = this.h[4];                                                                                                  // 8853
  var Ah = A;                                                                                                         // 8854
  var Bh = B;                                                                                                         // 8855
  var Ch = C;                                                                                                         // 8856
  var Dh = D;                                                                                                         // 8857
  var Eh = E;                                                                                                         // 8858
  for (var j = 0; j < 80; j++) {                                                                                      // 8859
    var T = sum32(                                                                                                    // 8860
      rotl32(                                                                                                         // 8861
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),                                                           // 8862
        s[j]),                                                                                                        // 8863
      E);                                                                                                             // 8864
    A = E;                                                                                                            // 8865
    E = D;                                                                                                            // 8866
    D = rotl32(C, 10);                                                                                                // 8867
    C = B;                                                                                                            // 8868
    B = T;                                                                                                            // 8869
    T = sum32(                                                                                                        // 8870
      rotl32(                                                                                                         // 8871
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),                                                // 8872
        sh[j]),                                                                                                       // 8873
      Eh);                                                                                                            // 8874
    Ah = Eh;                                                                                                          // 8875
    Eh = Dh;                                                                                                          // 8876
    Dh = rotl32(Ch, 10);                                                                                              // 8877
    Ch = Bh;                                                                                                          // 8878
    Bh = T;                                                                                                           // 8879
  }                                                                                                                   // 8880
  T = sum32_3(this.h[1], C, Dh);                                                                                      // 8881
  this.h[1] = sum32_3(this.h[2], D, Eh);                                                                              // 8882
  this.h[2] = sum32_3(this.h[3], E, Ah);                                                                              // 8883
  this.h[3] = sum32_3(this.h[4], A, Bh);                                                                              // 8884
  this.h[4] = sum32_3(this.h[0], B, Ch);                                                                              // 8885
  this.h[0] = T;                                                                                                      // 8886
};                                                                                                                    // 8887
                                                                                                                      // 8888
RIPEMD160.prototype._digest = function digest(enc) {                                                                  // 8889
  if (enc === 'hex')                                                                                                  // 8890
    return utils.toHex32(this.h, 'little');                                                                           // 8891
  else                                                                                                                // 8892
    return utils.split32(this.h, 'little');                                                                           // 8893
};                                                                                                                    // 8894
                                                                                                                      // 8895
function f(j, x, y, z) {                                                                                              // 8896
  if (j <= 15)                                                                                                        // 8897
    return x ^ y ^ z;                                                                                                 // 8898
  else if (j <= 31)                                                                                                   // 8899
    return (x & y) | ((~x) & z);                                                                                      // 8900
  else if (j <= 47)                                                                                                   // 8901
    return (x | (~y)) ^ z;                                                                                            // 8902
  else if (j <= 63)                                                                                                   // 8903
    return (x & z) | (y & (~z));                                                                                      // 8904
  else                                                                                                                // 8905
    return x ^ (y | (~z));                                                                                            // 8906
}                                                                                                                     // 8907
                                                                                                                      // 8908
function K(j) {                                                                                                       // 8909
  if (j <= 15)                                                                                                        // 8910
    return 0x00000000;                                                                                                // 8911
  else if (j <= 31)                                                                                                   // 8912
    return 0x5a827999;                                                                                                // 8913
  else if (j <= 47)                                                                                                   // 8914
    return 0x6ed9eba1;                                                                                                // 8915
  else if (j <= 63)                                                                                                   // 8916
    return 0x8f1bbcdc;                                                                                                // 8917
  else                                                                                                                // 8918
    return 0xa953fd4e;                                                                                                // 8919
}                                                                                                                     // 8920
                                                                                                                      // 8921
function Kh(j) {                                                                                                      // 8922
  if (j <= 15)                                                                                                        // 8923
    return 0x50a28be6;                                                                                                // 8924
  else if (j <= 31)                                                                                                   // 8925
    return 0x5c4dd124;                                                                                                // 8926
  else if (j <= 47)                                                                                                   // 8927
    return 0x6d703ef3;                                                                                                // 8928
  else if (j <= 63)                                                                                                   // 8929
    return 0x7a6d76e9;                                                                                                // 8930
  else                                                                                                                // 8931
    return 0x00000000;                                                                                                // 8932
}                                                                                                                     // 8933
                                                                                                                      // 8934
var r = [                                                                                                             // 8935
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,                                                               // 8936
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,                                                               // 8937
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,                                                               // 8938
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,                                                               // 8939
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,                                                               // 8940
];                                                                                                                    // 8941
                                                                                                                      // 8942
var rh = [                                                                                                            // 8943
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,                                                               // 8944
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,                                                               // 8945
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,                                                               // 8946
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,                                                               // 8947
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11                                                                // 8948
];                                                                                                                    // 8949
                                                                                                                      // 8950
var s = [                                                                                                             // 8951
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,                                                             // 8952
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,                                                             // 8953
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,                                                             // 8954
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,                                                             // 8955
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,                                                             // 8956
];                                                                                                                    // 8957
                                                                                                                      // 8958
var sh = [                                                                                                            // 8959
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,                                                             // 8960
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,                                                             // 8961
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,                                                             // 8962
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,                                                             // 8963
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11                                                              // 8964
];                                                                                                                    // 8965
                                                                                                                      // 8966
},{"../hash":43}],47:[function(require,module,exports){                                                               // 8967
var hash = require('../hash');                                                                                        // 8968
var utils = hash.utils;                                                                                               // 8969
var assert = utils.assert;                                                                                            // 8970
                                                                                                                      // 8971
var rotr32 = utils.rotr32;                                                                                            // 8972
var rotl32 = utils.rotl32;                                                                                            // 8973
var sum32 = utils.sum32;                                                                                              // 8974
var sum32_4 = utils.sum32_4;                                                                                          // 8975
var sum32_5 = utils.sum32_5;                                                                                          // 8976
var rotr64_hi = utils.rotr64_hi;                                                                                      // 8977
var rotr64_lo = utils.rotr64_lo;                                                                                      // 8978
var shr64_hi = utils.shr64_hi;                                                                                        // 8979
var shr64_lo = utils.shr64_lo;                                                                                        // 8980
var sum64 = utils.sum64;                                                                                              // 8981
var sum64_hi = utils.sum64_hi;                                                                                        // 8982
var sum64_lo = utils.sum64_lo;                                                                                        // 8983
var sum64_4_hi = utils.sum64_4_hi;                                                                                    // 8984
var sum64_4_lo = utils.sum64_4_lo;                                                                                    // 8985
var sum64_5_hi = utils.sum64_5_hi;                                                                                    // 8986
var sum64_5_lo = utils.sum64_5_lo;                                                                                    // 8987
var BlockHash = hash.common.BlockHash;                                                                                // 8988
                                                                                                                      // 8989
var sha256_K = [                                                                                                      // 8990
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,                                                                     // 8991
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,                                                                     // 8992
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,                                                                     // 8993
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,                                                                     // 8994
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,                                                                     // 8995
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,                                                                     // 8996
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,                                                                     // 8997
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,                                                                     // 8998
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,                                                                     // 8999
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,                                                                     // 9000
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,                                                                     // 9001
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,                                                                     // 9002
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,                                                                     // 9003
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,                                                                     // 9004
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,                                                                     // 9005
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2                                                                      // 9006
];                                                                                                                    // 9007
                                                                                                                      // 9008
var sha512_K = [                                                                                                      // 9009
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,                                                                     // 9010
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,                                                                     // 9011
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,                                                                     // 9012
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,                                                                     // 9013
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,                                                                     // 9014
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,                                                                     // 9015
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,                                                                     // 9016
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,                                                                     // 9017
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,                                                                     // 9018
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,                                                                     // 9019
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,                                                                     // 9020
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,                                                                     // 9021
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,                                                                     // 9022
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,                                                                     // 9023
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,                                                                     // 9024
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,                                                                     // 9025
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,                                                                     // 9026
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,                                                                     // 9027
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,                                                                     // 9028
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,                                                                     // 9029
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,                                                                     // 9030
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,                                                                     // 9031
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,                                                                     // 9032
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,                                                                     // 9033
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,                                                                     // 9034
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,                                                                     // 9035
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,                                                                     // 9036
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,                                                                     // 9037
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,                                                                     // 9038
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,                                                                     // 9039
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,                                                                     // 9040
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,                                                                     // 9041
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,                                                                     // 9042
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,                                                                     // 9043
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,                                                                     // 9044
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,                                                                     // 9045
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,                                                                     // 9046
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,                                                                     // 9047
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,                                                                     // 9048
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817                                                                      // 9049
];                                                                                                                    // 9050
                                                                                                                      // 9051
var sha1_K = [                                                                                                        // 9052
  0x5A827999, 0x6ED9EBA1,                                                                                             // 9053
  0x8F1BBCDC, 0xCA62C1D6                                                                                              // 9054
];                                                                                                                    // 9055
                                                                                                                      // 9056
function SHA256() {                                                                                                   // 9057
  if (!(this instanceof SHA256))                                                                                      // 9058
    return new SHA256();                                                                                              // 9059
                                                                                                                      // 9060
  BlockHash.call(this);                                                                                               // 9061
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,                                                          // 9062
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];                                                        // 9063
  this.k = sha256_K;                                                                                                  // 9064
  this.W = new Array(64);                                                                                             // 9065
}                                                                                                                     // 9066
utils.inherits(SHA256, BlockHash);                                                                                    // 9067
exports.sha256 = SHA256;                                                                                              // 9068
                                                                                                                      // 9069
SHA256.blockSize = 512;                                                                                               // 9070
SHA256.outSize = 256;                                                                                                 // 9071
SHA256.hmacStrength = 192;                                                                                            // 9072
SHA256.padLength = 64;                                                                                                // 9073
                                                                                                                      // 9074
SHA256.prototype._update = function _update(msg, start) {                                                             // 9075
  var W = this.W;                                                                                                     // 9076
                                                                                                                      // 9077
  for (var i = 0; i < 16; i++)                                                                                        // 9078
    W[i] = msg[start + i];                                                                                            // 9079
  for (; i < W.length; i++)                                                                                           // 9080
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);                                         // 9081
                                                                                                                      // 9082
  var a = this.h[0];                                                                                                  // 9083
  var b = this.h[1];                                                                                                  // 9084
  var c = this.h[2];                                                                                                  // 9085
  var d = this.h[3];                                                                                                  // 9086
  var e = this.h[4];                                                                                                  // 9087
  var f = this.h[5];                                                                                                  // 9088
  var g = this.h[6];                                                                                                  // 9089
  var h = this.h[7];                                                                                                  // 9090
                                                                                                                      // 9091
  assert(this.k.length === W.length);                                                                                 // 9092
  for (var i = 0; i < W.length; i++) {                                                                                // 9093
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);                                                   // 9094
    var T2 = sum32(s0_256(a), maj32(a, b, c));                                                                        // 9095
    h = g;                                                                                                            // 9096
    g = f;                                                                                                            // 9097
    f = e;                                                                                                            // 9098
    e = sum32(d, T1);                                                                                                 // 9099
    d = c;                                                                                                            // 9100
    c = b;                                                                                                            // 9101
    b = a;                                                                                                            // 9102
    a = sum32(T1, T2);                                                                                                // 9103
  }                                                                                                                   // 9104
                                                                                                                      // 9105
  this.h[0] = sum32(this.h[0], a);                                                                                    // 9106
  this.h[1] = sum32(this.h[1], b);                                                                                    // 9107
  this.h[2] = sum32(this.h[2], c);                                                                                    // 9108
  this.h[3] = sum32(this.h[3], d);                                                                                    // 9109
  this.h[4] = sum32(this.h[4], e);                                                                                    // 9110
  this.h[5] = sum32(this.h[5], f);                                                                                    // 9111
  this.h[6] = sum32(this.h[6], g);                                                                                    // 9112
  this.h[7] = sum32(this.h[7], h);                                                                                    // 9113
};                                                                                                                    // 9114
                                                                                                                      // 9115
SHA256.prototype._digest = function digest(enc) {                                                                     // 9116
  if (enc === 'hex')                                                                                                  // 9117
    return utils.toHex32(this.h, 'big');                                                                              // 9118
  else                                                                                                                // 9119
    return utils.split32(this.h, 'big');                                                                              // 9120
};                                                                                                                    // 9121
                                                                                                                      // 9122
function SHA224() {                                                                                                   // 9123
  if (!(this instanceof SHA224))                                                                                      // 9124
    return new SHA224();                                                                                              // 9125
                                                                                                                      // 9126
  SHA256.call(this);                                                                                                  // 9127
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,                                                          // 9128
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];                                                        // 9129
}                                                                                                                     // 9130
utils.inherits(SHA224, SHA256);                                                                                       // 9131
exports.sha224 = SHA224;                                                                                              // 9132
                                                                                                                      // 9133
SHA224.blockSize = 512;                                                                                               // 9134
SHA224.outSize = 224;                                                                                                 // 9135
SHA224.hmacStrength = 192;                                                                                            // 9136
SHA224.padLength = 64;                                                                                                // 9137
                                                                                                                      // 9138
SHA224.prototype._digest = function digest(enc) {                                                                     // 9139
  // Just truncate output                                                                                             // 9140
  if (enc === 'hex')                                                                                                  // 9141
    return utils.toHex32(this.h.slice(0, 7), 'big');                                                                  // 9142
  else                                                                                                                // 9143
    return utils.split32(this.h.slice(0, 7), 'big');                                                                  // 9144
};                                                                                                                    // 9145
                                                                                                                      // 9146
function SHA512() {                                                                                                   // 9147
  if (!(this instanceof SHA512))                                                                                      // 9148
    return new SHA512();                                                                                              // 9149
                                                                                                                      // 9150
  BlockHash.call(this);                                                                                               // 9151
  this.h = [ 0x6a09e667, 0xf3bcc908,                                                                                  // 9152
             0xbb67ae85, 0x84caa73b,                                                                                  // 9153
             0x3c6ef372, 0xfe94f82b,                                                                                  // 9154
             0xa54ff53a, 0x5f1d36f1,                                                                                  // 9155
             0x510e527f, 0xade682d1,                                                                                  // 9156
             0x9b05688c, 0x2b3e6c1f,                                                                                  // 9157
             0x1f83d9ab, 0xfb41bd6b,                                                                                  // 9158
             0x5be0cd19, 0x137e2179 ];                                                                                // 9159
  this.k = sha512_K;                                                                                                  // 9160
  this.W = new Array(160);                                                                                            // 9161
}                                                                                                                     // 9162
utils.inherits(SHA512, BlockHash);                                                                                    // 9163
exports.sha512 = SHA512;                                                                                              // 9164
                                                                                                                      // 9165
SHA512.blockSize = 1024;                                                                                              // 9166
SHA512.outSize = 512;                                                                                                 // 9167
SHA512.hmacStrength = 192;                                                                                            // 9168
SHA512.padLength = 128;                                                                                               // 9169
                                                                                                                      // 9170
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {                                                 // 9171
  var W = this.W;                                                                                                     // 9172
                                                                                                                      // 9173
  // 32 x 32bit words                                                                                                 // 9174
  for (var i = 0; i < 32; i++)                                                                                        // 9175
    W[i] = msg[start + i];                                                                                            // 9176
  for (; i < W.length; i += 2) {                                                                                      // 9177
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2                                                              // 9178
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);                                                                        // 9179
    var c1_hi = W[i - 14];  // i - 7                                                                                  // 9180
    var c1_lo = W[i - 13];                                                                                            // 9181
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15                                                           // 9182
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);                                                                      // 9183
    var c3_hi = W[i - 32];  // i - 16                                                                                 // 9184
    var c3_lo = W[i - 31];                                                                                            // 9185
                                                                                                                      // 9186
    W[i] = sum64_4_hi(c0_hi, c0_lo,                                                                                   // 9187
                      c1_hi, c1_lo,                                                                                   // 9188
                      c2_hi, c2_lo,                                                                                   // 9189
                      c3_hi, c3_lo);                                                                                  // 9190
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,                                                                               // 9191
                          c1_hi, c1_lo,                                                                               // 9192
                          c2_hi, c2_lo,                                                                               // 9193
                          c3_hi, c3_lo);                                                                              // 9194
  }                                                                                                                   // 9195
};                                                                                                                    // 9196
                                                                                                                      // 9197
SHA512.prototype._update = function _update(msg, start) {                                                             // 9198
  this._prepareBlock(msg, start);                                                                                     // 9199
                                                                                                                      // 9200
  var W = this.W;                                                                                                     // 9201
                                                                                                                      // 9202
  var ah = this.h[0];                                                                                                 // 9203
  var al = this.h[1];                                                                                                 // 9204
  var bh = this.h[2];                                                                                                 // 9205
  var bl = this.h[3];                                                                                                 // 9206
  var ch = this.h[4];                                                                                                 // 9207
  var cl = this.h[5];                                                                                                 // 9208
  var dh = this.h[6];                                                                                                 // 9209
  var dl = this.h[7];                                                                                                 // 9210
  var eh = this.h[8];                                                                                                 // 9211
  var el = this.h[9];                                                                                                 // 9212
  var fh = this.h[10];                                                                                                // 9213
  var fl = this.h[11];                                                                                                // 9214
  var gh = this.h[12];                                                                                                // 9215
  var gl = this.h[13];                                                                                                // 9216
  var hh = this.h[14];                                                                                                // 9217
  var hl = this.h[15];                                                                                                // 9218
                                                                                                                      // 9219
  assert(this.k.length === W.length);                                                                                 // 9220
  for (var i = 0; i < W.length; i += 2) {                                                                             // 9221
    var c0_hi = hh;                                                                                                   // 9222
    var c0_lo = hl;                                                                                                   // 9223
    var c1_hi = s1_512_hi(eh, el);                                                                                    // 9224
    var c1_lo = s1_512_lo(eh, el);                                                                                    // 9225
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);                                                                      // 9226
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);                                                                      // 9227
    var c3_hi = this.k[i];                                                                                            // 9228
    var c3_lo = this.k[i + 1];                                                                                        // 9229
    var c4_hi = W[i];                                                                                                 // 9230
    var c4_lo = W[i + 1];                                                                                             // 9231
                                                                                                                      // 9232
    var T1_hi = sum64_5_hi(c0_hi, c0_lo,                                                                              // 9233
                           c1_hi, c1_lo,                                                                              // 9234
                           c2_hi, c2_lo,                                                                              // 9235
                           c3_hi, c3_lo,                                                                              // 9236
                           c4_hi, c4_lo);                                                                             // 9237
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,                                                                              // 9238
                           c1_hi, c1_lo,                                                                              // 9239
                           c2_hi, c2_lo,                                                                              // 9240
                           c3_hi, c3_lo,                                                                              // 9241
                           c4_hi, c4_lo);                                                                             // 9242
                                                                                                                      // 9243
    var c0_hi = s0_512_hi(ah, al);                                                                                    // 9244
    var c0_lo = s0_512_lo(ah, al);                                                                                    // 9245
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);                                                                     // 9246
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);                                                                     // 9247
                                                                                                                      // 9248
    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);                                                                 // 9249
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);                                                                 // 9250
                                                                                                                      // 9251
    hh = gh;                                                                                                          // 9252
    hl = gl;                                                                                                          // 9253
                                                                                                                      // 9254
    gh = fh;                                                                                                          // 9255
    gl = fl;                                                                                                          // 9256
                                                                                                                      // 9257
    fh = eh;                                                                                                          // 9258
    fl = el;                                                                                                          // 9259
                                                                                                                      // 9260
    eh = sum64_hi(dh, dl, T1_hi, T1_lo);                                                                              // 9261
    el = sum64_lo(dl, dl, T1_hi, T1_lo);                                                                              // 9262
                                                                                                                      // 9263
    dh = ch;                                                                                                          // 9264
    dl = cl;                                                                                                          // 9265
                                                                                                                      // 9266
    ch = bh;                                                                                                          // 9267
    cl = bl;                                                                                                          // 9268
                                                                                                                      // 9269
    bh = ah;                                                                                                          // 9270
    bl = al;                                                                                                          // 9271
                                                                                                                      // 9272
    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);                                                                        // 9273
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);                                                                        // 9274
  }                                                                                                                   // 9275
                                                                                                                      // 9276
  sum64(this.h, 0, ah, al);                                                                                           // 9277
  sum64(this.h, 2, bh, bl);                                                                                           // 9278
  sum64(this.h, 4, ch, cl);                                                                                           // 9279
  sum64(this.h, 6, dh, dl);                                                                                           // 9280
  sum64(this.h, 8, eh, el);                                                                                           // 9281
  sum64(this.h, 10, fh, fl);                                                                                          // 9282
  sum64(this.h, 12, gh, gl);                                                                                          // 9283
  sum64(this.h, 14, hh, hl);                                                                                          // 9284
};                                                                                                                    // 9285
                                                                                                                      // 9286
SHA512.prototype._digest = function digest(enc) {                                                                     // 9287
  if (enc === 'hex')                                                                                                  // 9288
    return utils.toHex32(this.h, 'big');                                                                              // 9289
  else                                                                                                                // 9290
    return utils.split32(this.h, 'big');                                                                              // 9291
};                                                                                                                    // 9292
                                                                                                                      // 9293
function SHA384() {                                                                                                   // 9294
  if (!(this instanceof SHA384))                                                                                      // 9295
    return new SHA384();                                                                                              // 9296
                                                                                                                      // 9297
  SHA512.call(this);                                                                                                  // 9298
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,                                                                                  // 9299
             0x629a292a, 0x367cd507,                                                                                  // 9300
             0x9159015a, 0x3070dd17,                                                                                  // 9301
             0x152fecd8, 0xf70e5939,                                                                                  // 9302
             0x67332667, 0xffc00b31,                                                                                  // 9303
             0x8eb44a87, 0x68581511,                                                                                  // 9304
             0xdb0c2e0d, 0x64f98fa7,                                                                                  // 9305
             0x47b5481d, 0xbefa4fa4 ];                                                                                // 9306
}                                                                                                                     // 9307
utils.inherits(SHA384, SHA512);                                                                                       // 9308
exports.sha384 = SHA384;                                                                                              // 9309
                                                                                                                      // 9310
SHA384.blockSize = 1024;                                                                                              // 9311
SHA384.outSize = 384;                                                                                                 // 9312
SHA384.hmacStrength = 192;                                                                                            // 9313
SHA384.padLength = 128;                                                                                               // 9314
                                                                                                                      // 9315
SHA384.prototype._digest = function digest(enc) {                                                                     // 9316
  if (enc === 'hex')                                                                                                  // 9317
    return utils.toHex32(this.h.slice(0, 12), 'big');                                                                 // 9318
  else                                                                                                                // 9319
    return utils.split32(this.h.slice(0, 12), 'big');                                                                 // 9320
};                                                                                                                    // 9321
                                                                                                                      // 9322
function SHA1() {                                                                                                     // 9323
  if (!(this instanceof SHA1))                                                                                        // 9324
    return new SHA1();                                                                                                // 9325
                                                                                                                      // 9326
  BlockHash.call(this);                                                                                               // 9327
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,                                                                      // 9328
             0x10325476, 0xc3d2e1f0 ];                                                                                // 9329
  this.W = new Array(80);                                                                                             // 9330
}                                                                                                                     // 9331
                                                                                                                      // 9332
utils.inherits(SHA1, BlockHash);                                                                                      // 9333
exports.sha1 = SHA1;                                                                                                  // 9334
                                                                                                                      // 9335
SHA1.blockSize = 512;                                                                                                 // 9336
SHA1.outSize = 160;                                                                                                   // 9337
SHA1.hmacStrength = 80;                                                                                               // 9338
SHA1.padLength = 64;                                                                                                  // 9339
                                                                                                                      // 9340
SHA1.prototype._update = function _update(msg, start) {                                                               // 9341
  var W = this.W;                                                                                                     // 9342
                                                                                                                      // 9343
  for (var i = 0; i < 16; i++)                                                                                        // 9344
    W[i] = msg[start + i];                                                                                            // 9345
                                                                                                                      // 9346
  for(; i < W.length; i++)                                                                                            // 9347
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);                                                    // 9348
                                                                                                                      // 9349
  var a = this.h[0];                                                                                                  // 9350
  var b = this.h[1];                                                                                                  // 9351
  var c = this.h[2];                                                                                                  // 9352
  var d = this.h[3];                                                                                                  // 9353
  var e = this.h[4];                                                                                                  // 9354
                                                                                                                      // 9355
  for (var i = 0; i < W.length; i++) {                                                                                // 9356
    var s = ~~(i / 20);                                                                                               // 9357
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);                                              // 9358
    e = d;                                                                                                            // 9359
    d = c;                                                                                                            // 9360
    c = rotl32(b, 30);                                                                                                // 9361
    b = a;                                                                                                            // 9362
    a = t;                                                                                                            // 9363
  }                                                                                                                   // 9364
                                                                                                                      // 9365
  this.h[0] = sum32(this.h[0], a);                                                                                    // 9366
  this.h[1] = sum32(this.h[1], b);                                                                                    // 9367
  this.h[2] = sum32(this.h[2], c);                                                                                    // 9368
  this.h[3] = sum32(this.h[3], d);                                                                                    // 9369
  this.h[4] = sum32(this.h[4], e);                                                                                    // 9370
};                                                                                                                    // 9371
                                                                                                                      // 9372
SHA1.prototype._digest = function digest(enc) {                                                                       // 9373
  if (enc === 'hex')                                                                                                  // 9374
    return utils.toHex32(this.h, 'big');                                                                              // 9375
  else                                                                                                                // 9376
    return utils.split32(this.h, 'big');                                                                              // 9377
};                                                                                                                    // 9378
                                                                                                                      // 9379
function ch32(x, y, z) {                                                                                              // 9380
  return (x & y) ^ ((~x) & z);                                                                                        // 9381
}                                                                                                                     // 9382
                                                                                                                      // 9383
function maj32(x, y, z) {                                                                                             // 9384
  return (x & y) ^ (x & z) ^ (y & z);                                                                                 // 9385
}                                                                                                                     // 9386
                                                                                                                      // 9387
function p32(x, y, z) {                                                                                               // 9388
  return x ^ y ^ z;                                                                                                   // 9389
}                                                                                                                     // 9390
                                                                                                                      // 9391
function s0_256(x) {                                                                                                  // 9392
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);                                                                // 9393
}                                                                                                                     // 9394
                                                                                                                      // 9395
function s1_256(x) {                                                                                                  // 9396
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);                                                                // 9397
}                                                                                                                     // 9398
                                                                                                                      // 9399
function g0_256(x) {                                                                                                  // 9400
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);                                                                    // 9401
}                                                                                                                     // 9402
                                                                                                                      // 9403
function g1_256(x) {                                                                                                  // 9404
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);                                                                  // 9405
}                                                                                                                     // 9406
                                                                                                                      // 9407
function ft_1(s, x, y, z) {                                                                                           // 9408
  if (s === 0)                                                                                                        // 9409
    return ch32(x, y, z);                                                                                             // 9410
  if (s === 1 || s === 3)                                                                                             // 9411
    return p32(x, y, z);                                                                                              // 9412
  if (s === 2)                                                                                                        // 9413
    return maj32(x, y, z);                                                                                            // 9414
}                                                                                                                     // 9415
                                                                                                                      // 9416
function ch64_hi(xh, xl, yh, yl, zh, zl) {                                                                            // 9417
  var r = (xh & yh) ^ ((~xh) & zh);                                                                                   // 9418
  if (r < 0)                                                                                                          // 9419
    r += 0x100000000;                                                                                                 // 9420
  return r;                                                                                                           // 9421
}                                                                                                                     // 9422
                                                                                                                      // 9423
function ch64_lo(xh, xl, yh, yl, zh, zl) {                                                                            // 9424
  var r = (xl & yl) ^ ((~xl) & zl);                                                                                   // 9425
  if (r < 0)                                                                                                          // 9426
    r += 0x100000000;                                                                                                 // 9427
  return r;                                                                                                           // 9428
}                                                                                                                     // 9429
                                                                                                                      // 9430
function maj64_hi(xh, xl, yh, yl, zh, zl) {                                                                           // 9431
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);                                                                          // 9432
  if (r < 0)                                                                                                          // 9433
    r += 0x100000000;                                                                                                 // 9434
  return r;                                                                                                           // 9435
}                                                                                                                     // 9436
                                                                                                                      // 9437
function maj64_lo(xh, xl, yh, yl, zh, zl) {                                                                           // 9438
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);                                                                          // 9439
  if (r < 0)                                                                                                          // 9440
    r += 0x100000000;                                                                                                 // 9441
  return r;                                                                                                           // 9442
}                                                                                                                     // 9443
                                                                                                                      // 9444
function s0_512_hi(xh, xl) {                                                                                          // 9445
  var c0_hi = rotr64_hi(xh, xl, 28);                                                                                  // 9446
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34                                                                            // 9447
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39                                                                            // 9448
                                                                                                                      // 9449
  var r = c0_hi ^ c1_hi ^ c2_hi;                                                                                      // 9450
  if (r < 0)                                                                                                          // 9451
    r += 0x100000000;                                                                                                 // 9452
  return r;                                                                                                           // 9453
}                                                                                                                     // 9454
                                                                                                                      // 9455
function s0_512_lo(xh, xl) {                                                                                          // 9456
  var c0_lo = rotr64_lo(xh, xl, 28);                                                                                  // 9457
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34                                                                            // 9458
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39                                                                            // 9459
                                                                                                                      // 9460
  var r = c0_lo ^ c1_lo ^ c2_lo;                                                                                      // 9461
  if (r < 0)                                                                                                          // 9462
    r += 0x100000000;                                                                                                 // 9463
  return r;                                                                                                           // 9464
}                                                                                                                     // 9465
                                                                                                                      // 9466
function s1_512_hi(xh, xl) {                                                                                          // 9467
  var c0_hi = rotr64_hi(xh, xl, 14);                                                                                  // 9468
  var c1_hi = rotr64_hi(xh, xl, 18);                                                                                  // 9469
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41                                                                            // 9470
                                                                                                                      // 9471
  var r = c0_hi ^ c1_hi ^ c2_hi;                                                                                      // 9472
  if (r < 0)                                                                                                          // 9473
    r += 0x100000000;                                                                                                 // 9474
  return r;                                                                                                           // 9475
}                                                                                                                     // 9476
                                                                                                                      // 9477
function s1_512_lo(xh, xl) {                                                                                          // 9478
  var c0_lo = rotr64_lo(xh, xl, 14);                                                                                  // 9479
  var c1_lo = rotr64_lo(xh, xl, 18);                                                                                  // 9480
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41                                                                            // 9481
                                                                                                                      // 9482
  var r = c0_lo ^ c1_lo ^ c2_lo;                                                                                      // 9483
  if (r < 0)                                                                                                          // 9484
    r += 0x100000000;                                                                                                 // 9485
  return r;                                                                                                           // 9486
}                                                                                                                     // 9487
                                                                                                                      // 9488
function g0_512_hi(xh, xl) {                                                                                          // 9489
  var c0_hi = rotr64_hi(xh, xl, 1);                                                                                   // 9490
  var c1_hi = rotr64_hi(xh, xl, 8);                                                                                   // 9491
  var c2_hi = shr64_hi(xh, xl, 7);                                                                                    // 9492
                                                                                                                      // 9493
  var r = c0_hi ^ c1_hi ^ c2_hi;                                                                                      // 9494
  if (r < 0)                                                                                                          // 9495
    r += 0x100000000;                                                                                                 // 9496
  return r;                                                                                                           // 9497
}                                                                                                                     // 9498
                                                                                                                      // 9499
function g0_512_lo(xh, xl) {                                                                                          // 9500
  var c0_lo = rotr64_lo(xh, xl, 1);                                                                                   // 9501
  var c1_lo = rotr64_lo(xh, xl, 8);                                                                                   // 9502
  var c2_lo = shr64_lo(xh, xl, 7);                                                                                    // 9503
                                                                                                                      // 9504
  var r = c0_lo ^ c1_lo ^ c2_lo;                                                                                      // 9505
  if (r < 0)                                                                                                          // 9506
    r += 0x100000000;                                                                                                 // 9507
  return r;                                                                                                           // 9508
}                                                                                                                     // 9509
                                                                                                                      // 9510
function g1_512_hi(xh, xl) {                                                                                          // 9511
  var c0_hi = rotr64_hi(xh, xl, 19);                                                                                  // 9512
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61                                                                           // 9513
  var c2_hi = shr64_hi(xh, xl, 6);                                                                                    // 9514
                                                                                                                      // 9515
  var r = c0_hi ^ c1_hi ^ c2_hi;                                                                                      // 9516
  if (r < 0)                                                                                                          // 9517
    r += 0x100000000;                                                                                                 // 9518
  return r;                                                                                                           // 9519
}                                                                                                                     // 9520
                                                                                                                      // 9521
function g1_512_lo(xh, xl) {                                                                                          // 9522
  var c0_lo = rotr64_lo(xh, xl, 19);                                                                                  // 9523
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61                                                                           // 9524
  var c2_lo = shr64_lo(xh, xl, 6);                                                                                    // 9525
                                                                                                                      // 9526
  var r = c0_lo ^ c1_lo ^ c2_lo;                                                                                      // 9527
  if (r < 0)                                                                                                          // 9528
    r += 0x100000000;                                                                                                 // 9529
  return r;                                                                                                           // 9530
}                                                                                                                     // 9531
                                                                                                                      // 9532
},{"../hash":43}],48:[function(require,module,exports){                                                               // 9533
var utils = exports;                                                                                                  // 9534
var inherits = require('inherits');                                                                                   // 9535
                                                                                                                      // 9536
function toArray(msg, enc) {                                                                                          // 9537
  if (Array.isArray(msg))                                                                                             // 9538
    return msg.slice();                                                                                               // 9539
  if (!msg)                                                                                                           // 9540
    return [];                                                                                                        // 9541
  var res = [];                                                                                                       // 9542
  if (typeof msg === 'string') {                                                                                      // 9543
    if (!enc) {                                                                                                       // 9544
      for (var i = 0; i < msg.length; i++) {                                                                          // 9545
        var c = msg.charCodeAt(i);                                                                                    // 9546
        var hi = c >> 8;                                                                                              // 9547
        var lo = c & 0xff;                                                                                            // 9548
        if (hi)                                                                                                       // 9549
          res.push(hi, lo);                                                                                           // 9550
        else                                                                                                          // 9551
          res.push(lo);                                                                                               // 9552
      }                                                                                                               // 9553
    } else if (enc === 'hex') {                                                                                       // 9554
      msg = msg.replace(/[^a-z0-9]+/ig, '');                                                                          // 9555
      if (msg.length % 2 !== 0)                                                                                       // 9556
        msg = '0' + msg;                                                                                              // 9557
      for (var i = 0; i < msg.length; i += 2)                                                                         // 9558
        res.push(parseInt(msg[i] + msg[i + 1], 16));                                                                  // 9559
    }                                                                                                                 // 9560
  } else {                                                                                                            // 9561
    for (var i = 0; i < msg.length; i++)                                                                              // 9562
      res[i] = msg[i] | 0;                                                                                            // 9563
  }                                                                                                                   // 9564
  return res;                                                                                                         // 9565
}                                                                                                                     // 9566
utils.toArray = toArray;                                                                                              // 9567
                                                                                                                      // 9568
function toHex(msg) {                                                                                                 // 9569
  var res = '';                                                                                                       // 9570
  for (var i = 0; i < msg.length; i++)                                                                                // 9571
    res += zero2(msg[i].toString(16));                                                                                // 9572
  return res;                                                                                                         // 9573
}                                                                                                                     // 9574
utils.toHex = toHex;                                                                                                  // 9575
                                                                                                                      // 9576
function htonl(w) {                                                                                                   // 9577
  var res = (w >>> 24) |                                                                                              // 9578
            ((w >>> 8) & 0xff00) |                                                                                    // 9579
            ((w << 8) & 0xff0000) |                                                                                   // 9580
            ((w & 0xff) << 24);                                                                                       // 9581
  return res >>> 0;                                                                                                   // 9582
}                                                                                                                     // 9583
utils.htonl = htonl;                                                                                                  // 9584
                                                                                                                      // 9585
function toHex32(msg, endian) {                                                                                       // 9586
  var res = '';                                                                                                       // 9587
  for (var i = 0; i < msg.length; i++) {                                                                              // 9588
    var w = msg[i];                                                                                                   // 9589
    if (endian === 'little')                                                                                          // 9590
      w = htonl(w);                                                                                                   // 9591
    res += zero8(w.toString(16));                                                                                     // 9592
  }                                                                                                                   // 9593
  return res;                                                                                                         // 9594
}                                                                                                                     // 9595
utils.toHex32 = toHex32;                                                                                              // 9596
                                                                                                                      // 9597
function zero2(word) {                                                                                                // 9598
  if (word.length === 1)                                                                                              // 9599
    return '0' + word;                                                                                                // 9600
  else                                                                                                                // 9601
    return word;                                                                                                      // 9602
}                                                                                                                     // 9603
utils.zero2 = zero2;                                                                                                  // 9604
                                                                                                                      // 9605
function zero8(word) {                                                                                                // 9606
  if (word.length === 7)                                                                                              // 9607
    return '0' + word;                                                                                                // 9608
  else if (word.length === 6)                                                                                         // 9609
    return '00' + word;                                                                                               // 9610
  else if (word.length === 5)                                                                                         // 9611
    return '000' + word;                                                                                              // 9612
  else if (word.length === 4)                                                                                         // 9613
    return '0000' + word;                                                                                             // 9614
  else if (word.length === 3)                                                                                         // 9615
    return '00000' + word;                                                                                            // 9616
  else if (word.length === 2)                                                                                         // 9617
    return '000000' + word;                                                                                           // 9618
  else if (word.length === 1)                                                                                         // 9619
    return '0000000' + word;                                                                                          // 9620
  else                                                                                                                // 9621
    return word;                                                                                                      // 9622
}                                                                                                                     // 9623
utils.zero8 = zero8;                                                                                                  // 9624
                                                                                                                      // 9625
function join32(msg, start, end, endian) {                                                                            // 9626
  var len = end - start;                                                                                              // 9627
  assert(len % 4 === 0);                                                                                              // 9628
  var res = new Array(len / 4);                                                                                       // 9629
  for (var i = 0, k = start; i < res.length; i++, k += 4) {                                                           // 9630
    var w;                                                                                                            // 9631
    if (endian === 'big')                                                                                             // 9632
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];                                       // 9633
    else                                                                                                              // 9634
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];                                       // 9635
    res[i] = w >>> 0;                                                                                                 // 9636
  }                                                                                                                   // 9637
  return res;                                                                                                         // 9638
}                                                                                                                     // 9639
utils.join32 = join32;                                                                                                // 9640
                                                                                                                      // 9641
function split32(msg, endian) {                                                                                       // 9642
  var res = new Array(msg.length * 4);                                                                                // 9643
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {                                                               // 9644
    var m = msg[i];                                                                                                   // 9645
    if (endian === 'big') {                                                                                           // 9646
      res[k] = m >>> 24;                                                                                              // 9647
      res[k + 1] = (m >>> 16) & 0xff;                                                                                 // 9648
      res[k + 2] = (m >>> 8) & 0xff;                                                                                  // 9649
      res[k + 3] = m & 0xff;                                                                                          // 9650
    } else {                                                                                                          // 9651
      res[k + 3] = m >>> 24;                                                                                          // 9652
      res[k + 2] = (m >>> 16) & 0xff;                                                                                 // 9653
      res[k + 1] = (m >>> 8) & 0xff;                                                                                  // 9654
      res[k] = m & 0xff;                                                                                              // 9655
    }                                                                                                                 // 9656
  }                                                                                                                   // 9657
  return res;                                                                                                         // 9658
}                                                                                                                     // 9659
utils.split32 = split32;                                                                                              // 9660
                                                                                                                      // 9661
function rotr32(w, b) {                                                                                               // 9662
  return (w >>> b) | (w << (32 - b));                                                                                 // 9663
}                                                                                                                     // 9664
utils.rotr32 = rotr32;                                                                                                // 9665
                                                                                                                      // 9666
function rotl32(w, b) {                                                                                               // 9667
  return (w << b) | (w >>> (32 - b));                                                                                 // 9668
}                                                                                                                     // 9669
utils.rotl32 = rotl32;                                                                                                // 9670
                                                                                                                      // 9671
function sum32(a, b) {                                                                                                // 9672
  return (a + b) >>> 0;                                                                                               // 9673
}                                                                                                                     // 9674
utils.sum32 = sum32;                                                                                                  // 9675
                                                                                                                      // 9676
function sum32_3(a, b, c) {                                                                                           // 9677
  return (a + b + c) >>> 0;                                                                                           // 9678
}                                                                                                                     // 9679
utils.sum32_3 = sum32_3;                                                                                              // 9680
                                                                                                                      // 9681
function sum32_4(a, b, c, d) {                                                                                        // 9682
  return (a + b + c + d) >>> 0;                                                                                       // 9683
}                                                                                                                     // 9684
utils.sum32_4 = sum32_4;                                                                                              // 9685
                                                                                                                      // 9686
function sum32_5(a, b, c, d, e) {                                                                                     // 9687
  return (a + b + c + d + e) >>> 0;                                                                                   // 9688
}                                                                                                                     // 9689
utils.sum32_5 = sum32_5;                                                                                              // 9690
                                                                                                                      // 9691
function assert(cond, msg) {                                                                                          // 9692
  if (!cond)                                                                                                          // 9693
    throw new Error(msg || 'Assertion failed');                                                                       // 9694
}                                                                                                                     // 9695
utils.assert = assert;                                                                                                // 9696
                                                                                                                      // 9697
utils.inherits = inherits;                                                                                            // 9698
                                                                                                                      // 9699
function sum64(buf, pos, ah, al) {                                                                                    // 9700
  var bh = buf[pos];                                                                                                  // 9701
  var bl = buf[pos + 1];                                                                                              // 9702
                                                                                                                      // 9703
  var lo = (al + bl) >>> 0;                                                                                           // 9704
  var hi = (lo < al ? 1 : 0) + ah + bh;                                                                               // 9705
  buf[pos] = hi >>> 0;                                                                                                // 9706
  buf[pos + 1] = lo;                                                                                                  // 9707
}                                                                                                                     // 9708
exports.sum64 = sum64;                                                                                                // 9709
                                                                                                                      // 9710
function sum64_hi(ah, al, bh, bl) {                                                                                   // 9711
  var lo = (al + bl) >>> 0;                                                                                           // 9712
  var hi = (lo < al ? 1 : 0) + ah + bh;                                                                               // 9713
  return hi >>> 0;                                                                                                    // 9714
};                                                                                                                    // 9715
exports.sum64_hi = sum64_hi;                                                                                          // 9716
                                                                                                                      // 9717
function sum64_lo(ah, al, bh, bl) {                                                                                   // 9718
  var lo = al + bl;                                                                                                   // 9719
  return lo >>> 0;                                                                                                    // 9720
};                                                                                                                    // 9721
exports.sum64_lo = sum64_lo;                                                                                          // 9722
                                                                                                                      // 9723
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {                                                                 // 9724
  var carry = 0;                                                                                                      // 9725
  var lo = al;                                                                                                        // 9726
  lo = (lo + bl) >>> 0;                                                                                               // 9727
  carry += lo < al ? 1 : 0;                                                                                           // 9728
  lo = (lo + cl) >>> 0;                                                                                               // 9729
  carry += lo < cl ? 1 : 0;                                                                                           // 9730
  lo = (lo + dl) >>> 0;                                                                                               // 9731
  carry += lo < dl ? 1 : 0;                                                                                           // 9732
                                                                                                                      // 9733
  var hi = ah + bh + ch + dh + carry;                                                                                 // 9734
  return hi >>> 0;                                                                                                    // 9735
};                                                                                                                    // 9736
exports.sum64_4_hi = sum64_4_hi;                                                                                      // 9737
                                                                                                                      // 9738
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {                                                                 // 9739
  var lo = al + bl + cl + dl;                                                                                         // 9740
  return lo >>> 0;                                                                                                    // 9741
};                                                                                                                    // 9742
exports.sum64_4_lo = sum64_4_lo;                                                                                      // 9743
                                                                                                                      // 9744
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {                                                         // 9745
  var carry = 0;                                                                                                      // 9746
  var lo = al;                                                                                                        // 9747
  lo = (lo + bl) >>> 0;                                                                                               // 9748
  carry += lo < al ? 1 : 0;                                                                                           // 9749
  lo = (lo + cl) >>> 0;                                                                                               // 9750
  carry += lo < cl ? 1 : 0;                                                                                           // 9751
  lo = (lo + dl) >>> 0;                                                                                               // 9752
  carry += lo < dl ? 1 : 0;                                                                                           // 9753
  lo = (lo + el) >>> 0;                                                                                               // 9754
  carry += lo < el ? 1 : 0;                                                                                           // 9755
                                                                                                                      // 9756
  var hi = ah + bh + ch + dh + eh + carry;                                                                            // 9757
  return hi >>> 0;                                                                                                    // 9758
};                                                                                                                    // 9759
exports.sum64_5_hi = sum64_5_hi;                                                                                      // 9760
                                                                                                                      // 9761
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {                                                         // 9762
  var lo = al + bl + cl + dl + el;                                                                                    // 9763
                                                                                                                      // 9764
  return lo >>> 0;                                                                                                    // 9765
};                                                                                                                    // 9766
exports.sum64_5_lo = sum64_5_lo;                                                                                      // 9767
                                                                                                                      // 9768
function rotr64_hi(ah, al, num) {                                                                                     // 9769
  var r = (al << (32 - num)) | (ah >>> num);                                                                          // 9770
  return r >>> 0;                                                                                                     // 9771
};                                                                                                                    // 9772
exports.rotr64_hi = rotr64_hi;                                                                                        // 9773
                                                                                                                      // 9774
function rotr64_lo(ah, al, num) {                                                                                     // 9775
  var r = (ah << (32 - num)) | (al >>> num);                                                                          // 9776
  return r >>> 0;                                                                                                     // 9777
};                                                                                                                    // 9778
exports.rotr64_lo = rotr64_lo;                                                                                        // 9779
                                                                                                                      // 9780
function shr64_hi(ah, al, num) {                                                                                      // 9781
  return ah >>> num;                                                                                                  // 9782
};                                                                                                                    // 9783
exports.shr64_hi = shr64_hi;                                                                                          // 9784
                                                                                                                      // 9785
function shr64_lo(ah, al, num) {                                                                                      // 9786
  var r = (ah << (32 - num)) | (al >>> num);                                                                          // 9787
  return r >>> 0;                                                                                                     // 9788
};                                                                                                                    // 9789
exports.shr64_lo = shr64_lo;                                                                                          // 9790
                                                                                                                      // 9791
},{"inherits":144}],49:[function(require,module,exports){                                                             // 9792
module.exports={                                                                                                      // 9793
  "name": "elliptic",                                                                                                 // 9794
  "version": "1.0.1",                                                                                                 // 9795
  "description": "EC cryptography",                                                                                   // 9796
  "main": "lib/elliptic.js",                                                                                          // 9797
  "scripts": {                                                                                                        // 9798
    "test": "mocha --reporter=spec test/*-test.js"                                                                    // 9799
  },                                                                                                                  // 9800
  "repository": {                                                                                                     // 9801
    "type": "git",                                                                                                    // 9802
    "url": "git@github.com:indutny/elliptic"                                                                          // 9803
  },                                                                                                                  // 9804
  "keywords": [                                                                                                       // 9805
    "EC",                                                                                                             // 9806
    "Elliptic",                                                                                                       // 9807
    "curve",                                                                                                          // 9808
    "Cryptography"                                                                                                    // 9809
  ],                                                                                                                  // 9810
  "author": {                                                                                                         // 9811
    "name": "Fedor Indutny",                                                                                          // 9812
    "email": "fedor@indutny.com"                                                                                      // 9813
  },                                                                                                                  // 9814
  "license": "MIT",                                                                                                   // 9815
  "bugs": {                                                                                                           // 9816
    "url": "https://github.com/indutny/elliptic/issues"                                                               // 9817
  },                                                                                                                  // 9818
  "homepage": "https://github.com/indutny/elliptic",                                                                  // 9819
  "devDependencies": {                                                                                                // 9820
    "browserify": "^3.44.2",                                                                                          // 9821
    "mocha": "^1.18.2",                                                                                               // 9822
    "uglify-js": "^2.4.13"                                                                                            // 9823
  },                                                                                                                  // 9824
  "dependencies": {                                                                                                   // 9825
    "bn.js": "^1.0.0",                                                                                                // 9826
    "brorand": "^1.0.1",                                                                                              // 9827
    "hash.js": "^1.0.0",                                                                                              // 9828
    "inherits": "^2.0.1"                                                                                              // 9829
  },                                                                                                                  // 9830
  "gitHead": "17dc013761dd1efcfb868e2b06b0b897627b40be",                                                              // 9831
  "_id": "elliptic@1.0.1",                                                                                            // 9832
  "_shasum": "d180376b66a17d74995c837796362ac4d22aefe3",                                                              // 9833
  "_from": "elliptic@1.0.1",                                                                                          // 9834
  "_npmVersion": "1.4.28",                                                                                            // 9835
  "_npmUser": {                                                                                                       // 9836
    "name": "indutny",                                                                                                // 9837
    "email": "fedor@indutny.com"                                                                                      // 9838
  },                                                                                                                  // 9839
  "maintainers": [                                                                                                    // 9840
    {                                                                                                                 // 9841
      "name": "indutny",                                                                                              // 9842
      "email": "fedor@indutny.com"                                                                                    // 9843
    }                                                                                                                 // 9844
  ],                                                                                                                  // 9845
  "dist": {                                                                                                           // 9846
    "shasum": "d180376b66a17d74995c837796362ac4d22aefe3",                                                             // 9847
    "tarball": "http://registry.npmjs.org/elliptic/-/elliptic-1.0.1.tgz"                                              // 9848
  },                                                                                                                  // 9849
  "directories": {},                                                                                                  // 9850
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-1.0.1.tgz",                                            // 9851
  "readme": "ERROR: No README data found!"                                                                            // 9852
}                                                                                                                     // 9853
                                                                                                                      // 9854
},{}],50:[function(require,module,exports){                                                                           // 9855
(function (Buffer){                                                                                                   // 9856
var createHash = require('create-hash');                                                                              // 9857
module.exports = function evp(password, salt, keyLen) {                                                               // 9858
  keyLen = keyLen/8;                                                                                                  // 9859
  var ki = 0;                                                                                                         // 9860
  var ii = 0;                                                                                                         // 9861
  var key = new Buffer(keyLen);                                                                                       // 9862
  var addmd = 0;                                                                                                      // 9863
  var md, md_buf;                                                                                                     // 9864
  var i;                                                                                                              // 9865
  while (true) {                                                                                                      // 9866
    md = createHash('md5');                                                                                           // 9867
    if(addmd++ > 0) {                                                                                                 // 9868
       md.update(md_buf);                                                                                             // 9869
    }                                                                                                                 // 9870
    md.update(password);                                                                                              // 9871
    md.update(salt);                                                                                                  // 9872
    md_buf = md.digest();                                                                                             // 9873
    i = 0;                                                                                                            // 9874
    if(keyLen > 0) {                                                                                                  // 9875
      while(true) {                                                                                                   // 9876
        if(keyLen === 0) {                                                                                            // 9877
          break;                                                                                                      // 9878
        }                                                                                                             // 9879
        if(i === md_buf.length) {                                                                                     // 9880
          break;                                                                                                      // 9881
        }                                                                                                             // 9882
        key[ki++] = md_buf[i++];                                                                                      // 9883
        keyLen--;                                                                                                     // 9884
       }                                                                                                              // 9885
    }                                                                                                                 // 9886
   if(keyLen === 0) {                                                                                                 // 9887
      break;                                                                                                          // 9888
    }                                                                                                                 // 9889
  }                                                                                                                   // 9890
  for(i=0;i<md_buf.length;i++) {                                                                                      // 9891
    md_buf[i] = 0;                                                                                                    // 9892
  }                                                                                                                   // 9893
  return key;                                                                                                         // 9894
};                                                                                                                    // 9895
}).call(this,require("buffer").Buffer)                                                                                // 9896
                                                                                                                      // 9897
},{"buffer":2,"create-hash":94}],51:[function(require,module,exports){                                                // 9898
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",                                                              // 9899
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",                                                                              // 9900
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",                                                                              // 9901
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",                                                                              // 9902
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",                                                                             // 9903
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",                                                                             // 9904
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",                                                                             // 9905
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",                                                                             // 9906
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",                                                                             // 9907
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",                                                                             // 9908
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",                                                                             // 9909
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"                                                                              // 9910
}                                                                                                                     // 9911
},{}],52:[function(require,module,exports){                                                                           // 9912
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js                                              // 9913
// Fedor, you are amazing.                                                                                            // 9914
                                                                                                                      // 9915
var asn1 = require('asn1.js');                                                                                        // 9916
                                                                                                                      // 9917
var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {                                                         // 9918
  this.seq().obj(                                                                                                     // 9919
    this.key('version').int(),                                                                                        // 9920
    this.key('modulus').int(),                                                                                        // 9921
    this.key('publicExponent').int(),                                                                                 // 9922
    this.key('privateExponent').int(),                                                                                // 9923
    this.key('prime1').int(),                                                                                         // 9924
    this.key('prime2').int(),                                                                                         // 9925
    this.key('exponent1').int(),                                                                                      // 9926
    this.key('exponent2').int(),                                                                                      // 9927
    this.key('coefficient').int()                                                                                     // 9928
  );                                                                                                                  // 9929
});                                                                                                                   // 9930
exports.RSAPrivateKey = RSAPrivateKey;                                                                                // 9931
                                                                                                                      // 9932
var RSAPublicKey = asn1.define('RSAPublicKey', function() {                                                           // 9933
  this.seq().obj(                                                                                                     // 9934
    this.key('modulus').int(),                                                                                        // 9935
    this.key('publicExponent').int()                                                                                  // 9936
  );                                                                                                                  // 9937
});                                                                                                                   // 9938
exports.RSAPublicKey = RSAPublicKey;                                                                                  // 9939
                                                                                                                      // 9940
var PublicKey = asn1.define('SubjectPublicKeyInfo', function() {                                                      // 9941
  this.seq().obj(                                                                                                     // 9942
    this.key('algorithm').use(AlgorithmIdentifier),                                                                   // 9943
    this.key('subjectPublicKey').bitstr()                                                                             // 9944
  );                                                                                                                  // 9945
});                                                                                                                   // 9946
exports.PublicKey = PublicKey;                                                                                        // 9947
                                                                                                                      // 9948
var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {                                             // 9949
  this.seq().obj(                                                                                                     // 9950
    this.key('algorithm').objid(),                                                                                    // 9951
    this.key('none').null_().optional(),                                                                              // 9952
    this.key('curve').objid().optional(),                                                                             // 9953
    this.key('params').seq().obj(                                                                                     // 9954
        this.key('p').int(),                                                                                          // 9955
        this.key('q').int(),                                                                                          // 9956
        this.key('g').int()                                                                                           // 9957
      ).optional()                                                                                                    // 9958
  );                                                                                                                  // 9959
});                                                                                                                   // 9960
                                                                                                                      // 9961
var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {                                                       // 9962
  this.seq().obj(                                                                                                     // 9963
    this.key('version').int(),                                                                                        // 9964
    this.key('algorithm').use(AlgorithmIdentifier),                                                                   // 9965
    this.key('subjectPrivateKey').octstr()                                                                            // 9966
  );                                                                                                                  // 9967
});                                                                                                                   // 9968
exports.PrivateKey = PrivateKeyInfo;                                                                                  // 9969
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {                                     // 9970
  this.seq().obj(                                                                                                     // 9971
    this.key('algorithm').seq().obj(                                                                                  // 9972
      this.key('id').objid(),                                                                                         // 9973
      this.key('decrypt').seq().obj(                                                                                  // 9974
        this.key('kde').seq().obj(                                                                                    // 9975
          this.key('id').objid(),                                                                                     // 9976
          this.key('kdeparams').seq().obj(                                                                            // 9977
            this.key('salt').octstr(),                                                                                // 9978
            this.key('iters').int()                                                                                   // 9979
          )                                                                                                           // 9980
        ),                                                                                                            // 9981
        this.key('cipher').seq().obj(                                                                                 // 9982
          this.key('algo').objid(),                                                                                   // 9983
          this.key('iv').octstr()                                                                                     // 9984
        )                                                                                                             // 9985
      )                                                                                                               // 9986
    ),                                                                                                                // 9987
    this.key('subjectPrivateKey').octstr()                                                                            // 9988
  );                                                                                                                  // 9989
});                                                                                                                   // 9990
                                                                                                                      // 9991
exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;                                                                // 9992
                                                                                                                      // 9993
var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {                                                         // 9994
  this.seq().obj(                                                                                                     // 9995
    this.key('version').int(),                                                                                        // 9996
    this.key('p').int(),                                                                                              // 9997
    this.key('q').int(),                                                                                              // 9998
    this.key('g').int(),                                                                                              // 9999
    this.key('pub_key').int(),                                                                                        // 10000
    this.key('priv_key').int()                                                                                        // 10001
  );                                                                                                                  // 10002
});                                                                                                                   // 10003
exports.DSAPrivateKey = DSAPrivateKey;                                                                                // 10004
                                                                                                                      // 10005
exports.DSAparam = asn1.define('DSAparam', function () {                                                              // 10006
  this.int();                                                                                                         // 10007
});                                                                                                                   // 10008
var ECPrivateKey = asn1.define('ECPrivateKey', function() {                                                           // 10009
  this.seq().obj(                                                                                                     // 10010
    this.key('version').int(),                                                                                        // 10011
    this.key('privateKey').octstr(),                                                                                  // 10012
    this.key('parameters').optional().explicit(0).use(ECParameters),                                                  // 10013
    this.key('publicKey').optional().explicit(1).bitstr()                                                             // 10014
  );                                                                                                                  // 10015
});                                                                                                                   // 10016
exports.ECPrivateKey = ECPrivateKey;                                                                                  // 10017
var ECParameters = asn1.define('ECParameters', function() {                                                           // 10018
  this.choice({                                                                                                       // 10019
    namedCurve: this.objid()                                                                                          // 10020
  });                                                                                                                 // 10021
});                                                                                                                   // 10022
                                                                                                                      // 10023
exports.signature = asn1.define('signature', function() {                                                             // 10024
  this.seq().obj(                                                                                                     // 10025
    this.key('r').int(),                                                                                              // 10026
    this.key('s').int()                                                                                               // 10027
  );                                                                                                                  // 10028
});                                                                                                                   // 10029
                                                                                                                      // 10030
},{"asn1.js":55}],53:[function(require,module,exports){                                                               // 10031
(function (Buffer){                                                                                                   // 10032
// adapted from https://github.com/apatil/pemstrip                                                                    // 10033
var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
var startRegex =/^-----BEGIN (.*) KEY-----\n/m;                                                                       // 10035
var fullRegex = /^-----BEGIN (.*) KEY-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1 KEY-----$/m;                     // 10036
var evp = require('./EVP_BytesToKey');                                                                                // 10037
var ciphers = require('browserify-aes');                                                                              // 10038
module.exports = function (okey, password) {                                                                          // 10039
  var key = okey.toString();                                                                                          // 10040
  var match = key.match(findProc);                                                                                    // 10041
  var decrypted;                                                                                                      // 10042
  if (!match) {                                                                                                       // 10043
    var match2 = key.match(fullRegex);                                                                                // 10044
    decrypted = new Buffer(match2[2].replace(/\n\r?/g, ''), 'base64');                                                // 10045
  } else {                                                                                                            // 10046
    var suite = 'aes' + match[1];                                                                                     // 10047
    var iv = new Buffer(match[2], 'hex');                                                                             // 10048
    var cipherText = new Buffer(match[3].replace(/\n\r?/g, ''), 'base64');                                            // 10049
    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));                                                 // 10050
    var out = [];                                                                                                     // 10051
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);                                                      // 10052
    out.push(cipher.update(cipherText));                                                                              // 10053
    out.push(cipher.final());                                                                                         // 10054
    decrypted = Buffer.concat(out);                                                                                   // 10055
  }                                                                                                                   // 10056
  var tag = key.match(startRegex)[1] + ' KEY';                                                                        // 10057
  return {                                                                                                            // 10058
    tag: tag,                                                                                                         // 10059
    data: decrypted                                                                                                   // 10060
  };                                                                                                                  // 10061
};                                                                                                                    // 10062
// http://stackoverflow.com/a/7033705                                                                                 // 10063
function wrap(str) {                                                                                                  // 10064
  var chunks = [];                                                                                                    // 10065
  while (str) {                                                                                                       // 10066
    if (str.length < 64) {                                                                                            // 10067
      chunks.push(str);                                                                                               // 10068
      break;                                                                                                          // 10069
    }                                                                                                                 // 10070
    else {                                                                                                            // 10071
      chunks.push(str.slice(0, 64));                                                                                  // 10072
      str = str.slice(64);                                                                                            // 10073
    }                                                                                                                 // 10074
  }                                                                                                                   // 10075
  return chunks.join("\n");                                                                                           // 10076
}                                                                                                                     // 10077
}).call(this,require("buffer").Buffer)                                                                                // 10078
                                                                                                                      // 10079
},{"./EVP_BytesToKey":50,"browserify-aes":10,"buffer":2}],54:[function(require,module,exports){                       // 10080
(function (Buffer){                                                                                                   // 10081
var asn1 = require('./asn1');                                                                                         // 10082
var aesid = require('./aesid.json');                                                                                  // 10083
var fixProc = require('./fixProc');                                                                                   // 10084
var ciphers = require('browserify-aes');                                                                              // 10085
var compat = require('pbkdf2-compat');                                                                                // 10086
module.exports = parseKeys;                                                                                           // 10087
                                                                                                                      // 10088
function parseKeys(buffer) {                                                                                          // 10089
  var password;                                                                                                       // 10090
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {                                                       // 10091
    password = buffer.passphrase;                                                                                     // 10092
    buffer = buffer.key;                                                                                              // 10093
  }                                                                                                                   // 10094
  if (typeof buffer === 'string') {                                                                                   // 10095
    buffer = new Buffer(buffer);                                                                                      // 10096
  }                                                                                                                   // 10097
                                                                                                                      // 10098
  var stripped = fixProc(buffer, password);                                                                           // 10099
                                                                                                                      // 10100
  var type = stripped.tag;                                                                                            // 10101
  var data = stripped.data;                                                                                           // 10102
  var subtype,ndata;                                                                                                  // 10103
  switch (type) {                                                                                                     // 10104
    case 'PUBLIC KEY':                                                                                                // 10105
      ndata = asn1.PublicKey.decode(data, 'der');                                                                     // 10106
      subtype = ndata.algorithm.algorithm.join('.');                                                                  // 10107
      switch(subtype) {                                                                                               // 10108
        case '1.2.840.113549.1.1.1':                                                                                  // 10109
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');                                        // 10110
        case '1.2.840.10045.2.1':                                                                                     // 10111
        ndata.subjectPrivateKey = ndata.subjectPublicKey;                                                             // 10112
          return {                                                                                                    // 10113
            type: 'ec',                                                                                               // 10114
            data:  ndata                                                                                              // 10115
          };                                                                                                          // 10116
        case '1.2.840.10040.4.1':                                                                                     // 10117
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');                  // 10118
          return {                                                                                                    // 10119
            type: 'dsa',                                                                                              // 10120
            data: ndata.algorithm.params                                                                              // 10121
          };                                                                                                          // 10122
        default: throw new Error('unknown key id ' +  subtype);                                                       // 10123
      }                                                                                                               // 10124
      throw new Error('unknown key type ' +  type);                                                                   // 10125
    case 'ENCRYPTED PRIVATE KEY':                                                                                     // 10126
      data = asn1.EncryptedPrivateKey.decode(data, 'der');                                                            // 10127
      data = decrypt(data, password);                                                                                 // 10128
      //falling through                                                                                               // 10129
    case 'PRIVATE KEY':                                                                                               // 10130
      ndata = asn1.PrivateKey.decode(data, 'der');                                                                    // 10131
      subtype = ndata.algorithm.algorithm.join('.');                                                                  // 10132
      switch(subtype) {                                                                                               // 10133
        case '1.2.840.113549.1.1.1':                                                                                  // 10134
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');                                           // 10135
        case '1.2.840.10045.2.1':                                                                                     // 10136
          return {                                                                                                    // 10137
            curve: ndata.algorithm.curve,                                                                             // 10138
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey                           // 10139
          };                                                                                                          // 10140
        case '1.2.840.10040.4.1':                                                                                     // 10141
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');                     // 10142
          return {                                                                                                    // 10143
            type: 'dsa',                                                                                              // 10144
            params: ndata.algorithm.params                                                                            // 10145
          };                                                                                                          // 10146
        default: throw new Error('unknown key id ' +  subtype);                                                       // 10147
      }                                                                                                               // 10148
      throw new Error('unknown key type ' +  type);                                                                   // 10149
    case 'RSA PUBLIC KEY':                                                                                            // 10150
      return asn1.RSAPublicKey.decode(data, 'der');                                                                   // 10151
    case 'RSA PRIVATE KEY':                                                                                           // 10152
      return asn1.RSAPrivateKey.decode(data, 'der');                                                                  // 10153
    case 'DSA PRIVATE KEY':                                                                                           // 10154
      return {                                                                                                        // 10155
        type: 'dsa',                                                                                                  // 10156
        params: asn1.DSAPrivateKey.decode(data, 'der')                                                                // 10157
      };                                                                                                              // 10158
    case 'EC PRIVATE KEY':                                                                                            // 10159
      data = asn1.ECPrivateKey.decode(data, 'der');                                                                   // 10160
      return {                                                                                                        // 10161
        curve: data.parameters.value,                                                                                 // 10162
        privateKey: data.privateKey                                                                                   // 10163
      };                                                                                                              // 10164
    default: throw new Error('unknown key type ' +  type);                                                            // 10165
  }                                                                                                                   // 10166
}                                                                                                                     // 10167
parseKeys.signature = asn1.signature;                                                                                 // 10168
function decrypt(data, password) {                                                                                    // 10169
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;                                                               // 10170
  var iters = data.algorithm.decrypt.kde.kdeparams.iters;                                                             // 10171
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];                                                     // 10172
  var iv = data.algorithm.decrypt.cipher.iv;                                                                          // 10173
  var cipherText = data.subjectPrivateKey;                                                                            // 10174
  var keylen = parseInt(algo.split('-')[1], 10)/8;                                                                    // 10175
  var key = compat.pbkdf2Sync(password, salt, iters, keylen);                                                         // 10176
  var cipher = ciphers.createDecipheriv(algo, key, iv);                                                               // 10177
  var out = [];                                                                                                       // 10178
  out.push(cipher.update(cipherText));                                                                                // 10179
  out.push(cipher.final());                                                                                           // 10180
  return Buffer.concat(out);                                                                                          // 10181
}                                                                                                                     // 10182
}).call(this,require("buffer").Buffer)                                                                                // 10183
                                                                                                                      // 10184
},{"./aesid.json":51,"./asn1":52,"./fixProc":53,"browserify-aes":10,"buffer":2,"pbkdf2-compat":68}],55:[function(require,module,exports){
var asn1 = exports;                                                                                                   // 10186
                                                                                                                      // 10187
asn1.bignum = require('bn.js');                                                                                       // 10188
                                                                                                                      // 10189
asn1.define = require('./asn1/api').define;                                                                           // 10190
asn1.base = require('./asn1/base');                                                                                   // 10191
asn1.constants = require('./asn1/constants');                                                                         // 10192
asn1.decoders = require('./asn1/decoders');                                                                           // 10193
asn1.encoders = require('./asn1/encoders');                                                                           // 10194
                                                                                                                      // 10195
},{"./asn1/api":56,"./asn1/base":58,"./asn1/constants":62,"./asn1/decoders":64,"./asn1/encoders":66,"bn.js":28}],56:[function(require,module,exports){
var asn1 = require('../asn1');                                                                                        // 10197
var inherits = require('inherits');                                                                                   // 10198
                                                                                                                      // 10199
var api = exports;                                                                                                    // 10200
                                                                                                                      // 10201
api.define = function define(name, body) {                                                                            // 10202
  return new Entity(name, body);                                                                                      // 10203
};                                                                                                                    // 10204
                                                                                                                      // 10205
function Entity(name, body) {                                                                                         // 10206
  this.name = name;                                                                                                   // 10207
  this.body = body;                                                                                                   // 10208
                                                                                                                      // 10209
  this.decoders = {};                                                                                                 // 10210
  this.encoders = {};                                                                                                 // 10211
};                                                                                                                    // 10212
                                                                                                                      // 10213
Entity.prototype._createNamed = function createNamed(base) {                                                          // 10214
  var named;                                                                                                          // 10215
  try {                                                                                                               // 10216
    named = require('vm').runInThisContext(                                                                           // 10217
      '(function ' + this.name + '(entity) {\n' +                                                                     // 10218
      '  this._initNamed(entity);\n' +                                                                                // 10219
      '})'                                                                                                            // 10220
    );                                                                                                                // 10221
  } catch (e) {                                                                                                       // 10222
    named = function (entity) {                                                                                       // 10223
      this._initNamed(entity);                                                                                        // 10224
    };                                                                                                                // 10225
  }                                                                                                                   // 10226
  inherits(named, base);                                                                                              // 10227
  named.prototype._initNamed = function initnamed(entity) {                                                           // 10228
    base.call(this, entity);                                                                                          // 10229
  };                                                                                                                  // 10230
                                                                                                                      // 10231
  return new named(this);                                                                                             // 10232
};                                                                                                                    // 10233
                                                                                                                      // 10234
Entity.prototype._getDecoder = function _getDecoder(enc) {                                                            // 10235
  // Lazily create decoder                                                                                            // 10236
  if (!this.decoders.hasOwnProperty(enc))                                                                             // 10237
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);                                                       // 10238
  return this.decoders[enc];                                                                                          // 10239
};                                                                                                                    // 10240
                                                                                                                      // 10241
Entity.prototype.decode = function decode(data, enc, options) {                                                       // 10242
  return this._getDecoder(enc).decode(data, options);                                                                 // 10243
};                                                                                                                    // 10244
                                                                                                                      // 10245
Entity.prototype._getEncoder = function _getEncoder(enc) {                                                            // 10246
  // Lazily create encoder                                                                                            // 10247
  if (!this.encoders.hasOwnProperty(enc))                                                                             // 10248
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);                                                       // 10249
  return this.encoders[enc];                                                                                          // 10250
};                                                                                                                    // 10251
                                                                                                                      // 10252
Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {                                       // 10253
  return this._getEncoder(enc).encode(data, reporter);                                                                // 10254
};                                                                                                                    // 10255
                                                                                                                      // 10256
},{"../asn1":55,"inherits":144,"vm":160}],57:[function(require,module,exports){                                       // 10257
var inherits = require('inherits');                                                                                   // 10258
var Reporter = require('../base').Reporter;                                                                           // 10259
var Buffer = require('buffer').Buffer;                                                                                // 10260
                                                                                                                      // 10261
function DecoderBuffer(base, options) {                                                                               // 10262
  Reporter.call(this, options);                                                                                       // 10263
  if (!Buffer.isBuffer(base)) {                                                                                       // 10264
    this.error('Input not Buffer');                                                                                   // 10265
    return;                                                                                                           // 10266
  }                                                                                                                   // 10267
                                                                                                                      // 10268
  this.base = base;                                                                                                   // 10269
  this.offset = 0;                                                                                                    // 10270
  this.length = base.length;                                                                                          // 10271
}                                                                                                                     // 10272
inherits(DecoderBuffer, Reporter);                                                                                    // 10273
exports.DecoderBuffer = DecoderBuffer;                                                                                // 10274
                                                                                                                      // 10275
DecoderBuffer.prototype.save = function save() {                                                                      // 10276
  return { offset: this.offset };                                                                                     // 10277
};                                                                                                                    // 10278
                                                                                                                      // 10279
DecoderBuffer.prototype.restore = function restore(save) {                                                            // 10280
  // Return skipped data                                                                                              // 10281
  var res = new DecoderBuffer(this.base);                                                                             // 10282
  res.offset = save.offset;                                                                                           // 10283
  res.length = this.offset;                                                                                           // 10284
                                                                                                                      // 10285
  this.offset = save.offset;                                                                                          // 10286
                                                                                                                      // 10287
  return res;                                                                                                         // 10288
};                                                                                                                    // 10289
                                                                                                                      // 10290
DecoderBuffer.prototype.isEmpty = function isEmpty() {                                                                // 10291
  return this.offset === this.length;                                                                                 // 10292
};                                                                                                                    // 10293
                                                                                                                      // 10294
DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {                                                        // 10295
  if (this.offset + 1 <= this.length)                                                                                 // 10296
    return this.base.readUInt8(this.offset++, true);                                                                  // 10297
  else                                                                                                                // 10298
    return this.error(fail || 'DecoderBuffer overrun');                                                               // 10299
}                                                                                                                     // 10300
                                                                                                                      // 10301
DecoderBuffer.prototype.skip = function skip(bytes, fail) {                                                           // 10302
  if (!(this.offset + bytes <= this.length))                                                                          // 10303
    return this.error(fail || 'DecoderBuffer overrun');                                                               // 10304
                                                                                                                      // 10305
  var res = new DecoderBuffer(this.base);                                                                             // 10306
                                                                                                                      // 10307
  // Share reporter state                                                                                             // 10308
  res._reporterState = this._reporterState;                                                                           // 10309
                                                                                                                      // 10310
  res.offset = this.offset;                                                                                           // 10311
  res.length = this.offset + bytes;                                                                                   // 10312
  this.offset += bytes;                                                                                               // 10313
  return res;                                                                                                         // 10314
}                                                                                                                     // 10315
                                                                                                                      // 10316
DecoderBuffer.prototype.raw = function raw(save) {                                                                    // 10317
  return this.base.slice(save ? save.offset : this.offset, this.length);                                              // 10318
}                                                                                                                     // 10319
                                                                                                                      // 10320
function EncoderBuffer(value, reporter) {                                                                             // 10321
  if (Array.isArray(value)) {                                                                                         // 10322
    this.length = 0;                                                                                                  // 10323
    this.value = value.map(function(item) {                                                                           // 10324
      if (!(item instanceof EncoderBuffer))                                                                           // 10325
        item = new EncoderBuffer(item, reporter);                                                                     // 10326
      this.length += item.length;                                                                                     // 10327
      return item;                                                                                                    // 10328
    }, this);                                                                                                         // 10329
  } else if (typeof value === 'number') {                                                                             // 10330
    if (!(0 <= value && value <= 0xff))                                                                               // 10331
      return reporter.error('non-byte EncoderBuffer value');                                                          // 10332
    this.value = value;                                                                                               // 10333
    this.length = 1;                                                                                                  // 10334
  } else if (typeof value === 'string') {                                                                             // 10335
    this.value = value;                                                                                               // 10336
    this.length = Buffer.byteLength(value);                                                                           // 10337
  } else if (Buffer.isBuffer(value)) {                                                                                // 10338
    this.value = value;                                                                                               // 10339
    this.length = value.length;                                                                                       // 10340
  } else {                                                                                                            // 10341
    return reporter.error('Unsupported type: ' + typeof value);                                                       // 10342
  }                                                                                                                   // 10343
}                                                                                                                     // 10344
exports.EncoderBuffer = EncoderBuffer;                                                                                // 10345
                                                                                                                      // 10346
EncoderBuffer.prototype.join = function join(out, offset) {                                                           // 10347
  if (!out)                                                                                                           // 10348
    out = new Buffer(this.length);                                                                                    // 10349
  if (!offset)                                                                                                        // 10350
    offset = 0;                                                                                                       // 10351
                                                                                                                      // 10352
  if (this.length === 0)                                                                                              // 10353
    return out;                                                                                                       // 10354
                                                                                                                      // 10355
  if (Array.isArray(this.value)) {                                                                                    // 10356
    this.value.forEach(function(item) {                                                                               // 10357
      item.join(out, offset);                                                                                         // 10358
      offset += item.length;                                                                                          // 10359
    });                                                                                                               // 10360
  } else {                                                                                                            // 10361
    if (typeof this.value === 'number')                                                                               // 10362
      out[offset] = this.value;                                                                                       // 10363
    else if (typeof this.value === 'string')                                                                          // 10364
      out.write(this.value, offset);                                                                                  // 10365
    else if (Buffer.isBuffer(this.value))                                                                             // 10366
      this.value.copy(out, offset);                                                                                   // 10367
    offset += this.length;                                                                                            // 10368
  }                                                                                                                   // 10369
                                                                                                                      // 10370
  return out;                                                                                                         // 10371
};                                                                                                                    // 10372
                                                                                                                      // 10373
},{"../base":58,"buffer":2,"inherits":144}],58:[function(require,module,exports){                                     // 10374
var base = exports;                                                                                                   // 10375
                                                                                                                      // 10376
base.Reporter = require('./reporter').Reporter;                                                                       // 10377
base.DecoderBuffer = require('./buffer').DecoderBuffer;                                                               // 10378
base.EncoderBuffer = require('./buffer').EncoderBuffer;                                                               // 10379
base.Node = require('./node');                                                                                        // 10380
                                                                                                                      // 10381
},{"./buffer":57,"./node":59,"./reporter":60}],59:[function(require,module,exports){                                  // 10382
var Reporter = require('../base').Reporter;                                                                           // 10383
var EncoderBuffer = require('../base').EncoderBuffer;                                                                 // 10384
var assert = require('minimalistic-assert');                                                                          // 10385
                                                                                                                      // 10386
// Supported tags                                                                                                     // 10387
var tags = [                                                                                                          // 10388
  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',                                                // 10389
  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str'                                                              // 10390
];                                                                                                                    // 10391
                                                                                                                      // 10392
// Public methods list                                                                                                // 10393
var methods = [                                                                                                       // 10394
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',                                           // 10395
  'any'                                                                                                               // 10396
].concat(tags);                                                                                                       // 10397
                                                                                                                      // 10398
// Overrided methods list                                                                                             // 10399
var overrided = [                                                                                                     // 10400
  '_peekTag', '_decodeTag', '_use',                                                                                   // 10401
  '_decodeStr', '_decodeObjid', '_decodeTime',                                                                        // 10402
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',                                                          // 10403
                                                                                                                      // 10404
  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',                                                    // 10405
  '_encodeNull', '_encodeInt', '_encodeBool'                                                                          // 10406
];                                                                                                                    // 10407
                                                                                                                      // 10408
function Node(enc, parent) {                                                                                          // 10409
  var state = {};                                                                                                     // 10410
  this._baseState = state;                                                                                            // 10411
                                                                                                                      // 10412
  state.enc = enc;                                                                                                    // 10413
                                                                                                                      // 10414
  state.parent = parent || null;                                                                                      // 10415
  state.children = null;                                                                                              // 10416
                                                                                                                      // 10417
  // State                                                                                                            // 10418
  state.tag = null;                                                                                                   // 10419
  state.args = null;                                                                                                  // 10420
  state.reverseArgs = null;                                                                                           // 10421
  state.choice = null;                                                                                                // 10422
  state.optional = false;                                                                                             // 10423
  state.any = false;                                                                                                  // 10424
  state.obj = false;                                                                                                  // 10425
  state.use = null;                                                                                                   // 10426
  state.useDecoder = null;                                                                                            // 10427
  state.key = null;                                                                                                   // 10428
  state['default'] = null;                                                                                            // 10429
  state.explicit = null;                                                                                              // 10430
  state.implicit = null;                                                                                              // 10431
                                                                                                                      // 10432
  // Should create new instance on each method                                                                        // 10433
  if (!state.parent) {                                                                                                // 10434
    state.children = [];                                                                                              // 10435
    this._wrap();                                                                                                     // 10436
  }                                                                                                                   // 10437
}                                                                                                                     // 10438
module.exports = Node;                                                                                                // 10439
                                                                                                                      // 10440
var stateProps = [                                                                                                    // 10441
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',                                                // 10442
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',                                        // 10443
  'implicit'                                                                                                          // 10444
];                                                                                                                    // 10445
                                                                                                                      // 10446
Node.prototype.clone = function clone() {                                                                             // 10447
  var state = this._baseState;                                                                                        // 10448
  var cstate = {};                                                                                                    // 10449
  stateProps.forEach(function(prop) {                                                                                 // 10450
    cstate[prop] = state[prop];                                                                                       // 10451
  });                                                                                                                 // 10452
  var res = new this.constructor(cstate.parent);                                                                      // 10453
  res._baseState = cstate;                                                                                            // 10454
  return res;                                                                                                         // 10455
};                                                                                                                    // 10456
                                                                                                                      // 10457
Node.prototype._wrap = function wrap() {                                                                              // 10458
  var state = this._baseState;                                                                                        // 10459
  methods.forEach(function(method) {                                                                                  // 10460
    this[method] = function _wrappedMethod() {                                                                        // 10461
      var clone = new this.constructor(this);                                                                         // 10462
      state.children.push(clone);                                                                                     // 10463
      return clone[method].apply(clone, arguments);                                                                   // 10464
    };                                                                                                                // 10465
  }, this);                                                                                                           // 10466
};                                                                                                                    // 10467
                                                                                                                      // 10468
Node.prototype._init = function init(body) {                                                                          // 10469
  var state = this._baseState;                                                                                        // 10470
                                                                                                                      // 10471
  assert(state.parent === null);                                                                                      // 10472
  body.call(this);                                                                                                    // 10473
                                                                                                                      // 10474
  // Filter children                                                                                                  // 10475
  state.children = state.children.filter(function(child) {                                                            // 10476
    return child._baseState.parent === this;                                                                          // 10477
  }, this);                                                                                                           // 10478
  assert.equal(state.children.length, 1, 'Root node can have only one child');                                        // 10479
};                                                                                                                    // 10480
                                                                                                                      // 10481
Node.prototype._useArgs = function useArgs(args) {                                                                    // 10482
  var state = this._baseState;                                                                                        // 10483
                                                                                                                      // 10484
  // Filter children and args                                                                                         // 10485
  var children = args.filter(function(arg) {                                                                          // 10486
    return arg instanceof this.constructor;                                                                           // 10487
  }, this);                                                                                                           // 10488
  args = args.filter(function(arg) {                                                                                  // 10489
    return !(arg instanceof this.constructor);                                                                        // 10490
  }, this);                                                                                                           // 10491
                                                                                                                      // 10492
  if (children.length !== 0) {                                                                                        // 10493
    assert(state.children === null);                                                                                  // 10494
    state.children = children;                                                                                        // 10495
                                                                                                                      // 10496
    // Replace parent to maintain backward link                                                                       // 10497
    children.forEach(function(child) {                                                                                // 10498
      child._baseState.parent = this;                                                                                 // 10499
    }, this);                                                                                                         // 10500
  }                                                                                                                   // 10501
  if (args.length !== 0) {                                                                                            // 10502
    assert(state.args === null);                                                                                      // 10503
    state.args = args;                                                                                                // 10504
    state.reverseArgs = args.map(function(arg) {                                                                      // 10505
      if (typeof arg !== 'object' || arg.constructor !== Object)                                                      // 10506
        return arg;                                                                                                   // 10507
                                                                                                                      // 10508
      var res = {};                                                                                                   // 10509
      Object.keys(arg).forEach(function(key) {                                                                        // 10510
        if (key == (key | 0))                                                                                         // 10511
          key |= 0;                                                                                                   // 10512
        var value = arg[key];                                                                                         // 10513
        res[value] = key;                                                                                             // 10514
      });                                                                                                             // 10515
      return res;                                                                                                     // 10516
    });                                                                                                               // 10517
  }                                                                                                                   // 10518
};                                                                                                                    // 10519
                                                                                                                      // 10520
//                                                                                                                    // 10521
// Overrided methods                                                                                                  // 10522
//                                                                                                                    // 10523
                                                                                                                      // 10524
overrided.forEach(function(method) {                                                                                  // 10525
  Node.prototype[method] = function _overrided() {                                                                    // 10526
    var state = this._baseState;                                                                                      // 10527
    throw new Error(method + ' not implemented for encoding: ' + state.enc);                                          // 10528
  };                                                                                                                  // 10529
});                                                                                                                   // 10530
                                                                                                                      // 10531
//                                                                                                                    // 10532
// Public methods                                                                                                     // 10533
//                                                                                                                    // 10534
                                                                                                                      // 10535
tags.forEach(function(tag) {                                                                                          // 10536
  Node.prototype[tag] = function _tagMethod() {                                                                       // 10537
    var state = this._baseState;                                                                                      // 10538
    var args = Array.prototype.slice.call(arguments);                                                                 // 10539
                                                                                                                      // 10540
    assert(state.tag === null);                                                                                       // 10541
    state.tag = tag;                                                                                                  // 10542
                                                                                                                      // 10543
    this._useArgs(args);                                                                                              // 10544
                                                                                                                      // 10545
    return this;                                                                                                      // 10546
  };                                                                                                                  // 10547
});                                                                                                                   // 10548
                                                                                                                      // 10549
Node.prototype.use = function use(item) {                                                                             // 10550
  var state = this._baseState;                                                                                        // 10551
                                                                                                                      // 10552
  assert(state.use === null);                                                                                         // 10553
  state.use = item;                                                                                                   // 10554
                                                                                                                      // 10555
  return this;                                                                                                        // 10556
};                                                                                                                    // 10557
                                                                                                                      // 10558
Node.prototype.optional = function optional() {                                                                       // 10559
  var state = this._baseState;                                                                                        // 10560
                                                                                                                      // 10561
  state.optional = true;                                                                                              // 10562
                                                                                                                      // 10563
  return this;                                                                                                        // 10564
};                                                                                                                    // 10565
                                                                                                                      // 10566
Node.prototype.def = function def(val) {                                                                              // 10567
  var state = this._baseState;                                                                                        // 10568
                                                                                                                      // 10569
  assert(state['default'] === null);                                                                                  // 10570
  state['default'] = val;                                                                                             // 10571
  state.optional = true;                                                                                              // 10572
                                                                                                                      // 10573
  return this;                                                                                                        // 10574
};                                                                                                                    // 10575
                                                                                                                      // 10576
Node.prototype.explicit = function explicit(num) {                                                                    // 10577
  var state = this._baseState;                                                                                        // 10578
                                                                                                                      // 10579
  assert(state.explicit === null && state.implicit === null);                                                         // 10580
  state.explicit = num;                                                                                               // 10581
                                                                                                                      // 10582
  return this;                                                                                                        // 10583
};                                                                                                                    // 10584
                                                                                                                      // 10585
Node.prototype.implicit = function implicit(num) {                                                                    // 10586
  var state = this._baseState;                                                                                        // 10587
                                                                                                                      // 10588
  assert(state.explicit === null && state.implicit === null);                                                         // 10589
  state.implicit = num;                                                                                               // 10590
                                                                                                                      // 10591
  return this;                                                                                                        // 10592
};                                                                                                                    // 10593
                                                                                                                      // 10594
Node.prototype.obj = function obj() {                                                                                 // 10595
  var state = this._baseState;                                                                                        // 10596
  var args = Array.prototype.slice.call(arguments);                                                                   // 10597
                                                                                                                      // 10598
  state.obj = true;                                                                                                   // 10599
                                                                                                                      // 10600
  if (args.length !== 0)                                                                                              // 10601
    this._useArgs(args);                                                                                              // 10602
                                                                                                                      // 10603
  return this;                                                                                                        // 10604
};                                                                                                                    // 10605
                                                                                                                      // 10606
Node.prototype.key = function key(newKey) {                                                                           // 10607
  var state = this._baseState;                                                                                        // 10608
                                                                                                                      // 10609
  assert(state.key === null);                                                                                         // 10610
  state.key = newKey;                                                                                                 // 10611
                                                                                                                      // 10612
  return this;                                                                                                        // 10613
};                                                                                                                    // 10614
                                                                                                                      // 10615
Node.prototype.any = function any() {                                                                                 // 10616
  var state = this._baseState;                                                                                        // 10617
                                                                                                                      // 10618
  state.any = true;                                                                                                   // 10619
                                                                                                                      // 10620
  return this;                                                                                                        // 10621
};                                                                                                                    // 10622
                                                                                                                      // 10623
Node.prototype.choice = function choice(obj) {                                                                        // 10624
  var state = this._baseState;                                                                                        // 10625
                                                                                                                      // 10626
  assert(state.choice === null);                                                                                      // 10627
  state.choice = obj;                                                                                                 // 10628
  this._useArgs(Object.keys(obj).map(function(key) {                                                                  // 10629
    return obj[key];                                                                                                  // 10630
  }));                                                                                                                // 10631
                                                                                                                      // 10632
  return this;                                                                                                        // 10633
};                                                                                                                    // 10634
                                                                                                                      // 10635
//                                                                                                                    // 10636
// Decoding                                                                                                           // 10637
//                                                                                                                    // 10638
                                                                                                                      // 10639
Node.prototype._decode = function decode(input) {                                                                     // 10640
  var state = this._baseState;                                                                                        // 10641
                                                                                                                      // 10642
  // Decode root node                                                                                                 // 10643
  if (state.parent === null)                                                                                          // 10644
    return input.wrapResult(state.children[0]._decode(input));                                                        // 10645
                                                                                                                      // 10646
  var result = state['default'];                                                                                      // 10647
  var present = true;                                                                                                 // 10648
                                                                                                                      // 10649
  var prevKey;                                                                                                        // 10650
  if (state.key !== null)                                                                                             // 10651
    prevKey = input.enterKey(state.key);                                                                              // 10652
                                                                                                                      // 10653
  // Check if tag is there                                                                                            // 10654
  if (state.optional) {                                                                                               // 10655
    present = this._peekTag(                                                                                          // 10656
      input,                                                                                                          // 10657
      state.explicit !== null ? state.explicit :                                                                      // 10658
          state.implicit !== null ? state.implicit :                                                                  // 10659
              state.tag || 0                                                                                          // 10660
    );                                                                                                                // 10661
    if (input.isError(present))                                                                                       // 10662
      return present;                                                                                                 // 10663
  }                                                                                                                   // 10664
                                                                                                                      // 10665
  // Push object on stack                                                                                             // 10666
  var prevObj;                                                                                                        // 10667
  if (state.obj && present)                                                                                           // 10668
    prevObj = input.enterObject();                                                                                    // 10669
                                                                                                                      // 10670
  if (present) {                                                                                                      // 10671
    // Unwrap explicit values                                                                                         // 10672
    if (state.explicit !== null) {                                                                                    // 10673
      var explicit = this._decodeTag(input, state.explicit);                                                          // 10674
      if (input.isError(explicit))                                                                                    // 10675
        return explicit;                                                                                              // 10676
      input = explicit;                                                                                               // 10677
    }                                                                                                                 // 10678
                                                                                                                      // 10679
    // Unwrap implicit and normal values                                                                              // 10680
    if (state.use === null && state.choice === null) {                                                                // 10681
      if (state.any)                                                                                                  // 10682
        var save = input.save();                                                                                      // 10683
      var body = this._decodeTag(                                                                                     // 10684
        input,                                                                                                        // 10685
        state.implicit !== null ? state.implicit : state.tag,                                                         // 10686
        state.any                                                                                                     // 10687
      );                                                                                                              // 10688
      if (input.isError(body))                                                                                        // 10689
        return body;                                                                                                  // 10690
                                                                                                                      // 10691
      if (state.any)                                                                                                  // 10692
        result = input.raw(save);                                                                                     // 10693
      else                                                                                                            // 10694
        input = body;                                                                                                 // 10695
    }                                                                                                                 // 10696
                                                                                                                      // 10697
    // Select proper method for tag                                                                                   // 10698
    if (state.any)                                                                                                    // 10699
      result = result;                                                                                                // 10700
    else if (state.choice === null)                                                                                   // 10701
      result = this._decodeGeneric(state.tag, input);                                                                 // 10702
    else                                                                                                              // 10703
      result = this._decodeChoice(input);                                                                             // 10704
                                                                                                                      // 10705
    if (input.isError(result))                                                                                        // 10706
      return result;                                                                                                  // 10707
                                                                                                                      // 10708
    // Decode children                                                                                                // 10709
    if (!state.any && state.choice === null && state.children !== null) {                                             // 10710
      var fail = state.children.some(function decodeChildren(child) {                                                 // 10711
        // NOTE: We are ignoring errors here, to let parser continue with other                                       // 10712
        // parts of encoded data                                                                                      // 10713
        child._decode(input);                                                                                         // 10714
      });                                                                                                             // 10715
      if (fail)                                                                                                       // 10716
        return err;                                                                                                   // 10717
    }                                                                                                                 // 10718
  }                                                                                                                   // 10719
                                                                                                                      // 10720
  // Pop object                                                                                                       // 10721
  if (state.obj && present)                                                                                           // 10722
    result = input.leaveObject(prevObj);                                                                              // 10723
                                                                                                                      // 10724
  // Set key                                                                                                          // 10725
  if (state.key !== null && (result !== null || present === true))                                                    // 10726
    input.leaveKey(prevKey, state.key, result);                                                                       // 10727
                                                                                                                      // 10728
  return result;                                                                                                      // 10729
};                                                                                                                    // 10730
                                                                                                                      // 10731
Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {                                                  // 10732
  var state = this._baseState;                                                                                        // 10733
                                                                                                                      // 10734
  if (tag === 'seq' || tag === 'set')                                                                                 // 10735
    return null;                                                                                                      // 10736
  if (tag === 'seqof' || tag === 'setof')                                                                             // 10737
    return this._decodeList(input, tag, state.args[0]);                                                               // 10738
  else if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')                                                  // 10739
    return this._decodeStr(input, tag);                                                                               // 10740
  else if (tag === 'objid' && state.args)                                                                             // 10741
    return this._decodeObjid(input, state.args[0], state.args[1]);                                                    // 10742
  else if (tag === 'objid')                                                                                           // 10743
    return this._decodeObjid(input, null, null);                                                                      // 10744
  else if (tag === 'gentime' || tag === 'utctime')                                                                    // 10745
    return this._decodeTime(input, tag);                                                                              // 10746
  else if (tag === 'null_')                                                                                           // 10747
    return this._decodeNull(input);                                                                                   // 10748
  else if (tag === 'bool')                                                                                            // 10749
    return this._decodeBool(input);                                                                                   // 10750
  else if (tag === 'int' || tag === 'enum')                                                                           // 10751
    return this._decodeInt(input, state.args && state.args[0]);                                                       // 10752
  else if (state.use !== null)                                                                                        // 10753
    return this._getUse(state.use, input._reporterState.obj)._decode(input);                                          // 10754
  else                                                                                                                // 10755
    return input.error('unknown tag: ' + tag);                                                                        // 10756
                                                                                                                      // 10757
  return null;                                                                                                        // 10758
};                                                                                                                    // 10759
                                                                                                                      // 10760
Node.prototype._getUse = function _getUse(entity, obj) {                                                              // 10761
                                                                                                                      // 10762
  var state = this._baseState;                                                                                        // 10763
  // Create altered use decoder if implicit is set                                                                    // 10764
  state.useDecoder = this._use(entity, obj);                                                                          // 10765
  assert(state.useDecoder._baseState.parent === null);                                                                // 10766
  state.useDecoder = state.useDecoder._baseState.children[0];                                                         // 10767
  if (state.implicit !== state.useDecoder._baseState.implicit) {                                                      // 10768
    state.useDecoder = state.useDecoder.clone();                                                                      // 10769
    state.useDecoder._baseState.implicit = state.implicit;                                                            // 10770
  }                                                                                                                   // 10771
  return state.useDecoder;                                                                                            // 10772
};                                                                                                                    // 10773
                                                                                                                      // 10774
Node.prototype._decodeChoice = function decodeChoice(input) {                                                         // 10775
  var state = this._baseState;                                                                                        // 10776
  var result = null;                                                                                                  // 10777
  var match = false;                                                                                                  // 10778
                                                                                                                      // 10779
  Object.keys(state.choice).some(function(key) {                                                                      // 10780
    var save = input.save();                                                                                          // 10781
    var node = state.choice[key];                                                                                     // 10782
    try {                                                                                                             // 10783
      var value = node._decode(input);                                                                                // 10784
      if (input.isError(value))                                                                                       // 10785
        return false;                                                                                                 // 10786
                                                                                                                      // 10787
      result = { type: key, value: value };                                                                           // 10788
      match = true;                                                                                                   // 10789
    } catch (e) {                                                                                                     // 10790
      input.restore(save);                                                                                            // 10791
      return false;                                                                                                   // 10792
    }                                                                                                                 // 10793
    return true;                                                                                                      // 10794
  }, this);                                                                                                           // 10795
                                                                                                                      // 10796
  if (!match)                                                                                                         // 10797
    return input.error('Choice not matched');                                                                         // 10798
                                                                                                                      // 10799
  return result;                                                                                                      // 10800
};                                                                                                                    // 10801
                                                                                                                      // 10802
//                                                                                                                    // 10803
// Encoding                                                                                                           // 10804
//                                                                                                                    // 10805
                                                                                                                      // 10806
Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {                                            // 10807
  return new EncoderBuffer(data, this.reporter);                                                                      // 10808
};                                                                                                                    // 10809
                                                                                                                      // 10810
Node.prototype._encode = function encode(data, reporter, parent) {                                                    // 10811
  var state = this._baseState;                                                                                        // 10812
  if (state['default'] !== null && state['default'] === data)                                                         // 10813
    return;                                                                                                           // 10814
                                                                                                                      // 10815
  var result = this._encodeValue(data, reporter, parent);                                                             // 10816
  if (result === undefined)                                                                                           // 10817
    return;                                                                                                           // 10818
                                                                                                                      // 10819
  if (this._skipDefault(result, reporter, parent))                                                                    // 10820
    return;                                                                                                           // 10821
                                                                                                                      // 10822
  return result;                                                                                                      // 10823
};                                                                                                                    // 10824
                                                                                                                      // 10825
Node.prototype._encodeValue = function encode(data, reporter, parent) {                                               // 10826
  var state = this._baseState;                                                                                        // 10827
                                                                                                                      // 10828
  // Decode root node                                                                                                 // 10829
  if (state.parent === null)                                                                                          // 10830
    return state.children[0]._encode(data, reporter || new Reporter());                                               // 10831
                                                                                                                      // 10832
  var result = null;                                                                                                  // 10833
  var present = true;                                                                                                 // 10834
                                                                                                                      // 10835
  // Set reporter to share it with a child class                                                                      // 10836
  this.reporter = reporter;                                                                                           // 10837
                                                                                                                      // 10838
  // Check if data is there                                                                                           // 10839
  if (state.optional && data === undefined) {                                                                         // 10840
    if (state['default'] !== null)                                                                                    // 10841
      data = state['default']                                                                                         // 10842
    else                                                                                                              // 10843
      return;                                                                                                         // 10844
  }                                                                                                                   // 10845
                                                                                                                      // 10846
  // For error reporting                                                                                              // 10847
  var prevKey;                                                                                                        // 10848
                                                                                                                      // 10849
  // Encode children first                                                                                            // 10850
  var content = null;                                                                                                 // 10851
  var primitive = false;                                                                                              // 10852
  if (state.any) {                                                                                                    // 10853
    // Anything that was given is translated to buffer                                                                // 10854
    result = this._createEncoderBuffer(data);                                                                         // 10855
  } else if (state.choice) {                                                                                          // 10856
    result = this._encodeChoice(data, reporter);                                                                      // 10857
  } else if (state.children) {                                                                                        // 10858
    content = state.children.map(function(child) {                                                                    // 10859
      if (child._baseState.tag === 'null_')                                                                           // 10860
        return child._encode(null, reporter, data);                                                                   // 10861
                                                                                                                      // 10862
      if (child._baseState.key === null)                                                                              // 10863
        return reporter.error('Child should have a key');                                                             // 10864
      var prevKey = reporter.enterKey(child._baseState.key);                                                          // 10865
                                                                                                                      // 10866
      if (typeof data !== 'object')                                                                                   // 10867
        return reporter.error('Child expected, but input is not object');                                             // 10868
                                                                                                                      // 10869
      var res = child._encode(data[child._baseState.key], reporter, data);                                            // 10870
      reporter.leaveKey(prevKey);                                                                                     // 10871
                                                                                                                      // 10872
      return res;                                                                                                     // 10873
    }, this).filter(function(child) {                                                                                 // 10874
      return child;                                                                                                   // 10875
    });                                                                                                               // 10876
                                                                                                                      // 10877
    content = this._createEncoderBuffer(content);                                                                     // 10878
  } else {                                                                                                            // 10879
    if (state.tag === 'seqof' || state.tag === 'setof') {                                                             // 10880
      // TODO(indutny): this should be thrown on DSL level                                                            // 10881
      if (!(state.args && state.args.length === 1))                                                                   // 10882
        return reporter.error('Too many args for : ' + state.tag);                                                    // 10883
                                                                                                                      // 10884
      if (!Array.isArray(data))                                                                                       // 10885
        return reporter.error('seqof/setof, but data is not Array');                                                  // 10886
                                                                                                                      // 10887
      var child = this.clone();                                                                                       // 10888
      child._baseState.implicit = null;                                                                               // 10889
      content = this._createEncoderBuffer(data.map(function(item) {                                                   // 10890
        var state = this._baseState;                                                                                  // 10891
                                                                                                                      // 10892
        return this._getUse(state.args[0], data)._encode(item, reporter);                                             // 10893
      }, child));                                                                                                     // 10894
    } else if (state.use !== null) {                                                                                  // 10895
      result = this._getUse(state.use, parent)._encode(data, reporter);                                               // 10896
    } else {                                                                                                          // 10897
      content = this._encodePrimitive(state.tag, data);                                                               // 10898
      primitive = true;                                                                                               // 10899
    }                                                                                                                 // 10900
  }                                                                                                                   // 10901
                                                                                                                      // 10902
  // Encode data itself                                                                                               // 10903
  var result;                                                                                                         // 10904
  if (!state.any && state.choice === null) {                                                                          // 10905
    var tag = state.implicit !== null ? state.implicit : state.tag;                                                   // 10906
    var cls = state.implicit === null ? 'universal' : 'context';                                                      // 10907
                                                                                                                      // 10908
    if (tag === null) {                                                                                               // 10909
      if (state.use === null)                                                                                         // 10910
        reporter.error('Tag could be ommited only for .use()');                                                       // 10911
    } else {                                                                                                          // 10912
      if (state.use === null)                                                                                         // 10913
        result = this._encodeComposite(tag, primitive, cls, content);                                                 // 10914
    }                                                                                                                 // 10915
  }                                                                                                                   // 10916
                                                                                                                      // 10917
  // Wrap in explicit                                                                                                 // 10918
  if (state.explicit !== null)                                                                                        // 10919
    result = this._encodeComposite(state.explicit, false, 'context', result);                                         // 10920
                                                                                                                      // 10921
  return result;                                                                                                      // 10922
};                                                                                                                    // 10923
                                                                                                                      // 10924
Node.prototype._encodeChoice = function encodeChoice(data, reporter) {                                                // 10925
  var state = this._baseState;                                                                                        // 10926
                                                                                                                      // 10927
  var node = state.choice[data.type];                                                                                 // 10928
  if (!node) {                                                                                                        // 10929
    assert(                                                                                                           // 10930
        false,                                                                                                        // 10931
        data.type + ' not found in ' +                                                                                // 10932
            JSON.stringify(Object.keys(state.choice)));                                                               // 10933
  }                                                                                                                   // 10934
  return node._encode(data.value, reporter);                                                                          // 10935
};                                                                                                                    // 10936
                                                                                                                      // 10937
Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {                                               // 10938
  var state = this._baseState;                                                                                        // 10939
                                                                                                                      // 10940
  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')                                                       // 10941
    return this._encodeStr(data, tag);                                                                                // 10942
  else if (tag === 'objid' && state.args)                                                                             // 10943
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);                                              // 10944
  else if (tag === 'objid')                                                                                           // 10945
    return this._encodeObjid(data, null, null);                                                                       // 10946
  else if (tag === 'gentime' || tag === 'utctime')                                                                    // 10947
    return this._encodeTime(data, tag);                                                                               // 10948
  else if (tag === 'null_')                                                                                           // 10949
    return this._encodeNull();                                                                                        // 10950
  else if (tag === 'int' || tag === 'enum')                                                                           // 10951
    return this._encodeInt(data, state.args && state.reverseArgs[0]);                                                 // 10952
  else if (tag === 'bool')                                                                                            // 10953
    return this._encodeBool(data);                                                                                    // 10954
  else                                                                                                                // 10955
    throw new Error('Unsupported tag: ' + tag);                                                                       // 10956
};                                                                                                                    // 10957
                                                                                                                      // 10958
},{"../base":58,"minimalistic-assert":67}],60:[function(require,module,exports){                                      // 10959
var inherits = require('inherits');                                                                                   // 10960
                                                                                                                      // 10961
function Reporter(options) {                                                                                          // 10962
  this._reporterState = {                                                                                             // 10963
    obj: null,                                                                                                        // 10964
    path: [],                                                                                                         // 10965
    options: options || {},                                                                                           // 10966
    errors: []                                                                                                        // 10967
  };                                                                                                                  // 10968
}                                                                                                                     // 10969
exports.Reporter = Reporter;                                                                                          // 10970
                                                                                                                      // 10971
Reporter.prototype.isError = function isError(obj) {                                                                  // 10972
  return obj instanceof ReporterError;                                                                                // 10973
};                                                                                                                    // 10974
                                                                                                                      // 10975
Reporter.prototype.enterKey = function enterKey(key) {                                                                // 10976
  return this._reporterState.path.push(key);                                                                          // 10977
};                                                                                                                    // 10978
                                                                                                                      // 10979
Reporter.prototype.leaveKey = function leaveKey(index, key, value) {                                                  // 10980
  var state = this._reporterState;                                                                                    // 10981
                                                                                                                      // 10982
  state.path = state.path.slice(0, index - 1);                                                                        // 10983
  if (state.obj !== null)                                                                                             // 10984
    state.obj[key] = value;                                                                                           // 10985
};                                                                                                                    // 10986
                                                                                                                      // 10987
Reporter.prototype.enterObject = function enterObject() {                                                             // 10988
  var state = this._reporterState;                                                                                    // 10989
                                                                                                                      // 10990
  var prev = state.obj;                                                                                               // 10991
  state.obj = {};                                                                                                     // 10992
  return prev;                                                                                                        // 10993
};                                                                                                                    // 10994
                                                                                                                      // 10995
Reporter.prototype.leaveObject = function leaveObject(prev) {                                                         // 10996
  var state = this._reporterState;                                                                                    // 10997
                                                                                                                      // 10998
  var now = state.obj;                                                                                                // 10999
  state.obj = prev;                                                                                                   // 11000
  return now;                                                                                                         // 11001
};                                                                                                                    // 11002
                                                                                                                      // 11003
Reporter.prototype.error = function error(msg) {                                                                      // 11004
  var err;                                                                                                            // 11005
  var state = this._reporterState;                                                                                    // 11006
                                                                                                                      // 11007
  var inherited = msg instanceof ReporterError;                                                                       // 11008
  if (inherited) {                                                                                                    // 11009
    err = msg;                                                                                                        // 11010
  } else {                                                                                                            // 11011
    err = new ReporterError(state.path.map(function(elem) {                                                           // 11012
      return '[' + JSON.stringify(elem) + ']';                                                                        // 11013
    }).join(''), msg.message || msg, msg.stack);                                                                      // 11014
  }                                                                                                                   // 11015
                                                                                                                      // 11016
  if (!state.options.partial)                                                                                         // 11017
    throw err;                                                                                                        // 11018
                                                                                                                      // 11019
  if (!inherited)                                                                                                     // 11020
    state.errors.push(err);                                                                                           // 11021
                                                                                                                      // 11022
  return err;                                                                                                         // 11023
};                                                                                                                    // 11024
                                                                                                                      // 11025
Reporter.prototype.wrapResult = function wrapResult(result) {                                                         // 11026
  var state = this._reporterState;                                                                                    // 11027
  if (!state.options.partial)                                                                                         // 11028
    return result;                                                                                                    // 11029
                                                                                                                      // 11030
  return {                                                                                                            // 11031
    result: this.isError(result) ? null : result,                                                                     // 11032
    errors: state.errors                                                                                              // 11033
  };                                                                                                                  // 11034
};                                                                                                                    // 11035
                                                                                                                      // 11036
function ReporterError(path, msg) {                                                                                   // 11037
  this.path = path;                                                                                                   // 11038
  this.rethrow(msg);                                                                                                  // 11039
};                                                                                                                    // 11040
inherits(ReporterError, Error);                                                                                       // 11041
                                                                                                                      // 11042
ReporterError.prototype.rethrow = function rethrow(msg) {                                                             // 11043
  this.message = msg + ' at: ' + (this.path || '(shallow)');                                                          // 11044
  Error.captureStackTrace(this, ReporterError);                                                                       // 11045
                                                                                                                      // 11046
  return this;                                                                                                        // 11047
};                                                                                                                    // 11048
                                                                                                                      // 11049
},{"inherits":144}],61:[function(require,module,exports){                                                             // 11050
var constants = require('../constants');                                                                              // 11051
                                                                                                                      // 11052
exports.tagClass = {                                                                                                  // 11053
  0: 'universal',                                                                                                     // 11054
  1: 'application',                                                                                                   // 11055
  2: 'context',                                                                                                       // 11056
  3: 'private'                                                                                                        // 11057
};                                                                                                                    // 11058
exports.tagClassByName = constants._reverse(exports.tagClass);                                                        // 11059
                                                                                                                      // 11060
exports.tag = {                                                                                                       // 11061
  0x00: 'end',                                                                                                        // 11062
  0x01: 'bool',                                                                                                       // 11063
  0x02: 'int',                                                                                                        // 11064
  0x03: 'bitstr',                                                                                                     // 11065
  0x04: 'octstr',                                                                                                     // 11066
  0x05: 'null_',                                                                                                      // 11067
  0x06: 'objid',                                                                                                      // 11068
  0x07: 'objDesc',                                                                                                    // 11069
  0x08: 'external',                                                                                                   // 11070
  0x09: 'real',                                                                                                       // 11071
  0x0a: 'enum',                                                                                                       // 11072
  0x0b: 'embed',                                                                                                      // 11073
  0x0c: 'utf8str',                                                                                                    // 11074
  0x0d: 'relativeOid',                                                                                                // 11075
  0x10: 'seq',                                                                                                        // 11076
  0x11: 'set',                                                                                                        // 11077
  0x12: 'numstr',                                                                                                     // 11078
  0x13: 'printstr',                                                                                                   // 11079
  0x14: 't61str',                                                                                                     // 11080
  0x15: 'videostr',                                                                                                   // 11081
  0x16: 'ia5str',                                                                                                     // 11082
  0x17: 'utctime',                                                                                                    // 11083
  0x18: 'gentime',                                                                                                    // 11084
  0x19: 'graphstr',                                                                                                   // 11085
  0x1a: 'iso646str',                                                                                                  // 11086
  0x1b: 'genstr',                                                                                                     // 11087
  0x1c: 'unistr',                                                                                                     // 11088
  0x1d: 'charstr',                                                                                                    // 11089
  0x1e: 'bmpstr'                                                                                                      // 11090
};                                                                                                                    // 11091
exports.tagByName = constants._reverse(exports.tag);                                                                  // 11092
                                                                                                                      // 11093
},{"../constants":62}],62:[function(require,module,exports){                                                          // 11094
var constants = exports;                                                                                              // 11095
                                                                                                                      // 11096
// Helper                                                                                                             // 11097
constants._reverse = function reverse(map) {                                                                          // 11098
  var res = {};                                                                                                       // 11099
                                                                                                                      // 11100
  Object.keys(map).forEach(function(key) {                                                                            // 11101
    // Convert key to integer if it is stringified                                                                    // 11102
    if ((key | 0) == key)                                                                                             // 11103
      key = key | 0;                                                                                                  // 11104
                                                                                                                      // 11105
    var value = map[key];                                                                                             // 11106
    res[value] = key;                                                                                                 // 11107
  });                                                                                                                 // 11108
                                                                                                                      // 11109
  return res;                                                                                                         // 11110
};                                                                                                                    // 11111
                                                                                                                      // 11112
constants.der = require('./der');                                                                                     // 11113
                                                                                                                      // 11114
},{"./der":61}],63:[function(require,module,exports){                                                                 // 11115
var inherits = require('inherits');                                                                                   // 11116
                                                                                                                      // 11117
var asn1 = require('../../asn1');                                                                                     // 11118
var base = asn1.base;                                                                                                 // 11119
var bignum = asn1.bignum;                                                                                             // 11120
                                                                                                                      // 11121
// Import DER constants                                                                                               // 11122
var der = asn1.constants.der;                                                                                         // 11123
                                                                                                                      // 11124
function DERDecoder(entity) {                                                                                         // 11125
  this.enc = 'der';                                                                                                   // 11126
  this.name = entity.name;                                                                                            // 11127
  this.entity = entity;                                                                                               // 11128
                                                                                                                      // 11129
  // Construct base tree                                                                                              // 11130
  this.tree = new DERNode();                                                                                          // 11131
  this.tree._init(entity.body);                                                                                       // 11132
};                                                                                                                    // 11133
module.exports = DERDecoder;                                                                                          // 11134
                                                                                                                      // 11135
DERDecoder.prototype.decode = function decode(data, options) {                                                        // 11136
  if (!(data instanceof base.DecoderBuffer))                                                                          // 11137
    data = new base.DecoderBuffer(data, options);                                                                     // 11138
                                                                                                                      // 11139
  return this.tree._decode(data, options);                                                                            // 11140
};                                                                                                                    // 11141
                                                                                                                      // 11142
// Tree methods                                                                                                       // 11143
                                                                                                                      // 11144
function DERNode(parent) {                                                                                            // 11145
  base.Node.call(this, 'der', parent);                                                                                // 11146
}                                                                                                                     // 11147
inherits(DERNode, base.Node);                                                                                         // 11148
                                                                                                                      // 11149
DERNode.prototype._peekTag = function peekTag(buffer, tag) {                                                          // 11150
  if (buffer.isEmpty())                                                                                               // 11151
    return false;                                                                                                     // 11152
                                                                                                                      // 11153
  var state = buffer.save();                                                                                          // 11154
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');                                         // 11155
  if (buffer.isError(decodedTag))                                                                                     // 11156
    return decodedTag;                                                                                                // 11157
                                                                                                                      // 11158
  buffer.restore(state);                                                                                              // 11159
                                                                                                                      // 11160
  return decodedTag.tag === tag || decodedTag.tagStr === tag;                                                         // 11161
};                                                                                                                    // 11162
                                                                                                                      // 11163
DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {                                                 // 11164
  var decodedTag = derDecodeTag(buffer,                                                                               // 11165
                                'Failed to decode tag of "' + tag + '"');                                             // 11166
  if (buffer.isError(decodedTag))                                                                                     // 11167
    return decodedTag;                                                                                                // 11168
                                                                                                                      // 11169
  var len = derDecodeLen(buffer,                                                                                      // 11170
                         decodedTag.primitive,                                                                        // 11171
                         'Failed to get length of "' + tag + '"');                                                    // 11172
                                                                                                                      // 11173
  // Failure                                                                                                          // 11174
  if (buffer.isError(len))                                                                                            // 11175
    return len;                                                                                                       // 11176
                                                                                                                      // 11177
  if (!any &&                                                                                                         // 11178
      decodedTag.tag !== tag &&                                                                                       // 11179
      decodedTag.tagStr !== tag &&                                                                                    // 11180
      decodedTag.tagStr + 'of' !== tag) {                                                                             // 11181
    return buffer.error('Failed to match tag: "' + tag + '"');                                                        // 11182
  }                                                                                                                   // 11183
                                                                                                                      // 11184
  if (decodedTag.primitive || len !== null)                                                                           // 11185
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');                                                // 11186
                                                                                                                      // 11187
  // Indefinite length... find END tag                                                                                // 11188
  var state = buffer.start();                                                                                         // 11189
  var res = this._skipUntilEnd(                                                                                       // 11190
      buffer,                                                                                                         // 11191
      'Failed to skip indefinite length body: "' + this.tag + '"');                                                   // 11192
  if (buffer.isError(res))                                                                                            // 11193
    return res;                                                                                                       // 11194
                                                                                                                      // 11195
  return buffer.cut(state);                                                                                           // 11196
};                                                                                                                    // 11197
                                                                                                                      // 11198
DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {                                               // 11199
  while (true) {                                                                                                      // 11200
    var tag = derDecodeTag(buffer, fail);                                                                             // 11201
    if (buffer.isError(tag))                                                                                          // 11202
      return tag;                                                                                                     // 11203
    var len = derDecodeLen(buffer, tag.primitive, fail);                                                              // 11204
    if (buffer.isError(len))                                                                                          // 11205
      return len;                                                                                                     // 11206
                                                                                                                      // 11207
    var res;                                                                                                          // 11208
    if (tag.primitive || len !== null)                                                                                // 11209
      res = buffer.skip(len)                                                                                          // 11210
    else                                                                                                              // 11211
      res = this._skipUntilEnd(buffer, fail);                                                                         // 11212
                                                                                                                      // 11213
    // Failure                                                                                                        // 11214
    if (buffer.isError(res))                                                                                          // 11215
      return res;                                                                                                     // 11216
                                                                                                                      // 11217
    if (tag.tagStr === 'end')                                                                                         // 11218
      break;                                                                                                          // 11219
  }                                                                                                                   // 11220
};                                                                                                                    // 11221
                                                                                                                      // 11222
DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {                                           // 11223
  var result = [];                                                                                                    // 11224
  while (!buffer.isEmpty()) {                                                                                         // 11225
    var possibleEnd = this._peekTag(buffer, 'end');                                                                   // 11226
    if (buffer.isError(possibleEnd))                                                                                  // 11227
      return possibleEnd;                                                                                             // 11228
                                                                                                                      // 11229
    var res = decoder.decode(buffer, 'der');                                                                          // 11230
    if (buffer.isError(res) && possibleEnd)                                                                           // 11231
      break;                                                                                                          // 11232
    result.push(res);                                                                                                 // 11233
  }                                                                                                                   // 11234
  return result;                                                                                                      // 11235
};                                                                                                                    // 11236
                                                                                                                      // 11237
DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {                                                      // 11238
  if (tag === 'octstr') {                                                                                             // 11239
    return buffer.raw();                                                                                              // 11240
  } else if (tag === 'bitstr') {                                                                                      // 11241
    var unused = buffer.readUInt8();                                                                                  // 11242
    if (buffer.isError(unused))                                                                                       // 11243
      return unused;                                                                                                  // 11244
                                                                                                                      // 11245
    return { unused: unused, data: buffer.raw() };                                                                    // 11246
  } else if (tag === 'ia5str') {                                                                                      // 11247
    return buffer.raw().toString();                                                                                   // 11248
  } else {                                                                                                            // 11249
    return this.error('Decoding of string type: ' + tag + ' unsupported');                                            // 11250
  }                                                                                                                   // 11251
};                                                                                                                    // 11252
                                                                                                                      // 11253
DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {                                     // 11254
  var identifiers = [];                                                                                               // 11255
  var ident = 0;                                                                                                      // 11256
  while (!buffer.isEmpty()) {                                                                                         // 11257
    var subident = buffer.readUInt8();                                                                                // 11258
    ident <<= 7;                                                                                                      // 11259
    ident |= subident & 0x7f;                                                                                         // 11260
    if ((subident & 0x80) === 0) {                                                                                    // 11261
      identifiers.push(ident);                                                                                        // 11262
      ident = 0;                                                                                                      // 11263
    }                                                                                                                 // 11264
  }                                                                                                                   // 11265
  if (subident & 0x80)                                                                                                // 11266
    identifiers.push(ident);                                                                                          // 11267
                                                                                                                      // 11268
  var first = (identifiers[0] / 40) | 0;                                                                              // 11269
  var second = identifiers[0] % 40;                                                                                   // 11270
                                                                                                                      // 11271
  if (relative)                                                                                                       // 11272
    result = identifiers;                                                                                             // 11273
  else                                                                                                                // 11274
    result = [first, second].concat(identifiers.slice(1));                                                            // 11275
                                                                                                                      // 11276
  if (values)                                                                                                         // 11277
    result = values[result.join(' ')];                                                                                // 11278
                                                                                                                      // 11279
  return result;                                                                                                      // 11280
};                                                                                                                    // 11281
                                                                                                                      // 11282
DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {                                                    // 11283
  var str = buffer.raw().toString();                                                                                  // 11284
  if (tag === 'gentime') {                                                                                            // 11285
    var year = str.slice(0, 4) | 0;                                                                                   // 11286
    var mon = str.slice(4, 6) | 0;                                                                                    // 11287
    var day = str.slice(6, 8) | 0;                                                                                    // 11288
    var hour = str.slice(8, 10) | 0;                                                                                  // 11289
    var min = str.slice(10, 12) | 0;                                                                                  // 11290
    var sec = str.slice(12, 14) | 0;                                                                                  // 11291
  } else if (tag === 'utctime') {                                                                                     // 11292
    var year = str.slice(0, 2) | 0;                                                                                   // 11293
    var mon = str.slice(2, 4) | 0;                                                                                    // 11294
    var day = str.slice(4, 6) | 0;                                                                                    // 11295
    var hour = str.slice(6, 8) | 0;                                                                                   // 11296
    var min = str.slice(8, 10) | 0;                                                                                   // 11297
    var sec = str.slice(10, 12) | 0;                                                                                  // 11298
    if (year < 70)                                                                                                    // 11299
      year = 2000 + year;                                                                                             // 11300
    else                                                                                                              // 11301
      year = 1900 + year;                                                                                             // 11302
  } else {                                                                                                            // 11303
    return this.error('Decoding ' + tag + ' time is not supported yet');                                              // 11304
  }                                                                                                                   // 11305
                                                                                                                      // 11306
  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);                                                             // 11307
};                                                                                                                    // 11308
                                                                                                                      // 11309
DERNode.prototype._decodeNull = function decodeNull(buffer) {                                                         // 11310
  return null;                                                                                                        // 11311
};                                                                                                                    // 11312
                                                                                                                      // 11313
DERNode.prototype._decodeBool = function decodeBool(buffer) {                                                         // 11314
  var res = buffer.readUInt8();                                                                                       // 11315
  if (buffer.isError(res))                                                                                            // 11316
    return res;                                                                                                       // 11317
  else                                                                                                                // 11318
    return res !== 0;                                                                                                 // 11319
};                                                                                                                    // 11320
                                                                                                                      // 11321
DERNode.prototype._decodeInt = function decodeInt(buffer, values) {                                                   // 11322
  var res = 0;                                                                                                        // 11323
                                                                                                                      // 11324
  // Bigint, return as it is (assume big endian)                                                                      // 11325
  var raw = buffer.raw();                                                                                             // 11326
  if (raw.length > 3)                                                                                                 // 11327
    return new bignum(raw);                                                                                           // 11328
                                                                                                                      // 11329
  while (!buffer.isEmpty()) {                                                                                         // 11330
    res <<= 8;                                                                                                        // 11331
    var i = buffer.readUInt8();                                                                                       // 11332
    if (buffer.isError(i))                                                                                            // 11333
      return i;                                                                                                       // 11334
    res |= i;                                                                                                         // 11335
  }                                                                                                                   // 11336
                                                                                                                      // 11337
  if (values)                                                                                                         // 11338
    res = values[res] || res;                                                                                         // 11339
                                                                                                                      // 11340
  return res;                                                                                                         // 11341
};                                                                                                                    // 11342
                                                                                                                      // 11343
DERNode.prototype._use = function use(entity, obj) {                                                                  // 11344
  if (typeof entity === 'function')                                                                                   // 11345
    entity = entity(obj);                                                                                             // 11346
  return entity._getDecoder('der').tree;                                                                              // 11347
};                                                                                                                    // 11348
                                                                                                                      // 11349
// Utility methods                                                                                                    // 11350
                                                                                                                      // 11351
function derDecodeTag(buf, fail) {                                                                                    // 11352
  var tag = buf.readUInt8(fail);                                                                                      // 11353
  if (buf.isError(tag))                                                                                               // 11354
    return tag;                                                                                                       // 11355
                                                                                                                      // 11356
  var cls = der.tagClass[tag >> 6];                                                                                   // 11357
  var primitive = (tag & 0x20) === 0;                                                                                 // 11358
                                                                                                                      // 11359
  // Multi-octet tag - load                                                                                           // 11360
  if ((tag & 0x1f) === 0x1f) {                                                                                        // 11361
    var oct = tag;                                                                                                    // 11362
    tag = 0;                                                                                                          // 11363
    while ((oct & 0x80) === 0x80) {                                                                                   // 11364
      oct = buf.readUInt8(fail);                                                                                      // 11365
      if (buf.isError(oct))                                                                                           // 11366
        return oct;                                                                                                   // 11367
                                                                                                                      // 11368
      tag <<= 7;                                                                                                      // 11369
      tag |= oct & 0x7f;                                                                                              // 11370
    }                                                                                                                 // 11371
  } else {                                                                                                            // 11372
    tag &= 0x1f;                                                                                                      // 11373
  }                                                                                                                   // 11374
  var tagStr = der.tag[tag];                                                                                          // 11375
                                                                                                                      // 11376
  return {                                                                                                            // 11377
    cls: cls,                                                                                                         // 11378
    primitive: primitive,                                                                                             // 11379
    tag: tag,                                                                                                         // 11380
    tagStr: tagStr                                                                                                    // 11381
  };                                                                                                                  // 11382
}                                                                                                                     // 11383
                                                                                                                      // 11384
function derDecodeLen(buf, primitive, fail) {                                                                         // 11385
  var len = buf.readUInt8(fail);                                                                                      // 11386
  if (buf.isError(len))                                                                                               // 11387
    return len;                                                                                                       // 11388
                                                                                                                      // 11389
  // Indefinite form                                                                                                  // 11390
  if (!primitive && len === 0x80)                                                                                     // 11391
    return null;                                                                                                      // 11392
                                                                                                                      // 11393
  // Definite form                                                                                                    // 11394
  if ((len & 0x80) === 0) {                                                                                           // 11395
    // Short form                                                                                                     // 11396
    return len;                                                                                                       // 11397
  }                                                                                                                   // 11398
                                                                                                                      // 11399
  // Long form                                                                                                        // 11400
  var num = len & 0x7f;                                                                                               // 11401
  if (num >= 4)                                                                                                       // 11402
    return buf.error('length octect is too long');                                                                    // 11403
                                                                                                                      // 11404
  len = 0;                                                                                                            // 11405
  for (var i = 0; i < num; i++) {                                                                                     // 11406
    len <<= 8;                                                                                                        // 11407
    var j = buf.readUInt8(fail);                                                                                      // 11408
    if (buf.isError(j))                                                                                               // 11409
      return j;                                                                                                       // 11410
    len |= j;                                                                                                         // 11411
  }                                                                                                                   // 11412
                                                                                                                      // 11413
  return len;                                                                                                         // 11414
}                                                                                                                     // 11415
                                                                                                                      // 11416
},{"../../asn1":55,"inherits":144}],64:[function(require,module,exports){                                             // 11417
var decoders = exports;                                                                                               // 11418
                                                                                                                      // 11419
decoders.der = require('./der');                                                                                      // 11420
                                                                                                                      // 11421
},{"./der":63}],65:[function(require,module,exports){                                                                 // 11422
var inherits = require('inherits');                                                                                   // 11423
var Buffer = require('buffer').Buffer;                                                                                // 11424
                                                                                                                      // 11425
var asn1 = require('../../asn1');                                                                                     // 11426
var base = asn1.base;                                                                                                 // 11427
var bignum = asn1.bignum;                                                                                             // 11428
                                                                                                                      // 11429
// Import DER constants                                                                                               // 11430
var der = asn1.constants.der;                                                                                         // 11431
                                                                                                                      // 11432
function DEREncoder(entity) {                                                                                         // 11433
  this.enc = 'der';                                                                                                   // 11434
  this.name = entity.name;                                                                                            // 11435
  this.entity = entity;                                                                                               // 11436
                                                                                                                      // 11437
  // Construct base tree                                                                                              // 11438
  this.tree = new DERNode();                                                                                          // 11439
  this.tree._init(entity.body);                                                                                       // 11440
};                                                                                                                    // 11441
module.exports = DEREncoder;                                                                                          // 11442
                                                                                                                      // 11443
DEREncoder.prototype.encode = function encode(data, reporter) {                                                       // 11444
  return this.tree._encode(data, reporter).join();                                                                    // 11445
};                                                                                                                    // 11446
                                                                                                                      // 11447
// Tree methods                                                                                                       // 11448
                                                                                                                      // 11449
function DERNode(parent) {                                                                                            // 11450
  base.Node.call(this, 'der', parent);                                                                                // 11451
}                                                                                                                     // 11452
inherits(DERNode, base.Node);                                                                                         // 11453
                                                                                                                      // 11454
DERNode.prototype._encodeComposite = function encodeComposite(tag,                                                    // 11455
                                                              primitive,                                              // 11456
                                                              cls,                                                    // 11457
                                                              content) {                                              // 11458
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);                                                     // 11459
                                                                                                                      // 11460
  // Short form                                                                                                       // 11461
  if (content.length < 0x80) {                                                                                        // 11462
    var header = new Buffer(2);                                                                                       // 11463
    header[0] = encodedTag;                                                                                           // 11464
    header[1] = content.length;                                                                                       // 11465
    return this._createEncoderBuffer([ header, content ]);                                                            // 11466
  }                                                                                                                   // 11467
                                                                                                                      // 11468
  // Long form                                                                                                        // 11469
  // Count octets required to store length                                                                            // 11470
  var lenOctets = 1;                                                                                                  // 11471
  for (var i = content.length; i >= 0x100; i >>= 8)                                                                   // 11472
    lenOctets++;                                                                                                      // 11473
                                                                                                                      // 11474
  var header = new Buffer(1 + 1 + lenOctets);                                                                         // 11475
  header[0] = encodedTag;                                                                                             // 11476
  header[1] = 0x80 | lenOctets;                                                                                       // 11477
                                                                                                                      // 11478
  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)                                                // 11479
    header[i] = j & 0xff;                                                                                             // 11480
                                                                                                                      // 11481
  return this._createEncoderBuffer([ header, content ]);                                                              // 11482
};                                                                                                                    // 11483
                                                                                                                      // 11484
DERNode.prototype._encodeStr = function encodeStr(str, tag) {                                                         // 11485
  if (tag === 'octstr')                                                                                               // 11486
    return this._createEncoderBuffer(str);                                                                            // 11487
  else if (tag === 'bitstr')                                                                                          // 11488
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);                                                   // 11489
  else if (tag === 'ia5str')                                                                                          // 11490
    return this._createEncoderBuffer(str);                                                                            // 11491
  return this.reporter.error('Encoding of string type: ' + tag +                                                      // 11492
                             ' unsupported');                                                                         // 11493
};                                                                                                                    // 11494
                                                                                                                      // 11495
DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {                                         // 11496
  if (typeof id === 'string') {                                                                                       // 11497
    if (!values)                                                                                                      // 11498
      return this.reporter.error('string objid given, but no values map found');                                      // 11499
    if (!values.hasOwnProperty(id))                                                                                   // 11500
      return this.reporter.error('objid not found in values map');                                                    // 11501
    id = values[id].split(/\s+/g);                                                                                    // 11502
    for (var i = 0; i < id.length; i++)                                                                               // 11503
      id[i] |= 0;                                                                                                     // 11504
  } else if (Array.isArray(id)) {                                                                                     // 11505
    id = id.slice();                                                                                                  // 11506
  }                                                                                                                   // 11507
                                                                                                                      // 11508
  if (!Array.isArray(id)) {                                                                                           // 11509
    return this.reporter.error('objid() should be either array or string, ' +                                         // 11510
                               'got: ' + JSON.stringify(id));                                                         // 11511
  }                                                                                                                   // 11512
                                                                                                                      // 11513
  if (!relative) {                                                                                                    // 11514
    if (id[1] >= 40)                                                                                                  // 11515
      return this.reporter.error('Second objid identifier OOB');                                                      // 11516
    id.splice(0, 2, id[0] * 40 + id[1]);                                                                              // 11517
  }                                                                                                                   // 11518
                                                                                                                      // 11519
  // Count number of octets                                                                                           // 11520
  var size = 0;                                                                                                       // 11521
  for (var i = 0; i < id.length; i++) {                                                                               // 11522
    var ident = id[i];                                                                                                // 11523
    for (size++; ident >= 0x80; ident >>= 7)                                                                          // 11524
      size++;                                                                                                         // 11525
  }                                                                                                                   // 11526
                                                                                                                      // 11527
  var objid = new Buffer(size);                                                                                       // 11528
  var offset = objid.length - 1;                                                                                      // 11529
  for (var i = id.length - 1; i >= 0; i--) {                                                                          // 11530
    var ident = id[i];                                                                                                // 11531
    objid[offset--] = ident & 0x7f;                                                                                   // 11532
    while ((ident >>= 7) > 0)                                                                                         // 11533
      objid[offset--] = 0x80 | (ident & 0x7f);                                                                        // 11534
  }                                                                                                                   // 11535
                                                                                                                      // 11536
  return this._createEncoderBuffer(objid);                                                                            // 11537
};                                                                                                                    // 11538
                                                                                                                      // 11539
function two(num) {                                                                                                   // 11540
  if (num <= 10)                                                                                                      // 11541
    return '0' + num;                                                                                                 // 11542
  else                                                                                                                // 11543
    return num;                                                                                                       // 11544
}                                                                                                                     // 11545
                                                                                                                      // 11546
DERNode.prototype._encodeTime = function encodeTime(time, tag) {                                                      // 11547
  var str;                                                                                                            // 11548
  var date = new Date(time);                                                                                          // 11549
                                                                                                                      // 11550
  if (tag === 'gentime') {                                                                                            // 11551
    str = [                                                                                                           // 11552
      date.getFullYear(),                                                                                             // 11553
      two(date.getUTCMonth() + 1),                                                                                    // 11554
      two(date.getUTCDate()),                                                                                         // 11555
      two(date.getUTCHours()),                                                                                        // 11556
      two(date.getUTCMinutes()),                                                                                      // 11557
      two(date.getUTCSeconds()),                                                                                      // 11558
      'Z'                                                                                                             // 11559
    ].join('');                                                                                                       // 11560
  } else if (tag === 'utctime') {                                                                                     // 11561
    str = [                                                                                                           // 11562
      date.getFullYear() % 100,                                                                                       // 11563
      two(date.getUTCMonth() + 1),                                                                                    // 11564
      two(date.getUTCDate()),                                                                                         // 11565
      two(date.getUTCHours()),                                                                                        // 11566
      two(date.getUTCMinutes()),                                                                                      // 11567
      two(date.getUTCSeconds()),                                                                                      // 11568
      'Z'                                                                                                             // 11569
    ].join('');                                                                                                       // 11570
  } else {                                                                                                            // 11571
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');                                            // 11572
  }                                                                                                                   // 11573
                                                                                                                      // 11574
  return this._encodeStr(str, 'octstr');                                                                              // 11575
};                                                                                                                    // 11576
                                                                                                                      // 11577
DERNode.prototype._encodeNull = function encodeNull() {                                                               // 11578
  return this._createEncoderBuffer('');                                                                               // 11579
};                                                                                                                    // 11580
                                                                                                                      // 11581
DERNode.prototype._encodeInt = function encodeInt(num, values) {                                                      // 11582
  if (typeof num === 'string') {                                                                                      // 11583
    if (!values)                                                                                                      // 11584
      return this.reporter.error('String int or enum given, but no values map');                                      // 11585
    if (!values.hasOwnProperty(num)) {                                                                                // 11586
      return this.reporter.error('Values map doesn\'t contain: ' +                                                    // 11587
                                 JSON.stringify(num));                                                                // 11588
    }                                                                                                                 // 11589
    num = values[num];                                                                                                // 11590
  }                                                                                                                   // 11591
                                                                                                                      // 11592
  // Bignum, assume big endian                                                                                        // 11593
  if (bignum !== null && num instanceof bignum) {                                                                     // 11594
    var numArray = num.toArray();                                                                                     // 11595
    if(num.sign === false && numArray[0] & 0x80) {                                                                    // 11596
      numArray.unshift(0);                                                                                            // 11597
    }                                                                                                                 // 11598
    num = new Buffer(numArray);                                                                                       // 11599
  }                                                                                                                   // 11600
                                                                                                                      // 11601
  if (Buffer.isBuffer(num)) {                                                                                         // 11602
    var size = num.length;                                                                                            // 11603
    if (num.length === 0)                                                                                             // 11604
      size++;                                                                                                         // 11605
                                                                                                                      // 11606
    var out = new Buffer(size);                                                                                       // 11607
    num.copy(out);                                                                                                    // 11608
    if (num.length === 0)                                                                                             // 11609
      out[0] = 0                                                                                                      // 11610
    return this._createEncoderBuffer(out);                                                                            // 11611
  }                                                                                                                   // 11612
                                                                                                                      // 11613
  if (num < 0x80)                                                                                                     // 11614
    return this._createEncoderBuffer(num);                                                                            // 11615
                                                                                                                      // 11616
  if (num < 0x100)                                                                                                    // 11617
    return this._createEncoderBuffer([0, num]);                                                                       // 11618
                                                                                                                      // 11619
  var size = 1;                                                                                                       // 11620
  for (var i = num; i >= 0x100; i >>= 8)                                                                              // 11621
    size++;                                                                                                           // 11622
                                                                                                                      // 11623
  var out = new Array(size);                                                                                          // 11624
  for (var i = out.length - 1; i >= 0; i--) {                                                                         // 11625
    out[i] = num & 0xff;                                                                                              // 11626
    num >>= 8;                                                                                                        // 11627
  }                                                                                                                   // 11628
  if(out[0] & 0x80) {                                                                                                 // 11629
    out.unshift(0);                                                                                                   // 11630
  }                                                                                                                   // 11631
                                                                                                                      // 11632
  return this._createEncoderBuffer(new Buffer(out));                                                                  // 11633
};                                                                                                                    // 11634
                                                                                                                      // 11635
DERNode.prototype._encodeBool = function encodeBool(value) {                                                          // 11636
  return this._createEncoderBuffer(value ? 0xff : 0);                                                                 // 11637
};                                                                                                                    // 11638
                                                                                                                      // 11639
DERNode.prototype._use = function use(entity, obj) {                                                                  // 11640
  if (typeof entity === 'function')                                                                                   // 11641
    entity = entity(obj);                                                                                             // 11642
  return entity._getEncoder('der').tree;                                                                              // 11643
};                                                                                                                    // 11644
                                                                                                                      // 11645
DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {                                 // 11646
  var state = this._baseState;                                                                                        // 11647
  var i;                                                                                                              // 11648
  if (state['default'] === null)                                                                                      // 11649
    return false;                                                                                                     // 11650
                                                                                                                      // 11651
  var data = dataBuffer.join();                                                                                       // 11652
  if (state.defaultBuffer === undefined)                                                                              // 11653
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();                               // 11654
                                                                                                                      // 11655
  if (data.length !== state.defaultBuffer.length)                                                                     // 11656
    return false;                                                                                                     // 11657
                                                                                                                      // 11658
  for (i=0; i < data.length; i++)                                                                                     // 11659
    if (data[i] !== state.defaultBuffer[i])                                                                           // 11660
      return false;                                                                                                   // 11661
                                                                                                                      // 11662
  return true;                                                                                                        // 11663
};                                                                                                                    // 11664
                                                                                                                      // 11665
// Utility methods                                                                                                    // 11666
                                                                                                                      // 11667
function encodeTag(tag, primitive, cls, reporter) {                                                                   // 11668
  var res;                                                                                                            // 11669
                                                                                                                      // 11670
  if (tag === 'seqof')                                                                                                // 11671
    tag = 'seq';                                                                                                      // 11672
  else if (tag === 'setof')                                                                                           // 11673
    tag = 'set';                                                                                                      // 11674
                                                                                                                      // 11675
  if (der.tagByName.hasOwnProperty(tag))                                                                              // 11676
    res = der.tagByName[tag];                                                                                         // 11677
  else if (typeof tag === 'number' && (tag | 0) === tag)                                                              // 11678
    res = tag;                                                                                                        // 11679
  else                                                                                                                // 11680
    return reporter.error('Unknown tag: ' + tag);                                                                     // 11681
                                                                                                                      // 11682
  if (res >= 0x1f)                                                                                                    // 11683
    return reporter.error('Multi-octet tag encoding unsupported');                                                    // 11684
                                                                                                                      // 11685
  if (!primitive)                                                                                                     // 11686
    res |= 0x20;                                                                                                      // 11687
                                                                                                                      // 11688
  res |= (der.tagClassByName[cls || 'universal'] << 6);                                                               // 11689
                                                                                                                      // 11690
  return res;                                                                                                         // 11691
}                                                                                                                     // 11692
                                                                                                                      // 11693
},{"../../asn1":55,"buffer":2,"inherits":144}],66:[function(require,module,exports){                                  // 11694
var encoders = exports;                                                                                               // 11695
                                                                                                                      // 11696
encoders.der = require('./der');                                                                                      // 11697
                                                                                                                      // 11698
},{"./der":65}],67:[function(require,module,exports){                                                                 // 11699
module.exports = assert;                                                                                              // 11700
                                                                                                                      // 11701
function assert(val, msg) {                                                                                           // 11702
  if (!val)                                                                                                           // 11703
    throw new Error(msg || 'Assertion failed');                                                                       // 11704
}                                                                                                                     // 11705
                                                                                                                      // 11706
assert.equal = function assertEqual(l, r, msg) {                                                                      // 11707
  if (l != r)                                                                                                         // 11708
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));                                                  // 11709
};                                                                                                                    // 11710
                                                                                                                      // 11711
},{}],68:[function(require,module,exports){                                                                           // 11712
(function (Buffer){                                                                                                   // 11713
var createHmac = require('create-hmac')                                                                               // 11714
                                                                                                                      // 11715
exports.pbkdf2 = pbkdf2                                                                                               // 11716
function pbkdf2 (password, salt, iterations, keylen, digest, callback) {                                              // 11717
  if (typeof digest === 'function') {                                                                                 // 11718
    callback = digest                                                                                                 // 11719
    digest = undefined                                                                                                // 11720
  }                                                                                                                   // 11721
                                                                                                                      // 11722
  if (typeof callback !== 'function') {                                                                               // 11723
    throw new Error('No callback provided to pbkdf2')                                                                 // 11724
  }                                                                                                                   // 11725
                                                                                                                      // 11726
  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)                                                 // 11727
  setTimeout(function () {                                                                                            // 11728
    callback(undefined, result)                                                                                       // 11729
  })                                                                                                                  // 11730
}                                                                                                                     // 11731
                                                                                                                      // 11732
exports.pbkdf2Sync = pbkdf2Sync                                                                                       // 11733
function pbkdf2Sync (password, salt, iterations, keylen, digest) {                                                    // 11734
  if (typeof iterations !== 'number')                                                                                 // 11735
    throw new TypeError('Iterations not a number')                                                                    // 11736
                                                                                                                      // 11737
  if (iterations < 0)                                                                                                 // 11738
    throw new TypeError('Bad iterations')                                                                             // 11739
                                                                                                                      // 11740
  if (typeof keylen !== 'number')                                                                                     // 11741
    throw new TypeError('Key length not a number')                                                                    // 11742
                                                                                                                      // 11743
  if (keylen < 0)                                                                                                     // 11744
    throw new TypeError('Bad key length')                                                                             // 11745
                                                                                                                      // 11746
  digest = digest || 'sha1'                                                                                           // 11747
                                                                                                                      // 11748
  if (!Buffer.isBuffer(password)) password = new Buffer(password)                                                     // 11749
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)                                                                 // 11750
                                                                                                                      // 11751
  var hLen                                                                                                            // 11752
  var l = 1                                                                                                           // 11753
  var DK = new Buffer(keylen)                                                                                         // 11754
  var block1 = new Buffer(salt.length + 4)                                                                            // 11755
  salt.copy(block1, 0, 0, salt.length)                                                                                // 11756
                                                                                                                      // 11757
  var r                                                                                                               // 11758
  var T                                                                                                               // 11759
                                                                                                                      // 11760
  for (var i = 1; i <= l; i++) {                                                                                      // 11761
    block1.writeUInt32BE(i, salt.length)                                                                              // 11762
    var U = createHmac(digest, password).update(block1).digest()                                                      // 11763
                                                                                                                      // 11764
    if (!hLen) {                                                                                                      // 11765
      hLen = U.length                                                                                                 // 11766
      T = new Buffer(hLen)                                                                                            // 11767
      l = Math.ceil(keylen / hLen)                                                                                    // 11768
      r = keylen - (l - 1) * hLen                                                                                     // 11769
                                                                                                                      // 11770
      if (keylen > (Math.pow(2, 32) - 1) * hLen)                                                                      // 11771
        throw new TypeError('keylen exceeds maximum length')                                                          // 11772
    }                                                                                                                 // 11773
                                                                                                                      // 11774
    U.copy(T, 0, 0, hLen)                                                                                             // 11775
                                                                                                                      // 11776
    for (var j = 1; j < iterations; j++) {                                                                            // 11777
      U = createHmac(digest, password).update(U).digest()                                                             // 11778
                                                                                                                      // 11779
      for (var k = 0; k < hLen; k++) {                                                                                // 11780
        T[k] ^= U[k]                                                                                                  // 11781
      }                                                                                                               // 11782
    }                                                                                                                 // 11783
                                                                                                                      // 11784
    var destPos = (i - 1) * hLen                                                                                      // 11785
    var len = (i === l ? r : hLen)                                                                                    // 11786
    T.copy(DK, destPos, 0, len)                                                                                       // 11787
  }                                                                                                                   // 11788
                                                                                                                      // 11789
  return DK                                                                                                           // 11790
}                                                                                                                     // 11791
                                                                                                                      // 11792
}).call(this,require("buffer").Buffer)                                                                                // 11793
                                                                                                                      // 11794
},{"buffer":2,"create-hmac":106}],69:[function(require,module,exports){                                               // 11795
(function (Buffer){                                                                                                   // 11796
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js                              // 11797
var parseKeys = require('parse-asn1')                                                                                 // 11798
var BN = require('bn.js')                                                                                             // 11799
var elliptic = require('elliptic')                                                                                    // 11800
var crt = require('browserify-rsa')                                                                                   // 11801
var createHmac = require('create-hmac')                                                                               // 11802
var curves = require('./curves')                                                                                      // 11803
                                                                                                                      // 11804
module.exports = sign                                                                                                 // 11805
function sign (hash, key, hashType, signType) {                                                                       // 11806
  var priv = parseKeys(key)                                                                                           // 11807
  if (priv.curve) {                                                                                                   // 11808
    if (signType !== 'ecdsa') {                                                                                       // 11809
      throw new Error('wrong public key type')                                                                        // 11810
    }                                                                                                                 // 11811
    return ecSign(hash, priv)                                                                                         // 11812
  } else if (priv.type === 'dsa') {                                                                                   // 11813
    return dsaSign(hash, priv, hashType)                                                                              // 11814
    if (signType !== 'dsa') {                                                                                         // 11815
      throw new Error('wrong public key type')                                                                        // 11816
    }                                                                                                                 // 11817
  } else {                                                                                                            // 11818
    if (signType !== 'rsa') {                                                                                         // 11819
      throw new Error('wrong public key type')                                                                        // 11820
    }                                                                                                                 // 11821
  }                                                                                                                   // 11822
  var len = priv.modulus.byteLength()                                                                                 // 11823
  var pad = [ 0, 1 ]                                                                                                  // 11824
  while (hash.length + pad.length + 1 < len) {                                                                        // 11825
    pad.push(0xff)                                                                                                    // 11826
  }                                                                                                                   // 11827
  pad.push(0x00)                                                                                                      // 11828
  var i = -1                                                                                                          // 11829
  while (++i < hash.length) {                                                                                         // 11830
    pad.push(hash[i])                                                                                                 // 11831
  }                                                                                                                   // 11832
                                                                                                                      // 11833
  var out = crt(pad, priv)                                                                                            // 11834
  return out                                                                                                          // 11835
}                                                                                                                     // 11836
function ecSign (hash, priv) {                                                                                        // 11837
  var curveId = curves[priv.curve.join('.')]                                                                          // 11838
  if (!curveId)                                                                                                       // 11839
    throw new Error('unknown curve ' + priv.curve.join('.'))                                                          // 11840
                                                                                                                      // 11841
  var curve = new elliptic.ec(curveId)                                                                                // 11842
                                                                                                                      // 11843
  var key = curve.genKeyPair()                                                                                        // 11844
  key._importPrivate(priv.privateKey)                                                                                 // 11845
  var out = key.sign(hash)                                                                                            // 11846
  return new Buffer(out.toDER())                                                                                      // 11847
}                                                                                                                     // 11848
function dsaSign (hash, priv, algo) {                                                                                 // 11849
  var x = priv.params.priv_key                                                                                        // 11850
  var p = priv.params.p                                                                                               // 11851
  var q = priv.params.q                                                                                               // 11852
  var montq = BN.mont(q)                                                                                              // 11853
  var g = priv.params.g                                                                                               // 11854
  var r = new BN(0)                                                                                                   // 11855
  var k                                                                                                               // 11856
  var H = bits2int(hash, q).mod(q)                                                                                    // 11857
  var s = false                                                                                                       // 11858
  var kv = getKey(x, q, hash, algo)                                                                                   // 11859
  while (s === false) {                                                                                               // 11860
    k = makeKey(q, kv, algo)                                                                                          // 11861
    r = makeR(g, k, p, q)                                                                                             // 11862
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)                                                                        // 11863
    if (!s.cmpn(0)) {                                                                                                 // 11864
      s = false                                                                                                       // 11865
      r = new BN(0)                                                                                                   // 11866
    }                                                                                                                 // 11867
  }                                                                                                                   // 11868
  return toDER(r, s)                                                                                                  // 11869
}                                                                                                                     // 11870
function toDER (r, s) {                                                                                               // 11871
  r = r.toArray()                                                                                                     // 11872
  s = s.toArray()                                                                                                     // 11873
                                                                                                                      // 11874
  // Pad values                                                                                                       // 11875
  if (r[0] & 0x80)                                                                                                    // 11876
    r = [ 0 ].concat(r)                                                                                               // 11877
  // Pad values                                                                                                       // 11878
  if (s[0] & 0x80)                                                                                                    // 11879
    s = [0].concat(s)                                                                                                 // 11880
                                                                                                                      // 11881
  var total = r.length + s.length + 4                                                                                 // 11882
  var res = [ 0x30, total, 0x02, r.length ]                                                                           // 11883
  res = res.concat(r, [ 0x02, s.length ], s)                                                                          // 11884
  return new Buffer(res)                                                                                              // 11885
}                                                                                                                     // 11886
module.exports.getKey = getKey                                                                                        // 11887
function getKey (x, q, hash, algo) {                                                                                  // 11888
  x = new Buffer(x.toArray())                                                                                         // 11889
  if (x.length < q.byteLength()) {                                                                                    // 11890
    var zeros = new Buffer(q.byteLength() - x.length)                                                                 // 11891
    zeros.fill(0)                                                                                                     // 11892
    x = Buffer.concat([zeros, x])                                                                                     // 11893
  }                                                                                                                   // 11894
  var hlen = hash.length                                                                                              // 11895
  var hbits = bits2octets(hash, q)                                                                                    // 11896
  var v = new Buffer(hlen)                                                                                            // 11897
  v.fill(1)                                                                                                           // 11898
  var k = new Buffer(hlen)                                                                                            // 11899
  k.fill(0)                                                                                                           // 11900
  k = createHmac(algo, k)                                                                                             // 11901
    .update(v)                                                                                                        // 11902
    .update(new Buffer([0]))                                                                                          // 11903
    .update(x)                                                                                                        // 11904
    .update(hbits)                                                                                                    // 11905
    .digest()                                                                                                         // 11906
  v = createHmac(algo, k)                                                                                             // 11907
    .update(v)                                                                                                        // 11908
    .digest()                                                                                                         // 11909
  k = createHmac(algo, k)                                                                                             // 11910
    .update(v)                                                                                                        // 11911
    .update(new Buffer([1]))                                                                                          // 11912
    .update(x)                                                                                                        // 11913
    .update(hbits)                                                                                                    // 11914
    .digest()                                                                                                         // 11915
  v = createHmac(algo, k)                                                                                             // 11916
    .update(v)                                                                                                        // 11917
    .digest()                                                                                                         // 11918
  return {                                                                                                            // 11919
    k: k,                                                                                                             // 11920
    v: v                                                                                                              // 11921
  }                                                                                                                   // 11922
}                                                                                                                     // 11923
function bits2int (obits, q) {                                                                                        // 11924
  var bits = new BN(obits)                                                                                            // 11925
  var shift = (obits.length << 3) - q.bitLength()                                                                     // 11926
  if (shift > 0) {                                                                                                    // 11927
    bits.ishrn(shift)                                                                                                 // 11928
  }                                                                                                                   // 11929
  return bits                                                                                                         // 11930
}                                                                                                                     // 11931
function bits2octets (bits, q) {                                                                                      // 11932
  bits = bits2int(bits, q)                                                                                            // 11933
  bits = bits.mod(q)                                                                                                  // 11934
  var out = new Buffer(bits.toArray())                                                                                // 11935
  if (out.length < q.byteLength()) {                                                                                  // 11936
    var zeros = new Buffer(q.byteLength() - out.length)                                                               // 11937
    zeros.fill(0)                                                                                                     // 11938
    out = Buffer.concat([zeros, out])                                                                                 // 11939
  }                                                                                                                   // 11940
  return out                                                                                                          // 11941
}                                                                                                                     // 11942
module.exports.makeKey = makeKey                                                                                      // 11943
function makeKey (q, kv, algo) {                                                                                      // 11944
  var t                                                                                                               // 11945
  var k                                                                                                               // 11946
  while (true) {                                                                                                      // 11947
    t = new Buffer('')                                                                                                // 11948
    while (t.length * 8 < q.bitLength()) {                                                                            // 11949
      kv.v = createHmac(algo, kv.k)                                                                                   // 11950
        .update(kv.v)                                                                                                 // 11951
        .digest()                                                                                                     // 11952
      t = Buffer.concat([t, kv.v])                                                                                    // 11953
    }                                                                                                                 // 11954
    k = bits2int(t, q)                                                                                                // 11955
    kv.k =  createHmac(algo, kv.k)                                                                                    // 11956
        .update(kv.v)                                                                                                 // 11957
        .update(new Buffer([0]))                                                                                      // 11958
        .digest()                                                                                                     // 11959
    kv.v = createHmac(algo, kv.k)                                                                                     // 11960
        .update(kv.v)                                                                                                 // 11961
        .digest()                                                                                                     // 11962
    if (k.cmp(q) === -1) {                                                                                            // 11963
      return k                                                                                                        // 11964
    }                                                                                                                 // 11965
  }                                                                                                                   // 11966
}                                                                                                                     // 11967
function makeR (g, k, p, q) {                                                                                         // 11968
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)                                                               // 11969
}                                                                                                                     // 11970
                                                                                                                      // 11971
}).call(this,require("buffer").Buffer)                                                                                // 11972
                                                                                                                      // 11973
},{"./curves":27,"bn.js":28,"browserify-rsa":29,"buffer":2,"create-hmac":106,"elliptic":30,"parse-asn1":54}],70:[function(require,module,exports){
(function (Buffer){                                                                                                   // 11975
'use strict'                                                                                                          // 11976
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js                              // 11977
var parseKeys = require('parse-asn1')                                                                                 // 11978
var elliptic = require('elliptic')                                                                                    // 11979
var curves = require('./curves')                                                                                      // 11980
var BN = require('bn.js')                                                                                             // 11981
module.exports = verify                                                                                               // 11982
                                                                                                                      // 11983
function verify (sig, hash, key, signType) {                                                                          // 11984
  var pub = parseKeys(key)                                                                                            // 11985
  if (pub.type === 'ec') {                                                                                            // 11986
    if (signType !== 'ecdsa') {                                                                                       // 11987
      throw new Error('wrong public key type')                                                                        // 11988
    }                                                                                                                 // 11989
    return ecVerify(sig, hash, pub)                                                                                   // 11990
  } else if (pub.type === 'dsa') {                                                                                    // 11991
    if (signType !== 'dsa') {                                                                                         // 11992
      throw new Error('wrong public key type')                                                                        // 11993
    }                                                                                                                 // 11994
    return dsaVerify(sig, hash, pub)                                                                                  // 11995
  } else {                                                                                                            // 11996
    if (signType !== 'rsa') {                                                                                         // 11997
      throw new Error('wrong public key type')                                                                        // 11998
    }                                                                                                                 // 11999
  }                                                                                                                   // 12000
  var len = pub.modulus.byteLength()                                                                                  // 12001
  var pad = [ 1 ]                                                                                                     // 12002
  var padNum = 0                                                                                                      // 12003
  while (hash.length + pad.length + 2 < len) {                                                                        // 12004
    pad.push(0xff)                                                                                                    // 12005
    padNum++                                                                                                          // 12006
  }                                                                                                                   // 12007
  pad.push(0x00)                                                                                                      // 12008
  var i = -1                                                                                                          // 12009
  while (++i < hash.length) {                                                                                         // 12010
    pad.push(hash[i])                                                                                                 // 12011
  }                                                                                                                   // 12012
  pad = new Buffer(pad)                                                                                               // 12013
  var red = BN.mont(pub.modulus)                                                                                      // 12014
  sig = new BN(sig).toRed(red)                                                                                        // 12015
                                                                                                                      // 12016
  sig = sig.redPow(new BN(pub.publicExponent))                                                                        // 12017
                                                                                                                      // 12018
  sig = new Buffer(sig.fromRed().toArray())                                                                           // 12019
  var out = 0                                                                                                         // 12020
  if (padNum < 8) {                                                                                                   // 12021
    out = 1                                                                                                           // 12022
  }                                                                                                                   // 12023
  len = Math.min(sig.length, pad.length)                                                                              // 12024
  if (sig.length !== pad.length) {                                                                                    // 12025
    out = 1                                                                                                           // 12026
  }                                                                                                                   // 12027
                                                                                                                      // 12028
  i = -1                                                                                                              // 12029
  while (++i < len) {                                                                                                 // 12030
    out |= (sig[i] ^ pad[i])                                                                                          // 12031
  }                                                                                                                   // 12032
  return out === 0                                                                                                    // 12033
}                                                                                                                     // 12034
function ecVerify (sig, hash, pub) {                                                                                  // 12035
  var curveId = curves[pub.data.algorithm.curve.join('.')]                                                            // 12036
  if (!curveId)                                                                                                       // 12037
    throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))                                            // 12038
                                                                                                                      // 12039
  var curve = new elliptic.ec(curveId)                                                                                // 12040
                                                                                                                      // 12041
  var pubkey = pub.data.subjectPrivateKey.data                                                                        // 12042
  return curve.verify(hash.toString('hex'), sig.toString('hex'), pubkey.toString('hex'))                              // 12043
}                                                                                                                     // 12044
function dsaVerify (sig, hash, pub) {                                                                                 // 12045
  var p = pub.data.p                                                                                                  // 12046
  var q = pub.data.q                                                                                                  // 12047
  var g = pub.data.g                                                                                                  // 12048
  var y = pub.data.pub_key                                                                                            // 12049
  var unpacked = parseKeys.signature.decode(sig, 'der')                                                               // 12050
  var s = unpacked.s                                                                                                  // 12051
  var r = unpacked.r                                                                                                  // 12052
  checkValue(s, q)                                                                                                    // 12053
  checkValue(r, q)                                                                                                    // 12054
  var montq = BN.mont(q)                                                                                              // 12055
  var montp = BN.mont(p)                                                                                              // 12056
  var w =  s.invm(q)                                                                                                  // 12057
  var v = g.toRed(montp)                                                                                              // 12058
  .redPow(new BN(hash).mul(w).mod(q))                                                                                 // 12059
  .fromRed()                                                                                                          // 12060
  .mul(                                                                                                               // 12061
    y.toRed(montp)                                                                                                    // 12062
    .redPow(r.mul(w).mod(q))                                                                                          // 12063
    .fromRed()                                                                                                        // 12064
  ).mod(p).mod(q)                                                                                                     // 12065
  return !v.cmp(r)                                                                                                    // 12066
}                                                                                                                     // 12067
function checkValue (b, q) {                                                                                          // 12068
  if (b.cmpn(0) <= 0) {                                                                                               // 12069
    throw new Error('invalid sig')                                                                                    // 12070
  }                                                                                                                   // 12071
  if (b.cmp(q) >= q) {                                                                                                // 12072
    throw new Error('invalid sig')                                                                                    // 12073
  }                                                                                                                   // 12074
}                                                                                                                     // 12075
                                                                                                                      // 12076
}).call(this,require("buffer").Buffer)                                                                                // 12077
                                                                                                                      // 12078
},{"./curves":27,"bn.js":28,"buffer":2,"elliptic":30,"parse-asn1":54}],71:[function(require,module,exports){          // 12079
(function (Buffer){                                                                                                   // 12080
var elliptic = require('elliptic');                                                                                   // 12081
var BN = require('bn.js');                                                                                            // 12082
                                                                                                                      // 12083
module.exports = function createECDH(curve) {                                                                         // 12084
	return new ECDH(curve);                                                                                              // 12085
};                                                                                                                    // 12086
                                                                                                                      // 12087
var aliases = {                                                                                                       // 12088
	secp256k1: {                                                                                                         // 12089
		name: 'secp256k1',                                                                                                  // 12090
		byteLength: 32                                                                                                      // 12091
	},                                                                                                                   // 12092
	secp224r1: {                                                                                                         // 12093
		name: 'p224',                                                                                                       // 12094
		byteLength: 28                                                                                                      // 12095
	},                                                                                                                   // 12096
	prime256v1: {                                                                                                        // 12097
		name: 'p256',                                                                                                       // 12098
		byteLength: 32                                                                                                      // 12099
	},                                                                                                                   // 12100
	prime192v1: {                                                                                                        // 12101
		name: 'p192',                                                                                                       // 12102
		byteLength: 24                                                                                                      // 12103
	},                                                                                                                   // 12104
	ed25519: {                                                                                                           // 12105
		name: 'ed25519',                                                                                                    // 12106
		byteLength: 32                                                                                                      // 12107
	}                                                                                                                    // 12108
};                                                                                                                    // 12109
                                                                                                                      // 12110
aliases.p224 = aliases.secp224r1;                                                                                     // 12111
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;                                                                // 12112
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;                                                                // 12113
                                                                                                                      // 12114
function ECDH(curve) {                                                                                                // 12115
	this.curveType = aliases[curve];                                                                                     // 12116
	if (!this.curveType ) {                                                                                              // 12117
		this.curveType = {                                                                                                  // 12118
			name: curve                                                                                                        // 12119
		};                                                                                                                  // 12120
	}                                                                                                                    // 12121
	this.curve = new elliptic.ec(this.curveType.name);                                                                   // 12122
	this.keys = void 0;                                                                                                  // 12123
}                                                                                                                     // 12124
                                                                                                                      // 12125
ECDH.prototype.generateKeys = function (enc, format) {                                                                // 12126
	this.keys = this.curve.genKeyPair();                                                                                 // 12127
	return this.getPublicKey(enc, format);                                                                               // 12128
};                                                                                                                    // 12129
                                                                                                                      // 12130
ECDH.prototype.computeSecret = function (other, inenc, enc) {                                                         // 12131
	inenc = inenc || 'utf8';                                                                                             // 12132
	if (!Buffer.isBuffer(other)) {                                                                                       // 12133
		other = new Buffer(other, inenc);                                                                                   // 12134
	}                                                                                                                    // 12135
	other = new BN(other);                                                                                               // 12136
	other = other.toString(16);                                                                                          // 12137
	var otherPub = this.curve.keyPair(other, 'hex').getPublic();                                                         // 12138
	var out = otherPub.mul(this.keys.getPrivate()).getX();                                                               // 12139
	return formatReturnValue(out, enc, this.curveType.byteLength);                                                       // 12140
};                                                                                                                    // 12141
                                                                                                                      // 12142
ECDH.prototype.getPublicKey = function (enc, format) {                                                                // 12143
	var key = this.keys.getPublic(format === 'compressed', true);                                                        // 12144
	if (format === 'hybrid') {                                                                                           // 12145
		if (key[key.length - 1] % 2) {                                                                                      // 12146
			key[0] = 7;                                                                                                        // 12147
		} else {                                                                                                            // 12148
			key [0] = 6;                                                                                                       // 12149
		}                                                                                                                   // 12150
	}                                                                                                                    // 12151
	return formatReturnValue(key, enc);                                                                                  // 12152
};                                                                                                                    // 12153
                                                                                                                      // 12154
ECDH.prototype.getPrivateKey = function (enc) {                                                                       // 12155
	return formatReturnValue(this.keys.getPrivate(), enc);                                                               // 12156
};                                                                                                                    // 12157
                                                                                                                      // 12158
ECDH.prototype.setPublicKey = function (pub, enc) {                                                                   // 12159
	enc = enc || 'utf8';                                                                                                 // 12160
	if (!Buffer.isBuffer(pub)) {                                                                                         // 12161
		pub = new Buffer(pub, enc);                                                                                         // 12162
	}                                                                                                                    // 12163
	var pkey = new BN(pub);                                                                                              // 12164
	pkey = pkey.toArray();                                                                                               // 12165
	this.keys._importPublicHex(pkey);                                                                                    // 12166
	return this;                                                                                                         // 12167
};                                                                                                                    // 12168
                                                                                                                      // 12169
ECDH.prototype.setPrivateKey = function (priv, enc) {                                                                 // 12170
	enc = enc || 'utf8';                                                                                                 // 12171
	if (!Buffer.isBuffer(priv)) {                                                                                        // 12172
		priv = new Buffer(priv, enc);                                                                                       // 12173
	}                                                                                                                    // 12174
	var _priv = new BN(priv);                                                                                            // 12175
	_priv = _priv.toString(16);                                                                                          // 12176
	this.keys._importPrivate(_priv);                                                                                     // 12177
	return this;                                                                                                         // 12178
};                                                                                                                    // 12179
                                                                                                                      // 12180
function formatReturnValue(bn, enc, len) {                                                                            // 12181
	if (!Array.isArray(bn)) {                                                                                            // 12182
		bn = bn.toArray();                                                                                                  // 12183
	}                                                                                                                    // 12184
	var buf = new Buffer(bn);                                                                                            // 12185
	if (len && buf.length < len) {                                                                                       // 12186
		var zeros = new Buffer(len - buf.length);                                                                           // 12187
		zeros.fill(0);                                                                                                      // 12188
		buf = Buffer.concat([zeros, buf]);                                                                                  // 12189
	}                                                                                                                    // 12190
	if (!enc) {                                                                                                          // 12191
		return buf;                                                                                                         // 12192
	} else {                                                                                                             // 12193
		return buf.toString(enc);                                                                                           // 12194
	}                                                                                                                    // 12195
}                                                                                                                     // 12196
}).call(this,require("buffer").Buffer)                                                                                // 12197
                                                                                                                      // 12198
},{"bn.js":73,"buffer":2,"elliptic":74}],72:[function(require,module,exports){                                        // 12199
var createECDH = require('crypto').createECDH;                                                                        // 12200
                                                                                                                      // 12201
module.exports = createECDH || require('./browser');                                                                  // 12202
},{"./browser":71,"crypto":6}],73:[function(require,module,exports){                                                  // 12203
arguments[4][28][0].apply(exports,arguments)                                                                          // 12204
},{"dup":28}],74:[function(require,module,exports){                                                                   // 12205
arguments[4][30][0].apply(exports,arguments)                                                                          // 12206
},{"../package.json":93,"./elliptic/curve":77,"./elliptic/curves":80,"./elliptic/ec":81,"./elliptic/hmac-drbg":84,"./elliptic/utils":85,"brorand":86,"dup":30}],75:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)                                                                          // 12208
},{"../../elliptic":74,"bn.js":73,"dup":31}],76:[function(require,module,exports){                                    // 12209
arguments[4][32][0].apply(exports,arguments)                                                                          // 12210
},{"../../elliptic":74,"../curve":77,"bn.js":73,"dup":32,"inherits":144}],77:[function(require,module,exports){       // 12211
arguments[4][33][0].apply(exports,arguments)                                                                          // 12212
},{"./base":75,"./edwards":76,"./mont":78,"./short":79,"dup":33}],78:[function(require,module,exports){               // 12213
arguments[4][34][0].apply(exports,arguments)                                                                          // 12214
},{"../../elliptic":74,"../curve":77,"bn.js":73,"dup":34,"inherits":144}],79:[function(require,module,exports){       // 12215
arguments[4][35][0].apply(exports,arguments)                                                                          // 12216
},{"../../elliptic":74,"../curve":77,"bn.js":73,"dup":35,"inherits":144}],80:[function(require,module,exports){       // 12217
arguments[4][36][0].apply(exports,arguments)                                                                          // 12218
},{"../elliptic":74,"bn.js":73,"dup":36,"hash.js":87}],81:[function(require,module,exports){                          // 12219
arguments[4][37][0].apply(exports,arguments)                                                                          // 12220
},{"../../elliptic":74,"./key":82,"./signature":83,"bn.js":73,"dup":37}],82:[function(require,module,exports){        // 12221
arguments[4][38][0].apply(exports,arguments)                                                                          // 12222
},{"../../elliptic":74,"bn.js":73,"dup":38}],83:[function(require,module,exports){                                    // 12223
arguments[4][39][0].apply(exports,arguments)                                                                          // 12224
},{"../../elliptic":74,"bn.js":73,"dup":39}],84:[function(require,module,exports){                                    // 12225
arguments[4][40][0].apply(exports,arguments)                                                                          // 12226
},{"../elliptic":74,"dup":40,"hash.js":87}],85:[function(require,module,exports){                                     // 12227
arguments[4][41][0].apply(exports,arguments)                                                                          // 12228
},{"bn.js":73,"dup":41}],86:[function(require,module,exports){                                                        // 12229
arguments[4][42][0].apply(exports,arguments)                                                                          // 12230
},{"dup":42}],87:[function(require,module,exports){                                                                   // 12231
arguments[4][43][0].apply(exports,arguments)                                                                          // 12232
},{"./hash/common":88,"./hash/hmac":89,"./hash/ripemd":90,"./hash/sha":91,"./hash/utils":92,"dup":43}],88:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)                                                                          // 12234
},{"../hash":87,"dup":44}],89:[function(require,module,exports){                                                      // 12235
arguments[4][45][0].apply(exports,arguments)                                                                          // 12236
},{"../hash":87,"dup":45}],90:[function(require,module,exports){                                                      // 12237
arguments[4][46][0].apply(exports,arguments)                                                                          // 12238
},{"../hash":87,"dup":46}],91:[function(require,module,exports){                                                      // 12239
arguments[4][47][0].apply(exports,arguments)                                                                          // 12240
},{"../hash":87,"dup":47}],92:[function(require,module,exports){                                                      // 12241
arguments[4][48][0].apply(exports,arguments)                                                                          // 12242
},{"dup":48,"inherits":144}],93:[function(require,module,exports){                                                    // 12243
arguments[4][49][0].apply(exports,arguments)                                                                          // 12244
},{"dup":49}],94:[function(require,module,exports){                                                                   // 12245
(function (Buffer){                                                                                                   // 12246
'use strict';                                                                                                         // 12247
var inherits = require('inherits')                                                                                    // 12248
var md5 = require('./md5')                                                                                            // 12249
var rmd160 = require('ripemd160')                                                                                     // 12250
var sha = require('sha.js')                                                                                           // 12251
                                                                                                                      // 12252
var Transform = require('stream').Transform                                                                           // 12253
                                                                                                                      // 12254
function HashNoConstructor(hash) {                                                                                    // 12255
  Transform.call(this)                                                                                                // 12256
                                                                                                                      // 12257
  this._hash = hash                                                                                                   // 12258
  this.buffers = []                                                                                                   // 12259
}                                                                                                                     // 12260
                                                                                                                      // 12261
inherits(HashNoConstructor, Transform)                                                                                // 12262
                                                                                                                      // 12263
HashNoConstructor.prototype._transform = function (data, _, next) {                                                   // 12264
  this.buffers.push(data)                                                                                             // 12265
                                                                                                                      // 12266
  next()                                                                                                              // 12267
}                                                                                                                     // 12268
                                                                                                                      // 12269
HashNoConstructor.prototype._flush = function (next) {                                                                // 12270
  this.push(this.digest())                                                                                            // 12271
  next()                                                                                                              // 12272
}                                                                                                                     // 12273
                                                                                                                      // 12274
HashNoConstructor.prototype.update = function (data, enc) {                                                           // 12275
  if (typeof data === 'string') {                                                                                     // 12276
    data = new Buffer(data, enc)                                                                                      // 12277
  }                                                                                                                   // 12278
                                                                                                                      // 12279
  this.buffers.push(data)                                                                                             // 12280
  return this                                                                                                         // 12281
}                                                                                                                     // 12282
                                                                                                                      // 12283
HashNoConstructor.prototype.digest = function (enc) {                                                                 // 12284
  var buf = Buffer.concat(this.buffers)                                                                               // 12285
  var r = this._hash(buf)                                                                                             // 12286
  this.buffers = null                                                                                                 // 12287
                                                                                                                      // 12288
  return enc ? r.toString(enc) : r                                                                                    // 12289
}                                                                                                                     // 12290
                                                                                                                      // 12291
function Hash(hash) {                                                                                                 // 12292
  Transform.call(this)                                                                                                // 12293
                                                                                                                      // 12294
  this._hash = hash                                                                                                   // 12295
}                                                                                                                     // 12296
                                                                                                                      // 12297
inherits(Hash, Transform)                                                                                             // 12298
                                                                                                                      // 12299
Hash.prototype._transform = function (data, enc, next) {                                                              // 12300
  if (enc) data = new Buffer(data, enc)                                                                               // 12301
                                                                                                                      // 12302
  this._hash.update(data)                                                                                             // 12303
                                                                                                                      // 12304
  next()                                                                                                              // 12305
}                                                                                                                     // 12306
                                                                                                                      // 12307
Hash.prototype._flush = function (next) {                                                                             // 12308
  this.push(this._hash.digest())                                                                                      // 12309
  this._hash = null                                                                                                   // 12310
                                                                                                                      // 12311
  next()                                                                                                              // 12312
}                                                                                                                     // 12313
                                                                                                                      // 12314
Hash.prototype.update = function (data, enc) {                                                                        // 12315
  if (typeof data === 'string') {                                                                                     // 12316
    data = new Buffer(data, enc)                                                                                      // 12317
  }                                                                                                                   // 12318
                                                                                                                      // 12319
  this._hash.update(data)                                                                                             // 12320
  return this                                                                                                         // 12321
}                                                                                                                     // 12322
                                                                                                                      // 12323
Hash.prototype.digest = function (enc) {                                                                              // 12324
  var outData = this._hash.digest()                                                                                   // 12325
                                                                                                                      // 12326
  return enc ? outData.toString(enc) : outData                                                                        // 12327
}                                                                                                                     // 12328
                                                                                                                      // 12329
module.exports = function createHash (alg) {                                                                          // 12330
  if ('md5' === alg) return new HashNoConstructor(md5)                                                                // 12331
  if ('rmd160' === alg) return new HashNoConstructor(rmd160)                                                          // 12332
                                                                                                                      // 12333
  return new Hash(sha(alg))                                                                                           // 12334
}                                                                                                                     // 12335
                                                                                                                      // 12336
}).call(this,require("buffer").Buffer)                                                                                // 12337
                                                                                                                      // 12338
},{"./md5":96,"buffer":2,"inherits":144,"ripemd160":97,"sha.js":99,"stream":158}],95:[function(require,module,exports){
(function (Buffer){                                                                                                   // 12340
'use strict';                                                                                                         // 12341
var intSize = 4;                                                                                                      // 12342
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);                                                             // 12343
var chrsz = 8;                                                                                                        // 12344
                                                                                                                      // 12345
function toArray(buf, bigEndian) {                                                                                    // 12346
  if ((buf.length % intSize) !== 0) {                                                                                 // 12347
    var len = buf.length + (intSize - (buf.length % intSize));                                                        // 12348
    buf = Buffer.concat([buf, zeroBuffer], len);                                                                      // 12349
  }                                                                                                                   // 12350
                                                                                                                      // 12351
  var arr = [];                                                                                                       // 12352
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;                                                             // 12353
  for (var i = 0; i < buf.length; i += intSize) {                                                                     // 12354
    arr.push(fn.call(buf, i));                                                                                        // 12355
  }                                                                                                                   // 12356
  return arr;                                                                                                         // 12357
}                                                                                                                     // 12358
                                                                                                                      // 12359
function toBuffer(arr, size, bigEndian) {                                                                             // 12360
  var buf = new Buffer(size);                                                                                         // 12361
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;                                                           // 12362
  for (var i = 0; i < arr.length; i++) {                                                                              // 12363
    fn.call(buf, arr[i], i * 4, true);                                                                                // 12364
  }                                                                                                                   // 12365
  return buf;                                                                                                         // 12366
}                                                                                                                     // 12367
                                                                                                                      // 12368
function hash(buf, fn, hashSize, bigEndian) {                                                                         // 12369
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);                                                                   // 12370
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);                                                          // 12371
  return toBuffer(arr, hashSize, bigEndian);                                                                          // 12372
}                                                                                                                     // 12373
exports.hash = hash;                                                                                                  // 12374
}).call(this,require("buffer").Buffer)                                                                                // 12375
                                                                                                                      // 12376
},{"buffer":2}],96:[function(require,module,exports){                                                                 // 12377
'use strict';                                                                                                         // 12378
/*                                                                                                                    // 12379
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message                                             // 12380
 * Digest Algorithm, as defined in RFC 1321.                                                                          // 12381
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.                                                               // 12382
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet                                                      // 12383
 * Distributed under the BSD License                                                                                  // 12384
 * See http://pajhome.org.uk/crypt/md5 for more info.                                                                 // 12385
 */                                                                                                                   // 12386
                                                                                                                      // 12387
var helpers = require('./helpers');                                                                                   // 12388
                                                                                                                      // 12389
/*                                                                                                                    // 12390
 * Calculate the MD5 of an array of little-endian words, and a bit length                                             // 12391
 */                                                                                                                   // 12392
function core_md5(x, len)                                                                                             // 12393
{                                                                                                                     // 12394
  /* append padding */                                                                                                // 12395
  x[len >> 5] |= 0x80 << ((len) % 32);                                                                                // 12396
  x[(((len + 64) >>> 9) << 4) + 14] = len;                                                                            // 12397
                                                                                                                      // 12398
  var a =  1732584193;                                                                                                // 12399
  var b = -271733879;                                                                                                 // 12400
  var c = -1732584194;                                                                                                // 12401
  var d =  271733878;                                                                                                 // 12402
                                                                                                                      // 12403
  for(var i = 0; i < x.length; i += 16)                                                                               // 12404
  {                                                                                                                   // 12405
    var olda = a;                                                                                                     // 12406
    var oldb = b;                                                                                                     // 12407
    var oldc = c;                                                                                                     // 12408
    var oldd = d;                                                                                                     // 12409
                                                                                                                      // 12410
    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);                                                                  // 12411
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);                                                                  // 12412
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);                                                                  // 12413
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);                                                                 // 12414
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);                                                                  // 12415
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);                                                                 // 12416
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);                                                                 // 12417
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);                                                                   // 12418
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);                                                                 // 12419
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);                                                                 // 12420
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);                                                                      // 12421
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);                                                                 // 12422
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);                                                                 // 12423
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);                                                                   // 12424
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);                                                                 // 12425
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);                                                                 // 12426
                                                                                                                      // 12427
    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);                                                                  // 12428
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);                                                                 // 12429
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);                                                                  // 12430
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);                                                                  // 12431
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);                                                                  // 12432
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);                                                                   // 12433
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);                                                                  // 12434
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);                                                                  // 12435
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);                                                                  // 12436
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);                                                                 // 12437
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);                                                                  // 12438
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);                                                                 // 12439
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);                                                                 // 12440
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);                                                                   // 12441
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);                                                                 // 12442
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);                                                                 // 12443
                                                                                                                      // 12444
    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);                                                                     // 12445
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);                                                                 // 12446
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);                                                                 // 12447
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);                                                                   // 12448
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);                                                                 // 12449
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);                                                                 // 12450
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);                                                                  // 12451
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);                                                                 // 12452
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);                                                                  // 12453
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);                                                                  // 12454
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);                                                                  // 12455
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);                                                                   // 12456
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);                                                                  // 12457
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);                                                                  // 12458
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);                                                                  // 12459
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);                                                                  // 12460
                                                                                                                      // 12461
    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);                                                                  // 12462
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);                                                                 // 12463
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);                                                                 // 12464
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);                                                                   // 12465
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);                                                                 // 12466
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);                                                                 // 12467
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);                                                                    // 12468
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);                                                                 // 12469
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);                                                                 // 12470
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);                                                                   // 12471
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);                                                                 // 12472
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);                                                                 // 12473
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);                                                                  // 12474
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);                                                                 // 12475
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);                                                                  // 12476
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);                                                                  // 12477
                                                                                                                      // 12478
    a = safe_add(a, olda);                                                                                            // 12479
    b = safe_add(b, oldb);                                                                                            // 12480
    c = safe_add(c, oldc);                                                                                            // 12481
    d = safe_add(d, oldd);                                                                                            // 12482
  }                                                                                                                   // 12483
  return Array(a, b, c, d);                                                                                           // 12484
                                                                                                                      // 12485
}                                                                                                                     // 12486
                                                                                                                      // 12487
/*                                                                                                                    // 12488
 * These functions implement the four basic operations the algorithm uses.                                            // 12489
 */                                                                                                                   // 12490
function md5_cmn(q, a, b, x, s, t)                                                                                    // 12491
{                                                                                                                     // 12492
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);                                            // 12493
}                                                                                                                     // 12494
function md5_ff(a, b, c, d, x, s, t)                                                                                  // 12495
{                                                                                                                     // 12496
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);                                                                // 12497
}                                                                                                                     // 12498
function md5_gg(a, b, c, d, x, s, t)                                                                                  // 12499
{                                                                                                                     // 12500
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);                                                                // 12501
}                                                                                                                     // 12502
function md5_hh(a, b, c, d, x, s, t)                                                                                  // 12503
{                                                                                                                     // 12504
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);                                                                           // 12505
}                                                                                                                     // 12506
function md5_ii(a, b, c, d, x, s, t)                                                                                  // 12507
{                                                                                                                     // 12508
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);                                                                      // 12509
}                                                                                                                     // 12510
                                                                                                                      // 12511
/*                                                                                                                    // 12512
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally                                             // 12513
 * to work around bugs in some JS interpreters.                                                                       // 12514
 */                                                                                                                   // 12515
function safe_add(x, y)                                                                                               // 12516
{                                                                                                                     // 12517
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);                                                                              // 12518
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);                                                                      // 12519
  return (msw << 16) | (lsw & 0xFFFF);                                                                                // 12520
}                                                                                                                     // 12521
                                                                                                                      // 12522
/*                                                                                                                    // 12523
 * Bitwise rotate a 32-bit number to the left.                                                                        // 12524
 */                                                                                                                   // 12525
function bit_rol(num, cnt)                                                                                            // 12526
{                                                                                                                     // 12527
  return (num << cnt) | (num >>> (32 - cnt));                                                                         // 12528
}                                                                                                                     // 12529
                                                                                                                      // 12530
module.exports = function md5(buf) {                                                                                  // 12531
  return helpers.hash(buf, core_md5, 16);                                                                             // 12532
};                                                                                                                    // 12533
},{"./helpers":95}],97:[function(require,module,exports){                                                             // 12534
(function (Buffer){                                                                                                   // 12535
/*                                                                                                                    // 12536
CryptoJS v3.1.2                                                                                                       // 12537
code.google.com/p/crypto-js                                                                                           // 12538
(c) 2009-2013 by Jeff Mott. All rights reserved.                                                                      // 12539
code.google.com/p/crypto-js/wiki/License                                                                              // 12540
*/                                                                                                                    // 12541
/** @preserve                                                                                                         // 12542
(c) 2012 by Cédric Mesnil. All rights reserved.                                                                       // 12543
                                                                                                                      // 12544
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
                                                                                                                      // 12546
    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
                                                                                                                      // 12549
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/                                                                                                                    // 12551
                                                                                                                      // 12552
// constants table                                                                                                    // 12553
var zl = [                                                                                                            // 12554
    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,                                                    // 12555
    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,                                                    // 12556
    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,                                                    // 12557
    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,                                                    // 12558
    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]                                                    // 12559
                                                                                                                      // 12560
var zr = [                                                                                                            // 12561
    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,                                                    // 12562
    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,                                                    // 12563
    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,                                                   // 12564
    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,                                                    // 12565
    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]                                                   // 12566
                                                                                                                      // 12567
var sl = [                                                                                                            // 12568
     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,                                                  // 12569
    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,                                                    // 12570
    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,                                                   // 12571
      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,                                                 // 12572
    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]                                                   // 12573
                                                                                                                      // 12574
var sr = [                                                                                                            // 12575
    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,                                                    // 12576
    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,                                                    // 12577
    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,                                                    // 12578
    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,                                                   // 12579
    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]                                                   // 12580
                                                                                                                      // 12581
                                                                                                                      // 12582
var hl =  [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]                                                // 12583
var hr =  [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]                                                // 12584
                                                                                                                      // 12585
function bytesToWords(bytes) {                                                                                        // 12586
  var words = []                                                                                                      // 12587
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {                                                             // 12588
    words[b >>> 5] |= bytes[i] << (24 - b % 32)                                                                       // 12589
  }                                                                                                                   // 12590
  return words                                                                                                        // 12591
}                                                                                                                     // 12592
                                                                                                                      // 12593
function wordsToBytes(words) {                                                                                        // 12594
  var bytes = []                                                                                                      // 12595
  for (var b = 0; b < words.length * 32; b += 8) {                                                                    // 12596
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)                                                             // 12597
  }                                                                                                                   // 12598
  return bytes                                                                                                        // 12599
}                                                                                                                     // 12600
                                                                                                                      // 12601
function processBlock(H, M, offset) {                                                                                 // 12602
  // swap endian                                                                                                      // 12603
  for (var i = 0; i < 16; i++) {                                                                                      // 12604
    var offset_i = offset + i;                                                                                        // 12605
    var M_offset_i = M[offset_i]                                                                                      // 12606
                                                                                                                      // 12607
    // Swap                                                                                                           // 12608
    M[offset_i] = (                                                                                                   // 12609
        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                                   // 12610
        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                                     // 12611
    )                                                                                                                 // 12612
  }                                                                                                                   // 12613
                                                                                                                      // 12614
  // Working variables                                                                                                // 12615
  var al, bl, cl, dl, el                                                                                              // 12616
  var ar, br, cr, dr, er                                                                                              // 12617
                                                                                                                      // 12618
  ar = al = H[0]                                                                                                      // 12619
  br = bl = H[1]                                                                                                      // 12620
  cr = cl = H[2]                                                                                                      // 12621
  dr = dl = H[3]                                                                                                      // 12622
  er = el = H[4]                                                                                                      // 12623
                                                                                                                      // 12624
  // computation                                                                                                      // 12625
  var t                                                                                                               // 12626
  for (var i = 0; i < 80; i += 1) {                                                                                   // 12627
    t = (al +  M[offset+zl[i]])|0                                                                                     // 12628
    if (i<16){                                                                                                        // 12629
        t +=  f1(bl,cl,dl) + hl[0]                                                                                    // 12630
    } else if (i<32) {                                                                                                // 12631
        t +=  f2(bl,cl,dl) + hl[1]                                                                                    // 12632
    } else if (i<48) {                                                                                                // 12633
        t +=  f3(bl,cl,dl) + hl[2]                                                                                    // 12634
    } else if (i<64) {                                                                                                // 12635
        t +=  f4(bl,cl,dl) + hl[3]                                                                                    // 12636
    } else {// if (i<80) {                                                                                            // 12637
        t +=  f5(bl,cl,dl) + hl[4]                                                                                    // 12638
    }                                                                                                                 // 12639
    t = t|0                                                                                                           // 12640
    t =  rotl(t,sl[i])                                                                                                // 12641
    t = (t+el)|0                                                                                                      // 12642
    al = el                                                                                                           // 12643
    el = dl                                                                                                           // 12644
    dl = rotl(cl, 10)                                                                                                 // 12645
    cl = bl                                                                                                           // 12646
    bl = t                                                                                                            // 12647
                                                                                                                      // 12648
    t = (ar + M[offset+zr[i]])|0                                                                                      // 12649
    if (i<16) {                                                                                                       // 12650
      t +=  f5(br,cr,dr) + hr[0]                                                                                      // 12651
    } else if (i<32) {                                                                                                // 12652
      t +=  f4(br,cr,dr) + hr[1]                                                                                      // 12653
    } else if (i<48) {                                                                                                // 12654
      t +=  f3(br,cr,dr) + hr[2]                                                                                      // 12655
    } else if (i<64) {                                                                                                // 12656
      t +=  f2(br,cr,dr) + hr[3]                                                                                      // 12657
    } else {// if (i<80) {                                                                                            // 12658
      t +=  f1(br,cr,dr) + hr[4]                                                                                      // 12659
    }                                                                                                                 // 12660
                                                                                                                      // 12661
    t = t|0                                                                                                           // 12662
    t =  rotl(t,sr[i])                                                                                                // 12663
    t = (t+er)|0                                                                                                      // 12664
    ar = er                                                                                                           // 12665
    er = dr                                                                                                           // 12666
    dr = rotl(cr, 10)                                                                                                 // 12667
    cr = br                                                                                                           // 12668
    br = t                                                                                                            // 12669
  }                                                                                                                   // 12670
                                                                                                                      // 12671
  // intermediate hash value                                                                                          // 12672
  t    = (H[1] + cl + dr)|0                                                                                           // 12673
  H[1] = (H[2] + dl + er)|0                                                                                           // 12674
  H[2] = (H[3] + el + ar)|0                                                                                           // 12675
  H[3] = (H[4] + al + br)|0                                                                                           // 12676
  H[4] = (H[0] + bl + cr)|0                                                                                           // 12677
  H[0] =  t                                                                                                           // 12678
}                                                                                                                     // 12679
                                                                                                                      // 12680
function f1(x, y, z) {                                                                                                // 12681
  return ((x) ^ (y) ^ (z))                                                                                            // 12682
}                                                                                                                     // 12683
                                                                                                                      // 12684
function f2(x, y, z) {                                                                                                // 12685
  return (((x)&(y)) | ((~x)&(z)))                                                                                     // 12686
}                                                                                                                     // 12687
                                                                                                                      // 12688
function f3(x, y, z) {                                                                                                // 12689
  return (((x) | (~(y))) ^ (z))                                                                                       // 12690
}                                                                                                                     // 12691
                                                                                                                      // 12692
function f4(x, y, z) {                                                                                                // 12693
  return (((x) & (z)) | ((y)&(~(z))))                                                                                 // 12694
}                                                                                                                     // 12695
                                                                                                                      // 12696
function f5(x, y, z) {                                                                                                // 12697
  return ((x) ^ ((y) |(~(z))))                                                                                        // 12698
}                                                                                                                     // 12699
                                                                                                                      // 12700
function rotl(x,n) {                                                                                                  // 12701
  return (x<<n) | (x>>>(32-n))                                                                                        // 12702
}                                                                                                                     // 12703
                                                                                                                      // 12704
function ripemd160(message) {                                                                                         // 12705
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]                                                // 12706
                                                                                                                      // 12707
  if (typeof message == 'string')                                                                                     // 12708
    message = new Buffer(message, 'utf8')                                                                             // 12709
                                                                                                                      // 12710
  var m = bytesToWords(message)                                                                                       // 12711
                                                                                                                      // 12712
  var nBitsLeft = message.length * 8                                                                                  // 12713
  var nBitsTotal = message.length * 8                                                                                 // 12714
                                                                                                                      // 12715
  // Add padding                                                                                                      // 12716
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)                                                                 // 12717
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                                         // 12718
      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |                                                     // 12719
      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)                                                       // 12720
  )                                                                                                                   // 12721
                                                                                                                      // 12722
  for (var i=0 ; i<m.length; i += 16) {                                                                               // 12723
    processBlock(H, m, i)                                                                                             // 12724
  }                                                                                                                   // 12725
                                                                                                                      // 12726
  // swap endian                                                                                                      // 12727
  for (var i = 0; i < 5; i++) {                                                                                       // 12728
      // shortcut                                                                                                     // 12729
    var H_i = H[i]                                                                                                    // 12730
                                                                                                                      // 12731
    // Swap                                                                                                           // 12732
    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                              // 12733
          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00)                                                                 // 12734
  }                                                                                                                   // 12735
                                                                                                                      // 12736
  var digestbytes = wordsToBytes(H)                                                                                   // 12737
  return new Buffer(digestbytes)                                                                                      // 12738
}                                                                                                                     // 12739
                                                                                                                      // 12740
module.exports = ripemd160                                                                                            // 12741
                                                                                                                      // 12742
}).call(this,require("buffer").Buffer)                                                                                // 12743
                                                                                                                      // 12744
},{"buffer":2}],98:[function(require,module,exports){                                                                 // 12745
(function (Buffer){                                                                                                   // 12746
//prototype class for hash functions                                                                                  // 12747
function Hash (blockSize, finalSize) {                                                                                // 12748
  this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)                                                  // 12749
  this._finalSize = finalSize                                                                                         // 12750
  this._blockSize = blockSize                                                                                         // 12751
  this._len = 0                                                                                                       // 12752
  this._s = 0                                                                                                         // 12753
}                                                                                                                     // 12754
                                                                                                                      // 12755
Hash.prototype.update = function (data, enc) {                                                                        // 12756
  if ("string" === typeof data) {                                                                                     // 12757
    enc = enc || "utf8"                                                                                               // 12758
    data = new Buffer(data, enc)                                                                                      // 12759
  }                                                                                                                   // 12760
                                                                                                                      // 12761
  var l = this._len += data.length                                                                                    // 12762
  var s = this._s || 0                                                                                                // 12763
  var f = 0                                                                                                           // 12764
  var buffer = this._block                                                                                            // 12765
                                                                                                                      // 12766
  while (s < l) {                                                                                                     // 12767
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))                                        // 12768
    var ch = (t - f)                                                                                                  // 12769
                                                                                                                      // 12770
    for (var i = 0; i < ch; i++) {                                                                                    // 12771
      buffer[(s % this._blockSize) + i] = data[i + f]                                                                 // 12772
    }                                                                                                                 // 12773
                                                                                                                      // 12774
    s += ch                                                                                                           // 12775
    f += ch                                                                                                           // 12776
                                                                                                                      // 12777
    if ((s % this._blockSize) === 0) {                                                                                // 12778
      this._update(buffer)                                                                                            // 12779
    }                                                                                                                 // 12780
  }                                                                                                                   // 12781
  this._s = s                                                                                                         // 12782
                                                                                                                      // 12783
  return this                                                                                                         // 12784
}                                                                                                                     // 12785
                                                                                                                      // 12786
Hash.prototype.digest = function (enc) {                                                                              // 12787
  // Suppose the length of the message M, in bits, is l                                                               // 12788
  var l = this._len * 8                                                                                               // 12789
                                                                                                                      // 12790
  // Append the bit 1 to the end of the message                                                                       // 12791
  this._block[this._len % this._blockSize] = 0x80                                                                     // 12792
                                                                                                                      // 12793
  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)                                                                // 12795
                                                                                                                      // 12796
  if (l % (this._blockSize * 8) >= this._finalSize * 8) {                                                             // 12797
    this._update(this._block)                                                                                         // 12798
    this._block.fill(0)                                                                                               // 12799
  }                                                                                                                   // 12800
                                                                                                                      // 12801
  // to this append the block which is equal to the number l written in binary                                        // 12802
  // TODO: handle case where l is > Math.pow(2, 29)                                                                   // 12803
  this._block.writeInt32BE(l, this._blockSize - 4)                                                                    // 12804
                                                                                                                      // 12805
  var hash = this._update(this._block) || this._hash()                                                                // 12806
                                                                                                                      // 12807
  return enc ? hash.toString(enc) : hash                                                                              // 12808
}                                                                                                                     // 12809
                                                                                                                      // 12810
Hash.prototype._update = function () {                                                                                // 12811
  throw new Error('_update must be implemented by subclass')                                                          // 12812
}                                                                                                                     // 12813
                                                                                                                      // 12814
module.exports = Hash                                                                                                 // 12815
                                                                                                                      // 12816
}).call(this,require("buffer").Buffer)                                                                                // 12817
                                                                                                                      // 12818
},{"buffer":2}],99:[function(require,module,exports){                                                                 // 12819
var exports = module.exports = function (alg) {                                                                       // 12820
  var Alg = exports[alg.toLowerCase()]                                                                                // 12821
  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')                                       // 12822
  return new Alg()                                                                                                    // 12823
}                                                                                                                     // 12824
                                                                                                                      // 12825
                                                                                                                      // 12826
exports.sha = require('./sha')                                                                                        // 12827
exports.sha1 = require('./sha1')                                                                                      // 12828
exports.sha224 = require('./sha224')                                                                                  // 12829
exports.sha256 = require('./sha256')                                                                                  // 12830
exports.sha384 = require('./sha384')                                                                                  // 12831
exports.sha512 = require('./sha512')                                                                                  // 12832
                                                                                                                      // 12833
},{"./sha":100,"./sha1":101,"./sha224":102,"./sha256":103,"./sha384":104,"./sha512":105}],100:[function(require,module,exports){
(function (Buffer){                                                                                                   // 12835
/*                                                                                                                    // 12836
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined                                        // 12837
 * in FIPS PUB 180-1                                                                                                  // 12838
 * This source code is derived from sha1.js of the same repository.                                                   // 12839
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left                                               // 12840
 * operation was added.                                                                                               // 12841
 */                                                                                                                   // 12842
                                                                                                                      // 12843
var inherits = require('inherits')                                                                                    // 12844
var Hash = require('./hash')                                                                                          // 12845
                                                                                                                      // 12846
var W = new Array(80)                                                                                                 // 12847
                                                                                                                      // 12848
function Sha() {                                                                                                      // 12849
  this.init()                                                                                                         // 12850
  this._w = W                                                                                                         // 12851
                                                                                                                      // 12852
  Hash.call(this, 64, 56)                                                                                             // 12853
}                                                                                                                     // 12854
                                                                                                                      // 12855
inherits(Sha, Hash)                                                                                                   // 12856
                                                                                                                      // 12857
Sha.prototype.init = function () {                                                                                    // 12858
  this._a = 0x67452301                                                                                                // 12859
  this._b = 0xefcdab89                                                                                                // 12860
  this._c = 0x98badcfe                                                                                                // 12861
  this._d = 0x10325476                                                                                                // 12862
  this._e = 0xc3d2e1f0                                                                                                // 12863
                                                                                                                      // 12864
  return this                                                                                                         // 12865
}                                                                                                                     // 12866
                                                                                                                      // 12867
/*                                                                                                                    // 12868
 * Bitwise rotate a 32-bit number to the left.                                                                        // 12869
 */                                                                                                                   // 12870
function rol(num, cnt) {                                                                                              // 12871
  return (num << cnt) | (num >>> (32 - cnt));                                                                         // 12872
}                                                                                                                     // 12873
                                                                                                                      // 12874
Sha.prototype._update = function (M) {                                                                                // 12875
  var W = this._w                                                                                                     // 12876
                                                                                                                      // 12877
  var a = this._a                                                                                                     // 12878
  var b = this._b                                                                                                     // 12879
  var c = this._c                                                                                                     // 12880
  var d = this._d                                                                                                     // 12881
  var e = this._e                                                                                                     // 12882
                                                                                                                      // 12883
  var j = 0, k                                                                                                        // 12884
                                                                                                                      // 12885
  /*                                                                                                                  // 12886
   * SHA-1 has a bitwise rotate left operation. But, SHA is not                                                       // 12887
   * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }                                 // 12888
   */                                                                                                                 // 12889
  function calcW() { return W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16] }                                            // 12890
  function loop(w, f) {                                                                                               // 12891
    W[j] = w                                                                                                          // 12892
                                                                                                                      // 12893
    var t = rol(a, 5) + f + e + w + k                                                                                 // 12894
                                                                                                                      // 12895
    e = d                                                                                                             // 12896
    d = c                                                                                                             // 12897
    c = rol(b, 30)                                                                                                    // 12898
    b = a                                                                                                             // 12899
    a = t                                                                                                             // 12900
    j++                                                                                                               // 12901
  }                                                                                                                   // 12902
                                                                                                                      // 12903
  k = 1518500249                                                                                                      // 12904
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))                                                     // 12905
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))                                                                  // 12906
  k = 1859775393                                                                                                      // 12907
  while (j < 40) loop(calcW(), b ^ c ^ d)                                                                             // 12908
  k = -1894007588                                                                                                     // 12909
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))                                                           // 12910
  k = -899497514                                                                                                      // 12911
  while (j < 80) loop(calcW(), b ^ c ^ d)                                                                             // 12912
                                                                                                                      // 12913
  this._a = (a + this._a) | 0                                                                                         // 12914
  this._b = (b + this._b) | 0                                                                                         // 12915
  this._c = (c + this._c) | 0                                                                                         // 12916
  this._d = (d + this._d) | 0                                                                                         // 12917
  this._e = (e + this._e) | 0                                                                                         // 12918
}                                                                                                                     // 12919
                                                                                                                      // 12920
Sha.prototype._hash = function () {                                                                                   // 12921
  var H = new Buffer(20)                                                                                              // 12922
                                                                                                                      // 12923
  H.writeInt32BE(this._a|0, 0)                                                                                        // 12924
  H.writeInt32BE(this._b|0, 4)                                                                                        // 12925
  H.writeInt32BE(this._c|0, 8)                                                                                        // 12926
  H.writeInt32BE(this._d|0, 12)                                                                                       // 12927
  H.writeInt32BE(this._e|0, 16)                                                                                       // 12928
                                                                                                                      // 12929
  return H                                                                                                            // 12930
}                                                                                                                     // 12931
                                                                                                                      // 12932
module.exports = Sha                                                                                                  // 12933
                                                                                                                      // 12934
                                                                                                                      // 12935
}).call(this,require("buffer").Buffer)                                                                                // 12936
                                                                                                                      // 12937
},{"./hash":98,"buffer":2,"inherits":144}],101:[function(require,module,exports){                                     // 12938
(function (Buffer){                                                                                                   // 12939
/*                                                                                                                    // 12940
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined                                        // 12941
 * in FIPS PUB 180-1                                                                                                  // 12942
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.                                                                  // 12943
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet                                                      // 12944
 * Distributed under the BSD License                                                                                  // 12945
 * See http://pajhome.org.uk/crypt/md5 for details.                                                                   // 12946
 */                                                                                                                   // 12947
                                                                                                                      // 12948
var inherits = require('inherits')                                                                                    // 12949
var Hash = require('./hash')                                                                                          // 12950
                                                                                                                      // 12951
var W = new Array(80)                                                                                                 // 12952
                                                                                                                      // 12953
function Sha1() {                                                                                                     // 12954
  this.init()                                                                                                         // 12955
  this._w = W                                                                                                         // 12956
                                                                                                                      // 12957
  Hash.call(this, 64, 56)                                                                                             // 12958
}                                                                                                                     // 12959
                                                                                                                      // 12960
inherits(Sha1, Hash)                                                                                                  // 12961
                                                                                                                      // 12962
Sha1.prototype.init = function () {                                                                                   // 12963
  this._a = 0x67452301                                                                                                // 12964
  this._b = 0xefcdab89                                                                                                // 12965
  this._c = 0x98badcfe                                                                                                // 12966
  this._d = 0x10325476                                                                                                // 12967
  this._e = 0xc3d2e1f0                                                                                                // 12968
                                                                                                                      // 12969
  return this                                                                                                         // 12970
}                                                                                                                     // 12971
                                                                                                                      // 12972
/*                                                                                                                    // 12973
 * Bitwise rotate a 32-bit number to the left.                                                                        // 12974
 */                                                                                                                   // 12975
function rol(num, cnt) {                                                                                              // 12976
  return (num << cnt) | (num >>> (32 - cnt));                                                                         // 12977
}                                                                                                                     // 12978
                                                                                                                      // 12979
Sha1.prototype._update = function (M) {                                                                               // 12980
  var W = this._w                                                                                                     // 12981
                                                                                                                      // 12982
  var a = this._a                                                                                                     // 12983
  var b = this._b                                                                                                     // 12984
  var c = this._c                                                                                                     // 12985
  var d = this._d                                                                                                     // 12986
  var e = this._e                                                                                                     // 12987
                                                                                                                      // 12988
  var j = 0, k                                                                                                        // 12989
                                                                                                                      // 12990
  function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }                                    // 12991
  function loop(w, f) {                                                                                               // 12992
    W[j] = w                                                                                                          // 12993
                                                                                                                      // 12994
    var t = rol(a, 5) + f + e + w + k                                                                                 // 12995
                                                                                                                      // 12996
    e = d                                                                                                             // 12997
    d = c                                                                                                             // 12998
    c = rol(b, 30)                                                                                                    // 12999
    b = a                                                                                                             // 13000
    a = t                                                                                                             // 13001
    j++                                                                                                               // 13002
  }                                                                                                                   // 13003
                                                                                                                      // 13004
  k = 1518500249                                                                                                      // 13005
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))                                                     // 13006
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))                                                                  // 13007
  k = 1859775393                                                                                                      // 13008
  while (j < 40) loop(calcW(), b ^ c ^ d)                                                                             // 13009
  k = -1894007588                                                                                                     // 13010
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))                                                           // 13011
  k = -899497514                                                                                                      // 13012
  while (j < 80) loop(calcW(), b ^ c ^ d)                                                                             // 13013
                                                                                                                      // 13014
  this._a = (a + this._a) | 0                                                                                         // 13015
  this._b = (b + this._b) | 0                                                                                         // 13016
  this._c = (c + this._c) | 0                                                                                         // 13017
  this._d = (d + this._d) | 0                                                                                         // 13018
  this._e = (e + this._e) | 0                                                                                         // 13019
}                                                                                                                     // 13020
                                                                                                                      // 13021
Sha1.prototype._hash = function () {                                                                                  // 13022
  var H = new Buffer(20)                                                                                              // 13023
                                                                                                                      // 13024
  H.writeInt32BE(this._a|0, 0)                                                                                        // 13025
  H.writeInt32BE(this._b|0, 4)                                                                                        // 13026
  H.writeInt32BE(this._c|0, 8)                                                                                        // 13027
  H.writeInt32BE(this._d|0, 12)                                                                                       // 13028
  H.writeInt32BE(this._e|0, 16)                                                                                       // 13029
                                                                                                                      // 13030
  return H                                                                                                            // 13031
}                                                                                                                     // 13032
                                                                                                                      // 13033
module.exports = Sha1                                                                                                 // 13034
                                                                                                                      // 13035
                                                                                                                      // 13036
}).call(this,require("buffer").Buffer)                                                                                // 13037
                                                                                                                      // 13038
},{"./hash":98,"buffer":2,"inherits":144}],102:[function(require,module,exports){                                     // 13039
(function (Buffer){                                                                                                   // 13040
/**                                                                                                                   // 13041
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined                                      // 13042
 * in FIPS 180-2                                                                                                      // 13043
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.                                                 // 13044
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet                                                      // 13045
 *                                                                                                                    // 13046
 */                                                                                                                   // 13047
                                                                                                                      // 13048
var inherits = require('inherits')                                                                                    // 13049
var SHA256 = require('./sha256')                                                                                      // 13050
var Hash = require('./hash')                                                                                          // 13051
                                                                                                                      // 13052
var W = new Array(64)                                                                                                 // 13053
                                                                                                                      // 13054
function Sha224() {                                                                                                   // 13055
  this.init()                                                                                                         // 13056
                                                                                                                      // 13057
  this._w = W // new Array(64)                                                                                        // 13058
                                                                                                                      // 13059
  Hash.call(this, 64, 56)                                                                                             // 13060
}                                                                                                                     // 13061
                                                                                                                      // 13062
inherits(Sha224, SHA256)                                                                                              // 13063
                                                                                                                      // 13064
Sha224.prototype.init = function () {                                                                                 // 13065
  this._a = 0xc1059ed8|0                                                                                              // 13066
  this._b = 0x367cd507|0                                                                                              // 13067
  this._c = 0x3070dd17|0                                                                                              // 13068
  this._d = 0xf70e5939|0                                                                                              // 13069
  this._e = 0xffc00b31|0                                                                                              // 13070
  this._f = 0x68581511|0                                                                                              // 13071
  this._g = 0x64f98fa7|0                                                                                              // 13072
  this._h = 0xbefa4fa4|0                                                                                              // 13073
                                                                                                                      // 13074
  return this                                                                                                         // 13075
}                                                                                                                     // 13076
                                                                                                                      // 13077
Sha224.prototype._hash = function () {                                                                                // 13078
  var H = new Buffer(28)                                                                                              // 13079
                                                                                                                      // 13080
  H.writeInt32BE(this._a,  0)                                                                                         // 13081
  H.writeInt32BE(this._b,  4)                                                                                         // 13082
  H.writeInt32BE(this._c,  8)                                                                                         // 13083
  H.writeInt32BE(this._d, 12)                                                                                         // 13084
  H.writeInt32BE(this._e, 16)                                                                                         // 13085
  H.writeInt32BE(this._f, 20)                                                                                         // 13086
  H.writeInt32BE(this._g, 24)                                                                                         // 13087
                                                                                                                      // 13088
  return H                                                                                                            // 13089
}                                                                                                                     // 13090
                                                                                                                      // 13091
module.exports = Sha224                                                                                               // 13092
                                                                                                                      // 13093
}).call(this,require("buffer").Buffer)                                                                                // 13094
                                                                                                                      // 13095
},{"./hash":98,"./sha256":103,"buffer":2,"inherits":144}],103:[function(require,module,exports){                      // 13096
(function (Buffer){                                                                                                   // 13097
/**                                                                                                                   // 13098
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined                                      // 13099
 * in FIPS 180-2                                                                                                      // 13100
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.                                                 // 13101
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet                                                      // 13102
 *                                                                                                                    // 13103
 */                                                                                                                   // 13104
                                                                                                                      // 13105
var inherits = require('inherits')                                                                                    // 13106
var Hash = require('./hash')                                                                                          // 13107
                                                                                                                      // 13108
var K = [                                                                                                             // 13109
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,                                                                     // 13110
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,                                                                     // 13111
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,                                                                     // 13112
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,                                                                     // 13113
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,                                                                     // 13114
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,                                                                     // 13115
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,                                                                     // 13116
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,                                                                     // 13117
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,                                                                     // 13118
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,                                                                     // 13119
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,                                                                     // 13120
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,                                                                     // 13121
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,                                                                     // 13122
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,                                                                     // 13123
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,                                                                     // 13124
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2                                                                      // 13125
]                                                                                                                     // 13126
                                                                                                                      // 13127
var W = new Array(64)                                                                                                 // 13128
                                                                                                                      // 13129
function Sha256() {                                                                                                   // 13130
  this.init()                                                                                                         // 13131
                                                                                                                      // 13132
  this._w = W // new Array(64)                                                                                        // 13133
                                                                                                                      // 13134
  Hash.call(this, 64, 56)                                                                                             // 13135
}                                                                                                                     // 13136
                                                                                                                      // 13137
inherits(Sha256, Hash)                                                                                                // 13138
                                                                                                                      // 13139
Sha256.prototype.init = function () {                                                                                 // 13140
  this._a = 0x6a09e667|0                                                                                              // 13141
  this._b = 0xbb67ae85|0                                                                                              // 13142
  this._c = 0x3c6ef372|0                                                                                              // 13143
  this._d = 0xa54ff53a|0                                                                                              // 13144
  this._e = 0x510e527f|0                                                                                              // 13145
  this._f = 0x9b05688c|0                                                                                              // 13146
  this._g = 0x1f83d9ab|0                                                                                              // 13147
  this._h = 0x5be0cd19|0                                                                                              // 13148
                                                                                                                      // 13149
  return this                                                                                                         // 13150
}                                                                                                                     // 13151
                                                                                                                      // 13152
function S (X, n) {                                                                                                   // 13153
  return (X >>> n) | (X << (32 - n));                                                                                 // 13154
}                                                                                                                     // 13155
                                                                                                                      // 13156
function R (X, n) {                                                                                                   // 13157
  return (X >>> n);                                                                                                   // 13158
}                                                                                                                     // 13159
                                                                                                                      // 13160
function Ch (x, y, z) {                                                                                               // 13161
  return ((x & y) ^ ((~x) & z));                                                                                      // 13162
}                                                                                                                     // 13163
                                                                                                                      // 13164
function Maj (x, y, z) {                                                                                              // 13165
  return ((x & y) ^ (x & z) ^ (y & z));                                                                               // 13166
}                                                                                                                     // 13167
                                                                                                                      // 13168
function Sigma0256 (x) {                                                                                              // 13169
  return (S(x, 2) ^ S(x, 13) ^ S(x, 22));                                                                             // 13170
}                                                                                                                     // 13171
                                                                                                                      // 13172
function Sigma1256 (x) {                                                                                              // 13173
  return (S(x, 6) ^ S(x, 11) ^ S(x, 25));                                                                             // 13174
}                                                                                                                     // 13175
                                                                                                                      // 13176
function Gamma0256 (x) {                                                                                              // 13177
  return (S(x, 7) ^ S(x, 18) ^ R(x, 3));                                                                              // 13178
}                                                                                                                     // 13179
                                                                                                                      // 13180
function Gamma1256 (x) {                                                                                              // 13181
  return (S(x, 17) ^ S(x, 19) ^ R(x, 10));                                                                            // 13182
}                                                                                                                     // 13183
                                                                                                                      // 13184
Sha256.prototype._update = function(M) {                                                                              // 13185
  var W = this._w                                                                                                     // 13186
                                                                                                                      // 13187
  var a = this._a | 0                                                                                                 // 13188
  var b = this._b | 0                                                                                                 // 13189
  var c = this._c | 0                                                                                                 // 13190
  var d = this._d | 0                                                                                                 // 13191
  var e = this._e | 0                                                                                                 // 13192
  var f = this._f | 0                                                                                                 // 13193
  var g = this._g | 0                                                                                                 // 13194
  var h = this._h | 0                                                                                                 // 13195
                                                                                                                      // 13196
  var j = 0                                                                                                           // 13197
                                                                                                                      // 13198
  function calcW() { return Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16] }                       // 13199
  function loop(w) {                                                                                                  // 13200
    W[j] = w                                                                                                          // 13201
                                                                                                                      // 13202
    var T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w                                                                // 13203
    var T2 = Sigma0256(a) + Maj(a, b, c);                                                                             // 13204
                                                                                                                      // 13205
    h = g;                                                                                                            // 13206
    g = f;                                                                                                            // 13207
    f = e;                                                                                                            // 13208
    e = d + T1;                                                                                                       // 13209
    d = c;                                                                                                            // 13210
    c = b;                                                                                                            // 13211
    b = a;                                                                                                            // 13212
    a = T1 + T2;                                                                                                      // 13213
                                                                                                                      // 13214
    j++                                                                                                               // 13215
  }                                                                                                                   // 13216
                                                                                                                      // 13217
  while (j < 16) loop(M.readInt32BE(j * 4))                                                                           // 13218
  while (j < 64) loop(calcW())                                                                                        // 13219
                                                                                                                      // 13220
  this._a = (a + this._a) | 0                                                                                         // 13221
  this._b = (b + this._b) | 0                                                                                         // 13222
  this._c = (c + this._c) | 0                                                                                         // 13223
  this._d = (d + this._d) | 0                                                                                         // 13224
  this._e = (e + this._e) | 0                                                                                         // 13225
  this._f = (f + this._f) | 0                                                                                         // 13226
  this._g = (g + this._g) | 0                                                                                         // 13227
  this._h = (h + this._h) | 0                                                                                         // 13228
};                                                                                                                    // 13229
                                                                                                                      // 13230
Sha256.prototype._hash = function () {                                                                                // 13231
  var H = new Buffer(32)                                                                                              // 13232
                                                                                                                      // 13233
  H.writeInt32BE(this._a,  0)                                                                                         // 13234
  H.writeInt32BE(this._b,  4)                                                                                         // 13235
  H.writeInt32BE(this._c,  8)                                                                                         // 13236
  H.writeInt32BE(this._d, 12)                                                                                         // 13237
  H.writeInt32BE(this._e, 16)                                                                                         // 13238
  H.writeInt32BE(this._f, 20)                                                                                         // 13239
  H.writeInt32BE(this._g, 24)                                                                                         // 13240
  H.writeInt32BE(this._h, 28)                                                                                         // 13241
                                                                                                                      // 13242
  return H                                                                                                            // 13243
}                                                                                                                     // 13244
                                                                                                                      // 13245
module.exports = Sha256                                                                                               // 13246
                                                                                                                      // 13247
}).call(this,require("buffer").Buffer)                                                                                // 13248
                                                                                                                      // 13249
},{"./hash":98,"buffer":2,"inherits":144}],104:[function(require,module,exports){                                     // 13250
(function (Buffer){                                                                                                   // 13251
var inherits = require('inherits')                                                                                    // 13252
var SHA512 = require('./sha512');                                                                                     // 13253
var Hash = require('./hash')                                                                                          // 13254
                                                                                                                      // 13255
var W = new Array(160)                                                                                                // 13256
                                                                                                                      // 13257
function Sha384() {                                                                                                   // 13258
  this.init()                                                                                                         // 13259
  this._w = W                                                                                                         // 13260
                                                                                                                      // 13261
  Hash.call(this, 128, 112)                                                                                           // 13262
}                                                                                                                     // 13263
                                                                                                                      // 13264
inherits(Sha384, SHA512)                                                                                              // 13265
                                                                                                                      // 13266
Sha384.prototype.init = function () {                                                                                 // 13267
  this._a = 0xcbbb9d5d|0                                                                                              // 13268
  this._b = 0x629a292a|0                                                                                              // 13269
  this._c = 0x9159015a|0                                                                                              // 13270
  this._d = 0x152fecd8|0                                                                                              // 13271
  this._e = 0x67332667|0                                                                                              // 13272
  this._f = 0x8eb44a87|0                                                                                              // 13273
  this._g = 0xdb0c2e0d|0                                                                                              // 13274
  this._h = 0x47b5481d|0                                                                                              // 13275
                                                                                                                      // 13276
  this._al = 0xc1059ed8|0                                                                                             // 13277
  this._bl = 0x367cd507|0                                                                                             // 13278
  this._cl = 0x3070dd17|0                                                                                             // 13279
  this._dl = 0xf70e5939|0                                                                                             // 13280
  this._el = 0xffc00b31|0                                                                                             // 13281
  this._fl = 0x68581511|0                                                                                             // 13282
  this._gl = 0x64f98fa7|0                                                                                             // 13283
  this._hl = 0xbefa4fa4|0                                                                                             // 13284
                                                                                                                      // 13285
  return this                                                                                                         // 13286
}                                                                                                                     // 13287
                                                                                                                      // 13288
Sha384.prototype._hash = function () {                                                                                // 13289
  var H = new Buffer(48)                                                                                              // 13290
                                                                                                                      // 13291
  function writeInt64BE(h, l, offset) {                                                                               // 13292
    H.writeInt32BE(h, offset)                                                                                         // 13293
    H.writeInt32BE(l, offset + 4)                                                                                     // 13294
  }                                                                                                                   // 13295
                                                                                                                      // 13296
  writeInt64BE(this._a, this._al, 0)                                                                                  // 13297
  writeInt64BE(this._b, this._bl, 8)                                                                                  // 13298
  writeInt64BE(this._c, this._cl, 16)                                                                                 // 13299
  writeInt64BE(this._d, this._dl, 24)                                                                                 // 13300
  writeInt64BE(this._e, this._el, 32)                                                                                 // 13301
  writeInt64BE(this._f, this._fl, 40)                                                                                 // 13302
                                                                                                                      // 13303
  return H                                                                                                            // 13304
}                                                                                                                     // 13305
                                                                                                                      // 13306
module.exports = Sha384                                                                                               // 13307
                                                                                                                      // 13308
}).call(this,require("buffer").Buffer)                                                                                // 13309
                                                                                                                      // 13310
},{"./hash":98,"./sha512":105,"buffer":2,"inherits":144}],105:[function(require,module,exports){                      // 13311
(function (Buffer){                                                                                                   // 13312
var inherits = require('inherits')                                                                                    // 13313
var Hash = require('./hash')                                                                                          // 13314
                                                                                                                      // 13315
var K = [                                                                                                             // 13316
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,                                                                     // 13317
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,                                                                     // 13318
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,                                                                     // 13319
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,                                                                     // 13320
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,                                                                     // 13321
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,                                                                     // 13322
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,                                                                     // 13323
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,                                                                     // 13324
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,                                                                     // 13325
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,                                                                     // 13326
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,                                                                     // 13327
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,                                                                     // 13328
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,                                                                     // 13329
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,                                                                     // 13330
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,                                                                     // 13331
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,                                                                     // 13332
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,                                                                     // 13333
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,                                                                     // 13334
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,                                                                     // 13335
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,                                                                     // 13336
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,                                                                     // 13337
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,                                                                     // 13338
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,                                                                     // 13339
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,                                                                     // 13340
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,                                                                     // 13341
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,                                                                     // 13342
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,                                                                     // 13343
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,                                                                     // 13344
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,                                                                     // 13345
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,                                                                     // 13346
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,                                                                     // 13347
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,                                                                     // 13348
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,                                                                     // 13349
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,                                                                     // 13350
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,                                                                     // 13351
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,                                                                     // 13352
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,                                                                     // 13353
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,                                                                     // 13354
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,                                                                     // 13355
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817                                                                      // 13356
]                                                                                                                     // 13357
                                                                                                                      // 13358
var W = new Array(160)                                                                                                // 13359
                                                                                                                      // 13360
function Sha512() {                                                                                                   // 13361
  this.init()                                                                                                         // 13362
  this._w = W                                                                                                         // 13363
                                                                                                                      // 13364
  Hash.call(this, 128, 112)                                                                                           // 13365
}                                                                                                                     // 13366
                                                                                                                      // 13367
inherits(Sha512, Hash)                                                                                                // 13368
                                                                                                                      // 13369
Sha512.prototype.init = function () {                                                                                 // 13370
  this._a = 0x6a09e667|0                                                                                              // 13371
  this._b = 0xbb67ae85|0                                                                                              // 13372
  this._c = 0x3c6ef372|0                                                                                              // 13373
  this._d = 0xa54ff53a|0                                                                                              // 13374
  this._e = 0x510e527f|0                                                                                              // 13375
  this._f = 0x9b05688c|0                                                                                              // 13376
  this._g = 0x1f83d9ab|0                                                                                              // 13377
  this._h = 0x5be0cd19|0                                                                                              // 13378
                                                                                                                      // 13379
  this._al = 0xf3bcc908|0                                                                                             // 13380
  this._bl = 0x84caa73b|0                                                                                             // 13381
  this._cl = 0xfe94f82b|0                                                                                             // 13382
  this._dl = 0x5f1d36f1|0                                                                                             // 13383
  this._el = 0xade682d1|0                                                                                             // 13384
  this._fl = 0x2b3e6c1f|0                                                                                             // 13385
  this._gl = 0xfb41bd6b|0                                                                                             // 13386
  this._hl = 0x137e2179|0                                                                                             // 13387
                                                                                                                      // 13388
  return this                                                                                                         // 13389
}                                                                                                                     // 13390
                                                                                                                      // 13391
function S (X, Xl, n) {                                                                                               // 13392
  return (X >>> n) | (Xl << (32 - n))                                                                                 // 13393
}                                                                                                                     // 13394
                                                                                                                      // 13395
function Ch (x, y, z) {                                                                                               // 13396
  return ((x & y) ^ ((~x) & z));                                                                                      // 13397
}                                                                                                                     // 13398
                                                                                                                      // 13399
function Maj (x, y, z) {                                                                                              // 13400
  return ((x & y) ^ (x & z) ^ (y & z));                                                                               // 13401
}                                                                                                                     // 13402
                                                                                                                      // 13403
Sha512.prototype._update = function(M) {                                                                              // 13404
  var W = this._w                                                                                                     // 13405
                                                                                                                      // 13406
  var a = this._a | 0                                                                                                 // 13407
  var b = this._b | 0                                                                                                 // 13408
  var c = this._c | 0                                                                                                 // 13409
  var d = this._d | 0                                                                                                 // 13410
  var e = this._e | 0                                                                                                 // 13411
  var f = this._f | 0                                                                                                 // 13412
  var g = this._g | 0                                                                                                 // 13413
  var h = this._h | 0                                                                                                 // 13414
                                                                                                                      // 13415
  var al = this._al | 0                                                                                               // 13416
  var bl = this._bl | 0                                                                                               // 13417
  var cl = this._cl | 0                                                                                               // 13418
  var dl = this._dl | 0                                                                                               // 13419
  var el = this._el | 0                                                                                               // 13420
  var fl = this._fl | 0                                                                                               // 13421
  var gl = this._gl | 0                                                                                               // 13422
  var hl = this._hl | 0                                                                                               // 13423
                                                                                                                      // 13424
  var i = 0, j = 0                                                                                                    // 13425
  var Wi, Wil                                                                                                         // 13426
  function calcW() {                                                                                                  // 13427
    var x  = W[j - 15*2]                                                                                              // 13428
    var xl = W[j - 15*2 + 1]                                                                                          // 13429
    var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)                                                               // 13430
    var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)                                                             // 13431
                                                                                                                      // 13432
    x  = W[j - 2*2]                                                                                                   // 13433
    xl = W[j - 2*2 + 1]                                                                                               // 13434
    var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)                                                             // 13435
    var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)                                                           // 13436
                                                                                                                      // 13437
    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]                                                                  // 13438
    var Wi7  = W[j - 7*2]                                                                                             // 13439
    var Wi7l = W[j - 7*2 + 1]                                                                                         // 13440
                                                                                                                      // 13441
    var Wi16  = W[j - 16*2]                                                                                           // 13442
    var Wi16l = W[j - 16*2 + 1]                                                                                       // 13443
                                                                                                                      // 13444
    Wil = gamma0l + Wi7l                                                                                              // 13445
    Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)                                                     // 13446
    Wil = Wil + gamma1l                                                                                               // 13447
    Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)                                                     // 13448
    Wil = Wil + Wi16l                                                                                                 // 13449
    Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)                                                          // 13450
  }                                                                                                                   // 13451
                                                                                                                      // 13452
  function loop() {                                                                                                   // 13453
    W[j] = Wi                                                                                                         // 13454
    W[j + 1] = Wil                                                                                                    // 13455
                                                                                                                      // 13456
    var maj = Maj(a, b, c)                                                                                            // 13457
    var majl = Maj(al, bl, cl)                                                                                        // 13458
                                                                                                                      // 13459
    var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)                                                            // 13460
    var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)                                                            // 13461
    var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)                                                           // 13462
    var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)                                                           // 13463
                                                                                                                      // 13464
    // t1 = h + sigma1 + ch + K[i] + W[i]                                                                             // 13465
    var Ki = K[j]                                                                                                     // 13466
    var Kil = K[j + 1]                                                                                                // 13467
                                                                                                                      // 13468
    var ch = Ch(e, f, g)                                                                                              // 13469
    var chl = Ch(el, fl, gl)                                                                                          // 13470
                                                                                                                      // 13471
    var t1l = hl + sigma1l                                                                                            // 13472
    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)                                                         // 13473
    t1l = t1l + chl                                                                                                   // 13474
    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)                                                                // 13475
    t1l = t1l + Kil                                                                                                   // 13476
    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)                                                                // 13477
    t1l = t1l + Wil                                                                                                   // 13478
    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)                                                                // 13479
                                                                                                                      // 13480
    // t2 = sigma0 + maj                                                                                              // 13481
    var t2l = sigma0l + majl                                                                                          // 13482
    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)                                                  // 13483
                                                                                                                      // 13484
    h  = g                                                                                                            // 13485
    hl = gl                                                                                                           // 13486
    g  = f                                                                                                            // 13487
    gl = fl                                                                                                           // 13488
    f  = e                                                                                                            // 13489
    fl = el                                                                                                           // 13490
    el = (dl + t1l) | 0                                                                                               // 13491
    e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0                                                             // 13492
    d  = c                                                                                                            // 13493
    dl = cl                                                                                                           // 13494
    c  = b                                                                                                            // 13495
    cl = bl                                                                                                           // 13496
    b  = a                                                                                                            // 13497
    bl = al                                                                                                           // 13498
    al = (t1l + t2l) | 0                                                                                              // 13499
    a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0                                                           // 13500
                                                                                                                      // 13501
    i++                                                                                                               // 13502
    j += 2                                                                                                            // 13503
  }                                                                                                                   // 13504
                                                                                                                      // 13505
  while (i < 16) {                                                                                                    // 13506
    Wi = M.readInt32BE(j * 4)                                                                                         // 13507
    Wil = M.readInt32BE(j * 4 + 4)                                                                                    // 13508
                                                                                                                      // 13509
    loop()                                                                                                            // 13510
  }                                                                                                                   // 13511
                                                                                                                      // 13512
  while (i < 80) {                                                                                                    // 13513
    calcW()                                                                                                           // 13514
    loop()                                                                                                            // 13515
  }                                                                                                                   // 13516
                                                                                                                      // 13517
  this._al = (this._al + al) | 0                                                                                      // 13518
  this._bl = (this._bl + bl) | 0                                                                                      // 13519
  this._cl = (this._cl + cl) | 0                                                                                      // 13520
  this._dl = (this._dl + dl) | 0                                                                                      // 13521
  this._el = (this._el + el) | 0                                                                                      // 13522
  this._fl = (this._fl + fl) | 0                                                                                      // 13523
  this._gl = (this._gl + gl) | 0                                                                                      // 13524
  this._hl = (this._hl + hl) | 0                                                                                      // 13525
                                                                                                                      // 13526
  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0                                               // 13527
  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0                                               // 13528
  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0                                               // 13529
  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0                                               // 13530
  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0                                               // 13531
  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0                                               // 13532
  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0                                               // 13533
  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0                                               // 13534
}                                                                                                                     // 13535
                                                                                                                      // 13536
Sha512.prototype._hash = function () {                                                                                // 13537
  var H = new Buffer(64)                                                                                              // 13538
                                                                                                                      // 13539
  function writeInt64BE(h, l, offset) {                                                                               // 13540
    H.writeInt32BE(h, offset)                                                                                         // 13541
    H.writeInt32BE(l, offset + 4)                                                                                     // 13542
  }                                                                                                                   // 13543
                                                                                                                      // 13544
  writeInt64BE(this._a, this._al, 0)                                                                                  // 13545
  writeInt64BE(this._b, this._bl, 8)                                                                                  // 13546
  writeInt64BE(this._c, this._cl, 16)                                                                                 // 13547
  writeInt64BE(this._d, this._dl, 24)                                                                                 // 13548
  writeInt64BE(this._e, this._el, 32)                                                                                 // 13549
  writeInt64BE(this._f, this._fl, 40)                                                                                 // 13550
  writeInt64BE(this._g, this._gl, 48)                                                                                 // 13551
  writeInt64BE(this._h, this._hl, 56)                                                                                 // 13552
                                                                                                                      // 13553
  return H                                                                                                            // 13554
}                                                                                                                     // 13555
                                                                                                                      // 13556
module.exports = Sha512                                                                                               // 13557
                                                                                                                      // 13558
}).call(this,require("buffer").Buffer)                                                                                // 13559
                                                                                                                      // 13560
},{"./hash":98,"buffer":2,"inherits":144}],106:[function(require,module,exports){                                     // 13561
(function (Buffer){                                                                                                   // 13562
'use strict';                                                                                                         // 13563
var createHash = require('create-hash/browser');                                                                      // 13564
var inherits = require('inherits')                                                                                    // 13565
                                                                                                                      // 13566
var Transform = require('stream').Transform                                                                           // 13567
                                                                                                                      // 13568
var ZEROS = new Buffer(128)                                                                                           // 13569
ZEROS.fill(0)                                                                                                         // 13570
                                                                                                                      // 13571
function Hmac(alg, key) {                                                                                             // 13572
  Transform.call(this)                                                                                                // 13573
                                                                                                                      // 13574
  if (typeof key === 'string') {                                                                                      // 13575
    key = new Buffer(key)                                                                                             // 13576
  }                                                                                                                   // 13577
                                                                                                                      // 13578
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64                                                   // 13579
                                                                                                                      // 13580
  this._alg = alg                                                                                                     // 13581
  this._key = key                                                                                                     // 13582
                                                                                                                      // 13583
  if (key.length > blocksize) {                                                                                       // 13584
    key = createHash(alg).update(key).digest()                                                                        // 13585
                                                                                                                      // 13586
  } else if (key.length < blocksize) {                                                                                // 13587
    key = Buffer.concat([key, ZEROS], blocksize)                                                                      // 13588
  }                                                                                                                   // 13589
                                                                                                                      // 13590
  var ipad = this._ipad = new Buffer(blocksize)                                                                       // 13591
  var opad = this._opad = new Buffer(blocksize)                                                                       // 13592
                                                                                                                      // 13593
  for (var i = 0; i < blocksize; i++) {                                                                               // 13594
    ipad[i] = key[i] ^ 0x36                                                                                           // 13595
    opad[i] = key[i] ^ 0x5C                                                                                           // 13596
  }                                                                                                                   // 13597
                                                                                                                      // 13598
  this._hash = createHash(alg).update(ipad)                                                                           // 13599
}                                                                                                                     // 13600
                                                                                                                      // 13601
inherits(Hmac, Transform)                                                                                             // 13602
                                                                                                                      // 13603
Hmac.prototype.update = function (data, enc) {                                                                        // 13604
  this._hash.update(data, enc)                                                                                        // 13605
                                                                                                                      // 13606
  return this                                                                                                         // 13607
}                                                                                                                     // 13608
                                                                                                                      // 13609
Hmac.prototype._transform = function (data, _, next) {                                                                // 13610
  this._hash.update(data)                                                                                             // 13611
                                                                                                                      // 13612
  next()                                                                                                              // 13613
}                                                                                                                     // 13614
                                                                                                                      // 13615
Hmac.prototype._flush = function (next) {                                                                             // 13616
  this.push(this.digest())                                                                                            // 13617
                                                                                                                      // 13618
  next()                                                                                                              // 13619
}                                                                                                                     // 13620
                                                                                                                      // 13621
Hmac.prototype.digest = function (enc) {                                                                              // 13622
  var h = this._hash.digest()                                                                                         // 13623
                                                                                                                      // 13624
  return createHash(this._alg).update(this._opad).update(h).digest(enc)                                               // 13625
}                                                                                                                     // 13626
                                                                                                                      // 13627
module.exports = function createHmac(alg, key) {                                                                      // 13628
  return new Hmac(alg, key)                                                                                           // 13629
}                                                                                                                     // 13630
                                                                                                                      // 13631
}).call(this,require("buffer").Buffer)                                                                                // 13632
                                                                                                                      // 13633
},{"buffer":2,"create-hash/browser":94,"inherits":144,"stream":158}],107:[function(require,module,exports){           // 13634
(function (Buffer){                                                                                                   // 13635
var generatePrime = require('./lib/generatePrime');                                                                   // 13636
var primes = require('./lib/primes');                                                                                 // 13637
                                                                                                                      // 13638
var DH = require('./lib/dh');                                                                                         // 13639
                                                                                                                      // 13640
function getDiffieHellman(mod) {                                                                                      // 13641
  var prime = new Buffer(primes[mod].prime, 'hex');                                                                   // 13642
  var gen = new Buffer(primes[mod].gen, 'hex');                                                                       // 13643
                                                                                                                      // 13644
  return new DH(prime, gen);                                                                                          // 13645
}                                                                                                                     // 13646
                                                                                                                      // 13647
function createDiffieHellman(prime, enc, generator, genc) {                                                           // 13648
  if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {         // 13649
    genc = generator;                                                                                                 // 13650
    generator = enc;                                                                                                  // 13651
    enc = undefined;                                                                                                  // 13652
  }                                                                                                                   // 13653
                                                                                                                      // 13654
  enc = enc || 'binary';                                                                                              // 13655
  genc = genc || 'binary';                                                                                            // 13656
  generator = generator || new Buffer([2]);                                                                           // 13657
                                                                                                                      // 13658
  if (!Buffer.isBuffer(generator)) {                                                                                  // 13659
    generator = new Buffer(generator, genc);                                                                          // 13660
  }                                                                                                                   // 13661
                                                                                                                      // 13662
  if (typeof prime === 'number') {                                                                                    // 13663
    return new DH(generatePrime(prime, generator), generator, true);                                                  // 13664
  }                                                                                                                   // 13665
                                                                                                                      // 13666
  if (!Buffer.isBuffer(prime)) {                                                                                      // 13667
    prime = new Buffer(prime, enc);                                                                                   // 13668
  }                                                                                                                   // 13669
                                                                                                                      // 13670
  return new DH(prime, generator, true);                                                                              // 13671
}                                                                                                                     // 13672
                                                                                                                      // 13673
exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;          // 13674
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;                                            // 13675
                                                                                                                      // 13676
}).call(this,require("buffer").Buffer)                                                                                // 13677
                                                                                                                      // 13678
},{"./lib/dh":108,"./lib/generatePrime":109,"./lib/primes":110,"buffer":2}],108:[function(require,module,exports){    // 13679
(function (Buffer){                                                                                                   // 13680
var BN = require('bn.js');                                                                                            // 13681
var MillerRabin = require('miller-rabin');                                                                            // 13682
var millerRabin = new MillerRabin();                                                                                  // 13683
var TWENTYFOUR = new BN(24);                                                                                          // 13684
var ELEVEN = new BN(11);                                                                                              // 13685
var TEN = new BN(10);                                                                                                 // 13686
var THREE = new BN(3);                                                                                                // 13687
var SEVEN = new BN(7);                                                                                                // 13688
var primes = require('./generatePrime');                                                                              // 13689
var randomBytes = require('randombytes');                                                                             // 13690
module.exports = DH;                                                                                                  // 13691
                                                                                                                      // 13692
function setPublicKey(pub, enc) {                                                                                     // 13693
  enc = enc || 'utf8';                                                                                                // 13694
  if (!Buffer.isBuffer(pub)) {                                                                                        // 13695
    pub = new Buffer(pub, enc);                                                                                       // 13696
  }                                                                                                                   // 13697
  this._pub = new BN(pub);                                                                                            // 13698
  return this;                                                                                                        // 13699
}                                                                                                                     // 13700
                                                                                                                      // 13701
function setPrivateKey(priv, enc) {                                                                                   // 13702
  enc = enc || 'utf8';                                                                                                // 13703
  if (!Buffer.isBuffer(priv)) {                                                                                       // 13704
    priv = new Buffer(priv, enc);                                                                                     // 13705
  }                                                                                                                   // 13706
  this._priv = new BN(priv);                                                                                          // 13707
  return this;                                                                                                        // 13708
}                                                                                                                     // 13709
                                                                                                                      // 13710
var primeCache = {};                                                                                                  // 13711
function checkPrime(prime, generator) {                                                                               // 13712
  var gen = generator.toString('hex');                                                                                // 13713
  var hex = [gen, prime.toString(16)].join('_');                                                                      // 13714
  if (hex in primeCache) {                                                                                            // 13715
    return primeCache[hex];                                                                                           // 13716
  }                                                                                                                   // 13717
  var error = 0;                                                                                                      // 13718
                                                                                                                      // 13719
  if (prime.isEven() ||                                                                                               // 13720
    !primes.simpleSieve ||                                                                                            // 13721
    !primes.fermatTest(prime) ||                                                                                      // 13722
    !millerRabin.test(prime)) {                                                                                       // 13723
    //not a prime so +1                                                                                               // 13724
    error += 1;                                                                                                       // 13725
                                                                                                                      // 13726
    if (gen === '02' || gen === '05') {                                                                               // 13727
      // we'd be able to check the generator                                                                          // 13728
      // it would fail so +8                                                                                          // 13729
      error += 8;                                                                                                     // 13730
    } else {                                                                                                          // 13731
      //we wouldn't be able to test the generator                                                                     // 13732
      // so +4                                                                                                        // 13733
      error += 4;                                                                                                     // 13734
    }                                                                                                                 // 13735
    primeCache[hex] = error;                                                                                          // 13736
    return error;                                                                                                     // 13737
  }                                                                                                                   // 13738
  if (!millerRabin.test(prime.shrn(1))) {                                                                             // 13739
    //not a safe prime                                                                                                // 13740
    error += 2;                                                                                                       // 13741
  }                                                                                                                   // 13742
  var rem;                                                                                                            // 13743
  switch (gen) {                                                                                                      // 13744
    case '02':                                                                                                        // 13745
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {                                                                        // 13746
        // unsuidable generator                                                                                       // 13747
        error += 8;                                                                                                   // 13748
      }                                                                                                               // 13749
      break;                                                                                                          // 13750
    case '05':                                                                                                        // 13751
      rem = prime.mod(TEN);                                                                                           // 13752
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {                                                                         // 13753
        // prime mod 10 needs to equal 3 or 7                                                                         // 13754
        error += 8;                                                                                                   // 13755
      }                                                                                                               // 13756
      break;                                                                                                          // 13757
    default:                                                                                                          // 13758
      error += 4;                                                                                                     // 13759
  }                                                                                                                   // 13760
  primeCache[hex] = error;                                                                                            // 13761
  return error;                                                                                                       // 13762
}                                                                                                                     // 13763
                                                                                                                      // 13764
function defineError (self, error) {                                                                                  // 13765
  try {                                                                                                               // 13766
    Object.defineProperty(self, 'verifyError', {                                                                      // 13767
      enumerable: true,                                                                                               // 13768
      value: error,                                                                                                   // 13769
      writable: false                                                                                                 // 13770
    });                                                                                                               // 13771
  } catch(e) {                                                                                                        // 13772
    self.verifyError = error;                                                                                         // 13773
  }                                                                                                                   // 13774
}                                                                                                                     // 13775
function DH(prime, generator, malleable) {                                                                            // 13776
  this.setGenerator(generator);                                                                                       // 13777
  this.__prime = new BN(prime);                                                                                       // 13778
  this._prime = BN.mont(this.__prime);                                                                                // 13779
  this._primeLen = prime.length;                                                                                      // 13780
  this._pub = void 0;                                                                                                 // 13781
  this._priv = void 0;                                                                                                // 13782
                                                                                                                      // 13783
  if (malleable) {                                                                                                    // 13784
    this.setPublicKey = setPublicKey;                                                                                 // 13785
    this.setPrivateKey = setPrivateKey;                                                                               // 13786
    defineError(this, checkPrime(this.__prime, generator));                                                           // 13787
  } else {                                                                                                            // 13788
    defineError(this, 8);                                                                                             // 13789
  }                                                                                                                   // 13790
}                                                                                                                     // 13791
                                                                                                                      // 13792
DH.prototype.generateKeys = function () {                                                                             // 13793
  if (!this._priv) {                                                                                                  // 13794
    this._priv = new BN(randomBytes(this._primeLen));                                                                 // 13795
  }                                                                                                                   // 13796
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();                                              // 13797
  return this.getPublicKey();                                                                                         // 13798
};                                                                                                                    // 13799
                                                                                                                      // 13800
DH.prototype.computeSecret = function (other) {                                                                       // 13801
  other = new BN(other);                                                                                              // 13802
  other = other.toRed(this._prime);                                                                                   // 13803
  var secret = other.redPow(this._priv).fromRed();                                                                    // 13804
  var out = new Buffer(secret.toArray());                                                                             // 13805
  var prime = this.getPrime();                                                                                        // 13806
  if (out.length < prime.length) {                                                                                    // 13807
    var front = new Buffer(prime.length - out.length);                                                                // 13808
    front.fill(0);                                                                                                    // 13809
    out = Buffer.concat([front, out]);                                                                                // 13810
  }                                                                                                                   // 13811
  return out;                                                                                                         // 13812
};                                                                                                                    // 13813
                                                                                                                      // 13814
DH.prototype.getPublicKey = function getPublicKey(enc) {                                                              // 13815
  return formatReturnValue(this._pub, enc);                                                                           // 13816
};                                                                                                                    // 13817
                                                                                                                      // 13818
DH.prototype.getPrivateKey = function getPrivateKey(enc) {                                                            // 13819
  return formatReturnValue(this._priv, enc);                                                                          // 13820
};                                                                                                                    // 13821
                                                                                                                      // 13822
DH.prototype.getPrime = function (enc) {                                                                              // 13823
  return formatReturnValue(this.__prime, enc);                                                                        // 13824
};                                                                                                                    // 13825
                                                                                                                      // 13826
DH.prototype.getGenerator = function (enc) {                                                                          // 13827
  return formatReturnValue(this._gen, enc);                                                                           // 13828
};                                                                                                                    // 13829
                                                                                                                      // 13830
DH.prototype.setGenerator = function (gen, enc) {                                                                     // 13831
  enc = enc || 'utf8';                                                                                                // 13832
  if (!Buffer.isBuffer(gen)) {                                                                                        // 13833
    gen = new Buffer(gen, enc);                                                                                       // 13834
  }                                                                                                                   // 13835
  this._gen = new BN(gen);                                                                                            // 13836
  return this;                                                                                                        // 13837
};                                                                                                                    // 13838
                                                                                                                      // 13839
function formatReturnValue(bn, enc) {                                                                                 // 13840
  var buf = new Buffer(bn.toArray());                                                                                 // 13841
  if (!enc) {                                                                                                         // 13842
    return buf;                                                                                                       // 13843
  } else {                                                                                                            // 13844
    return buf.toString(enc);                                                                                         // 13845
  }                                                                                                                   // 13846
}                                                                                                                     // 13847
}).call(this,require("buffer").Buffer)                                                                                // 13848
                                                                                                                      // 13849
},{"./generatePrime":109,"bn.js":111,"buffer":2,"miller-rabin":112,"randombytes":142}],109:[function(require,module,exports){
var randomBytes = require('randombytes');                                                                             // 13851
module.exports = findPrime;                                                                                           // 13852
findPrime.simpleSieve = simpleSieve;                                                                                  // 13853
findPrime.fermatTest = fermatTest;                                                                                    // 13854
var BN = require('bn.js');                                                                                            // 13855
var TWENTYFOUR = new BN(24);                                                                                          // 13856
var MillerRabin = require('miller-rabin');                                                                            // 13857
var millerRabin = new MillerRabin();                                                                                  // 13858
var ONE = new BN(1);                                                                                                  // 13859
var TWO = new BN(2);                                                                                                  // 13860
var FIVE = new BN(5);                                                                                                 // 13861
var SIXTEEN = new BN(16);                                                                                             // 13862
var EIGHT = new BN(8);                                                                                                // 13863
var TEN = new BN(10);                                                                                                 // 13864
var THREE = new BN(3);                                                                                                // 13865
var SEVEN = new BN(7);                                                                                                // 13866
var ELEVEN = new BN(11);                                                                                              // 13867
var FOUR = new BN(4);                                                                                                 // 13868
var TWELVE = new BN(12);                                                                                              // 13869
var primes = null;                                                                                                    // 13870
                                                                                                                      // 13871
function _getPrimes() {                                                                                               // 13872
  if (primes !== null)                                                                                                // 13873
    return primes;                                                                                                    // 13874
                                                                                                                      // 13875
  var limit = 0x100000;                                                                                               // 13876
  var res = [];                                                                                                       // 13877
  res[0] = 2;                                                                                                         // 13878
  for (var i = 1, k = 3; k < limit; k += 2) {                                                                         // 13879
    var sqrt = Math.ceil(Math.sqrt(k));                                                                               // 13880
    for (var j = 0; j < i && res[j] <= sqrt; j++)                                                                     // 13881
      if (k % res[j] === 0)                                                                                           // 13882
        break;                                                                                                        // 13883
                                                                                                                      // 13884
    if (i !== j && res[j] <= sqrt)                                                                                    // 13885
      continue;                                                                                                       // 13886
                                                                                                                      // 13887
    res[i++] = k;                                                                                                     // 13888
  }                                                                                                                   // 13889
  primes = res;                                                                                                       // 13890
  return res;                                                                                                         // 13891
}                                                                                                                     // 13892
                                                                                                                      // 13893
function simpleSieve(p) {                                                                                             // 13894
  var primes = _getPrimes();                                                                                          // 13895
                                                                                                                      // 13896
  for (var i = 0; i < primes.length; i++)                                                                             // 13897
    if (p.modn(primes[i]) === 0) {                                                                                    // 13898
      if (p.cmpn(primes[i]) === 0) {                                                                                  // 13899
        return true;                                                                                                  // 13900
      } else {                                                                                                        // 13901
        return false;                                                                                                 // 13902
      }                                                                                                               // 13903
    }                                                                                                                 // 13904
                                                                                                                      // 13905
  return true;                                                                                                        // 13906
}                                                                                                                     // 13907
                                                                                                                      // 13908
function fermatTest(p) {                                                                                              // 13909
  var red = BN.mont(p);                                                                                               // 13910
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;                                                    // 13911
}                                                                                                                     // 13912
                                                                                                                      // 13913
function findPrime(bits, gen) {                                                                                       // 13914
  if (bits < 16) {                                                                                                    // 13915
    // this is what openssl does                                                                                      // 13916
    if (gen === 2 || gen === 5) {                                                                                     // 13917
      return new BN([0x8c, 0x7b]);                                                                                    // 13918
    } else {                                                                                                          // 13919
      return new BN([0x8c, 0x27]);                                                                                    // 13920
    }                                                                                                                 // 13921
  }                                                                                                                   // 13922
  gen = new BN(gen);                                                                                                  // 13923
  var runs, comp;                                                                                                     // 13924
  function generateRandom(bits) {                                                                                     // 13925
    runs = -1;                                                                                                        // 13926
    var out = new BN(randomBytes(Math.ceil(bits / 8)));                                                               // 13927
    while (out.bitLength() > bits) {                                                                                  // 13928
      out.ishrn(1);                                                                                                   // 13929
    }                                                                                                                 // 13930
    if (out.isEven()) {                                                                                               // 13931
      out.iadd(ONE);                                                                                                  // 13932
    }                                                                                                                 // 13933
    if (!out.testn(1)) {                                                                                              // 13934
      out.iadd(TWO);                                                                                                  // 13935
    }                                                                                                                 // 13936
    if (!gen.cmp(TWO)) {                                                                                              // 13937
      while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {                                                                       // 13938
        out.iadd(FOUR);                                                                                               // 13939
      }                                                                                                               // 13940
      comp = {                                                                                                        // 13941
        major: [TWENTYFOUR],                                                                                          // 13942
        minor: [TWELVE]                                                                                               // 13943
      };                                                                                                              // 13944
    } else if (!gen.cmp(FIVE)) {                                                                                      // 13945
      rem = out.mod(TEN);                                                                                             // 13946
      while (rem.cmp(THREE)) {                                                                                        // 13947
        out.iadd(FOUR);                                                                                               // 13948
        rem = out.mod(TEN);                                                                                           // 13949
      }                                                                                                               // 13950
      comp = {                                                                                                        // 13951
        major: [FOUR, SIXTEEN],                                                                                       // 13952
        minor: [TWO, EIGHT]                                                                                           // 13953
      };                                                                                                              // 13954
    } else {                                                                                                          // 13955
      comp = {                                                                                                        // 13956
        major: [FOUR],                                                                                                // 13957
        minor: [TWO]                                                                                                  // 13958
      };                                                                                                              // 13959
    }                                                                                                                 // 13960
    return out;                                                                                                       // 13961
  }                                                                                                                   // 13962
  var num = generateRandom(bits);                                                                                     // 13963
                                                                                                                      // 13964
  var n2 = num.shrn(1);                                                                                               // 13965
                                                                                                                      // 13966
  while (true) {                                                                                                      // 13967
    while (num.bitLength() > bits) {                                                                                  // 13968
      num = generateRandom(bits);                                                                                     // 13969
      n2 = num.shrn(1);                                                                                               // 13970
    }                                                                                                                 // 13971
    runs++;                                                                                                           // 13972
    if (simpleSieve(n2) &&  simpleSieve(num) &&                                                                       // 13973
      fermatTest(n2) &&  fermatTest(num) &&                                                                           // 13974
      millerRabin.test(n2) && millerRabin.test(num)) {                                                                // 13975
      return num;                                                                                                     // 13976
    }                                                                                                                 // 13977
    num.iadd(comp.major[runs%comp.major.length]);                                                                     // 13978
    n2.iadd(comp.minor[runs%comp.minor.length]);                                                                      // 13979
  }                                                                                                                   // 13980
                                                                                                                      // 13981
}                                                                                                                     // 13982
},{"bn.js":111,"miller-rabin":112,"randombytes":142}],110:[function(require,module,exports){                          // 13983
module.exports={                                                                                                      // 13984
    "modp1": {                                                                                                        // 13985
        "gen": "02",                                                                                                  // 13986
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },                                                                                                                // 13988
    "modp2": {                                                                                                        // 13989
        "gen": "02",                                                                                                  // 13990
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },                                                                                                                // 13992
    "modp5": {                                                                                                        // 13993
        "gen": "02",                                                                                                  // 13994
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },                                                                                                                // 13996
    "modp14": {                                                                                                       // 13997
        "gen": "02",                                                                                                  // 13998
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },                                                                                                                // 14000
    "modp15": {                                                                                                       // 14001
        "gen": "02",                                                                                                  // 14002
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },                                                                                                                // 14004
    "modp16": {                                                                                                       // 14005
        "gen": "02",                                                                                                  // 14006
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },                                                                                                                // 14008
    "modp17": {                                                                                                       // 14009
        "gen": "02",                                                                                                  // 14010
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },                                                                                                                // 14012
    "modp18": {                                                                                                       // 14013
        "gen": "02",                                                                                                  // 14014
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }                                                                                                                 // 14016
}                                                                                                                     // 14017
},{}],111:[function(require,module,exports){                                                                          // 14018
arguments[4][28][0].apply(exports,arguments)                                                                          // 14019
},{"dup":28}],112:[function(require,module,exports){                                                                  // 14020
var bn = require('bn.js');                                                                                            // 14021
var brorand = require('brorand');                                                                                     // 14022
                                                                                                                      // 14023
function MillerRabin(rand) {                                                                                          // 14024
  this.rand = rand || new brorand.Rand();                                                                             // 14025
}                                                                                                                     // 14026
module.exports = MillerRabin;                                                                                         // 14027
                                                                                                                      // 14028
MillerRabin.create = function create(rand) {                                                                          // 14029
  return new MillerRabin(rand);                                                                                       // 14030
};                                                                                                                    // 14031
                                                                                                                      // 14032
MillerRabin.prototype._rand = function _rand(n) {                                                                     // 14033
  var len = n.bitLength();                                                                                            // 14034
  var buf = this.rand.generate(Math.ceil(len / 8));                                                                   // 14035
                                                                                                                      // 14036
  // Set low bits                                                                                                     // 14037
  buf[0] |= 3;                                                                                                        // 14038
                                                                                                                      // 14039
  // Mask high bits                                                                                                   // 14040
  var mask = len & 0x7;                                                                                               // 14041
  if (mask !== 0)                                                                                                     // 14042
    buf[buf.length - 1] >>= 7 - mask;                                                                                 // 14043
                                                                                                                      // 14044
  return new bn(buf);                                                                                                 // 14045
}                                                                                                                     // 14046
                                                                                                                      // 14047
MillerRabin.prototype.test = function test(n, k, cb) {                                                                // 14048
  var len = n.bitLength();                                                                                            // 14049
  var red = bn.mont(n);                                                                                               // 14050
  var rone = new bn(1).toRed(red);                                                                                    // 14051
                                                                                                                      // 14052
  if (!k)                                                                                                             // 14053
    k = Math.max(1, (len / 48) | 0);                                                                                  // 14054
                                                                                                                      // 14055
  // Find d and s, (n - 1) = (2 ^ s) * d;                                                                             // 14056
  var n1 = n.subn(1);                                                                                                 // 14057
  var n2 = n1.subn(1);                                                                                                // 14058
  for (var s = 0; !n1.testn(s); s++) {}                                                                               // 14059
  var d = n.shrn(s);                                                                                                  // 14060
                                                                                                                      // 14061
  var rn1 = n1.toRed(red);                                                                                            // 14062
                                                                                                                      // 14063
  var prime = true;                                                                                                   // 14064
  for (; k > 0; k--) {                                                                                                // 14065
    var a = this._rand(n2);                                                                                           // 14066
    if (cb)                                                                                                           // 14067
      cb(a);                                                                                                          // 14068
                                                                                                                      // 14069
    var x = a.toRed(red).redPow(d);                                                                                   // 14070
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)                                                                        // 14071
      continue;                                                                                                       // 14072
                                                                                                                      // 14073
    for (var i = 1; i < s; i++) {                                                                                     // 14074
      x = x.redSqr();                                                                                                 // 14075
                                                                                                                      // 14076
      if (x.cmp(rone) === 0)                                                                                          // 14077
        return false;                                                                                                 // 14078
      if (x.cmp(rn1) === 0)                                                                                           // 14079
        break;                                                                                                        // 14080
    }                                                                                                                 // 14081
                                                                                                                      // 14082
    if (i === s)                                                                                                      // 14083
      return false;                                                                                                   // 14084
  }                                                                                                                   // 14085
                                                                                                                      // 14086
  return prime;                                                                                                       // 14087
};                                                                                                                    // 14088
                                                                                                                      // 14089
MillerRabin.prototype.getDivisor = function getDivisor(n, k) {                                                        // 14090
  var len = n.bitLength();                                                                                            // 14091
  var red = bn.mont(n);                                                                                               // 14092
  var rone = new bn(1).toRed(red);                                                                                    // 14093
                                                                                                                      // 14094
  if (!k)                                                                                                             // 14095
    k = Math.max(1, (len / 48) | 0);                                                                                  // 14096
                                                                                                                      // 14097
  // Find d and s, (n - 1) = (2 ^ s) * d;                                                                             // 14098
  var n1 = n.subn(1);                                                                                                 // 14099
  var n2 = n1.subn(1);                                                                                                // 14100
  for (var s = 0; !n1.testn(s); s++) {}                                                                               // 14101
  var d = n.shrn(s);                                                                                                  // 14102
                                                                                                                      // 14103
  var rn1 = n1.toRed(red);                                                                                            // 14104
                                                                                                                      // 14105
  var prime = true;                                                                                                   // 14106
  for (; k > 0; k--) {                                                                                                // 14107
    var a = this._rand(n2);                                                                                           // 14108
                                                                                                                      // 14109
    var g = n.gcd(a);                                                                                                 // 14110
    if (g.cmpn(1) !== 0)                                                                                              // 14111
      return g;                                                                                                       // 14112
                                                                                                                      // 14113
    var x = a.toRed(red).redPow(d);                                                                                   // 14114
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)                                                                        // 14115
      continue;                                                                                                       // 14116
                                                                                                                      // 14117
    for (var i = 1; i < s; i++) {                                                                                     // 14118
      x = x.redSqr();                                                                                                 // 14119
                                                                                                                      // 14120
      if (x.cmp(rone) === 0)                                                                                          // 14121
        return x.fromRed().subn(1).gcd(n);                                                                            // 14122
      if (x.cmp(rn1) === 0)                                                                                           // 14123
        break;                                                                                                        // 14124
    }                                                                                                                 // 14125
                                                                                                                      // 14126
    if (i === s) {                                                                                                    // 14127
      x = x.redSqr();                                                                                                 // 14128
      return x.fromRed().subn(1).gcd(n);                                                                              // 14129
    }                                                                                                                 // 14130
  }                                                                                                                   // 14131
                                                                                                                      // 14132
  return prime;                                                                                                       // 14133
};                                                                                                                    // 14134
                                                                                                                      // 14135
},{"bn.js":111,"brorand":113}],113:[function(require,module,exports){                                                 // 14136
arguments[4][42][0].apply(exports,arguments)                                                                          // 14137
},{"dup":42}],114:[function(require,module,exports){                                                                  // 14138
(function (Buffer){                                                                                                   // 14139
var createHmac = require('create-hmac')                                                                               // 14140
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs                                                                // 14141
                                                                                                                      // 14142
exports.pbkdf2 = pbkdf2                                                                                               // 14143
function pbkdf2 (password, salt, iterations, keylen, digest, callback) {                                              // 14144
  if (typeof digest === 'function') {                                                                                 // 14145
    callback = digest                                                                                                 // 14146
    digest = undefined                                                                                                // 14147
  }                                                                                                                   // 14148
                                                                                                                      // 14149
  if (typeof callback !== 'function') {                                                                               // 14150
    throw new Error('No callback provided to pbkdf2')                                                                 // 14151
  }                                                                                                                   // 14152
                                                                                                                      // 14153
  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)                                                 // 14154
  setTimeout(function () {                                                                                            // 14155
    callback(undefined, result)                                                                                       // 14156
  })                                                                                                                  // 14157
}                                                                                                                     // 14158
                                                                                                                      // 14159
exports.pbkdf2Sync = pbkdf2Sync                                                                                       // 14160
function pbkdf2Sync (password, salt, iterations, keylen, digest) {                                                    // 14161
  if (typeof iterations !== 'number') {                                                                               // 14162
    throw new TypeError('Iterations not a number')                                                                    // 14163
  }                                                                                                                   // 14164
                                                                                                                      // 14165
  if (iterations < 0) {                                                                                               // 14166
    throw new TypeError('Bad iterations')                                                                             // 14167
  }                                                                                                                   // 14168
                                                                                                                      // 14169
  if (typeof keylen !== 'number') {                                                                                   // 14170
    throw new TypeError('Key length not a number')                                                                    // 14171
  }                                                                                                                   // 14172
                                                                                                                      // 14173
  if (keylen < 0 || keylen > MAX_ALLOC) {                                                                             // 14174
    throw new TypeError('Bad key length')                                                                             // 14175
  }                                                                                                                   // 14176
                                                                                                                      // 14177
  digest = digest || 'sha1'                                                                                           // 14178
                                                                                                                      // 14179
  if (!Buffer.isBuffer(password)) password = new Buffer(password, 'binary')                                           // 14180
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, 'binary')                                                       // 14181
                                                                                                                      // 14182
  var hLen                                                                                                            // 14183
  var l = 1                                                                                                           // 14184
  var DK = new Buffer(keylen)                                                                                         // 14185
  var block1 = new Buffer(salt.length + 4)                                                                            // 14186
  salt.copy(block1, 0, 0, salt.length)                                                                                // 14187
                                                                                                                      // 14188
  var r                                                                                                               // 14189
  var T                                                                                                               // 14190
                                                                                                                      // 14191
  for (var i = 1; i <= l; i++) {                                                                                      // 14192
    block1.writeUInt32BE(i, salt.length)                                                                              // 14193
    var U = createHmac(digest, password).update(block1).digest()                                                      // 14194
                                                                                                                      // 14195
    if (!hLen) {                                                                                                      // 14196
      hLen = U.length                                                                                                 // 14197
      T = new Buffer(hLen)                                                                                            // 14198
      l = Math.ceil(keylen / hLen)                                                                                    // 14199
      r = keylen - (l - 1) * hLen                                                                                     // 14200
    }                                                                                                                 // 14201
                                                                                                                      // 14202
    U.copy(T, 0, 0, hLen)                                                                                             // 14203
                                                                                                                      // 14204
    for (var j = 1; j < iterations; j++) {                                                                            // 14205
      U = createHmac(digest, password).update(U).digest()                                                             // 14206
                                                                                                                      // 14207
      for (var k = 0; k < hLen; k++) {                                                                                // 14208
        T[k] ^= U[k]                                                                                                  // 14209
      }                                                                                                               // 14210
    }                                                                                                                 // 14211
                                                                                                                      // 14212
    var destPos = (i - 1) * hLen                                                                                      // 14213
    var len = (i === l ? r : hLen)                                                                                    // 14214
    T.copy(DK, destPos, 0, len)                                                                                       // 14215
  }                                                                                                                   // 14216
                                                                                                                      // 14217
  return DK                                                                                                           // 14218
}                                                                                                                     // 14219
                                                                                                                      // 14220
}).call(this,require("buffer").Buffer)                                                                                // 14221
                                                                                                                      // 14222
},{"buffer":2,"create-hmac":106}],115:[function(require,module,exports){                                              // 14223
exports.publicEncrypt = require('./publicEncrypt');                                                                   // 14224
exports.privateDecrypt = require('./privateDecrypt');                                                                 // 14225
                                                                                                                      // 14226
exports.privateEncrypt = function privateEncrypt(key, buf) {                                                          // 14227
  return exports.publicEncrypt(key, buf, true);                                                                       // 14228
};                                                                                                                    // 14229
                                                                                                                      // 14230
exports.publicDecrypt = function publicDecrypt(key, buf) {                                                            // 14231
  return exports.privateDecrypt(key, buf, true);                                                                      // 14232
};                                                                                                                    // 14233
},{"./privateDecrypt":138,"./publicEncrypt":139}],116:[function(require,module,exports){                              // 14234
(function (Buffer){                                                                                                   // 14235
var createHash = require('create-hash');                                                                              // 14236
module.exports = function (seed, len) {                                                                               // 14237
  var t = new Buffer('');                                                                                             // 14238
  var  i = 0, c;                                                                                                      // 14239
  while (t.length < len) {                                                                                            // 14240
    c = i2ops(i++);                                                                                                   // 14241
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);                                       // 14242
  }                                                                                                                   // 14243
  return t.slice(0, len);                                                                                             // 14244
};                                                                                                                    // 14245
                                                                                                                      // 14246
function i2ops(c) {                                                                                                   // 14247
  var out = new Buffer(4);                                                                                            // 14248
  out.writeUInt32BE(c,0);                                                                                             // 14249
  return out;                                                                                                         // 14250
}                                                                                                                     // 14251
}).call(this,require("buffer").Buffer)                                                                                // 14252
                                                                                                                      // 14253
},{"buffer":2,"create-hash":94}],117:[function(require,module,exports){                                               // 14254
arguments[4][28][0].apply(exports,arguments)                                                                          // 14255
},{"dup":28}],118:[function(require,module,exports){                                                                  // 14256
(function (Buffer){                                                                                                   // 14257
var bn = require('bn.js');                                                                                            // 14258
var randomBytes = require('randombytes');                                                                             // 14259
module.exports = crt;                                                                                                 // 14260
function blind(priv) {                                                                                                // 14261
  var r = getr(priv);                                                                                                 // 14262
  var blinder = r.toRed(bn.mont(priv.modulus))                                                                        // 14263
  .redPow(new bn(priv.publicExponent)).fromRed();                                                                     // 14264
  return {                                                                                                            // 14265
    blinder: blinder,                                                                                                 // 14266
    unblinder:r.invm(priv.modulus)                                                                                    // 14267
  };                                                                                                                  // 14268
}                                                                                                                     // 14269
function crt(msg, priv) {                                                                                             // 14270
  var blinds = blind(priv);                                                                                           // 14271
  var len = priv.modulus.byteLength();                                                                                // 14272
  var mod = bn.mont(priv.modulus);                                                                                    // 14273
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);                                                    // 14274
  var c1 = blinded.toRed(bn.mont(priv.prime1));                                                                       // 14275
  var c2 = blinded.toRed(bn.mont(priv.prime2));                                                                       // 14276
  var qinv = priv.coefficient;                                                                                        // 14277
  var p = priv.prime1;                                                                                                // 14278
  var q = priv.prime2;                                                                                                // 14279
  var m1 = c1.redPow(priv.exponent1);                                                                                 // 14280
  var m2 = c2.redPow(priv.exponent2);                                                                                 // 14281
  m1 = m1.fromRed();                                                                                                  // 14282
  m2 = m2.fromRed();                                                                                                  // 14283
  var h = m1.isub(m2).imul(qinv).mod(p);                                                                              // 14284
  h.imul(q);                                                                                                          // 14285
  m2.iadd(h);                                                                                                         // 14286
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());                                        // 14287
  if (out.length < len) {                                                                                             // 14288
    var prefix = new Buffer(len - out.length);                                                                        // 14289
    prefix.fill(0);                                                                                                   // 14290
    out = Buffer.concat([prefix, out], len);                                                                          // 14291
  }                                                                                                                   // 14292
  return out;                                                                                                         // 14293
}                                                                                                                     // 14294
crt.getr = getr;                                                                                                      // 14295
function getr(priv) {                                                                                                 // 14296
  var len = priv.modulus.byteLength();                                                                                // 14297
  var r = new bn(randomBytes(len));                                                                                   // 14298
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {                                   // 14299
    r = new bn(randomBytes(len));                                                                                     // 14300
  }                                                                                                                   // 14301
  return r;                                                                                                           // 14302
}                                                                                                                     // 14303
}).call(this,require("buffer").Buffer)                                                                                // 14304
                                                                                                                      // 14305
},{"bn.js":117,"buffer":2,"randombytes":142}],119:[function(require,module,exports){                                  // 14306
(function (Buffer){                                                                                                   // 14307
var createHash = require('create-hash');                                                                              // 14308
module.exports = function evp(password, salt, keyLen) {                                                               // 14309
  keyLen = keyLen/8;                                                                                                  // 14310
  var ki = 0;                                                                                                         // 14311
  var ii = 0;                                                                                                         // 14312
  var key = new Buffer(keyLen);                                                                                       // 14313
  var addmd = 0;                                                                                                      // 14314
  var md, md_buf;                                                                                                     // 14315
  var i;                                                                                                              // 14316
  while (true) {                                                                                                      // 14317
    md = createHash('md5');                                                                                           // 14318
    if(addmd++ > 0) {                                                                                                 // 14319
       md.update(md_buf);                                                                                             // 14320
    }                                                                                                                 // 14321
    md.update(password);                                                                                              // 14322
    md.update(salt);                                                                                                  // 14323
    md_buf = md.digest();                                                                                             // 14324
    i = 0;                                                                                                            // 14325
    if(keyLen > 0) {                                                                                                  // 14326
      while(true) {                                                                                                   // 14327
        if(keyLen === 0) {                                                                                            // 14328
          break;                                                                                                      // 14329
        }                                                                                                             // 14330
        if(i === md_buf.length) {                                                                                     // 14331
          break;                                                                                                      // 14332
        }                                                                                                             // 14333
        key[ki++] = md_buf[i++];                                                                                      // 14334
        keyLen--;                                                                                                     // 14335
       }                                                                                                              // 14336
    }                                                                                                                 // 14337
   if(keyLen === 0) {                                                                                                 // 14338
      break;                                                                                                          // 14339
    }                                                                                                                 // 14340
  }                                                                                                                   // 14341
  for(i=0;i<md_buf.length;i++) {                                                                                      // 14342
    md_buf[i] = 0;                                                                                                    // 14343
  }                                                                                                                   // 14344
  return key;                                                                                                         // 14345
};                                                                                                                    // 14346
}).call(this,require("buffer").Buffer)                                                                                // 14347
                                                                                                                      // 14348
},{"buffer":2,"create-hash":94}],120:[function(require,module,exports){                                               // 14349
arguments[4][51][0].apply(exports,arguments)                                                                          // 14350
},{"dup":51}],121:[function(require,module,exports){                                                                  // 14351
arguments[4][52][0].apply(exports,arguments)                                                                          // 14352
},{"asn1.js":124,"dup":52}],122:[function(require,module,exports){                                                    // 14353
(function (Buffer){                                                                                                   // 14354
// adapted from https://github.com/apatil/pemstrip                                                                    // 14355
var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
var startRegex =/^-----BEGIN (.*) KEY-----\n/m;                                                                       // 14357
var fullRegex = /^-----BEGIN (.*) KEY-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1 KEY-----$/m;                     // 14358
var evp = require('./EVP_BytesToKey');                                                                                // 14359
var ciphers = require('browserify-aes');                                                                              // 14360
module.exports = function (okey, password) {                                                                          // 14361
  var key = okey.toString();                                                                                          // 14362
  var match = key.match(findProc);                                                                                    // 14363
  var decrypted;                                                                                                      // 14364
  if (!match) {                                                                                                       // 14365
    var match2 = key.match(fullRegex);                                                                                // 14366
    decrypted = new Buffer(match2[2].replace(/\n\r?/g, ''), 'base64');                                                // 14367
  } else {                                                                                                            // 14368
    var suite = 'aes' + match[1];                                                                                     // 14369
    var iv = new Buffer(match[2], 'hex');                                                                             // 14370
    var cipherText = new Buffer(match[3].replace(/\n\r?/g, ''), 'base64');                                            // 14371
    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));                                                 // 14372
    var out = [];                                                                                                     // 14373
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);                                                      // 14374
    out.push(cipher.update(cipherText));                                                                              // 14375
    out.push(cipher.final());                                                                                         // 14376
    decrypted = Buffer.concat(out);                                                                                   // 14377
  }                                                                                                                   // 14378
  var tag = key.match(startRegex)[1] + ' KEY';                                                                        // 14379
  return {                                                                                                            // 14380
    tag: tag,                                                                                                         // 14381
    data: decrypted                                                                                                   // 14382
  };                                                                                                                  // 14383
};                                                                                                                    // 14384
// http://stackoverflow.com/a/7033705                                                                                 // 14385
function wrap(str) {                                                                                                  // 14386
  var chunks = [];                                                                                                    // 14387
  while (str) {                                                                                                       // 14388
    if (str.length < 64) {                                                                                            // 14389
      chunks.push(str);                                                                                               // 14390
      break;                                                                                                          // 14391
    }                                                                                                                 // 14392
    else {                                                                                                            // 14393
      chunks.push(str.slice(0, 64));                                                                                  // 14394
      str = str.slice(64);                                                                                            // 14395
    }                                                                                                                 // 14396
  }                                                                                                                   // 14397
  return chunks.join("\n");                                                                                           // 14398
}                                                                                                                     // 14399
}).call(this,require("buffer").Buffer)                                                                                // 14400
                                                                                                                      // 14401
},{"./EVP_BytesToKey":119,"browserify-aes":10,"buffer":2}],123:[function(require,module,exports){                     // 14402
(function (Buffer){                                                                                                   // 14403
var asn1 = require('./asn1');                                                                                         // 14404
var aesid = require('./aesid.json');                                                                                  // 14405
var fixProc = require('./fixProc');                                                                                   // 14406
var ciphers = require('browserify-aes');                                                                              // 14407
var compat = require('pbkdf2-compat');                                                                                // 14408
module.exports = parseKeys;                                                                                           // 14409
                                                                                                                      // 14410
function parseKeys(buffer) {                                                                                          // 14411
  var password;                                                                                                       // 14412
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {                                                       // 14413
    password = buffer.passphrase;                                                                                     // 14414
    buffer = buffer.key;                                                                                              // 14415
  }                                                                                                                   // 14416
  if (typeof buffer === 'string') {                                                                                   // 14417
    buffer = new Buffer(buffer);                                                                                      // 14418
  }                                                                                                                   // 14419
                                                                                                                      // 14420
  var stripped = fixProc(buffer, password);                                                                           // 14421
                                                                                                                      // 14422
  var type = stripped.tag;                                                                                            // 14423
  var data = stripped.data;                                                                                           // 14424
  var subtype,ndata;                                                                                                  // 14425
  switch (type) {                                                                                                     // 14426
    case 'PUBLIC KEY':                                                                                                // 14427
      ndata = asn1.PublicKey.decode(data, 'der');                                                                     // 14428
      subtype = ndata.algorithm.algorithm.join('.');                                                                  // 14429
      switch(subtype) {                                                                                               // 14430
        case '1.2.840.113549.1.1.1':                                                                                  // 14431
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');                                        // 14432
        case '1.2.840.10045.2.1':                                                                                     // 14433
        ndata.subjectPrivateKey = ndata.subjectPublicKey;                                                             // 14434
          return {                                                                                                    // 14435
            type: 'ec',                                                                                               // 14436
            data:  ndata                                                                                              // 14437
          };                                                                                                          // 14438
        case '1.2.840.10040.4.1':                                                                                     // 14439
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');                  // 14440
          return {                                                                                                    // 14441
            type: 'dsa',                                                                                              // 14442
            data: ndata.algorithm.params                                                                              // 14443
          };                                                                                                          // 14444
        default: throw new Error('unknown key id ' +  subtype);                                                       // 14445
      }                                                                                                               // 14446
      throw new Error('unknown key type ' +  type);                                                                   // 14447
    case 'ENCRYPTED PRIVATE KEY':                                                                                     // 14448
      data = asn1.EncryptedPrivateKey.decode(data, 'der');                                                            // 14449
      data = decrypt(data, password);                                                                                 // 14450
      //falling through                                                                                               // 14451
    case 'PRIVATE KEY':                                                                                               // 14452
      ndata = asn1.PrivateKey.decode(data, 'der');                                                                    // 14453
      subtype = ndata.algorithm.algorithm.join('.');                                                                  // 14454
      switch(subtype) {                                                                                               // 14455
        case '1.2.840.113549.1.1.1':                                                                                  // 14456
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');                                           // 14457
        case '1.2.840.10045.2.1':                                                                                     // 14458
          return {                                                                                                    // 14459
            curve: ndata.algorithm.curve,                                                                             // 14460
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey                           // 14461
          };                                                                                                          // 14462
        case '1.2.840.10040.4.1':                                                                                     // 14463
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');                     // 14464
          return {                                                                                                    // 14465
            type: 'dsa',                                                                                              // 14466
            params: ndata.algorithm.params                                                                            // 14467
          };                                                                                                          // 14468
        default: throw new Error('unknown key id ' +  subtype);                                                       // 14469
      }                                                                                                               // 14470
      throw new Error('unknown key type ' +  type);                                                                   // 14471
    case 'RSA PUBLIC KEY':                                                                                            // 14472
      return asn1.RSAPublicKey.decode(data, 'der');                                                                   // 14473
    case 'RSA PRIVATE KEY':                                                                                           // 14474
      return asn1.RSAPrivateKey.decode(data, 'der');                                                                  // 14475
    case 'DSA PRIVATE KEY':                                                                                           // 14476
      return {                                                                                                        // 14477
        type: 'dsa',                                                                                                  // 14478
        params: asn1.DSAPrivateKey.decode(data, 'der')                                                                // 14479
      };                                                                                                              // 14480
    case 'EC PRIVATE KEY':                                                                                            // 14481
      data = asn1.ECPrivateKey.decode(data, 'der');                                                                   // 14482
      return {                                                                                                        // 14483
        curve: data.parameters.value,                                                                                 // 14484
        privateKey: data.privateKey                                                                                   // 14485
      };                                                                                                              // 14486
    default: throw new Error('unknown key type ' +  type);                                                            // 14487
  }                                                                                                                   // 14488
}                                                                                                                     // 14489
parseKeys.signature = asn1.signature;                                                                                 // 14490
function decrypt(data, password) {                                                                                    // 14491
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;                                                               // 14492
  var iters = data.algorithm.decrypt.kde.kdeparams.iters;                                                             // 14493
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];                                                     // 14494
  var iv = data.algorithm.decrypt.cipher.iv;                                                                          // 14495
  var cipherText = data.subjectPrivateKey;                                                                            // 14496
  var keylen = parseInt(algo.split('-')[1], 10)/8;                                                                    // 14497
  var key = compat.pbkdf2Sync(password, salt, iters, keylen);                                                         // 14498
  var cipher = ciphers.createDecipheriv(algo, key, iv);                                                               // 14499
  var out = [];                                                                                                       // 14500
  out.push(cipher.update(cipherText));                                                                                // 14501
  out.push(cipher.final());                                                                                           // 14502
  return Buffer.concat(out);                                                                                          // 14503
}                                                                                                                     // 14504
}).call(this,require("buffer").Buffer)                                                                                // 14505
                                                                                                                      // 14506
},{"./aesid.json":120,"./asn1":121,"./fixProc":122,"browserify-aes":10,"buffer":2,"pbkdf2-compat":137}],124:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)                                                                          // 14508
},{"./asn1/api":125,"./asn1/base":127,"./asn1/constants":131,"./asn1/decoders":133,"./asn1/encoders":135,"bn.js":117,"dup":55}],125:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)                                                                          // 14510
},{"../asn1":124,"dup":56,"inherits":144,"vm":160}],126:[function(require,module,exports){                            // 14511
arguments[4][57][0].apply(exports,arguments)                                                                          // 14512
},{"../base":127,"buffer":2,"dup":57,"inherits":144}],127:[function(require,module,exports){                          // 14513
arguments[4][58][0].apply(exports,arguments)                                                                          // 14514
},{"./buffer":126,"./node":128,"./reporter":129,"dup":58}],128:[function(require,module,exports){                     // 14515
arguments[4][59][0].apply(exports,arguments)                                                                          // 14516
},{"../base":127,"dup":59,"minimalistic-assert":136}],129:[function(require,module,exports){                          // 14517
arguments[4][60][0].apply(exports,arguments)                                                                          // 14518
},{"dup":60,"inherits":144}],130:[function(require,module,exports){                                                   // 14519
arguments[4][61][0].apply(exports,arguments)                                                                          // 14520
},{"../constants":131,"dup":61}],131:[function(require,module,exports){                                               // 14521
arguments[4][62][0].apply(exports,arguments)                                                                          // 14522
},{"./der":130,"dup":62}],132:[function(require,module,exports){                                                      // 14523
arguments[4][63][0].apply(exports,arguments)                                                                          // 14524
},{"../../asn1":124,"dup":63,"inherits":144}],133:[function(require,module,exports){                                  // 14525
arguments[4][64][0].apply(exports,arguments)                                                                          // 14526
},{"./der":132,"dup":64}],134:[function(require,module,exports){                                                      // 14527
arguments[4][65][0].apply(exports,arguments)                                                                          // 14528
},{"../../asn1":124,"buffer":2,"dup":65,"inherits":144}],135:[function(require,module,exports){                       // 14529
arguments[4][66][0].apply(exports,arguments)                                                                          // 14530
},{"./der":134,"dup":66}],136:[function(require,module,exports){                                                      // 14531
arguments[4][67][0].apply(exports,arguments)                                                                          // 14532
},{"dup":67}],137:[function(require,module,exports){                                                                  // 14533
(function (Buffer){                                                                                                   // 14534
var createHmac = require('create-hmac')                                                                               // 14535
                                                                                                                      // 14536
exports.pbkdf2 = pbkdf2                                                                                               // 14537
function pbkdf2 (password, salt, iterations, keylen, digest, callback) {                                              // 14538
  if (typeof digest === 'function') {                                                                                 // 14539
    callback = digest                                                                                                 // 14540
    digest = undefined                                                                                                // 14541
  }                                                                                                                   // 14542
                                                                                                                      // 14543
  if (typeof callback !== 'function') {                                                                               // 14544
    throw new Error('No callback provided to pbkdf2')                                                                 // 14545
  }                                                                                                                   // 14546
                                                                                                                      // 14547
  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)                                                 // 14548
  setTimeout(function () {                                                                                            // 14549
    callback(undefined, result)                                                                                       // 14550
  })                                                                                                                  // 14551
}                                                                                                                     // 14552
                                                                                                                      // 14553
exports.pbkdf2Sync = pbkdf2Sync                                                                                       // 14554
function pbkdf2Sync (password, salt, iterations, keylen, digest) {                                                    // 14555
  if (typeof iterations !== 'number')                                                                                 // 14556
    throw new TypeError('Iterations not a number')                                                                    // 14557
                                                                                                                      // 14558
  if (iterations < 0)                                                                                                 // 14559
    throw new TypeError('Bad iterations')                                                                             // 14560
                                                                                                                      // 14561
  if (typeof keylen !== 'number')                                                                                     // 14562
    throw new TypeError('Key length not a number')                                                                    // 14563
                                                                                                                      // 14564
  if (keylen < 0)                                                                                                     // 14565
    throw new TypeError('Bad key length')                                                                             // 14566
                                                                                                                      // 14567
  digest = digest || 'sha1'                                                                                           // 14568
                                                                                                                      // 14569
  if (!Buffer.isBuffer(password)) password = new Buffer(password)                                                     // 14570
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)                                                                 // 14571
                                                                                                                      // 14572
  var hLen                                                                                                            // 14573
  var l = 1                                                                                                           // 14574
  var DK = new Buffer(keylen)                                                                                         // 14575
  var block1 = new Buffer(salt.length + 4)                                                                            // 14576
  salt.copy(block1, 0, 0, salt.length)                                                                                // 14577
                                                                                                                      // 14578
  var r                                                                                                               // 14579
  var T                                                                                                               // 14580
                                                                                                                      // 14581
  for (var i = 1; i <= l; i++) {                                                                                      // 14582
    block1.writeUInt32BE(i, salt.length)                                                                              // 14583
    var U = createHmac(digest, password).update(block1).digest()                                                      // 14584
                                                                                                                      // 14585
    if (!hLen) {                                                                                                      // 14586
      hLen = U.length                                                                                                 // 14587
      T = new Buffer(hLen)                                                                                            // 14588
      l = Math.ceil(keylen / hLen)                                                                                    // 14589
      r = keylen - (l - 1) * hLen                                                                                     // 14590
                                                                                                                      // 14591
      if (keylen > (Math.pow(2, 32) - 1) * hLen)                                                                      // 14592
        throw new TypeError('keylen exceeds maximum length')                                                          // 14593
    }                                                                                                                 // 14594
                                                                                                                      // 14595
    U.copy(T, 0, 0, hLen)                                                                                             // 14596
                                                                                                                      // 14597
    for (var j = 1; j < iterations; j++) {                                                                            // 14598
      U = createHmac(digest, password).update(U).digest()                                                             // 14599
                                                                                                                      // 14600
      for (var k = 0; k < hLen; k++) {                                                                                // 14601
        T[k] ^= U[k]                                                                                                  // 14602
      }                                                                                                               // 14603
    }                                                                                                                 // 14604
                                                                                                                      // 14605
    var destPos = (i - 1) * hLen                                                                                      // 14606
    var len = (i === l ? r : hLen)                                                                                    // 14607
    T.copy(DK, destPos, 0, len)                                                                                       // 14608
  }                                                                                                                   // 14609
                                                                                                                      // 14610
  return DK                                                                                                           // 14611
}                                                                                                                     // 14612
                                                                                                                      // 14613
}).call(this,require("buffer").Buffer)                                                                                // 14614
                                                                                                                      // 14615
},{"buffer":2,"create-hmac":106}],138:[function(require,module,exports){                                              // 14616
(function (Buffer){                                                                                                   // 14617
var parseKeys = require('parse-asn1');                                                                                // 14618
var mgf = require('./mgf');                                                                                           // 14619
var xor = require('./xor');                                                                                           // 14620
var bn = require('bn.js');                                                                                            // 14621
var crt = require('browserify-rsa');                                                                                  // 14622
var createHash = require('create-hash');                                                                              // 14623
var withPublic = require('./withPublic');                                                                             // 14624
module.exports = function privateDecrypt(private_key, enc, reverse) {                                                 // 14625
  var padding;                                                                                                        // 14626
  if (private_key.padding) {                                                                                          // 14627
    padding = private_key.padding;                                                                                    // 14628
  } else if (reverse) {                                                                                               // 14629
    padding = 1;                                                                                                      // 14630
  } else {                                                                                                            // 14631
    padding = 4;                                                                                                      // 14632
  }                                                                                                                   // 14633
                                                                                                                      // 14634
  var key = parseKeys(private_key);                                                                                   // 14635
  var k = key.modulus.byteLength();                                                                                   // 14636
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {                                                          // 14637
    throw new Error('decryption error');                                                                              // 14638
  }                                                                                                                   // 14639
  var msg;                                                                                                            // 14640
  if (reverse) {                                                                                                      // 14641
    msg = withPublic(new bn(enc), key);                                                                               // 14642
  } else {                                                                                                            // 14643
    msg = crt(enc, key);                                                                                              // 14644
  }                                                                                                                   // 14645
  var zBuffer = new Buffer(k - msg.length);                                                                           // 14646
  zBuffer.fill(0);                                                                                                    // 14647
  msg = Buffer.concat([zBuffer, msg], k);                                                                             // 14648
  if (padding === 4) {                                                                                                // 14649
    return oaep(key, msg);                                                                                            // 14650
  } else if (padding === 1) {                                                                                         // 14651
    return pkcs1(key, msg, reverse);                                                                                  // 14652
  } else if (padding === 3) {                                                                                         // 14653
    return msg;                                                                                                       // 14654
  } else {                                                                                                            // 14655
    throw new Error('unknown padding');                                                                               // 14656
  }                                                                                                                   // 14657
};                                                                                                                    // 14658
                                                                                                                      // 14659
function oaep(key, msg){                                                                                              // 14660
  var n = key.modulus;                                                                                                // 14661
  var k = key.modulus.byteLength();                                                                                   // 14662
  var mLen = msg.length;                                                                                              // 14663
  var iHash = createHash('sha1').update(new Buffer('')).digest();                                                     // 14664
  var hLen = iHash.length;                                                                                            // 14665
  var hLen2 = 2 * hLen;                                                                                               // 14666
  if (msg[0] !== 0) {                                                                                                 // 14667
    throw new Error('decryption error');                                                                              // 14668
  }                                                                                                                   // 14669
  var maskedSeed = msg.slice(1, hLen + 1);                                                                            // 14670
  var maskedDb =  msg.slice(hLen + 1);                                                                                // 14671
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));                                                                    // 14672
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));                                                                    // 14673
  if (compare(iHash, db.slice(0, hLen))) {                                                                            // 14674
    throw new Error('decryption error');                                                                              // 14675
  }                                                                                                                   // 14676
  var i = hLen;                                                                                                       // 14677
  while (db[i] === 0) {                                                                                               // 14678
    i++;                                                                                                              // 14679
  }                                                                                                                   // 14680
  if (db[i++] !== 1) {                                                                                                // 14681
    throw new Error('decryption error');                                                                              // 14682
  }                                                                                                                   // 14683
  return db.slice(i);                                                                                                 // 14684
}                                                                                                                     // 14685
                                                                                                                      // 14686
function pkcs1(key, msg, reverse){                                                                                    // 14687
  var p1 = msg.slice(0, 2);                                                                                           // 14688
  var i = 2;                                                                                                          // 14689
  var status = 0;                                                                                                     // 14690
  while (msg[i++] !== 0) {                                                                                            // 14691
    if (i >= msg.length) {                                                                                            // 14692
      status++;                                                                                                       // 14693
      break;                                                                                                          // 14694
    }                                                                                                                 // 14695
  }                                                                                                                   // 14696
  var ps = msg.slice(2, i - 1);                                                                                       // 14697
  var p2 = msg.slice(i - 1, i);                                                                                       // 14698
                                                                                                                      // 14699
  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){                     // 14700
    status++;                                                                                                         // 14701
  }                                                                                                                   // 14702
  if (ps.length < 8) {                                                                                                // 14703
    status++;                                                                                                         // 14704
  }                                                                                                                   // 14705
  if (status) {                                                                                                       // 14706
    throw new Error('decryption error');                                                                              // 14707
  }                                                                                                                   // 14708
  return  msg.slice(i);                                                                                               // 14709
}                                                                                                                     // 14710
function compare(a, b){                                                                                               // 14711
  a = new Buffer(a);                                                                                                  // 14712
  b = new Buffer(b);                                                                                                  // 14713
  var dif = 0;                                                                                                        // 14714
  var len = a.length;                                                                                                 // 14715
  if (a.length !== b.length) {                                                                                        // 14716
    dif++;                                                                                                            // 14717
    len = Math.min(a.length, b.length);                                                                               // 14718
  }                                                                                                                   // 14719
  var i = -1;                                                                                                         // 14720
  while (++i < len) {                                                                                                 // 14721
    dif += (a[i] ^ b[i]);                                                                                             // 14722
  }                                                                                                                   // 14723
  return dif;                                                                                                         // 14724
}                                                                                                                     // 14725
}).call(this,require("buffer").Buffer)                                                                                // 14726
                                                                                                                      // 14727
},{"./mgf":116,"./withPublic":140,"./xor":141,"bn.js":117,"browserify-rsa":118,"buffer":2,"create-hash":94,"parse-asn1":123}],139:[function(require,module,exports){
(function (Buffer){                                                                                                   // 14729
var parseKeys = require('parse-asn1');                                                                                // 14730
var randomBytes = require('randombytes');                                                                             // 14731
var createHash = require('create-hash');                                                                              // 14732
var mgf = require('./mgf');                                                                                           // 14733
var xor = require('./xor');                                                                                           // 14734
var bn = require('bn.js');                                                                                            // 14735
var withPublic = require('./withPublic');                                                                             // 14736
var crt = require('browserify-rsa');                                                                                  // 14737
                                                                                                                      // 14738
var constants = {                                                                                                     // 14739
  RSA_PKCS1_OAEP_PADDING: 4,                                                                                          // 14740
  RSA_PKCS1_PADDIN: 1,                                                                                                // 14741
  RSA_NO_PADDING: 3                                                                                                   // 14742
};                                                                                                                    // 14743
                                                                                                                      // 14744
module.exports = function publicEncrypt(public_key, msg, reverse) {                                                   // 14745
  var padding;                                                                                                        // 14746
  if (public_key.padding) {                                                                                           // 14747
    padding = public_key.padding;                                                                                     // 14748
  } else if (reverse) {                                                                                               // 14749
    padding = 1;                                                                                                      // 14750
  } else {                                                                                                            // 14751
    padding = 4;                                                                                                      // 14752
  }                                                                                                                   // 14753
  var key = parseKeys(public_key);                                                                                    // 14754
  var paddedMsg;                                                                                                      // 14755
  if (padding === 4) {                                                                                                // 14756
    paddedMsg = oaep(key, msg);                                                                                       // 14757
  } else if (padding === 1) {                                                                                         // 14758
    paddedMsg = pkcs1(key, msg, reverse);                                                                             // 14759
  } else if (padding === 3) {                                                                                         // 14760
    paddedMsg = new bn(msg);                                                                                          // 14761
    if (paddedMsg.cmp(key.modulus) >= 0) {                                                                            // 14762
      throw new Error('data too long for modulus');                                                                   // 14763
    }                                                                                                                 // 14764
  } else {                                                                                                            // 14765
    throw new Error('unknown padding');                                                                               // 14766
  }                                                                                                                   // 14767
  if (reverse) {                                                                                                      // 14768
    return crt(paddedMsg, key);                                                                                       // 14769
  } else {                                                                                                            // 14770
    return withPublic(paddedMsg, key);                                                                                // 14771
  }                                                                                                                   // 14772
};                                                                                                                    // 14773
                                                                                                                      // 14774
function oaep(key, msg){                                                                                              // 14775
  var k = key.modulus.byteLength();                                                                                   // 14776
  var mLen = msg.length;                                                                                              // 14777
  var iHash = createHash('sha1').update(new Buffer('')).digest();                                                     // 14778
  var hLen = iHash.length;                                                                                            // 14779
  var hLen2 = 2 * hLen;                                                                                               // 14780
  if (mLen > k - hLen2 - 2) {                                                                                         // 14781
    throw new Error('message too long');                                                                              // 14782
  }                                                                                                                   // 14783
  var ps = new Buffer(k - mLen - hLen2 - 2);                                                                          // 14784
  ps.fill(0);                                                                                                         // 14785
  var dblen = k - hLen - 1;                                                                                           // 14786
  var seed = randomBytes(hLen);                                                                                       // 14787
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));                      // 14788
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));                                                                    // 14789
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));                                           // 14790
}                                                                                                                     // 14791
function pkcs1(key, msg, reverse){                                                                                    // 14792
  var mLen = msg.length;                                                                                              // 14793
  var k = key.modulus.byteLength();                                                                                   // 14794
  if (mLen > k - 11) {                                                                                                // 14795
    throw new Error('message too long');                                                                              // 14796
  }                                                                                                                   // 14797
  var ps;                                                                                                             // 14798
  if (reverse) {                                                                                                      // 14799
    ps = new Buffer(k - mLen - 3);                                                                                    // 14800
    ps.fill(0xff);                                                                                                    // 14801
  } else {                                                                                                            // 14802
    ps = nonZero(k - mLen - 3);                                                                                       // 14803
  }                                                                                                                   // 14804
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));                          // 14805
}                                                                                                                     // 14806
function nonZero(len, crypto) {                                                                                       // 14807
  var out = new Buffer(len);                                                                                          // 14808
  var i = 0;                                                                                                          // 14809
  var cache = randomBytes(len*2);                                                                                     // 14810
  var cur = 0;                                                                                                        // 14811
  var num;                                                                                                            // 14812
  while (i < len) {                                                                                                   // 14813
    if (cur === cache.length) {                                                                                       // 14814
      cache = randomBytes(len*2);                                                                                     // 14815
      cur = 0;                                                                                                        // 14816
    }                                                                                                                 // 14817
    num = cache[cur++];                                                                                               // 14818
    if (num) {                                                                                                        // 14819
      out[i++] = num;                                                                                                 // 14820
    }                                                                                                                 // 14821
  }                                                                                                                   // 14822
  return out;                                                                                                         // 14823
}                                                                                                                     // 14824
}).call(this,require("buffer").Buffer)                                                                                // 14825
                                                                                                                      // 14826
},{"./mgf":116,"./withPublic":140,"./xor":141,"bn.js":117,"browserify-rsa":118,"buffer":2,"create-hash":94,"parse-asn1":123,"randombytes":142}],140:[function(require,module,exports){
(function (Buffer){                                                                                                   // 14828
var bn = require('bn.js');                                                                                            // 14829
function withPublic(paddedMsg, key) {                                                                                 // 14830
  return new Buffer(paddedMsg                                                                                         // 14831
    .toRed(bn.mont(key.modulus))                                                                                      // 14832
    .redPow(new bn(key.publicExponent))                                                                               // 14833
    .fromRed()                                                                                                        // 14834
    .toArray());                                                                                                      // 14835
}                                                                                                                     // 14836
                                                                                                                      // 14837
module.exports = withPublic;                                                                                          // 14838
}).call(this,require("buffer").Buffer)                                                                                // 14839
                                                                                                                      // 14840
},{"bn.js":117,"buffer":2}],141:[function(require,module,exports){                                                    // 14841
module.exports = function xor(a, b) {                                                                                 // 14842
  var len = a.length;                                                                                                 // 14843
  var i = -1;                                                                                                         // 14844
  while (++i < len) {                                                                                                 // 14845
    a[i] ^= b[i];                                                                                                     // 14846
  }                                                                                                                   // 14847
  return a                                                                                                            // 14848
};                                                                                                                    // 14849
},{}],142:[function(require,module,exports){                                                                          // 14850
(function (process,global,Buffer){                                                                                    // 14851
'use strict';                                                                                                         // 14852
                                                                                                                      // 14853
var crypto = global.crypto || global.msCrypto                                                                         // 14854
if(crypto && crypto.getRandomValues) {                                                                                // 14855
  module.exports = randomBytes;                                                                                       // 14856
} else {                                                                                                              // 14857
  module.exports = oldBrowser;                                                                                        // 14858
}                                                                                                                     // 14859
function randomBytes(size, cb) {                                                                                      // 14860
  var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array                                       // 14861
    /* This will not work in older browsers.                                                                          // 14862
     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues                             // 14863
     */                                                                                                               // 14864
                                                                                                                      // 14865
  crypto.getRandomValues(bytes);                                                                                      // 14866
  if (typeof cb === 'function') {                                                                                     // 14867
    return process.nextTick(function () {                                                                             // 14868
      cb(null, bytes);                                                                                                // 14869
    });                                                                                                               // 14870
  }                                                                                                                   // 14871
  return bytes;                                                                                                       // 14872
}                                                                                                                     // 14873
function oldBrowser() {                                                                                               // 14874
  throw new Error(                                                                                                    // 14875
      'secure random number generation not supported by this browser\n'+                                              // 14876
      'use chrome, FireFox or Internet Explorer 11'                                                                   // 14877
    )                                                                                                                 // 14878
}                                                                                                                     // 14879
                                                                                                                      // 14880
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
                                                                                                                      // 14882
},{"_process":146,"buffer":2}],143:[function(require,module,exports){                                                 // 14883
// Copyright Joyent, Inc. and other Node contributors.                                                                // 14884
//                                                                                                                    // 14885
// Permission is hereby granted, free of charge, to any person obtaining a                                            // 14886
// copy of this software and associated documentation files (the                                                      // 14887
// "Software"), to deal in the Software without restriction, including                                                // 14888
// without limitation the rights to use, copy, modify, merge, publish,                                                // 14889
// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 14890
// persons to whom the Software is furnished to do so, subject to the                                                 // 14891
// following conditions:                                                                                              // 14892
//                                                                                                                    // 14893
// The above copyright notice and this permission notice shall be included                                            // 14894
// in all copies or substantial portions of the Software.                                                             // 14895
//                                                                                                                    // 14896
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 14897
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 14898
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 14899
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 14900
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 14901
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 14902
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 14903
                                                                                                                      // 14904
function EventEmitter() {                                                                                             // 14905
  this._events = this._events || {};                                                                                  // 14906
  this._maxListeners = this._maxListeners || undefined;                                                               // 14907
}                                                                                                                     // 14908
module.exports = EventEmitter;                                                                                        // 14909
                                                                                                                      // 14910
// Backwards-compat with node 0.10.x                                                                                  // 14911
EventEmitter.EventEmitter = EventEmitter;                                                                             // 14912
                                                                                                                      // 14913
EventEmitter.prototype._events = undefined;                                                                           // 14914
EventEmitter.prototype._maxListeners = undefined;                                                                     // 14915
                                                                                                                      // 14916
// By default EventEmitters will print a warning if more than 10 listeners are                                        // 14917
// added to it. This is a useful default which helps finding memory leaks.                                            // 14918
EventEmitter.defaultMaxListeners = 10;                                                                                // 14919
                                                                                                                      // 14920
// Obviously not all Emitters should be limited to 10. This function allows                                           // 14921
// that to be increased. Set to zero for unlimited.                                                                   // 14922
EventEmitter.prototype.setMaxListeners = function(n) {                                                                // 14923
  if (!isNumber(n) || n < 0 || isNaN(n))                                                                              // 14924
    throw TypeError('n must be a positive number');                                                                   // 14925
  this._maxListeners = n;                                                                                             // 14926
  return this;                                                                                                        // 14927
};                                                                                                                    // 14928
                                                                                                                      // 14929
EventEmitter.prototype.emit = function(type) {                                                                        // 14930
  var er, handler, len, args, i, listeners;                                                                           // 14931
                                                                                                                      // 14932
  if (!this._events)                                                                                                  // 14933
    this._events = {};                                                                                                // 14934
                                                                                                                      // 14935
  // If there is no 'error' event listener then throw.                                                                // 14936
  if (type === 'error') {                                                                                             // 14937
    if (!this._events.error ||                                                                                        // 14938
        (isObject(this._events.error) && !this._events.error.length)) {                                               // 14939
      er = arguments[1];                                                                                              // 14940
      if (er instanceof Error) {                                                                                      // 14941
        throw er; // Unhandled 'error' event                                                                          // 14942
      }                                                                                                               // 14943
      throw TypeError('Uncaught, unspecified "error" event.');                                                        // 14944
    }                                                                                                                 // 14945
  }                                                                                                                   // 14946
                                                                                                                      // 14947
  handler = this._events[type];                                                                                       // 14948
                                                                                                                      // 14949
  if (isUndefined(handler))                                                                                           // 14950
    return false;                                                                                                     // 14951
                                                                                                                      // 14952
  if (isFunction(handler)) {                                                                                          // 14953
    switch (arguments.length) {                                                                                       // 14954
      // fast cases                                                                                                   // 14955
      case 1:                                                                                                         // 14956
        handler.call(this);                                                                                           // 14957
        break;                                                                                                        // 14958
      case 2:                                                                                                         // 14959
        handler.call(this, arguments[1]);                                                                             // 14960
        break;                                                                                                        // 14961
      case 3:                                                                                                         // 14962
        handler.call(this, arguments[1], arguments[2]);                                                               // 14963
        break;                                                                                                        // 14964
      // slower                                                                                                       // 14965
      default:                                                                                                        // 14966
        len = arguments.length;                                                                                       // 14967
        args = new Array(len - 1);                                                                                    // 14968
        for (i = 1; i < len; i++)                                                                                     // 14969
          args[i - 1] = arguments[i];                                                                                 // 14970
        handler.apply(this, args);                                                                                    // 14971
    }                                                                                                                 // 14972
  } else if (isObject(handler)) {                                                                                     // 14973
    len = arguments.length;                                                                                           // 14974
    args = new Array(len - 1);                                                                                        // 14975
    for (i = 1; i < len; i++)                                                                                         // 14976
      args[i - 1] = arguments[i];                                                                                     // 14977
                                                                                                                      // 14978
    listeners = handler.slice();                                                                                      // 14979
    len = listeners.length;                                                                                           // 14980
    for (i = 0; i < len; i++)                                                                                         // 14981
      listeners[i].apply(this, args);                                                                                 // 14982
  }                                                                                                                   // 14983
                                                                                                                      // 14984
  return true;                                                                                                        // 14985
};                                                                                                                    // 14986
                                                                                                                      // 14987
EventEmitter.prototype.addListener = function(type, listener) {                                                       // 14988
  var m;                                                                                                              // 14989
                                                                                                                      // 14990
  if (!isFunction(listener))                                                                                          // 14991
    throw TypeError('listener must be a function');                                                                   // 14992
                                                                                                                      // 14993
  if (!this._events)                                                                                                  // 14994
    this._events = {};                                                                                                // 14995
                                                                                                                      // 14996
  // To avoid recursion in the case that type === "newListener"! Before                                               // 14997
  // adding it to the listeners, first emit "newListener".                                                            // 14998
  if (this._events.newListener)                                                                                       // 14999
    this.emit('newListener', type,                                                                                    // 15000
              isFunction(listener.listener) ?                                                                         // 15001
              listener.listener : listener);                                                                          // 15002
                                                                                                                      // 15003
  if (!this._events[type])                                                                                            // 15004
    // Optimize the case of one listener. Don't need the extra array object.                                          // 15005
    this._events[type] = listener;                                                                                    // 15006
  else if (isObject(this._events[type]))                                                                              // 15007
    // If we've already got an array, just append.                                                                    // 15008
    this._events[type].push(listener);                                                                                // 15009
  else                                                                                                                // 15010
    // Adding the second element, need to change to array.                                                            // 15011
    this._events[type] = [this._events[type], listener];                                                              // 15012
                                                                                                                      // 15013
  // Check for listener leak                                                                                          // 15014
  if (isObject(this._events[type]) && !this._events[type].warned) {                                                   // 15015
    var m;                                                                                                            // 15016
    if (!isUndefined(this._maxListeners)) {                                                                           // 15017
      m = this._maxListeners;                                                                                         // 15018
    } else {                                                                                                          // 15019
      m = EventEmitter.defaultMaxListeners;                                                                           // 15020
    }                                                                                                                 // 15021
                                                                                                                      // 15022
    if (m && m > 0 && this._events[type].length > m) {                                                                // 15023
      this._events[type].warned = true;                                                                               // 15024
      console.error('(node) warning: possible EventEmitter memory ' +                                                 // 15025
                    'leak detected. %d listeners added. ' +                                                           // 15026
                    'Use emitter.setMaxListeners() to increase limit.',                                               // 15027
                    this._events[type].length);                                                                       // 15028
      if (typeof console.trace === 'function') {                                                                      // 15029
        // not supported in IE 10                                                                                     // 15030
        console.trace();                                                                                              // 15031
      }                                                                                                               // 15032
    }                                                                                                                 // 15033
  }                                                                                                                   // 15034
                                                                                                                      // 15035
  return this;                                                                                                        // 15036
};                                                                                                                    // 15037
                                                                                                                      // 15038
EventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                       // 15039
                                                                                                                      // 15040
EventEmitter.prototype.once = function(type, listener) {                                                              // 15041
  if (!isFunction(listener))                                                                                          // 15042
    throw TypeError('listener must be a function');                                                                   // 15043
                                                                                                                      // 15044
  var fired = false;                                                                                                  // 15045
                                                                                                                      // 15046
  function g() {                                                                                                      // 15047
    this.removeListener(type, g);                                                                                     // 15048
                                                                                                                      // 15049
    if (!fired) {                                                                                                     // 15050
      fired = true;                                                                                                   // 15051
      listener.apply(this, arguments);                                                                                // 15052
    }                                                                                                                 // 15053
  }                                                                                                                   // 15054
                                                                                                                      // 15055
  g.listener = listener;                                                                                              // 15056
  this.on(type, g);                                                                                                   // 15057
                                                                                                                      // 15058
  return this;                                                                                                        // 15059
};                                                                                                                    // 15060
                                                                                                                      // 15061
// emits a 'removeListener' event iff the listener was removed                                                        // 15062
EventEmitter.prototype.removeListener = function(type, listener) {                                                    // 15063
  var list, position, length, i;                                                                                      // 15064
                                                                                                                      // 15065
  if (!isFunction(listener))                                                                                          // 15066
    throw TypeError('listener must be a function');                                                                   // 15067
                                                                                                                      // 15068
  if (!this._events || !this._events[type])                                                                           // 15069
    return this;                                                                                                      // 15070
                                                                                                                      // 15071
  list = this._events[type];                                                                                          // 15072
  length = list.length;                                                                                               // 15073
  position = -1;                                                                                                      // 15074
                                                                                                                      // 15075
  if (list === listener ||                                                                                            // 15076
      (isFunction(list.listener) && list.listener === listener)) {                                                    // 15077
    delete this._events[type];                                                                                        // 15078
    if (this._events.removeListener)                                                                                  // 15079
      this.emit('removeListener', type, listener);                                                                    // 15080
                                                                                                                      // 15081
  } else if (isObject(list)) {                                                                                        // 15082
    for (i = length; i-- > 0;) {                                                                                      // 15083
      if (list[i] === listener ||                                                                                     // 15084
          (list[i].listener && list[i].listener === listener)) {                                                      // 15085
        position = i;                                                                                                 // 15086
        break;                                                                                                        // 15087
      }                                                                                                               // 15088
    }                                                                                                                 // 15089
                                                                                                                      // 15090
    if (position < 0)                                                                                                 // 15091
      return this;                                                                                                    // 15092
                                                                                                                      // 15093
    if (list.length === 1) {                                                                                          // 15094
      list.length = 0;                                                                                                // 15095
      delete this._events[type];                                                                                      // 15096
    } else {                                                                                                          // 15097
      list.splice(position, 1);                                                                                       // 15098
    }                                                                                                                 // 15099
                                                                                                                      // 15100
    if (this._events.removeListener)                                                                                  // 15101
      this.emit('removeListener', type, listener);                                                                    // 15102
  }                                                                                                                   // 15103
                                                                                                                      // 15104
  return this;                                                                                                        // 15105
};                                                                                                                    // 15106
                                                                                                                      // 15107
EventEmitter.prototype.removeAllListeners = function(type) {                                                          // 15108
  var key, listeners;                                                                                                 // 15109
                                                                                                                      // 15110
  if (!this._events)                                                                                                  // 15111
    return this;                                                                                                      // 15112
                                                                                                                      // 15113
  // not listening for removeListener, no need to emit                                                                // 15114
  if (!this._events.removeListener) {                                                                                 // 15115
    if (arguments.length === 0)                                                                                       // 15116
      this._events = {};                                                                                              // 15117
    else if (this._events[type])                                                                                      // 15118
      delete this._events[type];                                                                                      // 15119
    return this;                                                                                                      // 15120
  }                                                                                                                   // 15121
                                                                                                                      // 15122
  // emit removeListener for all listeners on all events                                                              // 15123
  if (arguments.length === 0) {                                                                                       // 15124
    for (key in this._events) {                                                                                       // 15125
      if (key === 'removeListener') continue;                                                                         // 15126
      this.removeAllListeners(key);                                                                                   // 15127
    }                                                                                                                 // 15128
    this.removeAllListeners('removeListener');                                                                        // 15129
    this._events = {};                                                                                                // 15130
    return this;                                                                                                      // 15131
  }                                                                                                                   // 15132
                                                                                                                      // 15133
  listeners = this._events[type];                                                                                     // 15134
                                                                                                                      // 15135
  if (isFunction(listeners)) {                                                                                        // 15136
    this.removeListener(type, listeners);                                                                             // 15137
  } else {                                                                                                            // 15138
    // LIFO order                                                                                                     // 15139
    while (listeners.length)                                                                                          // 15140
      this.removeListener(type, listeners[listeners.length - 1]);                                                     // 15141
  }                                                                                                                   // 15142
  delete this._events[type];                                                                                          // 15143
                                                                                                                      // 15144
  return this;                                                                                                        // 15145
};                                                                                                                    // 15146
                                                                                                                      // 15147
EventEmitter.prototype.listeners = function(type) {                                                                   // 15148
  var ret;                                                                                                            // 15149
  if (!this._events || !this._events[type])                                                                           // 15150
    ret = [];                                                                                                         // 15151
  else if (isFunction(this._events[type]))                                                                            // 15152
    ret = [this._events[type]];                                                                                       // 15153
  else                                                                                                                // 15154
    ret = this._events[type].slice();                                                                                 // 15155
  return ret;                                                                                                         // 15156
};                                                                                                                    // 15157
                                                                                                                      // 15158
EventEmitter.listenerCount = function(emitter, type) {                                                                // 15159
  var ret;                                                                                                            // 15160
  if (!emitter._events || !emitter._events[type])                                                                     // 15161
    ret = 0;                                                                                                          // 15162
  else if (isFunction(emitter._events[type]))                                                                         // 15163
    ret = 1;                                                                                                          // 15164
  else                                                                                                                // 15165
    ret = emitter._events[type].length;                                                                               // 15166
  return ret;                                                                                                         // 15167
};                                                                                                                    // 15168
                                                                                                                      // 15169
function isFunction(arg) {                                                                                            // 15170
  return typeof arg === 'function';                                                                                   // 15171
}                                                                                                                     // 15172
                                                                                                                      // 15173
function isNumber(arg) {                                                                                              // 15174
  return typeof arg === 'number';                                                                                     // 15175
}                                                                                                                     // 15176
                                                                                                                      // 15177
function isObject(arg) {                                                                                              // 15178
  return typeof arg === 'object' && arg !== null;                                                                     // 15179
}                                                                                                                     // 15180
                                                                                                                      // 15181
function isUndefined(arg) {                                                                                           // 15182
  return arg === void 0;                                                                                              // 15183
}                                                                                                                     // 15184
                                                                                                                      // 15185
},{}],144:[function(require,module,exports){                                                                          // 15186
if (typeof Object.create === 'function') {                                                                            // 15187
  // implementation from standard node.js 'util' module                                                               // 15188
  module.exports = function inherits(ctor, superCtor) {                                                               // 15189
    ctor.super_ = superCtor                                                                                           // 15190
    ctor.prototype = Object.create(superCtor.prototype, {                                                             // 15191
      constructor: {                                                                                                  // 15192
        value: ctor,                                                                                                  // 15193
        enumerable: false,                                                                                            // 15194
        writable: true,                                                                                               // 15195
        configurable: true                                                                                            // 15196
      }                                                                                                               // 15197
    });                                                                                                               // 15198
  };                                                                                                                  // 15199
} else {                                                                                                              // 15200
  // old school shim for old browsers                                                                                 // 15201
  module.exports = function inherits(ctor, superCtor) {                                                               // 15202
    ctor.super_ = superCtor                                                                                           // 15203
    var TempCtor = function () {}                                                                                     // 15204
    TempCtor.prototype = superCtor.prototype                                                                          // 15205
    ctor.prototype = new TempCtor()                                                                                   // 15206
    ctor.prototype.constructor = ctor                                                                                 // 15207
  }                                                                                                                   // 15208
}                                                                                                                     // 15209
                                                                                                                      // 15210
},{}],145:[function(require,module,exports){                                                                          // 15211
module.exports = Array.isArray || function (arr) {                                                                    // 15212
  return Object.prototype.toString.call(arr) == '[object Array]';                                                     // 15213
};                                                                                                                    // 15214
                                                                                                                      // 15215
},{}],146:[function(require,module,exports){                                                                          // 15216
// shim for using process in browser                                                                                  // 15217
                                                                                                                      // 15218
var process = module.exports = {};                                                                                    // 15219
var queue = [];                                                                                                       // 15220
var draining = false;                                                                                                 // 15221
                                                                                                                      // 15222
function drainQueue() {                                                                                               // 15223
    if (draining) {                                                                                                   // 15224
        return;                                                                                                       // 15225
    }                                                                                                                 // 15226
    draining = true;                                                                                                  // 15227
    var currentQueue;                                                                                                 // 15228
    var len = queue.length;                                                                                           // 15229
    while(len) {                                                                                                      // 15230
        currentQueue = queue;                                                                                         // 15231
        queue = [];                                                                                                   // 15232
        var i = -1;                                                                                                   // 15233
        while (++i < len) {                                                                                           // 15234
            currentQueue[i]();                                                                                        // 15235
        }                                                                                                             // 15236
        len = queue.length;                                                                                           // 15237
    }                                                                                                                 // 15238
    draining = false;                                                                                                 // 15239
}                                                                                                                     // 15240
process.nextTick = function (fun) {                                                                                   // 15241
    queue.push(fun);                                                                                                  // 15242
    if (!draining) {                                                                                                  // 15243
        setTimeout(drainQueue, 0);                                                                                    // 15244
    }                                                                                                                 // 15245
};                                                                                                                    // 15246
                                                                                                                      // 15247
process.title = 'browser';                                                                                            // 15248
process.browser = true;                                                                                               // 15249
process.env = {};                                                                                                     // 15250
process.argv = [];                                                                                                    // 15251
process.version = ''; // empty string to avoid regexp issues                                                          // 15252
process.versions = {};                                                                                                // 15253
                                                                                                                      // 15254
function noop() {}                                                                                                    // 15255
                                                                                                                      // 15256
process.on = noop;                                                                                                    // 15257
process.addListener = noop;                                                                                           // 15258
process.once = noop;                                                                                                  // 15259
process.off = noop;                                                                                                   // 15260
process.removeListener = noop;                                                                                        // 15261
process.removeAllListeners = noop;                                                                                    // 15262
process.emit = noop;                                                                                                  // 15263
                                                                                                                      // 15264
process.binding = function (name) {                                                                                   // 15265
    throw new Error('process.binding is not supported');                                                              // 15266
};                                                                                                                    // 15267
                                                                                                                      // 15268
// TODO(shtylman)                                                                                                     // 15269
process.cwd = function () { return '/' };                                                                             // 15270
process.chdir = function (dir) {                                                                                      // 15271
    throw new Error('process.chdir is not supported');                                                                // 15272
};                                                                                                                    // 15273
process.umask = function() { return 0; };                                                                             // 15274
                                                                                                                      // 15275
},{}],147:[function(require,module,exports){                                                                          // 15276
module.exports = require("./lib/_stream_duplex.js")                                                                   // 15277
                                                                                                                      // 15278
},{"./lib/_stream_duplex.js":148}],148:[function(require,module,exports){                                             // 15279
(function (process){                                                                                                  // 15280
// Copyright Joyent, Inc. and other Node contributors.                                                                // 15281
//                                                                                                                    // 15282
// Permission is hereby granted, free of charge, to any person obtaining a                                            // 15283
// copy of this software and associated documentation files (the                                                      // 15284
// "Software"), to deal in the Software without restriction, including                                                // 15285
// without limitation the rights to use, copy, modify, merge, publish,                                                // 15286
// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 15287
// persons to whom the Software is furnished to do so, subject to the                                                 // 15288
// following conditions:                                                                                              // 15289
//                                                                                                                    // 15290
// The above copyright notice and this permission notice shall be included                                            // 15291
// in all copies or substantial portions of the Software.                                                             // 15292
//                                                                                                                    // 15293
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 15294
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 15295
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 15296
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 15297
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 15298
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 15299
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 15300
                                                                                                                      // 15301
// a duplex stream is just a stream that is both readable and writable.                                               // 15302
// Since JS doesn't have multiple prototypal inheritance, this class                                                  // 15303
// prototypally inherits from Readable, and then parasitically from                                                   // 15304
// Writable.                                                                                                          // 15305
                                                                                                                      // 15306
module.exports = Duplex;                                                                                              // 15307
                                                                                                                      // 15308
/*<replacement>*/                                                                                                     // 15309
var objectKeys = Object.keys || function (obj) {                                                                      // 15310
  var keys = [];                                                                                                      // 15311
  for (var key in obj) keys.push(key);                                                                                // 15312
  return keys;                                                                                                        // 15313
}                                                                                                                     // 15314
/*</replacement>*/                                                                                                    // 15315
                                                                                                                      // 15316
                                                                                                                      // 15317
/*<replacement>*/                                                                                                     // 15318
var util = require('core-util-is');                                                                                   // 15319
util.inherits = require('inherits');                                                                                  // 15320
/*</replacement>*/                                                                                                    // 15321
                                                                                                                      // 15322
var Readable = require('./_stream_readable');                                                                         // 15323
var Writable = require('./_stream_writable');                                                                         // 15324
                                                                                                                      // 15325
util.inherits(Duplex, Readable);                                                                                      // 15326
                                                                                                                      // 15327
forEach(objectKeys(Writable.prototype), function(method) {                                                            // 15328
  if (!Duplex.prototype[method])                                                                                      // 15329
    Duplex.prototype[method] = Writable.prototype[method];                                                            // 15330
});                                                                                                                   // 15331
                                                                                                                      // 15332
function Duplex(options) {                                                                                            // 15333
  if (!(this instanceof Duplex))                                                                                      // 15334
    return new Duplex(options);                                                                                       // 15335
                                                                                                                      // 15336
  Readable.call(this, options);                                                                                       // 15337
  Writable.call(this, options);                                                                                       // 15338
                                                                                                                      // 15339
  if (options && options.readable === false)                                                                          // 15340
    this.readable = false;                                                                                            // 15341
                                                                                                                      // 15342
  if (options && options.writable === false)                                                                          // 15343
    this.writable = false;                                                                                            // 15344
                                                                                                                      // 15345
  this.allowHalfOpen = true;                                                                                          // 15346
  if (options && options.allowHalfOpen === false)                                                                     // 15347
    this.allowHalfOpen = false;                                                                                       // 15348
                                                                                                                      // 15349
  this.once('end', onend);                                                                                            // 15350
}                                                                                                                     // 15351
                                                                                                                      // 15352
// the no-half-open enforcer                                                                                          // 15353
function onend() {                                                                                                    // 15354
  // if we allow half-open state, or if the writable side ended,                                                      // 15355
  // then we're ok.                                                                                                   // 15356
  if (this.allowHalfOpen || this._writableState.ended)                                                                // 15357
    return;                                                                                                           // 15358
                                                                                                                      // 15359
  // no more data can be written.                                                                                     // 15360
  // But allow more writes to happen in this tick.                                                                    // 15361
  process.nextTick(this.end.bind(this));                                                                              // 15362
}                                                                                                                     // 15363
                                                                                                                      // 15364
function forEach (xs, f) {                                                                                            // 15365
  for (var i = 0, l = xs.length; i < l; i++) {                                                                        // 15366
    f(xs[i], i);                                                                                                      // 15367
  }                                                                                                                   // 15368
}                                                                                                                     // 15369
                                                                                                                      // 15370
}).call(this,require('_process'))                                                                                     // 15371
                                                                                                                      // 15372
},{"./_stream_readable":150,"./_stream_writable":152,"_process":146,"core-util-is":153,"inherits":144}],149:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.                                                                // 15374
//                                                                                                                    // 15375
// Permission is hereby granted, free of charge, to any person obtaining a                                            // 15376
// copy of this software and associated documentation files (the                                                      // 15377
// "Software"), to deal in the Software without restriction, including                                                // 15378
// without limitation the rights to use, copy, modify, merge, publish,                                                // 15379
// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 15380
// persons to whom the Software is furnished to do so, subject to the                                                 // 15381
// following conditions:                                                                                              // 15382
//                                                                                                                    // 15383
// The above copyright notice and this permission notice shall be included                                            // 15384
// in all copies or substantial portions of the Software.                                                             // 15385
//                                                                                                                    // 15386
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 15387
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 15388
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 15389
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 15390
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 15391
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 15392
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 15393
                                                                                                                      // 15394
// a passthrough stream.                                                                                              // 15395
// basically just the most minimal sort of Transform stream.                                                          // 15396
// Every written chunk gets output as-is.                                                                             // 15397
                                                                                                                      // 15398
module.exports = PassThrough;                                                                                         // 15399
                                                                                                                      // 15400
var Transform = require('./_stream_transform');                                                                       // 15401
                                                                                                                      // 15402
/*<replacement>*/                                                                                                     // 15403
var util = require('core-util-is');                                                                                   // 15404
util.inherits = require('inherits');                                                                                  // 15405
/*</replacement>*/                                                                                                    // 15406
                                                                                                                      // 15407
util.inherits(PassThrough, Transform);                                                                                // 15408
                                                                                                                      // 15409
function PassThrough(options) {                                                                                       // 15410
  if (!(this instanceof PassThrough))                                                                                 // 15411
    return new PassThrough(options);                                                                                  // 15412
                                                                                                                      // 15413
  Transform.call(this, options);                                                                                      // 15414
}                                                                                                                     // 15415
                                                                                                                      // 15416
PassThrough.prototype._transform = function(chunk, encoding, cb) {                                                    // 15417
  cb(null, chunk);                                                                                                    // 15418
};                                                                                                                    // 15419
                                                                                                                      // 15420
},{"./_stream_transform":151,"core-util-is":153,"inherits":144}],150:[function(require,module,exports){               // 15421
(function (process){                                                                                                  // 15422
// Copyright Joyent, Inc. and other Node contributors.                                                                // 15423
//                                                                                                                    // 15424
// Permission is hereby granted, free of charge, to any person obtaining a                                            // 15425
// copy of this software and associated documentation files (the                                                      // 15426
// "Software"), to deal in the Software without restriction, including                                                // 15427
// without limitation the rights to use, copy, modify, merge, publish,                                                // 15428
// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 15429
// persons to whom the Software is furnished to do so, subject to the                                                 // 15430
// following conditions:                                                                                              // 15431
//                                                                                                                    // 15432
// The above copyright notice and this permission notice shall be included                                            // 15433
// in all copies or substantial portions of the Software.                                                             // 15434
//                                                                                                                    // 15435
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 15436
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 15437
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 15438
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 15439
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 15440
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 15441
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 15442
                                                                                                                      // 15443
module.exports = Readable;                                                                                            // 15444
                                                                                                                      // 15445
/*<replacement>*/                                                                                                     // 15446
var isArray = require('isarray');                                                                                     // 15447
/*</replacement>*/                                                                                                    // 15448
                                                                                                                      // 15449
                                                                                                                      // 15450
/*<replacement>*/                                                                                                     // 15451
var Buffer = require('buffer').Buffer;                                                                                // 15452
/*</replacement>*/                                                                                                    // 15453
                                                                                                                      // 15454
Readable.ReadableState = ReadableState;                                                                               // 15455
                                                                                                                      // 15456
var EE = require('events').EventEmitter;                                                                              // 15457
                                                                                                                      // 15458
/*<replacement>*/                                                                                                     // 15459
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {                                                   // 15460
  return emitter.listeners(type).length;                                                                              // 15461
};                                                                                                                    // 15462
/*</replacement>*/                                                                                                    // 15463
                                                                                                                      // 15464
var Stream = require('stream');                                                                                       // 15465
                                                                                                                      // 15466
/*<replacement>*/                                                                                                     // 15467
var util = require('core-util-is');                                                                                   // 15468
util.inherits = require('inherits');                                                                                  // 15469
/*</replacement>*/                                                                                                    // 15470
                                                                                                                      // 15471
var StringDecoder;                                                                                                    // 15472
                                                                                                                      // 15473
                                                                                                                      // 15474
/*<replacement>*/                                                                                                     // 15475
var debug = require('util');                                                                                          // 15476
if (debug && debug.debuglog) {                                                                                        // 15477
  debug = debug.debuglog('stream');                                                                                   // 15478
} else {                                                                                                              // 15479
  debug = function () {};                                                                                             // 15480
}                                                                                                                     // 15481
/*</replacement>*/                                                                                                    // 15482
                                                                                                                      // 15483
                                                                                                                      // 15484
util.inherits(Readable, Stream);                                                                                      // 15485
                                                                                                                      // 15486
function ReadableState(options, stream) {                                                                             // 15487
  var Duplex = require('./_stream_duplex');                                                                           // 15488
                                                                                                                      // 15489
  options = options || {};                                                                                            // 15490
                                                                                                                      // 15491
  // the point at which it stops calling _read() to fill the buffer                                                   // 15492
  // Note: 0 is a valid value, means "don't call _read preemptively ever"                                             // 15493
  var hwm = options.highWaterMark;                                                                                    // 15494
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;                                                               // 15495
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;                                                         // 15496
                                                                                                                      // 15497
  // cast to ints.                                                                                                    // 15498
  this.highWaterMark = ~~this.highWaterMark;                                                                          // 15499
                                                                                                                      // 15500
  this.buffer = [];                                                                                                   // 15501
  this.length = 0;                                                                                                    // 15502
  this.pipes = null;                                                                                                  // 15503
  this.pipesCount = 0;                                                                                                // 15504
  this.flowing = null;                                                                                                // 15505
  this.ended = false;                                                                                                 // 15506
  this.endEmitted = false;                                                                                            // 15507
  this.reading = false;                                                                                               // 15508
                                                                                                                      // 15509
  // a flag to be able to tell if the onwrite cb is called immediately,                                               // 15510
  // or on a later tick.  We set this to true at first, because any                                                   // 15511
  // actions that shouldn't happen until "later" should generally also                                                // 15512
  // not happen before the first write call.                                                                          // 15513
  this.sync = true;                                                                                                   // 15514
                                                                                                                      // 15515
  // whenever we return null, then we set a flag to say                                                               // 15516
  // that we're awaiting a 'readable' event emission.                                                                 // 15517
  this.needReadable = false;                                                                                          // 15518
  this.emittedReadable = false;                                                                                       // 15519
  this.readableListening = false;                                                                                     // 15520
                                                                                                                      // 15521
                                                                                                                      // 15522
  // object stream flag. Used to make read(n) ignore n and to                                                         // 15523
  // make all the buffer merging and length checks go away                                                            // 15524
  this.objectMode = !!options.objectMode;                                                                             // 15525
                                                                                                                      // 15526
  if (stream instanceof Duplex)                                                                                       // 15527
    this.objectMode = this.objectMode || !!options.readableObjectMode;                                                // 15528
                                                                                                                      // 15529
  // Crypto is kind of old and crusty.  Historically, its default string                                              // 15530
  // encoding is 'binary' so we have to make this configurable.                                                       // 15531
  // Everything else in the universe uses 'utf8', though.                                                             // 15532
  this.defaultEncoding = options.defaultEncoding || 'utf8';                                                           // 15533
                                                                                                                      // 15534
  // when piping, we only care about 'readable' events that happen                                                    // 15535
  // after read()ing all the bytes and not getting any pushback.                                                      // 15536
  this.ranOut = false;                                                                                                // 15537
                                                                                                                      // 15538
  // the number of writers that are awaiting a drain event in .pipe()s                                                // 15539
  this.awaitDrain = 0;                                                                                                // 15540
                                                                                                                      // 15541
  // if true, a maybeReadMore has been scheduled                                                                      // 15542
  this.readingMore = false;                                                                                           // 15543
                                                                                                                      // 15544
  this.decoder = null;                                                                                                // 15545
  this.encoding = null;                                                                                               // 15546
  if (options.encoding) {                                                                                             // 15547
    if (!StringDecoder)                                                                                               // 15548
      StringDecoder = require('string_decoder/').StringDecoder;                                                       // 15549
    this.decoder = new StringDecoder(options.encoding);                                                               // 15550
    this.encoding = options.encoding;                                                                                 // 15551
  }                                                                                                                   // 15552
}                                                                                                                     // 15553
                                                                                                                      // 15554
function Readable(options) {                                                                                          // 15555
  var Duplex = require('./_stream_duplex');                                                                           // 15556
                                                                                                                      // 15557
  if (!(this instanceof Readable))                                                                                    // 15558
    return new Readable(options);                                                                                     // 15559
                                                                                                                      // 15560
  this._readableState = new ReadableState(options, this);                                                             // 15561
                                                                                                                      // 15562
  // legacy                                                                                                           // 15563
  this.readable = true;                                                                                               // 15564
                                                                                                                      // 15565
  Stream.call(this);                                                                                                  // 15566
}                                                                                                                     // 15567
                                                                                                                      // 15568
// Manually shove something into the read() buffer.                                                                   // 15569
// This returns true if the highWaterMark has not been hit yet,                                                       // 15570
// similar to how Writable.write() returns true if you should                                                         // 15571
// write() some more.                                                                                                 // 15572
Readable.prototype.push = function(chunk, encoding) {                                                                 // 15573
  var state = this._readableState;                                                                                    // 15574
                                                                                                                      // 15575
  if (util.isString(chunk) && !state.objectMode) {                                                                    // 15576
    encoding = encoding || state.defaultEncoding;                                                                     // 15577
    if (encoding !== state.encoding) {                                                                                // 15578
      chunk = new Buffer(chunk, encoding);                                                                            // 15579
      encoding = '';                                                                                                  // 15580
    }                                                                                                                 // 15581
  }                                                                                                                   // 15582
                                                                                                                      // 15583
  return readableAddChunk(this, state, chunk, encoding, false);                                                       // 15584
};                                                                                                                    // 15585
                                                                                                                      // 15586
// Unshift should *always* be something directly out of read()                                                        // 15587
Readable.prototype.unshift = function(chunk) {                                                                        // 15588
  var state = this._readableState;                                                                                    // 15589
  return readableAddChunk(this, state, chunk, '', true);                                                              // 15590
};                                                                                                                    // 15591
                                                                                                                      // 15592
function readableAddChunk(stream, state, chunk, encoding, addToFront) {                                               // 15593
  var er = chunkInvalid(state, chunk);                                                                                // 15594
  if (er) {                                                                                                           // 15595
    stream.emit('error', er);                                                                                         // 15596
  } else if (util.isNullOrUndefined(chunk)) {                                                                         // 15597
    state.reading = false;                                                                                            // 15598
    if (!state.ended)                                                                                                 // 15599
      onEofChunk(stream, state);                                                                                      // 15600
  } else if (state.objectMode || chunk && chunk.length > 0) {                                                         // 15601
    if (state.ended && !addToFront) {                                                                                 // 15602
      var e = new Error('stream.push() after EOF');                                                                   // 15603
      stream.emit('error', e);                                                                                        // 15604
    } else if (state.endEmitted && addToFront) {                                                                      // 15605
      var e = new Error('stream.unshift() after end event');                                                          // 15606
      stream.emit('error', e);                                                                                        // 15607
    } else {                                                                                                          // 15608
      if (state.decoder && !addToFront && !encoding)                                                                  // 15609
        chunk = state.decoder.write(chunk);                                                                           // 15610
                                                                                                                      // 15611
      if (!addToFront)                                                                                                // 15612
        state.reading = false;                                                                                        // 15613
                                                                                                                      // 15614
      // if we want the data now, just emit it.                                                                       // 15615
      if (state.flowing && state.length === 0 && !state.sync) {                                                       // 15616
        stream.emit('data', chunk);                                                                                   // 15617
        stream.read(0);                                                                                               // 15618
      } else {                                                                                                        // 15619
        // update the buffer info.                                                                                    // 15620
        state.length += state.objectMode ? 1 : chunk.length;                                                          // 15621
        if (addToFront)                                                                                               // 15622
          state.buffer.unshift(chunk);                                                                                // 15623
        else                                                                                                          // 15624
          state.buffer.push(chunk);                                                                                   // 15625
                                                                                                                      // 15626
        if (state.needReadable)                                                                                       // 15627
          emitReadable(stream);                                                                                       // 15628
      }                                                                                                               // 15629
                                                                                                                      // 15630
      maybeReadMore(stream, state);                                                                                   // 15631
    }                                                                                                                 // 15632
  } else if (!addToFront) {                                                                                           // 15633
    state.reading = false;                                                                                            // 15634
  }                                                                                                                   // 15635
                                                                                                                      // 15636
  return needMoreData(state);                                                                                         // 15637
}                                                                                                                     // 15638
                                                                                                                      // 15639
                                                                                                                      // 15640
                                                                                                                      // 15641
// if it's past the high water mark, we can push in some more.                                                        // 15642
// Also, if we have no data yet, we can stand some                                                                    // 15643
// more bytes.  This is to work around cases where hwm=0,                                                             // 15644
// such as the repl.  Also, if the push() triggered a                                                                 // 15645
// readable event, and the user called read(largeNumber) such that                                                    // 15646
// needReadable was set, then we ought to push more, so that another                                                  // 15647
// 'readable' event will be triggered.                                                                                // 15648
function needMoreData(state) {                                                                                        // 15649
  return !state.ended &&                                                                                              // 15650
         (state.needReadable ||                                                                                       // 15651
          state.length < state.highWaterMark ||                                                                       // 15652
          state.length === 0);                                                                                        // 15653
}                                                                                                                     // 15654
                                                                                                                      // 15655
// backwards compatibility.                                                                                           // 15656
Readable.prototype.setEncoding = function(enc) {                                                                      // 15657
  if (!StringDecoder)                                                                                                 // 15658
    StringDecoder = require('string_decoder/').StringDecoder;                                                         // 15659
  this._readableState.decoder = new StringDecoder(enc);                                                               // 15660
  this._readableState.encoding = enc;                                                                                 // 15661
  return this;                                                                                                        // 15662
};                                                                                                                    // 15663
                                                                                                                      // 15664
// Don't raise the hwm > 128MB                                                                                        // 15665
var MAX_HWM = 0x800000;                                                                                               // 15666
function roundUpToNextPowerOf2(n) {                                                                                   // 15667
  if (n >= MAX_HWM) {                                                                                                 // 15668
    n = MAX_HWM;                                                                                                      // 15669
  } else {                                                                                                            // 15670
    // Get the next highest power of 2                                                                                // 15671
    n--;                                                                                                              // 15672
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;                                                                     // 15673
    n++;                                                                                                              // 15674
  }                                                                                                                   // 15675
  return n;                                                                                                           // 15676
}                                                                                                                     // 15677
                                                                                                                      // 15678
function howMuchToRead(n, state) {                                                                                    // 15679
  if (state.length === 0 && state.ended)                                                                              // 15680
    return 0;                                                                                                         // 15681
                                                                                                                      // 15682
  if (state.objectMode)                                                                                               // 15683
    return n === 0 ? 0 : 1;                                                                                           // 15684
                                                                                                                      // 15685
  if (isNaN(n) || util.isNull(n)) {                                                                                   // 15686
    // only flow one buffer at a time                                                                                 // 15687
    if (state.flowing && state.buffer.length)                                                                         // 15688
      return state.buffer[0].length;                                                                                  // 15689
    else                                                                                                              // 15690
      return state.length;                                                                                            // 15691
  }                                                                                                                   // 15692
                                                                                                                      // 15693
  if (n <= 0)                                                                                                         // 15694
    return 0;                                                                                                         // 15695
                                                                                                                      // 15696
  // If we're asking for more than the target buffer level,                                                           // 15697
  // then raise the water mark.  Bump up to the next highest                                                          // 15698
  // power of 2, to prevent increasing it excessively in tiny                                                         // 15699
  // amounts.                                                                                                         // 15700
  if (n > state.highWaterMark)                                                                                        // 15701
    state.highWaterMark = roundUpToNextPowerOf2(n);                                                                   // 15702
                                                                                                                      // 15703
  // don't have that much.  return null, unless we've ended.                                                          // 15704
  if (n > state.length) {                                                                                             // 15705
    if (!state.ended) {                                                                                               // 15706
      state.needReadable = true;                                                                                      // 15707
      return 0;                                                                                                       // 15708
    } else                                                                                                            // 15709
      return state.length;                                                                                            // 15710
  }                                                                                                                   // 15711
                                                                                                                      // 15712
  return n;                                                                                                           // 15713
}                                                                                                                     // 15714
                                                                                                                      // 15715
// you can override either this method, or the async _read(n) below.                                                  // 15716
Readable.prototype.read = function(n) {                                                                               // 15717
  debug('read', n);                                                                                                   // 15718
  var state = this._readableState;                                                                                    // 15719
  var nOrig = n;                                                                                                      // 15720
                                                                                                                      // 15721
  if (!util.isNumber(n) || n > 0)                                                                                     // 15722
    state.emittedReadable = false;                                                                                    // 15723
                                                                                                                      // 15724
  // if we're doing read(0) to trigger a readable event, but we                                                       // 15725
  // already have a bunch of data in the buffer, then just trigger                                                    // 15726
  // the 'readable' event and move on.                                                                                // 15727
  if (n === 0 &&                                                                                                      // 15728
      state.needReadable &&                                                                                           // 15729
      (state.length >= state.highWaterMark || state.ended)) {                                                         // 15730
    debug('read: emitReadable', state.length, state.ended);                                                           // 15731
    if (state.length === 0 && state.ended)                                                                            // 15732
      endReadable(this);                                                                                              // 15733
    else                                                                                                              // 15734
      emitReadable(this);                                                                                             // 15735
    return null;                                                                                                      // 15736
  }                                                                                                                   // 15737
                                                                                                                      // 15738
  n = howMuchToRead(n, state);                                                                                        // 15739
                                                                                                                      // 15740
  // if we've ended, and we're now clear, then finish it up.                                                          // 15741
  if (n === 0 && state.ended) {                                                                                       // 15742
    if (state.length === 0)                                                                                           // 15743
      endReadable(this);                                                                                              // 15744
    return null;                                                                                                      // 15745
  }                                                                                                                   // 15746
                                                                                                                      // 15747
  // All the actual chunk generation logic needs to be                                                                // 15748
  // *below* the call to _read.  The reason is that in certain                                                        // 15749
  // synthetic stream cases, such as passthrough streams, _read                                                       // 15750
  // may be a completely synchronous operation which may change                                                       // 15751
  // the state of the read buffer, providing enough data when                                                         // 15752
  // before there was *not* enough.                                                                                   // 15753
  //                                                                                                                  // 15754
  // So, the steps are:                                                                                               // 15755
  // 1. Figure out what the state of things will be after we do                                                       // 15756
  // a read from the buffer.                                                                                          // 15757
  //                                                                                                                  // 15758
  // 2. If that resulting state will trigger a _read, then call _read.                                                // 15759
  // Note that this may be asynchronous, or synchronous.  Yes, it is                                                  // 15760
  // deeply ugly to write APIs this way, but that still doesn't mean                                                  // 15761
  // that the Readable class should behave improperly, as streams are                                                 // 15762
  // designed to be sync/async agnostic.                                                                              // 15763
  // Take note if the _read call is sync or async (ie, if the read call                                               // 15764
  // has returned yet), so that we know whether or not it's safe to emit                                              // 15765
  // 'readable' etc.                                                                                                  // 15766
  //                                                                                                                  // 15767
  // 3. Actually pull the requested chunks out of the buffer and return.                                              // 15768
                                                                                                                      // 15769
  // if we need a readable event, then we need to do some reading.                                                    // 15770
  var doRead = state.needReadable;                                                                                    // 15771
  debug('need readable', doRead);                                                                                     // 15772
                                                                                                                      // 15773
  // if we currently have less than the highWaterMark, then also read some                                            // 15774
  if (state.length === 0 || state.length - n < state.highWaterMark) {                                                 // 15775
    doRead = true;                                                                                                    // 15776
    debug('length less than watermark', doRead);                                                                      // 15777
  }                                                                                                                   // 15778
                                                                                                                      // 15779
  // however, if we've ended, then there's no point, and if we're already                                             // 15780
  // reading, then it's unnecessary.                                                                                  // 15781
  if (state.ended || state.reading) {                                                                                 // 15782
    doRead = false;                                                                                                   // 15783
    debug('reading or ended', doRead);                                                                                // 15784
  }                                                                                                                   // 15785
                                                                                                                      // 15786
  if (doRead) {                                                                                                       // 15787
    debug('do read');                                                                                                 // 15788
    state.reading = true;                                                                                             // 15789
    state.sync = true;                                                                                                // 15790
    // if the length is currently zero, then we *need* a readable event.                                              // 15791
    if (state.length === 0)                                                                                           // 15792
      state.needReadable = true;                                                                                      // 15793
    // call internal read method                                                                                      // 15794
    this._read(state.highWaterMark);                                                                                  // 15795
    state.sync = false;                                                                                               // 15796
  }                                                                                                                   // 15797
                                                                                                                      // 15798
  // If _read pushed data synchronously, then `reading` will be false,                                                // 15799
  // and we need to re-evaluate how much data we can return to the user.                                              // 15800
  if (doRead && !state.reading)                                                                                       // 15801
    n = howMuchToRead(nOrig, state);                                                                                  // 15802
                                                                                                                      // 15803
  var ret;                                                                                                            // 15804
  if (n > 0)                                                                                                          // 15805
    ret = fromList(n, state);                                                                                         // 15806
  else                                                                                                                // 15807
    ret = null;                                                                                                       // 15808
                                                                                                                      // 15809
  if (util.isNull(ret)) {                                                                                             // 15810
    state.needReadable = true;                                                                                        // 15811
    n = 0;                                                                                                            // 15812
  }                                                                                                                   // 15813
                                                                                                                      // 15814
  state.length -= n;                                                                                                  // 15815
                                                                                                                      // 15816
  // If we have nothing in the buffer, then we want to know                                                           // 15817
  // as soon as we *do* get something into the buffer.                                                                // 15818
  if (state.length === 0 && !state.ended)                                                                             // 15819
    state.needReadable = true;                                                                                        // 15820
                                                                                                                      // 15821
  // If we tried to read() past the EOF, then emit end on the next tick.                                              // 15822
  if (nOrig !== n && state.ended && state.length === 0)                                                               // 15823
    endReadable(this);                                                                                                // 15824
                                                                                                                      // 15825
  if (!util.isNull(ret))                                                                                              // 15826
    this.emit('data', ret);                                                                                           // 15827
                                                                                                                      // 15828
  return ret;                                                                                                         // 15829
};                                                                                                                    // 15830
                                                                                                                      // 15831
function chunkInvalid(state, chunk) {                                                                                 // 15832
  var er = null;                                                                                                      // 15833
  if (!util.isBuffer(chunk) &&                                                                                        // 15834
      !util.isString(chunk) &&                                                                                        // 15835
      !util.isNullOrUndefined(chunk) &&                                                                               // 15836
      !state.objectMode) {                                                                                            // 15837
    er = new TypeError('Invalid non-string/buffer chunk');                                                            // 15838
  }                                                                                                                   // 15839
  return er;                                                                                                          // 15840
}                                                                                                                     // 15841
                                                                                                                      // 15842
                                                                                                                      // 15843
function onEofChunk(stream, state) {                                                                                  // 15844
  if (state.decoder && !state.ended) {                                                                                // 15845
    var chunk = state.decoder.end();                                                                                  // 15846
    if (chunk && chunk.length) {                                                                                      // 15847
      state.buffer.push(chunk);                                                                                       // 15848
      state.length += state.objectMode ? 1 : chunk.length;                                                            // 15849
    }                                                                                                                 // 15850
  }                                                                                                                   // 15851
  state.ended = true;                                                                                                 // 15852
                                                                                                                      // 15853
  // emit 'readable' now to make sure it gets picked up.                                                              // 15854
  emitReadable(stream);                                                                                               // 15855
}                                                                                                                     // 15856
                                                                                                                      // 15857
// Don't emit readable right away in sync mode, because this can trigger                                              // 15858
// another read() call => stack overflow.  This way, it might trigger                                                 // 15859
// a nextTick recursion warning, but that's not so bad.                                                               // 15860
function emitReadable(stream) {                                                                                       // 15861
  var state = stream._readableState;                                                                                  // 15862
  state.needReadable = false;                                                                                         // 15863
  if (!state.emittedReadable) {                                                                                       // 15864
    debug('emitReadable', state.flowing);                                                                             // 15865
    state.emittedReadable = true;                                                                                     // 15866
    if (state.sync)                                                                                                   // 15867
      process.nextTick(function() {                                                                                   // 15868
        emitReadable_(stream);                                                                                        // 15869
      });                                                                                                             // 15870
    else                                                                                                              // 15871
      emitReadable_(stream);                                                                                          // 15872
  }                                                                                                                   // 15873
}                                                                                                                     // 15874
                                                                                                                      // 15875
function emitReadable_(stream) {                                                                                      // 15876
  debug('emit readable');                                                                                             // 15877
  stream.emit('readable');                                                                                            // 15878
  flow(stream);                                                                                                       // 15879
}                                                                                                                     // 15880
                                                                                                                      // 15881
                                                                                                                      // 15882
// at this point, the user has presumably seen the 'readable' event,                                                  // 15883
// and called read() to consume some data.  that may have triggered                                                   // 15884
// in turn another _read(n) call, in which case reading = true if                                                     // 15885
// it's in progress.                                                                                                  // 15886
// However, if we're not ended, or reading, and the length < hwm,                                                     // 15887
// then go ahead and try to read some more preemptively.                                                              // 15888
function maybeReadMore(stream, state) {                                                                               // 15889
  if (!state.readingMore) {                                                                                           // 15890
    state.readingMore = true;                                                                                         // 15891
    process.nextTick(function() {                                                                                     // 15892
      maybeReadMore_(stream, state);                                                                                  // 15893
    });                                                                                                               // 15894
  }                                                                                                                   // 15895
}                                                                                                                     // 15896
                                                                                                                      // 15897
function maybeReadMore_(stream, state) {                                                                              // 15898
  var len = state.length;                                                                                             // 15899
  while (!state.reading && !state.flowing && !state.ended &&                                                          // 15900
         state.length < state.highWaterMark) {                                                                        // 15901
    debug('maybeReadMore read 0');                                                                                    // 15902
    stream.read(0);                                                                                                   // 15903
    if (len === state.length)                                                                                         // 15904
      // didn't get any data, stop spinning.                                                                          // 15905
      break;                                                                                                          // 15906
    else                                                                                                              // 15907
      len = state.length;                                                                                             // 15908
  }                                                                                                                   // 15909
  state.readingMore = false;                                                                                          // 15910
}                                                                                                                     // 15911
                                                                                                                      // 15912
// abstract method.  to be overridden in specific implementation classes.                                             // 15913
// call cb(er, data) where data is <= n in length.                                                                    // 15914
// for virtual (non-string, non-buffer) streams, "length" is somewhat                                                 // 15915
// arbitrary, and perhaps not very meaningful.                                                                        // 15916
Readable.prototype._read = function(n) {                                                                              // 15917
  this.emit('error', new Error('not implemented'));                                                                   // 15918
};                                                                                                                    // 15919
                                                                                                                      // 15920
Readable.prototype.pipe = function(dest, pipeOpts) {                                                                  // 15921
  var src = this;                                                                                                     // 15922
  var state = this._readableState;                                                                                    // 15923
                                                                                                                      // 15924
  switch (state.pipesCount) {                                                                                         // 15925
    case 0:                                                                                                           // 15926
      state.pipes = dest;                                                                                             // 15927
      break;                                                                                                          // 15928
    case 1:                                                                                                           // 15929
      state.pipes = [state.pipes, dest];                                                                              // 15930
      break;                                                                                                          // 15931
    default:                                                                                                          // 15932
      state.pipes.push(dest);                                                                                         // 15933
      break;                                                                                                          // 15934
  }                                                                                                                   // 15935
  state.pipesCount += 1;                                                                                              // 15936
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);                                                         // 15937
                                                                                                                      // 15938
  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&                                                                // 15939
              dest !== process.stdout &&                                                                              // 15940
              dest !== process.stderr;                                                                                // 15941
                                                                                                                      // 15942
  var endFn = doEnd ? onend : cleanup;                                                                                // 15943
  if (state.endEmitted)                                                                                               // 15944
    process.nextTick(endFn);                                                                                          // 15945
  else                                                                                                                // 15946
    src.once('end', endFn);                                                                                           // 15947
                                                                                                                      // 15948
  dest.on('unpipe', onunpipe);                                                                                        // 15949
  function onunpipe(readable) {                                                                                       // 15950
    debug('onunpipe');                                                                                                // 15951
    if (readable === src) {                                                                                           // 15952
      cleanup();                                                                                                      // 15953
    }                                                                                                                 // 15954
  }                                                                                                                   // 15955
                                                                                                                      // 15956
  function onend() {                                                                                                  // 15957
    debug('onend');                                                                                                   // 15958
    dest.end();                                                                                                       // 15959
  }                                                                                                                   // 15960
                                                                                                                      // 15961
  // when the dest drains, it reduces the awaitDrain counter                                                          // 15962
  // on the source.  This would be more elegant with a .once()                                                        // 15963
  // handler in flow(), but adding and removing repeatedly is                                                         // 15964
  // too slow.                                                                                                        // 15965
  var ondrain = pipeOnDrain(src);                                                                                     // 15966
  dest.on('drain', ondrain);                                                                                          // 15967
                                                                                                                      // 15968
  function cleanup() {                                                                                                // 15969
    debug('cleanup');                                                                                                 // 15970
    // cleanup event handlers once the pipe is broken                                                                 // 15971
    dest.removeListener('close', onclose);                                                                            // 15972
    dest.removeListener('finish', onfinish);                                                                          // 15973
    dest.removeListener('drain', ondrain);                                                                            // 15974
    dest.removeListener('error', onerror);                                                                            // 15975
    dest.removeListener('unpipe', onunpipe);                                                                          // 15976
    src.removeListener('end', onend);                                                                                 // 15977
    src.removeListener('end', cleanup);                                                                               // 15978
    src.removeListener('data', ondata);                                                                               // 15979
                                                                                                                      // 15980
    // if the reader is waiting for a drain event from this                                                           // 15981
    // specific writer, then it would cause it to never start                                                         // 15982
    // flowing again.                                                                                                 // 15983
    // So, if this is awaiting a drain, then we just call it now.                                                     // 15984
    // If we don't know, then assume that we are waiting for one.                                                     // 15985
    if (state.awaitDrain &&                                                                                           // 15986
        (!dest._writableState || dest._writableState.needDrain))                                                      // 15987
      ondrain();                                                                                                      // 15988
  }                                                                                                                   // 15989
                                                                                                                      // 15990
  src.on('data', ondata);                                                                                             // 15991
  function ondata(chunk) {                                                                                            // 15992
    debug('ondata');                                                                                                  // 15993
    var ret = dest.write(chunk);                                                                                      // 15994
    if (false === ret) {                                                                                              // 15995
      debug('false write response, pause',                                                                            // 15996
            src._readableState.awaitDrain);                                                                           // 15997
      src._readableState.awaitDrain++;                                                                                // 15998
      src.pause();                                                                                                    // 15999
    }                                                                                                                 // 16000
  }                                                                                                                   // 16001
                                                                                                                      // 16002
  // if the dest has an error, then stop piping into it.                                                              // 16003
  // however, don't suppress the throwing behavior for this.                                                          // 16004
  function onerror(er) {                                                                                              // 16005
    debug('onerror', er);                                                                                             // 16006
    unpipe();                                                                                                         // 16007
    dest.removeListener('error', onerror);                                                                            // 16008
    if (EE.listenerCount(dest, 'error') === 0)                                                                        // 16009
      dest.emit('error', er);                                                                                         // 16010
  }                                                                                                                   // 16011
  // This is a brutally ugly hack to make sure that our error handler                                                 // 16012
  // is attached before any userland ones.  NEVER DO THIS.                                                            // 16013
  if (!dest._events || !dest._events.error)                                                                           // 16014
    dest.on('error', onerror);                                                                                        // 16015
  else if (isArray(dest._events.error))                                                                               // 16016
    dest._events.error.unshift(onerror);                                                                              // 16017
  else                                                                                                                // 16018
    dest._events.error = [onerror, dest._events.error];                                                               // 16019
                                                                                                                      // 16020
                                                                                                                      // 16021
                                                                                                                      // 16022
  // Both close and finish should trigger unpipe, but only once.                                                      // 16023
  function onclose() {                                                                                                // 16024
    dest.removeListener('finish', onfinish);                                                                          // 16025
    unpipe();                                                                                                         // 16026
  }                                                                                                                   // 16027
  dest.once('close', onclose);                                                                                        // 16028
  function onfinish() {                                                                                               // 16029
    debug('onfinish');                                                                                                // 16030
    dest.removeListener('close', onclose);                                                                            // 16031
    unpipe();                                                                                                         // 16032
  }                                                                                                                   // 16033
  dest.once('finish', onfinish);                                                                                      // 16034
                                                                                                                      // 16035
  function unpipe() {                                                                                                 // 16036
    debug('unpipe');                                                                                                  // 16037
    src.unpipe(dest);                                                                                                 // 16038
  }                                                                                                                   // 16039
                                                                                                                      // 16040
  // tell the dest that it's being piped to                                                                           // 16041
  dest.emit('pipe', src);                                                                                             // 16042
                                                                                                                      // 16043
  // start the flow if it hasn't been started already.                                                                // 16044
  if (!state.flowing) {                                                                                               // 16045
    debug('pipe resume');                                                                                             // 16046
    src.resume();                                                                                                     // 16047
  }                                                                                                                   // 16048
                                                                                                                      // 16049
  return dest;                                                                                                        // 16050
};                                                                                                                    // 16051
                                                                                                                      // 16052
function pipeOnDrain(src) {                                                                                           // 16053
  return function() {                                                                                                 // 16054
    var state = src._readableState;                                                                                   // 16055
    debug('pipeOnDrain', state.awaitDrain);                                                                           // 16056
    if (state.awaitDrain)                                                                                             // 16057
      state.awaitDrain--;                                                                                             // 16058
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {                                                    // 16059
      state.flowing = true;                                                                                           // 16060
      flow(src);                                                                                                      // 16061
    }                                                                                                                 // 16062
  };                                                                                                                  // 16063
}                                                                                                                     // 16064
                                                                                                                      // 16065
                                                                                                                      // 16066
Readable.prototype.unpipe = function(dest) {                                                                          // 16067
  var state = this._readableState;                                                                                    // 16068
                                                                                                                      // 16069
  // if we're not piping anywhere, then do nothing.                                                                   // 16070
  if (state.pipesCount === 0)                                                                                         // 16071
    return this;                                                                                                      // 16072
                                                                                                                      // 16073
  // just one destination.  most common case.                                                                         // 16074
  if (state.pipesCount === 1) {                                                                                       // 16075
    // passed in one, but it's not the right one.                                                                     // 16076
    if (dest && dest !== state.pipes)                                                                                 // 16077
      return this;                                                                                                    // 16078
                                                                                                                      // 16079
    if (!dest)                                                                                                        // 16080
      dest = state.pipes;                                                                                             // 16081
                                                                                                                      // 16082
    // got a match.                                                                                                   // 16083
    state.pipes = null;                                                                                               // 16084
    state.pipesCount = 0;                                                                                             // 16085
    state.flowing = false;                                                                                            // 16086
    if (dest)                                                                                                         // 16087
      dest.emit('unpipe', this);                                                                                      // 16088
    return this;                                                                                                      // 16089
  }                                                                                                                   // 16090
                                                                                                                      // 16091
  // slow case. multiple pipe destinations.                                                                           // 16092
                                                                                                                      // 16093
  if (!dest) {                                                                                                        // 16094
    // remove all.                                                                                                    // 16095
    var dests = state.pipes;                                                                                          // 16096
    var len = state.pipesCount;                                                                                       // 16097
    state.pipes = null;                                                                                               // 16098
    state.pipesCount = 0;                                                                                             // 16099
    state.flowing = false;                                                                                            // 16100
                                                                                                                      // 16101
    for (var i = 0; i < len; i++)                                                                                     // 16102
      dests[i].emit('unpipe', this);                                                                                  // 16103
    return this;                                                                                                      // 16104
  }                                                                                                                   // 16105
                                                                                                                      // 16106
  // try to find the right one.                                                                                       // 16107
  var i = indexOf(state.pipes, dest);                                                                                 // 16108
  if (i === -1)                                                                                                       // 16109
    return this;                                                                                                      // 16110
                                                                                                                      // 16111
  state.pipes.splice(i, 1);                                                                                           // 16112
  state.pipesCount -= 1;                                                                                              // 16113
  if (state.pipesCount === 1)                                                                                         // 16114
    state.pipes = state.pipes[0];                                                                                     // 16115
                                                                                                                      // 16116
  dest.emit('unpipe', this);                                                                                          // 16117
                                                                                                                      // 16118
  return this;                                                                                                        // 16119
};                                                                                                                    // 16120
                                                                                                                      // 16121
// set up data events if they are asked for                                                                           // 16122
// Ensure readable listeners eventually get something                                                                 // 16123
Readable.prototype.on = function(ev, fn) {                                                                            // 16124
  var res = Stream.prototype.on.call(this, ev, fn);                                                                   // 16125
                                                                                                                      // 16126
  // If listening to data, and it has not explicitly been paused,                                                     // 16127
  // then call resume to start the flow of data on the next tick.                                                     // 16128
  if (ev === 'data' && false !== this._readableState.flowing) {                                                       // 16129
    this.resume();                                                                                                    // 16130
  }                                                                                                                   // 16131
                                                                                                                      // 16132
  if (ev === 'readable' && this.readable) {                                                                           // 16133
    var state = this._readableState;                                                                                  // 16134
    if (!state.readableListening) {                                                                                   // 16135
      state.readableListening = true;                                                                                 // 16136
      state.emittedReadable = false;                                                                                  // 16137
      state.needReadable = true;                                                                                      // 16138
      if (!state.reading) {                                                                                           // 16139
        var self = this;                                                                                              // 16140
        process.nextTick(function() {                                                                                 // 16141
          debug('readable nexttick read 0');                                                                          // 16142
          self.read(0);                                                                                               // 16143
        });                                                                                                           // 16144
      } else if (state.length) {                                                                                      // 16145
        emitReadable(this, state);                                                                                    // 16146
      }                                                                                                               // 16147
    }                                                                                                                 // 16148
  }                                                                                                                   // 16149
                                                                                                                      // 16150
  return res;                                                                                                         // 16151
};                                                                                                                    // 16152
Readable.prototype.addListener = Readable.prototype.on;                                                               // 16153
                                                                                                                      // 16154
// pause() and resume() are remnants of the legacy readable stream API                                                // 16155
// If the user uses them, then switch into old mode.                                                                  // 16156
Readable.prototype.resume = function() {                                                                              // 16157
  var state = this._readableState;                                                                                    // 16158
  if (!state.flowing) {                                                                                               // 16159
    debug('resume');                                                                                                  // 16160
    state.flowing = true;                                                                                             // 16161
    if (!state.reading) {                                                                                             // 16162
      debug('resume read 0');                                                                                         // 16163
      this.read(0);                                                                                                   // 16164
    }                                                                                                                 // 16165
    resume(this, state);                                                                                              // 16166
  }                                                                                                                   // 16167
  return this;                                                                                                        // 16168
};                                                                                                                    // 16169
                                                                                                                      // 16170
function resume(stream, state) {                                                                                      // 16171
  if (!state.resumeScheduled) {                                                                                       // 16172
    state.resumeScheduled = true;                                                                                     // 16173
    process.nextTick(function() {                                                                                     // 16174
      resume_(stream, state);                                                                                         // 16175
    });                                                                                                               // 16176
  }                                                                                                                   // 16177
}                                                                                                                     // 16178
                                                                                                                      // 16179
function resume_(stream, state) {                                                                                     // 16180
  state.resumeScheduled = false;                                                                                      // 16181
  stream.emit('resume');                                                                                              // 16182
  flow(stream);                                                                                                       // 16183
  if (state.flowing && !state.reading)                                                                                // 16184
    stream.read(0);                                                                                                   // 16185
}                                                                                                                     // 16186
                                                                                                                      // 16187
Readable.prototype.pause = function() {                                                                               // 16188
  debug('call pause flowing=%j', this._readableState.flowing);                                                        // 16189
  if (false !== this._readableState.flowing) {                                                                        // 16190
    debug('pause');                                                                                                   // 16191
    this._readableState.flowing = false;                                                                              // 16192
    this.emit('pause');                                                                                               // 16193
  }                                                                                                                   // 16194
  return this;                                                                                                        // 16195
};                                                                                                                    // 16196
                                                                                                                      // 16197
function flow(stream) {                                                                                               // 16198
  var state = stream._readableState;                                                                                  // 16199
  debug('flow', state.flowing);                                                                                       // 16200
  if (state.flowing) {                                                                                                // 16201
    do {                                                                                                              // 16202
      var chunk = stream.read();                                                                                      // 16203
    } while (null !== chunk && state.flowing);                                                                        // 16204
  }                                                                                                                   // 16205
}                                                                                                                     // 16206
                                                                                                                      // 16207
// wrap an old-style stream as the async data source.                                                                 // 16208
// This is *not* part of the readable stream interface.                                                               // 16209
// It is an ugly unfortunate mess of history.                                                                         // 16210
Readable.prototype.wrap = function(stream) {                                                                          // 16211
  var state = this._readableState;                                                                                    // 16212
  var paused = false;                                                                                                 // 16213
                                                                                                                      // 16214
  var self = this;                                                                                                    // 16215
  stream.on('end', function() {                                                                                       // 16216
    debug('wrapped end');                                                                                             // 16217
    if (state.decoder && !state.ended) {                                                                              // 16218
      var chunk = state.decoder.end();                                                                                // 16219
      if (chunk && chunk.length)                                                                                      // 16220
        self.push(chunk);                                                                                             // 16221
    }                                                                                                                 // 16222
                                                                                                                      // 16223
    self.push(null);                                                                                                  // 16224
  });                                                                                                                 // 16225
                                                                                                                      // 16226
  stream.on('data', function(chunk) {                                                                                 // 16227
    debug('wrapped data');                                                                                            // 16228
    if (state.decoder)                                                                                                // 16229
      chunk = state.decoder.write(chunk);                                                                             // 16230
    if (!chunk || !state.objectMode && !chunk.length)                                                                 // 16231
      return;                                                                                                         // 16232
                                                                                                                      // 16233
    var ret = self.push(chunk);                                                                                       // 16234
    if (!ret) {                                                                                                       // 16235
      paused = true;                                                                                                  // 16236
      stream.pause();                                                                                                 // 16237
    }                                                                                                                 // 16238
  });                                                                                                                 // 16239
                                                                                                                      // 16240
  // proxy all the other methods.                                                                                     // 16241
  // important when wrapping filters and duplexes.                                                                    // 16242
  for (var i in stream) {                                                                                             // 16243
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {                                                    // 16244
      this[i] = function(method) { return function() {                                                                // 16245
        return stream[method].apply(stream, arguments);                                                               // 16246
      }}(i);                                                                                                          // 16247
    }                                                                                                                 // 16248
  }                                                                                                                   // 16249
                                                                                                                      // 16250
  // proxy certain important events.                                                                                  // 16251
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];                                                      // 16252
  forEach(events, function(ev) {                                                                                      // 16253
    stream.on(ev, self.emit.bind(self, ev));                                                                          // 16254
  });                                                                                                                 // 16255
                                                                                                                      // 16256
  // when we try to consume some more bytes, simply unpause the                                                       // 16257
  // underlying stream.                                                                                               // 16258
  self._read = function(n) {                                                                                          // 16259
    debug('wrapped _read', n);                                                                                        // 16260
    if (paused) {                                                                                                     // 16261
      paused = false;                                                                                                 // 16262
      stream.resume();                                                                                                // 16263
    }                                                                                                                 // 16264
  };                                                                                                                  // 16265
                                                                                                                      // 16266
  return self;                                                                                                        // 16267
};                                                                                                                    // 16268
                                                                                                                      // 16269
                                                                                                                      // 16270
                                                                                                                      // 16271
// exposed for testing purposes only.                                                                                 // 16272
Readable._fromList = fromList;                                                                                        // 16273
                                                                                                                      // 16274
// Pluck off n bytes from an array of buffers.                                                                        // 16275
// Length is the combined lengths of all the buffers in the list.                                                     // 16276
function fromList(n, state) {                                                                                         // 16277
  var list = state.buffer;                                                                                            // 16278
  var length = state.length;                                                                                          // 16279
  var stringMode = !!state.decoder;                                                                                   // 16280
  var objectMode = !!state.objectMode;                                                                                // 16281
  var ret;                                                                                                            // 16282
                                                                                                                      // 16283
  // nothing in the list, definitely empty.                                                                           // 16284
  if (list.length === 0)                                                                                              // 16285
    return null;                                                                                                      // 16286
                                                                                                                      // 16287
  if (length === 0)                                                                                                   // 16288
    ret = null;                                                                                                       // 16289
  else if (objectMode)                                                                                                // 16290
    ret = list.shift();                                                                                               // 16291
  else if (!n || n >= length) {                                                                                       // 16292
    // read it all, truncate the array.                                                                               // 16293
    if (stringMode)                                                                                                   // 16294
      ret = list.join('');                                                                                            // 16295
    else                                                                                                              // 16296
      ret = Buffer.concat(list, length);                                                                              // 16297
    list.length = 0;                                                                                                  // 16298
  } else {                                                                                                            // 16299
    // read just some of it.                                                                                          // 16300
    if (n < list[0].length) {                                                                                         // 16301
      // just take a part of the first list item.                                                                     // 16302
      // slice is the same for buffers and strings.                                                                   // 16303
      var buf = list[0];                                                                                              // 16304
      ret = buf.slice(0, n);                                                                                          // 16305
      list[0] = buf.slice(n);                                                                                         // 16306
    } else if (n === list[0].length) {                                                                                // 16307
      // first list is a perfect match                                                                                // 16308
      ret = list.shift();                                                                                             // 16309
    } else {                                                                                                          // 16310
      // complex case.                                                                                                // 16311
      // we have enough to cover it, but it spans past the first buffer.                                              // 16312
      if (stringMode)                                                                                                 // 16313
        ret = '';                                                                                                     // 16314
      else                                                                                                            // 16315
        ret = new Buffer(n);                                                                                          // 16316
                                                                                                                      // 16317
      var c = 0;                                                                                                      // 16318
      for (var i = 0, l = list.length; i < l && c < n; i++) {                                                         // 16319
        var buf = list[0];                                                                                            // 16320
        var cpy = Math.min(n - c, buf.length);                                                                        // 16321
                                                                                                                      // 16322
        if (stringMode)                                                                                               // 16323
          ret += buf.slice(0, cpy);                                                                                   // 16324
        else                                                                                                          // 16325
          buf.copy(ret, c, 0, cpy);                                                                                   // 16326
                                                                                                                      // 16327
        if (cpy < buf.length)                                                                                         // 16328
          list[0] = buf.slice(cpy);                                                                                   // 16329
        else                                                                                                          // 16330
          list.shift();                                                                                               // 16331
                                                                                                                      // 16332
        c += cpy;                                                                                                     // 16333
      }                                                                                                               // 16334
    }                                                                                                                 // 16335
  }                                                                                                                   // 16336
                                                                                                                      // 16337
  return ret;                                                                                                         // 16338
}                                                                                                                     // 16339
                                                                                                                      // 16340
function endReadable(stream) {                                                                                        // 16341
  var state = stream._readableState;                                                                                  // 16342
                                                                                                                      // 16343
  // If we get here before consuming all the bytes, then that is a                                                    // 16344
  // bug in node.  Should never happen.                                                                               // 16345
  if (state.length > 0)                                                                                               // 16346
    throw new Error('endReadable called on non-empty stream');                                                        // 16347
                                                                                                                      // 16348
  if (!state.endEmitted) {                                                                                            // 16349
    state.ended = true;                                                                                               // 16350
    process.nextTick(function() {                                                                                     // 16351
      // Check that we didn't get one last unshift.                                                                   // 16352
      if (!state.endEmitted && state.length === 0) {                                                                  // 16353
        state.endEmitted = true;                                                                                      // 16354
        stream.readable = false;                                                                                      // 16355
        stream.emit('end');                                                                                           // 16356
      }                                                                                                               // 16357
    });                                                                                                               // 16358
  }                                                                                                                   // 16359
}                                                                                                                     // 16360
                                                                                                                      // 16361
function forEach (xs, f) {                                                                                            // 16362
  for (var i = 0, l = xs.length; i < l; i++) {                                                                        // 16363
    f(xs[i], i);                                                                                                      // 16364
  }                                                                                                                   // 16365
}                                                                                                                     // 16366
                                                                                                                      // 16367
function indexOf (xs, x) {                                                                                            // 16368
  for (var i = 0, l = xs.length; i < l; i++) {                                                                        // 16369
    if (xs[i] === x) return i;                                                                                        // 16370
  }                                                                                                                   // 16371
  return -1;                                                                                                          // 16372
}                                                                                                                     // 16373
                                                                                                                      // 16374
}).call(this,require('_process'))                                                                                     // 16375
                                                                                                                      // 16376
},{"./_stream_duplex":148,"_process":146,"buffer":2,"core-util-is":153,"events":143,"inherits":144,"isarray":145,"stream":158,"string_decoder/":159,"util":1}],151:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.                                                                // 16378
//                                                                                                                    // 16379
// Permission is hereby granted, free of charge, to any person obtaining a                                            // 16380
// copy of this software and associated documentation files (the                                                      // 16381
// "Software"), to deal in the Software without restriction, including                                                // 16382
// without limitation the rights to use, copy, modify, merge, publish,                                                // 16383
// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 16384
// persons to whom the Software is furnished to do so, subject to the                                                 // 16385
// following conditions:                                                                                              // 16386
//                                                                                                                    // 16387
// The above copyright notice and this permission notice shall be included                                            // 16388
// in all copies or substantial portions of the Software.                                                             // 16389
//                                                                                                                    // 16390
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 16391
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 16392
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 16393
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 16394
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 16395
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 16396
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 16397
                                                                                                                      // 16398
                                                                                                                      // 16399
// a transform stream is a readable/writable stream where you do                                                      // 16400
// something with the data.  Sometimes it's called a "filter",                                                        // 16401
// but that's not a great name for it, since that implies a thing where                                               // 16402
// some bits pass through, and others are simply ignored.  (That would                                                // 16403
// be a valid example of a transform, of course.)                                                                     // 16404
//                                                                                                                    // 16405
// While the output is causally related to the input, it's not a                                                      // 16406
// necessarily symmetric or synchronous transformation.  For example,                                                 // 16407
// a zlib stream might take multiple plain-text writes(), and then                                                    // 16408
// emit a single compressed chunk some time in the future.                                                            // 16409
//                                                                                                                    // 16410
// Here's how this works:                                                                                             // 16411
//                                                                                                                    // 16412
// The Transform stream has all the aspects of the readable and writable                                              // 16413
// stream classes.  When you write(chunk), that calls _write(chunk,cb)                                                // 16414
// internally, and returns false if there's a lot of pending writes                                                   // 16415
// buffered up.  When you call read(), that calls _read(n) until                                                      // 16416
// there's enough pending readable data buffered up.                                                                  // 16417
//                                                                                                                    // 16418
// In a transform stream, the written data is placed in a buffer.  When                                               // 16419
// _read(n) is called, it transforms the queued up data, calling the                                                  // 16420
// buffered _write cb's as it consumes chunks.  If consuming a single                                                 // 16421
// written chunk would result in multiple output chunks, then the first                                               // 16422
// outputted bit calls the readcb, and subsequent chunks just go into                                                 // 16423
// the read buffer, and will cause it to emit 'readable' if necessary.                                                // 16424
//                                                                                                                    // 16425
// This way, back-pressure is actually determined by the reading side,                                                // 16426
// since _read has to be called to start processing a new chunk.  However,                                            // 16427
// a pathological inflate type of transform can cause excessive buffering                                             // 16428
// here.  For example, imagine a stream where every byte of input is                                                  // 16429
// interpreted as an integer from 0-255, and then results in that many                                                // 16430
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in                                                // 16431
// 1kb of data being output.  In this case, you could write a very small                                              // 16432
// amount of input, and end up with a very large amount of output.  In                                                // 16433
// such a pathological inflating mechanism, there'd be no way to tell                                                 // 16434
// the system to stop doing the transform.  A single 4MB write could                                                  // 16435
// cause the system to run out of memory.                                                                             // 16436
//                                                                                                                    // 16437
// However, even in such a pathological case, only a single written chunk                                             // 16438
// would be consumed, and then the rest would wait (un-transformed) until                                             // 16439
// the results of the previous transformed chunk were consumed.                                                       // 16440
                                                                                                                      // 16441
module.exports = Transform;                                                                                           // 16442
                                                                                                                      // 16443
var Duplex = require('./_stream_duplex');                                                                             // 16444
                                                                                                                      // 16445
/*<replacement>*/                                                                                                     // 16446
var util = require('core-util-is');                                                                                   // 16447
util.inherits = require('inherits');                                                                                  // 16448
/*</replacement>*/                                                                                                    // 16449
                                                                                                                      // 16450
util.inherits(Transform, Duplex);                                                                                     // 16451
                                                                                                                      // 16452
                                                                                                                      // 16453
function TransformState(options, stream) {                                                                            // 16454
  this.afterTransform = function(er, data) {                                                                          // 16455
    return afterTransform(stream, er, data);                                                                          // 16456
  };                                                                                                                  // 16457
                                                                                                                      // 16458
  this.needTransform = false;                                                                                         // 16459
  this.transforming = false;                                                                                          // 16460
  this.writecb = null;                                                                                                // 16461
  this.writechunk = null;                                                                                             // 16462
}                                                                                                                     // 16463
                                                                                                                      // 16464
function afterTransform(stream, er, data) {                                                                           // 16465
  var ts = stream._transformState;                                                                                    // 16466
  ts.transforming = false;                                                                                            // 16467
                                                                                                                      // 16468
  var cb = ts.writecb;                                                                                                // 16469
                                                                                                                      // 16470
  if (!cb)                                                                                                            // 16471
    return stream.emit('error', new Error('no writecb in Transform class'));                                          // 16472
                                                                                                                      // 16473
  ts.writechunk = null;                                                                                               // 16474
  ts.writecb = null;                                                                                                  // 16475
                                                                                                                      // 16476
  if (!util.isNullOrUndefined(data))                                                                                  // 16477
    stream.push(data);                                                                                                // 16478
                                                                                                                      // 16479
  if (cb)                                                                                                             // 16480
    cb(er);                                                                                                           // 16481
                                                                                                                      // 16482
  var rs = stream._readableState;                                                                                     // 16483
  rs.reading = false;                                                                                                 // 16484
  if (rs.needReadable || rs.length < rs.highWaterMark) {                                                              // 16485
    stream._read(rs.highWaterMark);                                                                                   // 16486
  }                                                                                                                   // 16487
}                                                                                                                     // 16488
                                                                                                                      // 16489
                                                                                                                      // 16490
function Transform(options) {                                                                                         // 16491
  if (!(this instanceof Transform))                                                                                   // 16492
    return new Transform(options);                                                                                    // 16493
                                                                                                                      // 16494
  Duplex.call(this, options);                                                                                         // 16495
                                                                                                                      // 16496
  this._transformState = new TransformState(options, this);                                                           // 16497
                                                                                                                      // 16498
  // when the writable side finishes, then flush out anything remaining.                                              // 16499
  var stream = this;                                                                                                  // 16500
                                                                                                                      // 16501
  // start out asking for a readable event once data is transformed.                                                  // 16502
  this._readableState.needReadable = true;                                                                            // 16503
                                                                                                                      // 16504
  // we have implemented the _read method, and done the other things                                                  // 16505
  // that Readable wants before the first _read call, so unset the                                                    // 16506
  // sync guard flag.                                                                                                 // 16507
  this._readableState.sync = false;                                                                                   // 16508
                                                                                                                      // 16509
  this.once('prefinish', function() {                                                                                 // 16510
    if (util.isFunction(this._flush))                                                                                 // 16511
      this._flush(function(er) {                                                                                      // 16512
        done(stream, er);                                                                                             // 16513
      });                                                                                                             // 16514
    else                                                                                                              // 16515
      done(stream);                                                                                                   // 16516
  });                                                                                                                 // 16517
}                                                                                                                     // 16518
                                                                                                                      // 16519
Transform.prototype.push = function(chunk, encoding) {                                                                // 16520
  this._transformState.needTransform = false;                                                                         // 16521
  return Duplex.prototype.push.call(this, chunk, encoding);                                                           // 16522
};                                                                                                                    // 16523
                                                                                                                      // 16524
// This is the part where you do stuff!                                                                               // 16525
// override this function in implementation classes.                                                                  // 16526
// 'chunk' is an input chunk.                                                                                         // 16527
//                                                                                                                    // 16528
// Call `push(newChunk)` to pass along transformed output                                                             // 16529
// to the readable side.  You may call 'push' zero or more times.                                                     // 16530
//                                                                                                                    // 16531
// Call `cb(err)` when you are done with this chunk.  If you pass                                                     // 16532
// an error, then that'll put the hurt on the whole operation.  If you                                                // 16533
// never call cb(), then you'll never get another chunk.                                                              // 16534
Transform.prototype._transform = function(chunk, encoding, cb) {                                                      // 16535
  throw new Error('not implemented');                                                                                 // 16536
};                                                                                                                    // 16537
                                                                                                                      // 16538
Transform.prototype._write = function(chunk, encoding, cb) {                                                          // 16539
  var ts = this._transformState;                                                                                      // 16540
  ts.writecb = cb;                                                                                                    // 16541
  ts.writechunk = chunk;                                                                                              // 16542
  ts.writeencoding = encoding;                                                                                        // 16543
  if (!ts.transforming) {                                                                                             // 16544
    var rs = this._readableState;                                                                                     // 16545
    if (ts.needTransform ||                                                                                           // 16546
        rs.needReadable ||                                                                                            // 16547
        rs.length < rs.highWaterMark)                                                                                 // 16548
      this._read(rs.highWaterMark);                                                                                   // 16549
  }                                                                                                                   // 16550
};                                                                                                                    // 16551
                                                                                                                      // 16552
// Doesn't matter what the args are here.                                                                             // 16553
// _transform does all the work.                                                                                      // 16554
// That we got here means that the readable side wants more data.                                                     // 16555
Transform.prototype._read = function(n) {                                                                             // 16556
  var ts = this._transformState;                                                                                      // 16557
                                                                                                                      // 16558
  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {                                                // 16559
    ts.transforming = true;                                                                                           // 16560
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);                                              // 16561
  } else {                                                                                                            // 16562
    // mark that we need a transform, so that any data that comes in                                                  // 16563
    // will get processed, now that we've asked for it.                                                               // 16564
    ts.needTransform = true;                                                                                          // 16565
  }                                                                                                                   // 16566
};                                                                                                                    // 16567
                                                                                                                      // 16568
                                                                                                                      // 16569
function done(stream, er) {                                                                                           // 16570
  if (er)                                                                                                             // 16571
    return stream.emit('error', er);                                                                                  // 16572
                                                                                                                      // 16573
  // if there's nothing in the write buffer, then that means                                                          // 16574
  // that nothing more will ever be provided                                                                          // 16575
  var ws = stream._writableState;                                                                                     // 16576
  var ts = stream._transformState;                                                                                    // 16577
                                                                                                                      // 16578
  if (ws.length)                                                                                                      // 16579
    throw new Error('calling transform done when ws.length != 0');                                                    // 16580
                                                                                                                      // 16581
  if (ts.transforming)                                                                                                // 16582
    throw new Error('calling transform done when still transforming');                                                // 16583
                                                                                                                      // 16584
  return stream.push(null);                                                                                           // 16585
}                                                                                                                     // 16586
                                                                                                                      // 16587
},{"./_stream_duplex":148,"core-util-is":153,"inherits":144}],152:[function(require,module,exports){                  // 16588
(function (process){                                                                                                  // 16589
// Copyright Joyent, Inc. and other Node contributors.                                                                // 16590
//                                                                                                                    // 16591
// Permission is hereby granted, free of charge, to any person obtaining a                                            // 16592
// copy of this software and associated documentation files (the                                                      // 16593
// "Software"), to deal in the Software without restriction, including                                                // 16594
// without limitation the rights to use, copy, modify, merge, publish,                                                // 16595
// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 16596
// persons to whom the Software is furnished to do so, subject to the                                                 // 16597
// following conditions:                                                                                              // 16598
//                                                                                                                    // 16599
// The above copyright notice and this permission notice shall be included                                            // 16600
// in all copies or substantial portions of the Software.                                                             // 16601
//                                                                                                                    // 16602
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 16603
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 16604
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 16605
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 16606
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 16607
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 16608
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 16609
                                                                                                                      // 16610
// A bit simpler than readable streams.                                                                               // 16611
// Implement an async ._write(chunk, cb), and it'll handle all                                                        // 16612
// the drain event emission and buffering.                                                                            // 16613
                                                                                                                      // 16614
module.exports = Writable;                                                                                            // 16615
                                                                                                                      // 16616
/*<replacement>*/                                                                                                     // 16617
var Buffer = require('buffer').Buffer;                                                                                // 16618
/*</replacement>*/                                                                                                    // 16619
                                                                                                                      // 16620
Writable.WritableState = WritableState;                                                                               // 16621
                                                                                                                      // 16622
                                                                                                                      // 16623
/*<replacement>*/                                                                                                     // 16624
var util = require('core-util-is');                                                                                   // 16625
util.inherits = require('inherits');                                                                                  // 16626
/*</replacement>*/                                                                                                    // 16627
                                                                                                                      // 16628
var Stream = require('stream');                                                                                       // 16629
                                                                                                                      // 16630
util.inherits(Writable, Stream);                                                                                      // 16631
                                                                                                                      // 16632
function WriteReq(chunk, encoding, cb) {                                                                              // 16633
  this.chunk = chunk;                                                                                                 // 16634
  this.encoding = encoding;                                                                                           // 16635
  this.callback = cb;                                                                                                 // 16636
}                                                                                                                     // 16637
                                                                                                                      // 16638
function WritableState(options, stream) {                                                                             // 16639
  var Duplex = require('./_stream_duplex');                                                                           // 16640
                                                                                                                      // 16641
  options = options || {};                                                                                            // 16642
                                                                                                                      // 16643
  // the point at which write() starts returning false                                                                // 16644
  // Note: 0 is a valid value, means that we always return false if                                                   // 16645
  // the entire buffer is not flushed immediately on write()                                                          // 16646
  var hwm = options.highWaterMark;                                                                                    // 16647
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;                                                               // 16648
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;                                                         // 16649
                                                                                                                      // 16650
  // object stream flag to indicate whether or not this stream                                                        // 16651
  // contains buffers or objects.                                                                                     // 16652
  this.objectMode = !!options.objectMode;                                                                             // 16653
                                                                                                                      // 16654
  if (stream instanceof Duplex)                                                                                       // 16655
    this.objectMode = this.objectMode || !!options.writableObjectMode;                                                // 16656
                                                                                                                      // 16657
  // cast to ints.                                                                                                    // 16658
  this.highWaterMark = ~~this.highWaterMark;                                                                          // 16659
                                                                                                                      // 16660
  this.needDrain = false;                                                                                             // 16661
  // at the start of calling end()                                                                                    // 16662
  this.ending = false;                                                                                                // 16663
  // when end() has been called, and returned                                                                         // 16664
  this.ended = false;                                                                                                 // 16665
  // when 'finish' is emitted                                                                                         // 16666
  this.finished = false;                                                                                              // 16667
                                                                                                                      // 16668
  // should we decode strings into buffers before passing to _write?                                                  // 16669
  // this is here so that some node-core streams can optimize string                                                  // 16670
  // handling at a lower level.                                                                                       // 16671
  var noDecode = options.decodeStrings === false;                                                                     // 16672
  this.decodeStrings = !noDecode;                                                                                     // 16673
                                                                                                                      // 16674
  // Crypto is kind of old and crusty.  Historically, its default string                                              // 16675
  // encoding is 'binary' so we have to make this configurable.                                                       // 16676
  // Everything else in the universe uses 'utf8', though.                                                             // 16677
  this.defaultEncoding = options.defaultEncoding || 'utf8';                                                           // 16678
                                                                                                                      // 16679
  // not an actual buffer we keep track of, but a measurement                                                         // 16680
  // of how much we're waiting to get pushed to some underlying                                                       // 16681
  // socket or file.                                                                                                  // 16682
  this.length = 0;                                                                                                    // 16683
                                                                                                                      // 16684
  // a flag to see when we're in the middle of a write.                                                               // 16685
  this.writing = false;                                                                                               // 16686
                                                                                                                      // 16687
  // when true all writes will be buffered until .uncork() call                                                       // 16688
  this.corked = 0;                                                                                                    // 16689
                                                                                                                      // 16690
  // a flag to be able to tell if the onwrite cb is called immediately,                                               // 16691
  // or on a later tick.  We set this to true at first, because any                                                   // 16692
  // actions that shouldn't happen until "later" should generally also                                                // 16693
  // not happen before the first write call.                                                                          // 16694
  this.sync = true;                                                                                                   // 16695
                                                                                                                      // 16696
  // a flag to know if we're processing previously buffered items, which                                              // 16697
  // may call the _write() callback in the same tick, so that we don't                                                // 16698
  // end up in an overlapped onwrite situation.                                                                       // 16699
  this.bufferProcessing = false;                                                                                      // 16700
                                                                                                                      // 16701
  // the callback that's passed to _write(chunk,cb)                                                                   // 16702
  this.onwrite = function(er) {                                                                                       // 16703
    onwrite(stream, er);                                                                                              // 16704
  };                                                                                                                  // 16705
                                                                                                                      // 16706
  // the callback that the user supplies to write(chunk,encoding,cb)                                                  // 16707
  this.writecb = null;                                                                                                // 16708
                                                                                                                      // 16709
  // the amount that is being written when _write is called.                                                          // 16710
  this.writelen = 0;                                                                                                  // 16711
                                                                                                                      // 16712
  this.buffer = [];                                                                                                   // 16713
                                                                                                                      // 16714
  // number of pending user-supplied write callbacks                                                                  // 16715
  // this must be 0 before 'finish' can be emitted                                                                    // 16716
  this.pendingcb = 0;                                                                                                 // 16717
                                                                                                                      // 16718
  // emit prefinish if the only thing we're waiting for is _write cbs                                                 // 16719
  // This is relevant for synchronous Transform streams                                                               // 16720
  this.prefinished = false;                                                                                           // 16721
                                                                                                                      // 16722
  // True if the error was already emitted and should not be thrown again                                             // 16723
  this.errorEmitted = false;                                                                                          // 16724
}                                                                                                                     // 16725
                                                                                                                      // 16726
function Writable(options) {                                                                                          // 16727
  var Duplex = require('./_stream_duplex');                                                                           // 16728
                                                                                                                      // 16729
  // Writable ctor is applied to Duplexes, though they're not                                                         // 16730
  // instanceof Writable, they're instanceof Readable.                                                                // 16731
  if (!(this instanceof Writable) && !(this instanceof Duplex))                                                       // 16732
    return new Writable(options);                                                                                     // 16733
                                                                                                                      // 16734
  this._writableState = new WritableState(options, this);                                                             // 16735
                                                                                                                      // 16736
  // legacy.                                                                                                          // 16737
  this.writable = true;                                                                                               // 16738
                                                                                                                      // 16739
  Stream.call(this);                                                                                                  // 16740
}                                                                                                                     // 16741
                                                                                                                      // 16742
// Otherwise people can pipe Writable streams, which is just wrong.                                                   // 16743
Writable.prototype.pipe = function() {                                                                                // 16744
  this.emit('error', new Error('Cannot pipe. Not readable.'));                                                        // 16745
};                                                                                                                    // 16746
                                                                                                                      // 16747
                                                                                                                      // 16748
function writeAfterEnd(stream, state, cb) {                                                                           // 16749
  var er = new Error('write after end');                                                                              // 16750
  // TODO: defer error events consistently everywhere, not just the cb                                                // 16751
  stream.emit('error', er);                                                                                           // 16752
  process.nextTick(function() {                                                                                       // 16753
    cb(er);                                                                                                           // 16754
  });                                                                                                                 // 16755
}                                                                                                                     // 16756
                                                                                                                      // 16757
// If we get something that is not a buffer, string, null, or undefined,                                              // 16758
// and we're not in objectMode, then that's an error.                                                                 // 16759
// Otherwise stream chunks are all considered to be of length=1, and the                                              // 16760
// watermarks determine how many objects to keep in the buffer, rather than                                           // 16761
// how many bytes or characters.                                                                                      // 16762
function validChunk(stream, state, chunk, cb) {                                                                       // 16763
  var valid = true;                                                                                                   // 16764
  if (!util.isBuffer(chunk) &&                                                                                        // 16765
      !util.isString(chunk) &&                                                                                        // 16766
      !util.isNullOrUndefined(chunk) &&                                                                               // 16767
      !state.objectMode) {                                                                                            // 16768
    var er = new TypeError('Invalid non-string/buffer chunk');                                                        // 16769
    stream.emit('error', er);                                                                                         // 16770
    process.nextTick(function() {                                                                                     // 16771
      cb(er);                                                                                                         // 16772
    });                                                                                                               // 16773
    valid = false;                                                                                                    // 16774
  }                                                                                                                   // 16775
  return valid;                                                                                                       // 16776
}                                                                                                                     // 16777
                                                                                                                      // 16778
Writable.prototype.write = function(chunk, encoding, cb) {                                                            // 16779
  var state = this._writableState;                                                                                    // 16780
  var ret = false;                                                                                                    // 16781
                                                                                                                      // 16782
  if (util.isFunction(encoding)) {                                                                                    // 16783
    cb = encoding;                                                                                                    // 16784
    encoding = null;                                                                                                  // 16785
  }                                                                                                                   // 16786
                                                                                                                      // 16787
  if (util.isBuffer(chunk))                                                                                           // 16788
    encoding = 'buffer';                                                                                              // 16789
  else if (!encoding)                                                                                                 // 16790
    encoding = state.defaultEncoding;                                                                                 // 16791
                                                                                                                      // 16792
  if (!util.isFunction(cb))                                                                                           // 16793
    cb = function() {};                                                                                               // 16794
                                                                                                                      // 16795
  if (state.ended)                                                                                                    // 16796
    writeAfterEnd(this, state, cb);                                                                                   // 16797
  else if (validChunk(this, state, chunk, cb)) {                                                                      // 16798
    state.pendingcb++;                                                                                                // 16799
    ret = writeOrBuffer(this, state, chunk, encoding, cb);                                                            // 16800
  }                                                                                                                   // 16801
                                                                                                                      // 16802
  return ret;                                                                                                         // 16803
};                                                                                                                    // 16804
                                                                                                                      // 16805
Writable.prototype.cork = function() {                                                                                // 16806
  var state = this._writableState;                                                                                    // 16807
                                                                                                                      // 16808
  state.corked++;                                                                                                     // 16809
};                                                                                                                    // 16810
                                                                                                                      // 16811
Writable.prototype.uncork = function() {                                                                              // 16812
  var state = this._writableState;                                                                                    // 16813
                                                                                                                      // 16814
  if (state.corked) {                                                                                                 // 16815
    state.corked--;                                                                                                   // 16816
                                                                                                                      // 16817
    if (!state.writing &&                                                                                             // 16818
        !state.corked &&                                                                                              // 16819
        !state.finished &&                                                                                            // 16820
        !state.bufferProcessing &&                                                                                    // 16821
        state.buffer.length)                                                                                          // 16822
      clearBuffer(this, state);                                                                                       // 16823
  }                                                                                                                   // 16824
};                                                                                                                    // 16825
                                                                                                                      // 16826
function decodeChunk(state, chunk, encoding) {                                                                        // 16827
  if (!state.objectMode &&                                                                                            // 16828
      state.decodeStrings !== false &&                                                                                // 16829
      util.isString(chunk)) {                                                                                         // 16830
    chunk = new Buffer(chunk, encoding);                                                                              // 16831
  }                                                                                                                   // 16832
  return chunk;                                                                                                       // 16833
}                                                                                                                     // 16834
                                                                                                                      // 16835
// if we're already writing something, then just put this                                                             // 16836
// in the queue, and wait our turn.  Otherwise, call _write                                                           // 16837
// If we return false, then we need a drain event, so set that flag.                                                  // 16838
function writeOrBuffer(stream, state, chunk, encoding, cb) {                                                          // 16839
  chunk = decodeChunk(state, chunk, encoding);                                                                        // 16840
  if (util.isBuffer(chunk))                                                                                           // 16841
    encoding = 'buffer';                                                                                              // 16842
  var len = state.objectMode ? 1 : chunk.length;                                                                      // 16843
                                                                                                                      // 16844
  state.length += len;                                                                                                // 16845
                                                                                                                      // 16846
  var ret = state.length < state.highWaterMark;                                                                       // 16847
  // we must ensure that previous needDrain will not be reset to false.                                               // 16848
  if (!ret)                                                                                                           // 16849
    state.needDrain = true;                                                                                           // 16850
                                                                                                                      // 16851
  if (state.writing || state.corked)                                                                                  // 16852
    state.buffer.push(new WriteReq(chunk, encoding, cb));                                                             // 16853
  else                                                                                                                // 16854
    doWrite(stream, state, false, len, chunk, encoding, cb);                                                          // 16855
                                                                                                                      // 16856
  return ret;                                                                                                         // 16857
}                                                                                                                     // 16858
                                                                                                                      // 16859
function doWrite(stream, state, writev, len, chunk, encoding, cb) {                                                   // 16860
  state.writelen = len;                                                                                               // 16861
  state.writecb = cb;                                                                                                 // 16862
  state.writing = true;                                                                                               // 16863
  state.sync = true;                                                                                                  // 16864
  if (writev)                                                                                                         // 16865
    stream._writev(chunk, state.onwrite);                                                                             // 16866
  else                                                                                                                // 16867
    stream._write(chunk, encoding, state.onwrite);                                                                    // 16868
  state.sync = false;                                                                                                 // 16869
}                                                                                                                     // 16870
                                                                                                                      // 16871
function onwriteError(stream, state, sync, er, cb) {                                                                  // 16872
  if (sync)                                                                                                           // 16873
    process.nextTick(function() {                                                                                     // 16874
      state.pendingcb--;                                                                                              // 16875
      cb(er);                                                                                                         // 16876
    });                                                                                                               // 16877
  else {                                                                                                              // 16878
    state.pendingcb--;                                                                                                // 16879
    cb(er);                                                                                                           // 16880
  }                                                                                                                   // 16881
                                                                                                                      // 16882
  stream._writableState.errorEmitted = true;                                                                          // 16883
  stream.emit('error', er);                                                                                           // 16884
}                                                                                                                     // 16885
                                                                                                                      // 16886
function onwriteStateUpdate(state) {                                                                                  // 16887
  state.writing = false;                                                                                              // 16888
  state.writecb = null;                                                                                               // 16889
  state.length -= state.writelen;                                                                                     // 16890
  state.writelen = 0;                                                                                                 // 16891
}                                                                                                                     // 16892
                                                                                                                      // 16893
function onwrite(stream, er) {                                                                                        // 16894
  var state = stream._writableState;                                                                                  // 16895
  var sync = state.sync;                                                                                              // 16896
  var cb = state.writecb;                                                                                             // 16897
                                                                                                                      // 16898
  onwriteStateUpdate(state);                                                                                          // 16899
                                                                                                                      // 16900
  if (er)                                                                                                             // 16901
    onwriteError(stream, state, sync, er, cb);                                                                        // 16902
  else {                                                                                                              // 16903
    // Check if we're actually ready to finish, but don't emit yet                                                    // 16904
    var finished = needFinish(stream, state);                                                                         // 16905
                                                                                                                      // 16906
    if (!finished &&                                                                                                  // 16907
        !state.corked &&                                                                                              // 16908
        !state.bufferProcessing &&                                                                                    // 16909
        state.buffer.length) {                                                                                        // 16910
      clearBuffer(stream, state);                                                                                     // 16911
    }                                                                                                                 // 16912
                                                                                                                      // 16913
    if (sync) {                                                                                                       // 16914
      process.nextTick(function() {                                                                                   // 16915
        afterWrite(stream, state, finished, cb);                                                                      // 16916
      });                                                                                                             // 16917
    } else {                                                                                                          // 16918
      afterWrite(stream, state, finished, cb);                                                                        // 16919
    }                                                                                                                 // 16920
  }                                                                                                                   // 16921
}                                                                                                                     // 16922
                                                                                                                      // 16923
function afterWrite(stream, state, finished, cb) {                                                                    // 16924
  if (!finished)                                                                                                      // 16925
    onwriteDrain(stream, state);                                                                                      // 16926
  state.pendingcb--;                                                                                                  // 16927
  cb();                                                                                                               // 16928
  finishMaybe(stream, state);                                                                                         // 16929
}                                                                                                                     // 16930
                                                                                                                      // 16931
// Must force callback to be called on nextTick, so that we don't                                                     // 16932
// emit 'drain' before the write() consumer gets the 'false' return                                                   // 16933
// value, and has a chance to attach a 'drain' listener.                                                              // 16934
function onwriteDrain(stream, state) {                                                                                // 16935
  if (state.length === 0 && state.needDrain) {                                                                        // 16936
    state.needDrain = false;                                                                                          // 16937
    stream.emit('drain');                                                                                             // 16938
  }                                                                                                                   // 16939
}                                                                                                                     // 16940
                                                                                                                      // 16941
                                                                                                                      // 16942
// if there's something in the buffer waiting, then process it                                                        // 16943
function clearBuffer(stream, state) {                                                                                 // 16944
  state.bufferProcessing = true;                                                                                      // 16945
                                                                                                                      // 16946
  if (stream._writev && state.buffer.length > 1) {                                                                    // 16947
    // Fast case, write everything using _writev()                                                                    // 16948
    var cbs = [];                                                                                                     // 16949
    for (var c = 0; c < state.buffer.length; c++)                                                                     // 16950
      cbs.push(state.buffer[c].callback);                                                                             // 16951
                                                                                                                      // 16952
    // count the one we are adding, as well.                                                                          // 16953
    // TODO(isaacs) clean this up                                                                                     // 16954
    state.pendingcb++;                                                                                                // 16955
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {                                      // 16956
      for (var i = 0; i < cbs.length; i++) {                                                                          // 16957
        state.pendingcb--;                                                                                            // 16958
        cbs[i](err);                                                                                                  // 16959
      }                                                                                                               // 16960
    });                                                                                                               // 16961
                                                                                                                      // 16962
    // Clear buffer                                                                                                   // 16963
    state.buffer = [];                                                                                                // 16964
  } else {                                                                                                            // 16965
    // Slow case, write chunks one-by-one                                                                             // 16966
    for (var c = 0; c < state.buffer.length; c++) {                                                                   // 16967
      var entry = state.buffer[c];                                                                                    // 16968
      var chunk = entry.chunk;                                                                                        // 16969
      var encoding = entry.encoding;                                                                                  // 16970
      var cb = entry.callback;                                                                                        // 16971
      var len = state.objectMode ? 1 : chunk.length;                                                                  // 16972
                                                                                                                      // 16973
      doWrite(stream, state, false, len, chunk, encoding, cb);                                                        // 16974
                                                                                                                      // 16975
      // if we didn't call the onwrite immediately, then                                                              // 16976
      // it means that we need to wait until it does.                                                                 // 16977
      // also, that means that the chunk and cb are currently                                                         // 16978
      // being processed, so move the buffer counter past them.                                                       // 16979
      if (state.writing) {                                                                                            // 16980
        c++;                                                                                                          // 16981
        break;                                                                                                        // 16982
      }                                                                                                               // 16983
    }                                                                                                                 // 16984
                                                                                                                      // 16985
    if (c < state.buffer.length)                                                                                      // 16986
      state.buffer = state.buffer.slice(c);                                                                           // 16987
    else                                                                                                              // 16988
      state.buffer.length = 0;                                                                                        // 16989
  }                                                                                                                   // 16990
                                                                                                                      // 16991
  state.bufferProcessing = false;                                                                                     // 16992
}                                                                                                                     // 16993
                                                                                                                      // 16994
Writable.prototype._write = function(chunk, encoding, cb) {                                                           // 16995
  cb(new Error('not implemented'));                                                                                   // 16996
                                                                                                                      // 16997
};                                                                                                                    // 16998
                                                                                                                      // 16999
Writable.prototype._writev = null;                                                                                    // 17000
                                                                                                                      // 17001
Writable.prototype.end = function(chunk, encoding, cb) {                                                              // 17002
  var state = this._writableState;                                                                                    // 17003
                                                                                                                      // 17004
  if (util.isFunction(chunk)) {                                                                                       // 17005
    cb = chunk;                                                                                                       // 17006
    chunk = null;                                                                                                     // 17007
    encoding = null;                                                                                                  // 17008
  } else if (util.isFunction(encoding)) {                                                                             // 17009
    cb = encoding;                                                                                                    // 17010
    encoding = null;                                                                                                  // 17011
  }                                                                                                                   // 17012
                                                                                                                      // 17013
  if (!util.isNullOrUndefined(chunk))                                                                                 // 17014
    this.write(chunk, encoding);                                                                                      // 17015
                                                                                                                      // 17016
  // .end() fully uncorks                                                                                             // 17017
  if (state.corked) {                                                                                                 // 17018
    state.corked = 1;                                                                                                 // 17019
    this.uncork();                                                                                                    // 17020
  }                                                                                                                   // 17021
                                                                                                                      // 17022
  // ignore unnecessary end() calls.                                                                                  // 17023
  if (!state.ending && !state.finished)                                                                               // 17024
    endWritable(this, state, cb);                                                                                     // 17025
};                                                                                                                    // 17026
                                                                                                                      // 17027
                                                                                                                      // 17028
function needFinish(stream, state) {                                                                                  // 17029
  return (state.ending &&                                                                                             // 17030
          state.length === 0 &&                                                                                       // 17031
          !state.finished &&                                                                                          // 17032
          !state.writing);                                                                                            // 17033
}                                                                                                                     // 17034
                                                                                                                      // 17035
function prefinish(stream, state) {                                                                                   // 17036
  if (!state.prefinished) {                                                                                           // 17037
    state.prefinished = true;                                                                                         // 17038
    stream.emit('prefinish');                                                                                         // 17039
  }                                                                                                                   // 17040
}                                                                                                                     // 17041
                                                                                                                      // 17042
function finishMaybe(stream, state) {                                                                                 // 17043
  var need = needFinish(stream, state);                                                                               // 17044
  if (need) {                                                                                                         // 17045
    if (state.pendingcb === 0) {                                                                                      // 17046
      prefinish(stream, state);                                                                                       // 17047
      state.finished = true;                                                                                          // 17048
      stream.emit('finish');                                                                                          // 17049
    } else                                                                                                            // 17050
      prefinish(stream, state);                                                                                       // 17051
  }                                                                                                                   // 17052
  return need;                                                                                                        // 17053
}                                                                                                                     // 17054
                                                                                                                      // 17055
function endWritable(stream, state, cb) {                                                                             // 17056
  state.ending = true;                                                                                                // 17057
  finishMaybe(stream, state);                                                                                         // 17058
  if (cb) {                                                                                                           // 17059
    if (state.finished)                                                                                               // 17060
      process.nextTick(cb);                                                                                           // 17061
    else                                                                                                              // 17062
      stream.once('finish', cb);                                                                                      // 17063
  }                                                                                                                   // 17064
  state.ended = true;                                                                                                 // 17065
}                                                                                                                     // 17066
                                                                                                                      // 17067
}).call(this,require('_process'))                                                                                     // 17068
                                                                                                                      // 17069
},{"./_stream_duplex":148,"_process":146,"buffer":2,"core-util-is":153,"inherits":144,"stream":158}],153:[function(require,module,exports){
(function (Buffer){                                                                                                   // 17071
// Copyright Joyent, Inc. and other Node contributors.                                                                // 17072
//                                                                                                                    // 17073
// Permission is hereby granted, free of charge, to any person obtaining a                                            // 17074
// copy of this software and associated documentation files (the                                                      // 17075
// "Software"), to deal in the Software without restriction, including                                                // 17076
// without limitation the rights to use, copy, modify, merge, publish,                                                // 17077
// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 17078
// persons to whom the Software is furnished to do so, subject to the                                                 // 17079
// following conditions:                                                                                              // 17080
//                                                                                                                    // 17081
// The above copyright notice and this permission notice shall be included                                            // 17082
// in all copies or substantial portions of the Software.                                                             // 17083
//                                                                                                                    // 17084
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 17085
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 17086
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 17087
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 17088
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 17089
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 17090
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 17091
                                                                                                                      // 17092
// NOTE: These type checking functions intentionally don't use `instanceof`                                           // 17093
// because it is fragile and can be easily faked with `Object.create()`.                                              // 17094
function isArray(ar) {                                                                                                // 17095
  return Array.isArray(ar);                                                                                           // 17096
}                                                                                                                     // 17097
exports.isArray = isArray;                                                                                            // 17098
                                                                                                                      // 17099
function isBoolean(arg) {                                                                                             // 17100
  return typeof arg === 'boolean';                                                                                    // 17101
}                                                                                                                     // 17102
exports.isBoolean = isBoolean;                                                                                        // 17103
                                                                                                                      // 17104
function isNull(arg) {                                                                                                // 17105
  return arg === null;                                                                                                // 17106
}                                                                                                                     // 17107
exports.isNull = isNull;                                                                                              // 17108
                                                                                                                      // 17109
function isNullOrUndefined(arg) {                                                                                     // 17110
  return arg == null;                                                                                                 // 17111
}                                                                                                                     // 17112
exports.isNullOrUndefined = isNullOrUndefined;                                                                        // 17113
                                                                                                                      // 17114
function isNumber(arg) {                                                                                              // 17115
  return typeof arg === 'number';                                                                                     // 17116
}                                                                                                                     // 17117
exports.isNumber = isNumber;                                                                                          // 17118
                                                                                                                      // 17119
function isString(arg) {                                                                                              // 17120
  return typeof arg === 'string';                                                                                     // 17121
}                                                                                                                     // 17122
exports.isString = isString;                                                                                          // 17123
                                                                                                                      // 17124
function isSymbol(arg) {                                                                                              // 17125
  return typeof arg === 'symbol';                                                                                     // 17126
}                                                                                                                     // 17127
exports.isSymbol = isSymbol;                                                                                          // 17128
                                                                                                                      // 17129
function isUndefined(arg) {                                                                                           // 17130
  return arg === void 0;                                                                                              // 17131
}                                                                                                                     // 17132
exports.isUndefined = isUndefined;                                                                                    // 17133
                                                                                                                      // 17134
function isRegExp(re) {                                                                                               // 17135
  return isObject(re) && objectToString(re) === '[object RegExp]';                                                    // 17136
}                                                                                                                     // 17137
exports.isRegExp = isRegExp;                                                                                          // 17138
                                                                                                                      // 17139
function isObject(arg) {                                                                                              // 17140
  return typeof arg === 'object' && arg !== null;                                                                     // 17141
}                                                                                                                     // 17142
exports.isObject = isObject;                                                                                          // 17143
                                                                                                                      // 17144
function isDate(d) {                                                                                                  // 17145
  return isObject(d) && objectToString(d) === '[object Date]';                                                        // 17146
}                                                                                                                     // 17147
exports.isDate = isDate;                                                                                              // 17148
                                                                                                                      // 17149
function isError(e) {                                                                                                 // 17150
  return isObject(e) &&                                                                                               // 17151
      (objectToString(e) === '[object Error]' || e instanceof Error);                                                 // 17152
}                                                                                                                     // 17153
exports.isError = isError;                                                                                            // 17154
                                                                                                                      // 17155
function isFunction(arg) {                                                                                            // 17156
  return typeof arg === 'function';                                                                                   // 17157
}                                                                                                                     // 17158
exports.isFunction = isFunction;                                                                                      // 17159
                                                                                                                      // 17160
function isPrimitive(arg) {                                                                                           // 17161
  return arg === null ||                                                                                              // 17162
         typeof arg === 'boolean' ||                                                                                  // 17163
         typeof arg === 'number' ||                                                                                   // 17164
         typeof arg === 'string' ||                                                                                   // 17165
         typeof arg === 'symbol' ||  // ES6 symbol                                                                    // 17166
         typeof arg === 'undefined';                                                                                  // 17167
}                                                                                                                     // 17168
exports.isPrimitive = isPrimitive;                                                                                    // 17169
                                                                                                                      // 17170
function isBuffer(arg) {                                                                                              // 17171
  return Buffer.isBuffer(arg);                                                                                        // 17172
}                                                                                                                     // 17173
exports.isBuffer = isBuffer;                                                                                          // 17174
                                                                                                                      // 17175
function objectToString(o) {                                                                                          // 17176
  return Object.prototype.toString.call(o);                                                                           // 17177
}                                                                                                                     // 17178
}).call(this,require("buffer").Buffer)                                                                                // 17179
                                                                                                                      // 17180
},{"buffer":2}],154:[function(require,module,exports){                                                                // 17181
module.exports = require("./lib/_stream_passthrough.js")                                                              // 17182
                                                                                                                      // 17183
},{"./lib/_stream_passthrough.js":149}],155:[function(require,module,exports){                                        // 17184
exports = module.exports = require('./lib/_stream_readable.js');                                                      // 17185
exports.Stream = require('stream');                                                                                   // 17186
exports.Readable = exports;                                                                                           // 17187
exports.Writable = require('./lib/_stream_writable.js');                                                              // 17188
exports.Duplex = require('./lib/_stream_duplex.js');                                                                  // 17189
exports.Transform = require('./lib/_stream_transform.js');                                                            // 17190
exports.PassThrough = require('./lib/_stream_passthrough.js');                                                        // 17191
                                                                                                                      // 17192
},{"./lib/_stream_duplex.js":148,"./lib/_stream_passthrough.js":149,"./lib/_stream_readable.js":150,"./lib/_stream_transform.js":151,"./lib/_stream_writable.js":152,"stream":158}],156:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")                                                                // 17194
                                                                                                                      // 17195
},{"./lib/_stream_transform.js":151}],157:[function(require,module,exports){                                          // 17196
module.exports = require("./lib/_stream_writable.js")                                                                 // 17197
                                                                                                                      // 17198
},{"./lib/_stream_writable.js":152}],158:[function(require,module,exports){                                           // 17199
// Copyright Joyent, Inc. and other Node contributors.                                                                // 17200
//                                                                                                                    // 17201
// Permission is hereby granted, free of charge, to any person obtaining a                                            // 17202
// copy of this software and associated documentation files (the                                                      // 17203
// "Software"), to deal in the Software without restriction, including                                                // 17204
// without limitation the rights to use, copy, modify, merge, publish,                                                // 17205
// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 17206
// persons to whom the Software is furnished to do so, subject to the                                                 // 17207
// following conditions:                                                                                              // 17208
//                                                                                                                    // 17209
// The above copyright notice and this permission notice shall be included                                            // 17210
// in all copies or substantial portions of the Software.                                                             // 17211
//                                                                                                                    // 17212
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 17213
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 17214
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 17215
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 17216
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 17217
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 17218
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 17219
                                                                                                                      // 17220
module.exports = Stream;                                                                                              // 17221
                                                                                                                      // 17222
var EE = require('events').EventEmitter;                                                                              // 17223
var inherits = require('inherits');                                                                                   // 17224
                                                                                                                      // 17225
inherits(Stream, EE);                                                                                                 // 17226
Stream.Readable = require('readable-stream/readable.js');                                                             // 17227
Stream.Writable = require('readable-stream/writable.js');                                                             // 17228
Stream.Duplex = require('readable-stream/duplex.js');                                                                 // 17229
Stream.Transform = require('readable-stream/transform.js');                                                           // 17230
Stream.PassThrough = require('readable-stream/passthrough.js');                                                       // 17231
                                                                                                                      // 17232
// Backwards-compat with node 0.4.x                                                                                   // 17233
Stream.Stream = Stream;                                                                                               // 17234
                                                                                                                      // 17235
                                                                                                                      // 17236
                                                                                                                      // 17237
// old-style streams.  Note that the pipe method (the only relevant                                                   // 17238
// part of this class) is overridden in the Readable class.                                                           // 17239
                                                                                                                      // 17240
function Stream() {                                                                                                   // 17241
  EE.call(this);                                                                                                      // 17242
}                                                                                                                     // 17243
                                                                                                                      // 17244
Stream.prototype.pipe = function(dest, options) {                                                                     // 17245
  var source = this;                                                                                                  // 17246
                                                                                                                      // 17247
  function ondata(chunk) {                                                                                            // 17248
    if (dest.writable) {                                                                                              // 17249
      if (false === dest.write(chunk) && source.pause) {                                                              // 17250
        source.pause();                                                                                               // 17251
      }                                                                                                               // 17252
    }                                                                                                                 // 17253
  }                                                                                                                   // 17254
                                                                                                                      // 17255
  source.on('data', ondata);                                                                                          // 17256
                                                                                                                      // 17257
  function ondrain() {                                                                                                // 17258
    if (source.readable && source.resume) {                                                                           // 17259
      source.resume();                                                                                                // 17260
    }                                                                                                                 // 17261
  }                                                                                                                   // 17262
                                                                                                                      // 17263
  dest.on('drain', ondrain);                                                                                          // 17264
                                                                                                                      // 17265
  // If the 'end' option is not supplied, dest.end() will be called when                                              // 17266
  // source gets the 'end' or 'close' events.  Only dest.end() once.                                                  // 17267
  if (!dest._isStdio && (!options || options.end !== false)) {                                                        // 17268
    source.on('end', onend);                                                                                          // 17269
    source.on('close', onclose);                                                                                      // 17270
  }                                                                                                                   // 17271
                                                                                                                      // 17272
  var didOnEnd = false;                                                                                               // 17273
  function onend() {                                                                                                  // 17274
    if (didOnEnd) return;                                                                                             // 17275
    didOnEnd = true;                                                                                                  // 17276
                                                                                                                      // 17277
    dest.end();                                                                                                       // 17278
  }                                                                                                                   // 17279
                                                                                                                      // 17280
                                                                                                                      // 17281
  function onclose() {                                                                                                // 17282
    if (didOnEnd) return;                                                                                             // 17283
    didOnEnd = true;                                                                                                  // 17284
                                                                                                                      // 17285
    if (typeof dest.destroy === 'function') dest.destroy();                                                           // 17286
  }                                                                                                                   // 17287
                                                                                                                      // 17288
  // don't leave dangling pipes when there are errors.                                                                // 17289
  function onerror(er) {                                                                                              // 17290
    cleanup();                                                                                                        // 17291
    if (EE.listenerCount(this, 'error') === 0) {                                                                      // 17292
      throw er; // Unhandled stream error in pipe.                                                                    // 17293
    }                                                                                                                 // 17294
  }                                                                                                                   // 17295
                                                                                                                      // 17296
  source.on('error', onerror);                                                                                        // 17297
  dest.on('error', onerror);                                                                                          // 17298
                                                                                                                      // 17299
  // remove all the event listeners that were added.                                                                  // 17300
  function cleanup() {                                                                                                // 17301
    source.removeListener('data', ondata);                                                                            // 17302
    dest.removeListener('drain', ondrain);                                                                            // 17303
                                                                                                                      // 17304
    source.removeListener('end', onend);                                                                              // 17305
    source.removeListener('close', onclose);                                                                          // 17306
                                                                                                                      // 17307
    source.removeListener('error', onerror);                                                                          // 17308
    dest.removeListener('error', onerror);                                                                            // 17309
                                                                                                                      // 17310
    source.removeListener('end', cleanup);                                                                            // 17311
    source.removeListener('close', cleanup);                                                                          // 17312
                                                                                                                      // 17313
    dest.removeListener('close', cleanup);                                                                            // 17314
  }                                                                                                                   // 17315
                                                                                                                      // 17316
  source.on('end', cleanup);                                                                                          // 17317
  source.on('close', cleanup);                                                                                        // 17318
                                                                                                                      // 17319
  dest.on('close', cleanup);                                                                                          // 17320
                                                                                                                      // 17321
  dest.emit('pipe', source);                                                                                          // 17322
                                                                                                                      // 17323
  // Allow for unix-like usage: A.pipe(B).pipe(C)                                                                     // 17324
  return dest;                                                                                                        // 17325
};                                                                                                                    // 17326
                                                                                                                      // 17327
},{"events":143,"inherits":144,"readable-stream/duplex.js":147,"readable-stream/passthrough.js":154,"readable-stream/readable.js":155,"readable-stream/transform.js":156,"readable-stream/writable.js":157}],159:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.                                                                // 17329
//                                                                                                                    // 17330
// Permission is hereby granted, free of charge, to any person obtaining a                                            // 17331
// copy of this software and associated documentation files (the                                                      // 17332
// "Software"), to deal in the Software without restriction, including                                                // 17333
// without limitation the rights to use, copy, modify, merge, publish,                                                // 17334
// distribute, sublicense, and/or sell copies of the Software, and to permit                                          // 17335
// persons to whom the Software is furnished to do so, subject to the                                                 // 17336
// following conditions:                                                                                              // 17337
//                                                                                                                    // 17338
// The above copyright notice and this permission notice shall be included                                            // 17339
// in all copies or substantial portions of the Software.                                                             // 17340
//                                                                                                                    // 17341
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                            // 17342
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                         // 17343
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                          // 17344
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                           // 17345
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                              // 17346
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                          // 17347
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                             // 17348
                                                                                                                      // 17349
var Buffer = require('buffer').Buffer;                                                                                // 17350
                                                                                                                      // 17351
var isBufferEncoding = Buffer.isEncoding                                                                              // 17352
  || function(encoding) {                                                                                             // 17353
       switch (encoding && encoding.toLowerCase()) {                                                                  // 17354
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;                                                                                       // 17356
       }                                                                                                              // 17357
     }                                                                                                                // 17358
                                                                                                                      // 17359
                                                                                                                      // 17360
function assertEncoding(encoding) {                                                                                   // 17361
  if (encoding && !isBufferEncoding(encoding)) {                                                                      // 17362
    throw new Error('Unknown encoding: ' + encoding);                                                                 // 17363
  }                                                                                                                   // 17364
}                                                                                                                     // 17365
                                                                                                                      // 17366
// StringDecoder provides an interface for efficiently splitting a series of                                          // 17367
// buffers into a series of JS strings without breaking apart multi-byte                                              // 17368
// characters. CESU-8 is handled as part of the UTF-8 encoding.                                                       // 17369
//                                                                                                                    // 17370
// @TODO Handling all encodings inside a single object makes it very difficult                                        // 17371
// to reason about this code, so it should be split up in the future.                                                 // 17372
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code                                       // 17373
// points as used by CESU-8.                                                                                          // 17374
var StringDecoder = exports.StringDecoder = function(encoding) {                                                      // 17375
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');                                             // 17376
  assertEncoding(encoding);                                                                                           // 17377
  switch (this.encoding) {                                                                                            // 17378
    case 'utf8':                                                                                                      // 17379
      // CESU-8 represents each of Surrogate Pair by 3-bytes                                                          // 17380
      this.surrogateSize = 3;                                                                                         // 17381
      break;                                                                                                          // 17382
    case 'ucs2':                                                                                                      // 17383
    case 'utf16le':                                                                                                   // 17384
      // UTF-16 represents each of Surrogate Pair by 2-bytes                                                          // 17385
      this.surrogateSize = 2;                                                                                         // 17386
      this.detectIncompleteChar = utf16DetectIncompleteChar;                                                          // 17387
      break;                                                                                                          // 17388
    case 'base64':                                                                                                    // 17389
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.                                                   // 17390
      this.surrogateSize = 3;                                                                                         // 17391
      this.detectIncompleteChar = base64DetectIncompleteChar;                                                         // 17392
      break;                                                                                                          // 17393
    default:                                                                                                          // 17394
      this.write = passThroughWrite;                                                                                  // 17395
      return;                                                                                                         // 17396
  }                                                                                                                   // 17397
                                                                                                                      // 17398
  // Enough space to store all bytes of a single character. UTF-8 needs 4                                             // 17399
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).                                                   // 17400
  this.charBuffer = new Buffer(6);                                                                                    // 17401
  // Number of bytes received for the current incomplete multi-byte character.                                        // 17402
  this.charReceived = 0;                                                                                              // 17403
  // Number of bytes expected for the current incomplete multi-byte character.                                        // 17404
  this.charLength = 0;                                                                                                // 17405
};                                                                                                                    // 17406
                                                                                                                      // 17407
                                                                                                                      // 17408
// write decodes the given buffer and returns it as JS string that is                                                 // 17409
// guaranteed to not contain any partial multi-byte characters. Any partial                                           // 17410
// character found at the end of the buffer is buffered up, and will be                                               // 17411
// returned when calling write again with the remaining bytes.                                                        // 17412
//                                                                                                                    // 17413
// Note: Converting a Buffer containing an orphan surrogate to a String                                               // 17414
// currently works, but converting a String to a Buffer (via `new Buffer`, or                                         // 17415
// Buffer#write) will replace incomplete surrogates with the unicode                                                  // 17416
// replacement character. See https://codereview.chromium.org/121173009/ .                                            // 17417
StringDecoder.prototype.write = function(buffer) {                                                                    // 17418
  var charStr = '';                                                                                                   // 17419
  // if our last write ended with an incomplete multibyte character                                                   // 17420
  while (this.charLength) {                                                                                           // 17421
    // determine how many remaining bytes this buffer has to offer for this char                                      // 17422
    var available = (buffer.length >= this.charLength - this.charReceived) ?                                          // 17423
        this.charLength - this.charReceived :                                                                         // 17424
        buffer.length;                                                                                                // 17425
                                                                                                                      // 17426
    // add the new bytes to the char buffer                                                                           // 17427
    buffer.copy(this.charBuffer, this.charReceived, 0, available);                                                    // 17428
    this.charReceived += available;                                                                                   // 17429
                                                                                                                      // 17430
    if (this.charReceived < this.charLength) {                                                                        // 17431
      // still not enough chars in this buffer? wait for more ...                                                     // 17432
      return '';                                                                                                      // 17433
    }                                                                                                                 // 17434
                                                                                                                      // 17435
    // remove bytes belonging to the current character from the buffer                                                // 17436
    buffer = buffer.slice(available, buffer.length);                                                                  // 17437
                                                                                                                      // 17438
    // get the character that was split                                                                               // 17439
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);                                      // 17440
                                                                                                                      // 17441
    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character                                            // 17442
    var charCode = charStr.charCodeAt(charStr.length - 1);                                                            // 17443
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {                                                                   // 17444
      this.charLength += this.surrogateSize;                                                                          // 17445
      charStr = '';                                                                                                   // 17446
      continue;                                                                                                       // 17447
    }                                                                                                                 // 17448
    this.charReceived = this.charLength = 0;                                                                          // 17449
                                                                                                                      // 17450
    // if there are no more bytes in this buffer, just emit our char                                                  // 17451
    if (buffer.length === 0) {                                                                                        // 17452
      return charStr;                                                                                                 // 17453
    }                                                                                                                 // 17454
    break;                                                                                                            // 17455
  }                                                                                                                   // 17456
                                                                                                                      // 17457
  // determine and set charLength / charReceived                                                                      // 17458
  this.detectIncompleteChar(buffer);                                                                                  // 17459
                                                                                                                      // 17460
  var end = buffer.length;                                                                                            // 17461
  if (this.charLength) {                                                                                              // 17462
    // buffer the incomplete character bytes we got                                                                   // 17463
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);                                          // 17464
    end -= this.charReceived;                                                                                         // 17465
  }                                                                                                                   // 17466
                                                                                                                      // 17467
  charStr += buffer.toString(this.encoding, 0, end);                                                                  // 17468
                                                                                                                      // 17469
  var end = charStr.length - 1;                                                                                       // 17470
  var charCode = charStr.charCodeAt(end);                                                                             // 17471
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character                                              // 17472
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {                                                                     // 17473
    var size = this.surrogateSize;                                                                                    // 17474
    this.charLength += size;                                                                                          // 17475
    this.charReceived += size;                                                                                        // 17476
    this.charBuffer.copy(this.charBuffer, size, 0, size);                                                             // 17477
    buffer.copy(this.charBuffer, 0, 0, size);                                                                         // 17478
    return charStr.substring(0, end);                                                                                 // 17479
  }                                                                                                                   // 17480
                                                                                                                      // 17481
  // or just emit the charStr                                                                                         // 17482
  return charStr;                                                                                                     // 17483
};                                                                                                                    // 17484
                                                                                                                      // 17485
// detectIncompleteChar determines if there is an incomplete UTF-8 character at                                       // 17486
// the end of the given buffer. If so, it sets this.charLength to the byte                                            // 17487
// length that character, and sets this.charReceived to the number of bytes                                           // 17488
// that are available for this character.                                                                             // 17489
StringDecoder.prototype.detectIncompleteChar = function(buffer) {                                                     // 17490
  // determine how many bytes we have to check at the end of this buffer                                              // 17491
  var i = (buffer.length >= 3) ? 3 : buffer.length;                                                                   // 17492
                                                                                                                      // 17493
  // Figure out if one of the last i bytes of our buffer announces an                                                 // 17494
  // incomplete char.                                                                                                 // 17495
  for (; i > 0; i--) {                                                                                                // 17496
    var c = buffer[buffer.length - i];                                                                                // 17497
                                                                                                                      // 17498
    // See http://en.wikipedia.org/wiki/UTF-8#Description                                                             // 17499
                                                                                                                      // 17500
    // 110XXXXX                                                                                                       // 17501
    if (i == 1 && c >> 5 == 0x06) {                                                                                   // 17502
      this.charLength = 2;                                                                                            // 17503
      break;                                                                                                          // 17504
    }                                                                                                                 // 17505
                                                                                                                      // 17506
    // 1110XXXX                                                                                                       // 17507
    if (i <= 2 && c >> 4 == 0x0E) {                                                                                   // 17508
      this.charLength = 3;                                                                                            // 17509
      break;                                                                                                          // 17510
    }                                                                                                                 // 17511
                                                                                                                      // 17512
    // 11110XXX                                                                                                       // 17513
    if (i <= 3 && c >> 3 == 0x1E) {                                                                                   // 17514
      this.charLength = 4;                                                                                            // 17515
      break;                                                                                                          // 17516
    }                                                                                                                 // 17517
  }                                                                                                                   // 17518
  this.charReceived = i;                                                                                              // 17519
};                                                                                                                    // 17520
                                                                                                                      // 17521
StringDecoder.prototype.end = function(buffer) {                                                                      // 17522
  var res = '';                                                                                                       // 17523
  if (buffer && buffer.length)                                                                                        // 17524
    res = this.write(buffer);                                                                                         // 17525
                                                                                                                      // 17526
  if (this.charReceived) {                                                                                            // 17527
    var cr = this.charReceived;                                                                                       // 17528
    var buf = this.charBuffer;                                                                                        // 17529
    var enc = this.encoding;                                                                                          // 17530
    res += buf.slice(0, cr).toString(enc);                                                                            // 17531
  }                                                                                                                   // 17532
                                                                                                                      // 17533
  return res;                                                                                                         // 17534
};                                                                                                                    // 17535
                                                                                                                      // 17536
function passThroughWrite(buffer) {                                                                                   // 17537
  return buffer.toString(this.encoding);                                                                              // 17538
}                                                                                                                     // 17539
                                                                                                                      // 17540
function utf16DetectIncompleteChar(buffer) {                                                                          // 17541
  this.charReceived = buffer.length % 2;                                                                              // 17542
  this.charLength = this.charReceived ? 2 : 0;                                                                        // 17543
}                                                                                                                     // 17544
                                                                                                                      // 17545
function base64DetectIncompleteChar(buffer) {                                                                         // 17546
  this.charReceived = buffer.length % 3;                                                                              // 17547
  this.charLength = this.charReceived ? 3 : 0;                                                                        // 17548
}                                                                                                                     // 17549
                                                                                                                      // 17550
},{"buffer":2}],160:[function(require,module,exports){                                                                // 17551
var indexOf = require('indexof');                                                                                     // 17552
                                                                                                                      // 17553
var Object_keys = function (obj) {                                                                                    // 17554
    if (Object.keys) return Object.keys(obj)                                                                          // 17555
    else {                                                                                                            // 17556
        var res = [];                                                                                                 // 17557
        for (var key in obj) res.push(key)                                                                            // 17558
        return res;                                                                                                   // 17559
    }                                                                                                                 // 17560
};                                                                                                                    // 17561
                                                                                                                      // 17562
var forEach = function (xs, fn) {                                                                                     // 17563
    if (xs.forEach) return xs.forEach(fn)                                                                             // 17564
    else for (var i = 0; i < xs.length; i++) {                                                                        // 17565
        fn(xs[i], i, xs);                                                                                             // 17566
    }                                                                                                                 // 17567
};                                                                                                                    // 17568
                                                                                                                      // 17569
var defineProp = (function() {                                                                                        // 17570
    try {                                                                                                             // 17571
        Object.defineProperty({}, '_', {});                                                                           // 17572
        return function(obj, name, value) {                                                                           // 17573
            Object.defineProperty(obj, name, {                                                                        // 17574
                writable: true,                                                                                       // 17575
                enumerable: false,                                                                                    // 17576
                configurable: true,                                                                                   // 17577
                value: value                                                                                          // 17578
            })                                                                                                        // 17579
        };                                                                                                            // 17580
    } catch(e) {                                                                                                      // 17581
        return function(obj, name, value) {                                                                           // 17582
            obj[name] = value;                                                                                        // 17583
        };                                                                                                            // 17584
    }                                                                                                                 // 17585
}());                                                                                                                 // 17586
                                                                                                                      // 17587
var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',                                          // 17588
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',                                                  // 17589
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',                                         // 17590
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',                                       // 17591
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];                                      // 17592
                                                                                                                      // 17593
function Context() {}                                                                                                 // 17594
Context.prototype = {};                                                                                               // 17595
                                                                                                                      // 17596
var Script = exports.Script = function NodeScript (code) {                                                            // 17597
    if (!(this instanceof Script)) return new Script(code);                                                           // 17598
    this.code = code;                                                                                                 // 17599
};                                                                                                                    // 17600
                                                                                                                      // 17601
Script.prototype.runInContext = function (context) {                                                                  // 17602
    if (!(context instanceof Context)) {                                                                              // 17603
        throw new TypeError("needs a 'context' argument.");                                                           // 17604
    }                                                                                                                 // 17605
                                                                                                                      // 17606
    var iframe = document.createElement('iframe');                                                                    // 17607
    if (!iframe.style) iframe.style = {};                                                                             // 17608
    iframe.style.display = 'none';                                                                                    // 17609
                                                                                                                      // 17610
    document.body.appendChild(iframe);                                                                                // 17611
                                                                                                                      // 17612
    var win = iframe.contentWindow;                                                                                   // 17613
    var wEval = win.eval, wExecScript = win.execScript;                                                               // 17614
                                                                                                                      // 17615
    if (!wEval && wExecScript) {                                                                                      // 17616
        // win.eval() magically appears when this is called in IE:                                                    // 17617
        wExecScript.call(win, 'null');                                                                                // 17618
        wEval = win.eval;                                                                                             // 17619
    }                                                                                                                 // 17620
                                                                                                                      // 17621
    forEach(Object_keys(context), function (key) {                                                                    // 17622
        win[key] = context[key];                                                                                      // 17623
    });                                                                                                               // 17624
    forEach(globals, function (key) {                                                                                 // 17625
        if (context[key]) {                                                                                           // 17626
            win[key] = context[key];                                                                                  // 17627
        }                                                                                                             // 17628
    });                                                                                                               // 17629
                                                                                                                      // 17630
    var winKeys = Object_keys(win);                                                                                   // 17631
                                                                                                                      // 17632
    var res = wEval.call(win, this.code);                                                                             // 17633
                                                                                                                      // 17634
    forEach(Object_keys(win), function (key) {                                                                        // 17635
        // Avoid copying circular objects like `top` and `window` by only                                             // 17636
        // updating existing context properties or new properties in the `win`                                        // 17637
        // that was only introduced after the eval.                                                                   // 17638
        if (key in context || indexOf(winKeys, key) === -1) {                                                         // 17639
            context[key] = win[key];                                                                                  // 17640
        }                                                                                                             // 17641
    });                                                                                                               // 17642
                                                                                                                      // 17643
    forEach(globals, function (key) {                                                                                 // 17644
        if (!(key in context)) {                                                                                      // 17645
            defineProp(context, key, win[key]);                                                                       // 17646
        }                                                                                                             // 17647
    });                                                                                                               // 17648
                                                                                                                      // 17649
    document.body.removeChild(iframe);                                                                                // 17650
                                                                                                                      // 17651
    return res;                                                                                                       // 17652
};                                                                                                                    // 17653
                                                                                                                      // 17654
Script.prototype.runInThisContext = function () {                                                                     // 17655
    return eval(this.code); // maybe...                                                                               // 17656
};                                                                                                                    // 17657
                                                                                                                      // 17658
Script.prototype.runInNewContext = function (context) {                                                               // 17659
    var ctx = Script.createContext(context);                                                                          // 17660
    var res = this.runInContext(ctx);                                                                                 // 17661
                                                                                                                      // 17662
    forEach(Object_keys(ctx), function (key) {                                                                        // 17663
        context[key] = ctx[key];                                                                                      // 17664
    });                                                                                                               // 17665
                                                                                                                      // 17666
    return res;                                                                                                       // 17667
};                                                                                                                    // 17668
                                                                                                                      // 17669
forEach(Object_keys(Script.prototype), function (name) {                                                              // 17670
    exports[name] = Script[name] = function (code) {                                                                  // 17671
        var s = Script(code);                                                                                         // 17672
        return s[name].apply(s, [].slice.call(arguments, 1));                                                         // 17673
    };                                                                                                                // 17674
});                                                                                                                   // 17675
                                                                                                                      // 17676
exports.createScript = function (code) {                                                                              // 17677
    return exports.Script(code);                                                                                      // 17678
};                                                                                                                    // 17679
                                                                                                                      // 17680
exports.createContext = Script.createContext = function (context) {                                                   // 17681
    var copy = new Context();                                                                                         // 17682
    if(typeof context === 'object') {                                                                                 // 17683
        forEach(Object_keys(context), function (key) {                                                                // 17684
            copy[key] = context[key];                                                                                 // 17685
        });                                                                                                           // 17686
    }                                                                                                                 // 17687
    return copy;                                                                                                      // 17688
};                                                                                                                    // 17689
                                                                                                                      // 17690
},{"indexof":161}],161:[function(require,module,exports){                                                             // 17691
                                                                                                                      // 17692
var indexOf = [].indexOf;                                                                                             // 17693
                                                                                                                      // 17694
module.exports = function(arr, obj){                                                                                  // 17695
  if (indexOf) return arr.indexOf(obj);                                                                               // 17696
  for (var i = 0; i < arr.length; ++i) {                                                                              // 17697
    if (arr[i] === obj) return i;                                                                                     // 17698
  }                                                                                                                   // 17699
  return -1;                                                                                                          // 17700
};                                                                                                                    // 17701
},{}],162:[function(require,module,exports){                                                                          // 17702
BigNumber = require('bignumber.js');                                                                                  // 17703
                                                                                                                      // 17704
},{"bignumber.js":163}],163:[function(require,module,exports){                                                        // 17705
/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */                                            // 17706
                                                                                                                      // 17707
;(function (global) {                                                                                                 // 17708
    'use strict';                                                                                                     // 17709
                                                                                                                      // 17710
    /*                                                                                                                // 17711
      bignumber.js v2.0.7                                                                                             // 17712
      A JavaScript library for arbitrary-precision arithmetic.                                                        // 17713
      https://github.com/MikeMcl/bignumber.js                                                                         // 17714
      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>                                                       // 17715
      MIT Expat Licence                                                                                               // 17716
    */                                                                                                                // 17717
                                                                                                                      // 17718
                                                                                                                      // 17719
    var BigNumber, crypto, parseNumeric,                                                                              // 17720
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,                                                           // 17721
        mathceil = Math.ceil,                                                                                         // 17722
        mathfloor = Math.floor,                                                                                       // 17723
        notBool = ' not a boolean or binary digit',                                                                   // 17724
        roundingMode = 'rounding mode',                                                                               // 17725
        tooManyDigits = 'number type has more than 15 significant digits',                                            // 17726
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                                // 17727
        BASE = 1e14,                                                                                                  // 17728
        LOG_BASE = 14,                                                                                                // 17729
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                      // 17730
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                      // 17731
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                           // 17732
        SQRT_BASE = 1e7,                                                                                              // 17733
                                                                                                                      // 17734
        /*                                                                                                            // 17735
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                    // 17736
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                        // 17737
         * exception is thrown (if ERRORS is true).                                                                   // 17738
         */                                                                                                           // 17739
        MAX = 1E9;                                   // 0 to MAX_INT32                                                // 17740
                                                                                                                      // 17741
                                                                                                                      // 17742
    /*                                                                                                                // 17743
     * Create and return a BigNumber constructor.                                                                     // 17744
     */                                                                                                               // 17745
    function another(configObj) {                                                                                     // 17746
        var div,                                                                                                      // 17747
                                                                                                                      // 17748
            // id tracks the caller function, so its name can be included in error messages.                          // 17749
            id = 0,                                                                                                   // 17750
            P = BigNumber.prototype,                                                                                  // 17751
            ONE = new BigNumber(1),                                                                                   // 17752
                                                                                                                      // 17753
                                                                                                                      // 17754
            /********************************* EDITABLE DEFAULTS **********************************/                  // 17755
                                                                                                                      // 17756
                                                                                                                      // 17757
            /*                                                                                                        // 17758
             * The default values below must be integers within the inclusive ranges stated.                          // 17759
             * The values can also be changed at run-time using BigNumber.config.                                     // 17760
             */                                                                                                       // 17761
                                                                                                                      // 17762
            // The maximum number of decimal places for operations involving division.                                // 17763
            DECIMAL_PLACES = 20,                     // 0 to MAX                                                      // 17764
                                                                                                                      // 17765
            /*                                                                                                        // 17766
             * The rounding mode used when rounding to the above decimal places, and when using                       // 17767
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                           // 17768
             * UP         0 Away from zero.                                                                           // 17769
             * DOWN       1 Towards zero.                                                                             // 17770
             * CEIL       2 Towards +Infinity.                                                                        // 17771
             * FLOOR      3 Towards -Infinity.                                                                        // 17772
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                            // 17773
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                          // 17774
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                        // 17775
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                             // 17776
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                             // 17777
             */                                                                                                       // 17778
            ROUNDING_MODE = 4,                       // 0 to 8                                                        // 17779
                                                                                                                      // 17780
            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                             // 17781
                                                                                                                      // 17782
            // The exponent value at and beneath which toString returns exponential notation.                         // 17783
            // Number type: -7                                                                                        // 17784
            TO_EXP_NEG = -7,                         // 0 to -MAX                                                     // 17785
                                                                                                                      // 17786
            // The exponent value at and above which toString returns exponential notation.                           // 17787
            // Number type: 21                                                                                        // 17788
            TO_EXP_POS = 21,                         // 0 to MAX                                                      // 17789
                                                                                                                      // 17790
            // RANGE : [MIN_EXP, MAX_EXP]                                                                             // 17791
                                                                                                                      // 17792
            // The minimum exponent value, beneath which underflow to zero occurs.                                    // 17793
            // Number type: -324  (5e-324)                                                                            // 17794
            MIN_EXP = -1e7,                          // -1 to -MAX                                                    // 17795
                                                                                                                      // 17796
            // The maximum exponent value, above which overflow to Infinity occurs.                                   // 17797
            // Number type:  308  (1.7976931348623157e+308)                                                           // 17798
            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                              // 17799
            MAX_EXP = 1e7,                           // 1 to MAX                                                      // 17800
                                                                                                                      // 17801
            // Whether BigNumber Errors are ever thrown.                                                              // 17802
            ERRORS = true,                           // true or false                                                 // 17803
                                                                                                                      // 17804
            // Change to intValidatorNoErrors if ERRORS is false.                                                     // 17805
            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                   // 17806
                                                                                                                      // 17807
            // Whether to use cryptographically-secure random number generation, if available.                        // 17808
            CRYPTO = false,                          // true or false                                                 // 17809
                                                                                                                      // 17810
            /*                                                                                                        // 17811
             * The modulo mode used when calculating the modulus: a mod n.                                            // 17812
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                   // 17813
             * The remainder (r) is calculated as: r = a - n * q.                                                     // 17814
             *                                                                                                        // 17815
             * UP        0 The remainder is positive if the dividend is negative, else is negative.                   // 17816
             * DOWN      1 The remainder has the same sign as the dividend.                                           // 17817
             *             This modulo mode is commonly known as 'truncated division' and is                          // 17818
             *             equivalent to (a % n) in JavaScript.                                                       // 17819
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                 // 17820
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                               // 17821
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                       // 17822
             *             The remainder is always positive.                                                          // 17823
             *                                                                                                        // 17824
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                    // 17825
             * modes are commonly used for the modulus operation.                                                     // 17826
             * Although the other rounding modes can also be used, they may not give useful results.                  // 17827
             */                                                                                                       // 17828
            MODULO_MODE = 1,                         // 0 to 9                                                        // 17829
                                                                                                                      // 17830
            // The maximum number of significant digits of the result of the toPower operation.                       // 17831
            // If POW_PRECISION is 0, there will be unlimited significant digits.                                     // 17832
            POW_PRECISION = 100,                     // 0 to MAX                                                      // 17833
                                                                                                                      // 17834
            // The format specification used by the BigNumber.prototype.toFormat method.                              // 17835
            FORMAT = {                                                                                                // 17836
                decimalSeparator: '.',                                                                                // 17837
                groupSeparator: ',',                                                                                  // 17838
                groupSize: 3,                                                                                         // 17839
                secondaryGroupSize: 0,                                                                                // 17840
                fractionGroupSeparator: '\xA0',      // non-breaking space                                            // 17841
                fractionGroupSize: 0                                                                                  // 17842
            };                                                                                                        // 17843
                                                                                                                      // 17844
                                                                                                                      // 17845
        /******************************************************************************************/                  // 17846
                                                                                                                      // 17847
                                                                                                                      // 17848
        // CONSTRUCTOR                                                                                                // 17849
                                                                                                                      // 17850
                                                                                                                      // 17851
        /*                                                                                                            // 17852
         * The BigNumber constructor and exported function.                                                           // 17853
         * Create and return a new instance of a BigNumber object.                                                    // 17854
         *                                                                                                            // 17855
         * n {number|string|BigNumber} A numeric value.                                                               // 17856
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                    // 17857
         */                                                                                                           // 17858
        function BigNumber( n, b ) {                                                                                  // 17859
            var c, e, i, num, len, str,                                                                               // 17860
                x = this;                                                                                             // 17861
                                                                                                                      // 17862
            // Enable constructor usage without new.                                                                  // 17863
            if ( !( x instanceof BigNumber ) ) {                                                                      // 17864
                                                                                                                      // 17865
                // 'BigNumber() constructor call without new: {n}'                                                    // 17866
                if (ERRORS) raise( 26, 'constructor call without new', n );                                           // 17867
                return new BigNumber( n, b );                                                                         // 17868
            }                                                                                                         // 17869
                                                                                                                      // 17870
            // 'new BigNumber() base not an integer: {b}'                                                             // 17871
            // 'new BigNumber() base out of range: {b}'                                                               // 17872
            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                 // 17873
                                                                                                                      // 17874
                // Duplicate.                                                                                         // 17875
                if ( n instanceof BigNumber ) {                                                                       // 17876
                    x.s = n.s;                                                                                        // 17877
                    x.e = n.e;                                                                                        // 17878
                    x.c = ( n = n.c ) ? n.slice() : n;                                                                // 17879
                    id = 0;                                                                                           // 17880
                    return;                                                                                           // 17881
                }                                                                                                     // 17882
                                                                                                                      // 17883
                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                 // 17884
                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                             // 17885
                                                                                                                      // 17886
                    // Fast path for integers.                                                                        // 17887
                    if ( n === ~~n ) {                                                                                // 17888
                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                  // 17889
                        x.e = e;                                                                                      // 17890
                        x.c = [n];                                                                                    // 17891
                        id = 0;                                                                                       // 17892
                        return;                                                                                       // 17893
                    }                                                                                                 // 17894
                                                                                                                      // 17895
                    str = n + '';                                                                                     // 17896
                } else {                                                                                              // 17897
                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                        // 17898
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                  // 17899
                }                                                                                                     // 17900
            } else {                                                                                                  // 17901
                b = b | 0;                                                                                            // 17902
                str = n + '';                                                                                         // 17903
                                                                                                                      // 17904
                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                              // 17905
                // Allow exponential notation to be used with base 10 argument.                                       // 17906
                if ( b == 10 ) {                                                                                      // 17907
                    x = new BigNumber( n instanceof BigNumber ? n : str );                                            // 17908
                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                       // 17909
                }                                                                                                     // 17910
                                                                                                                      // 17911
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                             // 17912
                // Any number in exponential form will fail due to the [Ee][+-].                                      // 17913
                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                  // 17914
                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                                // 17915
                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                          // 17916
                    return parseNumeric( x, str, num, b );                                                            // 17917
                }                                                                                                     // 17918
                                                                                                                      // 17919
                if (num) {                                                                                            // 17920
                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                 // 17921
                                                                                                                      // 17922
                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {                                     // 17923
                                                                                                                      // 17924
                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                     // 17925
                        raise( id, tooManyDigits, n );                                                                // 17926
                    }                                                                                                 // 17927
                                                                                                                      // 17928
                    // Prevent later check for length on converted number.                                            // 17929
                    num = false;                                                                                      // 17930
                } else {                                                                                              // 17931
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                  // 17932
                }                                                                                                     // 17933
                                                                                                                      // 17934
                str = convertBase( str, 10, b, x.s );                                                                 // 17935
            }                                                                                                         // 17936
                                                                                                                      // 17937
            // Decimal point?                                                                                         // 17938
            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                        // 17939
                                                                                                                      // 17940
            // Exponential form?                                                                                      // 17941
            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                   // 17942
                                                                                                                      // 17943
                // Determine exponent.                                                                                // 17944
                if ( e < 0 ) e = i;                                                                                   // 17945
                e += +str.slice( i + 1 );                                                                             // 17946
                str = str.substring( 0, i );                                                                          // 17947
            } else if ( e < 0 ) {                                                                                     // 17948
                                                                                                                      // 17949
                // Integer.                                                                                           // 17950
                e = str.length;                                                                                       // 17951
            }                                                                                                         // 17952
                                                                                                                      // 17953
            // Determine leading zeros.                                                                               // 17954
            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                             // 17955
                                                                                                                      // 17956
            // Determine trailing zeros.                                                                              // 17957
            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                  // 17958
            str = str.slice( i, len + 1 );                                                                            // 17959
                                                                                                                      // 17960
            if (str) {                                                                                                // 17961
                len = str.length;                                                                                     // 17962
                                                                                                                      // 17963
                // Disallow numbers with over 15 significant digits if number type.                                   // 17964
                // 'new BigNumber() number type has more than 15 significant digits: {n}'                             // 17965
                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );                                 // 17966
                                                                                                                      // 17967
                e = e - i - 1;                                                                                        // 17968
                                                                                                                      // 17969
                 // Overflow?                                                                                         // 17970
                if ( e > MAX_EXP ) {                                                                                  // 17971
                                                                                                                      // 17972
                    // Infinity.                                                                                      // 17973
                    x.c = x.e = null;                                                                                 // 17974
                                                                                                                      // 17975
                // Underflow?                                                                                         // 17976
                } else if ( e < MIN_EXP ) {                                                                           // 17977
                                                                                                                      // 17978
                    // Zero.                                                                                          // 17979
                    x.c = [ x.e = 0 ];                                                                                // 17980
                } else {                                                                                              // 17981
                    x.e = e;                                                                                          // 17982
                    x.c = [];                                                                                         // 17983
                                                                                                                      // 17984
                    // Transform base                                                                                 // 17985
                                                                                                                      // 17986
                    // e is the base 10 exponent.                                                                     // 17987
                    // i is where to slice str to get the first element of the coefficient array.                     // 17988
                    i = ( e + 1 ) % LOG_BASE;                                                                         // 17989
                    if ( e < 0 ) i += LOG_BASE;                                                                       // 17990
                                                                                                                      // 17991
                    if ( i < len ) {                                                                                  // 17992
                        if (i) x.c.push( +str.slice( 0, i ) );                                                        // 17993
                                                                                                                      // 17994
                        for ( len -= LOG_BASE; i < len; ) {                                                           // 17995
                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                               // 17996
                        }                                                                                             // 17997
                                                                                                                      // 17998
                        str = str.slice(i);                                                                           // 17999
                        i = LOG_BASE - str.length;                                                                    // 18000
                    } else {                                                                                          // 18001
                        i -= len;                                                                                     // 18002
                    }                                                                                                 // 18003
                                                                                                                      // 18004
                    for ( ; i--; str += '0' );                                                                        // 18005
                    x.c.push( +str );                                                                                 // 18006
                }                                                                                                     // 18007
            } else {                                                                                                  // 18008
                                                                                                                      // 18009
                // Zero.                                                                                              // 18010
                x.c = [ x.e = 0 ];                                                                                    // 18011
            }                                                                                                         // 18012
                                                                                                                      // 18013
            id = 0;                                                                                                   // 18014
        }                                                                                                             // 18015
                                                                                                                      // 18016
                                                                                                                      // 18017
        // CONSTRUCTOR PROPERTIES                                                                                     // 18018
                                                                                                                      // 18019
                                                                                                                      // 18020
        BigNumber.another = another;                                                                                  // 18021
                                                                                                                      // 18022
        BigNumber.ROUND_UP = 0;                                                                                       // 18023
        BigNumber.ROUND_DOWN = 1;                                                                                     // 18024
        BigNumber.ROUND_CEIL = 2;                                                                                     // 18025
        BigNumber.ROUND_FLOOR = 3;                                                                                    // 18026
        BigNumber.ROUND_HALF_UP = 4;                                                                                  // 18027
        BigNumber.ROUND_HALF_DOWN = 5;                                                                                // 18028
        BigNumber.ROUND_HALF_EVEN = 6;                                                                                // 18029
        BigNumber.ROUND_HALF_CEIL = 7;                                                                                // 18030
        BigNumber.ROUND_HALF_FLOOR = 8;                                                                               // 18031
        BigNumber.EUCLID = 9;                                                                                         // 18032
                                                                                                                      // 18033
                                                                                                                      // 18034
        /*                                                                                                            // 18035
         * Configure infrequently-changing library-wide settings.                                                     // 18036
         *                                                                                                            // 18037
         * Accept an object or an argument list, with one or many of the following properties or                      // 18038
         * parameters respectively:                                                                                   // 18039
         *                                                                                                            // 18040
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                    // 18041
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                      // 18042
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                     // 18043
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                             // 18044
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                            // 18045
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                    // 18046
         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                   // 18047
         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                   // 18048
         *   MODULO_MODE     {number}           0 to 9 inclusive                                                      // 18049
         *   POW_PRECISION   {number}           0 to MAX inclusive                                                    // 18050
         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                      // 18051
         *      decimalSeparator       {string}                                                                       // 18052
         *      groupSeparator         {string}                                                                       // 18053
         *      groupSize              {number}                                                                       // 18054
         *      secondaryGroupSize     {number}                                                                       // 18055
         *      fractionGroupSeparator {string}                                                                       // 18056
         *      fractionGroupSize      {number}                                                                       // 18057
         *                                                                                                            // 18058
         * (The values assigned to the above FORMAT object properties are not checked for validity.)                  // 18059
         *                                                                                                            // 18060
         * E.g.                                                                                                       // 18061
         * BigNumber.config(20, 4) is equivalent to                                                                   // 18062
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                               // 18063
         *                                                                                                            // 18064
         * Ignore properties/parameters set to null or undefined.                                                     // 18065
         * Return an object with the properties current values.                                                       // 18066
         */                                                                                                           // 18067
        BigNumber.config = function () {                                                                              // 18068
            var v, p,                                                                                                 // 18069
                i = 0,                                                                                                // 18070
                r = {},                                                                                               // 18071
                a = arguments,                                                                                        // 18072
                o = a[0],                                                                                             // 18073
                has = o && typeof o == 'object'                                                                       // 18074
                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                           // 18075
                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                               // 18076
                                                                                                                      // 18077
            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                   // 18078
            // 'config() DECIMAL_PLACES not an integer: {v}'                                                          // 18079
            // 'config() DECIMAL_PLACES out of range: {v}'                                                            // 18080
            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                     // 18081
                DECIMAL_PLACES = v | 0;                                                                               // 18082
            }                                                                                                         // 18083
            r[p] = DECIMAL_PLACES;                                                                                    // 18084
                                                                                                                      // 18085
            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                      // 18086
            // 'config() ROUNDING_MODE not an integer: {v}'                                                           // 18087
            // 'config() ROUNDING_MODE out of range: {v}'                                                             // 18088
            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                        // 18089
                ROUNDING_MODE = v | 0;                                                                                // 18090
            }                                                                                                         // 18091
            r[p] = ROUNDING_MODE;                                                                                     // 18092
                                                                                                                      // 18093
            // EXPONENTIAL_AT {number|number[]}                                                                       // 18094
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                   // 18095
            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                          // 18096
            // 'config() EXPONENTIAL_AT out of range: {v}'                                                            // 18097
            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                      // 18098
                                                                                                                      // 18099
                if ( isArray(v) ) {                                                                                   // 18100
                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                    // 18101
                        TO_EXP_NEG = v[0] | 0;                                                                        // 18102
                        TO_EXP_POS = v[1] | 0;                                                                        // 18103
                    }                                                                                                 // 18104
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                      // 18105
                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                            // 18106
                }                                                                                                     // 18107
            }                                                                                                         // 18108
            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                        // 18109
                                                                                                                      // 18110
            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                     // 18111
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                            // 18112
            // 'config() RANGE not an integer: {v}'                                                                   // 18113
            // 'config() RANGE cannot be zero: {v}'                                                                   // 18114
            // 'config() RANGE out of range: {v}'                                                                     // 18115
            if ( has( p = 'RANGE' ) ) {                                                                               // 18116
                                                                                                                      // 18117
                if ( isArray(v) ) {                                                                                   // 18118
                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                   // 18119
                        MIN_EXP = v[0] | 0;                                                                           // 18120
                        MAX_EXP = v[1] | 0;                                                                           // 18121
                    }                                                                                                 // 18122
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                      // 18123
                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                     // 18124
                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                            // 18125
                }                                                                                                     // 18126
            }                                                                                                         // 18127
            r[p] = [ MIN_EXP, MAX_EXP ];                                                                              // 18128
                                                                                                                      // 18129
            // ERRORS {boolean|number} true, false, 1 or 0.                                                           // 18130
            // 'config() ERRORS not a boolean or binary digit: {v}'                                                   // 18131
            if ( has( p = 'ERRORS' ) ) {                                                                              // 18132
                                                                                                                      // 18133
                if ( v === !!v || v === 1 || v === 0 ) {                                                              // 18134
                    id = 0;                                                                                           // 18135
                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                    // 18136
                } else if (ERRORS) {                                                                                  // 18137
                    raise( 2, p + notBool, v );                                                                       // 18138
                }                                                                                                     // 18139
            }                                                                                                         // 18140
            r[p] = ERRORS;                                                                                            // 18141
                                                                                                                      // 18142
            // CRYPTO {boolean|number} true, false, 1 or 0.                                                           // 18143
            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                   // 18144
            // 'config() crypto unavailable: {crypto}'                                                                // 18145
            if ( has( p = 'CRYPTO' ) ) {                                                                              // 18146
                                                                                                                      // 18147
                if ( v === !!v || v === 1 || v === 0 ) {                                                              // 18148
                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );                                          // 18149
                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );                           // 18150
                } else if (ERRORS) {                                                                                  // 18151
                    raise( 2, p + notBool, v );                                                                       // 18152
                }                                                                                                     // 18153
            }                                                                                                         // 18154
            r[p] = CRYPTO;                                                                                            // 18155
                                                                                                                      // 18156
            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                        // 18157
            // 'config() MODULO_MODE not an integer: {v}'                                                             // 18158
            // 'config() MODULO_MODE out of range: {v}'                                                               // 18159
            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                          // 18160
                MODULO_MODE = v | 0;                                                                                  // 18161
            }                                                                                                         // 18162
            r[p] = MODULO_MODE;                                                                                       // 18163
                                                                                                                      // 18164
            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                    // 18165
            // 'config() POW_PRECISION not an integer: {v}'                                                           // 18166
            // 'config() POW_PRECISION out of range: {v}'                                                             // 18167
            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                      // 18168
                POW_PRECISION = v | 0;                                                                                // 18169
            }                                                                                                         // 18170
            r[p] = POW_PRECISION;                                                                                     // 18171
                                                                                                                      // 18172
            // FORMAT {object}                                                                                        // 18173
            // 'config() FORMAT not an object: {v}'                                                                   // 18174
            if ( has( p = 'FORMAT' ) ) {                                                                              // 18175
                                                                                                                      // 18176
                if ( typeof v == 'object' ) {                                                                         // 18177
                    FORMAT = v;                                                                                       // 18178
                } else if (ERRORS) {                                                                                  // 18179
                    raise( 2, p + ' not an object', v );                                                              // 18180
                }                                                                                                     // 18181
            }                                                                                                         // 18182
            r[p] = FORMAT;                                                                                            // 18183
                                                                                                                      // 18184
            return r;                                                                                                 // 18185
        };                                                                                                            // 18186
                                                                                                                      // 18187
                                                                                                                      // 18188
        /*                                                                                                            // 18189
         * Return a new BigNumber whose value is the maximum of the arguments.                                        // 18190
         *                                                                                                            // 18191
         * arguments {number|string|BigNumber}                                                                        // 18192
         */                                                                                                           // 18193
        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                          // 18194
                                                                                                                      // 18195
                                                                                                                      // 18196
        /*                                                                                                            // 18197
         * Return a new BigNumber whose value is the minimum of the arguments.                                        // 18198
         *                                                                                                            // 18199
         * arguments {number|string|BigNumber}                                                                        // 18200
         */                                                                                                           // 18201
        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                          // 18202
                                                                                                                      // 18203
                                                                                                                      // 18204
        /*                                                                                                            // 18205
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                     // 18206
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                       // 18207
         * zeros are produced).                                                                                       // 18208
         *                                                                                                            // 18209
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 18210
         *                                                                                                            // 18211
         * 'random() decimal places not an integer: {dp}'                                                             // 18212
         * 'random() decimal places out of range: {dp}'                                                               // 18213
         * 'random() crypto unavailable: {crypto}'                                                                    // 18214
         */                                                                                                           // 18215
        BigNumber.random = (function () {                                                                             // 18216
            var pow2_53 = 0x20000000000000;                                                                           // 18217
                                                                                                                      // 18218
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                            // 18219
            // Check if Math.random() produces more than 32 bits of randomness.                                       // 18220
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                   // 18221
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                            // 18222
            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                 // 18223
              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                          // 18224
              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                  // 18225
                  (Math.random() * 0x800000 | 0); };                                                                  // 18226
                                                                                                                      // 18227
            return function (dp) {                                                                                    // 18228
                var a, b, e, k, v,                                                                                    // 18229
                    i = 0,                                                                                            // 18230
                    c = [],                                                                                           // 18231
                    rand = new BigNumber(ONE);                                                                        // 18232
                                                                                                                      // 18233
                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                           // 18234
                k = mathceil( dp / LOG_BASE );                                                                        // 18235
                                                                                                                      // 18236
                if (CRYPTO) {                                                                                         // 18237
                                                                                                                      // 18238
                    // Browsers supporting crypto.getRandomValues.                                                    // 18239
                    if ( crypto && crypto.getRandomValues ) {                                                         // 18240
                                                                                                                      // 18241
                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                      // 18242
                                                                                                                      // 18243
                        for ( ; i < k; ) {                                                                            // 18244
                                                                                                                      // 18245
                            // 53 bits:                                                                               // 18246
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                  // 18247
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                            // 18248
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                             // 18249
                            //                                     11111 11111111 11111111                            // 18250
                            // 0x20000 is 2^21.                                                                       // 18251
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                   // 18252
                                                                                                                      // 18253
                            // Rejection sampling:                                                                    // 18254
                            // 0 <= v < 9007199254740992                                                              // 18255
                            // Probability that v >= 9e15, is                                                         // 18256
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                             // 18257
                            if ( v >= 9e15 ) {                                                                        // 18258
                                b = crypto.getRandomValues( new Uint32Array(2) );                                     // 18259
                                a[i] = b[0];                                                                          // 18260
                                a[i + 1] = b[1];                                                                      // 18261
                            } else {                                                                                  // 18262
                                                                                                                      // 18263
                                // 0 <= v <= 8999999999999999                                                         // 18264
                                // 0 <= (v % 1e14) <= 99999999999999                                                  // 18265
                                c.push( v % 1e14 );                                                                   // 18266
                                i += 2;                                                                               // 18267
                            }                                                                                         // 18268
                        }                                                                                             // 18269
                        i = k / 2;                                                                                    // 18270
                                                                                                                      // 18271
                    // Node.js supporting crypto.randomBytes.                                                         // 18272
                    } else if ( crypto && crypto.randomBytes ) {                                                      // 18273
                                                                                                                      // 18274
                        // buffer                                                                                     // 18275
                        a = crypto.randomBytes( k *= 7 );                                                             // 18276
                                                                                                                      // 18277
                        for ( ; i < k; ) {                                                                            // 18278
                                                                                                                      // 18279
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                         // 18280
                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                 // 18281
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                            // 18282
                            // 0 <= v < 9007199254740992                                                              // 18283
                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                  // 18284
                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                             // 18285
                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                  // 18286
                                                                                                                      // 18287
                            if ( v >= 9e15 ) {                                                                        // 18288
                                crypto.randomBytes(7).copy( a, i );                                                   // 18289
                            } else {                                                                                  // 18290
                                                                                                                      // 18291
                                // 0 <= (v % 1e14) <= 99999999999999                                                  // 18292
                                c.push( v % 1e14 );                                                                   // 18293
                                i += 7;                                                                               // 18294
                            }                                                                                         // 18295
                        }                                                                                             // 18296
                        i = k / 7;                                                                                    // 18297
                    } else if (ERRORS) {                                                                              // 18298
                        raise( 14, 'crypto unavailable', crypto );                                                    // 18299
                    }                                                                                                 // 18300
                }                                                                                                     // 18301
                                                                                                                      // 18302
                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.                     // 18303
                if (!i) {                                                                                             // 18304
                                                                                                                      // 18305
                    for ( ; i < k; ) {                                                                                // 18306
                        v = random53bitInt();                                                                         // 18307
                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                            // 18308
                    }                                                                                                 // 18309
                }                                                                                                     // 18310
                                                                                                                      // 18311
                k = c[--i];                                                                                           // 18312
                dp %= LOG_BASE;                                                                                       // 18313
                                                                                                                      // 18314
                // Convert trailing digits to zeros according to dp.                                                  // 18315
                if ( k && dp ) {                                                                                      // 18316
                    v = POWS_TEN[LOG_BASE - dp];                                                                      // 18317
                    c[i] = mathfloor( k / v ) * v;                                                                    // 18318
                }                                                                                                     // 18319
                                                                                                                      // 18320
                // Remove trailing elements which are zero.                                                           // 18321
                for ( ; c[i] === 0; c.pop(), i-- );                                                                   // 18322
                                                                                                                      // 18323
                // Zero?                                                                                              // 18324
                if ( i < 0 ) {                                                                                        // 18325
                    c = [ e = 0 ];                                                                                    // 18326
                } else {                                                                                              // 18327
                                                                                                                      // 18328
                    // Remove leading elements which are zero and adjust exponent accordingly.                        // 18329
                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                             // 18330
                                                                                                                      // 18331
                    // Count the digits of the first element of c to determine leading zeros, and...                  // 18332
                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                    // 18333
                                                                                                                      // 18334
                    // adjust the exponent accordingly.                                                               // 18335
                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                            // 18336
                }                                                                                                     // 18337
                                                                                                                      // 18338
                rand.e = e;                                                                                           // 18339
                rand.c = c;                                                                                           // 18340
                return rand;                                                                                          // 18341
            };                                                                                                        // 18342
        })();                                                                                                         // 18343
                                                                                                                      // 18344
                                                                                                                      // 18345
        // PRIVATE FUNCTIONS                                                                                          // 18346
                                                                                                                      // 18347
                                                                                                                      // 18348
        // Convert a numeric string of baseIn to a numeric string of baseOut.                                         // 18349
        function convertBase( str, baseOut, baseIn, sign ) {                                                          // 18350
            var d, e, k, r, x, xc, y,                                                                                 // 18351
                i = str.indexOf( '.' ),                                                                               // 18352
                dp = DECIMAL_PLACES,                                                                                  // 18353
                rm = ROUNDING_MODE;                                                                                   // 18354
                                                                                                                      // 18355
            if ( baseIn < 37 ) str = str.toLowerCase();                                                               // 18356
                                                                                                                      // 18357
            // Non-integer.                                                                                           // 18358
            if ( i >= 0 ) {                                                                                           // 18359
                k = POW_PRECISION;                                                                                    // 18360
                                                                                                                      // 18361
                // Unlimited precision.                                                                               // 18362
                POW_PRECISION = 0;                                                                                    // 18363
                str = str.replace( '.', '' );                                                                         // 18364
                y = new BigNumber(baseIn);                                                                            // 18365
                x = y.pow( str.length - i );                                                                          // 18366
                POW_PRECISION = k;                                                                                    // 18367
                                                                                                                      // 18368
                // Convert str as if an integer, then restore the fraction part by dividing the                       // 18369
                // result by its base raised to a power.                                                              // 18370
                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                            // 18371
                y.e = y.c.length;                                                                                     // 18372
            }                                                                                                         // 18373
                                                                                                                      // 18374
            // Convert the number as integer.                                                                         // 18375
            xc = toBaseOut( str, baseIn, baseOut );                                                                   // 18376
            e = k = xc.length;                                                                                        // 18377
                                                                                                                      // 18378
            // Remove trailing zeros.                                                                                 // 18379
            for ( ; xc[--k] == 0; xc.pop() );                                                                         // 18380
            if ( !xc[0] ) return '0';                                                                                 // 18381
                                                                                                                      // 18382
            if ( i < 0 ) {                                                                                            // 18383
                --e;                                                                                                  // 18384
            } else {                                                                                                  // 18385
                x.c = xc;                                                                                             // 18386
                x.e = e;                                                                                              // 18387
                                                                                                                      // 18388
                // sign is needed for correct rounding.                                                               // 18389
                x.s = sign;                                                                                           // 18390
                x = div( x, y, dp, rm, baseOut );                                                                     // 18391
                xc = x.c;                                                                                             // 18392
                r = x.r;                                                                                              // 18393
                e = x.e;                                                                                              // 18394
            }                                                                                                         // 18395
                                                                                                                      // 18396
            d = e + dp + 1;                                                                                           // 18397
                                                                                                                      // 18398
            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                   // 18399
            i = xc[d];                                                                                                // 18400
            k = baseOut / 2;                                                                                          // 18401
            r = r || d < 0 || xc[d + 1] != null;                                                                      // 18402
                                                                                                                      // 18403
            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                               // 18404
                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                              // 18405
                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                 // 18406
                                                                                                                      // 18407
            if ( d < 1 || !xc[0] ) {                                                                                  // 18408
                                                                                                                      // 18409
                // 1^-dp or 0.                                                                                        // 18410
                str = r ? toFixedPoint( '1', -dp ) : '0';                                                             // 18411
            } else {                                                                                                  // 18412
                xc.length = d;                                                                                        // 18413
                                                                                                                      // 18414
                if (r) {                                                                                              // 18415
                                                                                                                      // 18416
                    // Rounding up may mean the previous digit has to be rounded up and so on.                        // 18417
                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                         // 18418
                        xc[d] = 0;                                                                                    // 18419
                                                                                                                      // 18420
                        if ( !d ) {                                                                                   // 18421
                            ++e;                                                                                      // 18422
                            xc.unshift(1);                                                                            // 18423
                        }                                                                                             // 18424
                    }                                                                                                 // 18425
                }                                                                                                     // 18426
                                                                                                                      // 18427
                // Determine trailing zeros.                                                                          // 18428
                for ( k = xc.length; !xc[--k]; );                                                                     // 18429
                                                                                                                      // 18430
                // E.g. [4, 11, 15] becomes 4bf.                                                                      // 18431
                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                   // 18432
                str = toFixedPoint( str, e );                                                                         // 18433
            }                                                                                                         // 18434
                                                                                                                      // 18435
            // The caller will add the sign.                                                                          // 18436
            return str;                                                                                               // 18437
        }                                                                                                             // 18438
                                                                                                                      // 18439
                                                                                                                      // 18440
        // Perform division in the specified base. Called by div and convertBase.                                     // 18441
        div = (function () {                                                                                          // 18442
                                                                                                                      // 18443
            // Assume non-zero x and k.                                                                               // 18444
            function multiply( x, k, base ) {                                                                         // 18445
                var m, temp, xlo, xhi,                                                                                // 18446
                    carry = 0,                                                                                        // 18447
                    i = x.length,                                                                                     // 18448
                    klo = k % SQRT_BASE,                                                                              // 18449
                    khi = k / SQRT_BASE | 0;                                                                          // 18450
                                                                                                                      // 18451
                for ( x = x.slice(); i--; ) {                                                                         // 18452
                    xlo = x[i] % SQRT_BASE;                                                                           // 18453
                    xhi = x[i] / SQRT_BASE | 0;                                                                       // 18454
                    m = khi * xlo + xhi * klo;                                                                        // 18455
                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                     // 18456
                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                  // 18457
                    x[i] = temp % base;                                                                               // 18458
                }                                                                                                     // 18459
                                                                                                                      // 18460
                if (carry) x.unshift(carry);                                                                          // 18461
                                                                                                                      // 18462
                return x;                                                                                             // 18463
            }                                                                                                         // 18464
                                                                                                                      // 18465
            function compare( a, b, aL, bL ) {                                                                        // 18466
                var i, cmp;                                                                                           // 18467
                                                                                                                      // 18468
                if ( aL != bL ) {                                                                                     // 18469
                    cmp = aL > bL ? 1 : -1;                                                                           // 18470
                } else {                                                                                              // 18471
                                                                                                                      // 18472
                    for ( i = cmp = 0; i < aL; i++ ) {                                                                // 18473
                                                                                                                      // 18474
                        if ( a[i] != b[i] ) {                                                                         // 18475
                            cmp = a[i] > b[i] ? 1 : -1;                                                               // 18476
                            break;                                                                                    // 18477
                        }                                                                                             // 18478
                    }                                                                                                 // 18479
                }                                                                                                     // 18480
                return cmp;                                                                                           // 18481
            }                                                                                                         // 18482
                                                                                                                      // 18483
            function subtract( a, b, aL, base ) {                                                                     // 18484
                var i = 0;                                                                                            // 18485
                                                                                                                      // 18486
                // Subtract b from a.                                                                                 // 18487
                for ( ; aL--; ) {                                                                                     // 18488
                    a[aL] -= i;                                                                                       // 18489
                    i = a[aL] < b[aL] ? 1 : 0;                                                                        // 18490
                    a[aL] = i * base + a[aL] - b[aL];                                                                 // 18491
                }                                                                                                     // 18492
                                                                                                                      // 18493
                // Remove leading zeros.                                                                              // 18494
                for ( ; !a[0] && a.length > 1; a.shift() );                                                           // 18495
            }                                                                                                         // 18496
                                                                                                                      // 18497
            // x: dividend, y: divisor.                                                                               // 18498
            return function ( x, y, dp, rm, base ) {                                                                  // 18499
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                             // 18500
                    yL, yz,                                                                                           // 18501
                    s = x.s == y.s ? 1 : -1,                                                                          // 18502
                    xc = x.c,                                                                                         // 18503
                    yc = y.c;                                                                                         // 18504
                                                                                                                      // 18505
                // Either NaN, Infinity or 0?                                                                         // 18506
                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                               // 18507
                                                                                                                      // 18508
                    return new BigNumber(                                                                             // 18509
                                                                                                                      // 18510
                      // Return NaN if either NaN, or both Infinity or 0.                                             // 18511
                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                     // 18512
                                                                                                                      // 18513
                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                    // 18514
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                       // 18515
                    );                                                                                                // 18516
                }                                                                                                     // 18517
                                                                                                                      // 18518
                q = new BigNumber(s);                                                                                 // 18519
                qc = q.c = [];                                                                                        // 18520
                e = x.e - y.e;                                                                                        // 18521
                s = dp + e + 1;                                                                                       // 18522
                                                                                                                      // 18523
                if ( !base ) {                                                                                        // 18524
                    base = BASE;                                                                                      // 18525
                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                      // 18526
                    s = s / LOG_BASE | 0;                                                                             // 18527
                }                                                                                                     // 18528
                                                                                                                      // 18529
                // Result exponent may be one less then the current value of e.                                       // 18530
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                       // 18531
                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                          // 18532
                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                    // 18533
                                                                                                                      // 18534
                if ( s < 0 ) {                                                                                        // 18535
                    qc.push(1);                                                                                       // 18536
                    more = true;                                                                                      // 18537
                } else {                                                                                              // 18538
                    xL = xc.length;                                                                                   // 18539
                    yL = yc.length;                                                                                   // 18540
                    i = 0;                                                                                            // 18541
                    s += 2;                                                                                           // 18542
                                                                                                                      // 18543
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                               // 18544
                                                                                                                      // 18545
                    n = mathfloor( base / ( yc[0] + 1 ) );                                                            // 18546
                                                                                                                      // 18547
                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                        // 18548
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                 // 18549
                    if ( n > 1 ) {                                                                                    // 18550
                        yc = multiply( yc, n, base );                                                                 // 18551
                        xc = multiply( xc, n, base );                                                                 // 18552
                        yL = yc.length;                                                                               // 18553
                        xL = xc.length;                                                                               // 18554
                    }                                                                                                 // 18555
                                                                                                                      // 18556
                    xi = yL;                                                                                          // 18557
                    rem = xc.slice( 0, yL );                                                                          // 18558
                    remL = rem.length;                                                                                // 18559
                                                                                                                      // 18560
                    // Add zeros to make remainder as long as divisor.                                                // 18561
                    for ( ; remL < yL; rem[remL++] = 0 );                                                             // 18562
                    yz = yc.slice();                                                                                  // 18563
                    yz.unshift(0);                                                                                    // 18564
                    yc0 = yc[0];                                                                                      // 18565
                    if ( yc[1] >= base / 2 ) yc0++;                                                                   // 18566
                    // Not necessary, but to prevent trial digit n > base, when using base 3.                         // 18567
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                             // 18568
                                                                                                                      // 18569
                    do {                                                                                              // 18570
                        n = 0;                                                                                        // 18571
                                                                                                                      // 18572
                        // Compare divisor and remainder.                                                             // 18573
                        cmp = compare( yc, rem, yL, remL );                                                           // 18574
                                                                                                                      // 18575
                        // If divisor < remainder.                                                                    // 18576
                        if ( cmp < 0 ) {                                                                              // 18577
                                                                                                                      // 18578
                            // Calculate trial digit, n.                                                              // 18579
                                                                                                                      // 18580
                            rem0 = rem[0];                                                                            // 18581
                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                   // 18582
                                                                                                                      // 18583
                            // n is how many times the divisor goes into the current remainder.                       // 18584
                            n = mathfloor( rem0 / yc0 );                                                              // 18585
                                                                                                                      // 18586
                            //  Algorithm:                                                                            // 18587
                            //  1. product = divisor * trial digit (n)                                                // 18588
                            //  2. if product > remainder: product -= divisor, n--                                    // 18589
                            //  3. remainder -= product                                                               // 18590
                            //  4. if product was < remainder at 2:                                                   // 18591
                            //    5. compare new remainder and divisor                                                // 18592
                            //    6. If remainder > divisor: remainder -= divisor, n++                                // 18593
                                                                                                                      // 18594
                            if ( n > 1 ) {                                                                            // 18595
                                                                                                                      // 18596
                                // n may be > base only when base is 3.                                               // 18597
                                if (n >= base) n = base - 1;                                                          // 18598
                                                                                                                      // 18599
                                // product = divisor * trial digit.                                                   // 18600
                                prod = multiply( yc, n, base );                                                       // 18601
                                prodL = prod.length;                                                                  // 18602
                                remL = rem.length;                                                                    // 18603
                                                                                                                      // 18604
                                // Compare product and remainder.                                                     // 18605
                                // If product > remainder.                                                            // 18606
                                // Trial digit n too high.                                                            // 18607
                                // n is 1 too high about 5% of the time, and is not known to have                     // 18608
                                // ever been more than 1 too high.                                                    // 18609
                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                    // 18610
                                    n--;                                                                              // 18611
                                                                                                                      // 18612
                                    // Subtract divisor from product.                                                 // 18613
                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                              // 18614
                                    prodL = prod.length;                                                              // 18615
                                    cmp = 1;                                                                          // 18616
                                }                                                                                     // 18617
                            } else {                                                                                  // 18618
                                                                                                                      // 18619
                                // n is 0 or 1, cmp is -1.                                                            // 18620
                                // If n is 0, there is no need to compare yc and rem again below,                     // 18621
                                // so change cmp to 1 to avoid it.                                                    // 18622
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                      // 18623
                                if ( n == 0 ) {                                                                       // 18624
                                                                                                                      // 18625
                                    // divisor < remainder, so n must be at least 1.                                  // 18626
                                    cmp = n = 1;                                                                      // 18627
                                }                                                                                     // 18628
                                                                                                                      // 18629
                                // product = divisor                                                                  // 18630
                                prod = yc.slice();                                                                    // 18631
                                prodL = prod.length;                                                                  // 18632
                            }                                                                                         // 18633
                                                                                                                      // 18634
                            if ( prodL < remL ) prod.unshift(0);                                                      // 18635
                                                                                                                      // 18636
                            // Subtract product from remainder.                                                       // 18637
                            subtract( rem, prod, remL, base );                                                        // 18638
                            remL = rem.length;                                                                        // 18639
                                                                                                                      // 18640
                             // If product was < remainder.                                                           // 18641
                            if ( cmp == -1 ) {                                                                        // 18642
                                                                                                                      // 18643
                                // Compare divisor and new remainder.                                                 // 18644
                                // If divisor < new remainder, subtract divisor from remainder.                       // 18645
                                // Trial digit n too low.                                                             // 18646
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                    // 18647
                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                          // 18648
                                    n++;                                                                              // 18649
                                                                                                                      // 18650
                                    // Subtract divisor from remainder.                                               // 18651
                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                 // 18652
                                    remL = rem.length;                                                                // 18653
                                }                                                                                     // 18654
                            }                                                                                         // 18655
                        } else if ( cmp === 0 ) {                                                                     // 18656
                            n++;                                                                                      // 18657
                            rem = [0];                                                                                // 18658
                        } // else cmp === 1 and n will be 0                                                           // 18659
                                                                                                                      // 18660
                        // Add the next digit, n, to the result array.                                                // 18661
                        qc[i++] = n;                                                                                  // 18662
                                                                                                                      // 18663
                        // Update the remainder.                                                                      // 18664
                        if ( rem[0] ) {                                                                               // 18665
                            rem[remL++] = xc[xi] || 0;                                                                // 18666
                        } else {                                                                                      // 18667
                            rem = [ xc[xi] ];                                                                         // 18668
                            remL = 1;                                                                                 // 18669
                        }                                                                                             // 18670
                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                               // 18671
                                                                                                                      // 18672
                    more = rem[0] != null;                                                                            // 18673
                                                                                                                      // 18674
                    // Leading zero?                                                                                  // 18675
                    if ( !qc[0] ) qc.shift();                                                                         // 18676
                }                                                                                                     // 18677
                                                                                                                      // 18678
                if ( base == BASE ) {                                                                                 // 18679
                                                                                                                      // 18680
                    // To calculate q.e, first get the number of digits of qc[0].                                     // 18681
                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                  // 18682
                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                    // 18683
                                                                                                                      // 18684
                // Caller is convertBase.                                                                             // 18685
                } else {                                                                                              // 18686
                    q.e = e;                                                                                          // 18687
                    q.r = +more;                                                                                      // 18688
                }                                                                                                     // 18689
                                                                                                                      // 18690
                return q;                                                                                             // 18691
            };                                                                                                        // 18692
        })();                                                                                                         // 18693
                                                                                                                      // 18694
                                                                                                                      // 18695
        /*                                                                                                            // 18696
         * Return a string representing the value of BigNumber n in fixed-point or exponential                        // 18697
         * notation rounded to the specified decimal places or significant digits.                                    // 18698
         *                                                                                                            // 18699
         * n is a BigNumber.                                                                                          // 18700
         * i is the index of the last digit required (i.e. the digit that may be rounded up).                         // 18701
         * rm is the rounding mode.                                                                                   // 18702
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                            // 18703
         */                                                                                                           // 18704
        function format( n, i, rm, caller ) {                                                                         // 18705
            var c0, e, ne, len, str;                                                                                  // 18706
                                                                                                                      // 18707
            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                           // 18708
              ? rm | 0 : ROUNDING_MODE;                                                                               // 18709
                                                                                                                      // 18710
            if ( !n.c ) return n.toString();                                                                          // 18711
            c0 = n.c[0];                                                                                              // 18712
            ne = n.e;                                                                                                 // 18713
                                                                                                                      // 18714
            if ( i == null ) {                                                                                        // 18715
                str = coeffToString( n.c );                                                                           // 18716
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                                // 18717
                  ? toExponential( str, ne )                                                                          // 18718
                  : toFixedPoint( str, ne );                                                                          // 18719
            } else {                                                                                                  // 18720
                n = round( new BigNumber(n), i, rm );                                                                 // 18721
                                                                                                                      // 18722
                // n.e may have changed if the value was rounded up.                                                  // 18723
                e = n.e;                                                                                              // 18724
                                                                                                                      // 18725
                str = coeffToString( n.c );                                                                           // 18726
                len = str.length;                                                                                     // 18727
                                                                                                                      // 18728
                // toPrecision returns exponential notation if the number of significant digits                       // 18729
                // specified is less than the number of digits necessary to represent the integer                     // 18730
                // part of the value in fixed-point notation.                                                         // 18731
                                                                                                                      // 18732
                // Exponential notation.                                                                              // 18733
                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                                // 18734
                                                                                                                      // 18735
                    // Append zeros?                                                                                  // 18736
                    for ( ; len < i; str += '0', len++ );                                                             // 18737
                    str = toExponential( str, e );                                                                    // 18738
                                                                                                                      // 18739
                // Fixed-point notation.                                                                              // 18740
                } else {                                                                                              // 18741
                    i -= ne;                                                                                          // 18742
                    str = toFixedPoint( str, e );                                                                     // 18743
                                                                                                                      // 18744
                    // Append zeros?                                                                                  // 18745
                    if ( e + 1 > len ) {                                                                              // 18746
                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                           // 18747
                    } else {                                                                                          // 18748
                        i += e - len;                                                                                 // 18749
                        if ( i > 0 ) {                                                                                // 18750
                            if ( e + 1 == len ) str += '.';                                                           // 18751
                            for ( ; i--; str += '0' );                                                                // 18752
                        }                                                                                             // 18753
                    }                                                                                                 // 18754
                }                                                                                                     // 18755
            }                                                                                                         // 18756
                                                                                                                      // 18757
            return n.s < 0 && c0 ? '-' + str : str;                                                                   // 18758
        }                                                                                                             // 18759
                                                                                                                      // 18760
                                                                                                                      // 18761
        // Handle BigNumber.max and BigNumber.min.                                                                    // 18762
        function maxOrMin( args, method ) {                                                                           // 18763
            var m, n,                                                                                                 // 18764
                i = 0;                                                                                                // 18765
                                                                                                                      // 18766
            if ( isArray( args[0] ) ) args = args[0];                                                                 // 18767
            m = new BigNumber( args[0] );                                                                             // 18768
                                                                                                                      // 18769
            for ( ; ++i < args.length; ) {                                                                            // 18770
                n = new BigNumber( args[i] );                                                                         // 18771
                                                                                                                      // 18772
                // If any number is NaN, return NaN.                                                                  // 18773
                if ( !n.s ) {                                                                                         // 18774
                    m = n;                                                                                            // 18775
                    break;                                                                                            // 18776
                } else if ( method.call( m, n ) ) {                                                                   // 18777
                    m = n;                                                                                            // 18778
                }                                                                                                     // 18779
            }                                                                                                         // 18780
                                                                                                                      // 18781
            return m;                                                                                                 // 18782
        }                                                                                                             // 18783
                                                                                                                      // 18784
                                                                                                                      // 18785
        /*                                                                                                            // 18786
         * Return true if n is an integer in range, otherwise throw.                                                  // 18787
         * Use for argument validation when ERRORS is true.                                                           // 18788
         */                                                                                                           // 18789
        function intValidatorWithErrors( n, min, max, caller, name ) {                                                // 18790
            if ( n < min || n > max || n != truncate(n) ) {                                                           // 18791
                raise( caller, ( name || 'decimal places' ) +                                                         // 18792
                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                  // 18793
            }                                                                                                         // 18794
                                                                                                                      // 18795
            return true;                                                                                              // 18796
        }                                                                                                             // 18797
                                                                                                                      // 18798
                                                                                                                      // 18799
        /*                                                                                                            // 18800
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                    // 18801
         * Called by minus, plus and times.                                                                           // 18802
         */                                                                                                           // 18803
        function normalise( n, c, e ) {                                                                               // 18804
            var i = 1,                                                                                                // 18805
                j = c.length;                                                                                         // 18806
                                                                                                                      // 18807
             // Remove trailing zeros.                                                                                // 18808
            for ( ; !c[--j]; c.pop() );                                                                               // 18809
                                                                                                                      // 18810
            // Calculate the base 10 exponent. First get the number of digits of c[0].                                // 18811
            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                  // 18812
                                                                                                                      // 18813
            // Overflow?                                                                                              // 18814
            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                           // 18815
                                                                                                                      // 18816
                // Infinity.                                                                                          // 18817
                n.c = n.e = null;                                                                                     // 18818
                                                                                                                      // 18819
            // Underflow?                                                                                             // 18820
            } else if ( e < MIN_EXP ) {                                                                               // 18821
                                                                                                                      // 18822
                // Zero.                                                                                              // 18823
                n.c = [ n.e = 0 ];                                                                                    // 18824
            } else {                                                                                                  // 18825
                n.e = e;                                                                                              // 18826
                n.c = c;                                                                                              // 18827
            }                                                                                                         // 18828
                                                                                                                      // 18829
            return n;                                                                                                 // 18830
        }                                                                                                             // 18831
                                                                                                                      // 18832
                                                                                                                      // 18833
        // Handle values that fail the validity test in BigNumber.                                                    // 18834
        parseNumeric = (function () {                                                                                 // 18835
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,                                                           // 18836
                dotAfter = /^([^.]+)\.$/,                                                                             // 18837
                dotBefore = /^\.([^.]+)$/,                                                                            // 18838
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                               // 18839
                whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;                                                      // 18840
                                                                                                                      // 18841
            return function ( x, str, num, b ) {                                                                      // 18842
                var base,                                                                                             // 18843
                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                              // 18844
                                                                                                                      // 18845
                // No exception on ±Infinity or NaN.                                                                  // 18846
                if ( isInfinityOrNaN.test(s) ) {                                                                      // 18847
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                           // 18848
                } else {                                                                                              // 18849
                    if ( !num ) {                                                                                     // 18850
                                                                                                                      // 18851
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i                                                 // 18852
                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                           // 18853
                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                         // 18854
                            return !b || b == base ? p1 : m;                                                          // 18855
                        });                                                                                           // 18856
                                                                                                                      // 18857
                        if (b) {                                                                                      // 18858
                            base = b;                                                                                 // 18859
                                                                                                                      // 18860
                            // E.g. '1.' to '1', '.1' to '0.1'                                                        // 18861
                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                             // 18862
                        }                                                                                             // 18863
                                                                                                                      // 18864
                        if ( str != s ) return new BigNumber( s, base );                                              // 18865
                    }                                                                                                 // 18866
                                                                                                                      // 18867
                    // 'new BigNumber() not a number: {n}'                                                            // 18868
                    // 'new BigNumber() not a base {b} number: {n}'                                                   // 18869
                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                    // 18870
                    x.s = null;                                                                                       // 18871
                }                                                                                                     // 18872
                                                                                                                      // 18873
                x.c = x.e = null;                                                                                     // 18874
                id = 0;                                                                                               // 18875
            }                                                                                                         // 18876
        })();                                                                                                         // 18877
                                                                                                                      // 18878
                                                                                                                      // 18879
        // Throw a BigNumber Error.                                                                                   // 18880
        function raise( caller, msg, val ) {                                                                          // 18881
            var error = new Error( [                                                                                  // 18882
                'new BigNumber',     // 0                                                                             // 18883
                'cmp',               // 1                                                                             // 18884
                'config',            // 2                                                                             // 18885
                'div',               // 3                                                                             // 18886
                'divToInt',          // 4                                                                             // 18887
                'eq',                // 5                                                                             // 18888
                'gt',                // 6                                                                             // 18889
                'gte',               // 7                                                                             // 18890
                'lt',                // 8                                                                             // 18891
                'lte',               // 9                                                                             // 18892
                'minus',             // 10                                                                            // 18893
                'mod',               // 11                                                                            // 18894
                'plus',              // 12                                                                            // 18895
                'precision',         // 13                                                                            // 18896
                'random',            // 14                                                                            // 18897
                'round',             // 15                                                                            // 18898
                'shift',             // 16                                                                            // 18899
                'times',             // 17                                                                            // 18900
                'toDigits',          // 18                                                                            // 18901
                'toExponential',     // 19                                                                            // 18902
                'toFixed',           // 20                                                                            // 18903
                'toFormat',          // 21                                                                            // 18904
                'toFraction',        // 22                                                                            // 18905
                'pow',               // 23                                                                            // 18906
                'toPrecision',       // 24                                                                            // 18907
                'toString',          // 25                                                                            // 18908
                'BigNumber'          // 26                                                                            // 18909
            ][caller] + '() ' + msg + ': ' + val );                                                                   // 18910
                                                                                                                      // 18911
            error.name = 'BigNumber Error';                                                                           // 18912
            id = 0;                                                                                                   // 18913
            throw error;                                                                                              // 18914
        }                                                                                                             // 18915
                                                                                                                      // 18916
                                                                                                                      // 18917
        /*                                                                                                            // 18918
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                        // 18919
         * If r is truthy, it is known that there are more digits after the rounding digit.                           // 18920
         */                                                                                                           // 18921
        function round( x, sd, rm, r ) {                                                                              // 18922
            var d, i, j, k, n, ni, rd,                                                                                // 18923
                xc = x.c,                                                                                             // 18924
                pows10 = POWS_TEN;                                                                                    // 18925
                                                                                                                      // 18926
            // if x is not Infinity or NaN...                                                                         // 18927
            if (xc) {                                                                                                 // 18928
                                                                                                                      // 18929
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                   // 18930
                // n is a base 1e14 number, the value of the element of array x.c containing rd.                      // 18931
                // ni is the index of n within x.c.                                                                   // 18932
                // d is the number of digits of n.                                                                    // 18933
                // i is the index of rd within n including leading zeros.                                             // 18934
                // j is the actual index of rd within n (if < 0, rd is a leading zero).                               // 18935
                out: {                                                                                                // 18936
                                                                                                                      // 18937
                    // Get the number of digits of the first element of xc.                                           // 18938
                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                  // 18939
                    i = sd - d;                                                                                       // 18940
                                                                                                                      // 18941
                    // If the rounding digit is in the first element of xc...                                         // 18942
                    if ( i < 0 ) {                                                                                    // 18943
                        i += LOG_BASE;                                                                                // 18944
                        j = sd;                                                                                       // 18945
                        n = xc[ ni = 0 ];                                                                             // 18946
                                                                                                                      // 18947
                        // Get the rounding digit at index j of n.                                                    // 18948
                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                        // 18949
                    } else {                                                                                          // 18950
                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                        // 18951
                                                                                                                      // 18952
                        if ( ni >= xc.length ) {                                                                      // 18953
                                                                                                                      // 18954
                            if (r) {                                                                                  // 18955
                                                                                                                      // 18956
                                // Needed by sqrt.                                                                    // 18957
                                for ( ; xc.length <= ni; xc.push(0) );                                                // 18958
                                n = rd = 0;                                                                           // 18959
                                d = 1;                                                                                // 18960
                                i %= LOG_BASE;                                                                        // 18961
                                j = i - LOG_BASE + 1;                                                                 // 18962
                            } else {                                                                                  // 18963
                                break out;                                                                            // 18964
                            }                                                                                         // 18965
                        } else {                                                                                      // 18966
                            n = k = xc[ni];                                                                           // 18967
                                                                                                                      // 18968
                            // Get the number of digits of n.                                                         // 18969
                            for ( d = 1; k >= 10; k /= 10, d++ );                                                     // 18970
                                                                                                                      // 18971
                            // Get the index of rd within n.                                                          // 18972
                            i %= LOG_BASE;                                                                            // 18973
                                                                                                                      // 18974
                            // Get the index of rd within n, adjusted for leading zeros.                              // 18975
                            // The number of leading zeros of n is given by LOG_BASE - d.                             // 18976
                            j = i - LOG_BASE + d;                                                                     // 18977
                                                                                                                      // 18978
                            // Get the rounding digit at index j of n.                                                // 18979
                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                        // 18980
                        }                                                                                             // 18981
                    }                                                                                                 // 18982
                                                                                                                      // 18983
                    r = r || sd < 0 ||                                                                                // 18984
                                                                                                                      // 18985
                    // Are there any non-zero digits after the rounding digit?                                        // 18986
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                  // 18987
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                   // 18988
                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                  // 18989
                                                                                                                      // 18990
                    r = rm < 4                                                                                        // 18991
                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                       // 18992
                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                             // 18993
                                                                                                                      // 18994
                        // Check whether the digit to the left of the rounding digit is odd.                          // 18995
                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                      // 18996
                          rm == ( x.s < 0 ? 8 : 7 ) );                                                                // 18997
                                                                                                                      // 18998
                    if ( sd < 1 || !xc[0] ) {                                                                         // 18999
                        xc.length = 0;                                                                                // 19000
                                                                                                                      // 19001
                        if (r) {                                                                                      // 19002
                                                                                                                      // 19003
                            // Convert sd to decimal places.                                                          // 19004
                            sd -= x.e + 1;                                                                            // 19005
                                                                                                                      // 19006
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                       // 19007
                            xc[0] = pows10[ sd % LOG_BASE ];                                                          // 19008
                            x.e = -sd || 0;                                                                           // 19009
                        } else {                                                                                      // 19010
                                                                                                                      // 19011
                            // Zero.                                                                                  // 19012
                            xc[0] = x.e = 0;                                                                          // 19013
                        }                                                                                             // 19014
                                                                                                                      // 19015
                        return x;                                                                                     // 19016
                    }                                                                                                 // 19017
                                                                                                                      // 19018
                    // Remove excess digits.                                                                          // 19019
                    if ( i == 0 ) {                                                                                   // 19020
                        xc.length = ni;                                                                               // 19021
                        k = 1;                                                                                        // 19022
                        ni--;                                                                                         // 19023
                    } else {                                                                                          // 19024
                        xc.length = ni + 1;                                                                           // 19025
                        k = pows10[ LOG_BASE - i ];                                                                   // 19026
                                                                                                                      // 19027
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                       // 19028
                        // j > 0 means i > number of leading zeros of n.                                              // 19029
                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                        // 19030
                    }                                                                                                 // 19031
                                                                                                                      // 19032
                    // Round up?                                                                                      // 19033
                    if (r) {                                                                                          // 19034
                                                                                                                      // 19035
                        for ( ; ; ) {                                                                                 // 19036
                                                                                                                      // 19037
                            // If the digit to be rounded up is in the first element of xc...                         // 19038
                            if ( ni == 0 ) {                                                                          // 19039
                                                                                                                      // 19040
                                // i will be the length of xc[0] before k is added.                                   // 19041
                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                      // 19042
                                j = xc[0] += k;                                                                       // 19043
                                for ( k = 1; j >= 10; j /= 10, k++ );                                                 // 19044
                                                                                                                      // 19045
                                // if i != k the length has increased.                                                // 19046
                                if ( i != k ) {                                                                       // 19047
                                    x.e++;                                                                            // 19048
                                    if ( xc[0] == BASE ) xc[0] = 1;                                                   // 19049
                                }                                                                                     // 19050
                                                                                                                      // 19051
                                break;                                                                                // 19052
                            } else {                                                                                  // 19053
                                xc[ni] += k;                                                                          // 19054
                                if ( xc[ni] != BASE ) break;                                                          // 19055
                                xc[ni--] = 0;                                                                         // 19056
                                k = 1;                                                                                // 19057
                            }                                                                                         // 19058
                        }                                                                                             // 19059
                    }                                                                                                 // 19060
                                                                                                                      // 19061
                    // Remove trailing zeros.                                                                         // 19062
                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                   // 19063
                }                                                                                                     // 19064
                                                                                                                      // 19065
                // Overflow? Infinity.                                                                                // 19066
                if ( x.e > MAX_EXP ) {                                                                                // 19067
                    x.c = x.e = null;                                                                                 // 19068
                                                                                                                      // 19069
                // Underflow? Zero.                                                                                   // 19070
                } else if ( x.e < MIN_EXP ) {                                                                         // 19071
                    x.c = [ x.e = 0 ];                                                                                // 19072
                }                                                                                                     // 19073
            }                                                                                                         // 19074
                                                                                                                      // 19075
            return x;                                                                                                 // 19076
        }                                                                                                             // 19077
                                                                                                                      // 19078
                                                                                                                      // 19079
        // PROTOTYPE/INSTANCE METHODS                                                                                 // 19080
                                                                                                                      // 19081
                                                                                                                      // 19082
        /*                                                                                                            // 19083
         * Return a new BigNumber whose value is the absolute value of this BigNumber.                                // 19084
         */                                                                                                           // 19085
        P.absoluteValue = P.abs = function () {                                                                       // 19086
            var x = new BigNumber(this);                                                                              // 19087
            if ( x.s < 0 ) x.s = 1;                                                                                   // 19088
            return x;                                                                                                 // 19089
        };                                                                                                            // 19090
                                                                                                                      // 19091
                                                                                                                      // 19092
        /*                                                                                                            // 19093
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                       // 19094
         * number in the direction of Infinity.                                                                       // 19095
         */                                                                                                           // 19096
        P.ceil = function () {                                                                                        // 19097
            return round( new BigNumber(this), this.e + 1, 2 );                                                       // 19098
        };                                                                                                            // 19099
                                                                                                                      // 19100
                                                                                                                      // 19101
        /*                                                                                                            // 19102
         * Return                                                                                                     // 19103
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                             // 19104
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                               // 19105
         * 0 if they have the same value,                                                                             // 19106
         * or null if the value of either is NaN.                                                                     // 19107
         */                                                                                                           // 19108
        P.comparedTo = P.cmp = function ( y, b ) {                                                                    // 19109
            id = 1;                                                                                                   // 19110
            return compare( this, new BigNumber( y, b ) );                                                            // 19111
        };                                                                                                            // 19112
                                                                                                                      // 19113
                                                                                                                      // 19114
        /*                                                                                                            // 19115
         * Return the number of decimal places of the value of this BigNumber, or null if the value                   // 19116
         * of this BigNumber is ±Infinity or NaN.                                                                     // 19117
         */                                                                                                           // 19118
        P.decimalPlaces = P.dp = function () {                                                                        // 19119
            var n, v,                                                                                                 // 19120
                c = this.c;                                                                                           // 19121
                                                                                                                      // 19122
            if ( !c ) return null;                                                                                    // 19123
            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                  // 19124
                                                                                                                      // 19125
            // Subtract the number of trailing zeros of the last number.                                              // 19126
            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                      // 19127
            if ( n < 0 ) n = 0;                                                                                       // 19128
                                                                                                                      // 19129
            return n;                                                                                                 // 19130
        };                                                                                                            // 19131
                                                                                                                      // 19132
                                                                                                                      // 19133
        /*                                                                                                            // 19134
         *  n / 0 = I                                                                                                 // 19135
         *  n / N = N                                                                                                 // 19136
         *  n / I = 0                                                                                                 // 19137
         *  0 / n = 0                                                                                                 // 19138
         *  0 / 0 = N                                                                                                 // 19139
         *  0 / N = N                                                                                                 // 19140
         *  0 / I = 0                                                                                                 // 19141
         *  N / n = N                                                                                                 // 19142
         *  N / 0 = N                                                                                                 // 19143
         *  N / N = N                                                                                                 // 19144
         *  N / I = N                                                                                                 // 19145
         *  I / n = I                                                                                                 // 19146
         *  I / 0 = I                                                                                                 // 19147
         *  I / N = N                                                                                                 // 19148
         *  I / I = N                                                                                                 // 19149
         *                                                                                                            // 19150
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                  // 19151
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                    // 19152
         */                                                                                                           // 19153
        P.dividedBy = P.div = function ( y, b ) {                                                                     // 19154
            id = 3;                                                                                                   // 19155
            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                 // 19156
        };                                                                                                            // 19157
                                                                                                                      // 19158
                                                                                                                      // 19159
        /*                                                                                                            // 19160
         * Return a new BigNumber whose value is the integer part of dividing the value of this                       // 19161
         * BigNumber by the value of BigNumber(y, b).                                                                 // 19162
         */                                                                                                           // 19163
        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                       // 19164
            id = 4;                                                                                                   // 19165
            return div( this, new BigNumber( y, b ), 0, 1 );                                                          // 19166
        };                                                                                                            // 19167
                                                                                                                      // 19168
                                                                                                                      // 19169
        /*                                                                                                            // 19170
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                       // 19171
         * otherwise returns false.                                                                                   // 19172
         */                                                                                                           // 19173
        P.equals = P.eq = function ( y, b ) {                                                                         // 19174
            id = 5;                                                                                                   // 19175
            return compare( this, new BigNumber( y, b ) ) === 0;                                                      // 19176
        };                                                                                                            // 19177
                                                                                                                      // 19178
                                                                                                                      // 19179
        /*                                                                                                            // 19180
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                       // 19181
         * number in the direction of -Infinity.                                                                      // 19182
         */                                                                                                           // 19183
        P.floor = function () {                                                                                       // 19184
            return round( new BigNumber(this), this.e + 1, 3 );                                                       // 19185
        };                                                                                                            // 19186
                                                                                                                      // 19187
                                                                                                                      // 19188
        /*                                                                                                            // 19189
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                   // 19190
         * otherwise returns false.                                                                                   // 19191
         */                                                                                                           // 19192
        P.greaterThan = P.gt = function ( y, b ) {                                                                    // 19193
            id = 6;                                                                                                   // 19194
            return compare( this, new BigNumber( y, b ) ) > 0;                                                        // 19195
        };                                                                                                            // 19196
                                                                                                                      // 19197
                                                                                                                      // 19198
        /*                                                                                                            // 19199
         * Return true if the value of this BigNumber is greater than or equal to the value of                        // 19200
         * BigNumber(y, b), otherwise returns false.                                                                  // 19201
         */                                                                                                           // 19202
        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                          // 19203
            id = 7;                                                                                                   // 19204
            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                   // 19205
                                                                                                                      // 19206
        };                                                                                                            // 19207
                                                                                                                      // 19208
                                                                                                                      // 19209
        /*                                                                                                            // 19210
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                    // 19211
         */                                                                                                           // 19212
        P.isFinite = function () {                                                                                    // 19213
            return !!this.c;                                                                                          // 19214
        };                                                                                                            // 19215
                                                                                                                      // 19216
                                                                                                                      // 19217
        /*                                                                                                            // 19218
         * Return true if the value of this BigNumber is an integer, otherwise return false.                          // 19219
         */                                                                                                           // 19220
        P.isInteger = P.isInt = function () {                                                                         // 19221
            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                     // 19222
        };                                                                                                            // 19223
                                                                                                                      // 19224
                                                                                                                      // 19225
        /*                                                                                                            // 19226
         * Return true if the value of this BigNumber is NaN, otherwise returns false.                                // 19227
         */                                                                                                           // 19228
        P.isNaN = function () {                                                                                       // 19229
            return !this.s;                                                                                           // 19230
        };                                                                                                            // 19231
                                                                                                                      // 19232
                                                                                                                      // 19233
        /*                                                                                                            // 19234
         * Return true if the value of this BigNumber is negative, otherwise returns false.                           // 19235
         */                                                                                                           // 19236
        P.isNegative = P.isNeg = function () {                                                                        // 19237
            return this.s < 0;                                                                                        // 19238
        };                                                                                                            // 19239
                                                                                                                      // 19240
                                                                                                                      // 19241
        /*                                                                                                            // 19242
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                            // 19243
         */                                                                                                           // 19244
        P.isZero = function () {                                                                                      // 19245
            return !!this.c && this.c[0] == 0;                                                                        // 19246
        };                                                                                                            // 19247
                                                                                                                      // 19248
                                                                                                                      // 19249
        /*                                                                                                            // 19250
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                      // 19251
         * otherwise returns false.                                                                                   // 19252
         */                                                                                                           // 19253
        P.lessThan = P.lt = function ( y, b ) {                                                                       // 19254
            id = 8;                                                                                                   // 19255
            return compare( this, new BigNumber( y, b ) ) < 0;                                                        // 19256
        };                                                                                                            // 19257
                                                                                                                      // 19258
                                                                                                                      // 19259
        /*                                                                                                            // 19260
         * Return true if the value of this BigNumber is less than or equal to the value of                           // 19261
         * BigNumber(y, b), otherwise returns false.                                                                  // 19262
         */                                                                                                           // 19263
        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                             // 19264
            id = 9;                                                                                                   // 19265
            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                  // 19266
        };                                                                                                            // 19267
                                                                                                                      // 19268
                                                                                                                      // 19269
        /*                                                                                                            // 19270
         *  n - 0 = n                                                                                                 // 19271
         *  n - N = N                                                                                                 // 19272
         *  n - I = -I                                                                                                // 19273
         *  0 - n = -n                                                                                                // 19274
         *  0 - 0 = 0                                                                                                 // 19275
         *  0 - N = N                                                                                                 // 19276
         *  0 - I = -I                                                                                                // 19277
         *  N - n = N                                                                                                 // 19278
         *  N - 0 = N                                                                                                 // 19279
         *  N - N = N                                                                                                 // 19280
         *  N - I = N                                                                                                 // 19281
         *  I - n = I                                                                                                 // 19282
         *  I - 0 = I                                                                                                 // 19283
         *  I - N = N                                                                                                 // 19284
         *  I - I = N                                                                                                 // 19285
         *                                                                                                            // 19286
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                       // 19287
         * BigNumber(y, b).                                                                                           // 19288
         */                                                                                                           // 19289
        P.minus = P.sub = function ( y, b ) {                                                                         // 19290
            var i, j, t, xLTy,                                                                                        // 19291
                x = this,                                                                                             // 19292
                a = x.s;                                                                                              // 19293
                                                                                                                      // 19294
            id = 10;                                                                                                  // 19295
            y = new BigNumber( y, b );                                                                                // 19296
            b = y.s;                                                                                                  // 19297
                                                                                                                      // 19298
            // Either NaN?                                                                                            // 19299
            if ( !a || !b ) return new BigNumber(NaN);                                                                // 19300
                                                                                                                      // 19301
            // Signs differ?                                                                                          // 19302
            if ( a != b ) {                                                                                           // 19303
                y.s = -b;                                                                                             // 19304
                return x.plus(y);                                                                                     // 19305
            }                                                                                                         // 19306
                                                                                                                      // 19307
            var xe = x.e / LOG_BASE,                                                                                  // 19308
                ye = y.e / LOG_BASE,                                                                                  // 19309
                xc = x.c,                                                                                             // 19310
                yc = y.c;                                                                                             // 19311
                                                                                                                      // 19312
            if ( !xe || !ye ) {                                                                                       // 19313
                                                                                                                      // 19314
                // Either Infinity?                                                                                   // 19315
                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                        // 19316
                                                                                                                      // 19317
                // Either zero?                                                                                       // 19318
                if ( !xc[0] || !yc[0] ) {                                                                             // 19319
                                                                                                                      // 19320
                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                       // 19321
                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                       // 19322
                                                                                                                      // 19323
                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                   // 19324
                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                  // 19325
                }                                                                                                     // 19326
            }                                                                                                         // 19327
                                                                                                                      // 19328
            xe = bitFloor(xe);                                                                                        // 19329
            ye = bitFloor(ye);                                                                                        // 19330
            xc = xc.slice();                                                                                          // 19331
                                                                                                                      // 19332
            // Determine which is the bigger number.                                                                  // 19333
            if ( a = xe - ye ) {                                                                                      // 19334
                                                                                                                      // 19335
                if ( xLTy = a < 0 ) {                                                                                 // 19336
                    a = -a;                                                                                           // 19337
                    t = xc;                                                                                           // 19338
                } else {                                                                                              // 19339
                    ye = xe;                                                                                          // 19340
                    t = yc;                                                                                           // 19341
                }                                                                                                     // 19342
                                                                                                                      // 19343
                t.reverse();                                                                                          // 19344
                                                                                                                      // 19345
                // Prepend zeros to equalise exponents.                                                               // 19346
                for ( b = a; b--; t.push(0) );                                                                        // 19347
                t.reverse();                                                                                          // 19348
            } else {                                                                                                  // 19349
                                                                                                                      // 19350
                // Exponents equal. Check digit by digit.                                                             // 19351
                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                         // 19352
                                                                                                                      // 19353
                for ( a = b = 0; b < j; b++ ) {                                                                       // 19354
                                                                                                                      // 19355
                    if ( xc[b] != yc[b] ) {                                                                           // 19356
                        xLTy = xc[b] < yc[b];                                                                         // 19357
                        break;                                                                                        // 19358
                    }                                                                                                 // 19359
                }                                                                                                     // 19360
            }                                                                                                         // 19361
                                                                                                                      // 19362
            // x < y? Point xc to the array of the bigger number.                                                     // 19363
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                            // 19364
                                                                                                                      // 19365
            b = ( j = yc.length ) - ( i = xc.length );                                                                // 19366
                                                                                                                      // 19367
            // Append zeros to xc if shorter.                                                                         // 19368
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                    // 19369
            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                  // 19370
            b = BASE - 1;                                                                                             // 19371
                                                                                                                      // 19372
            // Subtract yc from xc.                                                                                   // 19373
            for ( ; j > a; ) {                                                                                        // 19374
                                                                                                                      // 19375
                if ( xc[--j] < yc[j] ) {                                                                              // 19376
                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                          // 19377
                    --xc[i];                                                                                          // 19378
                    xc[j] += BASE;                                                                                    // 19379
                }                                                                                                     // 19380
                                                                                                                      // 19381
                xc[j] -= yc[j];                                                                                       // 19382
            }                                                                                                         // 19383
                                                                                                                      // 19384
            // Remove leading zeros and adjust exponent accordingly.                                                  // 19385
            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                   // 19386
                                                                                                                      // 19387
            // Zero?                                                                                                  // 19388
            if ( !xc[0] ) {                                                                                           // 19389
                                                                                                                      // 19390
                // Following IEEE 754 (2008) 6.3,                                                                     // 19391
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                      // 19392
                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                    // 19393
                y.c = [ y.e = 0 ];                                                                                    // 19394
                return y;                                                                                             // 19395
            }                                                                                                         // 19396
                                                                                                                      // 19397
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                            // 19398
            // for finite x and y.                                                                                    // 19399
            return normalise( y, xc, ye );                                                                            // 19400
        };                                                                                                            // 19401
                                                                                                                      // 19402
                                                                                                                      // 19403
        /*                                                                                                            // 19404
         *   n % 0 =  N                                                                                               // 19405
         *   n % N =  N                                                                                               // 19406
         *   n % I =  n                                                                                               // 19407
         *   0 % n =  0                                                                                               // 19408
         *  -0 % n = -0                                                                                               // 19409
         *   0 % 0 =  N                                                                                               // 19410
         *   0 % N =  N                                                                                               // 19411
         *   0 % I =  0                                                                                               // 19412
         *   N % n =  N                                                                                               // 19413
         *   N % 0 =  N                                                                                               // 19414
         *   N % N =  N                                                                                               // 19415
         *   N % I =  N                                                                                               // 19416
         *   I % n =  N                                                                                               // 19417
         *   I % 0 =  N                                                                                               // 19418
         *   I % N =  N                                                                                               // 19419
         *   I % I =  N                                                                                               // 19420
         *                                                                                                            // 19421
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                      // 19422
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                           // 19423
         */                                                                                                           // 19424
        P.modulo = P.mod = function ( y, b ) {                                                                        // 19425
            var q, s,                                                                                                 // 19426
                x = this;                                                                                             // 19427
                                                                                                                      // 19428
            id = 11;                                                                                                  // 19429
            y = new BigNumber( y, b );                                                                                // 19430
                                                                                                                      // 19431
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                               // 19432
            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                   // 19433
                return new BigNumber(NaN);                                                                            // 19434
                                                                                                                      // 19435
            // Return x if y is Infinity or x is zero.                                                                // 19436
            } else if ( !y.c || x.c && !x.c[0] ) {                                                                    // 19437
                return new BigNumber(x);                                                                              // 19438
            }                                                                                                         // 19439
                                                                                                                      // 19440
            if ( MODULO_MODE == 9 ) {                                                                                 // 19441
                                                                                                                      // 19442
                // Euclidian division: q = sign(y) * floor(x / abs(y))                                                // 19443
                // r = x - qy    where  0 <= r < abs(y)                                                               // 19444
                s = y.s;                                                                                              // 19445
                y.s = 1;                                                                                              // 19446
                q = div( x, y, 0, 3 );                                                                                // 19447
                y.s = s;                                                                                              // 19448
                q.s *= s;                                                                                             // 19449
            } else {                                                                                                  // 19450
                q = div( x, y, 0, MODULO_MODE );                                                                      // 19451
            }                                                                                                         // 19452
                                                                                                                      // 19453
            return x.minus( q.times(y) );                                                                             // 19454
        };                                                                                                            // 19455
                                                                                                                      // 19456
                                                                                                                      // 19457
        /*                                                                                                            // 19458
         * Return a new BigNumber whose value is the value of this BigNumber negated,                                 // 19459
         * i.e. multiplied by -1.                                                                                     // 19460
         */                                                                                                           // 19461
        P.negated = P.neg = function () {                                                                             // 19462
            var x = new BigNumber(this);                                                                              // 19463
            x.s = -x.s || null;                                                                                       // 19464
            return x;                                                                                                 // 19465
        };                                                                                                            // 19466
                                                                                                                      // 19467
                                                                                                                      // 19468
        /*                                                                                                            // 19469
         *  n + 0 = n                                                                                                 // 19470
         *  n + N = N                                                                                                 // 19471
         *  n + I = I                                                                                                 // 19472
         *  0 + n = n                                                                                                 // 19473
         *  0 + 0 = 0                                                                                                 // 19474
         *  0 + N = N                                                                                                 // 19475
         *  0 + I = I                                                                                                 // 19476
         *  N + n = N                                                                                                 // 19477
         *  N + 0 = N                                                                                                 // 19478
         *  N + N = N                                                                                                 // 19479
         *  N + I = N                                                                                                 // 19480
         *  I + n = I                                                                                                 // 19481
         *  I + 0 = I                                                                                                 // 19482
         *  I + N = N                                                                                                 // 19483
         *  I + I = I                                                                                                 // 19484
         *                                                                                                            // 19485
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                        // 19486
         * BigNumber(y, b).                                                                                           // 19487
         */                                                                                                           // 19488
        P.plus = P.add = function ( y, b ) {                                                                          // 19489
            var t,                                                                                                    // 19490
                x = this,                                                                                             // 19491
                a = x.s;                                                                                              // 19492
                                                                                                                      // 19493
            id = 12;                                                                                                  // 19494
            y = new BigNumber( y, b );                                                                                // 19495
            b = y.s;                                                                                                  // 19496
                                                                                                                      // 19497
            // Either NaN?                                                                                            // 19498
            if ( !a || !b ) return new BigNumber(NaN);                                                                // 19499
                                                                                                                      // 19500
            // Signs differ?                                                                                          // 19501
             if ( a != b ) {                                                                                          // 19502
                y.s = -b;                                                                                             // 19503
                return x.minus(y);                                                                                    // 19504
            }                                                                                                         // 19505
                                                                                                                      // 19506
            var xe = x.e / LOG_BASE,                                                                                  // 19507
                ye = y.e / LOG_BASE,                                                                                  // 19508
                xc = x.c,                                                                                             // 19509
                yc = y.c;                                                                                             // 19510
                                                                                                                      // 19511
            if ( !xe || !ye ) {                                                                                       // 19512
                                                                                                                      // 19513
                // Return ±Infinity if either ±Infinity.                                                              // 19514
                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                      // 19515
                                                                                                                      // 19516
                // Either zero?                                                                                       // 19517
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                           // 19518
                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                        // 19519
            }                                                                                                         // 19520
                                                                                                                      // 19521
            xe = bitFloor(xe);                                                                                        // 19522
            ye = bitFloor(ye);                                                                                        // 19523
            xc = xc.slice();                                                                                          // 19524
                                                                                                                      // 19525
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                           // 19526
            if ( a = xe - ye ) {                                                                                      // 19527
                if ( a > 0 ) {                                                                                        // 19528
                    ye = xe;                                                                                          // 19529
                    t = yc;                                                                                           // 19530
                } else {                                                                                              // 19531
                    a = -a;                                                                                           // 19532
                    t = xc;                                                                                           // 19533
                }                                                                                                     // 19534
                                                                                                                      // 19535
                t.reverse();                                                                                          // 19536
                for ( ; a--; t.push(0) );                                                                             // 19537
                t.reverse();                                                                                          // 19538
            }                                                                                                         // 19539
                                                                                                                      // 19540
            a = xc.length;                                                                                            // 19541
            b = yc.length;                                                                                            // 19542
                                                                                                                      // 19543
            // Point xc to the longer array, and b to the shorter length.                                             // 19544
            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                          // 19545
                                                                                                                      // 19546
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                         // 19547
            for ( a = 0; b; ) {                                                                                       // 19548
                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                       // 19549
                xc[b] %= BASE;                                                                                        // 19550
            }                                                                                                         // 19551
                                                                                                                      // 19552
            if (a) {                                                                                                  // 19553
                xc.unshift(a);                                                                                        // 19554
                ++ye;                                                                                                 // 19555
            }                                                                                                         // 19556
                                                                                                                      // 19557
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                             // 19558
            // ye = MAX_EXP + 1 possible                                                                              // 19559
            return normalise( y, xc, ye );                                                                            // 19560
        };                                                                                                            // 19561
                                                                                                                      // 19562
                                                                                                                      // 19563
        /*                                                                                                            // 19564
         * Return the number of significant digits of the value of this BigNumber.                                    // 19565
         *                                                                                                            // 19566
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                    // 19567
         */                                                                                                           // 19568
        P.precision = P.sd = function (z) {                                                                           // 19569
            var n, v,                                                                                                 // 19570
                x = this,                                                                                             // 19571
                c = x.c;                                                                                              // 19572
                                                                                                                      // 19573
            // 'precision() argument not a boolean or binary digit: {z}'                                              // 19574
            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                     // 19575
                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                     // 19576
                if ( z != !!z ) z = null;                                                                             // 19577
            }                                                                                                         // 19578
                                                                                                                      // 19579
            if ( !c ) return null;                                                                                    // 19580
            v = c.length - 1;                                                                                         // 19581
            n = v * LOG_BASE + 1;                                                                                     // 19582
                                                                                                                      // 19583
            if ( v = c[v] ) {                                                                                         // 19584
                                                                                                                      // 19585
                // Subtract the number of trailing zeros of the last element.                                         // 19586
                for ( ; v % 10 == 0; v /= 10, n-- );                                                                  // 19587
                                                                                                                      // 19588
                // Add the number of digits of the first element.                                                     // 19589
                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                              // 19590
            }                                                                                                         // 19591
                                                                                                                      // 19592
            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                      // 19593
                                                                                                                      // 19594
            return n;                                                                                                 // 19595
        };                                                                                                            // 19596
                                                                                                                      // 19597
                                                                                                                      // 19598
        /*                                                                                                            // 19599
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                  // 19600
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                        // 19601
         * omitted.                                                                                                   // 19602
         *                                                                                                            // 19603
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 19604
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 19605
         *                                                                                                            // 19606
         * 'round() decimal places out of range: {dp}'                                                                // 19607
         * 'round() decimal places not an integer: {dp}'                                                              // 19608
         * 'round() rounding mode not an integer: {rm}'                                                               // 19609
         * 'round() rounding mode out of range: {rm}'                                                                 // 19610
         */                                                                                                           // 19611
        P.round = function ( dp, rm ) {                                                                               // 19612
            var n = new BigNumber(this);                                                                              // 19613
                                                                                                                      // 19614
            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                       // 19615
                round( n, ~~dp + this.e + 1, rm == null ||                                                            // 19616
                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                               // 19617
            }                                                                                                         // 19618
                                                                                                                      // 19619
            return n;                                                                                                 // 19620
        };                                                                                                            // 19621
                                                                                                                      // 19622
                                                                                                                      // 19623
        /*                                                                                                            // 19624
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                      // 19625
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                     // 19626
         *                                                                                                            // 19627
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                       // 19628
         *                                                                                                            // 19629
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                     // 19630
         * otherwise.                                                                                                 // 19631
         *                                                                                                            // 19632
         * 'shift() argument not an integer: {k}'                                                                     // 19633
         * 'shift() argument out of range: {k}'                                                                       // 19634
         */                                                                                                           // 19635
        P.shift = function (k) {                                                                                      // 19636
            var n = this;                                                                                             // 19637
            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                               // 19638
                                                                                                                      // 19639
              // k < 1e+21, or truncate(k) will produce exponential notation.                                         // 19640
              ? n.times( '1e' + truncate(k) )                                                                         // 19641
              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                     // 19642
                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                         // 19643
                : n );                                                                                                // 19644
        };                                                                                                            // 19645
                                                                                                                      // 19646
                                                                                                                      // 19647
        /*                                                                                                            // 19648
         *  sqrt(-n) =  N                                                                                             // 19649
         *  sqrt( N) =  N                                                                                             // 19650
         *  sqrt(-I) =  N                                                                                             // 19651
         *  sqrt( I) =  I                                                                                             // 19652
         *  sqrt( 0) =  0                                                                                             // 19653
         *  sqrt(-0) = -0                                                                                             // 19654
         *                                                                                                            // 19655
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                      // 19656
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                     // 19657
         */                                                                                                           // 19658
        P.squareRoot = P.sqrt = function () {                                                                         // 19659
            var m, n, r, rep, t,                                                                                      // 19660
                x = this,                                                                                             // 19661
                c = x.c,                                                                                              // 19662
                s = x.s,                                                                                              // 19663
                e = x.e,                                                                                              // 19664
                dp = DECIMAL_PLACES + 4,                                                                              // 19665
                half = new BigNumber('0.5');                                                                          // 19666
                                                                                                                      // 19667
            // Negative/NaN/Infinity/zero?                                                                            // 19668
            if ( s !== 1 || !c || !c[0] ) {                                                                           // 19669
                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                          // 19670
            }                                                                                                         // 19671
                                                                                                                      // 19672
            // Initial estimate.                                                                                      // 19673
            s = Math.sqrt( +x );                                                                                      // 19674
                                                                                                                      // 19675
            // Math.sqrt underflow/overflow?                                                                          // 19676
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                                // 19677
            if ( s == 0 || s == 1 / 0 ) {                                                                             // 19678
                n = coeffToString(c);                                                                                 // 19679
                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                            // 19680
                s = Math.sqrt(n);                                                                                     // 19681
                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                   // 19682
                                                                                                                      // 19683
                if ( s == 1 / 0 ) {                                                                                   // 19684
                    n = '1e' + e;                                                                                     // 19685
                } else {                                                                                              // 19686
                    n = s.toExponential();                                                                            // 19687
                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                         // 19688
                }                                                                                                     // 19689
                                                                                                                      // 19690
                r = new BigNumber(n);                                                                                 // 19691
            } else {                                                                                                  // 19692
                r = new BigNumber( s + '' );                                                                          // 19693
            }                                                                                                         // 19694
                                                                                                                      // 19695
            // Check for zero.                                                                                        // 19696
            // r could be zero if MIN_EXP is changed after the this value was created.                                // 19697
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                  // 19698
            // coeffToString to throw.                                                                                // 19699
            if ( r.c[0] ) {                                                                                           // 19700
                e = r.e;                                                                                              // 19701
                s = e + dp;                                                                                           // 19702
                if ( s < 3 ) s = 0;                                                                                   // 19703
                                                                                                                      // 19704
                // Newton-Raphson iteration.                                                                          // 19705
                for ( ; ; ) {                                                                                         // 19706
                    t = r;                                                                                            // 19707
                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                   // 19708
                                                                                                                      // 19709
                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                               // 19710
                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                     // 19711
                                                                                                                      // 19712
                        // The exponent of r may here be one less than the final result exponent,                     // 19713
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                    // 19714
                        // are indexed correctly.                                                                     // 19715
                        if ( r.e < e ) --s;                                                                           // 19716
                        n = n.slice( s - 3, s + 1 );                                                                  // 19717
                                                                                                                      // 19718
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                   // 19719
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                       // 19720
                        // iteration.                                                                                 // 19721
                        if ( n == '9999' || !rep && n == '4999' ) {                                                   // 19722
                                                                                                                      // 19723
                            // On the first iteration only, check to see if rounding up gives the                     // 19724
                            // exact result as the nines may infinitely repeat.                                       // 19725
                            if ( !rep ) {                                                                             // 19726
                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                              // 19727
                                                                                                                      // 19728
                                if ( t.times(t).eq(x) ) {                                                             // 19729
                                    r = t;                                                                            // 19730
                                    break;                                                                            // 19731
                                }                                                                                     // 19732
                            }                                                                                         // 19733
                                                                                                                      // 19734
                            dp += 4;                                                                                  // 19735
                            s += 4;                                                                                   // 19736
                            rep = 1;                                                                                  // 19737
                        } else {                                                                                      // 19738
                                                                                                                      // 19739
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                        // 19740
                            // result. If not, then there are further digits and m will be truthy.                    // 19741
                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                        // 19742
                                                                                                                      // 19743
                                // Truncate to the first rounding digit.                                              // 19744
                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                              // 19745
                                m = !r.times(r).eq(x);                                                                // 19746
                            }                                                                                         // 19747
                                                                                                                      // 19748
                            break;                                                                                    // 19749
                        }                                                                                             // 19750
                    }                                                                                                 // 19751
                }                                                                                                     // 19752
            }                                                                                                         // 19753
                                                                                                                      // 19754
            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                            // 19755
        };                                                                                                            // 19756
                                                                                                                      // 19757
                                                                                                                      // 19758
        /*                                                                                                            // 19759
         *  n * 0 = 0                                                                                                 // 19760
         *  n * N = N                                                                                                 // 19761
         *  n * I = I                                                                                                 // 19762
         *  0 * n = 0                                                                                                 // 19763
         *  0 * 0 = 0                                                                                                 // 19764
         *  0 * N = N                                                                                                 // 19765
         *  0 * I = N                                                                                                 // 19766
         *  N * n = N                                                                                                 // 19767
         *  N * 0 = N                                                                                                 // 19768
         *  N * N = N                                                                                                 // 19769
         *  N * I = N                                                                                                 // 19770
         *  I * n = I                                                                                                 // 19771
         *  I * 0 = N                                                                                                 // 19772
         *  I * N = N                                                                                                 // 19773
         *  I * I = I                                                                                                 // 19774
         *                                                                                                            // 19775
         * Return a new BigNumber whose value is the value of this BigNumber times the value of                       // 19776
         * BigNumber(y, b).                                                                                           // 19777
         */                                                                                                           // 19778
        P.times = P.mul = function ( y, b ) {                                                                         // 19779
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                   // 19780
                base, sqrtBase,                                                                                       // 19781
                x = this,                                                                                             // 19782
                xc = x.c,                                                                                             // 19783
                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                        // 19784
                                                                                                                      // 19785
            // Either NaN, ±Infinity or ±0?                                                                           // 19786
            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                   // 19787
                                                                                                                      // 19788
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                                // 19789
                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                   // 19790
                    y.c = y.e = y.s = null;                                                                           // 19791
                } else {                                                                                              // 19792
                    y.s *= x.s;                                                                                       // 19793
                                                                                                                      // 19794
                    // Return ±Infinity if either is ±Infinity.                                                       // 19795
                    if ( !xc || !yc ) {                                                                               // 19796
                        y.c = y.e = null;                                                                             // 19797
                                                                                                                      // 19798
                    // Return ±0 if either is ±0.                                                                     // 19799
                    } else {                                                                                          // 19800
                        y.c = [0];                                                                                    // 19801
                        y.e = 0;                                                                                      // 19802
                    }                                                                                                 // 19803
                }                                                                                                     // 19804
                                                                                                                      // 19805
                return y;                                                                                             // 19806
            }                                                                                                         // 19807
                                                                                                                      // 19808
            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                              // 19809
            y.s *= x.s;                                                                                               // 19810
            xcL = xc.length;                                                                                          // 19811
            ycL = yc.length;                                                                                          // 19812
                                                                                                                      // 19813
            // Ensure xc points to longer array and xcL to its length.                                                // 19814
            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                  // 19815
                                                                                                                      // 19816
            // Initialise the result array with zeros.                                                                // 19817
            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                          // 19818
                                                                                                                      // 19819
            base = BASE;                                                                                              // 19820
            sqrtBase = SQRT_BASE;                                                                                     // 19821
                                                                                                                      // 19822
            for ( i = ycL; --i >= 0; ) {                                                                              // 19823
                c = 0;                                                                                                // 19824
                ylo = yc[i] % sqrtBase;                                                                               // 19825
                yhi = yc[i] / sqrtBase | 0;                                                                           // 19826
                                                                                                                      // 19827
                for ( k = xcL, j = i + k; j > i; ) {                                                                  // 19828
                    xlo = xc[--k] % sqrtBase;                                                                         // 19829
                    xhi = xc[k] / sqrtBase | 0;                                                                       // 19830
                    m = yhi * xlo + xhi * ylo;                                                                        // 19831
                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                    // 19832
                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                        // 19833
                    zc[j--] = xlo % base;                                                                             // 19834
                }                                                                                                     // 19835
                                                                                                                      // 19836
                zc[j] = c;                                                                                            // 19837
            }                                                                                                         // 19838
                                                                                                                      // 19839
            if (c) {                                                                                                  // 19840
                ++e;                                                                                                  // 19841
            } else {                                                                                                  // 19842
                zc.shift();                                                                                           // 19843
            }                                                                                                         // 19844
                                                                                                                      // 19845
            return normalise( y, zc, e );                                                                             // 19846
        };                                                                                                            // 19847
                                                                                                                      // 19848
                                                                                                                      // 19849
        /*                                                                                                            // 19850
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                  // 19851
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                           // 19852
         *                                                                                                            // 19853
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                             // 19854
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 19855
         *                                                                                                            // 19856
         * 'toDigits() precision out of range: {sd}'                                                                  // 19857
         * 'toDigits() precision not an integer: {sd}'                                                                // 19858
         * 'toDigits() rounding mode not an integer: {rm}'                                                            // 19859
         * 'toDigits() rounding mode out of range: {rm}'                                                              // 19860
         */                                                                                                           // 19861
        P.toDigits = function ( sd, rm ) {                                                                            // 19862
            var n = new BigNumber(this);                                                                              // 19863
            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                            // 19864
            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                    // 19865
            return sd ? round( n, sd, rm ) : n;                                                                       // 19866
        };                                                                                                            // 19867
                                                                                                                      // 19868
                                                                                                                      // 19869
        /*                                                                                                            // 19870
         * Return a string representing the value of this BigNumber in exponential notation and                       // 19871
         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                    // 19872
         *                                                                                                            // 19873
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 19874
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 19875
         *                                                                                                            // 19876
         * 'toExponential() decimal places not an integer: {dp}'                                                      // 19877
         * 'toExponential() decimal places out of range: {dp}'                                                        // 19878
         * 'toExponential() rounding mode not an integer: {rm}'                                                       // 19879
         * 'toExponential() rounding mode out of range: {rm}'                                                         // 19880
         */                                                                                                           // 19881
        P.toExponential = function ( dp, rm ) {                                                                       // 19882
            return format( this,                                                                                      // 19883
              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                 // 19884
        };                                                                                                            // 19885
                                                                                                                      // 19886
                                                                                                                      // 19887
        /*                                                                                                            // 19888
         * Return a string representing the value of this BigNumber in fixed-point notation rounding                  // 19889
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                      // 19890
         *                                                                                                            // 19891
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                            // 19892
         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                    // 19893
         *                                                                                                            // 19894
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 19895
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 19896
         *                                                                                                            // 19897
         * 'toFixed() decimal places not an integer: {dp}'                                                            // 19898
         * 'toFixed() decimal places out of range: {dp}'                                                              // 19899
         * 'toFixed() rounding mode not an integer: {rm}'                                                             // 19900
         * 'toFixed() rounding mode out of range: {rm}'                                                               // 19901
         */                                                                                                           // 19902
        P.toFixed = function ( dp, rm ) {                                                                             // 19903
            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                           // 19904
              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                   // 19905
        };                                                                                                            // 19906
                                                                                                                      // 19907
                                                                                                                      // 19908
        /*                                                                                                            // 19909
         * Return a string representing the value of this BigNumber in fixed-point notation rounded                   // 19910
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                  // 19911
         * of the FORMAT object (see BigNumber.config).                                                               // 19912
         *                                                                                                            // 19913
         * FORMAT = {                                                                                                 // 19914
         *      decimalSeparator : '.',                                                                               // 19915
         *      groupSeparator : ',',                                                                                 // 19916
         *      groupSize : 3,                                                                                        // 19917
         *      secondaryGroupSize : 0,                                                                               // 19918
         *      fractionGroupSeparator : '\xA0',    // non-breaking space                                             // 19919
         *      fractionGroupSize : 0                                                                                 // 19920
         * };                                                                                                         // 19921
         *                                                                                                            // 19922
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 19923
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 19924
         *                                                                                                            // 19925
         * 'toFormat() decimal places not an integer: {dp}'                                                           // 19926
         * 'toFormat() decimal places out of range: {dp}'                                                             // 19927
         * 'toFormat() rounding mode not an integer: {rm}'                                                            // 19928
         * 'toFormat() rounding mode out of range: {rm}'                                                              // 19929
         */                                                                                                           // 19930
        P.toFormat = function ( dp, rm ) {                                                                            // 19931
            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                        // 19932
              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                   // 19933
                                                                                                                      // 19934
            if ( this.c ) {                                                                                           // 19935
                var i,                                                                                                // 19936
                    arr = str.split('.'),                                                                             // 19937
                    g1 = +FORMAT.groupSize,                                                                           // 19938
                    g2 = +FORMAT.secondaryGroupSize,                                                                  // 19939
                    groupSeparator = FORMAT.groupSeparator,                                                           // 19940
                    intPart = arr[0],                                                                                 // 19941
                    fractionPart = arr[1],                                                                            // 19942
                    isNeg = this.s < 0,                                                                               // 19943
                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                   // 19944
                    len = intDigits.length;                                                                           // 19945
                                                                                                                      // 19946
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                            // 19947
                                                                                                                      // 19948
                if ( g1 > 0 && len > 0 ) {                                                                            // 19949
                    i = len % g1 || g1;                                                                               // 19950
                    intPart = intDigits.substr( 0, i );                                                               // 19951
                                                                                                                      // 19952
                    for ( ; i < len; i += g1 ) {                                                                      // 19953
                        intPart += groupSeparator + intDigits.substr( i, g1 );                                        // 19954
                    }                                                                                                 // 19955
                                                                                                                      // 19956
                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                     // 19957
                    if (isNeg) intPart = '-' + intPart;                                                               // 19958
                }                                                                                                     // 19959
                                                                                                                      // 19960
                str = fractionPart                                                                                    // 19961
                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                          // 19962
                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),                                  // 19963
                      '$&' + FORMAT.fractionGroupSeparator )                                                          // 19964
                    : fractionPart )                                                                                  // 19965
                  : intPart;                                                                                          // 19966
            }                                                                                                         // 19967
                                                                                                                      // 19968
            return str;                                                                                               // 19969
        };                                                                                                            // 19970
                                                                                                                      // 19971
                                                                                                                      // 19972
        /*                                                                                                            // 19973
         * Return a string array representing the value of this BigNumber as a simple fraction with                   // 19974
         * an integer numerator and an integer denominator. The denominator will be a positive                        // 19975
         * non-zero value less than or equal to the specified maximum denominator. If a maximum                       // 19976
         * denominator is not specified, the denominator will be the lowest value necessary to                        // 19977
         * represent the number exactly.                                                                              // 19978
         *                                                                                                            // 19979
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                       // 19980
         *                                                                                                            // 19981
         * 'toFraction() max denominator not an integer: {md}'                                                        // 19982
         * 'toFraction() max denominator out of range: {md}'                                                          // 19983
         */                                                                                                           // 19984
        P.toFraction = function (md) {                                                                                // 19985
            var arr, d0, d2, e, exp, n, n0, q, s,                                                                     // 19986
                k = ERRORS,                                                                                           // 19987
                x = this,                                                                                             // 19988
                xc = x.c,                                                                                             // 19989
                d = new BigNumber(ONE),                                                                               // 19990
                n1 = d0 = new BigNumber(ONE),                                                                         // 19991
                d1 = n0 = new BigNumber(ONE);                                                                         // 19992
                                                                                                                      // 19993
            if ( md != null ) {                                                                                       // 19994
                ERRORS = false;                                                                                       // 19995
                n = new BigNumber(md);                                                                                // 19996
                ERRORS = k;                                                                                           // 19997
                                                                                                                      // 19998
                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                              // 19999
                                                                                                                      // 20000
                    if (ERRORS) {                                                                                     // 20001
                        raise( 22,                                                                                    // 20002
                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                       // 20003
                    }                                                                                                 // 20004
                                                                                                                      // 20005
                    // ERRORS is false:                                                                               // 20006
                    // If md is a finite non-integer >= 1, round it to an integer and use it.                         // 20007
                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                     // 20008
                }                                                                                                     // 20009
            }                                                                                                         // 20010
                                                                                                                      // 20011
            if ( !xc ) return x.toString();                                                                           // 20012
            s = coeffToString(xc);                                                                                    // 20013
                                                                                                                      // 20014
            // Determine initial denominator.                                                                         // 20015
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                   // 20016
            e = d.e = s.length - x.e - 1;                                                                             // 20017
            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                   // 20018
            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                        // 20019
                                                                                                                      // 20020
            exp = MAX_EXP;                                                                                            // 20021
            MAX_EXP = 1 / 0;                                                                                          // 20022
            n = new BigNumber(s);                                                                                     // 20023
                                                                                                                      // 20024
            // n0 = d1 = 0                                                                                            // 20025
            n0.c[0] = 0;                                                                                              // 20026
                                                                                                                      // 20027
            for ( ; ; )  {                                                                                            // 20028
                q = div( n, d, 0, 1 );                                                                                // 20029
                d2 = d0.plus( q.times(d1) );                                                                          // 20030
                if ( d2.cmp(md) == 1 ) break;                                                                         // 20031
                d0 = d1;                                                                                              // 20032
                d1 = d2;                                                                                              // 20033
                n1 = n0.plus( q.times( d2 = n1 ) );                                                                   // 20034
                n0 = d2;                                                                                              // 20035
                d = n.minus( q.times( d2 = d ) );                                                                     // 20036
                n = d2;                                                                                               // 20037
            }                                                                                                         // 20038
                                                                                                                      // 20039
            d2 = div( md.minus(d0), d1, 0, 1 );                                                                       // 20040
            n0 = n0.plus( d2.times(n1) );                                                                             // 20041
            d0 = d0.plus( d2.times(d1) );                                                                             // 20042
            n0.s = n1.s = x.s;                                                                                        // 20043
            e *= 2;                                                                                                   // 20044
                                                                                                                      // 20045
            // Determine which fraction is closer to x, n0/d0 or n1/d1                                                // 20046
            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                 // 20047
                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                                // 20048
                    ? [ n1.toString(), d1.toString() ]                                                                // 20049
                    : [ n0.toString(), d0.toString() ];                                                               // 20050
                                                                                                                      // 20051
            MAX_EXP = exp;                                                                                            // 20052
            return arr;                                                                                               // 20053
        };                                                                                                            // 20054
                                                                                                                      // 20055
                                                                                                                      // 20056
        /*                                                                                                            // 20057
         * Return the value of this BigNumber converted to a number primitive.                                        // 20058
         */                                                                                                           // 20059
        P.toNumber = function () {                                                                                    // 20060
            var x = this;                                                                                             // 20061
                                                                                                                      // 20062
            // Ensure zero has correct sign.                                                                          // 20063
            return +x || ( x.s ? x.s * 0 : NaN );                                                                     // 20064
        };                                                                                                            // 20065
                                                                                                                      // 20066
                                                                                                                      // 20067
        /*                                                                                                            // 20068
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                       // 20069
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                      // 20070
         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.                                     // 20071
         *                                                                                                            // 20072
         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.                                       // 20073
         * (Performs 54 loop iterations for n of 9007199254740992.)                                                   // 20074
         *                                                                                                            // 20075
         * 'pow() exponent not an integer: {n}'                                                                       // 20076
         * 'pow() exponent out of range: {n}'                                                                         // 20077
         */                                                                                                           // 20078
        P.toPower = P.pow = function (n) {                                                                            // 20079
            var k, y,                                                                                                 // 20080
                i = mathfloor( n < 0 ? -n : +n ),                                                                     // 20081
                x = this;                                                                                             // 20082
                                                                                                                      // 20083
            // Pass ±Infinity to Math.pow if exponent is out of range.                                                // 20084
            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                             // 20085
              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                 // 20086
                parseFloat(n) != n && !( n = NaN ) ) ) {                                                              // 20087
                return new BigNumber( Math.pow( +x, n ) );                                                            // 20088
            }                                                                                                         // 20089
                                                                                                                      // 20090
            // Truncating each coefficient array to a length of k after each multiplication equates                   // 20091
            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a                     // 20092
            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)                    // 20093
            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;                                         // 20094
            y = new BigNumber(ONE);                                                                                   // 20095
                                                                                                                      // 20096
            for ( ; ; ) {                                                                                             // 20097
                                                                                                                      // 20098
                if ( i % 2 ) {                                                                                        // 20099
                    y = y.times(x);                                                                                   // 20100
                    if ( !y.c ) break;                                                                                // 20101
                    if ( k && y.c.length > k ) y.c.length = k;                                                        // 20102
                }                                                                                                     // 20103
                                                                                                                      // 20104
                i = mathfloor( i / 2 );                                                                               // 20105
                if ( !i ) break;                                                                                      // 20106
                                                                                                                      // 20107
                x = x.times(x);                                                                                       // 20108
                if ( k && x.c && x.c.length > k ) x.c.length = k;                                                     // 20109
            }                                                                                                         // 20110
                                                                                                                      // 20111
            if ( n < 0 ) y = ONE.div(y);                                                                              // 20112
            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                                  // 20113
        };                                                                                                            // 20114
                                                                                                                      // 20115
                                                                                                                      // 20116
        /*                                                                                                            // 20117
         * Return a string representing the value of this BigNumber rounded to sd significant digits                  // 20118
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                           // 20119
         * necessary to represent the integer part of the value in fixed-point notation, then use                     // 20120
         * exponential notation.                                                                                      // 20121
         *                                                                                                            // 20122
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                             // 20123
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 20124
         *                                                                                                            // 20125
         * 'toPrecision() precision not an integer: {sd}'                                                             // 20126
         * 'toPrecision() precision out of range: {sd}'                                                               // 20127
         * 'toPrecision() rounding mode not an integer: {rm}'                                                         // 20128
         * 'toPrecision() rounding mode out of range: {rm}'                                                           // 20129
         */                                                                                                           // 20130
        P.toPrecision = function ( sd, rm ) {                                                                         // 20131
            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                              // 20132
              ? sd | 0 : null, rm, 24 );                                                                              // 20133
        };                                                                                                            // 20134
                                                                                                                      // 20135
                                                                                                                      // 20136
        /*                                                                                                            // 20137
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                     // 20138
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                  // 20139
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                      // 20140
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                  // 20141
         * TO_EXP_NEG, return exponential notation.                                                                   // 20142
         *                                                                                                            // 20143
         * [b] {number} Integer, 2 to 64 inclusive.                                                                   // 20144
         *                                                                                                            // 20145
         * 'toString() base not an integer: {b}'                                                                      // 20146
         * 'toString() base out of range: {b}'                                                                        // 20147
         */                                                                                                           // 20148
        P.toString = function (b) {                                                                                   // 20149
            var str,                                                                                                  // 20150
                n = this,                                                                                             // 20151
                s = n.s,                                                                                              // 20152
                e = n.e;                                                                                              // 20153
                                                                                                                      // 20154
            // Infinity or NaN?                                                                                       // 20155
            if ( e === null ) {                                                                                       // 20156
                                                                                                                      // 20157
                if (s) {                                                                                              // 20158
                    str = 'Infinity';                                                                                 // 20159
                    if ( s < 0 ) str = '-' + str;                                                                     // 20160
                } else {                                                                                              // 20161
                    str = 'NaN';                                                                                      // 20162
                }                                                                                                     // 20163
            } else {                                                                                                  // 20164
                str = coeffToString( n.c );                                                                           // 20165
                                                                                                                      // 20166
                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                             // 20167
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                          // 20168
                      ? toExponential( str, e )                                                                       // 20169
                      : toFixedPoint( str, e );                                                                       // 20170
                } else {                                                                                              // 20171
                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                        // 20172
                }                                                                                                     // 20173
                                                                                                                      // 20174
                if ( s < 0 && n.c[0] ) str = '-' + str;                                                               // 20175
            }                                                                                                         // 20176
                                                                                                                      // 20177
            return str;                                                                                               // 20178
        };                                                                                                            // 20179
                                                                                                                      // 20180
                                                                                                                      // 20181
        /*                                                                                                            // 20182
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                     // 20183
         * number.                                                                                                    // 20184
         */                                                                                                           // 20185
        P.truncated = P.trunc = function () {                                                                         // 20186
            return round( new BigNumber(this), this.e + 1, 1 );                                                       // 20187
        };                                                                                                            // 20188
                                                                                                                      // 20189
                                                                                                                      // 20190
                                                                                                                      // 20191
        /*                                                                                                            // 20192
         * Return as toString, but do not accept a base argument.                                                     // 20193
         */                                                                                                           // 20194
        P.valueOf = P.toJSON = function () {                                                                          // 20195
            return this.toString();                                                                                   // 20196
        };                                                                                                            // 20197
                                                                                                                      // 20198
                                                                                                                      // 20199
        // Aliases for BigDecimal methods.                                                                            // 20200
        //P.add = P.plus;         // P.add included above                                                             // 20201
        //P.subtract = P.minus;   // P.sub included above                                                             // 20202
        //P.multiply = P.times;   // P.mul included above                                                             // 20203
        //P.divide = P.div;                                                                                           // 20204
        //P.remainder = P.mod;                                                                                        // 20205
        //P.compareTo = P.cmp;                                                                                        // 20206
        //P.negate = P.neg;                                                                                           // 20207
                                                                                                                      // 20208
                                                                                                                      // 20209
        if ( configObj != null ) BigNumber.config(configObj);                                                         // 20210
                                                                                                                      // 20211
        return BigNumber;                                                                                             // 20212
    }                                                                                                                 // 20213
                                                                                                                      // 20214
                                                                                                                      // 20215
    // PRIVATE HELPER FUNCTIONS                                                                                       // 20216
                                                                                                                      // 20217
                                                                                                                      // 20218
    function bitFloor(n) {                                                                                            // 20219
        var i = n | 0;                                                                                                // 20220
        return n > 0 || n === i ? i : i - 1;                                                                          // 20221
    }                                                                                                                 // 20222
                                                                                                                      // 20223
                                                                                                                      // 20224
    // Return a coefficient array as a string of base 10 digits.                                                      // 20225
    function coeffToString(a) {                                                                                       // 20226
        var s, z,                                                                                                     // 20227
            i = 1,                                                                                                    // 20228
            j = a.length,                                                                                             // 20229
            r = a[0] + '';                                                                                            // 20230
                                                                                                                      // 20231
        for ( ; i < j; ) {                                                                                            // 20232
            s = a[i++] + '';                                                                                          // 20233
            z = LOG_BASE - s.length;                                                                                  // 20234
            for ( ; z--; s = '0' + s );                                                                               // 20235
            r += s;                                                                                                   // 20236
        }                                                                                                             // 20237
                                                                                                                      // 20238
        // Determine trailing zeros.                                                                                  // 20239
        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                              // 20240
        return r.slice( 0, j + 1 || 1 );                                                                              // 20241
    }                                                                                                                 // 20242
                                                                                                                      // 20243
                                                                                                                      // 20244
    // Compare the value of BigNumbers x and y.                                                                       // 20245
    function compare( x, y ) {                                                                                        // 20246
        var a, b,                                                                                                     // 20247
            xc = x.c,                                                                                                 // 20248
            yc = y.c,                                                                                                 // 20249
            i = x.s,                                                                                                  // 20250
            j = y.s,                                                                                                  // 20251
            k = x.e,                                                                                                  // 20252
            l = y.e;                                                                                                  // 20253
                                                                                                                      // 20254
        // Either NaN?                                                                                                // 20255
        if ( !i || !j ) return null;                                                                                  // 20256
                                                                                                                      // 20257
        a = xc && !xc[0];                                                                                             // 20258
        b = yc && !yc[0];                                                                                             // 20259
                                                                                                                      // 20260
        // Either zero?                                                                                               // 20261
        if ( a || b ) return a ? b ? 0 : -j : i;                                                                      // 20262
                                                                                                                      // 20263
        // Signs differ?                                                                                              // 20264
        if ( i != j ) return i;                                                                                       // 20265
                                                                                                                      // 20266
        a = i < 0;                                                                                                    // 20267
        b = k == l;                                                                                                   // 20268
                                                                                                                      // 20269
        // Either Infinity?                                                                                           // 20270
        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                            // 20271
                                                                                                                      // 20272
        // Compare exponents.                                                                                         // 20273
        if ( !b ) return k > l ^ a ? 1 : -1;                                                                          // 20274
                                                                                                                      // 20275
        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                            // 20276
                                                                                                                      // 20277
        // Compare digit by digit.                                                                                    // 20278
        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                            // 20279
                                                                                                                      // 20280
        // Compare lengths.                                                                                           // 20281
        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                       // 20282
    }                                                                                                                 // 20283
                                                                                                                      // 20284
                                                                                                                      // 20285
    /*                                                                                                                // 20286
     * Return true if n is a valid number in range, otherwise false.                                                  // 20287
     * Use for argument validation when ERRORS is false.                                                              // 20288
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                      // 20289
     */                                                                                                               // 20290
    function intValidatorNoErrors( n, min, max ) {                                                                    // 20291
        return ( n = truncate(n) ) >= min && n <= max;                                                                // 20292
    }                                                                                                                 // 20293
                                                                                                                      // 20294
                                                                                                                      // 20295
    function isArray(obj) {                                                                                           // 20296
        return Object.prototype.toString.call(obj) == '[object Array]';                                               // 20297
    }                                                                                                                 // 20298
                                                                                                                      // 20299
                                                                                                                      // 20300
    /*                                                                                                                // 20301
     * Convert string of baseIn to an array of numbers of baseOut.                                                    // 20302
     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                               // 20303
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                               // 20304
     */                                                                                                               // 20305
    function toBaseOut( str, baseIn, baseOut ) {                                                                      // 20306
        var j,                                                                                                        // 20307
            arr = [0],                                                                                                // 20308
            arrL,                                                                                                     // 20309
            i = 0,                                                                                                    // 20310
            len = str.length;                                                                                         // 20311
                                                                                                                      // 20312
        for ( ; i < len; ) {                                                                                          // 20313
            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                   // 20314
            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                    // 20315
                                                                                                                      // 20316
            for ( ; j < arr.length; j++ ) {                                                                           // 20317
                                                                                                                      // 20318
                if ( arr[j] > baseOut - 1 ) {                                                                         // 20319
                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                         // 20320
                    arr[j + 1] += arr[j] / baseOut | 0;                                                               // 20321
                    arr[j] %= baseOut;                                                                                // 20322
                }                                                                                                     // 20323
            }                                                                                                         // 20324
        }                                                                                                             // 20325
                                                                                                                      // 20326
        return arr.reverse();                                                                                         // 20327
    }                                                                                                                 // 20328
                                                                                                                      // 20329
                                                                                                                      // 20330
    function toExponential( str, e ) {                                                                                // 20331
        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                        // 20332
          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                 // 20333
    }                                                                                                                 // 20334
                                                                                                                      // 20335
                                                                                                                      // 20336
    function toFixedPoint( str, e ) {                                                                                 // 20337
        var len, z;                                                                                                   // 20338
                                                                                                                      // 20339
        // Negative exponent?                                                                                         // 20340
        if ( e < 0 ) {                                                                                                // 20341
                                                                                                                      // 20342
            // Prepend zeros.                                                                                         // 20343
            for ( z = '0.'; ++e; z += '0' );                                                                          // 20344
            str = z + str;                                                                                            // 20345
                                                                                                                      // 20346
        // Positive exponent                                                                                          // 20347
        } else {                                                                                                      // 20348
            len = str.length;                                                                                         // 20349
                                                                                                                      // 20350
            // Append zeros.                                                                                          // 20351
            if ( ++e > len ) {                                                                                        // 20352
                for ( z = '0', e -= len; --e; z += '0' );                                                             // 20353
                str += z;                                                                                             // 20354
            } else if ( e < len ) {                                                                                   // 20355
                str = str.slice( 0, e ) + '.' + str.slice(e);                                                         // 20356
            }                                                                                                         // 20357
        }                                                                                                             // 20358
                                                                                                                      // 20359
        return str;                                                                                                   // 20360
    }                                                                                                                 // 20361
                                                                                                                      // 20362
                                                                                                                      // 20363
    function truncate(n) {                                                                                            // 20364
        n = parseFloat(n);                                                                                            // 20365
        return n < 0 ? mathceil(n) : mathfloor(n);                                                                    // 20366
    }                                                                                                                 // 20367
                                                                                                                      // 20368
                                                                                                                      // 20369
    // EXPORT                                                                                                         // 20370
                                                                                                                      // 20371
                                                                                                                      // 20372
    BigNumber = another();                                                                                            // 20373
                                                                                                                      // 20374
    // AMD.                                                                                                           // 20375
    if ( typeof define == 'function' && define.amd ) {                                                                // 20376
        define( function () { return BigNumber; } );                                                                  // 20377
                                                                                                                      // 20378
    // Node and other environments that support module.exports.                                                       // 20379
    } else if ( typeof module != 'undefined' && module.exports ) {                                                    // 20380
        module.exports = BigNumber;                                                                                   // 20381
        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}                                               // 20382
                                                                                                                      // 20383
    // Browser.                                                                                                       // 20384
    } else {                                                                                                          // 20385
        global.BigNumber = BigNumber;                                                                                 // 20386
    }                                                                                                                 // 20387
})(this);                                                                                                             // 20388
                                                                                                                      // 20389
},{"crypto":6}]},{},[162])                                                                                            // 20390
//# sourceMappingURL=3stack:bignumber/bignumber.browserify.js                                                         // 20391
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      // 20393
}).call(this);                                                                                                        // 20394
                                                                                                                      // 20395
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['3stack:bignumber'] = {
  BigNumber: BigNumber
};

})();
