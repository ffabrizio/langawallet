(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var require, Web3, BigNumber;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ethereum_web3/dist/web3.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports=[                                                                                                       // 2
  {                                                                                                                    // 3
    "constant": true,                                                                                                  // 4
    "inputs": [                                                                                                        // 5
      {                                                                                                                // 6
        "name": "_owner",                                                                                              // 7
        "type": "address"                                                                                              // 8
      }                                                                                                                // 9
    ],                                                                                                                 // 10
    "name": "name",                                                                                                    // 11
    "outputs": [                                                                                                       // 12
      {                                                                                                                // 13
        "name": "o_name",                                                                                              // 14
        "type": "bytes32"                                                                                              // 15
      }                                                                                                                // 16
    ],                                                                                                                 // 17
    "type": "function"                                                                                                 // 18
  },                                                                                                                   // 19
  {                                                                                                                    // 20
    "constant": true,                                                                                                  // 21
    "inputs": [                                                                                                        // 22
      {                                                                                                                // 23
        "name": "_name",                                                                                               // 24
        "type": "bytes32"                                                                                              // 25
      }                                                                                                                // 26
    ],                                                                                                                 // 27
    "name": "owner",                                                                                                   // 28
    "outputs": [                                                                                                       // 29
      {                                                                                                                // 30
        "name": "",                                                                                                    // 31
        "type": "address"                                                                                              // 32
      }                                                                                                                // 33
    ],                                                                                                                 // 34
    "type": "function"                                                                                                 // 35
  },                                                                                                                   // 36
  {                                                                                                                    // 37
    "constant": true,                                                                                                  // 38
    "inputs": [                                                                                                        // 39
      {                                                                                                                // 40
        "name": "_name",                                                                                               // 41
        "type": "bytes32"                                                                                              // 42
      }                                                                                                                // 43
    ],                                                                                                                 // 44
    "name": "content",                                                                                                 // 45
    "outputs": [                                                                                                       // 46
      {                                                                                                                // 47
        "name": "",                                                                                                    // 48
        "type": "bytes32"                                                                                              // 49
      }                                                                                                                // 50
    ],                                                                                                                 // 51
    "type": "function"                                                                                                 // 52
  },                                                                                                                   // 53
  {                                                                                                                    // 54
    "constant": true,                                                                                                  // 55
    "inputs": [                                                                                                        // 56
      {                                                                                                                // 57
        "name": "_name",                                                                                               // 58
        "type": "bytes32"                                                                                              // 59
      }                                                                                                                // 60
    ],                                                                                                                 // 61
    "name": "addr",                                                                                                    // 62
    "outputs": [                                                                                                       // 63
      {                                                                                                                // 64
        "name": "",                                                                                                    // 65
        "type": "address"                                                                                              // 66
      }                                                                                                                // 67
    ],                                                                                                                 // 68
    "type": "function"                                                                                                 // 69
  },                                                                                                                   // 70
  {                                                                                                                    // 71
    "constant": false,                                                                                                 // 72
    "inputs": [                                                                                                        // 73
      {                                                                                                                // 74
        "name": "_name",                                                                                               // 75
        "type": "bytes32"                                                                                              // 76
      }                                                                                                                // 77
    ],                                                                                                                 // 78
    "name": "reserve",                                                                                                 // 79
    "outputs": [],                                                                                                     // 80
    "type": "function"                                                                                                 // 81
  },                                                                                                                   // 82
  {                                                                                                                    // 83
    "constant": true,                                                                                                  // 84
    "inputs": [                                                                                                        // 85
      {                                                                                                                // 86
        "name": "_name",                                                                                               // 87
        "type": "bytes32"                                                                                              // 88
      }                                                                                                                // 89
    ],                                                                                                                 // 90
    "name": "subRegistrar",                                                                                            // 91
    "outputs": [                                                                                                       // 92
      {                                                                                                                // 93
        "name": "",                                                                                                    // 94
        "type": "address"                                                                                              // 95
      }                                                                                                                // 96
    ],                                                                                                                 // 97
    "type": "function"                                                                                                 // 98
  },                                                                                                                   // 99
  {                                                                                                                    // 100
    "constant": false,                                                                                                 // 101
    "inputs": [                                                                                                        // 102
      {                                                                                                                // 103
        "name": "_name",                                                                                               // 104
        "type": "bytes32"                                                                                              // 105
      },                                                                                                               // 106
      {                                                                                                                // 107
        "name": "_newOwner",                                                                                           // 108
        "type": "address"                                                                                              // 109
      }                                                                                                                // 110
    ],                                                                                                                 // 111
    "name": "transfer",                                                                                                // 112
    "outputs": [],                                                                                                     // 113
    "type": "function"                                                                                                 // 114
  },                                                                                                                   // 115
  {                                                                                                                    // 116
    "constant": false,                                                                                                 // 117
    "inputs": [                                                                                                        // 118
      {                                                                                                                // 119
        "name": "_name",                                                                                               // 120
        "type": "bytes32"                                                                                              // 121
      },                                                                                                               // 122
      {                                                                                                                // 123
        "name": "_registrar",                                                                                          // 124
        "type": "address"                                                                                              // 125
      }                                                                                                                // 126
    ],                                                                                                                 // 127
    "name": "setSubRegistrar",                                                                                         // 128
    "outputs": [],                                                                                                     // 129
    "type": "function"                                                                                                 // 130
  },                                                                                                                   // 131
  {                                                                                                                    // 132
    "constant": false,                                                                                                 // 133
    "inputs": [],                                                                                                      // 134
    "name": "Registrar",                                                                                               // 135
    "outputs": [],                                                                                                     // 136
    "type": "function"                                                                                                 // 137
  },                                                                                                                   // 138
  {                                                                                                                    // 139
    "constant": false,                                                                                                 // 140
    "inputs": [                                                                                                        // 141
      {                                                                                                                // 142
        "name": "_name",                                                                                               // 143
        "type": "bytes32"                                                                                              // 144
      },                                                                                                               // 145
      {                                                                                                                // 146
        "name": "_a",                                                                                                  // 147
        "type": "address"                                                                                              // 148
      },                                                                                                               // 149
      {                                                                                                                // 150
        "name": "_primary",                                                                                            // 151
        "type": "bool"                                                                                                 // 152
      }                                                                                                                // 153
    ],                                                                                                                 // 154
    "name": "setAddress",                                                                                              // 155
    "outputs": [],                                                                                                     // 156
    "type": "function"                                                                                                 // 157
  },                                                                                                                   // 158
  {                                                                                                                    // 159
    "constant": false,                                                                                                 // 160
    "inputs": [                                                                                                        // 161
      {                                                                                                                // 162
        "name": "_name",                                                                                               // 163
        "type": "bytes32"                                                                                              // 164
      },                                                                                                               // 165
      {                                                                                                                // 166
        "name": "_content",                                                                                            // 167
        "type": "bytes32"                                                                                              // 168
      }                                                                                                                // 169
    ],                                                                                                                 // 170
    "name": "setContent",                                                                                              // 171
    "outputs": [],                                                                                                     // 172
    "type": "function"                                                                                                 // 173
  },                                                                                                                   // 174
  {                                                                                                                    // 175
    "constant": false,                                                                                                 // 176
    "inputs": [                                                                                                        // 177
      {                                                                                                                // 178
        "name": "_name",                                                                                               // 179
        "type": "bytes32"                                                                                              // 180
      }                                                                                                                // 181
    ],                                                                                                                 // 182
    "name": "disown",                                                                                                  // 183
    "outputs": [],                                                                                                     // 184
    "type": "function"                                                                                                 // 185
  },                                                                                                                   // 186
  {                                                                                                                    // 187
    "anonymous": false,                                                                                                // 188
    "inputs": [                                                                                                        // 189
      {                                                                                                                // 190
        "indexed": true,                                                                                               // 191
        "name": "_name",                                                                                               // 192
        "type": "bytes32"                                                                                              // 193
      },                                                                                                               // 194
      {                                                                                                                // 195
        "indexed": false,                                                                                              // 196
        "name": "_winner",                                                                                             // 197
        "type": "address"                                                                                              // 198
      }                                                                                                                // 199
    ],                                                                                                                 // 200
    "name": "AuctionEnded",                                                                                            // 201
    "type": "event"                                                                                                    // 202
  },                                                                                                                   // 203
  {                                                                                                                    // 204
    "anonymous": false,                                                                                                // 205
    "inputs": [                                                                                                        // 206
      {                                                                                                                // 207
        "indexed": true,                                                                                               // 208
        "name": "_name",                                                                                               // 209
        "type": "bytes32"                                                                                              // 210
      },                                                                                                               // 211
      {                                                                                                                // 212
        "indexed": false,                                                                                              // 213
        "name": "_bidder",                                                                                             // 214
        "type": "address"                                                                                              // 215
      },                                                                                                               // 216
      {                                                                                                                // 217
        "indexed": false,                                                                                              // 218
        "name": "_value",                                                                                              // 219
        "type": "uint256"                                                                                              // 220
      }                                                                                                                // 221
    ],                                                                                                                 // 222
    "name": "NewBid",                                                                                                  // 223
    "type": "event"                                                                                                    // 224
  },                                                                                                                   // 225
  {                                                                                                                    // 226
    "anonymous": false,                                                                                                // 227
    "inputs": [                                                                                                        // 228
      {                                                                                                                // 229
        "indexed": true,                                                                                               // 230
        "name": "name",                                                                                                // 231
        "type": "bytes32"                                                                                              // 232
      }                                                                                                                // 233
    ],                                                                                                                 // 234
    "name": "Changed",                                                                                                 // 235
    "type": "event"                                                                                                    // 236
  },                                                                                                                   // 237
  {                                                                                                                    // 238
    "anonymous": false,                                                                                                // 239
    "inputs": [                                                                                                        // 240
      {                                                                                                                // 241
        "indexed": true,                                                                                               // 242
        "name": "name",                                                                                                // 243
        "type": "bytes32"                                                                                              // 244
      },                                                                                                               // 245
      {                                                                                                                // 246
        "indexed": true,                                                                                               // 247
        "name": "addr",                                                                                                // 248
        "type": "address"                                                                                              // 249
      }                                                                                                                // 250
    ],                                                                                                                 // 251
    "name": "PrimaryChanged",                                                                                          // 252
    "type": "event"                                                                                                    // 253
  }                                                                                                                    // 254
]                                                                                                                      // 255
                                                                                                                       // 256
},{}],2:[function(require,module,exports){                                                                             // 257
module.exports=[                                                                                                       // 258
  {                                                                                                                    // 259
    "constant": true,                                                                                                  // 260
    "inputs": [                                                                                                        // 261
      {                                                                                                                // 262
        "name": "_name",                                                                                               // 263
        "type": "bytes32"                                                                                              // 264
      }                                                                                                                // 265
    ],                                                                                                                 // 266
    "name": "owner",                                                                                                   // 267
    "outputs": [                                                                                                       // 268
      {                                                                                                                // 269
        "name": "",                                                                                                    // 270
        "type": "address"                                                                                              // 271
      }                                                                                                                // 272
    ],                                                                                                                 // 273
    "type": "function"                                                                                                 // 274
  },                                                                                                                   // 275
  {                                                                                                                    // 276
    "constant": false,                                                                                                 // 277
    "inputs": [                                                                                                        // 278
      {                                                                                                                // 279
        "name": "_name",                                                                                               // 280
        "type": "bytes32"                                                                                              // 281
      },                                                                                                               // 282
      {                                                                                                                // 283
        "name": "_refund",                                                                                             // 284
        "type": "address"                                                                                              // 285
      }                                                                                                                // 286
    ],                                                                                                                 // 287
    "name": "disown",                                                                                                  // 288
    "outputs": [],                                                                                                     // 289
    "type": "function"                                                                                                 // 290
  },                                                                                                                   // 291
  {                                                                                                                    // 292
    "constant": true,                                                                                                  // 293
    "inputs": [                                                                                                        // 294
      {                                                                                                                // 295
        "name": "_name",                                                                                               // 296
        "type": "bytes32"                                                                                              // 297
      }                                                                                                                // 298
    ],                                                                                                                 // 299
    "name": "addr",                                                                                                    // 300
    "outputs": [                                                                                                       // 301
      {                                                                                                                // 302
        "name": "",                                                                                                    // 303
        "type": "address"                                                                                              // 304
      }                                                                                                                // 305
    ],                                                                                                                 // 306
    "type": "function"                                                                                                 // 307
  },                                                                                                                   // 308
  {                                                                                                                    // 309
    "constant": false,                                                                                                 // 310
    "inputs": [                                                                                                        // 311
      {                                                                                                                // 312
        "name": "_name",                                                                                               // 313
        "type": "bytes32"                                                                                              // 314
      }                                                                                                                // 315
    ],                                                                                                                 // 316
    "name": "reserve",                                                                                                 // 317
    "outputs": [],                                                                                                     // 318
    "type": "function"                                                                                                 // 319
  },                                                                                                                   // 320
  {                                                                                                                    // 321
    "constant": false,                                                                                                 // 322
    "inputs": [                                                                                                        // 323
      {                                                                                                                // 324
        "name": "_name",                                                                                               // 325
        "type": "bytes32"                                                                                              // 326
      },                                                                                                               // 327
      {                                                                                                                // 328
        "name": "_newOwner",                                                                                           // 329
        "type": "address"                                                                                              // 330
      }                                                                                                                // 331
    ],                                                                                                                 // 332
    "name": "transfer",                                                                                                // 333
    "outputs": [],                                                                                                     // 334
    "type": "function"                                                                                                 // 335
  },                                                                                                                   // 336
  {                                                                                                                    // 337
    "constant": false,                                                                                                 // 338
    "inputs": [                                                                                                        // 339
      {                                                                                                                // 340
        "name": "_name",                                                                                               // 341
        "type": "bytes32"                                                                                              // 342
      },                                                                                                               // 343
      {                                                                                                                // 344
        "name": "_a",                                                                                                  // 345
        "type": "address"                                                                                              // 346
      }                                                                                                                // 347
    ],                                                                                                                 // 348
    "name": "setAddr",                                                                                                 // 349
    "outputs": [],                                                                                                     // 350
    "type": "function"                                                                                                 // 351
  },                                                                                                                   // 352
  {                                                                                                                    // 353
    "anonymous": false,                                                                                                // 354
    "inputs": [                                                                                                        // 355
      {                                                                                                                // 356
        "indexed": true,                                                                                               // 357
        "name": "name",                                                                                                // 358
        "type": "bytes32"                                                                                              // 359
      }                                                                                                                // 360
    ],                                                                                                                 // 361
    "name": "Changed",                                                                                                 // 362
    "type": "event"                                                                                                    // 363
  }                                                                                                                    // 364
]                                                                                                                      // 365
                                                                                                                       // 366
},{}],3:[function(require,module,exports){                                                                             // 367
module.exports=[                                                                                                       // 368
  {                                                                                                                    // 369
    "constant": false,                                                                                                 // 370
    "inputs": [                                                                                                        // 371
      {                                                                                                                // 372
        "name": "from",                                                                                                // 373
        "type": "bytes32"                                                                                              // 374
      },                                                                                                               // 375
      {                                                                                                                // 376
        "name": "to",                                                                                                  // 377
        "type": "address"                                                                                              // 378
      },                                                                                                               // 379
      {                                                                                                                // 380
        "name": "value",                                                                                               // 381
        "type": "uint256"                                                                                              // 382
      }                                                                                                                // 383
    ],                                                                                                                 // 384
    "name": "transfer",                                                                                                // 385
    "outputs": [],                                                                                                     // 386
    "type": "function"                                                                                                 // 387
  },                                                                                                                   // 388
  {                                                                                                                    // 389
    "constant": false,                                                                                                 // 390
    "inputs": [                                                                                                        // 391
      {                                                                                                                // 392
        "name": "from",                                                                                                // 393
        "type": "bytes32"                                                                                              // 394
      },                                                                                                               // 395
      {                                                                                                                // 396
        "name": "to",                                                                                                  // 397
        "type": "address"                                                                                              // 398
      },                                                                                                               // 399
      {                                                                                                                // 400
        "name": "indirectId",                                                                                          // 401
        "type": "bytes32"                                                                                              // 402
      },                                                                                                               // 403
      {                                                                                                                // 404
        "name": "value",                                                                                               // 405
        "type": "uint256"                                                                                              // 406
      }                                                                                                                // 407
    ],                                                                                                                 // 408
    "name": "icapTransfer",                                                                                            // 409
    "outputs": [],                                                                                                     // 410
    "type": "function"                                                                                                 // 411
  },                                                                                                                   // 412
  {                                                                                                                    // 413
    "constant": false,                                                                                                 // 414
    "inputs": [                                                                                                        // 415
      {                                                                                                                // 416
        "name": "to",                                                                                                  // 417
        "type": "bytes32"                                                                                              // 418
      }                                                                                                                // 419
    ],                                                                                                                 // 420
    "name": "deposit",                                                                                                 // 421
    "outputs": [],                                                                                                     // 422
    "type": "function"                                                                                                 // 423
  },                                                                                                                   // 424
  {                                                                                                                    // 425
    "anonymous": false,                                                                                                // 426
    "inputs": [                                                                                                        // 427
      {                                                                                                                // 428
        "indexed": true,                                                                                               // 429
        "name": "from",                                                                                                // 430
        "type": "address"                                                                                              // 431
      },                                                                                                               // 432
      {                                                                                                                // 433
        "indexed": false,                                                                                              // 434
        "name": "value",                                                                                               // 435
        "type": "uint256"                                                                                              // 436
      }                                                                                                                // 437
    ],                                                                                                                 // 438
    "name": "AnonymousDeposit",                                                                                        // 439
    "type": "event"                                                                                                    // 440
  },                                                                                                                   // 441
  {                                                                                                                    // 442
    "anonymous": false,                                                                                                // 443
    "inputs": [                                                                                                        // 444
      {                                                                                                                // 445
        "indexed": true,                                                                                               // 446
        "name": "from",                                                                                                // 447
        "type": "address"                                                                                              // 448
      },                                                                                                               // 449
      {                                                                                                                // 450
        "indexed": true,                                                                                               // 451
        "name": "to",                                                                                                  // 452
        "type": "bytes32"                                                                                              // 453
      },                                                                                                               // 454
      {                                                                                                                // 455
        "indexed": false,                                                                                              // 456
        "name": "value",                                                                                               // 457
        "type": "uint256"                                                                                              // 458
      }                                                                                                                // 459
    ],                                                                                                                 // 460
    "name": "Deposit",                                                                                                 // 461
    "type": "event"                                                                                                    // 462
  },                                                                                                                   // 463
  {                                                                                                                    // 464
    "anonymous": false,                                                                                                // 465
    "inputs": [                                                                                                        // 466
      {                                                                                                                // 467
        "indexed": true,                                                                                               // 468
        "name": "from",                                                                                                // 469
        "type": "bytes32"                                                                                              // 470
      },                                                                                                               // 471
      {                                                                                                                // 472
        "indexed": true,                                                                                               // 473
        "name": "to",                                                                                                  // 474
        "type": "address"                                                                                              // 475
      },                                                                                                               // 476
      {                                                                                                                // 477
        "indexed": false,                                                                                              // 478
        "name": "value",                                                                                               // 479
        "type": "uint256"                                                                                              // 480
      }                                                                                                                // 481
    ],                                                                                                                 // 482
    "name": "Transfer",                                                                                                // 483
    "type": "event"                                                                                                    // 484
  },                                                                                                                   // 485
  {                                                                                                                    // 486
    "anonymous": false,                                                                                                // 487
    "inputs": [                                                                                                        // 488
      {                                                                                                                // 489
        "indexed": true,                                                                                               // 490
        "name": "from",                                                                                                // 491
        "type": "bytes32"                                                                                              // 492
      },                                                                                                               // 493
      {                                                                                                                // 494
        "indexed": true,                                                                                               // 495
        "name": "to",                                                                                                  // 496
        "type": "address"                                                                                              // 497
      },                                                                                                               // 498
      {                                                                                                                // 499
        "indexed": false,                                                                                              // 500
        "name": "indirectId",                                                                                          // 501
        "type": "bytes32"                                                                                              // 502
      },                                                                                                               // 503
      {                                                                                                                // 504
        "indexed": false,                                                                                              // 505
        "name": "value",                                                                                               // 506
        "type": "uint256"                                                                                              // 507
      }                                                                                                                // 508
    ],                                                                                                                 // 509
    "name": "IcapTransfer",                                                                                            // 510
    "type": "event"                                                                                                    // 511
  }                                                                                                                    // 512
]                                                                                                                      // 513
                                                                                                                       // 514
},{}],4:[function(require,module,exports){                                                                             // 515
var f = require('./formatters');                                                                                       // 516
var SolidityType = require('./type');                                                                                  // 517
                                                                                                                       // 518
/**                                                                                                                    // 519
 * SolidityTypeAddress is a prootype that represents address type                                                      // 520
 * It matches:                                                                                                         // 521
 * address                                                                                                             // 522
 * address[]                                                                                                           // 523
 * address[4]                                                                                                          // 524
 * address[][]                                                                                                         // 525
 * address[3][]                                                                                                        // 526
 * address[][6][], ...                                                                                                 // 527
 */                                                                                                                    // 528
var SolidityTypeAddress = function () {                                                                                // 529
    this._inputFormatter = f.formatInputInt;                                                                           // 530
    this._outputFormatter = f.formatOutputAddress;                                                                     // 531
};                                                                                                                     // 532
                                                                                                                       // 533
SolidityTypeAddress.prototype = new SolidityType({});                                                                  // 534
SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;                                                       // 535
                                                                                                                       // 536
SolidityTypeAddress.prototype.isType = function (name) {                                                               // 537
    return !!name.match(/address(\[([0-9]*)\])?/);                                                                     // 538
};                                                                                                                     // 539
                                                                                                                       // 540
SolidityTypeAddress.prototype.staticPartLength = function (name) {                                                     // 541
    return 32 * this.staticArrayLength(name);                                                                          // 542
};                                                                                                                     // 543
                                                                                                                       // 544
module.exports = SolidityTypeAddress;                                                                                  // 545
                                                                                                                       // 546
                                                                                                                       // 547
},{"./formatters":9,"./type":14}],5:[function(require,module,exports){                                                 // 548
var f = require('./formatters');                                                                                       // 549
var SolidityType = require('./type');                                                                                  // 550
                                                                                                                       // 551
/**                                                                                                                    // 552
 * SolidityTypeBool is a prootype that represents bool type                                                            // 553
 * It matches:                                                                                                         // 554
 * bool                                                                                                                // 555
 * bool[]                                                                                                              // 556
 * bool[4]                                                                                                             // 557
 * bool[][]                                                                                                            // 558
 * bool[3][]                                                                                                           // 559
 * bool[][6][], ...                                                                                                    // 560
 */                                                                                                                    // 561
var SolidityTypeBool = function () {                                                                                   // 562
    this._inputFormatter = f.formatInputBool;                                                                          // 563
    this._outputFormatter = f.formatOutputBool;                                                                        // 564
};                                                                                                                     // 565
                                                                                                                       // 566
SolidityTypeBool.prototype = new SolidityType({});                                                                     // 567
SolidityTypeBool.prototype.constructor = SolidityTypeBool;                                                             // 568
                                                                                                                       // 569
SolidityTypeBool.prototype.isType = function (name) {                                                                  // 570
    return !!name.match(/^bool(\[([0-9]*)\])*$/);                                                                      // 571
};                                                                                                                     // 572
                                                                                                                       // 573
SolidityTypeBool.prototype.staticPartLength = function (name) {                                                        // 574
    return 32 * this.staticArrayLength(name);                                                                          // 575
};                                                                                                                     // 576
                                                                                                                       // 577
module.exports = SolidityTypeBool;                                                                                     // 578
                                                                                                                       // 579
},{"./formatters":9,"./type":14}],6:[function(require,module,exports){                                                 // 580
var f = require('./formatters');                                                                                       // 581
var SolidityType = require('./type');                                                                                  // 582
                                                                                                                       // 583
/**                                                                                                                    // 584
 * SolidityTypeBytes is a prootype that represents bytes type                                                          // 585
 * It matches:                                                                                                         // 586
 * bytes                                                                                                               // 587
 * bytes[]                                                                                                             // 588
 * bytes[4]                                                                                                            // 589
 * bytes[][]                                                                                                           // 590
 * bytes[3][]                                                                                                          // 591
 * bytes[][6][], ...                                                                                                   // 592
 * bytes32                                                                                                             // 593
 * bytes64[]                                                                                                           // 594
 * bytes8[4]                                                                                                           // 595
 * bytes256[][]                                                                                                        // 596
 * bytes[3][]                                                                                                          // 597
 * bytes64[][6][], ...                                                                                                 // 598
 */                                                                                                                    // 599
var SolidityTypeBytes = function () {                                                                                  // 600
    this._inputFormatter = f.formatInputBytes;                                                                         // 601
    this._outputFormatter = f.formatOutputBytes;                                                                       // 602
};                                                                                                                     // 603
                                                                                                                       // 604
SolidityTypeBytes.prototype = new SolidityType({});                                                                    // 605
SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;                                                           // 606
                                                                                                                       // 607
SolidityTypeBytes.prototype.isType = function (name) {                                                                 // 608
    return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);                                                          // 609
};                                                                                                                     // 610
                                                                                                                       // 611
SolidityTypeBytes.prototype.staticPartLength = function (name) {                                                       // 612
    var matches = name.match(/^bytes([0-9]*)/);                                                                        // 613
    var size = parseInt(matches[1]);                                                                                   // 614
    return size * this.staticArrayLength(name);                                                                        // 615
};                                                                                                                     // 616
                                                                                                                       // 617
module.exports = SolidityTypeBytes;                                                                                    // 618
                                                                                                                       // 619
},{"./formatters":9,"./type":14}],7:[function(require,module,exports){                                                 // 620
/*                                                                                                                     // 621
    This file is part of web3.js.                                                                                      // 622
                                                                                                                       // 623
    web3.js is free software: you can redistribute it and/or modify                                                    // 624
    it under the terms of the GNU Lesser General Public License as published by                                        // 625
    the Free Software Foundation, either version 3 of the License, or                                                  // 626
    (at your option) any later version.                                                                                // 627
                                                                                                                       // 628
    web3.js is distributed in the hope that it will be useful,                                                         // 629
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 630
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 631
    GNU Lesser General Public License for more details.                                                                // 632
                                                                                                                       // 633
    You should have received a copy of the GNU Lesser General Public License                                           // 634
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 635
*/                                                                                                                     // 636
/**                                                                                                                    // 637
 * @file coder.js                                                                                                      // 638
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 639
 * @date 2015                                                                                                          // 640
 */                                                                                                                    // 641
                                                                                                                       // 642
var f = require('./formatters');                                                                                       // 643
                                                                                                                       // 644
var SolidityTypeAddress = require('./address');                                                                        // 645
var SolidityTypeBool = require('./bool');                                                                              // 646
var SolidityTypeInt = require('./int');                                                                                // 647
var SolidityTypeUInt = require('./uint');                                                                              // 648
var SolidityTypeDynamicBytes = require('./dynamicbytes');                                                              // 649
var SolidityTypeString = require('./string');                                                                          // 650
var SolidityTypeReal = require('./real');                                                                              // 651
var SolidityTypeUReal = require('./ureal');                                                                            // 652
var SolidityTypeBytes = require('./bytes');                                                                            // 653
                                                                                                                       // 654
/**                                                                                                                    // 655
 * SolidityCoder prototype should be used to encode/decode solidity params of any type                                 // 656
 */                                                                                                                    // 657
var SolidityCoder = function (types) {                                                                                 // 658
    this._types = types;                                                                                               // 659
};                                                                                                                     // 660
                                                                                                                       // 661
/**                                                                                                                    // 662
 * This method should be used to transform type to SolidityType                                                        // 663
 *                                                                                                                     // 664
 * @method _requireType                                                                                                // 665
 * @param {String} type                                                                                                // 666
 * @returns {SolidityType}                                                                                             // 667
 * @throws {Error} throws if no matching type is found                                                                 // 668
 */                                                                                                                    // 669
SolidityCoder.prototype._requireType = function (type) {                                                               // 670
    var solidityType = this._types.filter(function (t) {                                                               // 671
        return t.isType(type);                                                                                         // 672
    })[0];                                                                                                             // 673
                                                                                                                       // 674
    if (!solidityType) {                                                                                               // 675
        throw Error('invalid solidity type!: ' + type);                                                                // 676
    }                                                                                                                  // 677
                                                                                                                       // 678
    return solidityType;                                                                                               // 679
};                                                                                                                     // 680
                                                                                                                       // 681
/**                                                                                                                    // 682
 * Should be used to encode plain param                                                                                // 683
 *                                                                                                                     // 684
 * @method encodeParam                                                                                                 // 685
 * @param {String} type                                                                                                // 686
 * @param {Object} plain param                                                                                         // 687
 * @return {String} encoded plain param                                                                                // 688
 */                                                                                                                    // 689
SolidityCoder.prototype.encodeParam = function (type, param) {                                                         // 690
    return this.encodeParams([type], [param]);                                                                         // 691
};                                                                                                                     // 692
                                                                                                                       // 693
/**                                                                                                                    // 694
 * Should be used to encode list of params                                                                             // 695
 *                                                                                                                     // 696
 * @method encodeParams                                                                                                // 697
 * @param {Array} types                                                                                                // 698
 * @param {Array} params                                                                                               // 699
 * @return {String} encoded list of params                                                                             // 700
 */                                                                                                                    // 701
SolidityCoder.prototype.encodeParams = function (types, params) {                                                      // 702
    var solidityTypes = this.getSolidityTypes(types);                                                                  // 703
                                                                                                                       // 704
    var encodeds = solidityTypes.map(function (solidityType, index) {                                                  // 705
        return solidityType.encode(params[index], types[index]);                                                       // 706
    });                                                                                                                // 707
                                                                                                                       // 708
    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {                                     // 709
        var staticPartLength = solidityType.staticPartLength(types[index]);                                            // 710
        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;                                   // 711
        return acc + roundedStaticPartLength;                                                                          // 712
    }, 0);                                                                                                             // 713
                                                                                                                       // 714
    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);                            // 715
                                                                                                                       // 716
    return result;                                                                                                     // 717
};                                                                                                                     // 718
                                                                                                                       // 719
SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {             // 720
    var result = "";                                                                                                   // 721
    var self = this;                                                                                                   // 722
                                                                                                                       // 723
    var isDynamic = function (i) {                                                                                     // 724
       return solidityTypes[i].isDynamicArray(types[i]) || solidityTypes[i].isDynamicType(types[i]);                   // 725
    };                                                                                                                 // 726
                                                                                                                       // 727
    types.forEach(function (type, i) {                                                                                 // 728
        if (isDynamic(i)) {                                                                                            // 729
            result += f.formatInputInt(dynamicOffset).encode();                                                        // 730
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 731
            dynamicOffset += e.length / 2;                                                                             // 732
        } else {                                                                                                       // 733
            // don't add length to dynamicOffset. it's already counted                                                 // 734
            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                   // 735
        }                                                                                                              // 736
                                                                                                                       // 737
        // TODO: figure out nested arrays                                                                              // 738
    });                                                                                                                // 739
                                                                                                                       // 740
    types.forEach(function (type, i) {                                                                                 // 741
        if (isDynamic(i)) {                                                                                            // 742
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 743
            dynamicOffset += e.length / 2;                                                                             // 744
            result += e;                                                                                               // 745
        }                                                                                                              // 746
    });                                                                                                                // 747
    return result;                                                                                                     // 748
};                                                                                                                     // 749
                                                                                                                       // 750
// TODO: refactor whole encoding!                                                                                      // 751
SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {                            // 752
    var self = this;                                                                                                   // 753
    if (solidityType.isDynamicArray(type)) {                                                                           // 754
        return (function () {                                                                                          // 755
            // offset was already set                                                                                  // 756
            var nestedName = solidityType.nestedName(type);                                                            // 757
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 758
            var result = encoded[0];                                                                                   // 759
                                                                                                                       // 760
            (function () {                                                                                             // 761
                var previousLength = 2; // in int                                                                      // 762
                if (solidityType.isDynamicArray(nestedName)) {                                                         // 763
                    for (var i = 1; i < encoded.length; i++) {                                                         // 764
                        previousLength += +(encoded[i - 1])[0] || 0;                                                   // 765
                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                    }                                                                                                  // 767
                }                                                                                                      // 768
            })();                                                                                                      // 769
                                                                                                                       // 770
            // first element is length, skip it                                                                        // 771
            (function () {                                                                                             // 772
                for (var i = 0; i < encoded.length - 1; i++) {                                                         // 773
                    var additionalOffset = result / 2;                                                                 // 774
                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);
                }                                                                                                      // 776
            })();                                                                                                      // 777
                                                                                                                       // 778
            return result;                                                                                             // 779
        })();                                                                                                          // 780
                                                                                                                       // 781
    } else if (solidityType.isStaticArray(type)) {                                                                     // 782
        return (function () {                                                                                          // 783
            var nestedName = solidityType.nestedName(type);                                                            // 784
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 785
            var result = "";                                                                                           // 786
                                                                                                                       // 787
                                                                                                                       // 788
            if (solidityType.isDynamicArray(nestedName)) {                                                             // 789
                (function () {                                                                                         // 790
                    var previousLength = 0; // in int                                                                  // 791
                    for (var i = 0; i < encoded.length; i++) {                                                         // 792
                        // calculate length of previous item                                                           // 793
                        previousLength += +(encoded[i - 1] || [])[0] || 0;                                             // 794
                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                    }                                                                                                  // 796
                })();                                                                                                  // 797
            }                                                                                                          // 798
                                                                                                                       // 799
            (function () {                                                                                             // 800
                for (var i = 0; i < encoded.length; i++) {                                                             // 801
                    var additionalOffset = result / 2;                                                                 // 802
                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);  // 803
                }                                                                                                      // 804
            })();                                                                                                      // 805
                                                                                                                       // 806
            return result;                                                                                             // 807
        })();                                                                                                          // 808
    }                                                                                                                  // 809
                                                                                                                       // 810
    return encoded;                                                                                                    // 811
};                                                                                                                     // 812
                                                                                                                       // 813
/**                                                                                                                    // 814
 * Should be used to decode bytes to plain param                                                                       // 815
 *                                                                                                                     // 816
 * @method decodeParam                                                                                                 // 817
 * @param {String} type                                                                                                // 818
 * @param {String} bytes                                                                                               // 819
 * @return {Object} plain param                                                                                        // 820
 */                                                                                                                    // 821
SolidityCoder.prototype.decodeParam = function (type, bytes) {                                                         // 822
    return this.decodeParams([type], bytes)[0];                                                                        // 823
};                                                                                                                     // 824
                                                                                                                       // 825
/**                                                                                                                    // 826
 * Should be used to decode list of params                                                                             // 827
 *                                                                                                                     // 828
 * @method decodeParam                                                                                                 // 829
 * @param {Array} types                                                                                                // 830
 * @param {String} bytes                                                                                               // 831
 * @return {Array} array of plain params                                                                               // 832
 */                                                                                                                    // 833
SolidityCoder.prototype.decodeParams = function (types, bytes) {                                                       // 834
    var solidityTypes = this.getSolidityTypes(types);                                                                  // 835
    var offsets = this.getOffsets(types, solidityTypes);                                                               // 836
                                                                                                                       // 837
    return solidityTypes.map(function (solidityType, index) {                                                          // 838
        return solidityType.decode(bytes, offsets[index],  types[index], index);                                       // 839
    });                                                                                                                // 840
};                                                                                                                     // 841
                                                                                                                       // 842
SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {                                                 // 843
    var lengths =  solidityTypes.map(function (solidityType, index) {                                                  // 844
        return solidityType.staticPartLength(types[index]);                                                            // 845
    });                                                                                                                // 846
                                                                                                                       // 847
    for (var i = 1; i < lengths.length; i++) {                                                                         // 848
         // sum with length of previous element                                                                        // 849
        lengths[i] += lengths[i - 1];                                                                                  // 850
    }                                                                                                                  // 851
                                                                                                                       // 852
    return lengths.map(function (length, index) {                                                                      // 853
        // remove the current length, so the length is sum of previous elements                                        // 854
        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);                                    // 855
        return length - staticPartLength;                                                                              // 856
    });                                                                                                                // 857
};                                                                                                                     // 858
                                                                                                                       // 859
SolidityCoder.prototype.getSolidityTypes = function (types) {                                                          // 860
    var self = this;                                                                                                   // 861
    return types.map(function (type) {                                                                                 // 862
        return self._requireType(type);                                                                                // 863
    });                                                                                                                // 864
};                                                                                                                     // 865
                                                                                                                       // 866
var coder = new SolidityCoder([                                                                                        // 867
    new SolidityTypeAddress(),                                                                                         // 868
    new SolidityTypeBool(),                                                                                            // 869
    new SolidityTypeInt(),                                                                                             // 870
    new SolidityTypeUInt(),                                                                                            // 871
    new SolidityTypeDynamicBytes(),                                                                                    // 872
    new SolidityTypeBytes(),                                                                                           // 873
    new SolidityTypeString(),                                                                                          // 874
    new SolidityTypeReal(),                                                                                            // 875
    new SolidityTypeUReal()                                                                                            // 876
]);                                                                                                                    // 877
                                                                                                                       // 878
module.exports = coder;                                                                                                // 879
                                                                                                                       // 880
                                                                                                                       // 881
},{"./address":4,"./bool":5,"./bytes":6,"./dynamicbytes":8,"./formatters":9,"./int":10,"./real":12,"./string":13,"./uint":15,"./ureal":16}],8:[function(require,module,exports){
var f = require('./formatters');                                                                                       // 883
var SolidityType = require('./type');                                                                                  // 884
                                                                                                                       // 885
var SolidityTypeDynamicBytes = function () {                                                                           // 886
    this._inputFormatter = f.formatInputDynamicBytes;                                                                  // 887
    this._outputFormatter = f.formatOutputDynamicBytes;                                                                // 888
};                                                                                                                     // 889
                                                                                                                       // 890
SolidityTypeDynamicBytes.prototype = new SolidityType({});                                                             // 891
SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;                                             // 892
                                                                                                                       // 893
SolidityTypeDynamicBytes.prototype.isType = function (name) {                                                          // 894
    return !!name.match(/^bytes(\[([0-9]*)\])*$/);                                                                     // 895
};                                                                                                                     // 896
                                                                                                                       // 897
SolidityTypeDynamicBytes.prototype.staticPartLength = function (name) {                                                // 898
    return 32 * this.staticArrayLength(name);                                                                          // 899
};                                                                                                                     // 900
                                                                                                                       // 901
SolidityTypeDynamicBytes.prototype.isDynamicType = function () {                                                       // 902
    return true;                                                                                                       // 903
};                                                                                                                     // 904
                                                                                                                       // 905
module.exports = SolidityTypeDynamicBytes;                                                                             // 906
                                                                                                                       // 907
                                                                                                                       // 908
},{"./formatters":9,"./type":14}],9:[function(require,module,exports){                                                 // 909
/*                                                                                                                     // 910
    This file is part of web3.js.                                                                                      // 911
                                                                                                                       // 912
    web3.js is free software: you can redistribute it and/or modify                                                    // 913
    it under the terms of the GNU Lesser General Public License as published by                                        // 914
    the Free Software Foundation, either version 3 of the License, or                                                  // 915
    (at your option) any later version.                                                                                // 916
                                                                                                                       // 917
    web3.js is distributed in the hope that it will be useful,                                                         // 918
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 919
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 920
    GNU Lesser General Public License for more details.                                                                // 921
                                                                                                                       // 922
    You should have received a copy of the GNU Lesser General Public License                                           // 923
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 924
*/                                                                                                                     // 925
/**                                                                                                                    // 926
 * @file formatters.js                                                                                                 // 927
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 928
 * @date 2015                                                                                                          // 929
 */                                                                                                                    // 930
                                                                                                                       // 931
var BigNumber = require('bignumber.js');                                                                               // 932
var utils = require('../utils/utils');                                                                                 // 933
var c = require('../utils/config');                                                                                    // 934
var SolidityParam = require('./param');                                                                                // 935
                                                                                                                       // 936
                                                                                                                       // 937
/**                                                                                                                    // 938
 * Formats input value to byte representation of int                                                                   // 939
 * If value is negative, return it's two's complement                                                                  // 940
 * If the value is floating point, round it down                                                                       // 941
 *                                                                                                                     // 942
 * @method formatInputInt                                                                                              // 943
 * @param {String|Number|BigNumber} value that needs to be formatted                                                   // 944
 * @returns {SolidityParam}                                                                                            // 945
 */                                                                                                                    // 946
var formatInputInt = function (value) {                                                                                // 947
    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);                                                                   // 948
    var result = utils.padLeft(utils.toTwosComplement(value).round().toString(16), 64);                                // 949
    return new SolidityParam(result);                                                                                  // 950
};                                                                                                                     // 951
                                                                                                                       // 952
/**                                                                                                                    // 953
 * Formats input bytes                                                                                                 // 954
 *                                                                                                                     // 955
 * @method formatInputBytes                                                                                            // 956
 * @param {String}                                                                                                     // 957
 * @returns {SolidityParam}                                                                                            // 958
 */                                                                                                                    // 959
var formatInputBytes = function (value) {                                                                              // 960
    var result = utils.toHex(value).substr(2);                                                                         // 961
    var l = Math.floor((result.length + 63) / 64);                                                                     // 962
    result = utils.padRight(result, l * 64);                                                                           // 963
    return new SolidityParam(result);                                                                                  // 964
};                                                                                                                     // 965
                                                                                                                       // 966
/**                                                                                                                    // 967
 * Formats input bytes                                                                                                 // 968
 *                                                                                                                     // 969
 * @method formatDynamicInputBytes                                                                                     // 970
 * @param {String}                                                                                                     // 971
 * @returns {SolidityParam}                                                                                            // 972
 */                                                                                                                    // 973
var formatInputDynamicBytes = function (value) {                                                                       // 974
    var result = utils.toHex(value).substr(2);                                                                         // 975
    var length = result.length / 2;                                                                                    // 976
    var l = Math.floor((result.length + 63) / 64);                                                                     // 977
    result = utils.padRight(result, l * 64);                                                                           // 978
    return new SolidityParam(formatInputInt(length).value + result);                                                   // 979
};                                                                                                                     // 980
                                                                                                                       // 981
/**                                                                                                                    // 982
 * Formats input value to byte representation of string                                                                // 983
 *                                                                                                                     // 984
 * @method formatInputString                                                                                           // 985
 * @param {String}                                                                                                     // 986
 * @returns {SolidityParam}                                                                                            // 987
 */                                                                                                                    // 988
var formatInputString = function (value) {                                                                             // 989
    var result = utils.fromUtf8(value).substr(2);                                                                      // 990
    var length = result.length / 2;                                                                                    // 991
    var l = Math.floor((result.length + 63) / 64);                                                                     // 992
    result = utils.padRight(result, l * 64);                                                                           // 993
    return new SolidityParam(formatInputInt(length).value + result);                                                   // 994
};                                                                                                                     // 995
                                                                                                                       // 996
/**                                                                                                                    // 997
 * Formats input value to byte representation of bool                                                                  // 998
 *                                                                                                                     // 999
 * @method formatInputBool                                                                                             // 1000
 * @param {Boolean}                                                                                                    // 1001
 * @returns {SolidityParam}                                                                                            // 1002
 */                                                                                                                    // 1003
var formatInputBool = function (value) {                                                                               // 1004
    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');             // 1005
    return new SolidityParam(result);                                                                                  // 1006
};                                                                                                                     // 1007
                                                                                                                       // 1008
/**                                                                                                                    // 1009
 * Formats input value to byte representation of real                                                                  // 1010
 * Values are multiplied by 2^m and encoded as integers                                                                // 1011
 *                                                                                                                     // 1012
 * @method formatInputReal                                                                                             // 1013
 * @param {String|Number|BigNumber}                                                                                    // 1014
 * @returns {SolidityParam}                                                                                            // 1015
 */                                                                                                                    // 1016
var formatInputReal = function (value) {                                                                               // 1017
    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));                                      // 1018
};                                                                                                                     // 1019
                                                                                                                       // 1020
/**                                                                                                                    // 1021
 * Check if input value is negative                                                                                    // 1022
 *                                                                                                                     // 1023
 * @method signedIsNegative                                                                                            // 1024
 * @param {String} value is hex format                                                                                 // 1025
 * @returns {Boolean} true if it is negative, otherwise false                                                          // 1026
 */                                                                                                                    // 1027
var signedIsNegative = function (value) {                                                                              // 1028
    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';                                   // 1029
};                                                                                                                     // 1030
                                                                                                                       // 1031
/**                                                                                                                    // 1032
 * Formats right-aligned output bytes to int                                                                           // 1033
 *                                                                                                                     // 1034
 * @method formatOutputInt                                                                                             // 1035
 * @param {SolidityParam} param                                                                                        // 1036
 * @returns {BigNumber} right-aligned output bytes formatted to big number                                             // 1037
 */                                                                                                                    // 1038
var formatOutputInt = function (param) {                                                                               // 1039
    var value = param.staticPart() || "0";                                                                             // 1040
                                                                                                                       // 1041
    // check if it's negative number                                                                                   // 1042
    // it it is, return two's complement                                                                               // 1043
    if (signedIsNegative(value)) {                                                                                     // 1044
        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
    }                                                                                                                  // 1046
    return new BigNumber(value, 16);                                                                                   // 1047
};                                                                                                                     // 1048
                                                                                                                       // 1049
/**                                                                                                                    // 1050
 * Formats right-aligned output bytes to uint                                                                          // 1051
 *                                                                                                                     // 1052
 * @method formatOutputUInt                                                                                            // 1053
 * @param {SolidityParam}                                                                                              // 1054
 * @returns {BigNumeber} right-aligned output bytes formatted to uint                                                  // 1055
 */                                                                                                                    // 1056
var formatOutputUInt = function (param) {                                                                              // 1057
    var value = param.staticPart() || "0";                                                                             // 1058
    return new BigNumber(value, 16);                                                                                   // 1059
};                                                                                                                     // 1060
                                                                                                                       // 1061
/**                                                                                                                    // 1062
 * Formats right-aligned output bytes to real                                                                          // 1063
 *                                                                                                                     // 1064
 * @method formatOutputReal                                                                                            // 1065
 * @param {SolidityParam}                                                                                              // 1066
 * @returns {BigNumber} input bytes formatted to real                                                                  // 1067
 */                                                                                                                    // 1068
var formatOutputReal = function (param) {                                                                              // 1069
    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));                                                // 1070
};                                                                                                                     // 1071
                                                                                                                       // 1072
/**                                                                                                                    // 1073
 * Formats right-aligned output bytes to ureal                                                                         // 1074
 *                                                                                                                     // 1075
 * @method formatOutputUReal                                                                                           // 1076
 * @param {SolidityParam}                                                                                              // 1077
 * @returns {BigNumber} input bytes formatted to ureal                                                                 // 1078
 */                                                                                                                    // 1079
var formatOutputUReal = function (param) {                                                                             // 1080
    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));                                               // 1081
};                                                                                                                     // 1082
                                                                                                                       // 1083
/**                                                                                                                    // 1084
 * Should be used to format output bool                                                                                // 1085
 *                                                                                                                     // 1086
 * @method formatOutputBool                                                                                            // 1087
 * @param {SolidityParam}                                                                                              // 1088
 * @returns {Boolean} right-aligned input bytes formatted to bool                                                      // 1089
 */                                                                                                                    // 1090
var formatOutputBool = function (param) {                                                                              // 1091
    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;   // 1092
};                                                                                                                     // 1093
                                                                                                                       // 1094
/**                                                                                                                    // 1095
 * Should be used to format output bytes                                                                               // 1096
 *                                                                                                                     // 1097
 * @method formatOutputBytes                                                                                           // 1098
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1099
 * @returns {String} hex string                                                                                        // 1100
 */                                                                                                                    // 1101
var formatOutputBytes = function (param) {                                                                             // 1102
    return '0x' + param.staticPart();                                                                                  // 1103
};                                                                                                                     // 1104
                                                                                                                       // 1105
/**                                                                                                                    // 1106
 * Should be used to format output bytes                                                                               // 1107
 *                                                                                                                     // 1108
 * @method formatOutputDynamicBytes                                                                                    // 1109
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1110
 * @returns {String} hex string                                                                                        // 1111
 */                                                                                                                    // 1112
var formatOutputDynamicBytes = function (param) {                                                                      // 1113
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1114
    return '0x' + param.dynamicPart().substr(64, length);                                                              // 1115
};                                                                                                                     // 1116
                                                                                                                       // 1117
/**                                                                                                                    // 1118
 * Should be used to format output string                                                                              // 1119
 *                                                                                                                     // 1120
 * @method formatOutputString                                                                                          // 1121
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1122
 * @returns {String} ascii string                                                                                      // 1123
 */                                                                                                                    // 1124
var formatOutputString = function (param) {                                                                            // 1125
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1126
    return utils.toUtf8(param.dynamicPart().substr(64, length));                                                       // 1127
};                                                                                                                     // 1128
                                                                                                                       // 1129
/**                                                                                                                    // 1130
 * Should be used to format output address                                                                             // 1131
 *                                                                                                                     // 1132
 * @method formatOutputAddress                                                                                         // 1133
 * @param {SolidityParam} right-aligned input bytes                                                                    // 1134
 * @returns {String} address                                                                                           // 1135
 */                                                                                                                    // 1136
var formatOutputAddress = function (param) {                                                                           // 1137
    var value = param.staticPart();                                                                                    // 1138
    return "0x" + value.slice(value.length - 40, value.length);                                                        // 1139
};                                                                                                                     // 1140
                                                                                                                       // 1141
module.exports = {                                                                                                     // 1142
    formatInputInt: formatInputInt,                                                                                    // 1143
    formatInputBytes: formatInputBytes,                                                                                // 1144
    formatInputDynamicBytes: formatInputDynamicBytes,                                                                  // 1145
    formatInputString: formatInputString,                                                                              // 1146
    formatInputBool: formatInputBool,                                                                                  // 1147
    formatInputReal: formatInputReal,                                                                                  // 1148
    formatOutputInt: formatOutputInt,                                                                                  // 1149
    formatOutputUInt: formatOutputUInt,                                                                                // 1150
    formatOutputReal: formatOutputReal,                                                                                // 1151
    formatOutputUReal: formatOutputUReal,                                                                              // 1152
    formatOutputBool: formatOutputBool,                                                                                // 1153
    formatOutputBytes: formatOutputBytes,                                                                              // 1154
    formatOutputDynamicBytes: formatOutputDynamicBytes,                                                                // 1155
    formatOutputString: formatOutputString,                                                                            // 1156
    formatOutputAddress: formatOutputAddress                                                                           // 1157
};                                                                                                                     // 1158
                                                                                                                       // 1159
                                                                                                                       // 1160
},{"../utils/config":18,"../utils/utils":20,"./param":11,"bignumber.js":"bignumber.js"}],10:[function(require,module,exports){
var f = require('./formatters');                                                                                       // 1162
var SolidityType = require('./type');                                                                                  // 1163
                                                                                                                       // 1164
/**                                                                                                                    // 1165
 * SolidityTypeInt is a prootype that represents int type                                                              // 1166
 * It matches:                                                                                                         // 1167
 * int                                                                                                                 // 1168
 * int[]                                                                                                               // 1169
 * int[4]                                                                                                              // 1170
 * int[][]                                                                                                             // 1171
 * int[3][]                                                                                                            // 1172
 * int[][6][], ...                                                                                                     // 1173
 * int32                                                                                                               // 1174
 * int64[]                                                                                                             // 1175
 * int8[4]                                                                                                             // 1176
 * int256[][]                                                                                                          // 1177
 * int[3][]                                                                                                            // 1178
 * int64[][6][], ...                                                                                                   // 1179
 */                                                                                                                    // 1180
var SolidityTypeInt = function () {                                                                                    // 1181
    this._inputFormatter = f.formatInputInt;                                                                           // 1182
    this._outputFormatter = f.formatOutputInt;                                                                         // 1183
};                                                                                                                     // 1184
                                                                                                                       // 1185
SolidityTypeInt.prototype = new SolidityType({});                                                                      // 1186
SolidityTypeInt.prototype.constructor = SolidityTypeInt;                                                               // 1187
                                                                                                                       // 1188
SolidityTypeInt.prototype.isType = function (name) {                                                                   // 1189
    return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);                                                              // 1190
};                                                                                                                     // 1191
                                                                                                                       // 1192
SolidityTypeInt.prototype.staticPartLength = function (name) {                                                         // 1193
    return 32 * this.staticArrayLength(name);                                                                          // 1194
};                                                                                                                     // 1195
                                                                                                                       // 1196
module.exports = SolidityTypeInt;                                                                                      // 1197
                                                                                                                       // 1198
},{"./formatters":9,"./type":14}],11:[function(require,module,exports){                                                // 1199
/*                                                                                                                     // 1200
    This file is part of web3.js.                                                                                      // 1201
                                                                                                                       // 1202
    web3.js is free software: you can redistribute it and/or modify                                                    // 1203
    it under the terms of the GNU Lesser General Public License as published by                                        // 1204
    the Free Software Foundation, either version 3 of the License, or                                                  // 1205
    (at your option) any later version.                                                                                // 1206
                                                                                                                       // 1207
    web3.js is distributed in the hope that it will be useful,                                                         // 1208
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1209
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1210
    GNU Lesser General Public License for more details.                                                                // 1211
                                                                                                                       // 1212
    You should have received a copy of the GNU Lesser General Public License                                           // 1213
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1214
*/                                                                                                                     // 1215
/**                                                                                                                    // 1216
 * @file param.js                                                                                                      // 1217
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1218
 * @date 2015                                                                                                          // 1219
 */                                                                                                                    // 1220
                                                                                                                       // 1221
var utils = require('../utils/utils');                                                                                 // 1222
                                                                                                                       // 1223
/**                                                                                                                    // 1224
 * SolidityParam object prototype.                                                                                     // 1225
 * Should be used when encoding, decoding solidity bytes                                                               // 1226
 */                                                                                                                    // 1227
var SolidityParam = function (value, offset) {                                                                         // 1228
    this.value = value || '';                                                                                          // 1229
    this.offset = offset; // offset in bytes                                                                           // 1230
};                                                                                                                     // 1231
                                                                                                                       // 1232
/**                                                                                                                    // 1233
 * This method should be used to get length of params's dynamic part                                                   // 1234
 *                                                                                                                     // 1235
 * @method dynamicPartLength                                                                                           // 1236
 * @returns {Number} length of dynamic part (in bytes)                                                                 // 1237
 */                                                                                                                    // 1238
SolidityParam.prototype.dynamicPartLength = function () {                                                              // 1239
    return this.dynamicPart().length / 2;                                                                              // 1240
};                                                                                                                     // 1241
                                                                                                                       // 1242
/**                                                                                                                    // 1243
 * This method should be used to create copy of solidity param with different offset                                   // 1244
 *                                                                                                                     // 1245
 * @method withOffset                                                                                                  // 1246
 * @param {Number} offset length in bytes                                                                              // 1247
 * @returns {SolidityParam} new solidity param with applied offset                                                     // 1248
 */                                                                                                                    // 1249
SolidityParam.prototype.withOffset = function (offset) {                                                               // 1250
    return new SolidityParam(this.value, offset);                                                                      // 1251
};                                                                                                                     // 1252
                                                                                                                       // 1253
/**                                                                                                                    // 1254
 * This method should be used to combine solidity params together                                                      // 1255
 * eg. when appending an array                                                                                         // 1256
 *                                                                                                                     // 1257
 * @method combine                                                                                                     // 1258
 * @param {SolidityParam} param with which we should combine                                                           // 1259
 * @param {SolidityParam} result of combination                                                                        // 1260
 */                                                                                                                    // 1261
SolidityParam.prototype.combine = function (param) {                                                                   // 1262
    return new SolidityParam(this.value + param.value);                                                                // 1263
};                                                                                                                     // 1264
                                                                                                                       // 1265
/**                                                                                                                    // 1266
 * This method should be called to check if param has dynamic size.                                                    // 1267
 * If it has, it returns true, otherwise false                                                                         // 1268
 *                                                                                                                     // 1269
 * @method isDynamic                                                                                                   // 1270
 * @returns {Boolean}                                                                                                  // 1271
 */                                                                                                                    // 1272
SolidityParam.prototype.isDynamic = function () {                                                                      // 1273
    return this.offset !== undefined;                                                                                  // 1274
};                                                                                                                     // 1275
                                                                                                                       // 1276
/**                                                                                                                    // 1277
 * This method should be called to transform offset to bytes                                                           // 1278
 *                                                                                                                     // 1279
 * @method offsetAsBytes                                                                                               // 1280
 * @returns {String} bytes representation of offset                                                                    // 1281
 */                                                                                                                    // 1282
SolidityParam.prototype.offsetAsBytes = function () {                                                                  // 1283
    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);               // 1284
};                                                                                                                     // 1285
                                                                                                                       // 1286
/**                                                                                                                    // 1287
 * This method should be called to get static part of param                                                            // 1288
 *                                                                                                                     // 1289
 * @method staticPart                                                                                                  // 1290
 * @returns {String} offset if it is a dynamic param, otherwise value                                                  // 1291
 */                                                                                                                    // 1292
SolidityParam.prototype.staticPart = function () {                                                                     // 1293
    if (!this.isDynamic()) {                                                                                           // 1294
        return this.value;                                                                                             // 1295
    }                                                                                                                  // 1296
    return this.offsetAsBytes();                                                                                       // 1297
};                                                                                                                     // 1298
                                                                                                                       // 1299
/**                                                                                                                    // 1300
 * This method should be called to get dynamic part of param                                                           // 1301
 *                                                                                                                     // 1302
 * @method dynamicPart                                                                                                 // 1303
 * @returns {String} returns a value if it is a dynamic param, otherwise empty string                                  // 1304
 */                                                                                                                    // 1305
SolidityParam.prototype.dynamicPart = function () {                                                                    // 1306
    return this.isDynamic() ? this.value : '';                                                                         // 1307
};                                                                                                                     // 1308
                                                                                                                       // 1309
/**                                                                                                                    // 1310
 * This method should be called to encode param                                                                        // 1311
 *                                                                                                                     // 1312
 * @method encode                                                                                                      // 1313
 * @returns {String}                                                                                                   // 1314
 */                                                                                                                    // 1315
SolidityParam.prototype.encode = function () {                                                                         // 1316
    return this.staticPart() + this.dynamicPart();                                                                     // 1317
};                                                                                                                     // 1318
                                                                                                                       // 1319
/**                                                                                                                    // 1320
 * This method should be called to encode array of params                                                              // 1321
 *                                                                                                                     // 1322
 * @method encodeList                                                                                                  // 1323
 * @param {Array[SolidityParam]} params                                                                                // 1324
 * @returns {String}                                                                                                   // 1325
 */                                                                                                                    // 1326
SolidityParam.encodeList = function (params) {                                                                         // 1327
                                                                                                                       // 1328
    // updating offsets                                                                                                // 1329
    var totalOffset = params.length * 32;                                                                              // 1330
    var offsetParams = params.map(function (param) {                                                                   // 1331
        if (!param.isDynamic()) {                                                                                      // 1332
            return param;                                                                                              // 1333
        }                                                                                                              // 1334
        var offset = totalOffset;                                                                                      // 1335
        totalOffset += param.dynamicPartLength();                                                                      // 1336
        return param.withOffset(offset);                                                                               // 1337
    });                                                                                                                // 1338
                                                                                                                       // 1339
    // encode everything!                                                                                              // 1340
    return offsetParams.reduce(function (result, param) {                                                              // 1341
        return result + param.dynamicPart();                                                                           // 1342
    }, offsetParams.reduce(function (result, param) {                                                                  // 1343
        return result + param.staticPart();                                                                            // 1344
    }, ''));                                                                                                           // 1345
};                                                                                                                     // 1346
                                                                                                                       // 1347
                                                                                                                       // 1348
                                                                                                                       // 1349
module.exports = SolidityParam;                                                                                        // 1350
                                                                                                                       // 1351
                                                                                                                       // 1352
},{"../utils/utils":20}],12:[function(require,module,exports){                                                         // 1353
var f = require('./formatters');                                                                                       // 1354
var SolidityType = require('./type');                                                                                  // 1355
                                                                                                                       // 1356
/**                                                                                                                    // 1357
 * SolidityTypeReal is a prootype that represents real type                                                            // 1358
 * It matches:                                                                                                         // 1359
 * real                                                                                                                // 1360
 * real[]                                                                                                              // 1361
 * real[4]                                                                                                             // 1362
 * real[][]                                                                                                            // 1363
 * real[3][]                                                                                                           // 1364
 * real[][6][], ...                                                                                                    // 1365
 * real32                                                                                                              // 1366
 * real64[]                                                                                                            // 1367
 * real8[4]                                                                                                            // 1368
 * real256[][]                                                                                                         // 1369
 * real[3][]                                                                                                           // 1370
 * real64[][6][], ...                                                                                                  // 1371
 */                                                                                                                    // 1372
var SolidityTypeReal = function () {                                                                                   // 1373
    this._inputFormatter = f.formatInputReal;                                                                          // 1374
    this._outputFormatter = f.formatOutputReal;                                                                        // 1375
};                                                                                                                     // 1376
                                                                                                                       // 1377
SolidityTypeReal.prototype = new SolidityType({});                                                                     // 1378
SolidityTypeReal.prototype.constructor = SolidityTypeReal;                                                             // 1379
                                                                                                                       // 1380
SolidityTypeReal.prototype.isType = function (name) {                                                                  // 1381
    return !!name.match(/real([0-9]*)?(\[([0-9]*)\])?/);                                                               // 1382
};                                                                                                                     // 1383
                                                                                                                       // 1384
SolidityTypeReal.prototype.staticPartLength = function (name) {                                                        // 1385
    return 32 * this.staticArrayLength(name);                                                                          // 1386
};                                                                                                                     // 1387
                                                                                                                       // 1388
module.exports = SolidityTypeReal;                                                                                     // 1389
                                                                                                                       // 1390
},{"./formatters":9,"./type":14}],13:[function(require,module,exports){                                                // 1391
var f = require('./formatters');                                                                                       // 1392
var SolidityType = require('./type');                                                                                  // 1393
                                                                                                                       // 1394
var SolidityTypeString = function () {                                                                                 // 1395
    this._inputFormatter = f.formatInputString;                                                                        // 1396
    this._outputFormatter = f.formatOutputString;                                                                      // 1397
};                                                                                                                     // 1398
                                                                                                                       // 1399
SolidityTypeString.prototype = new SolidityType({});                                                                   // 1400
SolidityTypeString.prototype.constructor = SolidityTypeString;                                                         // 1401
                                                                                                                       // 1402
SolidityTypeString.prototype.isType = function (name) {                                                                // 1403
    return !!name.match(/^string(\[([0-9]*)\])*$/);                                                                    // 1404
};                                                                                                                     // 1405
                                                                                                                       // 1406
SolidityTypeString.prototype.staticPartLength = function (name) {                                                      // 1407
    return 32 * this.staticArrayLength(name);                                                                          // 1408
};                                                                                                                     // 1409
                                                                                                                       // 1410
SolidityTypeString.prototype.isDynamicType = function () {                                                             // 1411
    return true;                                                                                                       // 1412
};                                                                                                                     // 1413
                                                                                                                       // 1414
module.exports = SolidityTypeString;                                                                                   // 1415
                                                                                                                       // 1416
                                                                                                                       // 1417
},{"./formatters":9,"./type":14}],14:[function(require,module,exports){                                                // 1418
var f = require('./formatters');                                                                                       // 1419
var SolidityParam = require('./param');                                                                                // 1420
                                                                                                                       // 1421
/**                                                                                                                    // 1422
 * SolidityType prototype is used to encode/decode solidity params of certain type                                     // 1423
 */                                                                                                                    // 1424
var SolidityType = function (config) {                                                                                 // 1425
    this._inputFormatter = config.inputFormatter;                                                                      // 1426
    this._outputFormatter = config.outputFormatter;                                                                    // 1427
};                                                                                                                     // 1428
                                                                                                                       // 1429
/**                                                                                                                    // 1430
 * Should be used to determine if this SolidityType do match given name                                                // 1431
 *                                                                                                                     // 1432
 * @method isType                                                                                                      // 1433
 * @param {String} name                                                                                                // 1434
 * @return {Bool} true if type match this SolidityType, otherwise false                                                // 1435
 */                                                                                                                    // 1436
SolidityType.prototype.isType = function (name) {                                                                      // 1437
    throw "this method should be overrwritten for type " + name;                                                       // 1438
};                                                                                                                     // 1439
                                                                                                                       // 1440
/**                                                                                                                    // 1441
 * Should be used to determine what is the length of static part in given type                                         // 1442
 *                                                                                                                     // 1443
 * @method staticPartLength                                                                                            // 1444
 * @param {String} name                                                                                                // 1445
 * @return {Number} length of static part in bytes                                                                     // 1446
 */                                                                                                                    // 1447
SolidityType.prototype.staticPartLength = function (name) {                                                            // 1448
    throw "this method should be overrwritten for type: " + name;                                                      // 1449
};                                                                                                                     // 1450
                                                                                                                       // 1451
/**                                                                                                                    // 1452
 * Should be used to determine if type is dynamic array                                                                // 1453
 * eg:                                                                                                                 // 1454
 * "type[]" => true                                                                                                    // 1455
 * "type[4]" => false                                                                                                  // 1456
 *                                                                                                                     // 1457
 * @method isDynamicArray                                                                                              // 1458
 * @param {String} name                                                                                                // 1459
 * @return {Bool} true if the type is dynamic array                                                                    // 1460
 */                                                                                                                    // 1461
SolidityType.prototype.isDynamicArray = function (name) {                                                              // 1462
    var nestedTypes = this.nestedTypes(name);                                                                          // 1463
    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                  // 1464
};                                                                                                                     // 1465
                                                                                                                       // 1466
/**                                                                                                                    // 1467
 * Should be used to determine if type is static array                                                                 // 1468
 * eg:                                                                                                                 // 1469
 * "type[]" => false                                                                                                   // 1470
 * "type[4]" => true                                                                                                   // 1471
 *                                                                                                                     // 1472
 * @method isStaticArray                                                                                               // 1473
 * @param {String} name                                                                                                // 1474
 * @return {Bool} true if the type is static array                                                                     // 1475
 */                                                                                                                    // 1476
SolidityType.prototype.isStaticArray = function (name) {                                                               // 1477
    var nestedTypes = this.nestedTypes(name);                                                                          // 1478
    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                 // 1479
};                                                                                                                     // 1480
                                                                                                                       // 1481
/**                                                                                                                    // 1482
 * Should return length of static array                                                                                // 1483
 * eg.                                                                                                                 // 1484
 * "int[32]" => 32                                                                                                     // 1485
 * "int256[14]" => 14                                                                                                  // 1486
 * "int[2][3]" => 3                                                                                                    // 1487
 * "int" => 1                                                                                                          // 1488
 * "int[1]" => 1                                                                                                       // 1489
 * "int[]" => 1                                                                                                        // 1490
 *                                                                                                                     // 1491
 * @method staticArrayLength                                                                                           // 1492
 * @param {String} name                                                                                                // 1493
 * @return {Number} static array length                                                                                // 1494
 */                                                                                                                    // 1495
SolidityType.prototype.staticArrayLength = function (name) {                                                           // 1496
    var nestedTypes = this.nestedTypes(name);                                                                          // 1497
    if (nestedTypes) {                                                                                                 // 1498
       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);                                  // 1499
    }                                                                                                                  // 1500
    return 1;                                                                                                          // 1501
};                                                                                                                     // 1502
                                                                                                                       // 1503
/**                                                                                                                    // 1504
 * Should return nested type                                                                                           // 1505
 * eg.                                                                                                                 // 1506
 * "int[32]" => "int"                                                                                                  // 1507
 * "int256[14]" => "int256"                                                                                            // 1508
 * "int[2][3]" => "int[2]"                                                                                             // 1509
 * "int" => "int"                                                                                                      // 1510
 * "int[]" => "int"                                                                                                    // 1511
 *                                                                                                                     // 1512
 * @method nestedName                                                                                                  // 1513
 * @param {String} name                                                                                                // 1514
 * @return {String} nested name                                                                                        // 1515
 */                                                                                                                    // 1516
SolidityType.prototype.nestedName = function (name) {                                                                  // 1517
    // remove last [] in name                                                                                          // 1518
    var nestedTypes = this.nestedTypes(name);                                                                          // 1519
    if (!nestedTypes) {                                                                                                // 1520
        return name;                                                                                                   // 1521
    }                                                                                                                  // 1522
                                                                                                                       // 1523
    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);                                   // 1524
};                                                                                                                     // 1525
                                                                                                                       // 1526
/**                                                                                                                    // 1527
 * Should return true if type has dynamic size by default                                                              // 1528
 * such types are "string", "bytes"                                                                                    // 1529
 *                                                                                                                     // 1530
 * @method isDynamicType                                                                                               // 1531
 * @param {String} name                                                                                                // 1532
 * @return {Bool} true if is dynamic, otherwise false                                                                  // 1533
 */                                                                                                                    // 1534
SolidityType.prototype.isDynamicType = function () {                                                                   // 1535
    return false;                                                                                                      // 1536
};                                                                                                                     // 1537
                                                                                                                       // 1538
/**                                                                                                                    // 1539
 * Should return array of nested types                                                                                 // 1540
 * eg.                                                                                                                 // 1541
 * "int[2][3][]" => ["[2]", "[3]", "[]"]                                                                               // 1542
 * "int[] => ["[]"]                                                                                                    // 1543
 * "int" => null                                                                                                       // 1544
 *                                                                                                                     // 1545
 * @method nestedTypes                                                                                                 // 1546
 * @param {String} name                                                                                                // 1547
 * @return {Array} array of nested types                                                                               // 1548
 */                                                                                                                    // 1549
SolidityType.prototype.nestedTypes = function (name) {                                                                 // 1550
    // return list of strings eg. "[]", "[3]", "[]", "[2]"                                                             // 1551
    return name.match(/(\[[0-9]*\])/g);                                                                                // 1552
};                                                                                                                     // 1553
                                                                                                                       // 1554
/**                                                                                                                    // 1555
 * Should be used to encode the value                                                                                  // 1556
 *                                                                                                                     // 1557
 * @method encode                                                                                                      // 1558
 * @param {Object} value                                                                                               // 1559
 * @param {String} name                                                                                                // 1560
 * @return {String} encoded value                                                                                      // 1561
 */                                                                                                                    // 1562
SolidityType.prototype.encode = function (value, name) {                                                               // 1563
    var self = this;                                                                                                   // 1564
    if (this.isDynamicArray(name)) {                                                                                   // 1565
                                                                                                                       // 1566
        return (function () {                                                                                          // 1567
            var length = value.length;                          // in int                                              // 1568
            var nestedName = self.nestedName(name);                                                                    // 1569
                                                                                                                       // 1570
            var result = [];                                                                                           // 1571
            result.push(f.formatInputInt(length).encode());                                                            // 1572
                                                                                                                       // 1573
            value.forEach(function (v) {                                                                               // 1574
                result.push(self.encode(v, nestedName));                                                               // 1575
            });                                                                                                        // 1576
                                                                                                                       // 1577
            return result;                                                                                             // 1578
        })();                                                                                                          // 1579
                                                                                                                       // 1580
    } else if (this.isStaticArray(name)) {                                                                             // 1581
                                                                                                                       // 1582
        return (function () {                                                                                          // 1583
            var length = self.staticArrayLength(name);          // in int                                              // 1584
            var nestedName = self.nestedName(name);                                                                    // 1585
                                                                                                                       // 1586
            var result = [];                                                                                           // 1587
            for (var i = 0; i < length; i++) {                                                                         // 1588
                result.push(self.encode(value[i], nestedName));                                                        // 1589
            }                                                                                                          // 1590
                                                                                                                       // 1591
            return result;                                                                                             // 1592
        })();                                                                                                          // 1593
                                                                                                                       // 1594
    }                                                                                                                  // 1595
                                                                                                                       // 1596
    return this._inputFormatter(value, name).encode();                                                                 // 1597
};                                                                                                                     // 1598
                                                                                                                       // 1599
/**                                                                                                                    // 1600
 * Should be used to decode value from bytes                                                                           // 1601
 *                                                                                                                     // 1602
 * @method decode                                                                                                      // 1603
 * @param {String} bytes                                                                                               // 1604
 * @param {Number} offset in bytes                                                                                     // 1605
 * @param {String} name type name                                                                                      // 1606
 * @returns {Object} decoded value                                                                                     // 1607
 */                                                                                                                    // 1608
SolidityType.prototype.decode = function (bytes, offset, name) {                                                       // 1609
    var self = this;                                                                                                   // 1610
                                                                                                                       // 1611
    if (this.isDynamicArray(name)) {                                                                                   // 1612
                                                                                                                       // 1613
        return (function () {                                                                                          // 1614
            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes                               // 1615
            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int                                 // 1616
            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes                               // 1617
                                                                                                                       // 1618
            var nestedName = self.nestedName(name);                                                                    // 1619
            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes                               // 1620
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1621
            var result = [];                                                                                           // 1622
                                                                                                                       // 1623
            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1624
                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1625
            }                                                                                                          // 1626
                                                                                                                       // 1627
            return result;                                                                                             // 1628
        })();                                                                                                          // 1629
                                                                                                                       // 1630
    } else if (this.isStaticArray(name)) {                                                                             // 1631
                                                                                                                       // 1632
        return (function () {                                                                                          // 1633
            var length = self.staticArrayLength(name);                      // in int                                  // 1634
            var arrayStart = offset;                                        // in bytes                                // 1635
                                                                                                                       // 1636
            var nestedName = self.nestedName(name);                                                                    // 1637
            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes                                // 1638
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1639
            var result = [];                                                                                           // 1640
                                                                                                                       // 1641
            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1642
                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1643
            }                                                                                                          // 1644
                                                                                                                       // 1645
            return result;                                                                                             // 1646
        })();                                                                                                          // 1647
    } else if (this.isDynamicType(name)) {                                                                             // 1648
                                                                                                                       // 1649
        return (function () {                                                                                          // 1650
            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes                        // 1651
            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes                        // 1652
            var roundedLength = Math.floor((length + 31) / 32);                     // in int                          // 1653
                                                                                                                       // 1654
            return self._outputFormatter(new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0));
        })();                                                                                                          // 1656
    }                                                                                                                  // 1657
                                                                                                                       // 1658
    var length = this.staticPartLength(name);                                                                          // 1659
    return this._outputFormatter(new SolidityParam(bytes.substr(offset * 2, length * 2)));                             // 1660
};                                                                                                                     // 1661
                                                                                                                       // 1662
module.exports = SolidityType;                                                                                         // 1663
                                                                                                                       // 1664
},{"./formatters":9,"./param":11}],15:[function(require,module,exports){                                               // 1665
var f = require('./formatters');                                                                                       // 1666
var SolidityType = require('./type');                                                                                  // 1667
                                                                                                                       // 1668
/**                                                                                                                    // 1669
 * SolidityTypeUInt is a prootype that represents uint type                                                            // 1670
 * It matches:                                                                                                         // 1671
 * uint                                                                                                                // 1672
 * uint[]                                                                                                              // 1673
 * uint[4]                                                                                                             // 1674
 * uint[][]                                                                                                            // 1675
 * uint[3][]                                                                                                           // 1676
 * uint[][6][], ...                                                                                                    // 1677
 * uint32                                                                                                              // 1678
 * uint64[]                                                                                                            // 1679
 * uint8[4]                                                                                                            // 1680
 * uint256[][]                                                                                                         // 1681
 * uint[3][]                                                                                                           // 1682
 * uint64[][6][], ...                                                                                                  // 1683
 */                                                                                                                    // 1684
var SolidityTypeUInt = function () {                                                                                   // 1685
    this._inputFormatter = f.formatInputInt;                                                                           // 1686
    this._outputFormatter = f.formatOutputUInt;                                                                        // 1687
};                                                                                                                     // 1688
                                                                                                                       // 1689
SolidityTypeUInt.prototype = new SolidityType({});                                                                     // 1690
SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;                                                             // 1691
                                                                                                                       // 1692
SolidityTypeUInt.prototype.isType = function (name) {                                                                  // 1693
    return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);                                                             // 1694
};                                                                                                                     // 1695
                                                                                                                       // 1696
SolidityTypeUInt.prototype.staticPartLength = function (name) {                                                        // 1697
    return 32 * this.staticArrayLength(name);                                                                          // 1698
};                                                                                                                     // 1699
                                                                                                                       // 1700
module.exports = SolidityTypeUInt;                                                                                     // 1701
                                                                                                                       // 1702
},{"./formatters":9,"./type":14}],16:[function(require,module,exports){                                                // 1703
var f = require('./formatters');                                                                                       // 1704
var SolidityType = require('./type');                                                                                  // 1705
                                                                                                                       // 1706
/**                                                                                                                    // 1707
 * SolidityTypeUReal is a prootype that represents ureal type                                                          // 1708
 * It matches:                                                                                                         // 1709
 * ureal                                                                                                               // 1710
 * ureal[]                                                                                                             // 1711
 * ureal[4]                                                                                                            // 1712
 * ureal[][]                                                                                                           // 1713
 * ureal[3][]                                                                                                          // 1714
 * ureal[][6][], ...                                                                                                   // 1715
 * ureal32                                                                                                             // 1716
 * ureal64[]                                                                                                           // 1717
 * ureal8[4]                                                                                                           // 1718
 * ureal256[][]                                                                                                        // 1719
 * ureal[3][]                                                                                                          // 1720
 * ureal64[][6][], ...                                                                                                 // 1721
 */                                                                                                                    // 1722
var SolidityTypeUReal = function () {                                                                                  // 1723
    this._inputFormatter = f.formatInputReal;                                                                          // 1724
    this._outputFormatter = f.formatOutputUReal;                                                                       // 1725
};                                                                                                                     // 1726
                                                                                                                       // 1727
SolidityTypeUReal.prototype = new SolidityType({});                                                                    // 1728
SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;                                                           // 1729
                                                                                                                       // 1730
SolidityTypeUReal.prototype.isType = function (name) {                                                                 // 1731
    return !!name.match(/^ureal([0-9]*)?(\[([0-9]*)\])*$/);                                                            // 1732
};                                                                                                                     // 1733
                                                                                                                       // 1734
SolidityTypeUReal.prototype.staticPartLength = function (name) {                                                       // 1735
    return 32 * this.staticArrayLength(name);                                                                          // 1736
};                                                                                                                     // 1737
                                                                                                                       // 1738
module.exports = SolidityTypeUReal;                                                                                    // 1739
                                                                                                                       // 1740
},{"./formatters":9,"./type":14}],17:[function(require,module,exports){                                                // 1741
'use strict';                                                                                                          // 1742
                                                                                                                       // 1743
// go env doesn't have and need XMLHttpRequest                                                                         // 1744
if (typeof XMLHttpRequest === 'undefined') {                                                                           // 1745
    exports.XMLHttpRequest = {};                                                                                       // 1746
} else {                                                                                                               // 1747
    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line                                                     // 1748
}                                                                                                                      // 1749
                                                                                                                       // 1750
                                                                                                                       // 1751
},{}],18:[function(require,module,exports){                                                                            // 1752
/*                                                                                                                     // 1753
    This file is part of web3.js.                                                                                      // 1754
                                                                                                                       // 1755
    web3.js is free software: you can redistribute it and/or modify                                                    // 1756
    it under the terms of the GNU Lesser General Public License as published by                                        // 1757
    the Free Software Foundation, either version 3 of the License, or                                                  // 1758
    (at your option) any later version.                                                                                // 1759
                                                                                                                       // 1760
    web3.js is distributed in the hope that it will be useful,                                                         // 1761
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1762
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1763
    GNU Lesser General Public License for more details.                                                                // 1764
                                                                                                                       // 1765
    You should have received a copy of the GNU Lesser General Public License                                           // 1766
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1767
*/                                                                                                                     // 1768
/** @file config.js                                                                                                    // 1769
 * @authors:                                                                                                           // 1770
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 1771
 * @date 2015                                                                                                          // 1772
 */                                                                                                                    // 1773
                                                                                                                       // 1774
/**                                                                                                                    // 1775
 * Utils                                                                                                               // 1776
 *                                                                                                                     // 1777
 * @module utils                                                                                                       // 1778
 */                                                                                                                    // 1779
                                                                                                                       // 1780
/**                                                                                                                    // 1781
 * Utility functions                                                                                                   // 1782
 *                                                                                                                     // 1783
 * @class [utils] config                                                                                               // 1784
 * @constructor                                                                                                        // 1785
 */                                                                                                                    // 1786
                                                                                                                       // 1787
                                                                                                                       // 1788
/// required to define ETH_BIGNUMBER_ROUNDING_MODE                                                                     // 1789
var BigNumber = require('bignumber.js');                                                                               // 1790
                                                                                                                       // 1791
var ETH_UNITS = [                                                                                                      // 1792
    'wei',                                                                                                             // 1793
    'kwei',                                                                                                            // 1794
    'Mwei',                                                                                                            // 1795
    'Gwei',                                                                                                            // 1796
    'szabo',                                                                                                           // 1797
    'finney',                                                                                                          // 1798
    'femtoether',                                                                                                      // 1799
    'picoether',                                                                                                       // 1800
    'nanoether',                                                                                                       // 1801
    'microether',                                                                                                      // 1802
    'milliether',                                                                                                      // 1803
    'nano',                                                                                                            // 1804
    'micro',                                                                                                           // 1805
    'milli',                                                                                                           // 1806
    'ether',                                                                                                           // 1807
    'grand',                                                                                                           // 1808
    'Mether',                                                                                                          // 1809
    'Gether',                                                                                                          // 1810
    'Tether',                                                                                                          // 1811
    'Pether',                                                                                                          // 1812
    'Eether',                                                                                                          // 1813
    'Zether',                                                                                                          // 1814
    'Yether',                                                                                                          // 1815
    'Nether',                                                                                                          // 1816
    'Dether',                                                                                                          // 1817
    'Vether',                                                                                                          // 1818
    'Uether'                                                                                                           // 1819
];                                                                                                                     // 1820
                                                                                                                       // 1821
module.exports = {                                                                                                     // 1822
    ETH_PADDING: 32,                                                                                                   // 1823
    ETH_SIGNATURE_LENGTH: 4,                                                                                           // 1824
    ETH_UNITS: ETH_UNITS,                                                                                              // 1825
    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },                                              // 1826
    ETH_POLLING_TIMEOUT: 1000/2,                                                                                       // 1827
    defaultBlock: 'latest',                                                                                            // 1828
    defaultAccount: undefined                                                                                          // 1829
};                                                                                                                     // 1830
                                                                                                                       // 1831
                                                                                                                       // 1832
},{"bignumber.js":"bignumber.js"}],19:[function(require,module,exports){                                               // 1833
/*                                                                                                                     // 1834
    This file is part of web3.js.                                                                                      // 1835
                                                                                                                       // 1836
    web3.js is free software: you can redistribute it and/or modify                                                    // 1837
    it under the terms of the GNU Lesser General Public License as published by                                        // 1838
    the Free Software Foundation, either version 3 of the License, or                                                  // 1839
    (at your option) any later version.                                                                                // 1840
                                                                                                                       // 1841
    web3.js is distributed in the hope that it will be useful,                                                         // 1842
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1843
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1844
    GNU Lesser General Public License for more details.                                                                // 1845
                                                                                                                       // 1846
    You should have received a copy of the GNU Lesser General Public License                                           // 1847
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1848
*/                                                                                                                     // 1849
/**                                                                                                                    // 1850
 * @file sha3.js                                                                                                       // 1851
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1852
 * @date 2015                                                                                                          // 1853
 */                                                                                                                    // 1854
                                                                                                                       // 1855
var CryptoJS = require('crypto-js');                                                                                   // 1856
var sha3 = require('crypto-js/sha3');                                                                                  // 1857
                                                                                                                       // 1858
module.exports = function (value, options) {                                                                           // 1859
    if (options && options.encoding === 'hex') {                                                                       // 1860
        if (value.length > 2 && value.substr(0, 2) === '0x') {                                                         // 1861
            value = value.substr(2);                                                                                   // 1862
        }                                                                                                              // 1863
        value = CryptoJS.enc.Hex.parse(value);                                                                         // 1864
    }                                                                                                                  // 1865
                                                                                                                       // 1866
    return sha3(value, {                                                                                               // 1867
        outputLength: 256                                                                                              // 1868
    }).toString();                                                                                                     // 1869
};                                                                                                                     // 1870
                                                                                                                       // 1871
                                                                                                                       // 1872
},{"crypto-js":57,"crypto-js/sha3":78}],20:[function(require,module,exports){                                          // 1873
/*                                                                                                                     // 1874
    This file is part of web3.js.                                                                                      // 1875
                                                                                                                       // 1876
    web3.js is free software: you can redistribute it and/or modify                                                    // 1877
    it under the terms of the GNU Lesser General Public License as published by                                        // 1878
    the Free Software Foundation, either version 3 of the License, or                                                  // 1879
    (at your option) any later version.                                                                                // 1880
                                                                                                                       // 1881
    web3.js is distributed in the hope that it will be useful,                                                         // 1882
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1883
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1884
    GNU Lesser General Public License for more details.                                                                // 1885
                                                                                                                       // 1886
    You should have received a copy of the GNU Lesser General Public License                                           // 1887
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1888
*/                                                                                                                     // 1889
/**                                                                                                                    // 1890
 * @file utils.js                                                                                                      // 1891
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1892
 * @date 2015                                                                                                          // 1893
 */                                                                                                                    // 1894
                                                                                                                       // 1895
/**                                                                                                                    // 1896
 * Utils                                                                                                               // 1897
 *                                                                                                                     // 1898
 * @module utils                                                                                                       // 1899
 */                                                                                                                    // 1900
                                                                                                                       // 1901
/**                                                                                                                    // 1902
 * Utility functions                                                                                                   // 1903
 *                                                                                                                     // 1904
 * @class [utils] utils                                                                                                // 1905
 * @constructor                                                                                                        // 1906
 */                                                                                                                    // 1907
                                                                                                                       // 1908
                                                                                                                       // 1909
var BigNumber = require('bignumber.js');                                                                               // 1910
var utf8 = require('utf8');                                                                                            // 1911
                                                                                                                       // 1912
var unitMap = {                                                                                                        // 1913
    'wei':          '1',                                                                                               // 1914
    'kwei':         '1000',                                                                                            // 1915
    'ada':          '1000',                                                                                            // 1916
    'femtoether':   '1000',                                                                                            // 1917
    'mwei':         '1000000',                                                                                         // 1918
    'babbage':      '1000000',                                                                                         // 1919
    'picoether':    '1000000',                                                                                         // 1920
    'gwei':         '1000000000',                                                                                      // 1921
    'shannon':      '1000000000',                                                                                      // 1922
    'nanoether':    '1000000000',                                                                                      // 1923
    'nano':         '1000000000',                                                                                      // 1924
    'szabo':        '1000000000000',                                                                                   // 1925
    'microether':   '1000000000000',                                                                                   // 1926
    'micro':        '1000000000000',                                                                                   // 1927
    'finney':       '1000000000000000',                                                                                // 1928
    'milliether':    '1000000000000000',                                                                               // 1929
    'milli':         '1000000000000000',                                                                               // 1930
    'ether':        '1000000000000000000',                                                                             // 1931
    'kether':       '1000000000000000000000',                                                                          // 1932
    'grand':        '1000000000000000000000',                                                                          // 1933
    'einstein':     '1000000000000000000000',                                                                          // 1934
    'mether':       '1000000000000000000000000',                                                                       // 1935
    'gether':       '1000000000000000000000000000',                                                                    // 1936
    'tether':       '1000000000000000000000000000000'                                                                  // 1937
};                                                                                                                     // 1938
                                                                                                                       // 1939
/**                                                                                                                    // 1940
 * Should be called to pad string to expected length                                                                   // 1941
 *                                                                                                                     // 1942
 * @method padLeft                                                                                                     // 1943
 * @param {String} string to be padded                                                                                 // 1944
 * @param {Number} characters that result string should have                                                           // 1945
 * @param {String} sign, by default 0                                                                                  // 1946
 * @returns {String} right aligned string                                                                              // 1947
 */                                                                                                                    // 1948
var padLeft = function (string, chars, sign) {                                                                         // 1949
    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;                                      // 1950
};                                                                                                                     // 1951
                                                                                                                       // 1952
/**                                                                                                                    // 1953
 * Should be called to pad string to expected length                                                                   // 1954
 *                                                                                                                     // 1955
 * @method padRight                                                                                                    // 1956
 * @param {String} string to be padded                                                                                 // 1957
 * @param {Number} characters that result string should have                                                           // 1958
 * @param {String} sign, by default 0                                                                                  // 1959
 * @returns {String} right aligned string                                                                              // 1960
 */                                                                                                                    // 1961
var padRight = function (string, chars, sign) {                                                                        // 1962
    return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));                                    // 1963
};                                                                                                                     // 1964
                                                                                                                       // 1965
/**                                                                                                                    // 1966
 * Should be called to get utf8 from it's hex representation                                                           // 1967
 *                                                                                                                     // 1968
 * @method toUtf8                                                                                                      // 1969
 * @param {String} string in hex                                                                                       // 1970
 * @returns {String} ascii string representation of hex value                                                          // 1971
 */                                                                                                                    // 1972
var toUtf8 = function(hex) {                                                                                           // 1973
// Find termination                                                                                                    // 1974
    var str = "";                                                                                                      // 1975
    var i = 0, l = hex.length;                                                                                         // 1976
    if (hex.substring(0, 2) === '0x') {                                                                                // 1977
        i = 2;                                                                                                         // 1978
    }                                                                                                                  // 1979
    for (; i < l; i+=2) {                                                                                              // 1980
        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 1981
        if (code === 0)                                                                                                // 1982
            break;                                                                                                     // 1983
        str += String.fromCharCode(code);                                                                              // 1984
    }                                                                                                                  // 1985
                                                                                                                       // 1986
    return utf8.decode(str);                                                                                           // 1987
};                                                                                                                     // 1988
                                                                                                                       // 1989
/**                                                                                                                    // 1990
 * Should be called to get ascii from it's hex representation                                                          // 1991
 *                                                                                                                     // 1992
 * @method toAscii                                                                                                     // 1993
 * @param {String} string in hex                                                                                       // 1994
 * @returns {String} ascii string representation of hex value                                                          // 1995
 */                                                                                                                    // 1996
var toAscii = function(hex) {                                                                                          // 1997
// Find termination                                                                                                    // 1998
    var str = "";                                                                                                      // 1999
    var i = 0, l = hex.length;                                                                                         // 2000
    if (hex.substring(0, 2) === '0x') {                                                                                // 2001
        i = 2;                                                                                                         // 2002
    }                                                                                                                  // 2003
    for (; i < l; i+=2) {                                                                                              // 2004
        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 2005
        str += String.fromCharCode(code);                                                                              // 2006
    }                                                                                                                  // 2007
                                                                                                                       // 2008
    return str;                                                                                                        // 2009
};                                                                                                                     // 2010
                                                                                                                       // 2011
/**                                                                                                                    // 2012
 * Should be called to get hex representation (prefixed by 0x) of utf8 string                                          // 2013
 *                                                                                                                     // 2014
 * @method fromUtf8                                                                                                    // 2015
 * @param {String} string                                                                                              // 2016
 * @param {Number} optional padding                                                                                    // 2017
 * @returns {String} hex representation of input string                                                                // 2018
 */                                                                                                                    // 2019
var fromUtf8 = function(str) {                                                                                         // 2020
    str = utf8.encode(str);                                                                                            // 2021
    var hex = "";                                                                                                      // 2022
    for(var i = 0; i < str.length; i++) {                                                                              // 2023
        var code = str.charCodeAt(i);                                                                                  // 2024
        if (code === 0)                                                                                                // 2025
            break;                                                                                                     // 2026
        var n = code.toString(16);                                                                                     // 2027
        hex += n.length < 2 ? '0' + n : n;                                                                             // 2028
    }                                                                                                                  // 2029
                                                                                                                       // 2030
    return "0x" + hex;                                                                                                 // 2031
};                                                                                                                     // 2032
                                                                                                                       // 2033
/**                                                                                                                    // 2034
 * Should be called to get hex representation (prefixed by 0x) of ascii string                                         // 2035
 *                                                                                                                     // 2036
 * @method fromAscii                                                                                                   // 2037
 * @param {String} string                                                                                              // 2038
 * @param {Number} optional padding                                                                                    // 2039
 * @returns {String} hex representation of input string                                                                // 2040
 */                                                                                                                    // 2041
var fromAscii = function(str) {                                                                                        // 2042
    var hex = "";                                                                                                      // 2043
    for(var i = 0; i < str.length; i++) {                                                                              // 2044
        var code = str.charCodeAt(i);                                                                                  // 2045
        var n = code.toString(16);                                                                                     // 2046
        hex += n.length < 2 ? '0' + n : n;                                                                             // 2047
    }                                                                                                                  // 2048
                                                                                                                       // 2049
    return "0x" + hex;                                                                                                 // 2050
};                                                                                                                     // 2051
                                                                                                                       // 2052
/**                                                                                                                    // 2053
 * Should be used to create full function/event name from json abi                                                     // 2054
 *                                                                                                                     // 2055
 * @method transformToFullName                                                                                         // 2056
 * @param {Object} json-abi                                                                                            // 2057
 * @return {String} full fnction/event name                                                                            // 2058
 */                                                                                                                    // 2059
var transformToFullName = function (json) {                                                                            // 2060
    if (json.name.indexOf('(') !== -1) {                                                                               // 2061
        return json.name;                                                                                              // 2062
    }                                                                                                                  // 2063
                                                                                                                       // 2064
    var typeName = json.inputs.map(function(i){return i.type; }).join();                                               // 2065
    return json.name + '(' + typeName + ')';                                                                           // 2066
};                                                                                                                     // 2067
                                                                                                                       // 2068
/**                                                                                                                    // 2069
 * Should be called to get display name of contract function                                                           // 2070
 *                                                                                                                     // 2071
 * @method extractDisplayName                                                                                          // 2072
 * @param {String} name of function/event                                                                              // 2073
 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply                                 // 2074
 */                                                                                                                    // 2075
var extractDisplayName = function (name) {                                                                             // 2076
    var length = name.indexOf('(');                                                                                    // 2077
    return length !== -1 ? name.substr(0, length) : name;                                                              // 2078
};                                                                                                                     // 2079
                                                                                                                       // 2080
/// @returns overloaded part of function/event name                                                                    // 2081
var extractTypeName = function (name) {                                                                                // 2082
    /// TODO: make it invulnerable                                                                                     // 2083
    var length = name.indexOf('(');                                                                                    // 2084
    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : "";              // 2085
};                                                                                                                     // 2086
                                                                                                                       // 2087
/**                                                                                                                    // 2088
 * Converts value to it's decimal representation in string                                                             // 2089
 *                                                                                                                     // 2090
 * @method toDecimal                                                                                                   // 2091
 * @param {String|Number|BigNumber}                                                                                    // 2092
 * @return {String}                                                                                                    // 2093
 */                                                                                                                    // 2094
var toDecimal = function (value) {                                                                                     // 2095
    return toBigNumber(value).toNumber();                                                                              // 2096
};                                                                                                                     // 2097
                                                                                                                       // 2098
/**                                                                                                                    // 2099
 * Converts value to it's hex representation                                                                           // 2100
 *                                                                                                                     // 2101
 * @method fromDecimal                                                                                                 // 2102
 * @param {String|Number|BigNumber}                                                                                    // 2103
 * @return {String}                                                                                                    // 2104
 */                                                                                                                    // 2105
var fromDecimal = function (value) {                                                                                   // 2106
    var number = toBigNumber(value);                                                                                   // 2107
    var result = number.toString(16);                                                                                  // 2108
                                                                                                                       // 2109
    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;                                              // 2110
};                                                                                                                     // 2111
                                                                                                                       // 2112
/**                                                                                                                    // 2113
 * Auto converts any given value into it's hex representation.                                                         // 2114
 *                                                                                                                     // 2115
 * And even stringifys objects before.                                                                                 // 2116
 *                                                                                                                     // 2117
 * @method toHex                                                                                                       // 2118
 * @param {String|Number|BigNumber|Object}                                                                             // 2119
 * @return {String}                                                                                                    // 2120
 */                                                                                                                    // 2121
var toHex = function (val) {                                                                                           // 2122
    /*jshint maxcomplexity: 8 */                                                                                       // 2123
                                                                                                                       // 2124
    if (isBoolean(val))                                                                                                // 2125
        return fromDecimal(+val);                                                                                      // 2126
                                                                                                                       // 2127
    if (isBigNumber(val))                                                                                              // 2128
        return fromDecimal(val);                                                                                       // 2129
                                                                                                                       // 2130
    if (isObject(val))                                                                                                 // 2131
        return fromUtf8(JSON.stringify(val));                                                                          // 2132
                                                                                                                       // 2133
    // if its a negative number, pass it through fromDecimal                                                           // 2134
    if (isString(val)) {                                                                                               // 2135
        if (val.indexOf('-0x') === 0)                                                                                  // 2136
            return fromDecimal(val);                                                                                   // 2137
        else if(val.indexOf('0x') === 0)                                                                               // 2138
            return val;                                                                                                // 2139
        else if (!isFinite(val))                                                                                       // 2140
            return fromAscii(val);                                                                                     // 2141
    }                                                                                                                  // 2142
                                                                                                                       // 2143
    return fromDecimal(val);                                                                                           // 2144
};                                                                                                                     // 2145
                                                                                                                       // 2146
/**                                                                                                                    // 2147
 * Returns value of unit in Wei                                                                                        // 2148
 *                                                                                                                     // 2149
 * @method getValueOfUnit                                                                                              // 2150
 * @param {String} unit the unit to convert to, default ether                                                          // 2151
 * @returns {BigNumber} value of the unit (in Wei)                                                                     // 2152
 * @throws error if the unit is not correct:w                                                                          // 2153
 */                                                                                                                    // 2154
var getValueOfUnit = function (unit) {                                                                                 // 2155
    unit = unit ? unit.toLowerCase() : 'ether';                                                                        // 2156
    var unitValue = unitMap[unit];                                                                                     // 2157
    if (unitValue === undefined) {                                                                                     // 2158
        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
    }                                                                                                                  // 2160
    return new BigNumber(unitValue, 10);                                                                               // 2161
};                                                                                                                     // 2162
                                                                                                                       // 2163
/**                                                                                                                    // 2164
 * Takes a number of wei and converts it to any other ether unit.                                                      // 2165
 *                                                                                                                     // 2166
 * Possible units are:                                                                                                 // 2167
 *   SI Short   SI Full        Effigy       Other                                                                      // 2168
 * - kwei       femtoether     ada                                                                                     // 2169
 * - mwei       picoether      babbage                                                                                 // 2170
 * - gwei       nanoether      shannon      nano                                                                       // 2171
 * - --         microether     szabo        micro                                                                      // 2172
 * - --         milliether     finney       milli                                                                      // 2173
 * - ether      --             --                                                                                      // 2174
 * - kether                    einstein     grand                                                                      // 2175
 * - mether                                                                                                            // 2176
 * - gether                                                                                                            // 2177
 * - tether                                                                                                            // 2178
 *                                                                                                                     // 2179
 * @method fromWei                                                                                                     // 2180
 * @param {Number|String} number can be a number, number string or a HEX of a decimal                                  // 2181
 * @param {String} unit the unit to convert to, default ether                                                          // 2182
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2183
*/                                                                                                                     // 2184
var fromWei = function(number, unit) {                                                                                 // 2185
    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));                                             // 2186
                                                                                                                       // 2187
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2188
};                                                                                                                     // 2189
                                                                                                                       // 2190
/**                                                                                                                    // 2191
 * Takes a number of a unit and converts it to wei.                                                                    // 2192
 *                                                                                                                     // 2193
 * Possible units are:                                                                                                 // 2194
 *   SI Short   SI Full        Effigy       Other                                                                      // 2195
 * - kwei       femtoether     ada                                                                                     // 2196
 * - mwei       picoether      babbage                                                                                 // 2197
 * - gwei       nanoether      shannon      nano                                                                       // 2198
 * - --         microether     szabo        micro                                                                      // 2199
 * - --         milliether     finney       milli                                                                      // 2200
 * - ether      --             --                                                                                      // 2201
 * - kether                    einstein     grand                                                                      // 2202
 * - mether                                                                                                            // 2203
 * - gether                                                                                                            // 2204
 * - tether                                                                                                            // 2205
 *                                                                                                                     // 2206
 * @method toWei                                                                                                       // 2207
 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal                        // 2208
 * @param {String} unit the unit to convert from, default ether                                                        // 2209
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2210
*/                                                                                                                     // 2211
var toWei = function(number, unit) {                                                                                   // 2212
    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));                                                 // 2213
                                                                                                                       // 2214
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2215
};                                                                                                                     // 2216
                                                                                                                       // 2217
/**                                                                                                                    // 2218
 * Takes an input and transforms it into an bignumber                                                                  // 2219
 *                                                                                                                     // 2220
 * @method toBigNumber                                                                                                 // 2221
 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber                                          // 2222
 * @return {BigNumber} BigNumber                                                                                       // 2223
*/                                                                                                                     // 2224
var toBigNumber = function(number) {                                                                                   // 2225
    /*jshint maxcomplexity:5 */                                                                                        // 2226
    number = number || 0;                                                                                              // 2227
    if (isBigNumber(number))                                                                                           // 2228
        return number;                                                                                                 // 2229
                                                                                                                       // 2230
    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {                             // 2231
        return new BigNumber(number.replace('0x',''), 16);                                                             // 2232
    }                                                                                                                  // 2233
                                                                                                                       // 2234
    return new BigNumber(number.toString(10), 10);                                                                     // 2235
};                                                                                                                     // 2236
                                                                                                                       // 2237
/**                                                                                                                    // 2238
 * Takes and input transforms it into bignumber and if it is negative value, into two's complement                     // 2239
 *                                                                                                                     // 2240
 * @method toTwosComplement                                                                                            // 2241
 * @param {Number|String|BigNumber}                                                                                    // 2242
 * @return {BigNumber}                                                                                                 // 2243
 */                                                                                                                    // 2244
var toTwosComplement = function (number) {                                                                             // 2245
    var bigNumber = toBigNumber(number);                                                                               // 2246
    if (bigNumber.lessThan(0)) {                                                                                       // 2247
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
    }                                                                                                                  // 2249
    return bigNumber;                                                                                                  // 2250
};                                                                                                                     // 2251
                                                                                                                       // 2252
/**                                                                                                                    // 2253
 * Checks if the given string is strictly an address                                                                   // 2254
 *                                                                                                                     // 2255
 * @method isStrictAddress                                                                                             // 2256
 * @param {String} address the given HEX adress                                                                        // 2257
 * @return {Boolean}                                                                                                   // 2258
*/                                                                                                                     // 2259
var isStrictAddress = function (address) {                                                                             // 2260
    return /^0x[0-9a-f]{40}$/i.test(address);                                                                          // 2261
};                                                                                                                     // 2262
                                                                                                                       // 2263
/**                                                                                                                    // 2264
 * Checks if the given string is an address                                                                            // 2265
 *                                                                                                                     // 2266
 * @method isAddress                                                                                                   // 2267
 * @param {String} address the given HEX adress                                                                        // 2268
 * @return {Boolean}                                                                                                   // 2269
*/                                                                                                                     // 2270
var isAddress = function (address) {                                                                                   // 2271
    return /^(0x)?[0-9a-f]{40}$/i.test(address);                                                                       // 2272
};                                                                                                                     // 2273
                                                                                                                       // 2274
/**                                                                                                                    // 2275
 * Transforms given string to valid 20 bytes-length addres with 0x prefix                                              // 2276
 *                                                                                                                     // 2277
 * @method toAddress                                                                                                   // 2278
 * @param {String} address                                                                                             // 2279
 * @return {String} formatted address                                                                                  // 2280
 */                                                                                                                    // 2281
var toAddress = function (address) {                                                                                   // 2282
    if (isStrictAddress(address)) {                                                                                    // 2283
        return address;                                                                                                // 2284
    }                                                                                                                  // 2285
                                                                                                                       // 2286
    if (/^[0-9a-f]{40}$/.test(address)) {                                                                              // 2287
        return '0x' + address;                                                                                         // 2288
    }                                                                                                                  // 2289
                                                                                                                       // 2290
    return '0x' + padLeft(toHex(address).substr(2), 40);                                                               // 2291
};                                                                                                                     // 2292
                                                                                                                       // 2293
/**                                                                                                                    // 2294
 * Returns true if object is BigNumber, otherwise false                                                                // 2295
 *                                                                                                                     // 2296
 * @method isBigNumber                                                                                                 // 2297
 * @param {Object}                                                                                                     // 2298
 * @return {Boolean}                                                                                                   // 2299
 */                                                                                                                    // 2300
var isBigNumber = function (object) {                                                                                  // 2301
    return object instanceof BigNumber ||                                                                              // 2302
        (object && object.constructor && object.constructor.name === 'BigNumber');                                     // 2303
};                                                                                                                     // 2304
                                                                                                                       // 2305
/**                                                                                                                    // 2306
 * Returns true if object is string, otherwise false                                                                   // 2307
 *                                                                                                                     // 2308
 * @method isString                                                                                                    // 2309
 * @param {Object}                                                                                                     // 2310
 * @return {Boolean}                                                                                                   // 2311
 */                                                                                                                    // 2312
var isString = function (object) {                                                                                     // 2313
    return typeof object === 'string' ||                                                                               // 2314
        (object && object.constructor && object.constructor.name === 'String');                                        // 2315
};                                                                                                                     // 2316
                                                                                                                       // 2317
/**                                                                                                                    // 2318
 * Returns true if object is function, otherwise false                                                                 // 2319
 *                                                                                                                     // 2320
 * @method isFunction                                                                                                  // 2321
 * @param {Object}                                                                                                     // 2322
 * @return {Boolean}                                                                                                   // 2323
 */                                                                                                                    // 2324
var isFunction = function (object) {                                                                                   // 2325
    return typeof object === 'function';                                                                               // 2326
};                                                                                                                     // 2327
                                                                                                                       // 2328
/**                                                                                                                    // 2329
 * Returns true if object is Objet, otherwise false                                                                    // 2330
 *                                                                                                                     // 2331
 * @method isObject                                                                                                    // 2332
 * @param {Object}                                                                                                     // 2333
 * @return {Boolean}                                                                                                   // 2334
 */                                                                                                                    // 2335
var isObject = function (object) {                                                                                     // 2336
    return typeof object === 'object';                                                                                 // 2337
};                                                                                                                     // 2338
                                                                                                                       // 2339
/**                                                                                                                    // 2340
 * Returns true if object is boolean, otherwise false                                                                  // 2341
 *                                                                                                                     // 2342
 * @method isBoolean                                                                                                   // 2343
 * @param {Object}                                                                                                     // 2344
 * @return {Boolean}                                                                                                   // 2345
 */                                                                                                                    // 2346
var isBoolean = function (object) {                                                                                    // 2347
    return typeof object === 'boolean';                                                                                // 2348
};                                                                                                                     // 2349
                                                                                                                       // 2350
/**                                                                                                                    // 2351
 * Returns true if object is array, otherwise false                                                                    // 2352
 *                                                                                                                     // 2353
 * @method isArray                                                                                                     // 2354
 * @param {Object}                                                                                                     // 2355
 * @return {Boolean}                                                                                                   // 2356
 */                                                                                                                    // 2357
var isArray = function (object) {                                                                                      // 2358
    return object instanceof Array;                                                                                    // 2359
};                                                                                                                     // 2360
                                                                                                                       // 2361
/**                                                                                                                    // 2362
 * Returns true if given string is valid json object                                                                   // 2363
 *                                                                                                                     // 2364
 * @method isJson                                                                                                      // 2365
 * @param {String}                                                                                                     // 2366
 * @return {Boolean}                                                                                                   // 2367
 */                                                                                                                    // 2368
var isJson = function (str) {                                                                                          // 2369
    try {                                                                                                              // 2370
        return !!JSON.parse(str);                                                                                      // 2371
    } catch (e) {                                                                                                      // 2372
        return false;                                                                                                  // 2373
    }                                                                                                                  // 2374
};                                                                                                                     // 2375
                                                                                                                       // 2376
module.exports = {                                                                                                     // 2377
    padLeft: padLeft,                                                                                                  // 2378
    padRight: padRight,                                                                                                // 2379
    toHex: toHex,                                                                                                      // 2380
    toDecimal: toDecimal,                                                                                              // 2381
    fromDecimal: fromDecimal,                                                                                          // 2382
    toUtf8: toUtf8,                                                                                                    // 2383
    toAscii: toAscii,                                                                                                  // 2384
    fromUtf8: fromUtf8,                                                                                                // 2385
    fromAscii: fromAscii,                                                                                              // 2386
    transformToFullName: transformToFullName,                                                                          // 2387
    extractDisplayName: extractDisplayName,                                                                            // 2388
    extractTypeName: extractTypeName,                                                                                  // 2389
    toWei: toWei,                                                                                                      // 2390
    fromWei: fromWei,                                                                                                  // 2391
    toBigNumber: toBigNumber,                                                                                          // 2392
    toTwosComplement: toTwosComplement,                                                                                // 2393
    toAddress: toAddress,                                                                                              // 2394
    isBigNumber: isBigNumber,                                                                                          // 2395
    isStrictAddress: isStrictAddress,                                                                                  // 2396
    isAddress: isAddress,                                                                                              // 2397
    isFunction: isFunction,                                                                                            // 2398
    isString: isString,                                                                                                // 2399
    isObject: isObject,                                                                                                // 2400
    isBoolean: isBoolean,                                                                                              // 2401
    isArray: isArray,                                                                                                  // 2402
    isJson: isJson                                                                                                     // 2403
};                                                                                                                     // 2404
                                                                                                                       // 2405
},{"bignumber.js":"bignumber.js","utf8":83}],21:[function(require,module,exports){                                     // 2406
module.exports={                                                                                                       // 2407
    "version": "0.15.1"                                                                                                // 2408
}                                                                                                                      // 2409
                                                                                                                       // 2410
},{}],22:[function(require,module,exports){                                                                            // 2411
/*                                                                                                                     // 2412
    This file is part of web3.js.                                                                                      // 2413
                                                                                                                       // 2414
    web3.js is free software: you can redistribute it and/or modify                                                    // 2415
    it under the terms of the GNU Lesser General Public License as published by                                        // 2416
    the Free Software Foundation, either version 3 of the License, or                                                  // 2417
    (at your option) any later version.                                                                                // 2418
                                                                                                                       // 2419
    web3.js is distributed in the hope that it will be useful,                                                         // 2420
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2421
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2422
    GNU Lesser General Public License for more details.                                                                // 2423
                                                                                                                       // 2424
    You should have received a copy of the GNU Lesser General Public License                                           // 2425
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2426
*/                                                                                                                     // 2427
/**                                                                                                                    // 2428
 * @file web3.js                                                                                                       // 2429
 * @authors:                                                                                                           // 2430
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 2431
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 2432
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 2433
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 2434
 *   Gav Wood <g@ethdev.com>                                                                                           // 2435
 * @date 2014                                                                                                          // 2436
 */                                                                                                                    // 2437
                                                                                                                       // 2438
var RequestManager = require('./web3/requestmanager');                                                                 // 2439
var Iban = require('./web3/iban');                                                                                     // 2440
var Eth = require('./web3/methods/eth');                                                                               // 2441
var DB = require('./web3/methods/db');                                                                                 // 2442
var Shh = require('./web3/methods/shh');                                                                               // 2443
var Net = require('./web3/methods/net');                                                                               // 2444
var Settings = require('./web3/settings');                                                                             // 2445
var version = require('./version.json');                                                                               // 2446
var utils = require('./utils/utils');                                                                                  // 2447
var sha3 = require('./utils/sha3');                                                                                    // 2448
var extend = require('./web3/extend');                                                                                 // 2449
var Batch = require('./web3/batch');                                                                                   // 2450
var Property = require('./web3/property');                                                                             // 2451
var HttpProvider = require('./web3/httpprovider');                                                                     // 2452
var IpcProvider = require('./web3/ipcprovider');                                                                       // 2453
                                                                                                                       // 2454
                                                                                                                       // 2455
                                                                                                                       // 2456
function Web3 (provider) {                                                                                             // 2457
    this._requestManager = new RequestManager(provider);                                                               // 2458
    this.currentProvider = provider;                                                                                   // 2459
    this.eth = new Eth(this);                                                                                          // 2460
    this.db = new DB(this);                                                                                            // 2461
    this.shh = new Shh(this);                                                                                          // 2462
    this.net = new Net(this);                                                                                          // 2463
    this.settings = new Settings();                                                                                    // 2464
    this.version = {                                                                                                   // 2465
        api: version.version                                                                                           // 2466
    };                                                                                                                 // 2467
    this.providers = {                                                                                                 // 2468
        HttpProvider: HttpProvider,                                                                                    // 2469
        IpcProvider: IpcProvider                                                                                       // 2470
    };                                                                                                                 // 2471
    this._extend = extend(this);                                                                                       // 2472
    this._extend({                                                                                                     // 2473
        properties: properties()                                                                                       // 2474
    });                                                                                                                // 2475
}                                                                                                                      // 2476
                                                                                                                       // 2477
// expose providers on the class                                                                                       // 2478
Web3.providers = {                                                                                                     // 2479
    HttpProvider: HttpProvider,                                                                                        // 2480
    IpcProvider: IpcProvider                                                                                           // 2481
};                                                                                                                     // 2482
                                                                                                                       // 2483
Web3.prototype.setProvider = function (provider) {                                                                     // 2484
    this._requestManager.setProvider(provider);                                                                        // 2485
    this.currentProvider = provider;                                                                                   // 2486
};                                                                                                                     // 2487
                                                                                                                       // 2488
Web3.prototype.reset = function (keepIsSyncing) {                                                                      // 2489
    this._requestManager.reset(keepIsSyncing);                                                                         // 2490
    this.settings = new Settings();                                                                                    // 2491
};                                                                                                                     // 2492
                                                                                                                       // 2493
Web3.prototype.toHex = utils.toHex;                                                                                    // 2494
Web3.prototype.toAscii = utils.toAscii;                                                                                // 2495
Web3.prototype.toUtf8 = utils.toUtf8;                                                                                  // 2496
Web3.prototype.fromAscii = utils.fromAscii;                                                                            // 2497
Web3.prototype.fromUtf8 = utils.fromUtf8;                                                                              // 2498
Web3.prototype.toDecimal = utils.toDecimal;                                                                            // 2499
Web3.prototype.fromDecimal = utils.fromDecimal;                                                                        // 2500
Web3.prototype.toBigNumber = utils.toBigNumber;                                                                        // 2501
Web3.prototype.toWei = utils.toWei;                                                                                    // 2502
Web3.prototype.fromWei = utils.fromWei;                                                                                // 2503
Web3.prototype.isAddress = utils.isAddress;                                                                            // 2504
Web3.prototype.isIBAN = utils.isIBAN;                                                                                  // 2505
Web3.prototype.sha3 = sha3;                                                                                            // 2506
                                                                                                                       // 2507
/**                                                                                                                    // 2508
 * Transforms direct icap to address                                                                                   // 2509
 */                                                                                                                    // 2510
Web3.prototype.fromICAP = function (icap) {                                                                            // 2511
    var iban = new Iban(icap);                                                                                         // 2512
    return iban.address();                                                                                             // 2513
};                                                                                                                     // 2514
                                                                                                                       // 2515
var properties = function () {                                                                                         // 2516
    return [                                                                                                           // 2517
        new Property({                                                                                                 // 2518
            name: 'version.node',                                                                                      // 2519
            getter: 'web3_clientVersion'                                                                               // 2520
        }),                                                                                                            // 2521
        new Property({                                                                                                 // 2522
            name: 'version.network',                                                                                   // 2523
            getter: 'net_version',                                                                                     // 2524
            inputFormatter: utils.toDecimal                                                                            // 2525
        }),                                                                                                            // 2526
        new Property({                                                                                                 // 2527
            name: 'version.ethereum',                                                                                  // 2528
            getter: 'eth_protocolVersion',                                                                             // 2529
            inputFormatter: utils.toDecimal                                                                            // 2530
        }),                                                                                                            // 2531
        new Property({                                                                                                 // 2532
            name: 'version.whisper',                                                                                   // 2533
            getter: 'shh_version',                                                                                     // 2534
            inputFormatter: utils.toDecimal                                                                            // 2535
        })                                                                                                             // 2536
    ];                                                                                                                 // 2537
};                                                                                                                     // 2538
                                                                                                                       // 2539
Web3.prototype.isConnected = function(){                                                                               // 2540
    return (this.currentProvider && this.currentProvider.isConnected());                                               // 2541
};                                                                                                                     // 2542
                                                                                                                       // 2543
Web3.prototype.createBatch = function () {                                                                             // 2544
    return new Batch(this);                                                                                            // 2545
};                                                                                                                     // 2546
                                                                                                                       // 2547
module.exports = Web3;                                                                                                 // 2548
                                                                                                                       // 2549
                                                                                                                       // 2550
},{"./utils/sha3":19,"./utils/utils":20,"./version.json":21,"./web3/batch":24,"./web3/extend":28,"./web3/httpprovider":32,"./web3/iban":33,"./web3/ipcprovider":34,"./web3/methods/db":37,"./web3/methods/eth":38,"./web3/methods/net":39,"./web3/methods/shh":40,"./web3/property":43,"./web3/requestmanager":44,"./web3/settings":45}],23:[function(require,module,exports){
/*                                                                                                                     // 2552
    This file is part of web3.js.                                                                                      // 2553
                                                                                                                       // 2554
    web3.js is free software: you can redistribute it and/or modify                                                    // 2555
    it under the terms of the GNU Lesser General Public License as published by                                        // 2556
    the Free Software Foundation, either version 3 of the License, or                                                  // 2557
    (at your option) any later version.                                                                                // 2558
                                                                                                                       // 2559
    web3.js is distributed in the hope that it will be useful,                                                         // 2560
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2561
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2562
    GNU Lesser General Public License for more details.                                                                // 2563
                                                                                                                       // 2564
    You should have received a copy of the GNU Lesser General Public License                                           // 2565
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2566
*/                                                                                                                     // 2567
/**                                                                                                                    // 2568
 * @file allevents.js                                                                                                  // 2569
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2570
 * @date 2014                                                                                                          // 2571
 */                                                                                                                    // 2572
                                                                                                                       // 2573
var sha3 = require('../utils/sha3');                                                                                   // 2574
var SolidityEvent = require('./event');                                                                                // 2575
var formatters = require('./formatters');                                                                              // 2576
var utils = require('../utils/utils');                                                                                 // 2577
var Filter = require('./filter');                                                                                      // 2578
var watches = require('./methods/watches');                                                                            // 2579
                                                                                                                       // 2580
var AllSolidityEvents = function (requestManager, json, address) {                                                     // 2581
    this._requestManager = requestManager;                                                                             // 2582
    this._json = json;                                                                                                 // 2583
    this._address = address;                                                                                           // 2584
};                                                                                                                     // 2585
                                                                                                                       // 2586
AllSolidityEvents.prototype.encode = function (options) {                                                              // 2587
    options = options || {};                                                                                           // 2588
    var result = {};                                                                                                   // 2589
                                                                                                                       // 2590
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 2591
        return options[f] !== undefined;                                                                               // 2592
    }).forEach(function (f) {                                                                                          // 2593
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 2594
    });                                                                                                                // 2595
                                                                                                                       // 2596
    result.address = this._address;                                                                                    // 2597
                                                                                                                       // 2598
    return result;                                                                                                     // 2599
};                                                                                                                     // 2600
                                                                                                                       // 2601
AllSolidityEvents.prototype.decode = function (data) {                                                                 // 2602
    data.data = data.data || '';                                                                                       // 2603
    data.topics = data.topics || [];                                                                                   // 2604
                                                                                                                       // 2605
    var eventTopic = data.topics[0].slice(2);                                                                          // 2606
    var match = this._json.filter(function (j) {                                                                       // 2607
        return eventTopic === sha3(utils.transformToFullName(j));                                                      // 2608
    })[0];                                                                                                             // 2609
                                                                                                                       // 2610
    if (!match) { // cannot find matching event?                                                                       // 2611
        console.warn('cannot find event for log');                                                                     // 2612
        return data;                                                                                                   // 2613
    }                                                                                                                  // 2614
                                                                                                                       // 2615
    var event = new SolidityEvent(this._requestManager, match, this._address);                                         // 2616
    return event.decode(data);                                                                                         // 2617
};                                                                                                                     // 2618
                                                                                                                       // 2619
AllSolidityEvents.prototype.execute = function (options, callback) {                                                   // 2620
                                                                                                                       // 2621
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 2622
        callback = arguments[arguments.length - 1];                                                                    // 2623
        if(arguments.length === 1)                                                                                     // 2624
            options = null;                                                                                            // 2625
    }                                                                                                                  // 2626
                                                                                                                       // 2627
    var o = this.encode(options);                                                                                      // 2628
    var formatter = this.decode.bind(this);                                                                            // 2629
    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 2630
};                                                                                                                     // 2631
                                                                                                                       // 2632
AllSolidityEvents.prototype.attachToContract = function (contract) {                                                   // 2633
    var execute = this.execute.bind(this);                                                                             // 2634
    contract.allEvents = execute;                                                                                      // 2635
};                                                                                                                     // 2636
                                                                                                                       // 2637
module.exports = AllSolidityEvents;                                                                                    // 2638
                                                                                                                       // 2639
                                                                                                                       // 2640
},{"../utils/sha3":19,"../utils/utils":20,"./event":27,"./filter":29,"./formatters":30,"./methods/watches":41}],24:[function(require,module,exports){
/*                                                                                                                     // 2642
    This file is part of web3.js.                                                                                      // 2643
                                                                                                                       // 2644
    web3.js is free software: you can redistribute it and/or modify                                                    // 2645
    it under the terms of the GNU Lesser General Public License as published by                                        // 2646
    the Free Software Foundation, either version 3 of the License, or                                                  // 2647
    (at your option) any later version.                                                                                // 2648
                                                                                                                       // 2649
    web3.js is distributed in the hope that it will be useful,                                                         // 2650
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2651
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2652
    GNU Lesser General Public License for more details.                                                                // 2653
                                                                                                                       // 2654
    You should have received a copy of the GNU Lesser General Public License                                           // 2655
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2656
*/                                                                                                                     // 2657
/**                                                                                                                    // 2658
 * @file batch.js                                                                                                      // 2659
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2660
 * @date 2015                                                                                                          // 2661
 */                                                                                                                    // 2662
                                                                                                                       // 2663
var Jsonrpc = require('./jsonrpc');                                                                                    // 2664
var errors = require('./errors');                                                                                      // 2665
                                                                                                                       // 2666
var Batch = function (web3) {                                                                                          // 2667
    this.requestManager = web3._requestManager;                                                                        // 2668
    this.requests = [];                                                                                                // 2669
};                                                                                                                     // 2670
                                                                                                                       // 2671
/**                                                                                                                    // 2672
 * Should be called to add create new request to batch request                                                         // 2673
 *                                                                                                                     // 2674
 * @method add                                                                                                         // 2675
 * @param {Object} jsonrpc requet object                                                                               // 2676
 */                                                                                                                    // 2677
Batch.prototype.add = function (request) {                                                                             // 2678
    this.requests.push(request);                                                                                       // 2679
};                                                                                                                     // 2680
                                                                                                                       // 2681
/**                                                                                                                    // 2682
 * Should be called to execute batch request                                                                           // 2683
 *                                                                                                                     // 2684
 * @method execute                                                                                                     // 2685
 */                                                                                                                    // 2686
Batch.prototype.execute = function () {                                                                                // 2687
    var requests = this.requests;                                                                                      // 2688
    this.requestManager.sendBatch(requests, function (err, results) {                                                  // 2689
        results = results || [];                                                                                       // 2690
        requests.map(function (request, index) {                                                                       // 2691
            return results[index] || {};                                                                               // 2692
        }).forEach(function (result, index) {                                                                          // 2693
            if (requests[index].callback) {                                                                            // 2694
                                                                                                                       // 2695
                if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                  // 2696
                    return requests[index].callback(errors.InvalidResponse(result));                                   // 2697
                }                                                                                                      // 2698
                                                                                                                       // 2699
                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
            }                                                                                                          // 2701
        });                                                                                                            // 2702
    });                                                                                                                // 2703
};                                                                                                                     // 2704
                                                                                                                       // 2705
module.exports = Batch;                                                                                                // 2706
                                                                                                                       // 2707
                                                                                                                       // 2708
},{"./errors":26,"./jsonrpc":35}],25:[function(require,module,exports){                                                // 2709
/*                                                                                                                     // 2710
    This file is part of web3.js.                                                                                      // 2711
                                                                                                                       // 2712
    web3.js is free software: you can redistribute it and/or modify                                                    // 2713
    it under the terms of the GNU Lesser General Public License as published by                                        // 2714
    the Free Software Foundation, either version 3 of the License, or                                                  // 2715
    (at your option) any later version.                                                                                // 2716
                                                                                                                       // 2717
    web3.js is distributed in the hope that it will be useful,                                                         // 2718
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2719
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2720
    GNU Lesser General Public License for more details.                                                                // 2721
                                                                                                                       // 2722
    You should have received a copy of the GNU Lesser General Public License                                           // 2723
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2724
*/                                                                                                                     // 2725
/**                                                                                                                    // 2726
 * @file contract.js                                                                                                   // 2727
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2728
 * @date 2014                                                                                                          // 2729
 */                                                                                                                    // 2730
                                                                                                                       // 2731
var utils = require('../utils/utils');                                                                                 // 2732
var coder = require('../solidity/coder');                                                                              // 2733
var SolidityEvent = require('./event');                                                                                // 2734
var SolidityFunction = require('./function');                                                                          // 2735
var AllEvents = require('./allevents');                                                                                // 2736
                                                                                                                       // 2737
/**                                                                                                                    // 2738
 * Should be called to encode constructor params                                                                       // 2739
 *                                                                                                                     // 2740
 * @method encodeConstructorParams                                                                                     // 2741
 * @param {Array} abi                                                                                                  // 2742
 * @param {Array} constructor params                                                                                   // 2743
 */                                                                                                                    // 2744
var encodeConstructorParams = function (abi, params) {                                                                 // 2745
    return abi.filter(function (json) {                                                                                // 2746
        return json.type === 'constructor' && json.inputs.length === params.length;                                    // 2747
    }).map(function (json) {                                                                                           // 2748
        return json.inputs.map(function (input) {                                                                      // 2749
            return input.type;                                                                                         // 2750
        });                                                                                                            // 2751
    }).map(function (types) {                                                                                          // 2752
        return coder.encodeParams(types, params);                                                                      // 2753
    })[0] || '';                                                                                                       // 2754
};                                                                                                                     // 2755
                                                                                                                       // 2756
/**                                                                                                                    // 2757
 * Should be called to add functions to contract object                                                                // 2758
 *                                                                                                                     // 2759
 * @method addFunctionsToContract                                                                                      // 2760
 * @param {Contract} contract                                                                                          // 2761
 * @param {Array} abi                                                                                                  // 2762
 */                                                                                                                    // 2763
var addFunctionsToContract = function (contract) {                                                                     // 2764
    contract.abi.filter(function (json) {                                                                              // 2765
        return json.type === 'function';                                                                               // 2766
    }).map(function (json) {                                                                                           // 2767
        return new SolidityFunction(contract._eth, json, contract.address);                                            // 2768
    }).forEach(function (f) {                                                                                          // 2769
        f.attachToContract(contract);                                                                                  // 2770
    });                                                                                                                // 2771
};                                                                                                                     // 2772
                                                                                                                       // 2773
/**                                                                                                                    // 2774
 * Should be called to add events to contract object                                                                   // 2775
 *                                                                                                                     // 2776
 * @method addEventsToContract                                                                                         // 2777
 * @param {Contract} contract                                                                                          // 2778
 * @param {Array} abi                                                                                                  // 2779
 */                                                                                                                    // 2780
var addEventsToContract = function (contract) {                                                                        // 2781
    var events = contract.abi.filter(function (json) {                                                                 // 2782
        return json.type === 'event';                                                                                  // 2783
    });                                                                                                                // 2784
                                                                                                                       // 2785
    var All = new AllEvents(contract._eth._requestManager, events, contract.address);                                  // 2786
    All.attachToContract(contract);                                                                                    // 2787
                                                                                                                       // 2788
    events.map(function (json) {                                                                                       // 2789
        return new SolidityEvent(contract._eth._requestManager, json, contract.address);                               // 2790
    }).forEach(function (e) {                                                                                          // 2791
        e.attachToContract(contract);                                                                                  // 2792
    });                                                                                                                // 2793
};                                                                                                                     // 2794
                                                                                                                       // 2795
                                                                                                                       // 2796
/**                                                                                                                    // 2797
 * Should be called to check if the contract gets properly deployed on the blockchain.                                 // 2798
 *                                                                                                                     // 2799
 * @method checkForContractAddress                                                                                     // 2800
 * @param {Object} contract                                                                                            // 2801
 * @param {Function} callback                                                                                          // 2802
 * @returns {Undefined}                                                                                                // 2803
 */                                                                                                                    // 2804
var checkForContractAddress = function(contract, callback){                                                            // 2805
    var count = 0,                                                                                                     // 2806
        callbackFired = false;                                                                                         // 2807
                                                                                                                       // 2808
    // wait for receipt                                                                                                // 2809
    var filter = contract._eth.filter('latest', function(e){                                                           // 2810
        if (!e && !callbackFired) {                                                                                    // 2811
            count++;                                                                                                   // 2812
                                                                                                                       // 2813
            // stop watching after 50 blocks (timeout)                                                                 // 2814
            if (count > 50) {                                                                                          // 2815
                                                                                                                       // 2816
                filter.stopWatching();                                                                                 // 2817
                callbackFired = true;                                                                                  // 2818
                                                                                                                       // 2819
                if (callback)                                                                                          // 2820
                    callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));                    // 2821
                else                                                                                                   // 2822
                    throw new Error('Contract transaction couldn\'t be found after 50 blocks');                        // 2823
                                                                                                                       // 2824
                                                                                                                       // 2825
            } else {                                                                                                   // 2826
                                                                                                                       // 2827
                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){                    // 2828
                    if(receipt && !callbackFired) {                                                                    // 2829
                                                                                                                       // 2830
                        contract._eth.getCode(receipt.contractAddress, function(e, code){                              // 2831
                            /*jshint maxcomplexity: 6 */                                                               // 2832
                                                                                                                       // 2833
                            if(callbackFired || !code)                                                                 // 2834
                                return;                                                                                // 2835
                                                                                                                       // 2836
                            filter.stopWatching();                                                                     // 2837
                            callbackFired = true;                                                                      // 2838
                                                                                                                       // 2839
                            if(code.length > 2) {                                                                      // 2840
                                                                                                                       // 2841
                                // console.log('Contract code deployed!');                                             // 2842
                                                                                                                       // 2843
                                contract.address = receipt.contractAddress;                                            // 2844
                                                                                                                       // 2845
                                // attach events and methods again after we have                                       // 2846
                                addFunctionsToContract(contract);                                                      // 2847
                                addEventsToContract(contract);                                                         // 2848
                                                                                                                       // 2849
                                // call callback for the second time                                                   // 2850
                                if(callback)                                                                           // 2851
                                    callback(null, contract);                                                          // 2852
                                                                                                                       // 2853
                            } else {                                                                                   // 2854
                                if(callback)                                                                           // 2855
                                    callback(new Error('The contract code couldn\'t be stored, please check your gas amount.'));
                                else                                                                                   // 2857
                                    throw new Error('The contract code couldn\'t be stored, please check your gas amount.');
                            }                                                                                          // 2859
                        });                                                                                            // 2860
                    }                                                                                                  // 2861
                });                                                                                                    // 2862
            }                                                                                                          // 2863
        }                                                                                                              // 2864
    });                                                                                                                // 2865
};                                                                                                                     // 2866
                                                                                                                       // 2867
/**                                                                                                                    // 2868
 * Should be called to create new ContractFactory instance                                                             // 2869
 *                                                                                                                     // 2870
 * @method ContractFactory                                                                                             // 2871
 * @param {Array} abi                                                                                                  // 2872
 */                                                                                                                    // 2873
var ContractFactory = function (eth, abi) {                                                                            // 2874
    this.eth = eth;                                                                                                    // 2875
    this.abi = abi;                                                                                                    // 2876
                                                                                                                       // 2877
    this.new.getData = this.getData.bind(this);                                                                        // 2878
};                                                                                                                     // 2879
                                                                                                                       // 2880
/**                                                                                                                    // 2881
 * Should be called to create new ContractFactory                                                                      // 2882
 *                                                                                                                     // 2883
 * @method contract                                                                                                    // 2884
 * @param {Array} abi                                                                                                  // 2885
 * @returns {ContractFactory} new contract factory                                                                     // 2886
 */                                                                                                                    // 2887
//var contract = function (abi) {                                                                                      // 2888
    //return new ContractFactory(abi);                                                                                 // 2889
//};                                                                                                                   // 2890
                                                                                                                       // 2891
/**                                                                                                                    // 2892
 * Should be called to create new contract on a blockchain                                                             // 2893
 *                                                                                                                     // 2894
 * @method new                                                                                                         // 2895
 * @param {Any} contract constructor param1 (optional)                                                                 // 2896
 * @param {Any} contract constructor param2 (optional)                                                                 // 2897
 * @param {Object} contract transaction object (required)                                                              // 2898
 * @param {Function} callback                                                                                          // 2899
 * @returns {Contract} returns contract instance                                                                       // 2900
 */                                                                                                                    // 2901
ContractFactory.prototype.new = function () {                                                                          // 2902
    var contract = new Contract(this.eth, this.abi);                                                                   // 2903
                                                                                                                       // 2904
    // parse arguments                                                                                                 // 2905
    var options = {}; // required!                                                                                     // 2906
    var callback;                                                                                                      // 2907
                                                                                                                       // 2908
    var args = Array.prototype.slice.call(arguments);                                                                  // 2909
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 2910
        callback = args.pop();                                                                                         // 2911
    }                                                                                                                  // 2912
                                                                                                                       // 2913
    var last = args[args.length - 1];                                                                                  // 2914
    if (utils.isObject(last) && !utils.isArray(last)) {                                                                // 2915
        options = args.pop();                                                                                          // 2916
    }                                                                                                                  // 2917
                                                                                                                       // 2918
    var bytes = encodeConstructorParams(this.abi, args);                                                               // 2919
    options.data += bytes;                                                                                             // 2920
                                                                                                                       // 2921
    if (callback) {                                                                                                    // 2922
                                                                                                                       // 2923
        // wait for the contract address adn check if the code was deployed                                            // 2924
        this.eth.sendTransaction(options, function (err, hash) {                                                       // 2925
            if (err) {                                                                                                 // 2926
                callback(err);                                                                                         // 2927
            } else {                                                                                                   // 2928
                // add the transaction hash                                                                            // 2929
                contract.transactionHash = hash;                                                                       // 2930
                                                                                                                       // 2931
                // call callback for the first time                                                                    // 2932
                callback(null, contract);                                                                              // 2933
                                                                                                                       // 2934
                checkForContractAddress(contract, callback);                                                           // 2935
            }                                                                                                          // 2936
        });                                                                                                            // 2937
    } else {                                                                                                           // 2938
        var hash = this.eth.sendTransaction(options);                                                                  // 2939
        // add the transaction hash                                                                                    // 2940
        contract.transactionHash = hash;                                                                               // 2941
        checkForContractAddress(contract);                                                                             // 2942
    }                                                                                                                  // 2943
                                                                                                                       // 2944
    return contract;                                                                                                   // 2945
};                                                                                                                     // 2946
                                                                                                                       // 2947
/**                                                                                                                    // 2948
 * Should be called to get access to existing contract on a blockchain                                                 // 2949
 *                                                                                                                     // 2950
 * @method at                                                                                                          // 2951
 * @param {Address} contract address (required)                                                                        // 2952
 * @param {Function} callback {optional)                                                                               // 2953
 * @returns {Contract} returns contract if no callback was passed,                                                     // 2954
 * otherwise calls callback function (err, contract)                                                                   // 2955
 */                                                                                                                    // 2956
ContractFactory.prototype.at = function (address, callback) {                                                          // 2957
    var contract = new Contract(this.eth, this.abi, address);                                                          // 2958
                                                                                                                       // 2959
    // this functions are not part of prototype,                                                                       // 2960
    // because we dont want to spoil the interface                                                                     // 2961
    addFunctionsToContract(contract);                                                                                  // 2962
    addEventsToContract(contract);                                                                                     // 2963
                                                                                                                       // 2964
    if (callback) {                                                                                                    // 2965
        callback(null, contract);                                                                                      // 2966
    }                                                                                                                  // 2967
    return contract;                                                                                                   // 2968
};                                                                                                                     // 2969
                                                                                                                       // 2970
/**                                                                                                                    // 2971
 * Gets the data, which is data to deploy plus constructor params                                                      // 2972
 *                                                                                                                     // 2973
 * @method getData                                                                                                     // 2974
 */                                                                                                                    // 2975
ContractFactory.prototype.getData = function () {                                                                      // 2976
    var options = {}; // required!                                                                                     // 2977
    var args = Array.prototype.slice.call(arguments);                                                                  // 2978
                                                                                                                       // 2979
    var last = args[args.length - 1];                                                                                  // 2980
    if (utils.isObject(last) && !utils.isArray(last)) {                                                                // 2981
        options = args.pop();                                                                                          // 2982
    }                                                                                                                  // 2983
                                                                                                                       // 2984
    var bytes = encodeConstructorParams(this.abi, args);                                                               // 2985
    options.data += bytes;                                                                                             // 2986
                                                                                                                       // 2987
    return options.data;                                                                                               // 2988
};                                                                                                                     // 2989
                                                                                                                       // 2990
/**                                                                                                                    // 2991
 * Should be called to create new contract instance                                                                    // 2992
 *                                                                                                                     // 2993
 * @method Contract                                                                                                    // 2994
 * @param {Array} abi                                                                                                  // 2995
 * @param {Address} contract address                                                                                   // 2996
 */                                                                                                                    // 2997
var Contract = function (eth, abi, address) {                                                                          // 2998
    this._eth = eth;                                                                                                   // 2999
    this.transactionHash = null;                                                                                       // 3000
    this.address = address;                                                                                            // 3001
    this.abi = abi;                                                                                                    // 3002
};                                                                                                                     // 3003
                                                                                                                       // 3004
module.exports = ContractFactory;                                                                                      // 3005
                                                                                                                       // 3006
                                                                                                                       // 3007
},{"../solidity/coder":7,"../utils/utils":20,"./allevents":23,"./event":27,"./function":31}],26:[function(require,module,exports){
/*                                                                                                                     // 3009
    This file is part of web3.js.                                                                                      // 3010
                                                                                                                       // 3011
    web3.js is free software: you can redistribute it and/or modify                                                    // 3012
    it under the terms of the GNU Lesser General Public License as published by                                        // 3013
    the Free Software Foundation, either version 3 of the License, or                                                  // 3014
    (at your option) any later version.                                                                                // 3015
                                                                                                                       // 3016
    web3.js is distributed in the hope that it will be useful,                                                         // 3017
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3018
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3019
    GNU Lesser General Public License for more details.                                                                // 3020
                                                                                                                       // 3021
    You should have received a copy of the GNU Lesser General Public License                                           // 3022
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3023
*/                                                                                                                     // 3024
/**                                                                                                                    // 3025
 * @file errors.js                                                                                                     // 3026
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3027
 * @date 2015                                                                                                          // 3028
 */                                                                                                                    // 3029
                                                                                                                       // 3030
module.exports = {                                                                                                     // 3031
    InvalidNumberOfParams: function () {                                                                               // 3032
        return new Error('Invalid number of input parameters');                                                        // 3033
    },                                                                                                                 // 3034
    InvalidConnection: function (host){                                                                                // 3035
        return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');                                   // 3036
    },                                                                                                                 // 3037
    InvalidProvider: function () {                                                                                     // 3038
        return new Error('Provider not set or invalid');                                                               // 3039
    },                                                                                                                 // 3040
    InvalidResponse: function (result){                                                                                // 3041
        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
        return new Error(message);                                                                                     // 3043
    }                                                                                                                  // 3044
};                                                                                                                     // 3045
                                                                                                                       // 3046
                                                                                                                       // 3047
},{}],27:[function(require,module,exports){                                                                            // 3048
/*                                                                                                                     // 3049
    This file is part of web3.js.                                                                                      // 3050
                                                                                                                       // 3051
    web3.js is free software: you can redistribute it and/or modify                                                    // 3052
    it under the terms of the GNU Lesser General Public License as published by                                        // 3053
    the Free Software Foundation, either version 3 of the License, or                                                  // 3054
    (at your option) any later version.                                                                                // 3055
                                                                                                                       // 3056
    web3.js is distributed in the hope that it will be useful,                                                         // 3057
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3058
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3059
    GNU Lesser General Public License for more details.                                                                // 3060
                                                                                                                       // 3061
    You should have received a copy of the GNU Lesser General Public License                                           // 3062
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3063
*/                                                                                                                     // 3064
/**                                                                                                                    // 3065
 * @file event.js                                                                                                      // 3066
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3067
 * @date 2014                                                                                                          // 3068
 */                                                                                                                    // 3069
                                                                                                                       // 3070
var utils = require('../utils/utils');                                                                                 // 3071
var coder = require('../solidity/coder');                                                                              // 3072
var formatters = require('./formatters');                                                                              // 3073
var sha3 = require('../utils/sha3');                                                                                   // 3074
var Filter = require('./filter');                                                                                      // 3075
var watches = require('./methods/watches');                                                                            // 3076
                                                                                                                       // 3077
/**                                                                                                                    // 3078
 * This prototype should be used to create event filters                                                               // 3079
 */                                                                                                                    // 3080
var SolidityEvent = function (requestManager, json, address) {                                                         // 3081
    this._requestManager = requestManager;                                                                             // 3082
    this._params = json.inputs;                                                                                        // 3083
    this._name = utils.transformToFullName(json);                                                                      // 3084
    this._address = address;                                                                                           // 3085
    this._anonymous = json.anonymous;                                                                                  // 3086
};                                                                                                                     // 3087
                                                                                                                       // 3088
/**                                                                                                                    // 3089
 * Should be used to get filtered param types                                                                          // 3090
 *                                                                                                                     // 3091
 * @method types                                                                                                       // 3092
 * @param {Bool} decide if returned typed should be indexed                                                            // 3093
 * @return {Array} array of types                                                                                      // 3094
 */                                                                                                                    // 3095
SolidityEvent.prototype.types = function (indexed) {                                                                   // 3096
    return this._params.filter(function (i) {                                                                          // 3097
        return i.indexed === indexed;                                                                                  // 3098
    }).map(function (i) {                                                                                              // 3099
        return i.type;                                                                                                 // 3100
    });                                                                                                                // 3101
};                                                                                                                     // 3102
                                                                                                                       // 3103
/**                                                                                                                    // 3104
 * Should be used to get event display name                                                                            // 3105
 *                                                                                                                     // 3106
 * @method displayName                                                                                                 // 3107
 * @return {String} event display name                                                                                 // 3108
 */                                                                                                                    // 3109
SolidityEvent.prototype.displayName = function () {                                                                    // 3110
    return utils.extractDisplayName(this._name);                                                                       // 3111
};                                                                                                                     // 3112
                                                                                                                       // 3113
/**                                                                                                                    // 3114
 * Should be used to get event type name                                                                               // 3115
 *                                                                                                                     // 3116
 * @method typeName                                                                                                    // 3117
 * @return {String} event type name                                                                                    // 3118
 */                                                                                                                    // 3119
SolidityEvent.prototype.typeName = function () {                                                                       // 3120
    return utils.extractTypeName(this._name);                                                                          // 3121
};                                                                                                                     // 3122
                                                                                                                       // 3123
/**                                                                                                                    // 3124
 * Should be used to get event signature                                                                               // 3125
 *                                                                                                                     // 3126
 * @method signature                                                                                                   // 3127
 * @return {String} event signature                                                                                    // 3128
 */                                                                                                                    // 3129
SolidityEvent.prototype.signature = function () {                                                                      // 3130
    return sha3(this._name);                                                                                           // 3131
};                                                                                                                     // 3132
                                                                                                                       // 3133
/**                                                                                                                    // 3134
 * Should be used to encode indexed params and options to one final object                                             // 3135
 *                                                                                                                     // 3136
 * @method encode                                                                                                      // 3137
 * @param {Object} indexed                                                                                             // 3138
 * @param {Object} options                                                                                             // 3139
 * @return {Object} everything combined together and encoded                                                           // 3140
 */                                                                                                                    // 3141
SolidityEvent.prototype.encode = function (indexed, options) {                                                         // 3142
    indexed = indexed || {};                                                                                           // 3143
    options = options || {};                                                                                           // 3144
    var result = {};                                                                                                   // 3145
                                                                                                                       // 3146
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 3147
        return options[f] !== undefined;                                                                               // 3148
    }).forEach(function (f) {                                                                                          // 3149
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 3150
    });                                                                                                                // 3151
                                                                                                                       // 3152
    result.topics = [];                                                                                                // 3153
                                                                                                                       // 3154
    result.address = this._address;                                                                                    // 3155
    if (!this._anonymous) {                                                                                            // 3156
        result.topics.push('0x' + this.signature());                                                                   // 3157
    }                                                                                                                  // 3158
                                                                                                                       // 3159
    var indexedTopics = this._params.filter(function (i) {                                                             // 3160
        return i.indexed === true;                                                                                     // 3161
    }).map(function (i) {                                                                                              // 3162
        var value = indexed[i.name];                                                                                   // 3163
        if (value === undefined || value === null) {                                                                   // 3164
            return null;                                                                                               // 3165
        }                                                                                                              // 3166
                                                                                                                       // 3167
        if (utils.isArray(value)) {                                                                                    // 3168
            return value.map(function (v) {                                                                            // 3169
                return '0x' + coder.encodeParam(i.type, v);                                                            // 3170
            });                                                                                                        // 3171
        }                                                                                                              // 3172
        return '0x' + coder.encodeParam(i.type, value);                                                                // 3173
    });                                                                                                                // 3174
                                                                                                                       // 3175
    result.topics = result.topics.concat(indexedTopics);                                                               // 3176
                                                                                                                       // 3177
    return result;                                                                                                     // 3178
};                                                                                                                     // 3179
                                                                                                                       // 3180
/**                                                                                                                    // 3181
 * Should be used to decode indexed params and options                                                                 // 3182
 *                                                                                                                     // 3183
 * @method decode                                                                                                      // 3184
 * @param {Object} data                                                                                                // 3185
 * @return {Object} result object with decoded indexed && not indexed params                                           // 3186
 */                                                                                                                    // 3187
SolidityEvent.prototype.decode = function (data) {                                                                     // 3188
                                                                                                                       // 3189
    data.data = data.data || '';                                                                                       // 3190
    data.topics = data.topics || [];                                                                                   // 3191
                                                                                                                       // 3192
    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);                                              // 3193
    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");                           // 3194
    var indexedParams = coder.decodeParams(this.types(true), indexedData);                                             // 3195
                                                                                                                       // 3196
    var notIndexedData = data.data.slice(2);                                                                           // 3197
    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);                                      // 3198
                                                                                                                       // 3199
    var result = formatters.outputLogFormatter(data);                                                                  // 3200
    result.event = this.displayName();                                                                                 // 3201
    result.address = data.address;                                                                                     // 3202
                                                                                                                       // 3203
    result.args = this._params.reduce(function (acc, current) {                                                        // 3204
        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();                        // 3205
        return acc;                                                                                                    // 3206
    }, {});                                                                                                            // 3207
                                                                                                                       // 3208
    delete result.data;                                                                                                // 3209
    delete result.topics;                                                                                              // 3210
                                                                                                                       // 3211
    return result;                                                                                                     // 3212
};                                                                                                                     // 3213
                                                                                                                       // 3214
/**                                                                                                                    // 3215
 * Should be used to create new filter object from event                                                               // 3216
 *                                                                                                                     // 3217
 * @method execute                                                                                                     // 3218
 * @param {Object} indexed                                                                                             // 3219
 * @param {Object} options                                                                                             // 3220
 * @return {Object} filter object                                                                                      // 3221
 */                                                                                                                    // 3222
SolidityEvent.prototype.execute = function (indexed, options, callback) {                                              // 3223
                                                                                                                       // 3224
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 3225
        callback = arguments[arguments.length - 1];                                                                    // 3226
        if(arguments.length === 2)                                                                                     // 3227
            options = null;                                                                                            // 3228
        if(arguments.length === 1) {                                                                                   // 3229
            options = null;                                                                                            // 3230
            indexed = {};                                                                                              // 3231
        }                                                                                                              // 3232
    }                                                                                                                  // 3233
                                                                                                                       // 3234
    var o = this.encode(indexed, options);                                                                             // 3235
    var formatter = this.decode.bind(this);                                                                            // 3236
    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 3237
};                                                                                                                     // 3238
                                                                                                                       // 3239
/**                                                                                                                    // 3240
 * Should be used to attach event to contract object                                                                   // 3241
 *                                                                                                                     // 3242
 * @method attachToContract                                                                                            // 3243
 * @param {Contract}                                                                                                   // 3244
 */                                                                                                                    // 3245
SolidityEvent.prototype.attachToContract = function (contract) {                                                       // 3246
    var execute = this.execute.bind(this);                                                                             // 3247
    var displayName = this.displayName();                                                                              // 3248
    if (!contract[displayName]) {                                                                                      // 3249
        contract[displayName] = execute;                                                                               // 3250
    }                                                                                                                  // 3251
    contract[displayName][this.typeName()] = this.execute.bind(this, contract);                                        // 3252
};                                                                                                                     // 3253
                                                                                                                       // 3254
module.exports = SolidityEvent;                                                                                        // 3255
                                                                                                                       // 3256
                                                                                                                       // 3257
},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./filter":29,"./formatters":30,"./methods/watches":41}],28:[function(require,module,exports){
var formatters = require('./formatters');                                                                              // 3259
var utils = require('./../utils/utils');                                                                               // 3260
var Method = require('./method');                                                                                      // 3261
var Property = require('./property');                                                                                  // 3262
                                                                                                                       // 3263
// TODO: refactor, so the input params are not altered.                                                                // 3264
// it's necessary to make same 'extension' work with multiple providers                                                // 3265
var extend = function (web3) {                                                                                         // 3266
    /* jshint maxcomplexity:5 */                                                                                       // 3267
    var ex = function (extension) {                                                                                    // 3268
                                                                                                                       // 3269
        var extendedObject;                                                                                            // 3270
        if (extension.property) {                                                                                      // 3271
            if (!web3[extension.property]) {                                                                           // 3272
                web3[extension.property] = {};                                                                         // 3273
            }                                                                                                          // 3274
            extendedObject = web3[extension.property];                                                                 // 3275
        } else {                                                                                                       // 3276
            extendedObject = web3;                                                                                     // 3277
        }                                                                                                              // 3278
                                                                                                                       // 3279
        if (extension.methods) {                                                                                       // 3280
            extension.methods.forEach(function (method) {                                                              // 3281
                method.attachToObject(extendedObject);                                                                 // 3282
                method.setRequestManager(web3._requestManager);                                                        // 3283
            });                                                                                                        // 3284
        }                                                                                                              // 3285
                                                                                                                       // 3286
        if (extension.properties) {                                                                                    // 3287
            extension.properties.forEach(function (property) {                                                         // 3288
                property.attachToObject(extendedObject);                                                               // 3289
                property.setRequestManager(web3._requestManager);                                                      // 3290
            });                                                                                                        // 3291
        }                                                                                                              // 3292
    };                                                                                                                 // 3293
                                                                                                                       // 3294
    ex.formatters = formatters;                                                                                        // 3295
    ex.utils = utils;                                                                                                  // 3296
    ex.Method = Method;                                                                                                // 3297
    ex.Property = Property;                                                                                            // 3298
                                                                                                                       // 3299
    return ex;                                                                                                         // 3300
};                                                                                                                     // 3301
                                                                                                                       // 3302
                                                                                                                       // 3303
                                                                                                                       // 3304
module.exports = extend;                                                                                               // 3305
                                                                                                                       // 3306
                                                                                                                       // 3307
},{"./../utils/utils":20,"./formatters":30,"./method":36,"./property":43}],29:[function(require,module,exports){       // 3308
/*                                                                                                                     // 3309
    This file is part of web3.js.                                                                                      // 3310
                                                                                                                       // 3311
    web3.js is free software: you can redistribute it and/or modify                                                    // 3312
    it under the terms of the GNU Lesser General Public License as published by                                        // 3313
    the Free Software Foundation, either version 3 of the License, or                                                  // 3314
    (at your option) any later version.                                                                                // 3315
                                                                                                                       // 3316
    web3.js is distributed in the hope that it will be useful,                                                         // 3317
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3318
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3319
    GNU Lesser General Public License for more details.                                                                // 3320
                                                                                                                       // 3321
    You should have received a copy of the GNU Lesser General Public License                                           // 3322
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3323
*/                                                                                                                     // 3324
/** @file filter.js                                                                                                    // 3325
 * @authors:                                                                                                           // 3326
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 3327
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 3328
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 3329
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 3330
 *   Gav Wood <g@ethdev.com>                                                                                           // 3331
 * @date 2014                                                                                                          // 3332
 */                                                                                                                    // 3333
                                                                                                                       // 3334
var formatters = require('./formatters');                                                                              // 3335
var utils = require('../utils/utils');                                                                                 // 3336
                                                                                                                       // 3337
/**                                                                                                                    // 3338
* Converts a given topic to a hex string, but also allows null values.                                                 // 3339
*                                                                                                                      // 3340
* @param {Mixed} value                                                                                                 // 3341
* @return {String}                                                                                                     // 3342
*/                                                                                                                     // 3343
var toTopic = function(value){                                                                                         // 3344
                                                                                                                       // 3345
    if(value === null || typeof value === 'undefined')                                                                 // 3346
        return null;                                                                                                   // 3347
                                                                                                                       // 3348
    value = String(value);                                                                                             // 3349
                                                                                                                       // 3350
    if(value.indexOf('0x') === 0)                                                                                      // 3351
        return value;                                                                                                  // 3352
    else                                                                                                               // 3353
        return utils.fromUtf8(value);                                                                                  // 3354
};                                                                                                                     // 3355
                                                                                                                       // 3356
/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones          // 3357
/// @param should be string or object                                                                                  // 3358
/// @returns options string or object                                                                                  // 3359
var getOptions = function (options) {                                                                                  // 3360
                                                                                                                       // 3361
    if (utils.isString(options)) {                                                                                     // 3362
        return options;                                                                                                // 3363
    }                                                                                                                  // 3364
                                                                                                                       // 3365
    options = options || {};                                                                                           // 3366
                                                                                                                       // 3367
    // make sure topics, get converted to hex                                                                          // 3368
    options.topics = options.topics || [];                                                                             // 3369
    options.topics = options.topics.map(function(topic){                                                               // 3370
        return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);                                           // 3371
    });                                                                                                                // 3372
                                                                                                                       // 3373
    // lazy load                                                                                                       // 3374
    return {                                                                                                           // 3375
        topics: options.topics,                                                                                        // 3376
        to: options.to,                                                                                                // 3377
        address: options.address,                                                                                      // 3378
        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),                                            // 3379
        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)                                                 // 3380
    };                                                                                                                 // 3381
};                                                                                                                     // 3382
                                                                                                                       // 3383
/**                                                                                                                    // 3384
Adds the callback and sets up the methods, to iterate over the results.                                                // 3385
                                                                                                                       // 3386
@method getLogsAtStart                                                                                                 // 3387
@param {Object} self                                                                                                   // 3388
@param {funciton}                                                                                                      // 3389
*/                                                                                                                     // 3390
var getLogsAtStart = function(self, callback){                                                                         // 3391
    // call getFilterLogs for the first watch callback start                                                           // 3392
    if (!utils.isString(self.options)) {                                                                               // 3393
        self.get(function (err, messages) {                                                                            // 3394
            // don't send all the responses to all the watches again... just to self one                               // 3395
            if (err) {                                                                                                 // 3396
                callback(err);                                                                                         // 3397
            }                                                                                                          // 3398
                                                                                                                       // 3399
            if(utils.isArray(messages)) {                                                                              // 3400
                messages.forEach(function (message) {                                                                  // 3401
                    callback(null, message);                                                                           // 3402
                });                                                                                                    // 3403
            }                                                                                                          // 3404
        });                                                                                                            // 3405
    }                                                                                                                  // 3406
};                                                                                                                     // 3407
                                                                                                                       // 3408
/**                                                                                                                    // 3409
Adds the callback and sets up the methods, to iterate over the results.                                                // 3410
                                                                                                                       // 3411
@method pollFilter                                                                                                     // 3412
@param {Object} self                                                                                                   // 3413
*/                                                                                                                     // 3414
var pollFilter = function(self) {                                                                                      // 3415
                                                                                                                       // 3416
    var onMessage = function (error, messages) {                                                                       // 3417
        if (error) {                                                                                                   // 3418
            return self.callbacks.forEach(function (callback) {                                                        // 3419
                callback(error);                                                                                       // 3420
            });                                                                                                        // 3421
        }                                                                                                              // 3422
                                                                                                                       // 3423
        if(utils.isArray(messages)) {                                                                                  // 3424
            messages.forEach(function (message) {                                                                      // 3425
                message = self.formatter ? self.formatter(message) : message;                                          // 3426
                self.callbacks.forEach(function (callback) {                                                           // 3427
                    callback(null, message);                                                                           // 3428
                });                                                                                                    // 3429
            });                                                                                                        // 3430
        }                                                                                                              // 3431
    };                                                                                                                 // 3432
                                                                                                                       // 3433
    self.requestManager.startPolling({                                                                                 // 3434
        method: self.implementation.poll.call,                                                                         // 3435
        params: [self.filterId],                                                                                       // 3436
    }, self.filterId, onMessage, self.stopWatching.bind(self));                                                        // 3437
                                                                                                                       // 3438
};                                                                                                                     // 3439
                                                                                                                       // 3440
var Filter = function (requestManager, options, methods, formatter, callback) {                                        // 3441
    var self = this;                                                                                                   // 3442
    var implementation = {};                                                                                           // 3443
    methods.forEach(function (method) {                                                                                // 3444
        method.setRequestManager(requestManager);                                                                      // 3445
        method.attachToObject(implementation);                                                                         // 3446
    });                                                                                                                // 3447
    this.requestManager = requestManager;                                                                              // 3448
    this.options = getOptions(options);                                                                                // 3449
    this.implementation = implementation;                                                                              // 3450
    this.filterId = null;                                                                                              // 3451
    this.callbacks = [];                                                                                               // 3452
    this.getLogsCallbacks = [];                                                                                        // 3453
    this.pollFilters = [];                                                                                             // 3454
    this.formatter = formatter;                                                                                        // 3455
    this.implementation.newFilter(this.options, function(error, id){                                                   // 3456
        if(error) {                                                                                                    // 3457
            self.callbacks.forEach(function(cb){                                                                       // 3458
                cb(error);                                                                                             // 3459
            });                                                                                                        // 3460
        } else {                                                                                                       // 3461
            self.filterId = id;                                                                                        // 3462
                                                                                                                       // 3463
            // check if there are get pending callbacks as a consequence                                               // 3464
            // of calling get() with filterId unassigned.                                                              // 3465
            self.getLogsCallbacks.forEach(function (cb){                                                               // 3466
                self.get(cb);                                                                                          // 3467
            });                                                                                                        // 3468
            self.getLogsCallbacks = [];                                                                                // 3469
                                                                                                                       // 3470
            // get filter logs for the already existing watch calls                                                    // 3471
            self.callbacks.forEach(function(cb){                                                                       // 3472
                getLogsAtStart(self, cb);                                                                              // 3473
            });                                                                                                        // 3474
            if(self.callbacks.length > 0)                                                                              // 3475
                pollFilter(self);                                                                                      // 3476
                                                                                                                       // 3477
            // start to watch immediately                                                                              // 3478
            if(callback) {                                                                                             // 3479
                return self.watch(callback);                                                                           // 3480
            }                                                                                                          // 3481
        }                                                                                                              // 3482
    });                                                                                                                // 3483
                                                                                                                       // 3484
    return this;                                                                                                       // 3485
};                                                                                                                     // 3486
                                                                                                                       // 3487
Filter.prototype.watch = function (callback) {                                                                         // 3488
    this.callbacks.push(callback);                                                                                     // 3489
                                                                                                                       // 3490
    if(this.filterId) {                                                                                                // 3491
        getLogsAtStart(this, callback);                                                                                // 3492
        pollFilter(this);                                                                                              // 3493
    }                                                                                                                  // 3494
                                                                                                                       // 3495
    return this;                                                                                                       // 3496
};                                                                                                                     // 3497
                                                                                                                       // 3498
Filter.prototype.stopWatching = function () {                                                                          // 3499
    this.requestManager.stopPolling(this.filterId);                                                                    // 3500
    // remove filter async                                                                                             // 3501
    this.implementation.uninstallFilter(this.filterId, function(){});                                                  // 3502
    this.callbacks = [];                                                                                               // 3503
};                                                                                                                     // 3504
                                                                                                                       // 3505
Filter.prototype.get = function (callback) {                                                                           // 3506
    var self = this;                                                                                                   // 3507
    if (utils.isFunction(callback)) {                                                                                  // 3508
        if (this.filterId === null) {                                                                                  // 3509
            // If filterId is not set yet, call it back                                                                // 3510
            // when newFilter() assigns it.                                                                            // 3511
            this.getLogsCallbacks.push(callback);                                                                      // 3512
        } else {                                                                                                       // 3513
            this.implementation.getLogs(this.filterId, function(err, res){                                             // 3514
                if (err) {                                                                                             // 3515
                    callback(err);                                                                                     // 3516
                } else {                                                                                               // 3517
                    callback(null, res.map(function (log) {                                                            // 3518
                        return self.formatter ? self.formatter(log) : log;                                             // 3519
                    }));                                                                                               // 3520
                }                                                                                                      // 3521
            });                                                                                                        // 3522
        }                                                                                                              // 3523
    } else {                                                                                                           // 3524
        if (this.filterId === null) {                                                                                  // 3525
            throw new Error('Filter ID Error: filter().get() can\'t be chained synchronous, please provide a callback for the get() method.');
        }                                                                                                              // 3527
        var logs = this.implementation.getLogs(this.filterId);                                                         // 3528
        return logs.map(function (log) {                                                                               // 3529
            return self.formatter ? self.formatter(log) : log;                                                         // 3530
        });                                                                                                            // 3531
    }                                                                                                                  // 3532
                                                                                                                       // 3533
    return this;                                                                                                       // 3534
};                                                                                                                     // 3535
                                                                                                                       // 3536
module.exports = Filter;                                                                                               // 3537
                                                                                                                       // 3538
                                                                                                                       // 3539
},{"../utils/utils":20,"./formatters":30}],30:[function(require,module,exports){                                       // 3540
/*                                                                                                                     // 3541
    This file is part of web3.js.                                                                                      // 3542
                                                                                                                       // 3543
    web3.js is free software: you can redistribute it and/or modify                                                    // 3544
    it under the terms of the GNU Lesser General Public License as published by                                        // 3545
    the Free Software Foundation, either version 3 of the License, or                                                  // 3546
    (at your option) any later version.                                                                                // 3547
                                                                                                                       // 3548
    web3.js is distributed in the hope that it will be useful,                                                         // 3549
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3550
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3551
    GNU Lesser General Public License for more details.                                                                // 3552
                                                                                                                       // 3553
    You should have received a copy of the GNU Lesser General Public License                                           // 3554
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3555
*/                                                                                                                     // 3556
/**                                                                                                                    // 3557
 * @file formatters.js                                                                                                 // 3558
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3559
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 3560
 * @date 2015                                                                                                          // 3561
 */                                                                                                                    // 3562
                                                                                                                       // 3563
var utils = require('../utils/utils');                                                                                 // 3564
var config = require('../utils/config');                                                                               // 3565
var Iban = require('./iban');                                                                                          // 3566
                                                                                                                       // 3567
/**                                                                                                                    // 3568
 * Should the format output to a big number                                                                            // 3569
 *                                                                                                                     // 3570
 * @method outputBigNumberFormatter                                                                                    // 3571
 * @param {String|Number|BigNumber}                                                                                    // 3572
 * @returns {BigNumber} object                                                                                         // 3573
 */                                                                                                                    // 3574
var outputBigNumberFormatter = function (number) {                                                                     // 3575
    return utils.toBigNumber(number);                                                                                  // 3576
};                                                                                                                     // 3577
                                                                                                                       // 3578
var isPredefinedBlockNumber = function (blockNumber) {                                                                 // 3579
    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';                        // 3580
};                                                                                                                     // 3581
                                                                                                                       // 3582
var inputDefaultBlockNumberFormatter = function (blockNumber) {                                                        // 3583
    if (blockNumber === undefined) {                                                                                   // 3584
        return config.defaultBlock;                                                                                    // 3585
    }                                                                                                                  // 3586
    return inputBlockNumberFormatter(blockNumber);                                                                     // 3587
};                                                                                                                     // 3588
                                                                                                                       // 3589
var inputBlockNumberFormatter = function (blockNumber) {                                                               // 3590
    if (blockNumber === undefined) {                                                                                   // 3591
        return undefined;                                                                                              // 3592
    } else if (isPredefinedBlockNumber(blockNumber)) {                                                                 // 3593
        return blockNumber;                                                                                            // 3594
    }                                                                                                                  // 3595
    return utils.toHex(blockNumber);                                                                                   // 3596
};                                                                                                                     // 3597
                                                                                                                       // 3598
/**                                                                                                                    // 3599
 * Formats the input of a transaction and converts all values to HEX                                                   // 3600
 *                                                                                                                     // 3601
 * @method inputCallFormatter                                                                                          // 3602
 * @param {Object} transaction options                                                                                 // 3603
 * @returns object                                                                                                     // 3604
*/                                                                                                                     // 3605
var inputCallFormatter = function (options){                                                                           // 3606
                                                                                                                       // 3607
    options.from = options.from || config.defaultAccount;                                                              // 3608
                                                                                                                       // 3609
    if (options.from) {                                                                                                // 3610
        options.from = inputAddressFormatter(options.from);                                                            // 3611
    }                                                                                                                  // 3612
                                                                                                                       // 3613
    if (options.to) { // it might be contract creation                                                                 // 3614
        options.to = inputAddressFormatter(options.to);                                                                // 3615
    }                                                                                                                  // 3616
                                                                                                                       // 3617
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3618
        return options[key] !== undefined;                                                                             // 3619
    }).forEach(function(key){                                                                                          // 3620
        options[key] = utils.fromDecimal(options[key]);                                                                // 3621
    });                                                                                                                // 3622
                                                                                                                       // 3623
    return options;                                                                                                    // 3624
};                                                                                                                     // 3625
                                                                                                                       // 3626
/**                                                                                                                    // 3627
 * Formats the input of a transaction and converts all values to HEX                                                   // 3628
 *                                                                                                                     // 3629
 * @method inputTransactionFormatter                                                                                   // 3630
 * @param {Object} transaction options                                                                                 // 3631
 * @returns object                                                                                                     // 3632
*/                                                                                                                     // 3633
var inputTransactionFormatter = function (options){                                                                    // 3634
                                                                                                                       // 3635
    options.from = options.from || config.defaultAccount;                                                              // 3636
    options.from = inputAddressFormatter(options.from);                                                                // 3637
                                                                                                                       // 3638
    if (options.to) { // it might be contract creation                                                                 // 3639
        options.to = inputAddressFormatter(options.to);                                                                // 3640
    }                                                                                                                  // 3641
                                                                                                                       // 3642
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3643
        return options[key] !== undefined;                                                                             // 3644
    }).forEach(function(key){                                                                                          // 3645
        options[key] = utils.fromDecimal(options[key]);                                                                // 3646
    });                                                                                                                // 3647
                                                                                                                       // 3648
    return options;                                                                                                    // 3649
};                                                                                                                     // 3650
                                                                                                                       // 3651
/**                                                                                                                    // 3652
 * Formats the output of a transaction to its proper values                                                            // 3653
 *                                                                                                                     // 3654
 * @method outputTransactionFormatter                                                                                  // 3655
 * @param {Object} tx                                                                                                  // 3656
 * @returns {Object}                                                                                                   // 3657
*/                                                                                                                     // 3658
var outputTransactionFormatter = function (tx){                                                                        // 3659
    if(tx.blockNumber !== null)                                                                                        // 3660
        tx.blockNumber = utils.toDecimal(tx.blockNumber);                                                              // 3661
    if(tx.transactionIndex !== null)                                                                                   // 3662
        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);                                                    // 3663
    tx.nonce = utils.toDecimal(tx.nonce);                                                                              // 3664
    tx.gas = utils.toDecimal(tx.gas);                                                                                  // 3665
    tx.gasPrice = utils.toBigNumber(tx.gasPrice);                                                                      // 3666
    tx.value = utils.toBigNumber(tx.value);                                                                            // 3667
    return tx;                                                                                                         // 3668
};                                                                                                                     // 3669
                                                                                                                       // 3670
/**                                                                                                                    // 3671
 * Formats the output of a transaction receipt to its proper values                                                    // 3672
 *                                                                                                                     // 3673
 * @method outputTransactionReceiptFormatter                                                                           // 3674
 * @param {Object} receipt                                                                                             // 3675
 * @returns {Object}                                                                                                   // 3676
*/                                                                                                                     // 3677
var outputTransactionReceiptFormatter = function (receipt){                                                            // 3678
    if(receipt.blockNumber !== null)                                                                                   // 3679
        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);                                                    // 3680
    if(receipt.transactionIndex !== null)                                                                              // 3681
        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);                                          // 3682
    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);                                            // 3683
    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);                                                                // 3684
                                                                                                                       // 3685
    if(utils.isArray(receipt.logs)) {                                                                                  // 3686
        receipt.logs = receipt.logs.map(function(log){                                                                 // 3687
            return outputLogFormatter(log);                                                                            // 3688
        });                                                                                                            // 3689
    }                                                                                                                  // 3690
                                                                                                                       // 3691
    return receipt;                                                                                                    // 3692
};                                                                                                                     // 3693
                                                                                                                       // 3694
/**                                                                                                                    // 3695
 * Formats the output of a block to its proper values                                                                  // 3696
 *                                                                                                                     // 3697
 * @method outputBlockFormatter                                                                                        // 3698
 * @param {Object} block                                                                                               // 3699
 * @returns {Object}                                                                                                   // 3700
*/                                                                                                                     // 3701
var outputBlockFormatter = function(block) {                                                                           // 3702
                                                                                                                       // 3703
    // transform to number                                                                                             // 3704
    block.gasLimit = utils.toDecimal(block.gasLimit);                                                                  // 3705
    block.gasUsed = utils.toDecimal(block.gasUsed);                                                                    // 3706
    block.size = utils.toDecimal(block.size);                                                                          // 3707
    block.timestamp = utils.toDecimal(block.timestamp);                                                                // 3708
    if(block.number !== null)                                                                                          // 3709
        block.number = utils.toDecimal(block.number);                                                                  // 3710
                                                                                                                       // 3711
    block.difficulty = utils.toBigNumber(block.difficulty);                                                            // 3712
    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);                                                  // 3713
                                                                                                                       // 3714
    if (utils.isArray(block.transactions)) {                                                                           // 3715
        block.transactions.forEach(function(item){                                                                     // 3716
            if(!utils.isString(item))                                                                                  // 3717
                return outputTransactionFormatter(item);                                                               // 3718
        });                                                                                                            // 3719
    }                                                                                                                  // 3720
                                                                                                                       // 3721
    return block;                                                                                                      // 3722
};                                                                                                                     // 3723
                                                                                                                       // 3724
/**                                                                                                                    // 3725
 * Formats the output of a log                                                                                         // 3726
 *                                                                                                                     // 3727
 * @method outputLogFormatter                                                                                          // 3728
 * @param {Object} log object                                                                                          // 3729
 * @returns {Object} log                                                                                               // 3730
*/                                                                                                                     // 3731
var outputLogFormatter = function(log) {                                                                               // 3732
    if(log.blockNumber !== null)                                                                                       // 3733
        log.blockNumber = utils.toDecimal(log.blockNumber);                                                            // 3734
    if(log.transactionIndex !== null)                                                                                  // 3735
        log.transactionIndex = utils.toDecimal(log.transactionIndex);                                                  // 3736
    if(log.logIndex !== null)                                                                                          // 3737
        log.logIndex = utils.toDecimal(log.logIndex);                                                                  // 3738
                                                                                                                       // 3739
    return log;                                                                                                        // 3740
};                                                                                                                     // 3741
                                                                                                                       // 3742
/**                                                                                                                    // 3743
 * Formats the input of a whisper post and converts all values to HEX                                                  // 3744
 *                                                                                                                     // 3745
 * @method inputPostFormatter                                                                                          // 3746
 * @param {Object} transaction object                                                                                  // 3747
 * @returns {Object}                                                                                                   // 3748
*/                                                                                                                     // 3749
var inputPostFormatter = function(post) {                                                                              // 3750
                                                                                                                       // 3751
    post.payload = utils.toHex(post.payload);                                                                          // 3752
    post.ttl = utils.fromDecimal(post.ttl);                                                                            // 3753
    post.workToProve = utils.fromDecimal(post.workToProve);                                                            // 3754
    post.priority = utils.fromDecimal(post.priority);                                                                  // 3755
                                                                                                                       // 3756
    // fallback                                                                                                        // 3757
    if (!utils.isArray(post.topics)) {                                                                                 // 3758
        post.topics = post.topics ? [post.topics] : [];                                                                // 3759
    }                                                                                                                  // 3760
                                                                                                                       // 3761
    // format the following options                                                                                    // 3762
    post.topics = post.topics.map(function(topic){                                                                     // 3763
        return utils.fromUtf8(topic);                                                                                  // 3764
    });                                                                                                                // 3765
                                                                                                                       // 3766
    return post;                                                                                                       // 3767
};                                                                                                                     // 3768
                                                                                                                       // 3769
/**                                                                                                                    // 3770
 * Formats the output of a received post message                                                                       // 3771
 *                                                                                                                     // 3772
 * @method outputPostFormatter                                                                                         // 3773
 * @param {Object}                                                                                                     // 3774
 * @returns {Object}                                                                                                   // 3775
 */                                                                                                                    // 3776
var outputPostFormatter = function(post){                                                                              // 3777
                                                                                                                       // 3778
    post.expiry = utils.toDecimal(post.expiry);                                                                        // 3779
    post.sent = utils.toDecimal(post.sent);                                                                            // 3780
    post.ttl = utils.toDecimal(post.ttl);                                                                              // 3781
    post.workProved = utils.toDecimal(post.workProved);                                                                // 3782
    post.payloadRaw = post.payload;                                                                                    // 3783
    post.payload = utils.toUtf8(post.payload);                                                                         // 3784
                                                                                                                       // 3785
    if (utils.isJson(post.payload)) {                                                                                  // 3786
        post.payload = JSON.parse(post.payload);                                                                       // 3787
    }                                                                                                                  // 3788
                                                                                                                       // 3789
    // format the following options                                                                                    // 3790
    if (!post.topics) {                                                                                                // 3791
        post.topics = [];                                                                                              // 3792
    }                                                                                                                  // 3793
    post.topics = post.topics.map(function(topic){                                                                     // 3794
        return utils.toUtf8(topic);                                                                                    // 3795
    });                                                                                                                // 3796
                                                                                                                       // 3797
    return post;                                                                                                       // 3798
};                                                                                                                     // 3799
                                                                                                                       // 3800
var inputAddressFormatter = function (address) {                                                                       // 3801
    var iban = new Iban(address);                                                                                      // 3802
    if (iban.isValid() && iban.isDirect()) {                                                                           // 3803
        return '0x' + iban.address();                                                                                  // 3804
    } else if (utils.isStrictAddress(address)) {                                                                       // 3805
        return address;                                                                                                // 3806
    } else if (utils.isAddress(address)) {                                                                             // 3807
        return '0x' + address;                                                                                         // 3808
    }                                                                                                                  // 3809
    throw 'invalid address';                                                                                           // 3810
};                                                                                                                     // 3811
                                                                                                                       // 3812
                                                                                                                       // 3813
var outputSyncingFormatter = function(result) {                                                                        // 3814
                                                                                                                       // 3815
    result.startingBlock = utils.toDecimal(result.startingBlock);                                                      // 3816
    result.currentBlock = utils.toDecimal(result.currentBlock);                                                        // 3817
    result.highestBlock = utils.toDecimal(result.highestBlock);                                                        // 3818
                                                                                                                       // 3819
    return result;                                                                                                     // 3820
};                                                                                                                     // 3821
                                                                                                                       // 3822
module.exports = {                                                                                                     // 3823
    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,                                                // 3824
    inputBlockNumberFormatter: inputBlockNumberFormatter,                                                              // 3825
    inputCallFormatter: inputCallFormatter,                                                                            // 3826
    inputTransactionFormatter: inputTransactionFormatter,                                                              // 3827
    inputAddressFormatter: inputAddressFormatter,                                                                      // 3828
    inputPostFormatter: inputPostFormatter,                                                                            // 3829
    outputBigNumberFormatter: outputBigNumberFormatter,                                                                // 3830
    outputTransactionFormatter: outputTransactionFormatter,                                                            // 3831
    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,                                              // 3832
    outputBlockFormatter: outputBlockFormatter,                                                                        // 3833
    outputLogFormatter: outputLogFormatter,                                                                            // 3834
    outputPostFormatter: outputPostFormatter,                                                                          // 3835
    outputSyncingFormatter: outputSyncingFormatter                                                                     // 3836
};                                                                                                                     // 3837
                                                                                                                       // 3838
                                                                                                                       // 3839
},{"../utils/config":18,"../utils/utils":20,"./iban":33}],31:[function(require,module,exports){                        // 3840
/*                                                                                                                     // 3841
    This file is part of web3.js.                                                                                      // 3842
                                                                                                                       // 3843
    web3.js is free software: you can redistribute it and/or modify                                                    // 3844
    it under the terms of the GNU Lesser General Public License as published by                                        // 3845
    the Free Software Foundation, either version 3 of the License, or                                                  // 3846
    (at your option) any later version.                                                                                // 3847
                                                                                                                       // 3848
    web3.js is distributed in the hope that it will be useful,                                                         // 3849
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3850
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3851
    GNU Lesser General Public License for more details.                                                                // 3852
                                                                                                                       // 3853
    You should have received a copy of the GNU Lesser General Public License                                           // 3854
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3855
*/                                                                                                                     // 3856
/**                                                                                                                    // 3857
 * @file function.js                                                                                                   // 3858
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3859
 * @date 2015                                                                                                          // 3860
 */                                                                                                                    // 3861
                                                                                                                       // 3862
var coder = require('../solidity/coder');                                                                              // 3863
var utils = require('../utils/utils');                                                                                 // 3864
var formatters = require('./formatters');                                                                              // 3865
var sha3 = require('../utils/sha3');                                                                                   // 3866
                                                                                                                       // 3867
/**                                                                                                                    // 3868
 * This prototype should be used to call/sendTransaction to solidity functions                                         // 3869
 */                                                                                                                    // 3870
var SolidityFunction = function (eth, json, address) {                                                                 // 3871
    this._eth = eth;                                                                                                   // 3872
    this._inputTypes = json.inputs.map(function (i) {                                                                  // 3873
        return i.type;                                                                                                 // 3874
    });                                                                                                                // 3875
    this._outputTypes = json.outputs.map(function (i) {                                                                // 3876
        return i.type;                                                                                                 // 3877
    });                                                                                                                // 3878
    this._constant = json.constant;                                                                                    // 3879
    this._name = utils.transformToFullName(json);                                                                      // 3880
    this._address = address;                                                                                           // 3881
};                                                                                                                     // 3882
                                                                                                                       // 3883
SolidityFunction.prototype.extractCallback = function (args) {                                                         // 3884
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 3885
        return args.pop(); // modify the args array!                                                                   // 3886
    }                                                                                                                  // 3887
};                                                                                                                     // 3888
                                                                                                                       // 3889
SolidityFunction.prototype.extractDefaultBlock = function (args) {                                                     // 3890
    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {                              // 3891
        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!                      // 3892
    }                                                                                                                  // 3893
};                                                                                                                     // 3894
                                                                                                                       // 3895
/**                                                                                                                    // 3896
 * Should be used to create payload from arguments                                                                     // 3897
 *                                                                                                                     // 3898
 * @method toPayload                                                                                                   // 3899
 * @param {Array} solidity function params                                                                             // 3900
 * @param {Object} optional payload options                                                                            // 3901
 */                                                                                                                    // 3902
SolidityFunction.prototype.toPayload = function (args) {                                                               // 3903
    var options = {};                                                                                                  // 3904
    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {                               // 3905
        options = args[args.length - 1];                                                                               // 3906
    }                                                                                                                  // 3907
    options.to = this._address;                                                                                        // 3908
    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);                               // 3909
    return options;                                                                                                    // 3910
};                                                                                                                     // 3911
                                                                                                                       // 3912
/**                                                                                                                    // 3913
 * Should be used to get function signature                                                                            // 3914
 *                                                                                                                     // 3915
 * @method signature                                                                                                   // 3916
 * @return {String} function signature                                                                                 // 3917
 */                                                                                                                    // 3918
SolidityFunction.prototype.signature = function () {                                                                   // 3919
    return sha3(this._name).slice(0, 8);                                                                               // 3920
};                                                                                                                     // 3921
                                                                                                                       // 3922
                                                                                                                       // 3923
SolidityFunction.prototype.unpackOutput = function (output) {                                                          // 3924
    if (!output) {                                                                                                     // 3925
        return;                                                                                                        // 3926
    }                                                                                                                  // 3927
                                                                                                                       // 3928
    output = output.length >= 2 ? output.slice(2) : output;                                                            // 3929
    var result = coder.decodeParams(this._outputTypes, output);                                                        // 3930
    return result.length === 1 ? result[0] : result;                                                                   // 3931
};                                                                                                                     // 3932
                                                                                                                       // 3933
/**                                                                                                                    // 3934
 * Calls a contract function.                                                                                          // 3935
 *                                                                                                                     // 3936
 * @method call                                                                                                        // 3937
 * @param {...Object} Contract function arguments                                                                      // 3938
 * @param {function} If the last argument is a function, the contract function                                         // 3939
 *   call will be asynchronous, and the callback will be passed the                                                    // 3940
 *   error and result.                                                                                                 // 3941
 * @return {String} output bytes                                                                                       // 3942
 */                                                                                                                    // 3943
SolidityFunction.prototype.call = function () {                                                                        // 3944
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 3945
    var callback = this.extractCallback(args);                                                                         // 3946
    var defaultBlock = this.extractDefaultBlock(args);                                                                 // 3947
    var payload = this.toPayload(args);                                                                                // 3948
                                                                                                                       // 3949
                                                                                                                       // 3950
    if (!callback) {                                                                                                   // 3951
        var output = this._eth.call(payload, defaultBlock);                                                            // 3952
        return this.unpackOutput(output);                                                                              // 3953
    }                                                                                                                  // 3954
                                                                                                                       // 3955
    var self = this;                                                                                                   // 3956
    this._eth.call(payload, defaultBlock, function (error, output) {                                                   // 3957
        callback(error, self.unpackOutput(output));                                                                    // 3958
    });                                                                                                                // 3959
};                                                                                                                     // 3960
                                                                                                                       // 3961
/**                                                                                                                    // 3962
 * Should be used to sendTransaction to solidity function                                                              // 3963
 *                                                                                                                     // 3964
 * @method sendTransaction                                                                                             // 3965
 */                                                                                                                    // 3966
SolidityFunction.prototype.sendTransaction = function () {                                                             // 3967
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 3968
    var callback = this.extractCallback(args);                                                                         // 3969
    var payload = this.toPayload(args);                                                                                // 3970
                                                                                                                       // 3971
    if (!callback) {                                                                                                   // 3972
        return this._eth.sendTransaction(payload);                                                                     // 3973
    }                                                                                                                  // 3974
                                                                                                                       // 3975
    this._eth.sendTransaction(payload, callback);                                                                      // 3976
};                                                                                                                     // 3977
                                                                                                                       // 3978
/**                                                                                                                    // 3979
 * Should be used to estimateGas of solidity function                                                                  // 3980
 *                                                                                                                     // 3981
 * @method estimateGas                                                                                                 // 3982
 */                                                                                                                    // 3983
SolidityFunction.prototype.estimateGas = function () {                                                                 // 3984
    var args = Array.prototype.slice.call(arguments);                                                                  // 3985
    var callback = this.extractCallback(args);                                                                         // 3986
    var payload = this.toPayload(args);                                                                                // 3987
                                                                                                                       // 3988
    if (!callback) {                                                                                                   // 3989
        return this._eth.estimateGas(payload);                                                                         // 3990
    }                                                                                                                  // 3991
                                                                                                                       // 3992
    this._eth.estimateGas(payload, callback);                                                                          // 3993
};                                                                                                                     // 3994
                                                                                                                       // 3995
/**                                                                                                                    // 3996
 * Return the encoded data of the call                                                                                 // 3997
 *                                                                                                                     // 3998
 * @method getData                                                                                                     // 3999
 * @return {String} the encoded data                                                                                   // 4000
 */                                                                                                                    // 4001
SolidityFunction.prototype.getData = function () {                                                                     // 4002
    var args = Array.prototype.slice.call(arguments);                                                                  // 4003
    var payload = this.toPayload(args);                                                                                // 4004
                                                                                                                       // 4005
    return payload.data;                                                                                               // 4006
};                                                                                                                     // 4007
                                                                                                                       // 4008
/**                                                                                                                    // 4009
 * Should be used to get function display name                                                                         // 4010
 *                                                                                                                     // 4011
 * @method displayName                                                                                                 // 4012
 * @return {String} display name of the function                                                                       // 4013
 */                                                                                                                    // 4014
SolidityFunction.prototype.displayName = function () {                                                                 // 4015
    return utils.extractDisplayName(this._name);                                                                       // 4016
};                                                                                                                     // 4017
                                                                                                                       // 4018
/**                                                                                                                    // 4019
 * Should be used to get function type name                                                                            // 4020
 *                                                                                                                     // 4021
 * @method typeName                                                                                                    // 4022
 * @return {String} type name of the function                                                                          // 4023
 */                                                                                                                    // 4024
SolidityFunction.prototype.typeName = function () {                                                                    // 4025
    return utils.extractTypeName(this._name);                                                                          // 4026
};                                                                                                                     // 4027
                                                                                                                       // 4028
/**                                                                                                                    // 4029
 * Should be called to get rpc requests from solidity function                                                         // 4030
 *                                                                                                                     // 4031
 * @method request                                                                                                     // 4032
 * @returns {Object}                                                                                                   // 4033
 */                                                                                                                    // 4034
SolidityFunction.prototype.request = function () {                                                                     // 4035
    var args = Array.prototype.slice.call(arguments);                                                                  // 4036
    var callback = this.extractCallback(args);                                                                         // 4037
    var payload = this.toPayload(args);                                                                                // 4038
    var format = this.unpackOutput.bind(this);                                                                         // 4039
                                                                                                                       // 4040
    return {                                                                                                           // 4041
        method: this._constant ? 'eth_call' : 'eth_sendTransaction',                                                   // 4042
        callback: callback,                                                                                            // 4043
        params: [payload],                                                                                             // 4044
        format: format                                                                                                 // 4045
    };                                                                                                                 // 4046
};                                                                                                                     // 4047
                                                                                                                       // 4048
/**                                                                                                                    // 4049
 * Should be called to execute function                                                                                // 4050
 *                                                                                                                     // 4051
 * @method execute                                                                                                     // 4052
 */                                                                                                                    // 4053
SolidityFunction.prototype.execute = function () {                                                                     // 4054
    var transaction = !this._constant;                                                                                 // 4055
                                                                                                                       // 4056
    // send transaction                                                                                                // 4057
    if (transaction) {                                                                                                 // 4058
        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));                                // 4059
    }                                                                                                                  // 4060
                                                                                                                       // 4061
    // call                                                                                                            // 4062
    return this.call.apply(this, Array.prototype.slice.call(arguments));                                               // 4063
};                                                                                                                     // 4064
                                                                                                                       // 4065
/**                                                                                                                    // 4066
 * Should be called to attach function to contract                                                                     // 4067
 *                                                                                                                     // 4068
 * @method attachToContract                                                                                            // 4069
 * @param {Contract}                                                                                                   // 4070
 */                                                                                                                    // 4071
SolidityFunction.prototype.attachToContract = function (contract) {                                                    // 4072
    var execute = this.execute.bind(this);                                                                             // 4073
    execute.request = this.request.bind(this);                                                                         // 4074
    execute.call = this.call.bind(this);                                                                               // 4075
    execute.sendTransaction = this.sendTransaction.bind(this);                                                         // 4076
    execute.estimateGas = this.estimateGas.bind(this);                                                                 // 4077
    execute.getData = this.getData.bind(this);                                                                         // 4078
    var displayName = this.displayName();                                                                              // 4079
    if (!contract[displayName]) {                                                                                      // 4080
        contract[displayName] = execute;                                                                               // 4081
    }                                                                                                                  // 4082
    contract[displayName][this.typeName()] = execute; // circular!!!!                                                  // 4083
};                                                                                                                     // 4084
                                                                                                                       // 4085
module.exports = SolidityFunction;                                                                                     // 4086
                                                                                                                       // 4087
                                                                                                                       // 4088
},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./formatters":30}],32:[function(require,module,exports){
/*                                                                                                                     // 4090
    This file is part of web3.js.                                                                                      // 4091
                                                                                                                       // 4092
    web3.js is free software: you can redistribute it and/or modify                                                    // 4093
    it under the terms of the GNU Lesser General Public License as published by                                        // 4094
    the Free Software Foundation, either version 3 of the License, or                                                  // 4095
    (at your option) any later version.                                                                                // 4096
                                                                                                                       // 4097
    web3.js is distributed in the hope that it will be useful,                                                         // 4098
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4099
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4100
    GNU Lesser General Public License for more details.                                                                // 4101
                                                                                                                       // 4102
    You should have received a copy of the GNU Lesser General Public License                                           // 4103
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4104
*/                                                                                                                     // 4105
/** @file httpprovider.js                                                                                              // 4106
 * @authors:                                                                                                           // 4107
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4108
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 4109
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4110
 * @date 2015                                                                                                          // 4111
 */                                                                                                                    // 4112
                                                                                                                       // 4113
"use strict";                                                                                                          // 4114
                                                                                                                       // 4115
var errors = require('./errors');                                                                                      // 4116
                                                                                                                       // 4117
// workaround to use httpprovider in different envs                                                                    // 4118
var XMLHttpRequest; // jshint ignore: line                                                                             // 4119
                                                                                                                       // 4120
// meteor server environment                                                                                           // 4121
if (typeof Meteor !== 'undefined' && Meteor.isServer) { // jshint ignore: line                                         // 4122
    XMLHttpRequest = Npm.require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                              // 4123
                                                                                                                       // 4124
// browser                                                                                                             // 4125
} else if (typeof window !== 'undefined' && window.XMLHttpRequest) {                                                   // 4126
    XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line                                                     // 4127
                                                                                                                       // 4128
// node                                                                                                                // 4129
} else {                                                                                                               // 4130
    XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                                  // 4131
}                                                                                                                      // 4132
                                                                                                                       // 4133
/**                                                                                                                    // 4134
 * HttpProvider should be used to send rpc calls over http                                                             // 4135
 */                                                                                                                    // 4136
var HttpProvider = function (host) {                                                                                   // 4137
    this.host = host || 'http://localhost:8545';                                                                       // 4138
};                                                                                                                     // 4139
                                                                                                                       // 4140
/**                                                                                                                    // 4141
 * Should be called to prepare new XMLHttpRequest                                                                      // 4142
 *                                                                                                                     // 4143
 * @method prepareRequest                                                                                              // 4144
 * @param {Boolean} true if request should be async                                                                    // 4145
 * @return {XMLHttpRequest} object                                                                                     // 4146
 */                                                                                                                    // 4147
HttpProvider.prototype.prepareRequest = function (async) {                                                             // 4148
    var request = new XMLHttpRequest();                                                                                // 4149
    request.open('POST', this.host, async);                                                                            // 4150
    request.setRequestHeader('Content-Type','application/json');                                                       // 4151
    return request;                                                                                                    // 4152
};                                                                                                                     // 4153
                                                                                                                       // 4154
/**                                                                                                                    // 4155
 * Should be called to make sync request                                                                               // 4156
 *                                                                                                                     // 4157
 * @method send                                                                                                        // 4158
 * @param {Object} payload                                                                                             // 4159
 * @return {Object} result                                                                                             // 4160
 */                                                                                                                    // 4161
HttpProvider.prototype.send = function (payload) {                                                                     // 4162
    var request = this.prepareRequest(false);                                                                          // 4163
                                                                                                                       // 4164
    try {                                                                                                              // 4165
        request.send(JSON.stringify(payload));                                                                         // 4166
    } catch(error) {                                                                                                   // 4167
        throw errors.InvalidConnection(this.host);                                                                     // 4168
    }                                                                                                                  // 4169
                                                                                                                       // 4170
    var result = request.responseText;                                                                                 // 4171
                                                                                                                       // 4172
    try {                                                                                                              // 4173
        result = JSON.parse(result);                                                                                   // 4174
    } catch(e) {                                                                                                       // 4175
        throw errors.InvalidResponse(request.responseText);                                                            // 4176
    }                                                                                                                  // 4177
                                                                                                                       // 4178
    return result;                                                                                                     // 4179
};                                                                                                                     // 4180
                                                                                                                       // 4181
/**                                                                                                                    // 4182
 * Should be used to make async request                                                                                // 4183
 *                                                                                                                     // 4184
 * @method sendAsync                                                                                                   // 4185
 * @param {Object} payload                                                                                             // 4186
 * @param {Function} callback triggered on end with (err, result)                                                      // 4187
 */                                                                                                                    // 4188
HttpProvider.prototype.sendAsync = function (payload, callback) {                                                      // 4189
    var request = this.prepareRequest(true);                                                                           // 4190
                                                                                                                       // 4191
    request.onreadystatechange = function() {                                                                          // 4192
        if (request.readyState === 4) {                                                                                // 4193
            var result = request.responseText;                                                                         // 4194
            var error = null;                                                                                          // 4195
                                                                                                                       // 4196
            try {                                                                                                      // 4197
                result = JSON.parse(result);                                                                           // 4198
            } catch(e) {                                                                                               // 4199
                error = errors.InvalidResponse(request.responseText);                                                  // 4200
            }                                                                                                          // 4201
                                                                                                                       // 4202
            callback(error, result);                                                                                   // 4203
        }                                                                                                              // 4204
    };                                                                                                                 // 4205
                                                                                                                       // 4206
    try {                                                                                                              // 4207
        request.send(JSON.stringify(payload));                                                                         // 4208
    } catch(error) {                                                                                                   // 4209
        callback(errors.InvalidConnection(this.host));                                                                 // 4210
    }                                                                                                                  // 4211
};                                                                                                                     // 4212
                                                                                                                       // 4213
/**                                                                                                                    // 4214
 * Synchronously tries to make Http request                                                                            // 4215
 *                                                                                                                     // 4216
 * @method isConnected                                                                                                 // 4217
 * @return {Boolean} returns true if request haven't failed. Otherwise false                                           // 4218
 */                                                                                                                    // 4219
HttpProvider.prototype.isConnected = function() {                                                                      // 4220
    try {                                                                                                              // 4221
        this.send({                                                                                                    // 4222
            id: 9999999999,                                                                                            // 4223
            jsonrpc: '2.0',                                                                                            // 4224
            method: 'net_listening',                                                                                   // 4225
            params: []                                                                                                 // 4226
        });                                                                                                            // 4227
        return true;                                                                                                   // 4228
    } catch(e) {                                                                                                       // 4229
        return false;                                                                                                  // 4230
    }                                                                                                                  // 4231
};                                                                                                                     // 4232
                                                                                                                       // 4233
module.exports = HttpProvider;                                                                                         // 4234
                                                                                                                       // 4235
                                                                                                                       // 4236
},{"./errors":26,"xmlhttprequest":17}],33:[function(require,module,exports){                                           // 4237
/*                                                                                                                     // 4238
    This file is part of web3.js.                                                                                      // 4239
                                                                                                                       // 4240
    web3.js is free software: you can redistribute it and/or modify                                                    // 4241
    it under the terms of the GNU Lesser General Public License as published by                                        // 4242
    the Free Software Foundation, either version 3 of the License, or                                                  // 4243
    (at your option) any later version.                                                                                // 4244
                                                                                                                       // 4245
    web3.js is distributed in the hope that it will be useful,                                                         // 4246
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4247
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4248
    GNU Lesser General Public License for more details.                                                                // 4249
                                                                                                                       // 4250
    You should have received a copy of the GNU Lesser General Public License                                           // 4251
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4252
*/                                                                                                                     // 4253
/**                                                                                                                    // 4254
 * @file iban.js                                                                                                       // 4255
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4256
 * @date 2015                                                                                                          // 4257
 */                                                                                                                    // 4258
                                                                                                                       // 4259
var BigNumber = require('bignumber.js');                                                                               // 4260
                                                                                                                       // 4261
var padLeft = function (string, bytes) {                                                                               // 4262
    var result = string;                                                                                               // 4263
    while (result.length < bytes * 2) {                                                                                // 4264
        result = '00' + result;                                                                                        // 4265
    }                                                                                                                  // 4266
    return result;                                                                                                     // 4267
};                                                                                                                     // 4268
                                                                                                                       // 4269
/**                                                                                                                    // 4270
 * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to       // 4271
 * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.                                                    // 4272
 *                                                                                                                     // 4273
 * @method iso13616Prepare                                                                                             // 4274
 * @param {String} iban the IBAN                                                                                       // 4275
 * @returns {String} the prepared IBAN                                                                                 // 4276
 */                                                                                                                    // 4277
var iso13616Prepare = function (iban) {                                                                                // 4278
    var A = 'A'.charCodeAt(0);                                                                                         // 4279
    var Z = 'Z'.charCodeAt(0);                                                                                         // 4280
                                                                                                                       // 4281
    iban = iban.toUpperCase();                                                                                         // 4282
    iban = iban.substr(4) + iban.substr(0,4);                                                                          // 4283
                                                                                                                       // 4284
    return iban.split('').map(function(n){                                                                             // 4285
        var code = n.charCodeAt(0);                                                                                    // 4286
        if (code >= A && code <= Z){                                                                                   // 4287
            // A = 10, B = 11, ... Z = 35                                                                              // 4288
            return code - A + 10;                                                                                      // 4289
        } else {                                                                                                       // 4290
            return n;                                                                                                  // 4291
        }                                                                                                              // 4292
    }).join('');                                                                                                       // 4293
};                                                                                                                     // 4294
                                                                                                                       // 4295
/**                                                                                                                    // 4296
 * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.                                                // 4297
 *                                                                                                                     // 4298
 * @method mod9710                                                                                                     // 4299
 * @param {String} iban                                                                                                // 4300
 * @returns {Number}                                                                                                   // 4301
 */                                                                                                                    // 4302
var mod9710 = function (iban) {                                                                                        // 4303
    var remainder = iban,                                                                                              // 4304
        block;                                                                                                         // 4305
                                                                                                                       // 4306
    while (remainder.length > 2){                                                                                      // 4307
        block = remainder.slice(0, 9);                                                                                 // 4308
        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);                                          // 4309
    }                                                                                                                  // 4310
                                                                                                                       // 4311
    return parseInt(remainder, 10) % 97;                                                                               // 4312
};                                                                                                                     // 4313
                                                                                                                       // 4314
/**                                                                                                                    // 4315
 * This prototype should be used to create iban object from iban correct string                                        // 4316
 *                                                                                                                     // 4317
 * @param {String} iban                                                                                                // 4318
 */                                                                                                                    // 4319
var Iban = function (iban) {                                                                                           // 4320
    this._iban = iban;                                                                                                 // 4321
};                                                                                                                     // 4322
                                                                                                                       // 4323
/**                                                                                                                    // 4324
 * This method should be used to create iban object from ethereum address                                              // 4325
 *                                                                                                                     // 4326
 * @method fromAddress                                                                                                 // 4327
 * @param {String} address                                                                                             // 4328
 * @return {Iban} the IBAN object                                                                                      // 4329
 */                                                                                                                    // 4330
Iban.fromAddress = function (address) {                                                                                // 4331
    var asBn = new BigNumber(address, 16);                                                                             // 4332
    var base36 = asBn.toString(36);                                                                                    // 4333
    var padded = padLeft(base36, 15);                                                                                  // 4334
    return Iban.fromBban(padded.toUpperCase());                                                                        // 4335
};                                                                                                                     // 4336
                                                                                                                       // 4337
/**                                                                                                                    // 4338
 * Convert the passed BBAN to an IBAN for this country specification.                                                  // 4339
 * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
 * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
 *                                                                                                                     // 4342
 * @method fromBban                                                                                                    // 4343
 * @param {String} bban the BBAN to convert to IBAN                                                                    // 4344
 * @returns {Iban} the IBAN object                                                                                     // 4345
 */                                                                                                                    // 4346
Iban.fromBban = function (bban) {                                                                                      // 4347
    var countryCode = 'XE';                                                                                            // 4348
                                                                                                                       // 4349
    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));                                               // 4350
    var checkDigit = ('0' + (98 - remainder)).slice(-2);                                                               // 4351
                                                                                                                       // 4352
    return new Iban(countryCode + checkDigit + bban);                                                                  // 4353
};                                                                                                                     // 4354
                                                                                                                       // 4355
/**                                                                                                                    // 4356
 * Should be used to create IBAN object for given institution and identifier                                           // 4357
 *                                                                                                                     // 4358
 * @method createIndirect                                                                                              // 4359
 * @param {Object} options, required options are "institution" and "identifier"                                        // 4360
 * @return {Iban} the IBAN object                                                                                      // 4361
 */                                                                                                                    // 4362
Iban.createIndirect = function (options) {                                                                             // 4363
    return Iban.fromBban('ETH' + options.institution + options.identifier);                                            // 4364
};                                                                                                                     // 4365
                                                                                                                       // 4366
/**                                                                                                                    // 4367
 * Thos method should be used to check if given string is valid iban object                                            // 4368
 *                                                                                                                     // 4369
 * @method isValid                                                                                                     // 4370
 * @param {String} iban string                                                                                         // 4371
 * @return {Boolean} true if it is valid IBAN                                                                          // 4372
 */                                                                                                                    // 4373
Iban.isValid = function (iban) {                                                                                       // 4374
    var i = new Iban(iban);                                                                                            // 4375
    return i.isValid();                                                                                                // 4376
};                                                                                                                     // 4377
                                                                                                                       // 4378
/**                                                                                                                    // 4379
 * Should be called to check if iban is correct                                                                        // 4380
 *                                                                                                                     // 4381
 * @method isValid                                                                                                     // 4382
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4383
 */                                                                                                                    // 4384
Iban.prototype.isValid = function () {                                                                                 // 4385
    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&                                         // 4386
        mod9710(iso13616Prepare(this._iban)) === 1;                                                                    // 4387
};                                                                                                                     // 4388
                                                                                                                       // 4389
/**                                                                                                                    // 4390
 * Should be called to check if iban number is direct                                                                  // 4391
 *                                                                                                                     // 4392
 * @method isDirect                                                                                                    // 4393
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4394
 */                                                                                                                    // 4395
Iban.prototype.isDirect = function () {                                                                                // 4396
    return this._iban.length === 34 || this._iban.length === 35;                                                       // 4397
};                                                                                                                     // 4398
                                                                                                                       // 4399
/**                                                                                                                    // 4400
 * Should be called to check if iban number if indirect                                                                // 4401
 *                                                                                                                     // 4402
 * @method isIndirect                                                                                                  // 4403
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4404
 */                                                                                                                    // 4405
Iban.prototype.isIndirect = function () {                                                                              // 4406
    return this._iban.length === 20;                                                                                   // 4407
};                                                                                                                     // 4408
                                                                                                                       // 4409
/**                                                                                                                    // 4410
 * Should be called to get iban checksum                                                                               // 4411
 * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)                                                        // 4412
 *                                                                                                                     // 4413
 * @method checksum                                                                                                    // 4414
 * @returns {String} checksum                                                                                          // 4415
 */                                                                                                                    // 4416
Iban.prototype.checksum = function () {                                                                                // 4417
    return this._iban.substr(2, 2);                                                                                    // 4418
};                                                                                                                     // 4419
                                                                                                                       // 4420
/**                                                                                                                    // 4421
 * Should be called to get institution identifier                                                                      // 4422
 * eg. XREG                                                                                                            // 4423
 *                                                                                                                     // 4424
 * @method institution                                                                                                 // 4425
 * @returns {String} institution identifier                                                                            // 4426
 */                                                                                                                    // 4427
Iban.prototype.institution = function () {                                                                             // 4428
    return this.isIndirect() ? this._iban.substr(7, 4) : '';                                                           // 4429
};                                                                                                                     // 4430
                                                                                                                       // 4431
/**                                                                                                                    // 4432
 * Should be called to get client identifier within institution                                                        // 4433
 * eg. GAVOFYORK                                                                                                       // 4434
 *                                                                                                                     // 4435
 * @method client                                                                                                      // 4436
 * @returns {String} client identifier                                                                                 // 4437
 */                                                                                                                    // 4438
Iban.prototype.client = function () {                                                                                  // 4439
    return this.isIndirect() ? this._iban.substr(11) : '';                                                             // 4440
};                                                                                                                     // 4441
                                                                                                                       // 4442
/**                                                                                                                    // 4443
 * Should be called to get client direct address                                                                       // 4444
 *                                                                                                                     // 4445
 * @method address                                                                                                     // 4446
 * @returns {String} client direct address                                                                             // 4447
 */                                                                                                                    // 4448
Iban.prototype.address = function () {                                                                                 // 4449
    if (this.isDirect()) {                                                                                             // 4450
        var base36 = this._iban.substr(4);                                                                             // 4451
        var asBn = new BigNumber(base36, 36);                                                                          // 4452
        return padLeft(asBn.toString(16), 20);                                                                         // 4453
    }                                                                                                                  // 4454
                                                                                                                       // 4455
    return '';                                                                                                         // 4456
};                                                                                                                     // 4457
                                                                                                                       // 4458
Iban.prototype.toString = function () {                                                                                // 4459
    return this._iban;                                                                                                 // 4460
};                                                                                                                     // 4461
                                                                                                                       // 4462
module.exports = Iban;                                                                                                 // 4463
                                                                                                                       // 4464
                                                                                                                       // 4465
},{"bignumber.js":"bignumber.js"}],34:[function(require,module,exports){                                               // 4466
/*                                                                                                                     // 4467
    This file is part of web3.js.                                                                                      // 4468
                                                                                                                       // 4469
    web3.js is free software: you can redistribute it and/or modify                                                    // 4470
    it under the terms of the GNU Lesser General Public License as published by                                        // 4471
    the Free Software Foundation, either version 3 of the License, or                                                  // 4472
    (at your option) any later version.                                                                                // 4473
                                                                                                                       // 4474
    web3.js is distributed in the hope that it will be useful,                                                         // 4475
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4476
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4477
    GNU Lesser General Public License for more details.                                                                // 4478
                                                                                                                       // 4479
    You should have received a copy of the GNU Lesser General Public License                                           // 4480
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4481
*/                                                                                                                     // 4482
/** @file ipcprovider.js                                                                                               // 4483
 * @authors:                                                                                                           // 4484
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4485
 * @date 2015                                                                                                          // 4486
 */                                                                                                                    // 4487
                                                                                                                       // 4488
"use strict";                                                                                                          // 4489
                                                                                                                       // 4490
var utils = require('../utils/utils');                                                                                 // 4491
var errors = require('./errors');                                                                                      // 4492
                                                                                                                       // 4493
                                                                                                                       // 4494
var IpcProvider = function (path, net) {                                                                               // 4495
    var _this = this;                                                                                                  // 4496
    this.responseCallbacks = {};                                                                                       // 4497
    this.path = path;                                                                                                  // 4498
                                                                                                                       // 4499
    this.connection = net.connect({path: this.path});                                                                  // 4500
                                                                                                                       // 4501
    this.connection.on('error', function(e){                                                                           // 4502
        console.error('IPC Connection Error', e);                                                                      // 4503
        _this._timeout();                                                                                              // 4504
    });                                                                                                                // 4505
                                                                                                                       // 4506
    this.connection.on('end', function(){                                                                              // 4507
        _this._timeout();                                                                                              // 4508
    });                                                                                                                // 4509
                                                                                                                       // 4510
                                                                                                                       // 4511
    // LISTEN FOR CONNECTION RESPONSES                                                                                 // 4512
    this.connection.on('data', function(data) {                                                                        // 4513
        /*jshint maxcomplexity: 6 */                                                                                   // 4514
                                                                                                                       // 4515
        _this._parseResponse(data.toString()).forEach(function(result){                                                // 4516
                                                                                                                       // 4517
            var id = null;                                                                                             // 4518
                                                                                                                       // 4519
            // get the id which matches the returned id                                                                // 4520
            if(utils.isArray(result)) {                                                                                // 4521
                result.forEach(function(load){                                                                         // 4522
                    if(_this.responseCallbacks[load.id])                                                               // 4523
                        id = load.id;                                                                                  // 4524
                });                                                                                                    // 4525
            } else {                                                                                                   // 4526
                id = result.id;                                                                                        // 4527
            }                                                                                                          // 4528
                                                                                                                       // 4529
            // fire the callback                                                                                       // 4530
            if(_this.responseCallbacks[id]) {                                                                          // 4531
                _this.responseCallbacks[id](null, result);                                                             // 4532
                delete _this.responseCallbacks[id];                                                                    // 4533
            }                                                                                                          // 4534
        });                                                                                                            // 4535
    });                                                                                                                // 4536
};                                                                                                                     // 4537
                                                                                                                       // 4538
/**                                                                                                                    // 4539
Will parse the response and make an array out of it.                                                                   // 4540
                                                                                                                       // 4541
@method _parseResponse                                                                                                 // 4542
@param {String} data                                                                                                   // 4543
*/                                                                                                                     // 4544
IpcProvider.prototype._parseResponse = function(data) {                                                                // 4545
    var _this = this,                                                                                                  // 4546
        returnValues = [];                                                                                             // 4547
                                                                                                                       // 4548
    // DE-CHUNKER                                                                                                      // 4549
    var dechunkedData = data                                                                                           // 4550
        .replace(/\}\{/g,'}|--|{') // }{                                                                               // 4551
        .replace(/\}\]\[\{/g,'}]|--|[{') // }][{                                                                       // 4552
        .replace(/\}\[\{/g,'}|--|[{') // }[{                                                                           // 4553
        .replace(/\}\]\{/g,'}]|--|{') // }]{                                                                           // 4554
        .split('|--|');                                                                                                // 4555
                                                                                                                       // 4556
    dechunkedData.forEach(function(data){                                                                              // 4557
                                                                                                                       // 4558
        // prepend the last chunk                                                                                      // 4559
        if(_this.lastChunk)                                                                                            // 4560
            data = _this.lastChunk + data;                                                                             // 4561
                                                                                                                       // 4562
        var result = null;                                                                                             // 4563
                                                                                                                       // 4564
        try {                                                                                                          // 4565
            result = JSON.parse(data);                                                                                 // 4566
                                                                                                                       // 4567
        } catch(e) {                                                                                                   // 4568
                                                                                                                       // 4569
            _this.lastChunk = data;                                                                                    // 4570
                                                                                                                       // 4571
            // start timeout to cancel all requests                                                                    // 4572
            clearTimeout(_this.lastChunkTimeout);                                                                      // 4573
            _this.lastChunkTimeout = setTimeout(function(){                                                            // 4574
                _this.timeout();                                                                                       // 4575
                throw errors.InvalidResponse(data);                                                                    // 4576
            }, 1000 * 15);                                                                                             // 4577
                                                                                                                       // 4578
            return;                                                                                                    // 4579
        }                                                                                                              // 4580
                                                                                                                       // 4581
        // cancel timeout and set chunk to null                                                                        // 4582
        clearTimeout(_this.lastChunkTimeout);                                                                          // 4583
        _this.lastChunk = null;                                                                                        // 4584
                                                                                                                       // 4585
        if(result)                                                                                                     // 4586
            returnValues.push(result);                                                                                 // 4587
    });                                                                                                                // 4588
                                                                                                                       // 4589
    return returnValues;                                                                                               // 4590
};                                                                                                                     // 4591
                                                                                                                       // 4592
                                                                                                                       // 4593
/**                                                                                                                    // 4594
Get the adds a callback to the responseCallbacks object,                                                               // 4595
which will be called if a response matching the response Id will arrive.                                               // 4596
                                                                                                                       // 4597
@method _addResponseCallback                                                                                           // 4598
*/                                                                                                                     // 4599
IpcProvider.prototype._addResponseCallback = function(payload, callback) {                                             // 4600
    var id = payload.id || payload[0].id;                                                                              // 4601
    var method = payload.method || payload[0].method;                                                                  // 4602
                                                                                                                       // 4603
    this.responseCallbacks[id] = callback;                                                                             // 4604
    this.responseCallbacks[id].method = method;                                                                        // 4605
};                                                                                                                     // 4606
                                                                                                                       // 4607
/**                                                                                                                    // 4608
Timeout all requests when the end/error event is fired                                                                 // 4609
                                                                                                                       // 4610
@method _timeout                                                                                                       // 4611
*/                                                                                                                     // 4612
IpcProvider.prototype._timeout = function() {                                                                          // 4613
    for(var key in this.responseCallbacks) {                                                                           // 4614
        if(this.responseCallbacks.hasOwnProperty(key)){                                                                // 4615
            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));                                           // 4616
            delete this.responseCallbacks[key];                                                                        // 4617
        }                                                                                                              // 4618
    }                                                                                                                  // 4619
};                                                                                                                     // 4620
                                                                                                                       // 4621
                                                                                                                       // 4622
/**                                                                                                                    // 4623
Check if the current connection is still valid.                                                                        // 4624
                                                                                                                       // 4625
@method isConnected                                                                                                    // 4626
*/                                                                                                                     // 4627
IpcProvider.prototype.isConnected = function() {                                                                       // 4628
    var _this = this;                                                                                                  // 4629
                                                                                                                       // 4630
    // try reconnect, when connection is gone                                                                          // 4631
    if(!_this.connection.writable)                                                                                     // 4632
        _this.connection.connect({path: _this.path});                                                                  // 4633
                                                                                                                       // 4634
    return !!this.connection.writable;                                                                                 // 4635
};                                                                                                                     // 4636
                                                                                                                       // 4637
IpcProvider.prototype.send = function (payload) {                                                                      // 4638
                                                                                                                       // 4639
    if(this.connection.writeSync) {                                                                                    // 4640
        var result;                                                                                                    // 4641
                                                                                                                       // 4642
        // try reconnect, when connection is gone                                                                      // 4643
        if(!this.connection.writable)                                                                                  // 4644
            this.connection.connect({path: this.path});                                                                // 4645
                                                                                                                       // 4646
        var data = this.connection.writeSync(JSON.stringify(payload));                                                 // 4647
                                                                                                                       // 4648
        try {                                                                                                          // 4649
            result = JSON.parse(data);                                                                                 // 4650
        } catch(e) {                                                                                                   // 4651
            throw errors.InvalidResponse(data);                                                                        // 4652
        }                                                                                                              // 4653
                                                                                                                       // 4654
        return result;                                                                                                 // 4655
                                                                                                                       // 4656
    } else {                                                                                                           // 4657
        throw new Error('You tried to send "'+ payload.method +'" synchronously. Synchronous requests are not supported by the IPC provider.');
    }                                                                                                                  // 4659
};                                                                                                                     // 4660
                                                                                                                       // 4661
IpcProvider.prototype.sendAsync = function (payload, callback) {                                                       // 4662
    // try reconnect, when connection is gone                                                                          // 4663
    if(!this.connection.writable)                                                                                      // 4664
        this.connection.connect({path: this.path});                                                                    // 4665
                                                                                                                       // 4666
                                                                                                                       // 4667
    this.connection.write(JSON.stringify(payload));                                                                    // 4668
    this._addResponseCallback(payload, callback);                                                                      // 4669
};                                                                                                                     // 4670
                                                                                                                       // 4671
module.exports = IpcProvider;                                                                                          // 4672
                                                                                                                       // 4673
                                                                                                                       // 4674
},{"../utils/utils":20,"./errors":26}],35:[function(require,module,exports){                                           // 4675
/*                                                                                                                     // 4676
    This file is part of web3.js.                                                                                      // 4677
                                                                                                                       // 4678
    web3.js is free software: you can redistribute it and/or modify                                                    // 4679
    it under the terms of the GNU Lesser General Public License as published by                                        // 4680
    the Free Software Foundation, either version 3 of the License, or                                                  // 4681
    (at your option) any later version.                                                                                // 4682
                                                                                                                       // 4683
    web3.js is distributed in the hope that it will be useful,                                                         // 4684
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4685
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4686
    GNU Lesser General Public License for more details.                                                                // 4687
                                                                                                                       // 4688
    You should have received a copy of the GNU Lesser General Public License                                           // 4689
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4690
*/                                                                                                                     // 4691
/** @file jsonrpc.js                                                                                                   // 4692
 * @authors:                                                                                                           // 4693
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4694
 * @date 2015                                                                                                          // 4695
 */                                                                                                                    // 4696
                                                                                                                       // 4697
var Jsonrpc = function () {                                                                                            // 4698
    // singleton pattern                                                                                               // 4699
    if (arguments.callee._singletonInstance) {                                                                         // 4700
        return arguments.callee._singletonInstance;                                                                    // 4701
    }                                                                                                                  // 4702
    arguments.callee._singletonInstance = this;                                                                        // 4703
                                                                                                                       // 4704
    this.messageId = 1;                                                                                                // 4705
};                                                                                                                     // 4706
                                                                                                                       // 4707
/**                                                                                                                    // 4708
 * @return {Jsonrpc} singleton                                                                                         // 4709
 */                                                                                                                    // 4710
Jsonrpc.getInstance = function () {                                                                                    // 4711
    var instance = new Jsonrpc();                                                                                      // 4712
    return instance;                                                                                                   // 4713
};                                                                                                                     // 4714
                                                                                                                       // 4715
/**                                                                                                                    // 4716
 * Should be called to valid json create payload object                                                                // 4717
 *                                                                                                                     // 4718
 * @method toPayload                                                                                                   // 4719
 * @param {Function} method of jsonrpc call, required                                                                  // 4720
 * @param {Array} params, an array of method params, optional                                                          // 4721
 * @returns {Object} valid jsonrpc payload object                                                                      // 4722
 */                                                                                                                    // 4723
Jsonrpc.prototype.toPayload = function (method, params) {                                                              // 4724
    if (!method)                                                                                                       // 4725
        console.error('jsonrpc method should be specified!');                                                          // 4726
                                                                                                                       // 4727
    return {                                                                                                           // 4728
        jsonrpc: '2.0',                                                                                                // 4729
        method: method,                                                                                                // 4730
        params: params || [],                                                                                          // 4731
        id: this.messageId++                                                                                           // 4732
    };                                                                                                                 // 4733
};                                                                                                                     // 4734
                                                                                                                       // 4735
/**                                                                                                                    // 4736
 * Should be called to check if jsonrpc response is valid                                                              // 4737
 *                                                                                                                     // 4738
 * @method isValidResponse                                                                                             // 4739
 * @param {Object}                                                                                                     // 4740
 * @returns {Boolean} true if response is valid, otherwise false                                                       // 4741
 */                                                                                                                    // 4742
Jsonrpc.prototype.isValidResponse = function (response) {                                                              // 4743
    return !!response &&                                                                                               // 4744
        !response.error &&                                                                                             // 4745
        response.jsonrpc === '2.0' &&                                                                                  // 4746
        typeof response.id === 'number' &&                                                                             // 4747
        response.result !== undefined; // only undefined is not valid json object                                      // 4748
};                                                                                                                     // 4749
                                                                                                                       // 4750
/**                                                                                                                    // 4751
 * Should be called to create batch payload object                                                                     // 4752
 *                                                                                                                     // 4753
 * @method toBatchPayload                                                                                              // 4754
 * @param {Array} messages, an array of objects with method (required) and params (optional) fields                    // 4755
 * @returns {Array} batch payload                                                                                      // 4756
 */                                                                                                                    // 4757
Jsonrpc.prototype.toBatchPayload = function (messages) {                                                               // 4758
    var self = this;                                                                                                   // 4759
    return messages.map(function (message) {                                                                           // 4760
        return self.toPayload(message.method, message.params);                                                         // 4761
    });                                                                                                                // 4762
};                                                                                                                     // 4763
                                                                                                                       // 4764
module.exports = Jsonrpc;                                                                                              // 4765
                                                                                                                       // 4766
                                                                                                                       // 4767
},{}],36:[function(require,module,exports){                                                                            // 4768
/*                                                                                                                     // 4769
    This file is part of web3.js.                                                                                      // 4770
                                                                                                                       // 4771
    web3.js is free software: you can redistribute it and/or modify                                                    // 4772
    it under the terms of the GNU Lesser General Public License as published by                                        // 4773
    the Free Software Foundation, either version 3 of the License, or                                                  // 4774
    (at your option) any later version.                                                                                // 4775
                                                                                                                       // 4776
    web3.js is distributed in the hope that it will be useful,                                                         // 4777
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4778
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4779
    GNU Lesser General Public License for more details.                                                                // 4780
                                                                                                                       // 4781
    You should have received a copy of the GNU Lesser General Public License                                           // 4782
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4783
*/                                                                                                                     // 4784
/**                                                                                                                    // 4785
 * @file method.js                                                                                                     // 4786
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4787
 * @date 2015                                                                                                          // 4788
 */                                                                                                                    // 4789
                                                                                                                       // 4790
var utils = require('../utils/utils');                                                                                 // 4791
var errors = require('./errors');                                                                                      // 4792
                                                                                                                       // 4793
var Method = function (options) {                                                                                      // 4794
    this.name = options.name;                                                                                          // 4795
    this.call = options.call;                                                                                          // 4796
    this.params = options.params || 0;                                                                                 // 4797
    this.inputFormatter = options.inputFormatter;                                                                      // 4798
    this.outputFormatter = options.outputFormatter;                                                                    // 4799
    this.requestManager = null;                                                                                        // 4800
};                                                                                                                     // 4801
                                                                                                                       // 4802
Method.prototype.setRequestManager = function (rm) {                                                                   // 4803
    this.requestManager = rm;                                                                                          // 4804
};                                                                                                                     // 4805
                                                                                                                       // 4806
/**                                                                                                                    // 4807
 * Should be used to determine name of the jsonrpc method based on arguments                                           // 4808
 *                                                                                                                     // 4809
 * @method getCall                                                                                                     // 4810
 * @param {Array} arguments                                                                                            // 4811
 * @return {String} name of jsonrpc method                                                                             // 4812
 */                                                                                                                    // 4813
Method.prototype.getCall = function (args) {                                                                           // 4814
    return utils.isFunction(this.call) ? this.call(args) : this.call;                                                  // 4815
};                                                                                                                     // 4816
                                                                                                                       // 4817
/**                                                                                                                    // 4818
 * Should be used to extract callback from array of arguments. Modifies input param                                    // 4819
 *                                                                                                                     // 4820
 * @method extractCallback                                                                                             // 4821
 * @param {Array} arguments                                                                                            // 4822
 * @return {Function|Null} callback, if exists                                                                         // 4823
 */                                                                                                                    // 4824
Method.prototype.extractCallback = function (args) {                                                                   // 4825
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 4826
        return args.pop(); // modify the args array!                                                                   // 4827
    }                                                                                                                  // 4828
};                                                                                                                     // 4829
                                                                                                                       // 4830
/**                                                                                                                    // 4831
 * Should be called to check if the number of arguments is correct                                                     // 4832
 *                                                                                                                     // 4833
 * @method validateArgs                                                                                                // 4834
 * @param {Array} arguments                                                                                            // 4835
 * @throws {Error} if it is not                                                                                        // 4836
 */                                                                                                                    // 4837
Method.prototype.validateArgs = function (args) {                                                                      // 4838
    if (args.length !== this.params) {                                                                                 // 4839
        throw errors.InvalidNumberOfParams();                                                                          // 4840
    }                                                                                                                  // 4841
};                                                                                                                     // 4842
                                                                                                                       // 4843
/**                                                                                                                    // 4844
 * Should be called to format input args of method                                                                     // 4845
 *                                                                                                                     // 4846
 * @method formatInput                                                                                                 // 4847
 * @param {Array}                                                                                                      // 4848
 * @return {Array}                                                                                                     // 4849
 */                                                                                                                    // 4850
Method.prototype.formatInput = function (args) {                                                                       // 4851
    if (!this.inputFormatter) {                                                                                        // 4852
        return args;                                                                                                   // 4853
    }                                                                                                                  // 4854
                                                                                                                       // 4855
    return this.inputFormatter.map(function (formatter, index) {                                                       // 4856
        return formatter ? formatter(args[index]) : args[index];                                                       // 4857
    });                                                                                                                // 4858
};                                                                                                                     // 4859
                                                                                                                       // 4860
/**                                                                                                                    // 4861
 * Should be called to format output(result) of method                                                                 // 4862
 *                                                                                                                     // 4863
 * @method formatOutput                                                                                                // 4864
 * @param {Object}                                                                                                     // 4865
 * @return {Object}                                                                                                    // 4866
 */                                                                                                                    // 4867
Method.prototype.formatOutput = function (result) {                                                                    // 4868
    return this.outputFormatter && result ? this.outputFormatter(result) : result;                                     // 4869
};                                                                                                                     // 4870
                                                                                                                       // 4871
/**                                                                                                                    // 4872
 * Should create payload from given input args                                                                         // 4873
 *                                                                                                                     // 4874
 * @method toPayload                                                                                                   // 4875
 * @param {Array} args                                                                                                 // 4876
 * @return {Object}                                                                                                    // 4877
 */                                                                                                                    // 4878
Method.prototype.toPayload = function (args) {                                                                         // 4879
    var call = this.getCall(args);                                                                                     // 4880
    var callback = this.extractCallback(args);                                                                         // 4881
    var params = this.formatInput(args);                                                                               // 4882
    this.validateArgs(params);                                                                                         // 4883
                                                                                                                       // 4884
    return {                                                                                                           // 4885
        method: call,                                                                                                  // 4886
        params: params,                                                                                                // 4887
        callback: callback                                                                                             // 4888
    };                                                                                                                 // 4889
};                                                                                                                     // 4890
                                                                                                                       // 4891
Method.prototype.attachToObject = function (obj) {                                                                     // 4892
    var func = this.buildCall();                                                                                       // 4893
    func.call = this.call; // TODO!!! that's ugly. filter.js uses it                                                   // 4894
    var name = this.name.split('.');                                                                                   // 4895
    if (name.length > 1) {                                                                                             // 4896
        obj[name[0]] = obj[name[0]] || {};                                                                             // 4897
        obj[name[0]][name[1]] = func;                                                                                  // 4898
    } else {                                                                                                           // 4899
        obj[name[0]] = func;                                                                                           // 4900
    }                                                                                                                  // 4901
};                                                                                                                     // 4902
                                                                                                                       // 4903
Method.prototype.buildCall = function() {                                                                              // 4904
    var method = this;                                                                                                 // 4905
    var send = function () {                                                                                           // 4906
        var payload = method.toPayload(Array.prototype.slice.call(arguments));                                         // 4907
        if (payload.callback) {                                                                                        // 4908
            return method.requestManager.sendAsync(payload, function (err, result) {                                   // 4909
                payload.callback(err, method.formatOutput(result));                                                    // 4910
            });                                                                                                        // 4911
        }                                                                                                              // 4912
        return method.formatOutput(method.requestManager.send(payload));                                               // 4913
    };                                                                                                                 // 4914
    send.request = this.request.bind(this);                                                                            // 4915
    return send;                                                                                                       // 4916
};                                                                                                                     // 4917
                                                                                                                       // 4918
/**                                                                                                                    // 4919
 * Should be called to create pure JSONRPC request which can be used in batch request                                  // 4920
 *                                                                                                                     // 4921
 * @method request                                                                                                     // 4922
 * @param {...} params                                                                                                 // 4923
 * @return {Object} jsonrpc request                                                                                    // 4924
 */                                                                                                                    // 4925
Method.prototype.request = function () {                                                                               // 4926
    var payload = this.toPayload(Array.prototype.slice.call(arguments));                                               // 4927
    payload.format = this.formatOutput.bind(this);                                                                     // 4928
    return payload;                                                                                                    // 4929
};                                                                                                                     // 4930
                                                                                                                       // 4931
module.exports = Method;                                                                                               // 4932
                                                                                                                       // 4933
                                                                                                                       // 4934
},{"../utils/utils":20,"./errors":26}],37:[function(require,module,exports){                                           // 4935
/*                                                                                                                     // 4936
    This file is part of web3.js.                                                                                      // 4937
                                                                                                                       // 4938
    web3.js is free software: you can redistribute it and/or modify                                                    // 4939
    it under the terms of the GNU Lesser General Public License as published by                                        // 4940
    the Free Software Foundation, either version 3 of the License, or                                                  // 4941
    (at your option) any later version.                                                                                // 4942
                                                                                                                       // 4943
    web3.js is distributed in the hope that it will be useful,                                                         // 4944
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4945
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4946
    GNU Lesser General Public License for more details.                                                                // 4947
                                                                                                                       // 4948
    You should have received a copy of the GNU Lesser General Public License                                           // 4949
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4950
*/                                                                                                                     // 4951
/** @file db.js                                                                                                        // 4952
 * @authors:                                                                                                           // 4953
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4954
 * @date 2015                                                                                                          // 4955
 */                                                                                                                    // 4956
                                                                                                                       // 4957
var Method = require('../method');                                                                                     // 4958
                                                                                                                       // 4959
var DB = function (web3) {                                                                                             // 4960
    this._requestManager = web3._requestManager;                                                                       // 4961
                                                                                                                       // 4962
    var self = this;                                                                                                   // 4963
                                                                                                                       // 4964
    methods().forEach(function(method) {                                                                               // 4965
        method.attachToObject(self);                                                                                   // 4966
        method.setRequestManager(web3._requestManager);                                                                // 4967
    });                                                                                                                // 4968
};                                                                                                                     // 4969
                                                                                                                       // 4970
var methods = function () {                                                                                            // 4971
    var putString = new Method({                                                                                       // 4972
        name: 'putString',                                                                                             // 4973
        call: 'db_putString',                                                                                          // 4974
        params: 3                                                                                                      // 4975
    });                                                                                                                // 4976
                                                                                                                       // 4977
    var getString = new Method({                                                                                       // 4978
        name: 'getString',                                                                                             // 4979
        call: 'db_getString',                                                                                          // 4980
        params: 2                                                                                                      // 4981
    });                                                                                                                // 4982
                                                                                                                       // 4983
    var putHex = new Method({                                                                                          // 4984
        name: 'putHex',                                                                                                // 4985
        call: 'db_putHex',                                                                                             // 4986
        params: 3                                                                                                      // 4987
    });                                                                                                                // 4988
                                                                                                                       // 4989
    var getHex = new Method({                                                                                          // 4990
        name: 'getHex',                                                                                                // 4991
        call: 'db_getHex',                                                                                             // 4992
        params: 2                                                                                                      // 4993
    });                                                                                                                // 4994
                                                                                                                       // 4995
    return [                                                                                                           // 4996
        putString, getString, putHex, getHex                                                                           // 4997
    ];                                                                                                                 // 4998
};                                                                                                                     // 4999
                                                                                                                       // 5000
module.exports = DB;                                                                                                   // 5001
                                                                                                                       // 5002
},{"../method":36}],38:[function(require,module,exports){                                                              // 5003
/*                                                                                                                     // 5004
    This file is part of web3.js.                                                                                      // 5005
                                                                                                                       // 5006
    web3.js is free software: you can redistribute it and/or modify                                                    // 5007
    it under the terms of the GNU Lesser General Public License as published by                                        // 5008
    the Free Software Foundation, either version 3 of the License, or                                                  // 5009
    (at your option) any later version.                                                                                // 5010
                                                                                                                       // 5011
    web3.js is distributed in the hope that it will be useful,                                                         // 5012
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5013
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5014
    GNU Lesser General Public License for more details.                                                                // 5015
                                                                                                                       // 5016
    You should have received a copy of the GNU Lesser General Public License                                           // 5017
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5018
*/                                                                                                                     // 5019
/**                                                                                                                    // 5020
 * @file eth.js                                                                                                        // 5021
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5022
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5023
 * @date 2015                                                                                                          // 5024
 */                                                                                                                    // 5025
                                                                                                                       // 5026
"use strict";                                                                                                          // 5027
                                                                                                                       // 5028
var formatters = require('../formatters');                                                                             // 5029
var utils = require('../../utils/utils');                                                                              // 5030
var Method = require('../method');                                                                                     // 5031
var Property = require('../property');                                                                                 // 5032
var c = require('../../utils/config');                                                                                 // 5033
var Contract = require('../contract');                                                                                 // 5034
var watches = require('./watches');                                                                                    // 5035
var Filter = require('../filter');                                                                                     // 5036
var IsSyncing = require('../syncing');                                                                                 // 5037
var namereg = require('../namereg');                                                                                   // 5038
var Iban = require('../iban');                                                                                         // 5039
var transfer = require('../transfer');                                                                                 // 5040
                                                                                                                       // 5041
var blockCall = function (args) {                                                                                      // 5042
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";   // 5043
};                                                                                                                     // 5044
                                                                                                                       // 5045
var transactionFromBlockCall = function (args) {                                                                       // 5046
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
};                                                                                                                     // 5048
                                                                                                                       // 5049
var uncleCall = function (args) {                                                                                      // 5050
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
};                                                                                                                     // 5052
                                                                                                                       // 5053
var getBlockTransactionCountCall = function (args) {                                                                   // 5054
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
};                                                                                                                     // 5056
                                                                                                                       // 5057
var uncleCountCall = function (args) {                                                                                 // 5058
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
};                                                                                                                     // 5060
                                                                                                                       // 5061
function Eth(web3) {                                                                                                   // 5062
    this._requestManager = web3._requestManager;                                                                       // 5063
                                                                                                                       // 5064
    var self = this;                                                                                                   // 5065
                                                                                                                       // 5066
    methods().forEach(function(method) {                                                                               // 5067
        method.attachToObject(self);                                                                                   // 5068
        method.setRequestManager(self._requestManager);                                                                // 5069
    });                                                                                                                // 5070
                                                                                                                       // 5071
    properties().forEach(function(p) {                                                                                 // 5072
        p.attachToObject(self);                                                                                        // 5073
        p.setRequestManager(self._requestManager);                                                                     // 5074
    });                                                                                                                // 5075
                                                                                                                       // 5076
                                                                                                                       // 5077
    this.iban = Iban;                                                                                                  // 5078
    this.sendIBANTransaction = transfer.bind(null, this);                                                              // 5079
}                                                                                                                      // 5080
                                                                                                                       // 5081
Object.defineProperty(Eth.prototype, 'defaultBlock', {                                                                 // 5082
    get: function () {                                                                                                 // 5083
        return c.defaultBlock;                                                                                         // 5084
    },                                                                                                                 // 5085
    set: function (val) {                                                                                              // 5086
        c.defaultBlock = val;                                                                                          // 5087
        return val;                                                                                                    // 5088
    }                                                                                                                  // 5089
});                                                                                                                    // 5090
                                                                                                                       // 5091
Object.defineProperty(Eth.prototype, 'defaultAccount', {                                                               // 5092
    get: function () {                                                                                                 // 5093
        return c.defaultAccount;                                                                                       // 5094
    },                                                                                                                 // 5095
    set: function (val) {                                                                                              // 5096
        c.defaultAccount = val;                                                                                        // 5097
        return val;                                                                                                    // 5098
    }                                                                                                                  // 5099
});                                                                                                                    // 5100
                                                                                                                       // 5101
var methods = function () {                                                                                            // 5102
    var getBalance = new Method({                                                                                      // 5103
        name: 'getBalance',                                                                                            // 5104
        call: 'eth_getBalance',                                                                                        // 5105
        params: 2,                                                                                                     // 5106
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],               // 5107
        outputFormatter: formatters.outputBigNumberFormatter                                                           // 5108
    });                                                                                                                // 5109
                                                                                                                       // 5110
    var getStorageAt = new Method({                                                                                    // 5111
        name: 'getStorageAt',                                                                                          // 5112
        call: 'eth_getStorageAt',                                                                                      // 5113
        params: 3,                                                                                                     // 5114
        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]                               // 5115
    });                                                                                                                // 5116
                                                                                                                       // 5117
    var getCode = new Method({                                                                                         // 5118
        name: 'getCode',                                                                                               // 5119
        call: 'eth_getCode',                                                                                           // 5120
        params: 2,                                                                                                     // 5121
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]                // 5122
    });                                                                                                                // 5123
                                                                                                                       // 5124
    var getBlock = new Method({                                                                                        // 5125
        name: 'getBlock',                                                                                              // 5126
        call: blockCall,                                                                                               // 5127
        params: 2,                                                                                                     // 5128
        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],                      // 5129
        outputFormatter: formatters.outputBlockFormatter                                                               // 5130
    });                                                                                                                // 5131
                                                                                                                       // 5132
    var getUncle = new Method({                                                                                        // 5133
        name: 'getUncle',                                                                                              // 5134
        call: uncleCall,                                                                                               // 5135
        params: 2,                                                                                                     // 5136
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5137
        outputFormatter: formatters.outputBlockFormatter,                                                              // 5138
                                                                                                                       // 5139
    });                                                                                                                // 5140
                                                                                                                       // 5141
    var getCompilers = new Method({                                                                                    // 5142
        name: 'getCompilers',                                                                                          // 5143
        call: 'eth_getCompilers',                                                                                      // 5144
        params: 0                                                                                                      // 5145
    });                                                                                                                // 5146
                                                                                                                       // 5147
    var getBlockTransactionCount = new Method({                                                                        // 5148
        name: 'getBlockTransactionCount',                                                                              // 5149
        call: getBlockTransactionCountCall,                                                                            // 5150
        params: 1,                                                                                                     // 5151
        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5152
        outputFormatter: utils.toDecimal                                                                               // 5153
    });                                                                                                                // 5154
                                                                                                                       // 5155
    var getBlockUncleCount = new Method({                                                                              // 5156
        name: 'getBlockUncleCount',                                                                                    // 5157
        call: uncleCountCall,                                                                                          // 5158
        params: 1,                                                                                                     // 5159
        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5160
        outputFormatter: utils.toDecimal                                                                               // 5161
    });                                                                                                                // 5162
                                                                                                                       // 5163
    var getTransaction = new Method({                                                                                  // 5164
        name: 'getTransaction',                                                                                        // 5165
        call: 'eth_getTransactionByHash',                                                                              // 5166
        params: 1,                                                                                                     // 5167
        outputFormatter: formatters.outputTransactionFormatter                                                         // 5168
    });                                                                                                                // 5169
                                                                                                                       // 5170
    var getTransactionFromBlock = new Method({                                                                         // 5171
        name: 'getTransactionFromBlock',                                                                               // 5172
        call: transactionFromBlockCall,                                                                                // 5173
        params: 2,                                                                                                     // 5174
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5175
        outputFormatter: formatters.outputTransactionFormatter                                                         // 5176
    });                                                                                                                // 5177
                                                                                                                       // 5178
    var getTransactionReceipt = new Method({                                                                           // 5179
        name: 'getTransactionReceipt',                                                                                 // 5180
        call: 'eth_getTransactionReceipt',                                                                             // 5181
        params: 1,                                                                                                     // 5182
        outputFormatter: formatters.outputTransactionReceiptFormatter                                                  // 5183
    });                                                                                                                // 5184
                                                                                                                       // 5185
    var getTransactionCount = new Method({                                                                             // 5186
        name: 'getTransactionCount',                                                                                   // 5187
        call: 'eth_getTransactionCount',                                                                               // 5188
        params: 2,                                                                                                     // 5189
        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],                                           // 5190
        outputFormatter: utils.toDecimal                                                                               // 5191
    });                                                                                                                // 5192
                                                                                                                       // 5193
    var sendRawTransaction = new Method({                                                                              // 5194
        name: 'sendRawTransaction',                                                                                    // 5195
        call: 'eth_sendRawTransaction',                                                                                // 5196
        params: 1,                                                                                                     // 5197
        inputFormatter: [null]                                                                                         // 5198
    });                                                                                                                // 5199
                                                                                                                       // 5200
    var sendTransaction = new Method({                                                                                 // 5201
        name: 'sendTransaction',                                                                                       // 5202
        call: 'eth_sendTransaction',                                                                                   // 5203
        params: 1,                                                                                                     // 5204
        inputFormatter: [formatters.inputTransactionFormatter]                                                         // 5205
    });                                                                                                                // 5206
                                                                                                                       // 5207
    var call = new Method({                                                                                            // 5208
        name: 'call',                                                                                                  // 5209
        call: 'eth_call',                                                                                              // 5210
        params: 2,                                                                                                     // 5211
        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]                   // 5212
    });                                                                                                                // 5213
                                                                                                                       // 5214
    var estimateGas = new Method({                                                                                     // 5215
        name: 'estimateGas',                                                                                           // 5216
        call: 'eth_estimateGas',                                                                                       // 5217
        params: 1,                                                                                                     // 5218
        inputFormatter: [formatters.inputCallFormatter],                                                               // 5219
        outputFormatter: utils.toDecimal                                                                               // 5220
    });                                                                                                                // 5221
                                                                                                                       // 5222
    var compileSolidity = new Method({                                                                                 // 5223
        name: 'compile.solidity',                                                                                      // 5224
        call: 'eth_compileSolidity',                                                                                   // 5225
        params: 1                                                                                                      // 5226
    });                                                                                                                // 5227
                                                                                                                       // 5228
    var compileLLL = new Method({                                                                                      // 5229
        name: 'compile.lll',                                                                                           // 5230
        call: 'eth_compileLLL',                                                                                        // 5231
        params: 1                                                                                                      // 5232
    });                                                                                                                // 5233
                                                                                                                       // 5234
    var compileSerpent = new Method({                                                                                  // 5235
        name: 'compile.serpent',                                                                                       // 5236
        call: 'eth_compileSerpent',                                                                                    // 5237
        params: 1                                                                                                      // 5238
    });                                                                                                                // 5239
                                                                                                                       // 5240
    var submitWork = new Method({                                                                                      // 5241
        name: 'submitWork',                                                                                            // 5242
        call: 'eth_submitWork',                                                                                        // 5243
        params: 3                                                                                                      // 5244
    });                                                                                                                // 5245
                                                                                                                       // 5246
    var getWork = new Method({                                                                                         // 5247
        name: 'getWork',                                                                                               // 5248
        call: 'eth_getWork',                                                                                           // 5249
        params: 0                                                                                                      // 5250
    });                                                                                                                // 5251
                                                                                                                       // 5252
    return [                                                                                                           // 5253
        getBalance,                                                                                                    // 5254
        getStorageAt,                                                                                                  // 5255
        getCode,                                                                                                       // 5256
        getBlock,                                                                                                      // 5257
        getUncle,                                                                                                      // 5258
        getCompilers,                                                                                                  // 5259
        getBlockTransactionCount,                                                                                      // 5260
        getBlockUncleCount,                                                                                            // 5261
        getTransaction,                                                                                                // 5262
        getTransactionFromBlock,                                                                                       // 5263
        getTransactionReceipt,                                                                                         // 5264
        getTransactionCount,                                                                                           // 5265
        call,                                                                                                          // 5266
        estimateGas,                                                                                                   // 5267
        sendRawTransaction,                                                                                            // 5268
        sendTransaction,                                                                                               // 5269
        compileSolidity,                                                                                               // 5270
        compileLLL,                                                                                                    // 5271
        compileSerpent,                                                                                                // 5272
        submitWork,                                                                                                    // 5273
        getWork                                                                                                        // 5274
    ];                                                                                                                 // 5275
};                                                                                                                     // 5276
                                                                                                                       // 5277
                                                                                                                       // 5278
var properties = function () {                                                                                         // 5279
    return [                                                                                                           // 5280
        new Property({                                                                                                 // 5281
            name: 'coinbase',                                                                                          // 5282
            getter: 'eth_coinbase'                                                                                     // 5283
        }),                                                                                                            // 5284
        new Property({                                                                                                 // 5285
            name: 'mining',                                                                                            // 5286
            getter: 'eth_mining'                                                                                       // 5287
        }),                                                                                                            // 5288
        new Property({                                                                                                 // 5289
            name: 'hashrate',                                                                                          // 5290
            getter: 'eth_hashrate',                                                                                    // 5291
            outputFormatter: utils.toDecimal                                                                           // 5292
        }),                                                                                                            // 5293
        new Property({                                                                                                 // 5294
            name: 'syncing',                                                                                           // 5295
            getter: 'eth_syncing',                                                                                     // 5296
            outputFormatter: formatters.outputSyncingFormatter                                                         // 5297
        }),                                                                                                            // 5298
        new Property({                                                                                                 // 5299
            name: 'gasPrice',                                                                                          // 5300
            getter: 'eth_gasPrice',                                                                                    // 5301
            outputFormatter: formatters.outputBigNumberFormatter                                                       // 5302
        }),                                                                                                            // 5303
        new Property({                                                                                                 // 5304
            name: 'accounts',                                                                                          // 5305
            getter: 'eth_accounts'                                                                                     // 5306
        }),                                                                                                            // 5307
        new Property({                                                                                                 // 5308
            name: 'blockNumber',                                                                                       // 5309
            getter: 'eth_blockNumber',                                                                                 // 5310
            outputFormatter: utils.toDecimal                                                                           // 5311
        })                                                                                                             // 5312
    ];                                                                                                                 // 5313
};                                                                                                                     // 5314
                                                                                                                       // 5315
Eth.prototype.contract = function (abi) {                                                                              // 5316
    var factory = new Contract(this, abi);                                                                             // 5317
    return factory;                                                                                                    // 5318
};                                                                                                                     // 5319
                                                                                                                       // 5320
Eth.prototype.filter = function (fil, callback) {                                                                      // 5321
    return new Filter(this._requestManager, fil, watches.eth(), formatters.outputLogFormatter, callback);              // 5322
};                                                                                                                     // 5323
                                                                                                                       // 5324
Eth.prototype.namereg = function () {                                                                                  // 5325
    return this.contract(namereg.global.abi).at(namereg.global.address);                                               // 5326
};                                                                                                                     // 5327
                                                                                                                       // 5328
Eth.prototype.icapNamereg = function () {                                                                              // 5329
    return this.contract(namereg.icap.abi).at(namereg.icap.address);                                                   // 5330
};                                                                                                                     // 5331
                                                                                                                       // 5332
Eth.prototype.isSyncing = function (callback) {                                                                        // 5333
    return new IsSyncing(this._requestManager, callback);                                                              // 5334
};                                                                                                                     // 5335
                                                                                                                       // 5336
module.exports = Eth;                                                                                                  // 5337
                                                                                                                       // 5338
                                                                                                                       // 5339
},{"../../utils/config":18,"../../utils/utils":20,"../contract":25,"../filter":29,"../formatters":30,"../iban":33,"../method":36,"../namereg":42,"../property":43,"../syncing":46,"../transfer":47,"./watches":41}],39:[function(require,module,exports){
/*                                                                                                                     // 5341
    This file is part of web3.js.                                                                                      // 5342
                                                                                                                       // 5343
    web3.js is free software: you can redistribute it and/or modify                                                    // 5344
    it under the terms of the GNU Lesser General Public License as published by                                        // 5345
    the Free Software Foundation, either version 3 of the License, or                                                  // 5346
    (at your option) any later version.                                                                                // 5347
                                                                                                                       // 5348
    web3.js is distributed in the hope that it will be useful,                                                         // 5349
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5350
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5351
    GNU Lesser General Public License for more details.                                                                // 5352
                                                                                                                       // 5353
    You should have received a copy of the GNU Lesser General Public License                                           // 5354
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5355
*/                                                                                                                     // 5356
/** @file eth.js                                                                                                       // 5357
 * @authors:                                                                                                           // 5358
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5359
 * @date 2015                                                                                                          // 5360
 */                                                                                                                    // 5361
                                                                                                                       // 5362
var utils = require('../../utils/utils');                                                                              // 5363
var Property = require('../property');                                                                                 // 5364
                                                                                                                       // 5365
var Net = function (web3) {                                                                                            // 5366
    this._requestManager = web3._requestManager;                                                                       // 5367
                                                                                                                       // 5368
    var self = this;                                                                                                   // 5369
                                                                                                                       // 5370
    properties().forEach(function(p) {                                                                                 // 5371
        p.attachToObject(self);                                                                                        // 5372
        p.setRequestManager(web3._requestManager);                                                                     // 5373
    });                                                                                                                // 5374
};                                                                                                                     // 5375
                                                                                                                       // 5376
/// @returns an array of objects describing web3.eth api properties                                                    // 5377
var properties = function () {                                                                                         // 5378
    return [                                                                                                           // 5379
        new Property({                                                                                                 // 5380
            name: 'listening',                                                                                         // 5381
            getter: 'net_listening'                                                                                    // 5382
        }),                                                                                                            // 5383
        new Property({                                                                                                 // 5384
            name: 'peerCount',                                                                                         // 5385
            getter: 'net_peerCount',                                                                                   // 5386
            outputFormatter: utils.toDecimal                                                                           // 5387
        })                                                                                                             // 5388
    ];                                                                                                                 // 5389
};                                                                                                                     // 5390
                                                                                                                       // 5391
module.exports = Net;                                                                                                  // 5392
                                                                                                                       // 5393
},{"../../utils/utils":20,"../property":43}],40:[function(require,module,exports){                                     // 5394
/*                                                                                                                     // 5395
    This file is part of web3.js.                                                                                      // 5396
                                                                                                                       // 5397
    web3.js is free software: you can redistribute it and/or modify                                                    // 5398
    it under the terms of the GNU Lesser General Public License as published by                                        // 5399
    the Free Software Foundation, either version 3 of the License, or                                                  // 5400
    (at your option) any later version.                                                                                // 5401
                                                                                                                       // 5402
    web3.js is distributed in the hope that it will be useful,                                                         // 5403
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5404
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5405
    GNU Lesser General Public License for more details.                                                                // 5406
                                                                                                                       // 5407
    You should have received a copy of the GNU Lesser General Public License                                           // 5408
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5409
*/                                                                                                                     // 5410
/** @file shh.js                                                                                                       // 5411
 * @authors:                                                                                                           // 5412
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5413
 * @date 2015                                                                                                          // 5414
 */                                                                                                                    // 5415
                                                                                                                       // 5416
var Method = require('../method');                                                                                     // 5417
var formatters = require('../formatters');                                                                             // 5418
var Filter = require('../filter');                                                                                     // 5419
var watches = require('./watches');                                                                                    // 5420
                                                                                                                       // 5421
var Shh = function (web3) {                                                                                            // 5422
    this._requestManager = web3._requestManager;                                                                       // 5423
                                                                                                                       // 5424
    var self = this;                                                                                                   // 5425
                                                                                                                       // 5426
    methods().forEach(function(method) {                                                                               // 5427
        method.attachToObject(self);                                                                                   // 5428
        method.setRequestManager(self._requestManager);                                                                // 5429
    });                                                                                                                // 5430
};                                                                                                                     // 5431
                                                                                                                       // 5432
Shh.prototype.filter = function (fil, callback) {                                                                      // 5433
    return new Filter(this._requestManager, fil, watches.shh(), formatters.outputPostFormatter, callback);             // 5434
};                                                                                                                     // 5435
                                                                                                                       // 5436
var methods = function () {                                                                                            // 5437
                                                                                                                       // 5438
    var post = new Method({                                                                                            // 5439
        name: 'post',                                                                                                  // 5440
        call: 'shh_post',                                                                                              // 5441
        params: 1,                                                                                                     // 5442
        inputFormatter: [formatters.inputPostFormatter]                                                                // 5443
    });                                                                                                                // 5444
                                                                                                                       // 5445
    var newIdentity = new Method({                                                                                     // 5446
        name: 'newIdentity',                                                                                           // 5447
        call: 'shh_newIdentity',                                                                                       // 5448
        params: 0                                                                                                      // 5449
    });                                                                                                                // 5450
                                                                                                                       // 5451
    var hasIdentity = new Method({                                                                                     // 5452
        name: 'hasIdentity',                                                                                           // 5453
        call: 'shh_hasIdentity',                                                                                       // 5454
        params: 1                                                                                                      // 5455
    });                                                                                                                // 5456
                                                                                                                       // 5457
    var newGroup = new Method({                                                                                        // 5458
        name: 'newGroup',                                                                                              // 5459
        call: 'shh_newGroup',                                                                                          // 5460
        params: 0                                                                                                      // 5461
    });                                                                                                                // 5462
                                                                                                                       // 5463
    var addToGroup = new Method({                                                                                      // 5464
        name: 'addToGroup',                                                                                            // 5465
        call: 'shh_addToGroup',                                                                                        // 5466
        params: 0                                                                                                      // 5467
    });                                                                                                                // 5468
                                                                                                                       // 5469
    return [                                                                                                           // 5470
        post,                                                                                                          // 5471
        newIdentity,                                                                                                   // 5472
        hasIdentity,                                                                                                   // 5473
        newGroup,                                                                                                      // 5474
        addToGroup                                                                                                     // 5475
    ];                                                                                                                 // 5476
};                                                                                                                     // 5477
                                                                                                                       // 5478
module.exports = Shh;                                                                                                  // 5479
                                                                                                                       // 5480
                                                                                                                       // 5481
},{"../filter":29,"../formatters":30,"../method":36,"./watches":41}],41:[function(require,module,exports){             // 5482
/*                                                                                                                     // 5483
    This file is part of web3.js.                                                                                      // 5484
                                                                                                                       // 5485
    web3.js is free software: you can redistribute it and/or modify                                                    // 5486
    it under the terms of the GNU Lesser General Public License as published by                                        // 5487
    the Free Software Foundation, either version 3 of the License, or                                                  // 5488
    (at your option) any later version.                                                                                // 5489
                                                                                                                       // 5490
    web3.js is distributed in the hope that it will be useful,                                                         // 5491
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5492
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5493
    GNU Lesser General Public License for more details.                                                                // 5494
                                                                                                                       // 5495
    You should have received a copy of the GNU Lesser General Public License                                           // 5496
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5497
*/                                                                                                                     // 5498
/** @file watches.js                                                                                                   // 5499
 * @authors:                                                                                                           // 5500
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5501
 * @date 2015                                                                                                          // 5502
 */                                                                                                                    // 5503
                                                                                                                       // 5504
var Method = require('../method');                                                                                     // 5505
                                                                                                                       // 5506
/// @returns an array of objects describing web3.eth.filter api methods                                                // 5507
var eth = function () {                                                                                                // 5508
    var newFilterCall = function (args) {                                                                              // 5509
        var type = args[0];                                                                                            // 5510
                                                                                                                       // 5511
        switch(type) {                                                                                                 // 5512
            case 'latest':                                                                                             // 5513
                args.shift();                                                                                          // 5514
                this.params = 0;                                                                                       // 5515
                return 'eth_newBlockFilter';                                                                           // 5516
            case 'pending':                                                                                            // 5517
                args.shift();                                                                                          // 5518
                this.params = 0;                                                                                       // 5519
                return 'eth_newPendingTransactionFilter';                                                              // 5520
            default:                                                                                                   // 5521
                return 'eth_newFilter';                                                                                // 5522
        }                                                                                                              // 5523
    };                                                                                                                 // 5524
                                                                                                                       // 5525
    var newFilter = new Method({                                                                                       // 5526
        name: 'newFilter',                                                                                             // 5527
        call: newFilterCall,                                                                                           // 5528
        params: 1                                                                                                      // 5529
    });                                                                                                                // 5530
                                                                                                                       // 5531
    var uninstallFilter = new Method({                                                                                 // 5532
        name: 'uninstallFilter',                                                                                       // 5533
        call: 'eth_uninstallFilter',                                                                                   // 5534
        params: 1                                                                                                      // 5535
    });                                                                                                                // 5536
                                                                                                                       // 5537
    var getLogs = new Method({                                                                                         // 5538
        name: 'getLogs',                                                                                               // 5539
        call: 'eth_getFilterLogs',                                                                                     // 5540
        params: 1                                                                                                      // 5541
    });                                                                                                                // 5542
                                                                                                                       // 5543
    var poll = new Method({                                                                                            // 5544
        name: 'poll',                                                                                                  // 5545
        call: 'eth_getFilterChanges',                                                                                  // 5546
        params: 1                                                                                                      // 5547
    });                                                                                                                // 5548
                                                                                                                       // 5549
    return [                                                                                                           // 5550
        newFilter,                                                                                                     // 5551
        uninstallFilter,                                                                                               // 5552
        getLogs,                                                                                                       // 5553
        poll                                                                                                           // 5554
    ];                                                                                                                 // 5555
};                                                                                                                     // 5556
                                                                                                                       // 5557
/// @returns an array of objects describing web3.shh.watch api methods                                                 // 5558
var shh = function () {                                                                                                // 5559
    var newFilter = new Method({                                                                                       // 5560
        name: 'newFilter',                                                                                             // 5561
        call: 'shh_newFilter',                                                                                         // 5562
        params: 1                                                                                                      // 5563
    });                                                                                                                // 5564
                                                                                                                       // 5565
    var uninstallFilter = new Method({                                                                                 // 5566
        name: 'uninstallFilter',                                                                                       // 5567
        call: 'shh_uninstallFilter',                                                                                   // 5568
        params: 1                                                                                                      // 5569
    });                                                                                                                // 5570
                                                                                                                       // 5571
    var getLogs = new Method({                                                                                         // 5572
        name: 'getLogs',                                                                                               // 5573
        call: 'shh_getMessages',                                                                                       // 5574
        params: 1                                                                                                      // 5575
    });                                                                                                                // 5576
                                                                                                                       // 5577
    var poll = new Method({                                                                                            // 5578
        name: 'poll',                                                                                                  // 5579
        call: 'shh_getFilterChanges',                                                                                  // 5580
        params: 1                                                                                                      // 5581
    });                                                                                                                // 5582
                                                                                                                       // 5583
    return [                                                                                                           // 5584
        newFilter,                                                                                                     // 5585
        uninstallFilter,                                                                                               // 5586
        getLogs,                                                                                                       // 5587
        poll                                                                                                           // 5588
    ];                                                                                                                 // 5589
};                                                                                                                     // 5590
                                                                                                                       // 5591
module.exports = {                                                                                                     // 5592
    eth: eth,                                                                                                          // 5593
    shh: shh                                                                                                           // 5594
};                                                                                                                     // 5595
                                                                                                                       // 5596
                                                                                                                       // 5597
},{"../method":36}],42:[function(require,module,exports){                                                              // 5598
/*                                                                                                                     // 5599
    This file is part of web3.js.                                                                                      // 5600
                                                                                                                       // 5601
    web3.js is free software: you can redistribute it and/or modify                                                    // 5602
    it under the terms of the GNU Lesser General Public License as published by                                        // 5603
    the Free Software Foundation, either version 3 of the License, or                                                  // 5604
    (at your option) any later version.                                                                                // 5605
                                                                                                                       // 5606
    web3.js is distributed in the hope that it will be useful,                                                         // 5607
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5608
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5609
    GNU Lesser General Public License for more details.                                                                // 5610
                                                                                                                       // 5611
    You should have received a copy of the GNU Lesser General Public License                                           // 5612
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5613
*/                                                                                                                     // 5614
/**                                                                                                                    // 5615
 * @file namereg.js                                                                                                    // 5616
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5617
 * @date 2015                                                                                                          // 5618
 */                                                                                                                    // 5619
                                                                                                                       // 5620
var globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');                                                 // 5621
var icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');                                                      // 5622
                                                                                                                       // 5623
var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';                                               // 5624
var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';                                                 // 5625
                                                                                                                       // 5626
module.exports = {                                                                                                     // 5627
    global: {                                                                                                          // 5628
        abi: globalRegistrarAbi,                                                                                       // 5629
        address: globalNameregAddress                                                                                  // 5630
    },                                                                                                                 // 5631
    icap: {                                                                                                            // 5632
        abi: icapRegistrarAbi,                                                                                         // 5633
        address: icapNameregAddress                                                                                    // 5634
    }                                                                                                                  // 5635
};                                                                                                                     // 5636
                                                                                                                       // 5637
                                                                                                                       // 5638
},{"../contracts/GlobalRegistrar.json":1,"../contracts/ICAPRegistrar.json":2}],43:[function(require,module,exports){   // 5639
/*                                                                                                                     // 5640
    This file is part of web3.js.                                                                                      // 5641
                                                                                                                       // 5642
    web3.js is free software: you can redistribute it and/or modify                                                    // 5643
    it under the terms of the GNU Lesser General Public License as published by                                        // 5644
    the Free Software Foundation, either version 3 of the License, or                                                  // 5645
    (at your option) any later version.                                                                                // 5646
                                                                                                                       // 5647
    web3.js is distributed in the hope that it will be useful,                                                         // 5648
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5649
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5650
    GNU Lesser General Public License for more details.                                                                // 5651
                                                                                                                       // 5652
    You should have received a copy of the GNU Lesser General Public License                                           // 5653
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5654
*/                                                                                                                     // 5655
/**                                                                                                                    // 5656
 * @file property.js                                                                                                   // 5657
 * @author Fabian Vogelsteller <fabian@frozeman.de>                                                                    // 5658
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5659
 * @date 2015                                                                                                          // 5660
 */                                                                                                                    // 5661
                                                                                                                       // 5662
var utils = require('../utils/utils');                                                                                 // 5663
                                                                                                                       // 5664
var Property = function (options) {                                                                                    // 5665
    this.name = options.name;                                                                                          // 5666
    this.getter = options.getter;                                                                                      // 5667
    this.setter = options.setter;                                                                                      // 5668
    this.outputFormatter = options.outputFormatter;                                                                    // 5669
    this.inputFormatter = options.inputFormatter;                                                                      // 5670
    this.requestManager = null;                                                                                        // 5671
};                                                                                                                     // 5672
                                                                                                                       // 5673
Property.prototype.setRequestManager = function (rm) {                                                                 // 5674
    this.requestManager = rm;                                                                                          // 5675
};                                                                                                                     // 5676
                                                                                                                       // 5677
/**                                                                                                                    // 5678
 * Should be called to format input args of method                                                                     // 5679
 *                                                                                                                     // 5680
 * @method formatInput                                                                                                 // 5681
 * @param {Array}                                                                                                      // 5682
 * @return {Array}                                                                                                     // 5683
 */                                                                                                                    // 5684
Property.prototype.formatInput = function (arg) {                                                                      // 5685
    return this.inputFormatter ? this.inputFormatter(arg) : arg;                                                       // 5686
};                                                                                                                     // 5687
                                                                                                                       // 5688
/**                                                                                                                    // 5689
 * Should be called to format output(result) of method                                                                 // 5690
 *                                                                                                                     // 5691
 * @method formatOutput                                                                                                // 5692
 * @param {Object}                                                                                                     // 5693
 * @return {Object}                                                                                                    // 5694
 */                                                                                                                    // 5695
Property.prototype.formatOutput = function (result) {                                                                  // 5696
    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;                            // 5697
};                                                                                                                     // 5698
                                                                                                                       // 5699
/**                                                                                                                    // 5700
 * Should be used to extract callback from array of arguments. Modifies input param                                    // 5701
 *                                                                                                                     // 5702
 * @method extractCallback                                                                                             // 5703
 * @param {Array} arguments                                                                                            // 5704
 * @return {Function|Null} callback, if exists                                                                         // 5705
 */                                                                                                                    // 5706
Property.prototype.extractCallback = function (args) {                                                                 // 5707
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 5708
        return args.pop(); // modify the args array!                                                                   // 5709
    }                                                                                                                  // 5710
};                                                                                                                     // 5711
                                                                                                                       // 5712
                                                                                                                       // 5713
/**                                                                                                                    // 5714
 * Should attach function to method                                                                                    // 5715
 *                                                                                                                     // 5716
 * @method attachToObject                                                                                              // 5717
 * @param {Object}                                                                                                     // 5718
 * @param {Function}                                                                                                   // 5719
 */                                                                                                                    // 5720
Property.prototype.attachToObject = function (obj) {                                                                   // 5721
    var proto = {                                                                                                      // 5722
        get: this.buildGet()                                                                                           // 5723
    };                                                                                                                 // 5724
                                                                                                                       // 5725
    var names = this.name.split('.');                                                                                  // 5726
    var name = names[0];                                                                                               // 5727
    if (names.length > 1) {                                                                                            // 5728
        obj[names[0]] = obj[names[0]] || {};                                                                           // 5729
        obj = obj[names[0]];                                                                                           // 5730
        name = names[1];                                                                                               // 5731
    }                                                                                                                  // 5732
                                                                                                                       // 5733
    Object.defineProperty(obj, name, proto);                                                                           // 5734
    obj[asyncGetterName(name)] = this.buildAsyncGet();                                                                 // 5735
};                                                                                                                     // 5736
                                                                                                                       // 5737
var asyncGetterName = function (name) {                                                                                // 5738
    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);                                                       // 5739
};                                                                                                                     // 5740
                                                                                                                       // 5741
Property.prototype.buildGet = function () {                                                                            // 5742
    var property = this;                                                                                               // 5743
    return function get() {                                                                                            // 5744
        return property.formatOutput(property.requestManager.send({                                                    // 5745
            method: property.getter                                                                                    // 5746
        }));                                                                                                           // 5747
    };                                                                                                                 // 5748
};                                                                                                                     // 5749
                                                                                                                       // 5750
Property.prototype.buildAsyncGet = function () {                                                                       // 5751
    var property = this;                                                                                               // 5752
    var get = function (callback) {                                                                                    // 5753
        property.requestManager.sendAsync({                                                                            // 5754
            method: property.getter                                                                                    // 5755
        }, function (err, result) {                                                                                    // 5756
            callback(err, property.formatOutput(result));                                                              // 5757
        });                                                                                                            // 5758
    };                                                                                                                 // 5759
    get.request = this.request.bind(this);                                                                             // 5760
    return get;                                                                                                        // 5761
};                                                                                                                     // 5762
                                                                                                                       // 5763
/**                                                                                                                    // 5764
 * Should be called to create pure JSONRPC request which can be used in batch request                                  // 5765
 *                                                                                                                     // 5766
 * @method request                                                                                                     // 5767
 * @param {...} params                                                                                                 // 5768
 * @return {Object} jsonrpc request                                                                                    // 5769
 */                                                                                                                    // 5770
Property.prototype.request = function () {                                                                             // 5771
    var payload = {                                                                                                    // 5772
        method: this.getter,                                                                                           // 5773
        params: [],                                                                                                    // 5774
        callback: this.extractCallback(Array.prototype.slice.call(arguments))                                          // 5775
    };                                                                                                                 // 5776
    payload.format = this.formatOutput.bind(this);                                                                     // 5777
    return payload;                                                                                                    // 5778
};                                                                                                                     // 5779
                                                                                                                       // 5780
module.exports = Property;                                                                                             // 5781
                                                                                                                       // 5782
                                                                                                                       // 5783
},{"../utils/utils":20}],44:[function(require,module,exports){                                                         // 5784
/*                                                                                                                     // 5785
    This file is part of web3.js.                                                                                      // 5786
                                                                                                                       // 5787
    web3.js is free software: you can redistribute it and/or modify                                                    // 5788
    it under the terms of the GNU Lesser General Public License as published by                                        // 5789
    the Free Software Foundation, either version 3 of the License, or                                                  // 5790
    (at your option) any later version.                                                                                // 5791
                                                                                                                       // 5792
    web3.js is distributed in the hope that it will be useful,                                                         // 5793
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5794
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5795
    GNU Lesser General Public License for more details.                                                                // 5796
                                                                                                                       // 5797
    You should have received a copy of the GNU Lesser General Public License                                           // 5798
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5799
*/                                                                                                                     // 5800
/**                                                                                                                    // 5801
 * @file requestmanager.js                                                                                             // 5802
 * @author Jeffrey Wilcke <jeff@ethdev.com>                                                                            // 5803
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5804
 * @author Marian Oancea <marian@ethdev.com>                                                                           // 5805
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5806
 * @author Gav Wood <g@ethdev.com>                                                                                     // 5807
 * @date 2014                                                                                                          // 5808
 */                                                                                                                    // 5809
                                                                                                                       // 5810
var Jsonrpc = require('./jsonrpc');                                                                                    // 5811
var utils = require('../utils/utils');                                                                                 // 5812
var c = require('../utils/config');                                                                                    // 5813
var errors = require('./errors');                                                                                      // 5814
                                                                                                                       // 5815
/**                                                                                                                    // 5816
 * It's responsible for passing messages to providers                                                                  // 5817
 * It's also responsible for polling the ethereum node for incoming messages                                           // 5818
 * Default poll timeout is 1 second                                                                                    // 5819
 * Singleton                                                                                                           // 5820
 */                                                                                                                    // 5821
var RequestManager = function (provider) {                                                                             // 5822
    this.provider = provider;                                                                                          // 5823
    this.polls = {};                                                                                                   // 5824
    this.timeout = null;                                                                                               // 5825
};                                                                                                                     // 5826
                                                                                                                       // 5827
/**                                                                                                                    // 5828
 * Should be used to synchronously send request                                                                        // 5829
 *                                                                                                                     // 5830
 * @method send                                                                                                        // 5831
 * @param {Object} data                                                                                                // 5832
 * @return {Object}                                                                                                    // 5833
 */                                                                                                                    // 5834
RequestManager.prototype.send = function (data) {                                                                      // 5835
    if (!this.provider) {                                                                                              // 5836
        console.error(errors.InvalidProvider());                                                                       // 5837
        return null;                                                                                                   // 5838
    }                                                                                                                  // 5839
                                                                                                                       // 5840
    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                           // 5841
    var result = this.provider.send(payload);                                                                          // 5842
                                                                                                                       // 5843
    if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                              // 5844
        throw errors.InvalidResponse(result);                                                                          // 5845
    }                                                                                                                  // 5846
                                                                                                                       // 5847
    return result.result;                                                                                              // 5848
};                                                                                                                     // 5849
                                                                                                                       // 5850
/**                                                                                                                    // 5851
 * Should be used to asynchronously send request                                                                       // 5852
 *                                                                                                                     // 5853
 * @method sendAsync                                                                                                   // 5854
 * @param {Object} data                                                                                                // 5855
 * @param {Function} callback                                                                                          // 5856
 */                                                                                                                    // 5857
RequestManager.prototype.sendAsync = function (data, callback) {                                                       // 5858
    if (!this.provider) {                                                                                              // 5859
        return callback(errors.InvalidProvider());                                                                     // 5860
    }                                                                                                                  // 5861
                                                                                                                       // 5862
    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                           // 5863
    this.provider.sendAsync(payload, function (err, result) {                                                          // 5864
        if (err) {                                                                                                     // 5865
            return callback(err);                                                                                      // 5866
        }                                                                                                              // 5867
                                                                                                                       // 5868
        if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                          // 5869
            return callback(errors.InvalidResponse(result));                                                           // 5870
        }                                                                                                              // 5871
                                                                                                                       // 5872
        callback(null, result.result);                                                                                 // 5873
    });                                                                                                                // 5874
};                                                                                                                     // 5875
                                                                                                                       // 5876
/**                                                                                                                    // 5877
 * Should be called to asynchronously send batch request                                                               // 5878
 *                                                                                                                     // 5879
 * @method sendBatch                                                                                                   // 5880
 * @param {Array} batch data                                                                                           // 5881
 * @param {Function} callback                                                                                          // 5882
 */                                                                                                                    // 5883
RequestManager.prototype.sendBatch = function (data, callback) {                                                       // 5884
    if (!this.provider) {                                                                                              // 5885
        return callback(errors.InvalidProvider());                                                                     // 5886
    }                                                                                                                  // 5887
                                                                                                                       // 5888
    var payload = Jsonrpc.getInstance().toBatchPayload(data);                                                          // 5889
                                                                                                                       // 5890
    this.provider.sendAsync(payload, function (err, results) {                                                         // 5891
        if (err) {                                                                                                     // 5892
            return callback(err);                                                                                      // 5893
        }                                                                                                              // 5894
                                                                                                                       // 5895
        if (!utils.isArray(results)) {                                                                                 // 5896
            return callback(errors.InvalidResponse(results));                                                          // 5897
        }                                                                                                              // 5898
                                                                                                                       // 5899
        callback(err, results);                                                                                        // 5900
    });                                                                                                                // 5901
};                                                                                                                     // 5902
                                                                                                                       // 5903
/**                                                                                                                    // 5904
 * Should be used to set provider of request manager                                                                   // 5905
 *                                                                                                                     // 5906
 * @method setProvider                                                                                                 // 5907
 * @param {Object}                                                                                                     // 5908
 */                                                                                                                    // 5909
RequestManager.prototype.setProvider = function (p) {                                                                  // 5910
    this.provider = p;                                                                                                 // 5911
};                                                                                                                     // 5912
                                                                                                                       // 5913
/**                                                                                                                    // 5914
 * Should be used to start polling                                                                                     // 5915
 *                                                                                                                     // 5916
 * @method startPolling                                                                                                // 5917
 * @param {Object} data                                                                                                // 5918
 * @param {Number} pollId                                                                                              // 5919
 * @param {Function} callback                                                                                          // 5920
 * @param {Function} uninstall                                                                                         // 5921
 *                                                                                                                     // 5922
 * @todo cleanup number of params                                                                                      // 5923
 */                                                                                                                    // 5924
RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {                                 // 5925
    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};                           // 5926
                                                                                                                       // 5927
                                                                                                                       // 5928
    // start polling                                                                                                   // 5929
    if (!this.timeout) {                                                                                               // 5930
        this.poll();                                                                                                   // 5931
    }                                                                                                                  // 5932
};                                                                                                                     // 5933
                                                                                                                       // 5934
/**                                                                                                                    // 5935
 * Should be used to stop polling for filter with given id                                                             // 5936
 *                                                                                                                     // 5937
 * @method stopPolling                                                                                                 // 5938
 * @param {Number} pollId                                                                                              // 5939
 */                                                                                                                    // 5940
RequestManager.prototype.stopPolling = function (pollId) {                                                             // 5941
    delete this.polls[pollId];                                                                                         // 5942
                                                                                                                       // 5943
    // stop polling                                                                                                    // 5944
    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 5945
        clearTimeout(this.timeout);                                                                                    // 5946
        this.timeout = null;                                                                                           // 5947
    }                                                                                                                  // 5948
};                                                                                                                     // 5949
                                                                                                                       // 5950
/**                                                                                                                    // 5951
 * Should be called to reset the polling mechanism of the request manager                                              // 5952
 *                                                                                                                     // 5953
 * @method reset                                                                                                       // 5954
 */                                                                                                                    // 5955
RequestManager.prototype.reset = function (keepIsSyncing) {                                                            // 5956
    /*jshint maxcomplexity:5 */                                                                                        // 5957
                                                                                                                       // 5958
    for (var key in this.polls) {                                                                                      // 5959
        // remove all polls, except sync polls,                                                                        // 5960
        // they need to be removed manually by calling syncing.stopWatching()                                          // 5961
        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {                                                        // 5962
            this.polls[key].uninstall();                                                                               // 5963
            delete this.polls[key];                                                                                    // 5964
        }                                                                                                              // 5965
    }                                                                                                                  // 5966
                                                                                                                       // 5967
    // stop polling                                                                                                    // 5968
    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 5969
        clearTimeout(this.timeout);                                                                                    // 5970
        this.timeout = null;                                                                                           // 5971
    }                                                                                                                  // 5972
};                                                                                                                     // 5973
                                                                                                                       // 5974
/**                                                                                                                    // 5975
 * Should be called to poll for changes on filter with given id                                                        // 5976
 *                                                                                                                     // 5977
 * @method poll                                                                                                        // 5978
 */                                                                                                                    // 5979
RequestManager.prototype.poll = function () {                                                                          // 5980
    /*jshint maxcomplexity: 6 */                                                                                       // 5981
    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);                                            // 5982
                                                                                                                       // 5983
    if (Object.keys(this.polls).length === 0) {                                                                        // 5984
        return;                                                                                                        // 5985
    }                                                                                                                  // 5986
                                                                                                                       // 5987
    if (!this.provider) {                                                                                              // 5988
        console.error(errors.InvalidProvider());                                                                       // 5989
        return;                                                                                                        // 5990
    }                                                                                                                  // 5991
                                                                                                                       // 5992
    var pollsData = [];                                                                                                // 5993
    var pollsIds = [];                                                                                                 // 5994
    for (var key in this.polls) {                                                                                      // 5995
        pollsData.push(this.polls[key].data);                                                                          // 5996
        pollsIds.push(key);                                                                                            // 5997
    }                                                                                                                  // 5998
                                                                                                                       // 5999
    if (pollsData.length === 0) {                                                                                      // 6000
        return;                                                                                                        // 6001
    }                                                                                                                  // 6002
                                                                                                                       // 6003
    var payload = Jsonrpc.getInstance().toBatchPayload(pollsData);                                                     // 6004
                                                                                                                       // 6005
    // map the request id to they poll id                                                                              // 6006
    var pollsIdMap = {};                                                                                               // 6007
    payload.forEach(function(load, index){                                                                             // 6008
        pollsIdMap[load.id] = pollsIds[index];                                                                         // 6009
    });                                                                                                                // 6010
                                                                                                                       // 6011
                                                                                                                       // 6012
    var self = this;                                                                                                   // 6013
    this.provider.sendAsync(payload, function (error, results) {                                                       // 6014
                                                                                                                       // 6015
                                                                                                                       // 6016
        // TODO: console log?                                                                                          // 6017
        if (error) {                                                                                                   // 6018
            return;                                                                                                    // 6019
        }                                                                                                              // 6020
                                                                                                                       // 6021
        if (!utils.isArray(results)) {                                                                                 // 6022
            throw errors.InvalidResponse(results);                                                                     // 6023
        }                                                                                                              // 6024
        results.map(function (result) {                                                                                // 6025
            var id = pollsIdMap[result.id];                                                                            // 6026
                                                                                                                       // 6027
            // make sure the filter is still installed after arrival of the request                                    // 6028
            if (self.polls[id]) {                                                                                      // 6029
                result.callback = self.polls[id].callback;                                                             // 6030
                return result;                                                                                         // 6031
            } else                                                                                                     // 6032
                return false;                                                                                          // 6033
        }).filter(function (result) {                                                                                  // 6034
            return !!result;                                                                                           // 6035
        }).filter(function (result) {                                                                                  // 6036
            var valid = Jsonrpc.getInstance().isValidResponse(result);                                                 // 6037
            if (!valid) {                                                                                              // 6038
                result.callback(errors.InvalidResponse(result));                                                       // 6039
            }                                                                                                          // 6040
            return valid;                                                                                              // 6041
        }).forEach(function (result) {                                                                                 // 6042
            result.callback(null, result.result);                                                                      // 6043
        });                                                                                                            // 6044
    });                                                                                                                // 6045
};                                                                                                                     // 6046
                                                                                                                       // 6047
module.exports = RequestManager;                                                                                       // 6048
                                                                                                                       // 6049
                                                                                                                       // 6050
},{"../utils/config":18,"../utils/utils":20,"./errors":26,"./jsonrpc":35}],45:[function(require,module,exports){       // 6051
                                                                                                                       // 6052
                                                                                                                       // 6053
var Settings = function () {                                                                                           // 6054
    this.defaultBlock = 'latest';                                                                                      // 6055
    this.defaultAccount = undefined;                                                                                   // 6056
};                                                                                                                     // 6057
                                                                                                                       // 6058
module.exports = Settings;                                                                                             // 6059
                                                                                                                       // 6060
                                                                                                                       // 6061
},{}],46:[function(require,module,exports){                                                                            // 6062
/*                                                                                                                     // 6063
    This file is part of web3.js.                                                                                      // 6064
                                                                                                                       // 6065
    web3.js is free software: you can redistribute it and/or modify                                                    // 6066
    it under the terms of the GNU Lesser General Public License as published by                                        // 6067
    the Free Software Foundation, either version 3 of the License, or                                                  // 6068
    (at your option) any later version.                                                                                // 6069
                                                                                                                       // 6070
    web3.js is distributed in the hope that it will be useful,                                                         // 6071
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6072
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6073
    GNU Lesser General Public License for more details.                                                                // 6074
                                                                                                                       // 6075
    You should have received a copy of the GNU Lesser General Public License                                           // 6076
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6077
*/                                                                                                                     // 6078
/** @file syncing.js                                                                                                   // 6079
 * @authors:                                                                                                           // 6080
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 6081
 * @date 2015                                                                                                          // 6082
 */                                                                                                                    // 6083
                                                                                                                       // 6084
var formatters = require('./formatters');                                                                              // 6085
var utils = require('../utils/utils');                                                                                 // 6086
                                                                                                                       // 6087
var count = 1;                                                                                                         // 6088
                                                                                                                       // 6089
/**                                                                                                                    // 6090
Adds the callback and sets up the methods, to iterate over the results.                                                // 6091
                                                                                                                       // 6092
@method pollSyncing                                                                                                    // 6093
@param {Object} self                                                                                                   // 6094
*/                                                                                                                     // 6095
var pollSyncing = function(self) {                                                                                     // 6096
                                                                                                                       // 6097
    var onMessage = function (error, sync) {                                                                           // 6098
        if (error) {                                                                                                   // 6099
            return self.callbacks.forEach(function (callback) {                                                        // 6100
                callback(error);                                                                                       // 6101
            });                                                                                                        // 6102
        }                                                                                                              // 6103
                                                                                                                       // 6104
        if(utils.isObject(sync) && sync.startingBlock)                                                                 // 6105
            sync = formatters.outputSyncingFormatter(sync);                                                            // 6106
                                                                                                                       // 6107
        self.callbacks.forEach(function (callback) {                                                                   // 6108
            if (self.lastSyncState !== sync) {                                                                         // 6109
                                                                                                                       // 6110
                // call the callback with true first so the app can stop anything, before receiving the sync data      // 6111
                if(!self.lastSyncState && utils.isObject(sync))                                                        // 6112
                    callback(null, true);                                                                              // 6113
                                                                                                                       // 6114
                // call on the next CPU cycle, so the actions of the sync stop can be processes first                  // 6115
                setTimeout(function() {                                                                                // 6116
                    callback(null, sync);                                                                              // 6117
                }, 0);                                                                                                 // 6118
                                                                                                                       // 6119
                self.lastSyncState = sync;                                                                             // 6120
            }                                                                                                          // 6121
        });                                                                                                            // 6122
    };                                                                                                                 // 6123
                                                                                                                       // 6124
    self.requestManager.startPolling({                                                                                 // 6125
        method: 'eth_syncing',                                                                                         // 6126
        params: [],                                                                                                    // 6127
    }, self.pollId, onMessage, self.stopWatching.bind(self));                                                          // 6128
                                                                                                                       // 6129
};                                                                                                                     // 6130
                                                                                                                       // 6131
var IsSyncing = function (requestManager, callback) {                                                                  // 6132
    this.requestManager = requestManager;                                                                              // 6133
    this.pollId = 'syncPoll_'+ count++;                                                                                // 6134
    this.callbacks = [];                                                                                               // 6135
    this.addCallback(callback);                                                                                        // 6136
    this.lastSyncState = false;                                                                                        // 6137
    pollSyncing(this);                                                                                                 // 6138
                                                                                                                       // 6139
    return this;                                                                                                       // 6140
};                                                                                                                     // 6141
                                                                                                                       // 6142
IsSyncing.prototype.addCallback = function (callback) {                                                                // 6143
    if(callback)                                                                                                       // 6144
        this.callbacks.push(callback);                                                                                 // 6145
    return this;                                                                                                       // 6146
};                                                                                                                     // 6147
                                                                                                                       // 6148
IsSyncing.prototype.stopWatching = function () {                                                                       // 6149
    this.requestManager.stopPolling(this.pollId);                                                                      // 6150
    this.callbacks = [];                                                                                               // 6151
};                                                                                                                     // 6152
                                                                                                                       // 6153
module.exports = IsSyncing;                                                                                            // 6154
                                                                                                                       // 6155
                                                                                                                       // 6156
},{"../utils/utils":20,"./formatters":30}],47:[function(require,module,exports){                                       // 6157
/*                                                                                                                     // 6158
    This file is part of web3.js.                                                                                      // 6159
                                                                                                                       // 6160
    web3.js is free software: you can redistribute it and/or modify                                                    // 6161
    it under the terms of the GNU Lesser General Public License as published by                                        // 6162
    the Free Software Foundation, either version 3 of the License, or                                                  // 6163
    (at your option) any later version.                                                                                // 6164
                                                                                                                       // 6165
    web3.js is distributed in the hope that it will be useful,                                                         // 6166
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6167
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6168
    GNU Lesser General Public License for more details.                                                                // 6169
                                                                                                                       // 6170
    You should have received a copy of the GNU Lesser General Public License                                           // 6171
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6172
*/                                                                                                                     // 6173
/**                                                                                                                    // 6174
 * @file transfer.js                                                                                                   // 6175
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6176
 * @date 2015                                                                                                          // 6177
 */                                                                                                                    // 6178
                                                                                                                       // 6179
var Iban = require('./iban');                                                                                          // 6180
var exchangeAbi = require('../contracts/SmartExchange.json');                                                          // 6181
                                                                                                                       // 6182
/**                                                                                                                    // 6183
 * Should be used to make Iban transfer                                                                                // 6184
 *                                                                                                                     // 6185
 * @method transfer                                                                                                    // 6186
 * @param {String} from                                                                                                // 6187
 * @param {String} to iban                                                                                             // 6188
 * @param {Value} value to be tranfered                                                                                // 6189
 * @param {Function} callback, callback                                                                                // 6190
 */                                                                                                                    // 6191
var transfer = function (eth, from, to, value, callback) {                                                             // 6192
    var iban = new Iban(to);                                                                                           // 6193
    if (!iban.isValid()) {                                                                                             // 6194
        throw new Error('invalid iban address');                                                                       // 6195
    }                                                                                                                  // 6196
                                                                                                                       // 6197
    if (iban.isDirect()) {                                                                                             // 6198
        return transferToAddress(eth, from, iban.address(), value, callback);                                          // 6199
    }                                                                                                                  // 6200
                                                                                                                       // 6201
    if (!callback) {                                                                                                   // 6202
        var address = eth.icapNamereg().addr(iban.institution());                                                      // 6203
        return deposit(eth, from, address, value, iban.client());                                                      // 6204
    }                                                                                                                  // 6205
                                                                                                                       // 6206
    eth.icapNamereg().addr(iban.institution(), function (err, address) {                                               // 6207
        return deposit(eth, from, address, value, iban.client(), callback);                                            // 6208
    });                                                                                                                // 6209
                                                                                                                       // 6210
};                                                                                                                     // 6211
                                                                                                                       // 6212
/**                                                                                                                    // 6213
 * Should be used to transfer funds to certain address                                                                 // 6214
 *                                                                                                                     // 6215
 * @method transferToAddress                                                                                           // 6216
 * @param {String} from                                                                                                // 6217
 * @param {String} to                                                                                                  // 6218
 * @param {Value} value to be tranfered                                                                                // 6219
 * @param {Function} callback, callback                                                                                // 6220
 */                                                                                                                    // 6221
var transferToAddress = function (eth, from, to, value, callback) {                                                    // 6222
    return eth.sendTransaction({                                                                                       // 6223
        address: to,                                                                                                   // 6224
        from: from,                                                                                                    // 6225
        value: value                                                                                                   // 6226
    }, callback);                                                                                                      // 6227
};                                                                                                                     // 6228
                                                                                                                       // 6229
/**                                                                                                                    // 6230
 * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)              // 6231
 *                                                                                                                     // 6232
 * @method deposit                                                                                                     // 6233
 * @param {String} from                                                                                                // 6234
 * @param {String} to                                                                                                  // 6235
 * @param {Value} value to be transfered                                                                               // 6236
 * @param {String} client unique identifier                                                                            // 6237
 * @param {Function} callback, callback                                                                                // 6238
 */                                                                                                                    // 6239
var deposit = function (eth, from, to, value, client, callback) {                                                      // 6240
    var abi = exchangeAbi;                                                                                             // 6241
    return eth.contract(abi).at(to).deposit(client, {                                                                  // 6242
        from: from,                                                                                                    // 6243
        value: value                                                                                                   // 6244
    }, callback);                                                                                                      // 6245
};                                                                                                                     // 6246
                                                                                                                       // 6247
module.exports = transfer;                                                                                             // 6248
                                                                                                                       // 6249
                                                                                                                       // 6250
},{"../contracts/SmartExchange.json":3,"./iban":33}],48:[function(require,module,exports){                             // 6251
                                                                                                                       // 6252
},{}],49:[function(require,module,exports){                                                                            // 6253
;(function (root, factory, undef) {                                                                                    // 6254
	if (typeof exports === "object") {                                                                                    // 6255
		// CommonJS                                                                                                          // 6256
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 6258
	else if (typeof define === "function" && define.amd) {                                                                // 6259
		// AMD                                                                                                               // 6260
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 6261
	}                                                                                                                     // 6262
	else {                                                                                                                // 6263
		// Global (browser)                                                                                                  // 6264
		factory(root.CryptoJS);                                                                                              // 6265
	}                                                                                                                     // 6266
}(this, function (CryptoJS) {                                                                                          // 6267
                                                                                                                       // 6268
	(function () {                                                                                                        // 6269
	    // Shortcuts                                                                                                      // 6270
	    var C = CryptoJS;                                                                                                 // 6271
	    var C_lib = C.lib;                                                                                                // 6272
	    var BlockCipher = C_lib.BlockCipher;                                                                              // 6273
	    var C_algo = C.algo;                                                                                              // 6274
                                                                                                                       // 6275
	    // Lookup tables                                                                                                  // 6276
	    var SBOX = [];                                                                                                    // 6277
	    var INV_SBOX = [];                                                                                                // 6278
	    var SUB_MIX_0 = [];                                                                                               // 6279
	    var SUB_MIX_1 = [];                                                                                               // 6280
	    var SUB_MIX_2 = [];                                                                                               // 6281
	    var SUB_MIX_3 = [];                                                                                               // 6282
	    var INV_SUB_MIX_0 = [];                                                                                           // 6283
	    var INV_SUB_MIX_1 = [];                                                                                           // 6284
	    var INV_SUB_MIX_2 = [];                                                                                           // 6285
	    var INV_SUB_MIX_3 = [];                                                                                           // 6286
                                                                                                                       // 6287
	    // Compute lookup tables                                                                                          // 6288
	    (function () {                                                                                                    // 6289
	        // Compute double table                                                                                       // 6290
	        var d = [];                                                                                                   // 6291
	        for (var i = 0; i < 256; i++) {                                                                               // 6292
	            if (i < 128) {                                                                                            // 6293
	                d[i] = i << 1;                                                                                        // 6294
	            } else {                                                                                                  // 6295
	                d[i] = (i << 1) ^ 0x11b;                                                                              // 6296
	            }                                                                                                         // 6297
	        }                                                                                                             // 6298
                                                                                                                       // 6299
	        // Walk GF(2^8)                                                                                               // 6300
	        var x = 0;                                                                                                    // 6301
	        var xi = 0;                                                                                                   // 6302
	        for (var i = 0; i < 256; i++) {                                                                               // 6303
	            // Compute sbox                                                                                           // 6304
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);                                              // 6305
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;                                                                     // 6306
	            SBOX[x] = sx;                                                                                             // 6307
	            INV_SBOX[sx] = x;                                                                                         // 6308
                                                                                                                       // 6309
	            // Compute multiplication                                                                                 // 6310
	            var x2 = d[x];                                                                                            // 6311
	            var x4 = d[x2];                                                                                           // 6312
	            var x8 = d[x4];                                                                                           // 6313
                                                                                                                       // 6314
	            // Compute sub bytes, mix columns tables                                                                  // 6315
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);                                                               // 6316
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);                                                                     // 6317
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);                                                                    // 6318
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);                                                                    // 6319
	            SUB_MIX_3[x] = t;                                                                                         // 6320
                                                                                                                       // 6321
	            // Compute inv sub bytes, inv mix columns tables                                                          // 6322
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);                               // 6323
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);                                                                // 6324
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);                                                               // 6325
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);                                                               // 6326
	            INV_SUB_MIX_3[sx] = t;                                                                                    // 6327
                                                                                                                       // 6328
	            // Compute next counter                                                                                   // 6329
	            if (!x) {                                                                                                 // 6330
	                x = xi = 1;                                                                                           // 6331
	            } else {                                                                                                  // 6332
	                x = x2 ^ d[d[d[x8 ^ x2]]];                                                                            // 6333
	                xi ^= d[d[xi]];                                                                                       // 6334
	            }                                                                                                         // 6335
	        }                                                                                                             // 6336
	    }());                                                                                                             // 6337
                                                                                                                       // 6338
	    // Precomputed Rcon lookup                                                                                        // 6339
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];                                    // 6340
                                                                                                                       // 6341
	    /**                                                                                                               // 6342
	     * AES block cipher algorithm.                                                                                    // 6343
	     */                                                                                                               // 6344
	    var AES = C_algo.AES = BlockCipher.extend({                                                                       // 6345
	        _doReset: function () {                                                                                       // 6346
	            // Shortcuts                                                                                              // 6347
	            var key = this._key;                                                                                      // 6348
	            var keyWords = key.words;                                                                                 // 6349
	            var keySize = key.sigBytes / 4;                                                                           // 6350
                                                                                                                       // 6351
	            // Compute number of rounds                                                                               // 6352
	            var nRounds = this._nRounds = keySize + 6                                                                 // 6353
                                                                                                                       // 6354
	            // Compute number of key schedule rows                                                                    // 6355
	            var ksRows = (nRounds + 1) * 4;                                                                           // 6356
                                                                                                                       // 6357
	            // Compute key schedule                                                                                   // 6358
	            var keySchedule = this._keySchedule = [];                                                                 // 6359
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {                                                            // 6360
	                if (ksRow < keySize) {                                                                                // 6361
	                    keySchedule[ksRow] = keyWords[ksRow];                                                             // 6362
	                } else {                                                                                              // 6363
	                    var t = keySchedule[ksRow - 1];                                                                   // 6364
                                                                                                                       // 6365
	                    if (!(ksRow % keySize)) {                                                                         // 6366
	                        // Rot word                                                                                   // 6367
	                        t = (t << 8) | (t >>> 24);                                                                    // 6368
                                                                                                                       // 6369
	                        // Sub word                                                                                   // 6370
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                                                                                                                       // 6372
	                        // Mix Rcon                                                                                   // 6373
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;                                                       // 6374
	                    } else if (keySize > 6 && ksRow % keySize == 4) {                                                 // 6375
	                        // Sub word                                                                                   // 6376
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }                                                                                                 // 6378
                                                                                                                       // 6379
	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;                                            // 6380
	                }                                                                                                     // 6381
	            }                                                                                                         // 6382
                                                                                                                       // 6383
	            // Compute inv key schedule                                                                               // 6384
	            var invKeySchedule = this._invKeySchedule = [];                                                           // 6385
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {                                                   // 6386
	                var ksRow = ksRows - invKsRow;                                                                        // 6387
                                                                                                                       // 6388
	                if (invKsRow % 4) {                                                                                   // 6389
	                    var t = keySchedule[ksRow];                                                                       // 6390
	                } else {                                                                                              // 6391
	                    var t = keySchedule[ksRow - 4];                                                                   // 6392
	                }                                                                                                     // 6393
                                                                                                                       // 6394
	                if (invKsRow < 4 || ksRow <= 4) {                                                                     // 6395
	                    invKeySchedule[invKsRow] = t;                                                                     // 6396
	                } else {                                                                                              // 6397
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }                                                                                                     // 6400
	            }                                                                                                         // 6401
	        },                                                                                                            // 6402
                                                                                                                       // 6403
	        encryptBlock: function (M, offset) {                                                                          // 6404
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);       // 6405
	        },                                                                                                            // 6406
                                                                                                                       // 6407
	        decryptBlock: function (M, offset) {                                                                          // 6408
	            // Swap 2nd and 4th rows                                                                                  // 6409
	            var t = M[offset + 1];                                                                                    // 6410
	            M[offset + 1] = M[offset + 3];                                                                            // 6411
	            M[offset + 3] = t;                                                                                        // 6412
                                                                                                                       // 6413
	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                                                                                                                       // 6415
	            // Inv swap 2nd and 4th rows                                                                              // 6416
	            var t = M[offset + 1];                                                                                    // 6417
	            M[offset + 1] = M[offset + 3];                                                                            // 6418
	            M[offset + 3] = t;                                                                                        // 6419
	        },                                                                                                            // 6420
                                                                                                                       // 6421
	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {          // 6422
	            // Shortcut                                                                                               // 6423
	            var nRounds = this._nRounds;                                                                              // 6424
                                                                                                                       // 6425
	            // Get input, add round key                                                                               // 6426
	            var s0 = M[offset]     ^ keySchedule[0];                                                                  // 6427
	            var s1 = M[offset + 1] ^ keySchedule[1];                                                                  // 6428
	            var s2 = M[offset + 2] ^ keySchedule[2];                                                                  // 6429
	            var s3 = M[offset + 3] ^ keySchedule[3];                                                                  // 6430
                                                                                                                       // 6431
	            // Key schedule row counter                                                                               // 6432
	            var ksRow = 4;                                                                                            // 6433
                                                                                                                       // 6434
	            // Rounds                                                                                                 // 6435
	            for (var round = 1; round < nRounds; round++) {                                                           // 6436
	                // Shift rows, sub bytes, mix columns, add round key                                                  // 6437
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
                                                                                                                       // 6442
	                // Update state                                                                                       // 6443
	                s0 = t0;                                                                                              // 6444
	                s1 = t1;                                                                                              // 6445
	                s2 = t2;                                                                                              // 6446
	                s3 = t3;                                                                                              // 6447
	            }                                                                                                         // 6448
                                                                                                                       // 6449
	            // Shift rows, sub bytes, add round key                                                                   // 6450
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
                                                                                                                       // 6455
	            // Set output                                                                                             // 6456
	            M[offset]     = t0;                                                                                       // 6457
	            M[offset + 1] = t1;                                                                                       // 6458
	            M[offset + 2] = t2;                                                                                       // 6459
	            M[offset + 3] = t3;                                                                                       // 6460
	        },                                                                                                            // 6461
                                                                                                                       // 6462
	        keySize: 256/32                                                                                               // 6463
	    });                                                                                                               // 6464
                                                                                                                       // 6465
	    /**                                                                                                               // 6466
	     * Shortcut functions to the cipher's object interface.                                                           // 6467
	     *                                                                                                                // 6468
	     * @example                                                                                                       // 6469
	     *                                                                                                                // 6470
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);                                                  // 6471
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);                                               // 6472
	     */                                                                                                               // 6473
	    C.AES = BlockCipher._createHelper(AES);                                                                           // 6474
	}());                                                                                                                 // 6475
                                                                                                                       // 6476
                                                                                                                       // 6477
	return CryptoJS.AES;                                                                                                  // 6478
                                                                                                                       // 6479
}));                                                                                                                   // 6480
},{"./cipher-core":50,"./core":51,"./enc-base64":52,"./evpkdf":54,"./md5":59}],50:[function(require,module,exports){   // 6481
;(function (root, factory) {                                                                                           // 6482
	if (typeof exports === "object") {                                                                                    // 6483
		// CommonJS                                                                                                          // 6484
		module.exports = exports = factory(require("./core"));                                                               // 6485
	}                                                                                                                     // 6486
	else if (typeof define === "function" && define.amd) {                                                                // 6487
		// AMD                                                                                                               // 6488
		define(["./core"], factory);                                                                                         // 6489
	}                                                                                                                     // 6490
	else {                                                                                                                // 6491
		// Global (browser)                                                                                                  // 6492
		factory(root.CryptoJS);                                                                                              // 6493
	}                                                                                                                     // 6494
}(this, function (CryptoJS) {                                                                                          // 6495
                                                                                                                       // 6496
	/**                                                                                                                   // 6497
	 * Cipher core components.                                                                                            // 6498
	 */                                                                                                                   // 6499
	CryptoJS.lib.Cipher || (function (undefined) {                                                                        // 6500
	    // Shortcuts                                                                                                      // 6501
	    var C = CryptoJS;                                                                                                 // 6502
	    var C_lib = C.lib;                                                                                                // 6503
	    var Base = C_lib.Base;                                                                                            // 6504
	    var WordArray = C_lib.WordArray;                                                                                  // 6505
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;                                                        // 6506
	    var C_enc = C.enc;                                                                                                // 6507
	    var Utf8 = C_enc.Utf8;                                                                                            // 6508
	    var Base64 = C_enc.Base64;                                                                                        // 6509
	    var C_algo = C.algo;                                                                                              // 6510
	    var EvpKDF = C_algo.EvpKDF;                                                                                       // 6511
                                                                                                                       // 6512
	    /**                                                                                                               // 6513
	     * Abstract base cipher template.                                                                                 // 6514
	     *                                                                                                                // 6515
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)                                       // 6516
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)                                         // 6517
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.                                    // 6518
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.                                    // 6519
	     */                                                                                                               // 6520
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({                                                       // 6521
	        /**                                                                                                           // 6522
	         * Configuration options.                                                                                     // 6523
	         *                                                                                                            // 6524
	         * @property {WordArray} iv The IV to use for this operation.                                                 // 6525
	         */                                                                                                           // 6526
	        cfg: Base.extend(),                                                                                           // 6527
                                                                                                                       // 6528
	        /**                                                                                                           // 6529
	         * Creates this cipher in encryption mode.                                                                    // 6530
	         *                                                                                                            // 6531
	         * @param {WordArray} key The key.                                                                            // 6532
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6533
	         *                                                                                                            // 6534
	         * @return {Cipher} A cipher instance.                                                                        // 6535
	         *                                                                                                            // 6536
	         * @static                                                                                                    // 6537
	         *                                                                                                            // 6538
	         * @example                                                                                                   // 6539
	         *                                                                                                            // 6540
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });                     // 6541
	         */                                                                                                           // 6542
	        createEncryptor: function (key, cfg) {                                                                        // 6543
	            return this.create(this._ENC_XFORM_MODE, key, cfg);                                                       // 6544
	        },                                                                                                            // 6545
                                                                                                                       // 6546
	        /**                                                                                                           // 6547
	         * Creates this cipher in decryption mode.                                                                    // 6548
	         *                                                                                                            // 6549
	         * @param {WordArray} key The key.                                                                            // 6550
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6551
	         *                                                                                                            // 6552
	         * @return {Cipher} A cipher instance.                                                                        // 6553
	         *                                                                                                            // 6554
	         * @static                                                                                                    // 6555
	         *                                                                                                            // 6556
	         * @example                                                                                                   // 6557
	         *                                                                                                            // 6558
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });                     // 6559
	         */                                                                                                           // 6560
	        createDecryptor: function (key, cfg) {                                                                        // 6561
	            return this.create(this._DEC_XFORM_MODE, key, cfg);                                                       // 6562
	        },                                                                                                            // 6563
                                                                                                                       // 6564
	        /**                                                                                                           // 6565
	         * Initializes a newly created cipher.                                                                        // 6566
	         *                                                                                                            // 6567
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.                 // 6568
	         * @param {WordArray} key The key.                                                                            // 6569
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6570
	         *                                                                                                            // 6571
	         * @example                                                                                                   // 6572
	         *                                                                                                            // 6573
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */                                                                                                           // 6575
	        init: function (xformMode, key, cfg) {                                                                        // 6576
	            // Apply config defaults                                                                                  // 6577
	            this.cfg = this.cfg.extend(cfg);                                                                          // 6578
                                                                                                                       // 6579
	            // Store transform mode and key                                                                           // 6580
	            this._xformMode = xformMode;                                                                              // 6581
	            this._key = key;                                                                                          // 6582
                                                                                                                       // 6583
	            // Set initial values                                                                                     // 6584
	            this.reset();                                                                                             // 6585
	        },                                                                                                            // 6586
                                                                                                                       // 6587
	        /**                                                                                                           // 6588
	         * Resets this cipher to its initial state.                                                                   // 6589
	         *                                                                                                            // 6590
	         * @example                                                                                                   // 6591
	         *                                                                                                            // 6592
	         *     cipher.reset();                                                                                        // 6593
	         */                                                                                                           // 6594
	        reset: function () {                                                                                          // 6595
	            // Reset data buffer                                                                                      // 6596
	            BufferedBlockAlgorithm.reset.call(this);                                                                  // 6597
                                                                                                                       // 6598
	            // Perform concrete-cipher logic                                                                          // 6599
	            this._doReset();                                                                                          // 6600
	        },                                                                                                            // 6601
                                                                                                                       // 6602
	        /**                                                                                                           // 6603
	         * Adds data to be encrypted or decrypted.                                                                    // 6604
	         *                                                                                                            // 6605
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.                                       // 6606
	         *                                                                                                            // 6607
	         * @return {WordArray} The data after processing.                                                             // 6608
	         *                                                                                                            // 6609
	         * @example                                                                                                   // 6610
	         *                                                                                                            // 6611
	         *     var encrypted = cipher.process('data');                                                                // 6612
	         *     var encrypted = cipher.process(wordArray);                                                             // 6613
	         */                                                                                                           // 6614
	        process: function (dataUpdate) {                                                                              // 6615
	            // Append                                                                                                 // 6616
	            this._append(dataUpdate);                                                                                 // 6617
                                                                                                                       // 6618
	            // Process available blocks                                                                               // 6619
	            return this._process();                                                                                   // 6620
	        },                                                                                                            // 6621
                                                                                                                       // 6622
	        /**                                                                                                           // 6623
	         * Finalizes the encryption or decryption process.                                                            // 6624
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 6625
	         *                                                                                                            // 6626
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.                                 // 6627
	         *                                                                                                            // 6628
	         * @return {WordArray} The data after final processing.                                                       // 6629
	         *                                                                                                            // 6630
	         * @example                                                                                                   // 6631
	         *                                                                                                            // 6632
	         *     var encrypted = cipher.finalize();                                                                     // 6633
	         *     var encrypted = cipher.finalize('data');                                                               // 6634
	         *     var encrypted = cipher.finalize(wordArray);                                                            // 6635
	         */                                                                                                           // 6636
	        finalize: function (dataUpdate) {                                                                             // 6637
	            // Final data update                                                                                      // 6638
	            if (dataUpdate) {                                                                                         // 6639
	                this._append(dataUpdate);                                                                             // 6640
	            }                                                                                                         // 6641
                                                                                                                       // 6642
	            // Perform concrete-cipher logic                                                                          // 6643
	            var finalProcessedData = this._doFinalize();                                                              // 6644
                                                                                                                       // 6645
	            return finalProcessedData;                                                                                // 6646
	        },                                                                                                            // 6647
                                                                                                                       // 6648
	        keySize: 128/32,                                                                                              // 6649
                                                                                                                       // 6650
	        ivSize: 128/32,                                                                                               // 6651
                                                                                                                       // 6652
	        _ENC_XFORM_MODE: 1,                                                                                           // 6653
                                                                                                                       // 6654
	        _DEC_XFORM_MODE: 2,                                                                                           // 6655
                                                                                                                       // 6656
	        /**                                                                                                           // 6657
	         * Creates shortcut functions to a cipher's object interface.                                                 // 6658
	         *                                                                                                            // 6659
	         * @param {Cipher} cipher The cipher to create a helper for.                                                  // 6660
	         *                                                                                                            // 6661
	         * @return {Object} An object with encrypt and decrypt shortcut functions.                                    // 6662
	         *                                                                                                            // 6663
	         * @static                                                                                                    // 6664
	         *                                                                                                            // 6665
	         * @example                                                                                                   // 6666
	         *                                                                                                            // 6667
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);                                        // 6668
	         */                                                                                                           // 6669
	        _createHelper: (function () {                                                                                 // 6670
	            function selectCipherStrategy(key) {                                                                      // 6671
	                if (typeof key == 'string') {                                                                         // 6672
	                    return PasswordBasedCipher;                                                                       // 6673
	                } else {                                                                                              // 6674
	                    return SerializableCipher;                                                                        // 6675
	                }                                                                                                     // 6676
	            }                                                                                                         // 6677
                                                                                                                       // 6678
	            return function (cipher) {                                                                                // 6679
	                return {                                                                                              // 6680
	                    encrypt: function (message, key, cfg) {                                                           // 6681
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);                          // 6682
	                    },                                                                                                // 6683
                                                                                                                       // 6684
	                    decrypt: function (ciphertext, key, cfg) {                                                        // 6685
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);                       // 6686
	                    }                                                                                                 // 6687
	                };                                                                                                    // 6688
	            };                                                                                                        // 6689
	        }())                                                                                                          // 6690
	    });                                                                                                               // 6691
                                                                                                                       // 6692
	    /**                                                                                                               // 6693
	     * Abstract base stream cipher template.                                                                          // 6694
	     *                                                                                                                // 6695
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)          // 6696
	     */                                                                                                               // 6697
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({                                                           // 6698
	        _doFinalize: function () {                                                                                    // 6699
	            // Process partial blocks                                                                                 // 6700
	            var finalProcessedBlocks = this._process(!!'flush');                                                      // 6701
                                                                                                                       // 6702
	            return finalProcessedBlocks;                                                                              // 6703
	        },                                                                                                            // 6704
                                                                                                                       // 6705
	        blockSize: 1                                                                                                  // 6706
	    });                                                                                                               // 6707
                                                                                                                       // 6708
	    /**                                                                                                               // 6709
	     * Mode namespace.                                                                                                // 6710
	     */                                                                                                               // 6711
	    var C_mode = C.mode = {};                                                                                         // 6712
                                                                                                                       // 6713
	    /**                                                                                                               // 6714
	     * Abstract base block cipher mode template.                                                                      // 6715
	     */                                                                                                               // 6716
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({                                                       // 6717
	        /**                                                                                                           // 6718
	         * Creates this mode for encryption.                                                                          // 6719
	         *                                                                                                            // 6720
	         * @param {Cipher} cipher A block cipher instance.                                                            // 6721
	         * @param {Array} iv The IV words.                                                                            // 6722
	         *                                                                                                            // 6723
	         * @static                                                                                                    // 6724
	         *                                                                                                            // 6725
	         * @example                                                                                                   // 6726
	         *                                                                                                            // 6727
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);                                        // 6728
	         */                                                                                                           // 6729
	        createEncryptor: function (cipher, iv) {                                                                      // 6730
	            return this.Encryptor.create(cipher, iv);                                                                 // 6731
	        },                                                                                                            // 6732
                                                                                                                       // 6733
	        /**                                                                                                           // 6734
	         * Creates this mode for decryption.                                                                          // 6735
	         *                                                                                                            // 6736
	         * @param {Cipher} cipher A block cipher instance.                                                            // 6737
	         * @param {Array} iv The IV words.                                                                            // 6738
	         *                                                                                                            // 6739
	         * @static                                                                                                    // 6740
	         *                                                                                                            // 6741
	         * @example                                                                                                   // 6742
	         *                                                                                                            // 6743
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);                                        // 6744
	         */                                                                                                           // 6745
	        createDecryptor: function (cipher, iv) {                                                                      // 6746
	            return this.Decryptor.create(cipher, iv);                                                                 // 6747
	        },                                                                                                            // 6748
                                                                                                                       // 6749
	        /**                                                                                                           // 6750
	         * Initializes a newly created mode.                                                                          // 6751
	         *                                                                                                            // 6752
	         * @param {Cipher} cipher A block cipher instance.                                                            // 6753
	         * @param {Array} iv The IV words.                                                                            // 6754
	         *                                                                                                            // 6755
	         * @example                                                                                                   // 6756
	         *                                                                                                            // 6757
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);                                       // 6758
	         */                                                                                                           // 6759
	        init: function (cipher, iv) {                                                                                 // 6760
	            this._cipher = cipher;                                                                                    // 6761
	            this._iv = iv;                                                                                            // 6762
	        }                                                                                                             // 6763
	    });                                                                                                               // 6764
                                                                                                                       // 6765
	    /**                                                                                                               // 6766
	     * Cipher Block Chaining mode.                                                                                    // 6767
	     */                                                                                                               // 6768
	    var CBC = C_mode.CBC = (function () {                                                                             // 6769
	        /**                                                                                                           // 6770
	         * Abstract base CBC mode.                                                                                    // 6771
	         */                                                                                                           // 6772
	        var CBC = BlockCipherMode.extend();                                                                           // 6773
                                                                                                                       // 6774
	        /**                                                                                                           // 6775
	         * CBC encryptor.                                                                                             // 6776
	         */                                                                                                           // 6777
	        CBC.Encryptor = CBC.extend({                                                                                  // 6778
	            /**                                                                                                       // 6779
	             * Processes the data block at offset.                                                                    // 6780
	             *                                                                                                        // 6781
	             * @param {Array} words The data words to operate on.                                                     // 6782
	             * @param {number} offset The offset where the block starts.                                              // 6783
	             *                                                                                                        // 6784
	             * @example                                                                                               // 6785
	             *                                                                                                        // 6786
	             *     mode.processBlock(data.words, offset);                                                             // 6787
	             */                                                                                                       // 6788
	            processBlock: function (words, offset) {                                                                  // 6789
	                // Shortcuts                                                                                          // 6790
	                var cipher = this._cipher;                                                                            // 6791
	                var blockSize = cipher.blockSize;                                                                     // 6792
                                                                                                                       // 6793
	                // XOR and encrypt                                                                                    // 6794
	                xorBlock.call(this, words, offset, blockSize);                                                        // 6795
	                cipher.encryptBlock(words, offset);                                                                   // 6796
                                                                                                                       // 6797
	                // Remember this block to use with next block                                                         // 6798
	                this._prevBlock = words.slice(offset, offset + blockSize);                                            // 6799
	            }                                                                                                         // 6800
	        });                                                                                                           // 6801
                                                                                                                       // 6802
	        /**                                                                                                           // 6803
	         * CBC decryptor.                                                                                             // 6804
	         */                                                                                                           // 6805
	        CBC.Decryptor = CBC.extend({                                                                                  // 6806
	            /**                                                                                                       // 6807
	             * Processes the data block at offset.                                                                    // 6808
	             *                                                                                                        // 6809
	             * @param {Array} words The data words to operate on.                                                     // 6810
	             * @param {number} offset The offset where the block starts.                                              // 6811
	             *                                                                                                        // 6812
	             * @example                                                                                               // 6813
	             *                                                                                                        // 6814
	             *     mode.processBlock(data.words, offset);                                                             // 6815
	             */                                                                                                       // 6816
	            processBlock: function (words, offset) {                                                                  // 6817
	                // Shortcuts                                                                                          // 6818
	                var cipher = this._cipher;                                                                            // 6819
	                var blockSize = cipher.blockSize;                                                                     // 6820
                                                                                                                       // 6821
	                // Remember this block to use with next block                                                         // 6822
	                var thisBlock = words.slice(offset, offset + blockSize);                                              // 6823
                                                                                                                       // 6824
	                // Decrypt and XOR                                                                                    // 6825
	                cipher.decryptBlock(words, offset);                                                                   // 6826
	                xorBlock.call(this, words, offset, blockSize);                                                        // 6827
                                                                                                                       // 6828
	                // This block becomes the previous block                                                              // 6829
	                this._prevBlock = thisBlock;                                                                          // 6830
	            }                                                                                                         // 6831
	        });                                                                                                           // 6832
                                                                                                                       // 6833
	        function xorBlock(words, offset, blockSize) {                                                                 // 6834
	            // Shortcut                                                                                               // 6835
	            var iv = this._iv;                                                                                        // 6836
                                                                                                                       // 6837
	            // Choose mixing block                                                                                    // 6838
	            if (iv) {                                                                                                 // 6839
	                var block = iv;                                                                                       // 6840
                                                                                                                       // 6841
	                // Remove IV for subsequent blocks                                                                    // 6842
	                this._iv = undefined;                                                                                 // 6843
	            } else {                                                                                                  // 6844
	                var block = this._prevBlock;                                                                          // 6845
	            }                                                                                                         // 6846
                                                                                                                       // 6847
	            // XOR blocks                                                                                             // 6848
	            for (var i = 0; i < blockSize; i++) {                                                                     // 6849
	                words[offset + i] ^= block[i];                                                                        // 6850
	            }                                                                                                         // 6851
	        }                                                                                                             // 6852
                                                                                                                       // 6853
	        return CBC;                                                                                                   // 6854
	    }());                                                                                                             // 6855
                                                                                                                       // 6856
	    /**                                                                                                               // 6857
	     * Padding namespace.                                                                                             // 6858
	     */                                                                                                               // 6859
	    var C_pad = C.pad = {};                                                                                           // 6860
                                                                                                                       // 6861
	    /**                                                                                                               // 6862
	     * PKCS #5/7 padding strategy.                                                                                    // 6863
	     */                                                                                                               // 6864
	    var Pkcs7 = C_pad.Pkcs7 = {                                                                                       // 6865
	        /**                                                                                                           // 6866
	         * Pads data using the algorithm defined in PKCS #5/7.                                                        // 6867
	         *                                                                                                            // 6868
	         * @param {WordArray} data The data to pad.                                                                   // 6869
	         * @param {number} blockSize The multiple that the data should be padded to.                                  // 6870
	         *                                                                                                            // 6871
	         * @static                                                                                                    // 6872
	         *                                                                                                            // 6873
	         * @example                                                                                                   // 6874
	         *                                                                                                            // 6875
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);                                                                  // 6876
	         */                                                                                                           // 6877
	        pad: function (data, blockSize) {                                                                             // 6878
	            // Shortcut                                                                                               // 6879
	            var blockSizeBytes = blockSize * 4;                                                                       // 6880
                                                                                                                       // 6881
	            // Count padding bytes                                                                                    // 6882
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                      // 6883
                                                                                                                       // 6884
	            // Create padding word                                                                                    // 6885
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;   // 6886
                                                                                                                       // 6887
	            // Create padding                                                                                         // 6888
	            var paddingWords = [];                                                                                    // 6889
	            for (var i = 0; i < nPaddingBytes; i += 4) {                                                              // 6890
	                paddingWords.push(paddingWord);                                                                       // 6891
	            }                                                                                                         // 6892
	            var padding = WordArray.create(paddingWords, nPaddingBytes);                                              // 6893
                                                                                                                       // 6894
	            // Add padding                                                                                            // 6895
	            data.concat(padding);                                                                                     // 6896
	        },                                                                                                            // 6897
                                                                                                                       // 6898
	        /**                                                                                                           // 6899
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.                                 // 6900
	         *                                                                                                            // 6901
	         * @param {WordArray} data The data to unpad.                                                                 // 6902
	         *                                                                                                            // 6903
	         * @static                                                                                                    // 6904
	         *                                                                                                            // 6905
	         * @example                                                                                                   // 6906
	         *                                                                                                            // 6907
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);                                                                   // 6908
	         */                                                                                                           // 6909
	        unpad: function (data) {                                                                                      // 6910
	            // Get number of padding bytes from last byte                                                             // 6911
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                         // 6912
                                                                                                                       // 6913
	            // Remove padding                                                                                         // 6914
	            data.sigBytes -= nPaddingBytes;                                                                           // 6915
	        }                                                                                                             // 6916
	    };                                                                                                                // 6917
                                                                                                                       // 6918
	    /**                                                                                                               // 6919
	     * Abstract base block cipher template.                                                                           // 6920
	     *                                                                                                                // 6921
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)         // 6922
	     */                                                                                                               // 6923
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({                                                             // 6924
	        /**                                                                                                           // 6925
	         * Configuration options.                                                                                     // 6926
	         *                                                                                                            // 6927
	         * @property {Mode} mode The block mode to use. Default: CBC                                                  // 6928
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7                                    // 6929
	         */                                                                                                           // 6930
	        cfg: Cipher.cfg.extend({                                                                                      // 6931
	            mode: CBC,                                                                                                // 6932
	            padding: Pkcs7                                                                                            // 6933
	        }),                                                                                                           // 6934
                                                                                                                       // 6935
	        reset: function () {                                                                                          // 6936
	            // Reset cipher                                                                                           // 6937
	            Cipher.reset.call(this);                                                                                  // 6938
                                                                                                                       // 6939
	            // Shortcuts                                                                                              // 6940
	            var cfg = this.cfg;                                                                                       // 6941
	            var iv = cfg.iv;                                                                                          // 6942
	            var mode = cfg.mode;                                                                                      // 6943
                                                                                                                       // 6944
	            // Reset block mode                                                                                       // 6945
	            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 6946
	                var modeCreator = mode.createEncryptor;                                                               // 6947
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 6948
	                var modeCreator = mode.createDecryptor;                                                               // 6949
                                                                                                                       // 6950
	                // Keep at least one block in the buffer for unpadding                                                // 6951
	                this._minBufferSize = 1;                                                                              // 6952
	            }                                                                                                         // 6953
	            this._mode = modeCreator.call(mode, this, iv && iv.words);                                                // 6954
	        },                                                                                                            // 6955
                                                                                                                       // 6956
	        _doProcessBlock: function (words, offset) {                                                                   // 6957
	            this._mode.processBlock(words, offset);                                                                   // 6958
	        },                                                                                                            // 6959
                                                                                                                       // 6960
	        _doFinalize: function () {                                                                                    // 6961
	            // Shortcut                                                                                               // 6962
	            var padding = this.cfg.padding;                                                                           // 6963
                                                                                                                       // 6964
	            // Finalize                                                                                               // 6965
	            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 6966
	                // Pad data                                                                                           // 6967
	                padding.pad(this._data, this.blockSize);                                                              // 6968
                                                                                                                       // 6969
	                // Process final blocks                                                                               // 6970
	                var finalProcessedBlocks = this._process(!!'flush');                                                  // 6971
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 6972
	                // Process final blocks                                                                               // 6973
	                var finalProcessedBlocks = this._process(!!'flush');                                                  // 6974
                                                                                                                       // 6975
	                // Unpad data                                                                                         // 6976
	                padding.unpad(finalProcessedBlocks);                                                                  // 6977
	            }                                                                                                         // 6978
                                                                                                                       // 6979
	            return finalProcessedBlocks;                                                                              // 6980
	        },                                                                                                            // 6981
                                                                                                                       // 6982
	        blockSize: 128/32                                                                                             // 6983
	    });                                                                                                               // 6984
                                                                                                                       // 6985
	    /**                                                                                                               // 6986
	     * A collection of cipher parameters.                                                                             // 6987
	     *                                                                                                                // 6988
	     * @property {WordArray} ciphertext The raw ciphertext.                                                           // 6989
	     * @property {WordArray} key The key to this ciphertext.                                                          // 6990
	     * @property {WordArray} iv The IV used in the ciphering operation.                                               // 6991
	     * @property {WordArray} salt The salt used with a key derivation function.                                       // 6992
	     * @property {Cipher} algorithm The cipher algorithm.                                                             // 6993
	     * @property {Mode} mode The block mode used in the ciphering operation.                                          // 6994
	     * @property {Padding} padding The padding scheme used in the ciphering operation.                                // 6995
	     * @property {number} blockSize The block size of the cipher.                                                     // 6996
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */                                                                                                               // 6998
	    var CipherParams = C_lib.CipherParams = Base.extend({                                                             // 6999
	        /**                                                                                                           // 7000
	         * Initializes a newly created cipher params object.                                                          // 7001
	         *                                                                                                            // 7002
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.                         // 7003
	         *                                                                                                            // 7004
	         * @example                                                                                                   // 7005
	         *                                                                                                            // 7006
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({                                                  // 7007
	         *         ciphertext: ciphertextWordArray,                                                                   // 7008
	         *         key: keyWordArray,                                                                                 // 7009
	         *         iv: ivWordArray,                                                                                   // 7010
	         *         salt: saltWordArray,                                                                               // 7011
	         *         algorithm: CryptoJS.algo.AES,                                                                      // 7012
	         *         mode: CryptoJS.mode.CBC,                                                                           // 7013
	         *         padding: CryptoJS.pad.PKCS7,                                                                       // 7014
	         *         blockSize: 4,                                                                                      // 7015
	         *         formatter: CryptoJS.format.OpenSSL                                                                 // 7016
	         *     });                                                                                                    // 7017
	         */                                                                                                           // 7018
	        init: function (cipherParams) {                                                                               // 7019
	            this.mixIn(cipherParams);                                                                                 // 7020
	        },                                                                                                            // 7021
                                                                                                                       // 7022
	        /**                                                                                                           // 7023
	         * Converts this cipher params object to a string.                                                            // 7024
	         *                                                                                                            // 7025
	         * @param {Format} formatter (Optional) The formatting strategy to use.                                       // 7026
	         *                                                                                                            // 7027
	         * @return {string} The stringified cipher params.                                                            // 7028
	         *                                                                                                            // 7029
	         * @throws Error If neither the formatter nor the default formatter is set.                                   // 7030
	         *                                                                                                            // 7031
	         * @example                                                                                                   // 7032
	         *                                                                                                            // 7033
	         *     var string = cipherParams + '';                                                                        // 7034
	         *     var string = cipherParams.toString();                                                                  // 7035
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);                                           // 7036
	         */                                                                                                           // 7037
	        toString: function (formatter) {                                                                              // 7038
	            return (formatter || this.formatter).stringify(this);                                                     // 7039
	        }                                                                                                             // 7040
	    });                                                                                                               // 7041
                                                                                                                       // 7042
	    /**                                                                                                               // 7043
	     * Format namespace.                                                                                              // 7044
	     */                                                                                                               // 7045
	    var C_format = C.format = {};                                                                                     // 7046
                                                                                                                       // 7047
	    /**                                                                                                               // 7048
	     * OpenSSL formatting strategy.                                                                                   // 7049
	     */                                                                                                               // 7050
	    var OpenSSLFormatter = C_format.OpenSSL = {                                                                       // 7051
	        /**                                                                                                           // 7052
	         * Converts a cipher params object to an OpenSSL-compatible string.                                           // 7053
	         *                                                                                                            // 7054
	         * @param {CipherParams} cipherParams The cipher params object.                                               // 7055
	         *                                                                                                            // 7056
	         * @return {string} The OpenSSL-compatible string.                                                            // 7057
	         *                                                                                                            // 7058
	         * @static                                                                                                    // 7059
	         *                                                                                                            // 7060
	         * @example                                                                                                   // 7061
	         *                                                                                                            // 7062
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);                                   // 7063
	         */                                                                                                           // 7064
	        stringify: function (cipherParams) {                                                                          // 7065
	            // Shortcuts                                                                                              // 7066
	            var ciphertext = cipherParams.ciphertext;                                                                 // 7067
	            var salt = cipherParams.salt;                                                                             // 7068
                                                                                                                       // 7069
	            // Format                                                                                                 // 7070
	            if (salt) {                                                                                               // 7071
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);           // 7072
	            } else {                                                                                                  // 7073
	                var wordArray = ciphertext;                                                                           // 7074
	            }                                                                                                         // 7075
                                                                                                                       // 7076
	            return wordArray.toString(Base64);                                                                        // 7077
	        },                                                                                                            // 7078
                                                                                                                       // 7079
	        /**                                                                                                           // 7080
	         * Converts an OpenSSL-compatible string to a cipher params object.                                           // 7081
	         *                                                                                                            // 7082
	         * @param {string} openSSLStr The OpenSSL-compatible string.                                                  // 7083
	         *                                                                                                            // 7084
	         * @return {CipherParams} The cipher params object.                                                           // 7085
	         *                                                                                                            // 7086
	         * @static                                                                                                    // 7087
	         *                                                                                                            // 7088
	         * @example                                                                                                   // 7089
	         *                                                                                                            // 7090
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);                                       // 7091
	         */                                                                                                           // 7092
	        parse: function (openSSLStr) {                                                                                // 7093
	            // Parse base64                                                                                           // 7094
	            var ciphertext = Base64.parse(openSSLStr);                                                                // 7095
                                                                                                                       // 7096
	            // Shortcut                                                                                               // 7097
	            var ciphertextWords = ciphertext.words;                                                                   // 7098
                                                                                                                       // 7099
	            // Test for salt                                                                                          // 7100
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {                               // 7101
	                // Extract salt                                                                                       // 7102
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));                                             // 7103
                                                                                                                       // 7104
	                // Remove salt from ciphertext                                                                        // 7105
	                ciphertextWords.splice(0, 4);                                                                         // 7106
	                ciphertext.sigBytes -= 16;                                                                            // 7107
	            }                                                                                                         // 7108
                                                                                                                       // 7109
	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });                                       // 7110
	        }                                                                                                             // 7111
	    };                                                                                                                // 7112
                                                                                                                       // 7113
	    /**                                                                                                               // 7114
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.                               // 7115
	     */                                                                                                               // 7116
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({                                                 // 7117
	        /**                                                                                                           // 7118
	         * Configuration options.                                                                                     // 7119
	         *                                                                                                            // 7120
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */                                                                                                           // 7122
	        cfg: Base.extend({                                                                                            // 7123
	            format: OpenSSLFormatter                                                                                  // 7124
	        }),                                                                                                           // 7125
                                                                                                                       // 7126
	        /**                                                                                                           // 7127
	         * Encrypts a message.                                                                                        // 7128
	         *                                                                                                            // 7129
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7130
	         * @param {WordArray|string} message The message to encrypt.                                                  // 7131
	         * @param {WordArray} key The key.                                                                            // 7132
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7133
	         *                                                                                                            // 7134
	         * @return {CipherParams} A cipher params object.                                                             // 7135
	         *                                                                                                            // 7136
	         * @static                                                                                                    // 7137
	         *                                                                                                            // 7138
	         * @example                                                                                                   // 7139
	         *                                                                                                            // 7140
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);       // 7141
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7144
	        encrypt: function (cipher, message, key, cfg) {                                                               // 7145
	            // Apply config defaults                                                                                  // 7146
	            cfg = this.cfg.extend(cfg);                                                                               // 7147
                                                                                                                       // 7148
	            // Encrypt                                                                                                // 7149
	            var encryptor = cipher.createEncryptor(key, cfg);                                                         // 7150
	            var ciphertext = encryptor.finalize(message);                                                             // 7151
                                                                                                                       // 7152
	            // Shortcut                                                                                               // 7153
	            var cipherCfg = encryptor.cfg;                                                                            // 7154
                                                                                                                       // 7155
	            // Create and return serializable cipher params                                                           // 7156
	            return CipherParams.create({                                                                              // 7157
	                ciphertext: ciphertext,                                                                               // 7158
	                key: key,                                                                                             // 7159
	                iv: cipherCfg.iv,                                                                                     // 7160
	                algorithm: cipher,                                                                                    // 7161
	                mode: cipherCfg.mode,                                                                                 // 7162
	                padding: cipherCfg.padding,                                                                           // 7163
	                blockSize: cipher.blockSize,                                                                          // 7164
	                formatter: cfg.format                                                                                 // 7165
	            });                                                                                                       // 7166
	        },                                                                                                            // 7167
                                                                                                                       // 7168
	        /**                                                                                                           // 7169
	         * Decrypts serialized ciphertext.                                                                            // 7170
	         *                                                                                                            // 7171
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7172
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7173
	         * @param {WordArray} key The key.                                                                            // 7174
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7175
	         *                                                                                                            // 7176
	         * @return {WordArray} The plaintext.                                                                         // 7177
	         *                                                                                                            // 7178
	         * @static                                                                                                    // 7179
	         *                                                                                                            // 7180
	         * @example                                                                                                   // 7181
	         *                                                                                                            // 7182
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7185
	        decrypt: function (cipher, ciphertext, key, cfg) {                                                            // 7186
	            // Apply config defaults                                                                                  // 7187
	            cfg = this.cfg.extend(cfg);                                                                               // 7188
                                                                                                                       // 7189
	            // Convert string to CipherParams                                                                         // 7190
	            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7191
                                                                                                                       // 7192
	            // Decrypt                                                                                                // 7193
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);                         // 7194
                                                                                                                       // 7195
	            return plaintext;                                                                                         // 7196
	        },                                                                                                            // 7197
                                                                                                                       // 7198
	        /**                                                                                                           // 7199
	         * Converts serialized ciphertext to CipherParams,                                                            // 7200
	         * else assumed CipherParams already and returns ciphertext unchanged.                                        // 7201
	         *                                                                                                            // 7202
	         * @param {CipherParams|string} ciphertext The ciphertext.                                                    // 7203
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.                   // 7204
	         *                                                                                                            // 7205
	         * @return {CipherParams} The unserialized ciphertext.                                                        // 7206
	         *                                                                                                            // 7207
	         * @static                                                                                                    // 7208
	         *                                                                                                            // 7209
	         * @example                                                                                                   // 7210
	         *                                                                                                            // 7211
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);       // 7212
	         */                                                                                                           // 7213
	        _parse: function (ciphertext, format) {                                                                       // 7214
	            if (typeof ciphertext == 'string') {                                                                      // 7215
	                return format.parse(ciphertext, this);                                                                // 7216
	            } else {                                                                                                  // 7217
	                return ciphertext;                                                                                    // 7218
	            }                                                                                                         // 7219
	        }                                                                                                             // 7220
	    });                                                                                                               // 7221
                                                                                                                       // 7222
	    /**                                                                                                               // 7223
	     * Key derivation function namespace.                                                                             // 7224
	     */                                                                                                               // 7225
	    var C_kdf = C.kdf = {};                                                                                           // 7226
                                                                                                                       // 7227
	    /**                                                                                                               // 7228
	     * OpenSSL key derivation function.                                                                               // 7229
	     */                                                                                                               // 7230
	    var OpenSSLKdf = C_kdf.OpenSSL = {                                                                                // 7231
	        /**                                                                                                           // 7232
	         * Derives a key and IV from a password.                                                                      // 7233
	         *                                                                                                            // 7234
	         * @param {string} password The password to derive from.                                                      // 7235
	         * @param {number} keySize The size in words of the key to generate.                                          // 7236
	         * @param {number} ivSize The size in words of the IV to generate.                                            // 7237
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *                                                                                                            // 7239
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.                                  // 7240
	         *                                                                                                            // 7241
	         * @static                                                                                                    // 7242
	         *                                                                                                            // 7243
	         * @example                                                                                                   // 7244
	         *                                                                                                            // 7245
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);                          // 7246
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');              // 7247
	         */                                                                                                           // 7248
	        execute: function (password, keySize, ivSize, salt) {                                                         // 7249
	            // Generate random salt                                                                                   // 7250
	            if (!salt) {                                                                                              // 7251
	                salt = WordArray.random(64/8);                                                                        // 7252
	            }                                                                                                         // 7253
                                                                                                                       // 7254
	            // Derive key and IV                                                                                      // 7255
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);                           // 7256
                                                                                                                       // 7257
	            // Separate key and IV                                                                                    // 7258
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);                                          // 7259
	            key.sigBytes = keySize * 4;                                                                               // 7260
                                                                                                                       // 7261
	            // Return params                                                                                          // 7262
	            return CipherParams.create({ key: key, iv: iv, salt: salt });                                             // 7263
	        }                                                                                                             // 7264
	    };                                                                                                                // 7265
                                                                                                                       // 7266
	    /**                                                                                                               // 7267
	     * A serializable cipher wrapper that derives the key from a password,                                            // 7268
	     * and returns ciphertext as a serializable cipher params object.                                                 // 7269
	     */                                                                                                               // 7270
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({                                 // 7271
	        /**                                                                                                           // 7272
	         * Configuration options.                                                                                     // 7273
	         *                                                                                                            // 7274
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */                                                                                                           // 7276
	        cfg: SerializableCipher.cfg.extend({                                                                          // 7277
	            kdf: OpenSSLKdf                                                                                           // 7278
	        }),                                                                                                           // 7279
                                                                                                                       // 7280
	        /**                                                                                                           // 7281
	         * Encrypts a message using a password.                                                                       // 7282
	         *                                                                                                            // 7283
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7284
	         * @param {WordArray|string} message The message to encrypt.                                                  // 7285
	         * @param {string} password The password.                                                                     // 7286
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7287
	         *                                                                                                            // 7288
	         * @return {CipherParams} A cipher params object.                                                             // 7289
	         *                                                                                                            // 7290
	         * @static                                                                                                    // 7291
	         *                                                                                                            // 7292
	         * @example                                                                                                   // 7293
	         *                                                                                                            // 7294
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7297
	        encrypt: function (cipher, message, password, cfg) {                                                          // 7298
	            // Apply config defaults                                                                                  // 7299
	            cfg = this.cfg.extend(cfg);                                                                               // 7300
                                                                                                                       // 7301
	            // Derive key and other params                                                                            // 7302
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);                             // 7303
                                                                                                                       // 7304
	            // Add IV to config                                                                                       // 7305
	            cfg.iv = derivedParams.iv;                                                                                // 7306
                                                                                                                       // 7307
	            // Encrypt                                                                                                // 7308
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);          // 7309
                                                                                                                       // 7310
	            // Mix in derived params                                                                                  // 7311
	            ciphertext.mixIn(derivedParams);                                                                          // 7312
                                                                                                                       // 7313
	            return ciphertext;                                                                                        // 7314
	        },                                                                                                            // 7315
                                                                                                                       // 7316
	        /**                                                                                                           // 7317
	         * Decrypts serialized ciphertext using a password.                                                           // 7318
	         *                                                                                                            // 7319
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7320
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7321
	         * @param {string} password The password.                                                                     // 7322
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7323
	         *                                                                                                            // 7324
	         * @return {WordArray} The plaintext.                                                                         // 7325
	         *                                                                                                            // 7326
	         * @static                                                                                                    // 7327
	         *                                                                                                            // 7328
	         * @example                                                                                                   // 7329
	         *                                                                                                            // 7330
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7333
	        decrypt: function (cipher, ciphertext, password, cfg) {                                                       // 7334
	            // Apply config defaults                                                                                  // 7335
	            cfg = this.cfg.extend(cfg);                                                                               // 7336
                                                                                                                       // 7337
	            // Convert string to CipherParams                                                                         // 7338
	            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7339
                                                                                                                       // 7340
	            // Derive key and other params                                                                            // 7341
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);            // 7342
                                                                                                                       // 7343
	            // Add IV to config                                                                                       // 7344
	            cfg.iv = derivedParams.iv;                                                                                // 7345
                                                                                                                       // 7346
	            // Decrypt                                                                                                // 7347
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);        // 7348
                                                                                                                       // 7349
	            return plaintext;                                                                                         // 7350
	        }                                                                                                             // 7351
	    });                                                                                                               // 7352
	}());                                                                                                                 // 7353
                                                                                                                       // 7354
                                                                                                                       // 7355
}));                                                                                                                   // 7356
},{"./core":51}],51:[function(require,module,exports){                                                                 // 7357
;(function (root, factory) {                                                                                           // 7358
	if (typeof exports === "object") {                                                                                    // 7359
		// CommonJS                                                                                                          // 7360
		module.exports = exports = factory();                                                                                // 7361
	}                                                                                                                     // 7362
	else if (typeof define === "function" && define.amd) {                                                                // 7363
		// AMD                                                                                                               // 7364
		define([], factory);                                                                                                 // 7365
	}                                                                                                                     // 7366
	else {                                                                                                                // 7367
		// Global (browser)                                                                                                  // 7368
		root.CryptoJS = factory();                                                                                           // 7369
	}                                                                                                                     // 7370
}(this, function () {                                                                                                  // 7371
                                                                                                                       // 7372
	/**                                                                                                                   // 7373
	 * CryptoJS core components.                                                                                          // 7374
	 */                                                                                                                   // 7375
	var CryptoJS = CryptoJS || (function (Math, undefined) {                                                              // 7376
	    /**                                                                                                               // 7377
	     * CryptoJS namespace.                                                                                            // 7378
	     */                                                                                                               // 7379
	    var C = {};                                                                                                       // 7380
                                                                                                                       // 7381
	    /**                                                                                                               // 7382
	     * Library namespace.                                                                                             // 7383
	     */                                                                                                               // 7384
	    var C_lib = C.lib = {};                                                                                           // 7385
                                                                                                                       // 7386
	    /**                                                                                                               // 7387
	     * Base object for prototypal inheritance.                                                                        // 7388
	     */                                                                                                               // 7389
	    var Base = C_lib.Base = (function () {                                                                            // 7390
	        function F() {}                                                                                               // 7391
                                                                                                                       // 7392
	        return {                                                                                                      // 7393
	            /**                                                                                                       // 7394
	             * Creates a new object that inherits from this object.                                                   // 7395
	             *                                                                                                        // 7396
	             * @param {Object} overrides Properties to copy into the new object.                                      // 7397
	             *                                                                                                        // 7398
	             * @return {Object} The new object.                                                                       // 7399
	             *                                                                                                        // 7400
	             * @static                                                                                                // 7401
	             *                                                                                                        // 7402
	             * @example                                                                                               // 7403
	             *                                                                                                        // 7404
	             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7405
	             *         field: 'value',                                                                                // 7406
	             *                                                                                                        // 7407
	             *         method: function () {                                                                          // 7408
	             *         }                                                                                              // 7409
	             *     });                                                                                                // 7410
	             */                                                                                                       // 7411
	            extend: function (overrides) {                                                                            // 7412
	                // Spawn                                                                                              // 7413
	                F.prototype = this;                                                                                   // 7414
	                var subtype = new F();                                                                                // 7415
                                                                                                                       // 7416
	                // Augment                                                                                            // 7417
	                if (overrides) {                                                                                      // 7418
	                    subtype.mixIn(overrides);                                                                         // 7419
	                }                                                                                                     // 7420
                                                                                                                       // 7421
	                // Create default initializer                                                                         // 7422
	                if (!subtype.hasOwnProperty('init')) {                                                                // 7423
	                    subtype.init = function () {                                                                      // 7424
	                        subtype.$super.init.apply(this, arguments);                                                   // 7425
	                    };                                                                                                // 7426
	                }                                                                                                     // 7427
                                                                                                                       // 7428
	                // Initializer's prototype is the subtype object                                                      // 7429
	                subtype.init.prototype = subtype;                                                                     // 7430
                                                                                                                       // 7431
	                // Reference supertype                                                                                // 7432
	                subtype.$super = this;                                                                                // 7433
                                                                                                                       // 7434
	                return subtype;                                                                                       // 7435
	            },                                                                                                        // 7436
                                                                                                                       // 7437
	            /**                                                                                                       // 7438
	             * Extends this object and runs the init method.                                                          // 7439
	             * Arguments to create() will be passed to init().                                                        // 7440
	             *                                                                                                        // 7441
	             * @return {Object} The new object.                                                                       // 7442
	             *                                                                                                        // 7443
	             * @static                                                                                                // 7444
	             *                                                                                                        // 7445
	             * @example                                                                                               // 7446
	             *                                                                                                        // 7447
	             *     var instance = MyType.create();                                                                    // 7448
	             */                                                                                                       // 7449
	            create: function () {                                                                                     // 7450
	                var instance = this.extend();                                                                         // 7451
	                instance.init.apply(instance, arguments);                                                             // 7452
                                                                                                                       // 7453
	                return instance;                                                                                      // 7454
	            },                                                                                                        // 7455
                                                                                                                       // 7456
	            /**                                                                                                       // 7457
	             * Initializes a newly created object.                                                                    // 7458
	             * Override this method to add some logic when your objects are created.                                  // 7459
	             *                                                                                                        // 7460
	             * @example                                                                                               // 7461
	             *                                                                                                        // 7462
	             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7463
	             *         init: function () {                                                                            // 7464
	             *             // ...                                                                                     // 7465
	             *         }                                                                                              // 7466
	             *     });                                                                                                // 7467
	             */                                                                                                       // 7468
	            init: function () {                                                                                       // 7469
	            },                                                                                                        // 7470
                                                                                                                       // 7471
	            /**                                                                                                       // 7472
	             * Copies properties into this object.                                                                    // 7473
	             *                                                                                                        // 7474
	             * @param {Object} properties The properties to mix in.                                                   // 7475
	             *                                                                                                        // 7476
	             * @example                                                                                               // 7477
	             *                                                                                                        // 7478
	             *     MyType.mixIn({                                                                                     // 7479
	             *         field: 'value'                                                                                 // 7480
	             *     });                                                                                                // 7481
	             */                                                                                                       // 7482
	            mixIn: function (properties) {                                                                            // 7483
	                for (var propertyName in properties) {                                                                // 7484
	                    if (properties.hasOwnProperty(propertyName)) {                                                    // 7485
	                        this[propertyName] = properties[propertyName];                                                // 7486
	                    }                                                                                                 // 7487
	                }                                                                                                     // 7488
                                                                                                                       // 7489
	                // IE won't copy toString using the loop above                                                        // 7490
	                if (properties.hasOwnProperty('toString')) {                                                          // 7491
	                    this.toString = properties.toString;                                                              // 7492
	                }                                                                                                     // 7493
	            },                                                                                                        // 7494
                                                                                                                       // 7495
	            /**                                                                                                       // 7496
	             * Creates a copy of this object.                                                                         // 7497
	             *                                                                                                        // 7498
	             * @return {Object} The clone.                                                                            // 7499
	             *                                                                                                        // 7500
	             * @example                                                                                               // 7501
	             *                                                                                                        // 7502
	             *     var clone = instance.clone();                                                                      // 7503
	             */                                                                                                       // 7504
	            clone: function () {                                                                                      // 7505
	                return this.init.prototype.extend(this);                                                              // 7506
	            }                                                                                                         // 7507
	        };                                                                                                            // 7508
	    }());                                                                                                             // 7509
                                                                                                                       // 7510
	    /**                                                                                                               // 7511
	     * An array of 32-bit words.                                                                                      // 7512
	     *                                                                                                                // 7513
	     * @property {Array} words The array of 32-bit words.                                                             // 7514
	     * @property {number} sigBytes The number of significant bytes in this word array.                                // 7515
	     */                                                                                                               // 7516
	    var WordArray = C_lib.WordArray = Base.extend({                                                                   // 7517
	        /**                                                                                                           // 7518
	         * Initializes a newly created word array.                                                                    // 7519
	         *                                                                                                            // 7520
	         * @param {Array} words (Optional) An array of 32-bit words.                                                  // 7521
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 7522
	         *                                                                                                            // 7523
	         * @example                                                                                                   // 7524
	         *                                                                                                            // 7525
	         *     var wordArray = CryptoJS.lib.WordArray.create();                                                       // 7526
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);                               // 7527
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);                            // 7528
	         */                                                                                                           // 7529
	        init: function (words, sigBytes) {                                                                            // 7530
	            words = this.words = words || [];                                                                         // 7531
                                                                                                                       // 7532
	            if (sigBytes != undefined) {                                                                              // 7533
	                this.sigBytes = sigBytes;                                                                             // 7534
	            } else {                                                                                                  // 7535
	                this.sigBytes = words.length * 4;                                                                     // 7536
	            }                                                                                                         // 7537
	        },                                                                                                            // 7538
                                                                                                                       // 7539
	        /**                                                                                                           // 7540
	         * Converts this word array to a string.                                                                      // 7541
	         *                                                                                                            // 7542
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex                // 7543
	         *                                                                                                            // 7544
	         * @return {string} The stringified word array.                                                               // 7545
	         *                                                                                                            // 7546
	         * @example                                                                                                   // 7547
	         *                                                                                                            // 7548
	         *     var string = wordArray + '';                                                                           // 7549
	         *     var string = wordArray.toString();                                                                     // 7550
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);                                                    // 7551
	         */                                                                                                           // 7552
	        toString: function (encoder) {                                                                                // 7553
	            return (encoder || Hex).stringify(this);                                                                  // 7554
	        },                                                                                                            // 7555
                                                                                                                       // 7556
	        /**                                                                                                           // 7557
	         * Concatenates a word array to this word array.                                                              // 7558
	         *                                                                                                            // 7559
	         * @param {WordArray} wordArray The word array to append.                                                     // 7560
	         *                                                                                                            // 7561
	         * @return {WordArray} This word array.                                                                       // 7562
	         *                                                                                                            // 7563
	         * @example                                                                                                   // 7564
	         *                                                                                                            // 7565
	         *     wordArray1.concat(wordArray2);                                                                         // 7566
	         */                                                                                                           // 7567
	        concat: function (wordArray) {                                                                                // 7568
	            // Shortcuts                                                                                              // 7569
	            var thisWords = this.words;                                                                               // 7570
	            var thatWords = wordArray.words;                                                                          // 7571
	            var thisSigBytes = this.sigBytes;                                                                         // 7572
	            var thatSigBytes = wordArray.sigBytes;                                                                    // 7573
                                                                                                                       // 7574
	            // Clamp excess bits                                                                                      // 7575
	            this.clamp();                                                                                             // 7576
                                                                                                                       // 7577
	            // Concat                                                                                                 // 7578
	            if (thisSigBytes % 4) {                                                                                   // 7579
	                // Copy one byte at a time                                                                            // 7580
	                for (var i = 0; i < thatSigBytes; i++) {                                                              // 7581
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                // 7582
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);           // 7583
	                }                                                                                                     // 7584
	            } else {                                                                                                  // 7585
	                // Copy one word at a time                                                                            // 7586
	                for (var i = 0; i < thatSigBytes; i += 4) {                                                           // 7587
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];                                         // 7588
	                }                                                                                                     // 7589
	            }                                                                                                         // 7590
	            this.sigBytes += thatSigBytes;                                                                            // 7591
                                                                                                                       // 7592
	            // Chainable                                                                                              // 7593
	            return this;                                                                                              // 7594
	        },                                                                                                            // 7595
                                                                                                                       // 7596
	        /**                                                                                                           // 7597
	         * Removes insignificant bits.                                                                                // 7598
	         *                                                                                                            // 7599
	         * @example                                                                                                   // 7600
	         *                                                                                                            // 7601
	         *     wordArray.clamp();                                                                                     // 7602
	         */                                                                                                           // 7603
	        clamp: function () {                                                                                          // 7604
	            // Shortcuts                                                                                              // 7605
	            var words = this.words;                                                                                   // 7606
	            var sigBytes = this.sigBytes;                                                                             // 7607
                                                                                                                       // 7608
	            // Clamp                                                                                                  // 7609
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);                                         // 7610
	            words.length = Math.ceil(sigBytes / 4);                                                                   // 7611
	        },                                                                                                            // 7612
                                                                                                                       // 7613
	        /**                                                                                                           // 7614
	         * Creates a copy of this word array.                                                                         // 7615
	         *                                                                                                            // 7616
	         * @return {WordArray} The clone.                                                                             // 7617
	         *                                                                                                            // 7618
	         * @example                                                                                                   // 7619
	         *                                                                                                            // 7620
	         *     var clone = wordArray.clone();                                                                         // 7621
	         */                                                                                                           // 7622
	        clone: function () {                                                                                          // 7623
	            var clone = Base.clone.call(this);                                                                        // 7624
	            clone.words = this.words.slice(0);                                                                        // 7625
                                                                                                                       // 7626
	            return clone;                                                                                             // 7627
	        },                                                                                                            // 7628
                                                                                                                       // 7629
	        /**                                                                                                           // 7630
	         * Creates a word array filled with random bytes.                                                             // 7631
	         *                                                                                                            // 7632
	         * @param {number} nBytes The number of random bytes to generate.                                             // 7633
	         *                                                                                                            // 7634
	         * @return {WordArray} The random word array.                                                                 // 7635
	         *                                                                                                            // 7636
	         * @static                                                                                                    // 7637
	         *                                                                                                            // 7638
	         * @example                                                                                                   // 7639
	         *                                                                                                            // 7640
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);                                                     // 7641
	         */                                                                                                           // 7642
	        random: function (nBytes) {                                                                                   // 7643
	            var words = [];                                                                                           // 7644
                                                                                                                       // 7645
	            var r = (function (m_w) {                                                                                 // 7646
	                var m_w = m_w;                                                                                        // 7647
	                var m_z = 0x3ade68b1;                                                                                 // 7648
	                var mask = 0xffffffff;                                                                                // 7649
                                                                                                                       // 7650
	                return function () {                                                                                  // 7651
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;                                           // 7652
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;                                           // 7653
	                    var result = ((m_z << 0x10) + m_w) & mask;                                                        // 7654
	                    result /= 0x100000000;                                                                            // 7655
	                    result += 0.5;                                                                                    // 7656
	                    return result * (Math.random() > .5 ? 1 : -1);                                                    // 7657
	                }                                                                                                     // 7658
	            });                                                                                                       // 7659
                                                                                                                       // 7660
	            for (var i = 0, rcache; i < nBytes; i += 4) {                                                             // 7661
	                var _r = r((rcache || Math.random()) * 0x100000000);                                                  // 7662
                                                                                                                       // 7663
	                rcache = _r() * 0x3ade67b7;                                                                           // 7664
	                words.push((_r() * 0x100000000) | 0);                                                                 // 7665
	            }                                                                                                         // 7666
                                                                                                                       // 7667
	            return new WordArray.init(words, nBytes);                                                                 // 7668
	        }                                                                                                             // 7669
	    });                                                                                                               // 7670
                                                                                                                       // 7671
	    /**                                                                                                               // 7672
	     * Encoder namespace.                                                                                             // 7673
	     */                                                                                                               // 7674
	    var C_enc = C.enc = {};                                                                                           // 7675
                                                                                                                       // 7676
	    /**                                                                                                               // 7677
	     * Hex encoding strategy.                                                                                         // 7678
	     */                                                                                                               // 7679
	    var Hex = C_enc.Hex = {                                                                                           // 7680
	        /**                                                                                                           // 7681
	         * Converts a word array to a hex string.                                                                     // 7682
	         *                                                                                                            // 7683
	         * @param {WordArray} wordArray The word array.                                                               // 7684
	         *                                                                                                            // 7685
	         * @return {string} The hex string.                                                                           // 7686
	         *                                                                                                            // 7687
	         * @static                                                                                                    // 7688
	         *                                                                                                            // 7689
	         * @example                                                                                                   // 7690
	         *                                                                                                            // 7691
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);                                                 // 7692
	         */                                                                                                           // 7693
	        stringify: function (wordArray) {                                                                             // 7694
	            // Shortcuts                                                                                              // 7695
	            var words = wordArray.words;                                                                              // 7696
	            var sigBytes = wordArray.sigBytes;                                                                        // 7697
                                                                                                                       // 7698
	            // Convert                                                                                                // 7699
	            var hexChars = [];                                                                                        // 7700
	            for (var i = 0; i < sigBytes; i++) {                                                                      // 7701
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 7702
	                hexChars.push((bite >>> 4).toString(16));                                                             // 7703
	                hexChars.push((bite & 0x0f).toString(16));                                                            // 7704
	            }                                                                                                         // 7705
                                                                                                                       // 7706
	            return hexChars.join('');                                                                                 // 7707
	        },                                                                                                            // 7708
                                                                                                                       // 7709
	        /**                                                                                                           // 7710
	         * Converts a hex string to a word array.                                                                     // 7711
	         *                                                                                                            // 7712
	         * @param {string} hexStr The hex string.                                                                     // 7713
	         *                                                                                                            // 7714
	         * @return {WordArray} The word array.                                                                        // 7715
	         *                                                                                                            // 7716
	         * @static                                                                                                    // 7717
	         *                                                                                                            // 7718
	         * @example                                                                                                   // 7719
	         *                                                                                                            // 7720
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);                                                     // 7721
	         */                                                                                                           // 7722
	        parse: function (hexStr) {                                                                                    // 7723
	            // Shortcut                                                                                               // 7724
	            var hexStrLength = hexStr.length;                                                                         // 7725
                                                                                                                       // 7726
	            // Convert                                                                                                // 7727
	            var words = [];                                                                                           // 7728
	            for (var i = 0; i < hexStrLength; i += 2) {                                                               // 7729
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);                            // 7730
	            }                                                                                                         // 7731
                                                                                                                       // 7732
	            return new WordArray.init(words, hexStrLength / 2);                                                       // 7733
	        }                                                                                                             // 7734
	    };                                                                                                                // 7735
                                                                                                                       // 7736
	    /**                                                                                                               // 7737
	     * Latin1 encoding strategy.                                                                                      // 7738
	     */                                                                                                               // 7739
	    var Latin1 = C_enc.Latin1 = {                                                                                     // 7740
	        /**                                                                                                           // 7741
	         * Converts a word array to a Latin1 string.                                                                  // 7742
	         *                                                                                                            // 7743
	         * @param {WordArray} wordArray The word array.                                                               // 7744
	         *                                                                                                            // 7745
	         * @return {string} The Latin1 string.                                                                        // 7746
	         *                                                                                                            // 7747
	         * @static                                                                                                    // 7748
	         *                                                                                                            // 7749
	         * @example                                                                                                   // 7750
	         *                                                                                                            // 7751
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);                                           // 7752
	         */                                                                                                           // 7753
	        stringify: function (wordArray) {                                                                             // 7754
	            // Shortcuts                                                                                              // 7755
	            var words = wordArray.words;                                                                              // 7756
	            var sigBytes = wordArray.sigBytes;                                                                        // 7757
                                                                                                                       // 7758
	            // Convert                                                                                                // 7759
	            var latin1Chars = [];                                                                                     // 7760
	            for (var i = 0; i < sigBytes; i++) {                                                                      // 7761
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 7762
	                latin1Chars.push(String.fromCharCode(bite));                                                          // 7763
	            }                                                                                                         // 7764
                                                                                                                       // 7765
	            return latin1Chars.join('');                                                                              // 7766
	        },                                                                                                            // 7767
                                                                                                                       // 7768
	        /**                                                                                                           // 7769
	         * Converts a Latin1 string to a word array.                                                                  // 7770
	         *                                                                                                            // 7771
	         * @param {string} latin1Str The Latin1 string.                                                               // 7772
	         *                                                                                                            // 7773
	         * @return {WordArray} The word array.                                                                        // 7774
	         *                                                                                                            // 7775
	         * @static                                                                                                    // 7776
	         *                                                                                                            // 7777
	         * @example                                                                                                   // 7778
	         *                                                                                                            // 7779
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);                                               // 7780
	         */                                                                                                           // 7781
	        parse: function (latin1Str) {                                                                                 // 7782
	            // Shortcut                                                                                               // 7783
	            var latin1StrLength = latin1Str.length;                                                                   // 7784
                                                                                                                       // 7785
	            // Convert                                                                                                // 7786
	            var words = [];                                                                                           // 7787
	            for (var i = 0; i < latin1StrLength; i++) {                                                               // 7788
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);                             // 7789
	            }                                                                                                         // 7790
                                                                                                                       // 7791
	            return new WordArray.init(words, latin1StrLength);                                                        // 7792
	        }                                                                                                             // 7793
	    };                                                                                                                // 7794
                                                                                                                       // 7795
	    /**                                                                                                               // 7796
	     * UTF-8 encoding strategy.                                                                                       // 7797
	     */                                                                                                               // 7798
	    var Utf8 = C_enc.Utf8 = {                                                                                         // 7799
	        /**                                                                                                           // 7800
	         * Converts a word array to a UTF-8 string.                                                                   // 7801
	         *                                                                                                            // 7802
	         * @param {WordArray} wordArray The word array.                                                               // 7803
	         *                                                                                                            // 7804
	         * @return {string} The UTF-8 string.                                                                         // 7805
	         *                                                                                                            // 7806
	         * @static                                                                                                    // 7807
	         *                                                                                                            // 7808
	         * @example                                                                                                   // 7809
	         *                                                                                                            // 7810
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);                                               // 7811
	         */                                                                                                           // 7812
	        stringify: function (wordArray) {                                                                             // 7813
	            try {                                                                                                     // 7814
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));                                       // 7815
	            } catch (e) {                                                                                             // 7816
	                throw new Error('Malformed UTF-8 data');                                                              // 7817
	            }                                                                                                         // 7818
	        },                                                                                                            // 7819
                                                                                                                       // 7820
	        /**                                                                                                           // 7821
	         * Converts a UTF-8 string to a word array.                                                                   // 7822
	         *                                                                                                            // 7823
	         * @param {string} utf8Str The UTF-8 string.                                                                  // 7824
	         *                                                                                                            // 7825
	         * @return {WordArray} The word array.                                                                        // 7826
	         *                                                                                                            // 7827
	         * @static                                                                                                    // 7828
	         *                                                                                                            // 7829
	         * @example                                                                                                   // 7830
	         *                                                                                                            // 7831
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);                                                   // 7832
	         */                                                                                                           // 7833
	        parse: function (utf8Str) {                                                                                   // 7834
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));                                               // 7835
	        }                                                                                                             // 7836
	    };                                                                                                                // 7837
                                                                                                                       // 7838
	    /**                                                                                                               // 7839
	     * Abstract buffered block algorithm template.                                                                    // 7840
	     *                                                                                                                // 7841
	     * The property blockSize must be implemented in a concrete subtype.                                              // 7842
	     *                                                                                                                // 7843
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */                                                                                                               // 7845
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({                                         // 7846
	        /**                                                                                                           // 7847
	         * Resets this block algorithm's data buffer to its initial state.                                            // 7848
	         *                                                                                                            // 7849
	         * @example                                                                                                   // 7850
	         *                                                                                                            // 7851
	         *     bufferedBlockAlgorithm.reset();                                                                        // 7852
	         */                                                                                                           // 7853
	        reset: function () {                                                                                          // 7854
	            // Initial values                                                                                         // 7855
	            this._data = new WordArray.init();                                                                        // 7856
	            this._nDataBytes = 0;                                                                                     // 7857
	        },                                                                                                            // 7858
                                                                                                                       // 7859
	        /**                                                                                                           // 7860
	         * Adds new data to this block algorithm's buffer.                                                            // 7861
	         *                                                                                                            // 7862
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.       // 7863
	         *                                                                                                            // 7864
	         * @example                                                                                                   // 7865
	         *                                                                                                            // 7866
	         *     bufferedBlockAlgorithm._append('data');                                                                // 7867
	         *     bufferedBlockAlgorithm._append(wordArray);                                                             // 7868
	         */                                                                                                           // 7869
	        _append: function (data) {                                                                                    // 7870
	            // Convert string to WordArray, else assume WordArray already                                             // 7871
	            if (typeof data == 'string') {                                                                            // 7872
	                data = Utf8.parse(data);                                                                              // 7873
	            }                                                                                                         // 7874
                                                                                                                       // 7875
	            // Append                                                                                                 // 7876
	            this._data.concat(data);                                                                                  // 7877
	            this._nDataBytes += data.sigBytes;                                                                        // 7878
	        },                                                                                                            // 7879
                                                                                                                       // 7880
	        /**                                                                                                           // 7881
	         * Processes available data blocks.                                                                           // 7882
	         *                                                                                                            // 7883
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.              // 7884
	         *                                                                                                            // 7885
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.                        // 7886
	         *                                                                                                            // 7887
	         * @return {WordArray} The processed data.                                                                    // 7888
	         *                                                                                                            // 7889
	         * @example                                                                                                   // 7890
	         *                                                                                                            // 7891
	         *     var processedData = bufferedBlockAlgorithm._process();                                                 // 7892
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');                                        // 7893
	         */                                                                                                           // 7894
	        _process: function (doFlush) {                                                                                // 7895
	            // Shortcuts                                                                                              // 7896
	            var data = this._data;                                                                                    // 7897
	            var dataWords = data.words;                                                                               // 7898
	            var dataSigBytes = data.sigBytes;                                                                         // 7899
	            var blockSize = this.blockSize;                                                                           // 7900
	            var blockSizeBytes = blockSize * 4;                                                                       // 7901
                                                                                                                       // 7902
	            // Count blocks ready                                                                                     // 7903
	            var nBlocksReady = dataSigBytes / blockSizeBytes;                                                         // 7904
	            if (doFlush) {                                                                                            // 7905
	                // Round up to include partial blocks                                                                 // 7906
	                nBlocksReady = Math.ceil(nBlocksReady);                                                               // 7907
	            } else {                                                                                                  // 7908
	                // Round down to include only full blocks,                                                            // 7909
	                // less the number of blocks that must remain in the buffer                                           // 7910
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);                                 // 7911
	            }                                                                                                         // 7912
                                                                                                                       // 7913
	            // Count words ready                                                                                      // 7914
	            var nWordsReady = nBlocksReady * blockSize;                                                               // 7915
                                                                                                                       // 7916
	            // Count bytes ready                                                                                      // 7917
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);                                                // 7918
                                                                                                                       // 7919
	            // Process blocks                                                                                         // 7920
	            if (nWordsReady) {                                                                                        // 7921
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {                                     // 7922
	                    // Perform concrete-algorithm logic                                                               // 7923
	                    this._doProcessBlock(dataWords, offset);                                                          // 7924
	                }                                                                                                     // 7925
                                                                                                                       // 7926
	                // Remove processed words                                                                             // 7927
	                var processedWords = dataWords.splice(0, nWordsReady);                                                // 7928
	                data.sigBytes -= nBytesReady;                                                                         // 7929
	            }                                                                                                         // 7930
                                                                                                                       // 7931
	            // Return processed words                                                                                 // 7932
	            return new WordArray.init(processedWords, nBytesReady);                                                   // 7933
	        },                                                                                                            // 7934
                                                                                                                       // 7935
	        /**                                                                                                           // 7936
	         * Creates a copy of this object.                                                                             // 7937
	         *                                                                                                            // 7938
	         * @return {Object} The clone.                                                                                // 7939
	         *                                                                                                            // 7940
	         * @example                                                                                                   // 7941
	         *                                                                                                            // 7942
	         *     var clone = bufferedBlockAlgorithm.clone();                                                            // 7943
	         */                                                                                                           // 7944
	        clone: function () {                                                                                          // 7945
	            var clone = Base.clone.call(this);                                                                        // 7946
	            clone._data = this._data.clone();                                                                         // 7947
                                                                                                                       // 7948
	            return clone;                                                                                             // 7949
	        },                                                                                                            // 7950
                                                                                                                       // 7951
	        _minBufferSize: 0                                                                                             // 7952
	    });                                                                                                               // 7953
                                                                                                                       // 7954
	    /**                                                                                                               // 7955
	     * Abstract hasher template.                                                                                      // 7956
	     *                                                                                                                // 7957
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)        // 7958
	     */                                                                                                               // 7959
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({                                                       // 7960
	        /**                                                                                                           // 7961
	         * Configuration options.                                                                                     // 7962
	         */                                                                                                           // 7963
	        cfg: Base.extend(),                                                                                           // 7964
                                                                                                                       // 7965
	        /**                                                                                                           // 7966
	         * Initializes a newly created hasher.                                                                        // 7967
	         *                                                                                                            // 7968
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.                 // 7969
	         *                                                                                                            // 7970
	         * @example                                                                                                   // 7971
	         *                                                                                                            // 7972
	         *     var hasher = CryptoJS.algo.SHA256.create();                                                            // 7973
	         */                                                                                                           // 7974
	        init: function (cfg) {                                                                                        // 7975
	            // Apply config defaults                                                                                  // 7976
	            this.cfg = this.cfg.extend(cfg);                                                                          // 7977
                                                                                                                       // 7978
	            // Set initial values                                                                                     // 7979
	            this.reset();                                                                                             // 7980
	        },                                                                                                            // 7981
                                                                                                                       // 7982
	        /**                                                                                                           // 7983
	         * Resets this hasher to its initial state.                                                                   // 7984
	         *                                                                                                            // 7985
	         * @example                                                                                                   // 7986
	         *                                                                                                            // 7987
	         *     hasher.reset();                                                                                        // 7988
	         */                                                                                                           // 7989
	        reset: function () {                                                                                          // 7990
	            // Reset data buffer                                                                                      // 7991
	            BufferedBlockAlgorithm.reset.call(this);                                                                  // 7992
                                                                                                                       // 7993
	            // Perform concrete-hasher logic                                                                          // 7994
	            this._doReset();                                                                                          // 7995
	        },                                                                                                            // 7996
                                                                                                                       // 7997
	        /**                                                                                                           // 7998
	         * Updates this hasher with a message.                                                                        // 7999
	         *                                                                                                            // 8000
	         * @param {WordArray|string} messageUpdate The message to append.                                             // 8001
	         *                                                                                                            // 8002
	         * @return {Hasher} This hasher.                                                                              // 8003
	         *                                                                                                            // 8004
	         * @example                                                                                                   // 8005
	         *                                                                                                            // 8006
	         *     hasher.update('message');                                                                              // 8007
	         *     hasher.update(wordArray);                                                                              // 8008
	         */                                                                                                           // 8009
	        update: function (messageUpdate) {                                                                            // 8010
	            // Append                                                                                                 // 8011
	            this._append(messageUpdate);                                                                              // 8012
                                                                                                                       // 8013
	            // Update the hash                                                                                        // 8014
	            this._process();                                                                                          // 8015
                                                                                                                       // 8016
	            // Chainable                                                                                              // 8017
	            return this;                                                                                              // 8018
	        },                                                                                                            // 8019
                                                                                                                       // 8020
	        /**                                                                                                           // 8021
	         * Finalizes the hash computation.                                                                            // 8022
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 8023
	         *                                                                                                            // 8024
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 8025
	         *                                                                                                            // 8026
	         * @return {WordArray} The hash.                                                                              // 8027
	         *                                                                                                            // 8028
	         * @example                                                                                                   // 8029
	         *                                                                                                            // 8030
	         *     var hash = hasher.finalize();                                                                          // 8031
	         *     var hash = hasher.finalize('message');                                                                 // 8032
	         *     var hash = hasher.finalize(wordArray);                                                                 // 8033
	         */                                                                                                           // 8034
	        finalize: function (messageUpdate) {                                                                          // 8035
	            // Final message update                                                                                   // 8036
	            if (messageUpdate) {                                                                                      // 8037
	                this._append(messageUpdate);                                                                          // 8038
	            }                                                                                                         // 8039
                                                                                                                       // 8040
	            // Perform concrete-hasher logic                                                                          // 8041
	            var hash = this._doFinalize();                                                                            // 8042
                                                                                                                       // 8043
	            return hash;                                                                                              // 8044
	        },                                                                                                            // 8045
                                                                                                                       // 8046
	        blockSize: 512/32,                                                                                            // 8047
                                                                                                                       // 8048
	        /**                                                                                                           // 8049
	         * Creates a shortcut function to a hasher's object interface.                                                // 8050
	         *                                                                                                            // 8051
	         * @param {Hasher} hasher The hasher to create a helper for.                                                  // 8052
	         *                                                                                                            // 8053
	         * @return {Function} The shortcut function.                                                                  // 8054
	         *                                                                                                            // 8055
	         * @static                                                                                                    // 8056
	         *                                                                                                            // 8057
	         * @example                                                                                                   // 8058
	         *                                                                                                            // 8059
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);                                  // 8060
	         */                                                                                                           // 8061
	        _createHelper: function (hasher) {                                                                            // 8062
	            return function (message, cfg) {                                                                          // 8063
	                return new hasher.init(cfg).finalize(message);                                                        // 8064
	            };                                                                                                        // 8065
	        },                                                                                                            // 8066
                                                                                                                       // 8067
	        /**                                                                                                           // 8068
	         * Creates a shortcut function to the HMAC's object interface.                                                // 8069
	         *                                                                                                            // 8070
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.                                              // 8071
	         *                                                                                                            // 8072
	         * @return {Function} The shortcut function.                                                                  // 8073
	         *                                                                                                            // 8074
	         * @static                                                                                                    // 8075
	         *                                                                                                            // 8076
	         * @example                                                                                                   // 8077
	         *                                                                                                            // 8078
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);                          // 8079
	         */                                                                                                           // 8080
	        _createHmacHelper: function (hasher) {                                                                        // 8081
	            return function (message, key) {                                                                          // 8082
	                return new C_algo.HMAC.init(hasher, key).finalize(message);                                           // 8083
	            };                                                                                                        // 8084
	        }                                                                                                             // 8085
	    });                                                                                                               // 8086
                                                                                                                       // 8087
	    /**                                                                                                               // 8088
	     * Algorithm namespace.                                                                                           // 8089
	     */                                                                                                               // 8090
	    var C_algo = C.algo = {};                                                                                         // 8091
                                                                                                                       // 8092
	    return C;                                                                                                         // 8093
	}(Math));                                                                                                             // 8094
                                                                                                                       // 8095
                                                                                                                       // 8096
	return CryptoJS;                                                                                                      // 8097
                                                                                                                       // 8098
}));                                                                                                                   // 8099
},{}],52:[function(require,module,exports){                                                                            // 8100
;(function (root, factory) {                                                                                           // 8101
	if (typeof exports === "object") {                                                                                    // 8102
		// CommonJS                                                                                                          // 8103
		module.exports = exports = factory(require("./core"));                                                               // 8104
	}                                                                                                                     // 8105
	else if (typeof define === "function" && define.amd) {                                                                // 8106
		// AMD                                                                                                               // 8107
		define(["./core"], factory);                                                                                         // 8108
	}                                                                                                                     // 8109
	else {                                                                                                                // 8110
		// Global (browser)                                                                                                  // 8111
		factory(root.CryptoJS);                                                                                              // 8112
	}                                                                                                                     // 8113
}(this, function (CryptoJS) {                                                                                          // 8114
                                                                                                                       // 8115
	(function () {                                                                                                        // 8116
	    // Shortcuts                                                                                                      // 8117
	    var C = CryptoJS;                                                                                                 // 8118
	    var C_lib = C.lib;                                                                                                // 8119
	    var WordArray = C_lib.WordArray;                                                                                  // 8120
	    var C_enc = C.enc;                                                                                                // 8121
                                                                                                                       // 8122
	    /**                                                                                                               // 8123
	     * Base64 encoding strategy.                                                                                      // 8124
	     */                                                                                                               // 8125
	    var Base64 = C_enc.Base64 = {                                                                                     // 8126
	        /**                                                                                                           // 8127
	         * Converts a word array to a Base64 string.                                                                  // 8128
	         *                                                                                                            // 8129
	         * @param {WordArray} wordArray The word array.                                                               // 8130
	         *                                                                                                            // 8131
	         * @return {string} The Base64 string.                                                                        // 8132
	         *                                                                                                            // 8133
	         * @static                                                                                                    // 8134
	         *                                                                                                            // 8135
	         * @example                                                                                                   // 8136
	         *                                                                                                            // 8137
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);                                           // 8138
	         */                                                                                                           // 8139
	        stringify: function (wordArray) {                                                                             // 8140
	            // Shortcuts                                                                                              // 8141
	            var words = wordArray.words;                                                                              // 8142
	            var sigBytes = wordArray.sigBytes;                                                                        // 8143
	            var map = this._map;                                                                                      // 8144
                                                                                                                       // 8145
	            // Clamp excess bits                                                                                      // 8146
	            wordArray.clamp();                                                                                        // 8147
                                                                                                                       // 8148
	            // Convert                                                                                                // 8149
	            var base64Chars = [];                                                                                     // 8150
	            for (var i = 0; i < sigBytes; i += 3) {                                                                   // 8151
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;                               // 8152
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;                               // 8153
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;                               // 8154
                                                                                                                       // 8155
	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;                                                   // 8156
                                                                                                                       // 8157
	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {                                          // 8158
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));                                 // 8159
	                }                                                                                                     // 8160
	            }                                                                                                         // 8161
                                                                                                                       // 8162
	            // Add padding                                                                                            // 8163
	            var paddingChar = map.charAt(64);                                                                         // 8164
	            if (paddingChar) {                                                                                        // 8165
	                while (base64Chars.length % 4) {                                                                      // 8166
	                    base64Chars.push(paddingChar);                                                                    // 8167
	                }                                                                                                     // 8168
	            }                                                                                                         // 8169
                                                                                                                       // 8170
	            return base64Chars.join('');                                                                              // 8171
	        },                                                                                                            // 8172
                                                                                                                       // 8173
	        /**                                                                                                           // 8174
	         * Converts a Base64 string to a word array.                                                                  // 8175
	         *                                                                                                            // 8176
	         * @param {string} base64Str The Base64 string.                                                               // 8177
	         *                                                                                                            // 8178
	         * @return {WordArray} The word array.                                                                        // 8179
	         *                                                                                                            // 8180
	         * @static                                                                                                    // 8181
	         *                                                                                                            // 8182
	         * @example                                                                                                   // 8183
	         *                                                                                                            // 8184
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);                                               // 8185
	         */                                                                                                           // 8186
	        parse: function (base64Str) {                                                                                 // 8187
	            // Shortcuts                                                                                              // 8188
	            var base64StrLength = base64Str.length;                                                                   // 8189
	            var map = this._map;                                                                                      // 8190
                                                                                                                       // 8191
	            // Ignore padding                                                                                         // 8192
	            var paddingChar = map.charAt(64);                                                                         // 8193
	            if (paddingChar) {                                                                                        // 8194
	                var paddingIndex = base64Str.indexOf(paddingChar);                                                    // 8195
	                if (paddingIndex != -1) {                                                                             // 8196
	                    base64StrLength = paddingIndex;                                                                   // 8197
	                }                                                                                                     // 8198
	            }                                                                                                         // 8199
                                                                                                                       // 8200
	            // Convert                                                                                                // 8201
	            var words = [];                                                                                           // 8202
	            var nBytes = 0;                                                                                           // 8203
	            for (var i = 0; i < base64StrLength; i++) {                                                               // 8204
	                if (i % 4) {                                                                                          // 8205
	                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);                                // 8206
	                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);                               // 8207
	                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);                                // 8208
	                    nBytes++;                                                                                         // 8209
	                }                                                                                                     // 8210
	            }                                                                                                         // 8211
                                                                                                                       // 8212
	            return WordArray.create(words, nBytes);                                                                   // 8213
	        },                                                                                                            // 8214
                                                                                                                       // 8215
	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='                                     // 8216
	    };                                                                                                                // 8217
	}());                                                                                                                 // 8218
                                                                                                                       // 8219
                                                                                                                       // 8220
	return CryptoJS.enc.Base64;                                                                                           // 8221
                                                                                                                       // 8222
}));                                                                                                                   // 8223
},{"./core":51}],53:[function(require,module,exports){                                                                 // 8224
;(function (root, factory) {                                                                                           // 8225
	if (typeof exports === "object") {                                                                                    // 8226
		// CommonJS                                                                                                          // 8227
		module.exports = exports = factory(require("./core"));                                                               // 8228
	}                                                                                                                     // 8229
	else if (typeof define === "function" && define.amd) {                                                                // 8230
		// AMD                                                                                                               // 8231
		define(["./core"], factory);                                                                                         // 8232
	}                                                                                                                     // 8233
	else {                                                                                                                // 8234
		// Global (browser)                                                                                                  // 8235
		factory(root.CryptoJS);                                                                                              // 8236
	}                                                                                                                     // 8237
}(this, function (CryptoJS) {                                                                                          // 8238
                                                                                                                       // 8239
	(function () {                                                                                                        // 8240
	    // Shortcuts                                                                                                      // 8241
	    var C = CryptoJS;                                                                                                 // 8242
	    var C_lib = C.lib;                                                                                                // 8243
	    var WordArray = C_lib.WordArray;                                                                                  // 8244
	    var C_enc = C.enc;                                                                                                // 8245
                                                                                                                       // 8246
	    /**                                                                                                               // 8247
	     * UTF-16 BE encoding strategy.                                                                                   // 8248
	     */                                                                                                               // 8249
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {                                                                     // 8250
	        /**                                                                                                           // 8251
	         * Converts a word array to a UTF-16 BE string.                                                               // 8252
	         *                                                                                                            // 8253
	         * @param {WordArray} wordArray The word array.                                                               // 8254
	         *                                                                                                            // 8255
	         * @return {string} The UTF-16 BE string.                                                                     // 8256
	         *                                                                                                            // 8257
	         * @static                                                                                                    // 8258
	         *                                                                                                            // 8259
	         * @example                                                                                                   // 8260
	         *                                                                                                            // 8261
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);                                             // 8262
	         */                                                                                                           // 8263
	        stringify: function (wordArray) {                                                                             // 8264
	            // Shortcuts                                                                                              // 8265
	            var words = wordArray.words;                                                                              // 8266
	            var sigBytes = wordArray.sigBytes;                                                                        // 8267
                                                                                                                       // 8268
	            // Convert                                                                                                // 8269
	            var utf16Chars = [];                                                                                      // 8270
	            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8271
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;                                     // 8272
	                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8273
	            }                                                                                                         // 8274
                                                                                                                       // 8275
	            return utf16Chars.join('');                                                                               // 8276
	        },                                                                                                            // 8277
                                                                                                                       // 8278
	        /**                                                                                                           // 8279
	         * Converts a UTF-16 BE string to a word array.                                                               // 8280
	         *                                                                                                            // 8281
	         * @param {string} utf16Str The UTF-16 BE string.                                                             // 8282
	         *                                                                                                            // 8283
	         * @return {WordArray} The word array.                                                                        // 8284
	         *                                                                                                            // 8285
	         * @static                                                                                                    // 8286
	         *                                                                                                            // 8287
	         * @example                                                                                                   // 8288
	         *                                                                                                            // 8289
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);                                                 // 8290
	         */                                                                                                           // 8291
	        parse: function (utf16Str) {                                                                                  // 8292
	            // Shortcut                                                                                               // 8293
	            var utf16StrLength = utf16Str.length;                                                                     // 8294
                                                                                                                       // 8295
	            // Convert                                                                                                // 8296
	            var words = [];                                                                                           // 8297
	            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8298
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);                                      // 8299
	            }                                                                                                         // 8300
                                                                                                                       // 8301
	            return WordArray.create(words, utf16StrLength * 2);                                                       // 8302
	        }                                                                                                             // 8303
	    };                                                                                                                // 8304
                                                                                                                       // 8305
	    /**                                                                                                               // 8306
	     * UTF-16 LE encoding strategy.                                                                                   // 8307
	     */                                                                                                               // 8308
	    C_enc.Utf16LE = {                                                                                                 // 8309
	        /**                                                                                                           // 8310
	         * Converts a word array to a UTF-16 LE string.                                                               // 8311
	         *                                                                                                            // 8312
	         * @param {WordArray} wordArray The word array.                                                               // 8313
	         *                                                                                                            // 8314
	         * @return {string} The UTF-16 LE string.                                                                     // 8315
	         *                                                                                                            // 8316
	         * @static                                                                                                    // 8317
	         *                                                                                                            // 8318
	         * @example                                                                                                   // 8319
	         *                                                                                                            // 8320
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);                                              // 8321
	         */                                                                                                           // 8322
	        stringify: function (wordArray) {                                                                             // 8323
	            // Shortcuts                                                                                              // 8324
	            var words = wordArray.words;                                                                              // 8325
	            var sigBytes = wordArray.sigBytes;                                                                        // 8326
                                                                                                                       // 8327
	            // Convert                                                                                                // 8328
	            var utf16Chars = [];                                                                                      // 8329
	            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8330
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);                         // 8331
	                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8332
	            }                                                                                                         // 8333
                                                                                                                       // 8334
	            return utf16Chars.join('');                                                                               // 8335
	        },                                                                                                            // 8336
                                                                                                                       // 8337
	        /**                                                                                                           // 8338
	         * Converts a UTF-16 LE string to a word array.                                                               // 8339
	         *                                                                                                            // 8340
	         * @param {string} utf16Str The UTF-16 LE string.                                                             // 8341
	         *                                                                                                            // 8342
	         * @return {WordArray} The word array.                                                                        // 8343
	         *                                                                                                            // 8344
	         * @static                                                                                                    // 8345
	         *                                                                                                            // 8346
	         * @example                                                                                                   // 8347
	         *                                                                                                            // 8348
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);                                                  // 8349
	         */                                                                                                           // 8350
	        parse: function (utf16Str) {                                                                                  // 8351
	            // Shortcut                                                                                               // 8352
	            var utf16StrLength = utf16Str.length;                                                                     // 8353
                                                                                                                       // 8354
	            // Convert                                                                                                // 8355
	            var words = [];                                                                                           // 8356
	            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8357
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));                          // 8358
	            }                                                                                                         // 8359
                                                                                                                       // 8360
	            return WordArray.create(words, utf16StrLength * 2);                                                       // 8361
	        }                                                                                                             // 8362
	    };                                                                                                                // 8363
                                                                                                                       // 8364
	    function swapEndian(word) {                                                                                       // 8365
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);                                              // 8366
	    }                                                                                                                 // 8367
	}());                                                                                                                 // 8368
                                                                                                                       // 8369
                                                                                                                       // 8370
	return CryptoJS.enc.Utf16;                                                                                            // 8371
                                                                                                                       // 8372
}));                                                                                                                   // 8373
},{"./core":51}],54:[function(require,module,exports){                                                                 // 8374
;(function (root, factory, undef) {                                                                                    // 8375
	if (typeof exports === "object") {                                                                                    // 8376
		// CommonJS                                                                                                          // 8377
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));                         // 8378
	}                                                                                                                     // 8379
	else if (typeof define === "function" && define.amd) {                                                                // 8380
		// AMD                                                                                                               // 8381
		define(["./core", "./sha1", "./hmac"], factory);                                                                     // 8382
	}                                                                                                                     // 8383
	else {                                                                                                                // 8384
		// Global (browser)                                                                                                  // 8385
		factory(root.CryptoJS);                                                                                              // 8386
	}                                                                                                                     // 8387
}(this, function (CryptoJS) {                                                                                          // 8388
                                                                                                                       // 8389
	(function () {                                                                                                        // 8390
	    // Shortcuts                                                                                                      // 8391
	    var C = CryptoJS;                                                                                                 // 8392
	    var C_lib = C.lib;                                                                                                // 8393
	    var Base = C_lib.Base;                                                                                            // 8394
	    var WordArray = C_lib.WordArray;                                                                                  // 8395
	    var C_algo = C.algo;                                                                                              // 8396
	    var MD5 = C_algo.MD5;                                                                                             // 8397
                                                                                                                       // 8398
	    /**                                                                                                               // 8399
	     * This key derivation function is meant to conform with EVP_BytesToKey.                                          // 8400
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html                                                                // 8401
	     */                                                                                                               // 8402
	    var EvpKDF = C_algo.EvpKDF = Base.extend({                                                                        // 8403
	        /**                                                                                                           // 8404
	         * Configuration options.                                                                                     // 8405
	         *                                                                                                            // 8406
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 8407
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5                                          // 8408
	         * @property {number} iterations The number of iterations to perform. Default: 1                              // 8409
	         */                                                                                                           // 8410
	        cfg: Base.extend({                                                                                            // 8411
	            keySize: 128/32,                                                                                          // 8412
	            hasher: MD5,                                                                                              // 8413
	            iterations: 1                                                                                             // 8414
	        }),                                                                                                           // 8415
                                                                                                                       // 8416
	        /**                                                                                                           // 8417
	         * Initializes a newly created key derivation function.                                                       // 8418
	         *                                                                                                            // 8419
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 8420
	         *                                                                                                            // 8421
	         * @example                                                                                                   // 8422
	         *                                                                                                            // 8423
	         *     var kdf = CryptoJS.algo.EvpKDF.create();                                                               // 8424
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });                                                 // 8425
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });                               // 8426
	         */                                                                                                           // 8427
	        init: function (cfg) {                                                                                        // 8428
	            this.cfg = this.cfg.extend(cfg);                                                                          // 8429
	        },                                                                                                            // 8430
                                                                                                                       // 8431
	        /**                                                                                                           // 8432
	         * Derives a key from a password.                                                                             // 8433
	         *                                                                                                            // 8434
	         * @param {WordArray|string} password The password.                                                           // 8435
	         * @param {WordArray|string} salt A salt.                                                                     // 8436
	         *                                                                                                            // 8437
	         * @return {WordArray} The derived key.                                                                       // 8438
	         *                                                                                                            // 8439
	         * @example                                                                                                   // 8440
	         *                                                                                                            // 8441
	         *     var key = kdf.compute(password, salt);                                                                 // 8442
	         */                                                                                                           // 8443
	        compute: function (password, salt) {                                                                          // 8444
	            // Shortcut                                                                                               // 8445
	            var cfg = this.cfg;                                                                                       // 8446
                                                                                                                       // 8447
	            // Init hasher                                                                                            // 8448
	            var hasher = cfg.hasher.create();                                                                         // 8449
                                                                                                                       // 8450
	            // Initial values                                                                                         // 8451
	            var derivedKey = WordArray.create();                                                                      // 8452
                                                                                                                       // 8453
	            // Shortcuts                                                                                              // 8454
	            var derivedKeyWords = derivedKey.words;                                                                   // 8455
	            var keySize = cfg.keySize;                                                                                // 8456
	            var iterations = cfg.iterations;                                                                          // 8457
                                                                                                                       // 8458
	            // Generate key                                                                                           // 8459
	            while (derivedKeyWords.length < keySize) {                                                                // 8460
	                if (block) {                                                                                          // 8461
	                    hasher.update(block);                                                                             // 8462
	                }                                                                                                     // 8463
	                var block = hasher.update(password).finalize(salt);                                                   // 8464
	                hasher.reset();                                                                                       // 8465
                                                                                                                       // 8466
	                // Iterations                                                                                         // 8467
	                for (var i = 1; i < iterations; i++) {                                                                // 8468
	                    block = hasher.finalize(block);                                                                   // 8469
	                    hasher.reset();                                                                                   // 8470
	                }                                                                                                     // 8471
                                                                                                                       // 8472
	                derivedKey.concat(block);                                                                             // 8473
	            }                                                                                                         // 8474
	            derivedKey.sigBytes = keySize * 4;                                                                        // 8475
                                                                                                                       // 8476
	            return derivedKey;                                                                                        // 8477
	        }                                                                                                             // 8478
	    });                                                                                                               // 8479
                                                                                                                       // 8480
	    /**                                                                                                               // 8481
	     * Derives a key from a password.                                                                                 // 8482
	     *                                                                                                                // 8483
	     * @param {WordArray|string} password The password.                                                               // 8484
	     * @param {WordArray|string} salt A salt.                                                                         // 8485
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 8486
	     *                                                                                                                // 8487
	     * @return {WordArray} The derived key.                                                                           // 8488
	     *                                                                                                                // 8489
	     * @static                                                                                                        // 8490
	     *                                                                                                                // 8491
	     * @example                                                                                                       // 8492
	     *                                                                                                                // 8493
	     *     var key = CryptoJS.EvpKDF(password, salt);                                                                 // 8494
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });                                                 // 8495
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });                               // 8496
	     */                                                                                                               // 8497
	    C.EvpKDF = function (password, salt, cfg) {                                                                       // 8498
	        return EvpKDF.create(cfg).compute(password, salt);                                                            // 8499
	    };                                                                                                                // 8500
	}());                                                                                                                 // 8501
                                                                                                                       // 8502
                                                                                                                       // 8503
	return CryptoJS.EvpKDF;                                                                                               // 8504
                                                                                                                       // 8505
}));                                                                                                                   // 8506
},{"./core":51,"./hmac":56,"./sha1":75}],55:[function(require,module,exports){                                         // 8507
;(function (root, factory, undef) {                                                                                    // 8508
	if (typeof exports === "object") {                                                                                    // 8509
		// CommonJS                                                                                                          // 8510
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 8511
	}                                                                                                                     // 8512
	else if (typeof define === "function" && define.amd) {                                                                // 8513
		// AMD                                                                                                               // 8514
		define(["./core", "./cipher-core"], factory);                                                                        // 8515
	}                                                                                                                     // 8516
	else {                                                                                                                // 8517
		// Global (browser)                                                                                                  // 8518
		factory(root.CryptoJS);                                                                                              // 8519
	}                                                                                                                     // 8520
}(this, function (CryptoJS) {                                                                                          // 8521
                                                                                                                       // 8522
	(function (undefined) {                                                                                               // 8523
	    // Shortcuts                                                                                                      // 8524
	    var C = CryptoJS;                                                                                                 // 8525
	    var C_lib = C.lib;                                                                                                // 8526
	    var CipherParams = C_lib.CipherParams;                                                                            // 8527
	    var C_enc = C.enc;                                                                                                // 8528
	    var Hex = C_enc.Hex;                                                                                              // 8529
	    var C_format = C.format;                                                                                          // 8530
                                                                                                                       // 8531
	    var HexFormatter = C_format.Hex = {                                                                               // 8532
	        /**                                                                                                           // 8533
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.                       // 8534
	         *                                                                                                            // 8535
	         * @param {CipherParams} cipherParams The cipher params object.                                               // 8536
	         *                                                                                                            // 8537
	         * @return {string} The hexadecimally encoded string.                                                         // 8538
	         *                                                                                                            // 8539
	         * @static                                                                                                    // 8540
	         *                                                                                                            // 8541
	         * @example                                                                                                   // 8542
	         *                                                                                                            // 8543
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);                                           // 8544
	         */                                                                                                           // 8545
	        stringify: function (cipherParams) {                                                                          // 8546
	            return cipherParams.ciphertext.toString(Hex);                                                             // 8547
	        },                                                                                                            // 8548
                                                                                                                       // 8549
	        /**                                                                                                           // 8550
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.                              // 8551
	         *                                                                                                            // 8552
	         * @param {string} input The hexadecimally encoded string.                                                    // 8553
	         *                                                                                                            // 8554
	         * @return {CipherParams} The cipher params object.                                                           // 8555
	         *                                                                                                            // 8556
	         * @static                                                                                                    // 8557
	         *                                                                                                            // 8558
	         * @example                                                                                                   // 8559
	         *                                                                                                            // 8560
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);                                               // 8561
	         */                                                                                                           // 8562
	        parse: function (input) {                                                                                     // 8563
	            var ciphertext = Hex.parse(input);                                                                        // 8564
	            return CipherParams.create({ ciphertext: ciphertext });                                                   // 8565
	        }                                                                                                             // 8566
	    };                                                                                                                // 8567
	}());                                                                                                                 // 8568
                                                                                                                       // 8569
                                                                                                                       // 8570
	return CryptoJS.format.Hex;                                                                                           // 8571
                                                                                                                       // 8572
}));                                                                                                                   // 8573
},{"./cipher-core":50,"./core":51}],56:[function(require,module,exports){                                              // 8574
;(function (root, factory) {                                                                                           // 8575
	if (typeof exports === "object") {                                                                                    // 8576
		// CommonJS                                                                                                          // 8577
		module.exports = exports = factory(require("./core"));                                                               // 8578
	}                                                                                                                     // 8579
	else if (typeof define === "function" && define.amd) {                                                                // 8580
		// AMD                                                                                                               // 8581
		define(["./core"], factory);                                                                                         // 8582
	}                                                                                                                     // 8583
	else {                                                                                                                // 8584
		// Global (browser)                                                                                                  // 8585
		factory(root.CryptoJS);                                                                                              // 8586
	}                                                                                                                     // 8587
}(this, function (CryptoJS) {                                                                                          // 8588
                                                                                                                       // 8589
	(function () {                                                                                                        // 8590
	    // Shortcuts                                                                                                      // 8591
	    var C = CryptoJS;                                                                                                 // 8592
	    var C_lib = C.lib;                                                                                                // 8593
	    var Base = C_lib.Base;                                                                                            // 8594
	    var C_enc = C.enc;                                                                                                // 8595
	    var Utf8 = C_enc.Utf8;                                                                                            // 8596
	    var C_algo = C.algo;                                                                                              // 8597
                                                                                                                       // 8598
	    /**                                                                                                               // 8599
	     * HMAC algorithm.                                                                                                // 8600
	     */                                                                                                               // 8601
	    var HMAC = C_algo.HMAC = Base.extend({                                                                            // 8602
	        /**                                                                                                           // 8603
	         * Initializes a newly created HMAC.                                                                          // 8604
	         *                                                                                                            // 8605
	         * @param {Hasher} hasher The hash algorithm to use.                                                          // 8606
	         * @param {WordArray|string} key The secret key.                                                              // 8607
	         *                                                                                                            // 8608
	         * @example                                                                                                   // 8609
	         *                                                                                                            // 8610
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);                                 // 8611
	         */                                                                                                           // 8612
	        init: function (hasher, key) {                                                                                // 8613
	            // Init hasher                                                                                            // 8614
	            hasher = this._hasher = new hasher.init();                                                                // 8615
                                                                                                                       // 8616
	            // Convert string to WordArray, else assume WordArray already                                             // 8617
	            if (typeof key == 'string') {                                                                             // 8618
	                key = Utf8.parse(key);                                                                                // 8619
	            }                                                                                                         // 8620
                                                                                                                       // 8621
	            // Shortcuts                                                                                              // 8622
	            var hasherBlockSize = hasher.blockSize;                                                                   // 8623
	            var hasherBlockSizeBytes = hasherBlockSize * 4;                                                           // 8624
                                                                                                                       // 8625
	            // Allow arbitrary length keys                                                                            // 8626
	            if (key.sigBytes > hasherBlockSizeBytes) {                                                                // 8627
	                key = hasher.finalize(key);                                                                           // 8628
	            }                                                                                                         // 8629
                                                                                                                       // 8630
	            // Clamp excess bits                                                                                      // 8631
	            key.clamp();                                                                                              // 8632
                                                                                                                       // 8633
	            // Clone key for inner and outer pads                                                                     // 8634
	            var oKey = this._oKey = key.clone();                                                                      // 8635
	            var iKey = this._iKey = key.clone();                                                                      // 8636
                                                                                                                       // 8637
	            // Shortcuts                                                                                              // 8638
	            var oKeyWords = oKey.words;                                                                               // 8639
	            var iKeyWords = iKey.words;                                                                               // 8640
                                                                                                                       // 8641
	            // XOR keys with pad constants                                                                            // 8642
	            for (var i = 0; i < hasherBlockSize; i++) {                                                               // 8643
	                oKeyWords[i] ^= 0x5c5c5c5c;                                                                           // 8644
	                iKeyWords[i] ^= 0x36363636;                                                                           // 8645
	            }                                                                                                         // 8646
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;                                                     // 8647
                                                                                                                       // 8648
	            // Set initial values                                                                                     // 8649
	            this.reset();                                                                                             // 8650
	        },                                                                                                            // 8651
                                                                                                                       // 8652
	        /**                                                                                                           // 8653
	         * Resets this HMAC to its initial state.                                                                     // 8654
	         *                                                                                                            // 8655
	         * @example                                                                                                   // 8656
	         *                                                                                                            // 8657
	         *     hmacHasher.reset();                                                                                    // 8658
	         */                                                                                                           // 8659
	        reset: function () {                                                                                          // 8660
	            // Shortcut                                                                                               // 8661
	            var hasher = this._hasher;                                                                                // 8662
                                                                                                                       // 8663
	            // Reset                                                                                                  // 8664
	            hasher.reset();                                                                                           // 8665
	            hasher.update(this._iKey);                                                                                // 8666
	        },                                                                                                            // 8667
                                                                                                                       // 8668
	        /**                                                                                                           // 8669
	         * Updates this HMAC with a message.                                                                          // 8670
	         *                                                                                                            // 8671
	         * @param {WordArray|string} messageUpdate The message to append.                                             // 8672
	         *                                                                                                            // 8673
	         * @return {HMAC} This HMAC instance.                                                                         // 8674
	         *                                                                                                            // 8675
	         * @example                                                                                                   // 8676
	         *                                                                                                            // 8677
	         *     hmacHasher.update('message');                                                                          // 8678
	         *     hmacHasher.update(wordArray);                                                                          // 8679
	         */                                                                                                           // 8680
	        update: function (messageUpdate) {                                                                            // 8681
	            this._hasher.update(messageUpdate);                                                                       // 8682
                                                                                                                       // 8683
	            // Chainable                                                                                              // 8684
	            return this;                                                                                              // 8685
	        },                                                                                                            // 8686
                                                                                                                       // 8687
	        /**                                                                                                           // 8688
	         * Finalizes the HMAC computation.                                                                            // 8689
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 8690
	         *                                                                                                            // 8691
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 8692
	         *                                                                                                            // 8693
	         * @return {WordArray} The HMAC.                                                                              // 8694
	         *                                                                                                            // 8695
	         * @example                                                                                                   // 8696
	         *                                                                                                            // 8697
	         *     var hmac = hmacHasher.finalize();                                                                      // 8698
	         *     var hmac = hmacHasher.finalize('message');                                                             // 8699
	         *     var hmac = hmacHasher.finalize(wordArray);                                                             // 8700
	         */                                                                                                           // 8701
	        finalize: function (messageUpdate) {                                                                          // 8702
	            // Shortcut                                                                                               // 8703
	            var hasher = this._hasher;                                                                                // 8704
                                                                                                                       // 8705
	            // Compute HMAC                                                                                           // 8706
	            var innerHash = hasher.finalize(messageUpdate);                                                           // 8707
	            hasher.reset();                                                                                           // 8708
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));                                         // 8709
                                                                                                                       // 8710
	            return hmac;                                                                                              // 8711
	        }                                                                                                             // 8712
	    });                                                                                                               // 8713
	}());                                                                                                                 // 8714
                                                                                                                       // 8715
                                                                                                                       // 8716
}));                                                                                                                   // 8717
},{"./core":51}],57:[function(require,module,exports){                                                                 // 8718
;(function (root, factory, undef) {                                                                                    // 8719
	if (typeof exports === "object") {                                                                                    // 8720
		// CommonJS                                                                                                          // 8721
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
	}                                                                                                                     // 8723
	else if (typeof define === "function" && define.amd) {                                                                // 8724
		// AMD                                                                                                               // 8725
		define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
	}                                                                                                                     // 8727
	else {                                                                                                                // 8728
		// Global (browser)                                                                                                  // 8729
		root.CryptoJS = factory(root.CryptoJS);                                                                              // 8730
	}                                                                                                                     // 8731
}(this, function (CryptoJS) {                                                                                          // 8732
                                                                                                                       // 8733
	return CryptoJS;                                                                                                      // 8734
                                                                                                                       // 8735
}));                                                                                                                   // 8736
},{"./aes":49,"./cipher-core":50,"./core":51,"./enc-base64":52,"./enc-utf16":53,"./evpkdf":54,"./format-hex":55,"./hmac":56,"./lib-typedarrays":58,"./md5":59,"./mode-cfb":60,"./mode-ctr":62,"./mode-ctr-gladman":61,"./mode-ecb":63,"./mode-ofb":64,"./pad-ansix923":65,"./pad-iso10126":66,"./pad-iso97971":67,"./pad-nopadding":68,"./pad-zeropadding":69,"./pbkdf2":70,"./rabbit":72,"./rabbit-legacy":71,"./rc4":73,"./ripemd160":74,"./sha1":75,"./sha224":76,"./sha256":77,"./sha3":78,"./sha384":79,"./sha512":80,"./tripledes":81,"./x64-core":82}],58:[function(require,module,exports){
;(function (root, factory) {                                                                                           // 8738
	if (typeof exports === "object") {                                                                                    // 8739
		// CommonJS                                                                                                          // 8740
		module.exports = exports = factory(require("./core"));                                                               // 8741
	}                                                                                                                     // 8742
	else if (typeof define === "function" && define.amd) {                                                                // 8743
		// AMD                                                                                                               // 8744
		define(["./core"], factory);                                                                                         // 8745
	}                                                                                                                     // 8746
	else {                                                                                                                // 8747
		// Global (browser)                                                                                                  // 8748
		factory(root.CryptoJS);                                                                                              // 8749
	}                                                                                                                     // 8750
}(this, function (CryptoJS) {                                                                                          // 8751
                                                                                                                       // 8752
	(function () {                                                                                                        // 8753
	    // Check if typed arrays are supported                                                                            // 8754
	    if (typeof ArrayBuffer != 'function') {                                                                           // 8755
	        return;                                                                                                       // 8756
	    }                                                                                                                 // 8757
                                                                                                                       // 8758
	    // Shortcuts                                                                                                      // 8759
	    var C = CryptoJS;                                                                                                 // 8760
	    var C_lib = C.lib;                                                                                                // 8761
	    var WordArray = C_lib.WordArray;                                                                                  // 8762
                                                                                                                       // 8763
	    // Reference original init                                                                                        // 8764
	    var superInit = WordArray.init;                                                                                   // 8765
                                                                                                                       // 8766
	    // Augment WordArray.init to handle typed arrays                                                                  // 8767
	    var subInit = WordArray.init = function (typedArray) {                                                            // 8768
	        // Convert buffers to uint8                                                                                   // 8769
	        if (typedArray instanceof ArrayBuffer) {                                                                      // 8770
	            typedArray = new Uint8Array(typedArray);                                                                  // 8771
	        }                                                                                                             // 8772
                                                                                                                       // 8773
	        // Convert other array views to uint8                                                                         // 8774
	        if (                                                                                                          // 8775
	            typedArray instanceof Int8Array ||                                                                        // 8776
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||                  // 8777
	            typedArray instanceof Int16Array ||                                                                       // 8778
	            typedArray instanceof Uint16Array ||                                                                      // 8779
	            typedArray instanceof Int32Array ||                                                                       // 8780
	            typedArray instanceof Uint32Array ||                                                                      // 8781
	            typedArray instanceof Float32Array ||                                                                     // 8782
	            typedArray instanceof Float64Array                                                                        // 8783
	        ) {                                                                                                           // 8784
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);             // 8785
	        }                                                                                                             // 8786
                                                                                                                       // 8787
	        // Handle Uint8Array                                                                                          // 8788
	        if (typedArray instanceof Uint8Array) {                                                                       // 8789
	            // Shortcut                                                                                               // 8790
	            var typedArrayByteLength = typedArray.byteLength;                                                         // 8791
                                                                                                                       // 8792
	            // Extract bytes                                                                                          // 8793
	            var words = [];                                                                                           // 8794
	            for (var i = 0; i < typedArrayByteLength; i++) {                                                          // 8795
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);                                                // 8796
	            }                                                                                                         // 8797
                                                                                                                       // 8798
	            // Initialize this word array                                                                             // 8799
	            superInit.call(this, words, typedArrayByteLength);                                                        // 8800
	        } else {                                                                                                      // 8801
	            // Else call normal init                                                                                  // 8802
	            superInit.apply(this, arguments);                                                                         // 8803
	        }                                                                                                             // 8804
	    };                                                                                                                // 8805
                                                                                                                       // 8806
	    subInit.prototype = WordArray;                                                                                    // 8807
	}());                                                                                                                 // 8808
                                                                                                                       // 8809
                                                                                                                       // 8810
	return CryptoJS.lib.WordArray;                                                                                        // 8811
                                                                                                                       // 8812
}));                                                                                                                   // 8813
},{"./core":51}],59:[function(require,module,exports){                                                                 // 8814
;(function (root, factory) {                                                                                           // 8815
	if (typeof exports === "object") {                                                                                    // 8816
		// CommonJS                                                                                                          // 8817
		module.exports = exports = factory(require("./core"));                                                               // 8818
	}                                                                                                                     // 8819
	else if (typeof define === "function" && define.amd) {                                                                // 8820
		// AMD                                                                                                               // 8821
		define(["./core"], factory);                                                                                         // 8822
	}                                                                                                                     // 8823
	else {                                                                                                                // 8824
		// Global (browser)                                                                                                  // 8825
		factory(root.CryptoJS);                                                                                              // 8826
	}                                                                                                                     // 8827
}(this, function (CryptoJS) {                                                                                          // 8828
                                                                                                                       // 8829
	(function (Math) {                                                                                                    // 8830
	    // Shortcuts                                                                                                      // 8831
	    var C = CryptoJS;                                                                                                 // 8832
	    var C_lib = C.lib;                                                                                                // 8833
	    var WordArray = C_lib.WordArray;                                                                                  // 8834
	    var Hasher = C_lib.Hasher;                                                                                        // 8835
	    var C_algo = C.algo;                                                                                              // 8836
                                                                                                                       // 8837
	    // Constants table                                                                                                // 8838
	    var T = [];                                                                                                       // 8839
                                                                                                                       // 8840
	    // Compute constants                                                                                              // 8841
	    (function () {                                                                                                    // 8842
	        for (var i = 0; i < 64; i++) {                                                                                // 8843
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;                                                     // 8844
	        }                                                                                                             // 8845
	    }());                                                                                                             // 8846
                                                                                                                       // 8847
	    /**                                                                                                               // 8848
	     * MD5 hash algorithm.                                                                                            // 8849
	     */                                                                                                               // 8850
	    var MD5 = C_algo.MD5 = Hasher.extend({                                                                            // 8851
	        _doReset: function () {                                                                                       // 8852
	            this._hash = new WordArray.init([                                                                         // 8853
	                0x67452301, 0xefcdab89,                                                                               // 8854
	                0x98badcfe, 0x10325476                                                                                // 8855
	            ]);                                                                                                       // 8856
	        },                                                                                                            // 8857
                                                                                                                       // 8858
	        _doProcessBlock: function (M, offset) {                                                                       // 8859
	            // Swap endian                                                                                            // 8860
	            for (var i = 0; i < 16; i++) {                                                                            // 8861
	                // Shortcuts                                                                                          // 8862
	                var offset_i = offset + i;                                                                            // 8863
	                var M_offset_i = M[offset_i];                                                                         // 8864
                                                                                                                       // 8865
	                M[offset_i] = (                                                                                       // 8866
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 8867
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 8868
	                );                                                                                                    // 8869
	            }                                                                                                         // 8870
                                                                                                                       // 8871
	            // Shortcuts                                                                                              // 8872
	            var H = this._hash.words;                                                                                 // 8873
                                                                                                                       // 8874
	            var M_offset_0  = M[offset + 0];                                                                          // 8875
	            var M_offset_1  = M[offset + 1];                                                                          // 8876
	            var M_offset_2  = M[offset + 2];                                                                          // 8877
	            var M_offset_3  = M[offset + 3];                                                                          // 8878
	            var M_offset_4  = M[offset + 4];                                                                          // 8879
	            var M_offset_5  = M[offset + 5];                                                                          // 8880
	            var M_offset_6  = M[offset + 6];                                                                          // 8881
	            var M_offset_7  = M[offset + 7];                                                                          // 8882
	            var M_offset_8  = M[offset + 8];                                                                          // 8883
	            var M_offset_9  = M[offset + 9];                                                                          // 8884
	            var M_offset_10 = M[offset + 10];                                                                         // 8885
	            var M_offset_11 = M[offset + 11];                                                                         // 8886
	            var M_offset_12 = M[offset + 12];                                                                         // 8887
	            var M_offset_13 = M[offset + 13];                                                                         // 8888
	            var M_offset_14 = M[offset + 14];                                                                         // 8889
	            var M_offset_15 = M[offset + 15];                                                                         // 8890
                                                                                                                       // 8891
	            // Working varialbes                                                                                      // 8892
	            var a = H[0];                                                                                             // 8893
	            var b = H[1];                                                                                             // 8894
	            var c = H[2];                                                                                             // 8895
	            var d = H[3];                                                                                             // 8896
                                                                                                                       // 8897
	            // Computation                                                                                            // 8898
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);                                                                // 8899
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);                                                                // 8900
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);                                                                // 8901
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);                                                                // 8902
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);                                                                // 8903
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);                                                                // 8904
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);                                                                // 8905
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);                                                                // 8906
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);                                                                // 8907
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);                                                                // 8908
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);                                                               // 8909
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);                                                               // 8910
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);                                                               // 8911
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);                                                               // 8912
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);                                                               // 8913
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);                                                               // 8914
                                                                                                                       // 8915
	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);                                                               // 8916
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);                                                               // 8917
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);                                                               // 8918
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);                                                               // 8919
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);                                                               // 8920
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);                                                               // 8921
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);                                                               // 8922
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);                                                               // 8923
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);                                                               // 8924
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);                                                               // 8925
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);                                                               // 8926
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);                                                               // 8927
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);                                                               // 8928
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);                                                               // 8929
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);                                                               // 8930
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);                                                               // 8931
                                                                                                                       // 8932
	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);                                                               // 8933
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);                                                               // 8934
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);                                                               // 8935
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);                                                               // 8936
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);                                                               // 8937
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);                                                               // 8938
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);                                                               // 8939
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);                                                               // 8940
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);                                                               // 8941
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);                                                               // 8942
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);                                                               // 8943
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);                                                               // 8944
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);                                                               // 8945
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);                                                               // 8946
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);                                                               // 8947
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);                                                               // 8948
                                                                                                                       // 8949
	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);                                                               // 8950
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);                                                               // 8951
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);                                                               // 8952
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);                                                               // 8953
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);                                                               // 8954
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);                                                               // 8955
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);                                                               // 8956
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);                                                               // 8957
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);                                                               // 8958
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);                                                               // 8959
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);                                                               // 8960
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);                                                               // 8961
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);                                                               // 8962
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);                                                               // 8963
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);                                                               // 8964
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);                                                               // 8965
                                                                                                                       // 8966
	            // Intermediate hash value                                                                                // 8967
	            H[0] = (H[0] + a) | 0;                                                                                    // 8968
	            H[1] = (H[1] + b) | 0;                                                                                    // 8969
	            H[2] = (H[2] + c) | 0;                                                                                    // 8970
	            H[3] = (H[3] + d) | 0;                                                                                    // 8971
	        },                                                                                                            // 8972
                                                                                                                       // 8973
	        _doFinalize: function () {                                                                                    // 8974
	            // Shortcuts                                                                                              // 8975
	            var data = this._data;                                                                                    // 8976
	            var dataWords = data.words;                                                                               // 8977
                                                                                                                       // 8978
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 8979
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 8980
                                                                                                                       // 8981
	            // Add padding                                                                                            // 8982
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 8983
                                                                                                                       // 8984
	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);                                                   // 8985
	            var nBitsTotalL = nBitsTotal;                                                                             // 8986
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (                                                       // 8987
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |                                         // 8988
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)                                           // 8989
	            );                                                                                                        // 8990
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 8991
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |                                         // 8992
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)                                           // 8993
	            );                                                                                                        // 8994
                                                                                                                       // 8995
	            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 8996
                                                                                                                       // 8997
	            // Hash final blocks                                                                                      // 8998
	            this._process();                                                                                          // 8999
                                                                                                                       // 9000
	            // Shortcuts                                                                                              // 9001
	            var hash = this._hash;                                                                                    // 9002
	            var H = hash.words;                                                                                       // 9003
                                                                                                                       // 9004
	            // Swap endian                                                                                            // 9005
	            for (var i = 0; i < 4; i++) {                                                                             // 9006
	                // Shortcut                                                                                           // 9007
	                var H_i = H[i];                                                                                       // 9008
                                                                                                                       // 9009
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 9010
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 9011
	            }                                                                                                         // 9012
                                                                                                                       // 9013
	            // Return final computed hash                                                                             // 9014
	            return hash;                                                                                              // 9015
	        },                                                                                                            // 9016
                                                                                                                       // 9017
	        clone: function () {                                                                                          // 9018
	            var clone = Hasher.clone.call(this);                                                                      // 9019
	            clone._hash = this._hash.clone();                                                                         // 9020
                                                                                                                       // 9021
	            return clone;                                                                                             // 9022
	        }                                                                                                             // 9023
	    });                                                                                                               // 9024
                                                                                                                       // 9025
	    function FF(a, b, c, d, x, s, t) {                                                                                // 9026
	        var n = a + ((b & c) | (~b & d)) + x + t;                                                                     // 9027
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9028
	    }                                                                                                                 // 9029
                                                                                                                       // 9030
	    function GG(a, b, c, d, x, s, t) {                                                                                // 9031
	        var n = a + ((b & d) | (c & ~d)) + x + t;                                                                     // 9032
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9033
	    }                                                                                                                 // 9034
                                                                                                                       // 9035
	    function HH(a, b, c, d, x, s, t) {                                                                                // 9036
	        var n = a + (b ^ c ^ d) + x + t;                                                                              // 9037
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9038
	    }                                                                                                                 // 9039
                                                                                                                       // 9040
	    function II(a, b, c, d, x, s, t) {                                                                                // 9041
	        var n = a + (c ^ (b | ~d)) + x + t;                                                                           // 9042
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9043
	    }                                                                                                                 // 9044
                                                                                                                       // 9045
	    /**                                                                                                               // 9046
	     * Shortcut function to the hasher's object interface.                                                            // 9047
	     *                                                                                                                // 9048
	     * @param {WordArray|string} message The message to hash.                                                         // 9049
	     *                                                                                                                // 9050
	     * @return {WordArray} The hash.                                                                                  // 9051
	     *                                                                                                                // 9052
	     * @static                                                                                                        // 9053
	     *                                                                                                                // 9054
	     * @example                                                                                                       // 9055
	     *                                                                                                                // 9056
	     *     var hash = CryptoJS.MD5('message');                                                                        // 9057
	     *     var hash = CryptoJS.MD5(wordArray);                                                                        // 9058
	     */                                                                                                               // 9059
	    C.MD5 = Hasher._createHelper(MD5);                                                                                // 9060
                                                                                                                       // 9061
	    /**                                                                                                               // 9062
	     * Shortcut function to the HMAC's object interface.                                                              // 9063
	     *                                                                                                                // 9064
	     * @param {WordArray|string} message The message to hash.                                                         // 9065
	     * @param {WordArray|string} key The secret key.                                                                  // 9066
	     *                                                                                                                // 9067
	     * @return {WordArray} The HMAC.                                                                                  // 9068
	     *                                                                                                                // 9069
	     * @static                                                                                                        // 9070
	     *                                                                                                                // 9071
	     * @example                                                                                                       // 9072
	     *                                                                                                                // 9073
	     *     var hmac = CryptoJS.HmacMD5(message, key);                                                                 // 9074
	     */                                                                                                               // 9075
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);                                                                        // 9076
	}(Math));                                                                                                             // 9077
                                                                                                                       // 9078
                                                                                                                       // 9079
	return CryptoJS.MD5;                                                                                                  // 9080
                                                                                                                       // 9081
}));                                                                                                                   // 9082
},{"./core":51}],60:[function(require,module,exports){                                                                 // 9083
;(function (root, factory, undef) {                                                                                    // 9084
	if (typeof exports === "object") {                                                                                    // 9085
		// CommonJS                                                                                                          // 9086
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9087
	}                                                                                                                     // 9088
	else if (typeof define === "function" && define.amd) {                                                                // 9089
		// AMD                                                                                                               // 9090
		define(["./core", "./cipher-core"], factory);                                                                        // 9091
	}                                                                                                                     // 9092
	else {                                                                                                                // 9093
		// Global (browser)                                                                                                  // 9094
		factory(root.CryptoJS);                                                                                              // 9095
	}                                                                                                                     // 9096
}(this, function (CryptoJS) {                                                                                          // 9097
                                                                                                                       // 9098
	/**                                                                                                                   // 9099
	 * Cipher Feedback block mode.                                                                                        // 9100
	 */                                                                                                                   // 9101
	CryptoJS.mode.CFB = (function () {                                                                                    // 9102
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9103
                                                                                                                       // 9104
	    CFB.Encryptor = CFB.extend({                                                                                      // 9105
	        processBlock: function (words, offset) {                                                                      // 9106
	            // Shortcuts                                                                                              // 9107
	            var cipher = this._cipher;                                                                                // 9108
	            var blockSize = cipher.blockSize;                                                                         // 9109
                                                                                                                       // 9110
	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9111
                                                                                                                       // 9112
	            // Remember this block to use with next block                                                             // 9113
	            this._prevBlock = words.slice(offset, offset + blockSize);                                                // 9114
	        }                                                                                                             // 9115
	    });                                                                                                               // 9116
                                                                                                                       // 9117
	    CFB.Decryptor = CFB.extend({                                                                                      // 9118
	        processBlock: function (words, offset) {                                                                      // 9119
	            // Shortcuts                                                                                              // 9120
	            var cipher = this._cipher;                                                                                // 9121
	            var blockSize = cipher.blockSize;                                                                         // 9122
                                                                                                                       // 9123
	            // Remember this block to use with next block                                                             // 9124
	            var thisBlock = words.slice(offset, offset + blockSize);                                                  // 9125
                                                                                                                       // 9126
	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9127
                                                                                                                       // 9128
	            // This block becomes the previous block                                                                  // 9129
	            this._prevBlock = thisBlock;                                                                              // 9130
	        }                                                                                                             // 9131
	    });                                                                                                               // 9132
                                                                                                                       // 9133
	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {                                          // 9134
	        // Shortcut                                                                                                   // 9135
	        var iv = this._iv;                                                                                            // 9136
                                                                                                                       // 9137
	        // Generate keystream                                                                                         // 9138
	        if (iv) {                                                                                                     // 9139
	            var keystream = iv.slice(0);                                                                              // 9140
                                                                                                                       // 9141
	            // Remove IV for subsequent blocks                                                                        // 9142
	            this._iv = undefined;                                                                                     // 9143
	        } else {                                                                                                      // 9144
	            var keystream = this._prevBlock;                                                                          // 9145
	        }                                                                                                             // 9146
	        cipher.encryptBlock(keystream, 0);                                                                            // 9147
                                                                                                                       // 9148
	        // Encrypt                                                                                                    // 9149
	        for (var i = 0; i < blockSize; i++) {                                                                         // 9150
	            words[offset + i] ^= keystream[i];                                                                        // 9151
	        }                                                                                                             // 9152
	    }                                                                                                                 // 9153
                                                                                                                       // 9154
	    return CFB;                                                                                                       // 9155
	}());                                                                                                                 // 9156
                                                                                                                       // 9157
                                                                                                                       // 9158
	return CryptoJS.mode.CFB;                                                                                             // 9159
                                                                                                                       // 9160
}));                                                                                                                   // 9161
},{"./cipher-core":50,"./core":51}],61:[function(require,module,exports){                                              // 9162
;(function (root, factory, undef) {                                                                                    // 9163
	if (typeof exports === "object") {                                                                                    // 9164
		// CommonJS                                                                                                          // 9165
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9166
	}                                                                                                                     // 9167
	else if (typeof define === "function" && define.amd) {                                                                // 9168
		// AMD                                                                                                               // 9169
		define(["./core", "./cipher-core"], factory);                                                                        // 9170
	}                                                                                                                     // 9171
	else {                                                                                                                // 9172
		// Global (browser)                                                                                                  // 9173
		factory(root.CryptoJS);                                                                                              // 9174
	}                                                                                                                     // 9175
}(this, function (CryptoJS) {                                                                                          // 9176
                                                                                                                       // 9177
	/** @preserve                                                                                                         // 9178
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c                                                     // 9179
	 * derived from CryptoJS.mode.CTR                                                                                     // 9180
	 * Jan Hruby jhruby.web@gmail.com                                                                                     // 9181
	 */                                                                                                                   // 9182
	CryptoJS.mode.CTRGladman = (function () {                                                                             // 9183
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();                                                           // 9184
                                                                                                                       // 9185
		function incWord(word)                                                                                               // 9186
		{                                                                                                                    // 9187
			if (((word >> 24) & 0xff) === 0xff) { //overflow                                                                    // 9188
			var b1 = (word >> 16)&0xff;                                                                                         // 9189
			var b2 = (word >> 8)&0xff;                                                                                          // 9190
			var b3 = word & 0xff;                                                                                               // 9191
                                                                                                                       // 9192
			if (b1 === 0xff) // overflow b1                                                                                     // 9193
			{                                                                                                                   // 9194
			b1 = 0;                                                                                                             // 9195
			if (b2 === 0xff)                                                                                                    // 9196
			{                                                                                                                   // 9197
				b2 = 0;                                                                                                            // 9198
				if (b3 === 0xff)                                                                                                   // 9199
				{                                                                                                                  // 9200
					b3 = 0;                                                                                                           // 9201
				}                                                                                                                  // 9202
				else                                                                                                               // 9203
				{                                                                                                                  // 9204
					++b3;                                                                                                             // 9205
				}                                                                                                                  // 9206
			}                                                                                                                   // 9207
			else                                                                                                                // 9208
			{                                                                                                                   // 9209
				++b2;                                                                                                              // 9210
			}                                                                                                                   // 9211
			}                                                                                                                   // 9212
			else                                                                                                                // 9213
			{                                                                                                                   // 9214
			++b1;                                                                                                               // 9215
			}                                                                                                                   // 9216
                                                                                                                       // 9217
			word = 0;                                                                                                           // 9218
			word += (b1 << 16);                                                                                                 // 9219
			word += (b2 << 8);                                                                                                  // 9220
			word += b3;                                                                                                         // 9221
			}                                                                                                                   // 9222
			else                                                                                                                // 9223
			{                                                                                                                   // 9224
			word += (0x01 << 24);                                                                                               // 9225
			}                                                                                                                   // 9226
			return word;                                                                                                        // 9227
		}                                                                                                                    // 9228
                                                                                                                       // 9229
		function incCounter(counter)                                                                                         // 9230
		{                                                                                                                    // 9231
			if ((counter[0] = incWord(counter[0])) === 0)                                                                       // 9232
			{                                                                                                                   // 9233
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8                                    // 9234
				counter[1] = incWord(counter[1]);                                                                                  // 9235
			}                                                                                                                   // 9236
			return counter;                                                                                                     // 9237
		}                                                                                                                    // 9238
                                                                                                                       // 9239
	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({                                                        // 9240
	        processBlock: function (words, offset) {                                                                      // 9241
	            // Shortcuts                                                                                              // 9242
	            var cipher = this._cipher                                                                                 // 9243
	            var blockSize = cipher.blockSize;                                                                         // 9244
	            var iv = this._iv;                                                                                        // 9245
	            var counter = this._counter;                                                                              // 9246
                                                                                                                       // 9247
	            // Generate keystream                                                                                     // 9248
	            if (iv) {                                                                                                 // 9249
	                counter = this._counter = iv.slice(0);                                                                // 9250
                                                                                                                       // 9251
	                // Remove IV for subsequent blocks                                                                    // 9252
	                this._iv = undefined;                                                                                 // 9253
	            }                                                                                                         // 9254
                                                                                                                       // 9255
				incCounter(counter);                                                                                               // 9256
                                                                                                                       // 9257
				var keystream = counter.slice(0);                                                                                  // 9258
	            cipher.encryptBlock(keystream, 0);                                                                        // 9259
                                                                                                                       // 9260
	            // Encrypt                                                                                                // 9261
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9262
	                words[offset + i] ^= keystream[i];                                                                    // 9263
	            }                                                                                                         // 9264
	        }                                                                                                             // 9265
	    });                                                                                                               // 9266
                                                                                                                       // 9267
	    CTRGladman.Decryptor = Encryptor;                                                                                 // 9268
                                                                                                                       // 9269
	    return CTRGladman;                                                                                                // 9270
	}());                                                                                                                 // 9271
                                                                                                                       // 9272
                                                                                                                       // 9273
                                                                                                                       // 9274
                                                                                                                       // 9275
	return CryptoJS.mode.CTRGladman;                                                                                      // 9276
                                                                                                                       // 9277
}));                                                                                                                   // 9278
},{"./cipher-core":50,"./core":51}],62:[function(require,module,exports){                                              // 9279
;(function (root, factory, undef) {                                                                                    // 9280
	if (typeof exports === "object") {                                                                                    // 9281
		// CommonJS                                                                                                          // 9282
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9283
	}                                                                                                                     // 9284
	else if (typeof define === "function" && define.amd) {                                                                // 9285
		// AMD                                                                                                               // 9286
		define(["./core", "./cipher-core"], factory);                                                                        // 9287
	}                                                                                                                     // 9288
	else {                                                                                                                // 9289
		// Global (browser)                                                                                                  // 9290
		factory(root.CryptoJS);                                                                                              // 9291
	}                                                                                                                     // 9292
}(this, function (CryptoJS) {                                                                                          // 9293
                                                                                                                       // 9294
	/**                                                                                                                   // 9295
	 * Counter block mode.                                                                                                // 9296
	 */                                                                                                                   // 9297
	CryptoJS.mode.CTR = (function () {                                                                                    // 9298
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9299
                                                                                                                       // 9300
	    var Encryptor = CTR.Encryptor = CTR.extend({                                                                      // 9301
	        processBlock: function (words, offset) {                                                                      // 9302
	            // Shortcuts                                                                                              // 9303
	            var cipher = this._cipher                                                                                 // 9304
	            var blockSize = cipher.blockSize;                                                                         // 9305
	            var iv = this._iv;                                                                                        // 9306
	            var counter = this._counter;                                                                              // 9307
                                                                                                                       // 9308
	            // Generate keystream                                                                                     // 9309
	            if (iv) {                                                                                                 // 9310
	                counter = this._counter = iv.slice(0);                                                                // 9311
                                                                                                                       // 9312
	                // Remove IV for subsequent blocks                                                                    // 9313
	                this._iv = undefined;                                                                                 // 9314
	            }                                                                                                         // 9315
	            var keystream = counter.slice(0);                                                                         // 9316
	            cipher.encryptBlock(keystream, 0);                                                                        // 9317
                                                                                                                       // 9318
	            // Increment counter                                                                                      // 9319
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0                                                 // 9320
                                                                                                                       // 9321
	            // Encrypt                                                                                                // 9322
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9323
	                words[offset + i] ^= keystream[i];                                                                    // 9324
	            }                                                                                                         // 9325
	        }                                                                                                             // 9326
	    });                                                                                                               // 9327
                                                                                                                       // 9328
	    CTR.Decryptor = Encryptor;                                                                                        // 9329
                                                                                                                       // 9330
	    return CTR;                                                                                                       // 9331
	}());                                                                                                                 // 9332
                                                                                                                       // 9333
                                                                                                                       // 9334
	return CryptoJS.mode.CTR;                                                                                             // 9335
                                                                                                                       // 9336
}));                                                                                                                   // 9337
},{"./cipher-core":50,"./core":51}],63:[function(require,module,exports){                                              // 9338
;(function (root, factory, undef) {                                                                                    // 9339
	if (typeof exports === "object") {                                                                                    // 9340
		// CommonJS                                                                                                          // 9341
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9342
	}                                                                                                                     // 9343
	else if (typeof define === "function" && define.amd) {                                                                // 9344
		// AMD                                                                                                               // 9345
		define(["./core", "./cipher-core"], factory);                                                                        // 9346
	}                                                                                                                     // 9347
	else {                                                                                                                // 9348
		// Global (browser)                                                                                                  // 9349
		factory(root.CryptoJS);                                                                                              // 9350
	}                                                                                                                     // 9351
}(this, function (CryptoJS) {                                                                                          // 9352
                                                                                                                       // 9353
	/**                                                                                                                   // 9354
	 * Electronic Codebook block mode.                                                                                    // 9355
	 */                                                                                                                   // 9356
	CryptoJS.mode.ECB = (function () {                                                                                    // 9357
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9358
                                                                                                                       // 9359
	    ECB.Encryptor = ECB.extend({                                                                                      // 9360
	        processBlock: function (words, offset) {                                                                      // 9361
	            this._cipher.encryptBlock(words, offset);                                                                 // 9362
	        }                                                                                                             // 9363
	    });                                                                                                               // 9364
                                                                                                                       // 9365
	    ECB.Decryptor = ECB.extend({                                                                                      // 9366
	        processBlock: function (words, offset) {                                                                      // 9367
	            this._cipher.decryptBlock(words, offset);                                                                 // 9368
	        }                                                                                                             // 9369
	    });                                                                                                               // 9370
                                                                                                                       // 9371
	    return ECB;                                                                                                       // 9372
	}());                                                                                                                 // 9373
                                                                                                                       // 9374
                                                                                                                       // 9375
	return CryptoJS.mode.ECB;                                                                                             // 9376
                                                                                                                       // 9377
}));                                                                                                                   // 9378
},{"./cipher-core":50,"./core":51}],64:[function(require,module,exports){                                              // 9379
;(function (root, factory, undef) {                                                                                    // 9380
	if (typeof exports === "object") {                                                                                    // 9381
		// CommonJS                                                                                                          // 9382
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9383
	}                                                                                                                     // 9384
	else if (typeof define === "function" && define.amd) {                                                                // 9385
		// AMD                                                                                                               // 9386
		define(["./core", "./cipher-core"], factory);                                                                        // 9387
	}                                                                                                                     // 9388
	else {                                                                                                                // 9389
		// Global (browser)                                                                                                  // 9390
		factory(root.CryptoJS);                                                                                              // 9391
	}                                                                                                                     // 9392
}(this, function (CryptoJS) {                                                                                          // 9393
                                                                                                                       // 9394
	/**                                                                                                                   // 9395
	 * Output Feedback block mode.                                                                                        // 9396
	 */                                                                                                                   // 9397
	CryptoJS.mode.OFB = (function () {                                                                                    // 9398
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9399
                                                                                                                       // 9400
	    var Encryptor = OFB.Encryptor = OFB.extend({                                                                      // 9401
	        processBlock: function (words, offset) {                                                                      // 9402
	            // Shortcuts                                                                                              // 9403
	            var cipher = this._cipher                                                                                 // 9404
	            var blockSize = cipher.blockSize;                                                                         // 9405
	            var iv = this._iv;                                                                                        // 9406
	            var keystream = this._keystream;                                                                          // 9407
                                                                                                                       // 9408
	            // Generate keystream                                                                                     // 9409
	            if (iv) {                                                                                                 // 9410
	                keystream = this._keystream = iv.slice(0);                                                            // 9411
                                                                                                                       // 9412
	                // Remove IV for subsequent blocks                                                                    // 9413
	                this._iv = undefined;                                                                                 // 9414
	            }                                                                                                         // 9415
	            cipher.encryptBlock(keystream, 0);                                                                        // 9416
                                                                                                                       // 9417
	            // Encrypt                                                                                                // 9418
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9419
	                words[offset + i] ^= keystream[i];                                                                    // 9420
	            }                                                                                                         // 9421
	        }                                                                                                             // 9422
	    });                                                                                                               // 9423
                                                                                                                       // 9424
	    OFB.Decryptor = Encryptor;                                                                                        // 9425
                                                                                                                       // 9426
	    return OFB;                                                                                                       // 9427
	}());                                                                                                                 // 9428
                                                                                                                       // 9429
                                                                                                                       // 9430
	return CryptoJS.mode.OFB;                                                                                             // 9431
                                                                                                                       // 9432
}));                                                                                                                   // 9433
},{"./cipher-core":50,"./core":51}],65:[function(require,module,exports){                                              // 9434
;(function (root, factory, undef) {                                                                                    // 9435
	if (typeof exports === "object") {                                                                                    // 9436
		// CommonJS                                                                                                          // 9437
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9438
	}                                                                                                                     // 9439
	else if (typeof define === "function" && define.amd) {                                                                // 9440
		// AMD                                                                                                               // 9441
		define(["./core", "./cipher-core"], factory);                                                                        // 9442
	}                                                                                                                     // 9443
	else {                                                                                                                // 9444
		// Global (browser)                                                                                                  // 9445
		factory(root.CryptoJS);                                                                                              // 9446
	}                                                                                                                     // 9447
}(this, function (CryptoJS) {                                                                                          // 9448
                                                                                                                       // 9449
	/**                                                                                                                   // 9450
	 * ANSI X.923 padding strategy.                                                                                       // 9451
	 */                                                                                                                   // 9452
	CryptoJS.pad.AnsiX923 = {                                                                                             // 9453
	    pad: function (data, blockSize) {                                                                                 // 9454
	        // Shortcuts                                                                                                  // 9455
	        var dataSigBytes = data.sigBytes;                                                                             // 9456
	        var blockSizeBytes = blockSize * 4;                                                                           // 9457
                                                                                                                       // 9458
	        // Count padding bytes                                                                                        // 9459
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;                                           // 9460
                                                                                                                       // 9461
	        // Compute last byte position                                                                                 // 9462
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;                                                           // 9463
                                                                                                                       // 9464
	        // Pad                                                                                                        // 9465
	        data.clamp();                                                                                                 // 9466
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);                               // 9467
	        data.sigBytes += nPaddingBytes;                                                                               // 9468
	    },                                                                                                                // 9469
                                                                                                                       // 9470
	    unpad: function (data) {                                                                                          // 9471
	        // Get number of padding bytes from last byte                                                                 // 9472
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9473
                                                                                                                       // 9474
	        // Remove padding                                                                                             // 9475
	        data.sigBytes -= nPaddingBytes;                                                                               // 9476
	    }                                                                                                                 // 9477
	};                                                                                                                    // 9478
                                                                                                                       // 9479
                                                                                                                       // 9480
	return CryptoJS.pad.Ansix923;                                                                                         // 9481
                                                                                                                       // 9482
}));                                                                                                                   // 9483
},{"./cipher-core":50,"./core":51}],66:[function(require,module,exports){                                              // 9484
;(function (root, factory, undef) {                                                                                    // 9485
	if (typeof exports === "object") {                                                                                    // 9486
		// CommonJS                                                                                                          // 9487
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9488
	}                                                                                                                     // 9489
	else if (typeof define === "function" && define.amd) {                                                                // 9490
		// AMD                                                                                                               // 9491
		define(["./core", "./cipher-core"], factory);                                                                        // 9492
	}                                                                                                                     // 9493
	else {                                                                                                                // 9494
		// Global (browser)                                                                                                  // 9495
		factory(root.CryptoJS);                                                                                              // 9496
	}                                                                                                                     // 9497
}(this, function (CryptoJS) {                                                                                          // 9498
                                                                                                                       // 9499
	/**                                                                                                                   // 9500
	 * ISO 10126 padding strategy.                                                                                        // 9501
	 */                                                                                                                   // 9502
	CryptoJS.pad.Iso10126 = {                                                                                             // 9503
	    pad: function (data, blockSize) {                                                                                 // 9504
	        // Shortcut                                                                                                   // 9505
	        var blockSizeBytes = blockSize * 4;                                                                           // 9506
                                                                                                                       // 9507
	        // Count padding bytes                                                                                        // 9508
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                          // 9509
                                                                                                                       // 9510
	        // Pad                                                                                                        // 9511
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).                                                // 9512
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));                                         // 9513
	    },                                                                                                                // 9514
                                                                                                                       // 9515
	    unpad: function (data) {                                                                                          // 9516
	        // Get number of padding bytes from last byte                                                                 // 9517
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9518
                                                                                                                       // 9519
	        // Remove padding                                                                                             // 9520
	        data.sigBytes -= nPaddingBytes;                                                                               // 9521
	    }                                                                                                                 // 9522
	};                                                                                                                    // 9523
                                                                                                                       // 9524
                                                                                                                       // 9525
	return CryptoJS.pad.Iso10126;                                                                                         // 9526
                                                                                                                       // 9527
}));                                                                                                                   // 9528
},{"./cipher-core":50,"./core":51}],67:[function(require,module,exports){                                              // 9529
;(function (root, factory, undef) {                                                                                    // 9530
	if (typeof exports === "object") {                                                                                    // 9531
		// CommonJS                                                                                                          // 9532
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9533
	}                                                                                                                     // 9534
	else if (typeof define === "function" && define.amd) {                                                                // 9535
		// AMD                                                                                                               // 9536
		define(["./core", "./cipher-core"], factory);                                                                        // 9537
	}                                                                                                                     // 9538
	else {                                                                                                                // 9539
		// Global (browser)                                                                                                  // 9540
		factory(root.CryptoJS);                                                                                              // 9541
	}                                                                                                                     // 9542
}(this, function (CryptoJS) {                                                                                          // 9543
                                                                                                                       // 9544
	/**                                                                                                                   // 9545
	 * ISO/IEC 9797-1 Padding Method 2.                                                                                   // 9546
	 */                                                                                                                   // 9547
	CryptoJS.pad.Iso97971 = {                                                                                             // 9548
	    pad: function (data, blockSize) {                                                                                 // 9549
	        // Add 0x80 byte                                                                                              // 9550
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));                                                  // 9551
                                                                                                                       // 9552
	        // Zero pad the rest                                                                                          // 9553
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);                                                                // 9554
	    },                                                                                                                // 9555
                                                                                                                       // 9556
	    unpad: function (data) {                                                                                          // 9557
	        // Remove zero padding                                                                                        // 9558
	        CryptoJS.pad.ZeroPadding.unpad(data);                                                                         // 9559
                                                                                                                       // 9560
	        // Remove one more byte -- the 0x80 byte                                                                      // 9561
	        data.sigBytes--;                                                                                              // 9562
	    }                                                                                                                 // 9563
	};                                                                                                                    // 9564
                                                                                                                       // 9565
                                                                                                                       // 9566
	return CryptoJS.pad.Iso97971;                                                                                         // 9567
                                                                                                                       // 9568
}));                                                                                                                   // 9569
},{"./cipher-core":50,"./core":51}],68:[function(require,module,exports){                                              // 9570
;(function (root, factory, undef) {                                                                                    // 9571
	if (typeof exports === "object") {                                                                                    // 9572
		// CommonJS                                                                                                          // 9573
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9574
	}                                                                                                                     // 9575
	else if (typeof define === "function" && define.amd) {                                                                // 9576
		// AMD                                                                                                               // 9577
		define(["./core", "./cipher-core"], factory);                                                                        // 9578
	}                                                                                                                     // 9579
	else {                                                                                                                // 9580
		// Global (browser)                                                                                                  // 9581
		factory(root.CryptoJS);                                                                                              // 9582
	}                                                                                                                     // 9583
}(this, function (CryptoJS) {                                                                                          // 9584
                                                                                                                       // 9585
	/**                                                                                                                   // 9586
	 * A noop padding strategy.                                                                                           // 9587
	 */                                                                                                                   // 9588
	CryptoJS.pad.NoPadding = {                                                                                            // 9589
	    pad: function () {                                                                                                // 9590
	    },                                                                                                                // 9591
                                                                                                                       // 9592
	    unpad: function () {                                                                                              // 9593
	    }                                                                                                                 // 9594
	};                                                                                                                    // 9595
                                                                                                                       // 9596
                                                                                                                       // 9597
	return CryptoJS.pad.NoPadding;                                                                                        // 9598
                                                                                                                       // 9599
}));                                                                                                                   // 9600
},{"./cipher-core":50,"./core":51}],69:[function(require,module,exports){                                              // 9601
;(function (root, factory, undef) {                                                                                    // 9602
	if (typeof exports === "object") {                                                                                    // 9603
		// CommonJS                                                                                                          // 9604
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9605
	}                                                                                                                     // 9606
	else if (typeof define === "function" && define.amd) {                                                                // 9607
		// AMD                                                                                                               // 9608
		define(["./core", "./cipher-core"], factory);                                                                        // 9609
	}                                                                                                                     // 9610
	else {                                                                                                                // 9611
		// Global (browser)                                                                                                  // 9612
		factory(root.CryptoJS);                                                                                              // 9613
	}                                                                                                                     // 9614
}(this, function (CryptoJS) {                                                                                          // 9615
                                                                                                                       // 9616
	/**                                                                                                                   // 9617
	 * Zero padding strategy.                                                                                             // 9618
	 */                                                                                                                   // 9619
	CryptoJS.pad.ZeroPadding = {                                                                                          // 9620
	    pad: function (data, blockSize) {                                                                                 // 9621
	        // Shortcut                                                                                                   // 9622
	        var blockSizeBytes = blockSize * 4;                                                                           // 9623
                                                                                                                       // 9624
	        // Pad                                                                                                        // 9625
	        data.clamp();                                                                                                 // 9626
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);                       // 9627
	    },                                                                                                                // 9628
                                                                                                                       // 9629
	    unpad: function (data) {                                                                                          // 9630
	        // Shortcut                                                                                                   // 9631
	        var dataWords = data.words;                                                                                   // 9632
                                                                                                                       // 9633
	        // Unpad                                                                                                      // 9634
	        var i = data.sigBytes - 1;                                                                                    // 9635
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {                                               // 9636
	            i--;                                                                                                      // 9637
	        }                                                                                                             // 9638
	        data.sigBytes = i + 1;                                                                                        // 9639
	    }                                                                                                                 // 9640
	};                                                                                                                    // 9641
                                                                                                                       // 9642
                                                                                                                       // 9643
	return CryptoJS.pad.ZeroPadding;                                                                                      // 9644
                                                                                                                       // 9645
}));                                                                                                                   // 9646
},{"./cipher-core":50,"./core":51}],70:[function(require,module,exports){                                              // 9647
;(function (root, factory, undef) {                                                                                    // 9648
	if (typeof exports === "object") {                                                                                    // 9649
		// CommonJS                                                                                                          // 9650
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));                         // 9651
	}                                                                                                                     // 9652
	else if (typeof define === "function" && define.amd) {                                                                // 9653
		// AMD                                                                                                               // 9654
		define(["./core", "./sha1", "./hmac"], factory);                                                                     // 9655
	}                                                                                                                     // 9656
	else {                                                                                                                // 9657
		// Global (browser)                                                                                                  // 9658
		factory(root.CryptoJS);                                                                                              // 9659
	}                                                                                                                     // 9660
}(this, function (CryptoJS) {                                                                                          // 9661
                                                                                                                       // 9662
	(function () {                                                                                                        // 9663
	    // Shortcuts                                                                                                      // 9664
	    var C = CryptoJS;                                                                                                 // 9665
	    var C_lib = C.lib;                                                                                                // 9666
	    var Base = C_lib.Base;                                                                                            // 9667
	    var WordArray = C_lib.WordArray;                                                                                  // 9668
	    var C_algo = C.algo;                                                                                              // 9669
	    var SHA1 = C_algo.SHA1;                                                                                           // 9670
	    var HMAC = C_algo.HMAC;                                                                                           // 9671
                                                                                                                       // 9672
	    /**                                                                                                               // 9673
	     * Password-Based Key Derivation Function 2 algorithm.                                                            // 9674
	     */                                                                                                               // 9675
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({                                                                        // 9676
	        /**                                                                                                           // 9677
	         * Configuration options.                                                                                     // 9678
	         *                                                                                                            // 9679
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 9680
	         * @property {Hasher} hasher The hasher to use. Default: SHA1                                                 // 9681
	         * @property {number} iterations The number of iterations to perform. Default: 1                              // 9682
	         */                                                                                                           // 9683
	        cfg: Base.extend({                                                                                            // 9684
	            keySize: 128/32,                                                                                          // 9685
	            hasher: SHA1,                                                                                             // 9686
	            iterations: 1                                                                                             // 9687
	        }),                                                                                                           // 9688
                                                                                                                       // 9689
	        /**                                                                                                           // 9690
	         * Initializes a newly created key derivation function.                                                       // 9691
	         *                                                                                                            // 9692
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 9693
	         *                                                                                                            // 9694
	         * @example                                                                                                   // 9695
	         *                                                                                                            // 9696
	         *     var kdf = CryptoJS.algo.PBKDF2.create();                                                               // 9697
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });                                                 // 9698
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });                               // 9699
	         */                                                                                                           // 9700
	        init: function (cfg) {                                                                                        // 9701
	            this.cfg = this.cfg.extend(cfg);                                                                          // 9702
	        },                                                                                                            // 9703
                                                                                                                       // 9704
	        /**                                                                                                           // 9705
	         * Computes the Password-Based Key Derivation Function 2.                                                     // 9706
	         *                                                                                                            // 9707
	         * @param {WordArray|string} password The password.                                                           // 9708
	         * @param {WordArray|string} salt A salt.                                                                     // 9709
	         *                                                                                                            // 9710
	         * @return {WordArray} The derived key.                                                                       // 9711
	         *                                                                                                            // 9712
	         * @example                                                                                                   // 9713
	         *                                                                                                            // 9714
	         *     var key = kdf.compute(password, salt);                                                                 // 9715
	         */                                                                                                           // 9716
	        compute: function (password, salt) {                                                                          // 9717
	            // Shortcut                                                                                               // 9718
	            var cfg = this.cfg;                                                                                       // 9719
                                                                                                                       // 9720
	            // Init HMAC                                                                                              // 9721
	            var hmac = HMAC.create(cfg.hasher, password);                                                             // 9722
                                                                                                                       // 9723
	            // Initial values                                                                                         // 9724
	            var derivedKey = WordArray.create();                                                                      // 9725
	            var blockIndex = WordArray.create([0x00000001]);                                                          // 9726
                                                                                                                       // 9727
	            // Shortcuts                                                                                              // 9728
	            var derivedKeyWords = derivedKey.words;                                                                   // 9729
	            var blockIndexWords = blockIndex.words;                                                                   // 9730
	            var keySize = cfg.keySize;                                                                                // 9731
	            var iterations = cfg.iterations;                                                                          // 9732
                                                                                                                       // 9733
	            // Generate key                                                                                           // 9734
	            while (derivedKeyWords.length < keySize) {                                                                // 9735
	                var block = hmac.update(salt).finalize(blockIndex);                                                   // 9736
	                hmac.reset();                                                                                         // 9737
                                                                                                                       // 9738
	                // Shortcuts                                                                                          // 9739
	                var blockWords = block.words;                                                                         // 9740
	                var blockWordsLength = blockWords.length;                                                             // 9741
                                                                                                                       // 9742
	                // Iterations                                                                                         // 9743
	                var intermediate = block;                                                                             // 9744
	                for (var i = 1; i < iterations; i++) {                                                                // 9745
	                    intermediate = hmac.finalize(intermediate);                                                       // 9746
	                    hmac.reset();                                                                                     // 9747
                                                                                                                       // 9748
	                    // Shortcut                                                                                       // 9749
	                    var intermediateWords = intermediate.words;                                                       // 9750
                                                                                                                       // 9751
	                    // XOR intermediate with block                                                                    // 9752
	                    for (var j = 0; j < blockWordsLength; j++) {                                                      // 9753
	                        blockWords[j] ^= intermediateWords[j];                                                        // 9754
	                    }                                                                                                 // 9755
	                }                                                                                                     // 9756
                                                                                                                       // 9757
	                derivedKey.concat(block);                                                                             // 9758
	                blockIndexWords[0]++;                                                                                 // 9759
	            }                                                                                                         // 9760
	            derivedKey.sigBytes = keySize * 4;                                                                        // 9761
                                                                                                                       // 9762
	            return derivedKey;                                                                                        // 9763
	        }                                                                                                             // 9764
	    });                                                                                                               // 9765
                                                                                                                       // 9766
	    /**                                                                                                               // 9767
	     * Computes the Password-Based Key Derivation Function 2.                                                         // 9768
	     *                                                                                                                // 9769
	     * @param {WordArray|string} password The password.                                                               // 9770
	     * @param {WordArray|string} salt A salt.                                                                         // 9771
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 9772
	     *                                                                                                                // 9773
	     * @return {WordArray} The derived key.                                                                           // 9774
	     *                                                                                                                // 9775
	     * @static                                                                                                        // 9776
	     *                                                                                                                // 9777
	     * @example                                                                                                       // 9778
	     *                                                                                                                // 9779
	     *     var key = CryptoJS.PBKDF2(password, salt);                                                                 // 9780
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });                                                 // 9781
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });                               // 9782
	     */                                                                                                               // 9783
	    C.PBKDF2 = function (password, salt, cfg) {                                                                       // 9784
	        return PBKDF2.create(cfg).compute(password, salt);                                                            // 9785
	    };                                                                                                                // 9786
	}());                                                                                                                 // 9787
                                                                                                                       // 9788
                                                                                                                       // 9789
	return CryptoJS.PBKDF2;                                                                                               // 9790
                                                                                                                       // 9791
}));                                                                                                                   // 9792
},{"./core":51,"./hmac":56,"./sha1":75}],71:[function(require,module,exports){                                         // 9793
;(function (root, factory, undef) {                                                                                    // 9794
	if (typeof exports === "object") {                                                                                    // 9795
		// CommonJS                                                                                                          // 9796
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 9798
	else if (typeof define === "function" && define.amd) {                                                                // 9799
		// AMD                                                                                                               // 9800
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 9801
	}                                                                                                                     // 9802
	else {                                                                                                                // 9803
		// Global (browser)                                                                                                  // 9804
		factory(root.CryptoJS);                                                                                              // 9805
	}                                                                                                                     // 9806
}(this, function (CryptoJS) {                                                                                          // 9807
                                                                                                                       // 9808
	(function () {                                                                                                        // 9809
	    // Shortcuts                                                                                                      // 9810
	    var C = CryptoJS;                                                                                                 // 9811
	    var C_lib = C.lib;                                                                                                // 9812
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 9813
	    var C_algo = C.algo;                                                                                              // 9814
                                                                                                                       // 9815
	    // Reusable objects                                                                                               // 9816
	    var S  = [];                                                                                                      // 9817
	    var C_ = [];                                                                                                      // 9818
	    var G  = [];                                                                                                      // 9819
                                                                                                                       // 9820
	    /**                                                                                                               // 9821
	     * Rabbit stream cipher algorithm.                                                                                // 9822
	     *                                                                                                                // 9823
	     * This is a legacy version that neglected to convert the key to little-endian.                                   // 9824
	     * This error doesn't affect the cipher's security,                                                               // 9825
	     * but it does affect its compatibility with other implementations.                                               // 9826
	     */                                                                                                               // 9827
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({                                                    // 9828
	        _doReset: function () {                                                                                       // 9829
	            // Shortcuts                                                                                              // 9830
	            var K = this._key.words;                                                                                  // 9831
	            var iv = this.cfg.iv;                                                                                     // 9832
                                                                                                                       // 9833
	            // Generate initial state values                                                                          // 9834
	            var X = this._X = [                                                                                       // 9835
	                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 9836
	                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 9837
	                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 9838
	                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 9839
	            ];                                                                                                        // 9840
                                                                                                                       // 9841
	            // Generate initial counter values                                                                        // 9842
	            var C = this._C = [                                                                                       // 9843
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 9844
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 9845
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 9846
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 9847
	            ];                                                                                                        // 9848
                                                                                                                       // 9849
	            // Carry bit                                                                                              // 9850
	            this._b = 0;                                                                                              // 9851
                                                                                                                       // 9852
	            // Iterate the system four times                                                                          // 9853
	            for (var i = 0; i < 4; i++) {                                                                             // 9854
	                nextState.call(this);                                                                                 // 9855
	            }                                                                                                         // 9856
                                                                                                                       // 9857
	            // Modify the counters                                                                                    // 9858
	            for (var i = 0; i < 8; i++) {                                                                             // 9859
	                C[i] ^= X[(i + 4) & 7];                                                                               // 9860
	            }                                                                                                         // 9861
                                                                                                                       // 9862
	            // IV setup                                                                                               // 9863
	            if (iv) {                                                                                                 // 9864
	                // Shortcuts                                                                                          // 9865
	                var IV = iv.words;                                                                                    // 9866
	                var IV_0 = IV[0];                                                                                     // 9867
	                var IV_1 = IV[1];                                                                                     // 9868
                                                                                                                       // 9869
	                // Generate four subvectors                                                                           // 9870
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 9873
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 9874
                                                                                                                       // 9875
	                // Modify counter values                                                                              // 9876
	                C[0] ^= i0;                                                                                           // 9877
	                C[1] ^= i1;                                                                                           // 9878
	                C[2] ^= i2;                                                                                           // 9879
	                C[3] ^= i3;                                                                                           // 9880
	                C[4] ^= i0;                                                                                           // 9881
	                C[5] ^= i1;                                                                                           // 9882
	                C[6] ^= i2;                                                                                           // 9883
	                C[7] ^= i3;                                                                                           // 9884
                                                                                                                       // 9885
	                // Iterate the system four times                                                                      // 9886
	                for (var i = 0; i < 4; i++) {                                                                         // 9887
	                    nextState.call(this);                                                                             // 9888
	                }                                                                                                     // 9889
	            }                                                                                                         // 9890
	        },                                                                                                            // 9891
                                                                                                                       // 9892
	        _doProcessBlock: function (M, offset) {                                                                       // 9893
	            // Shortcut                                                                                               // 9894
	            var X = this._X;                                                                                          // 9895
                                                                                                                       // 9896
	            // Iterate the system                                                                                     // 9897
	            nextState.call(this);                                                                                     // 9898
                                                                                                                       // 9899
	            // Generate four keystream words                                                                          // 9900
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 9901
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 9902
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 9903
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 9904
                                                                                                                       // 9905
	            for (var i = 0; i < 4; i++) {                                                                             // 9906
	                // Swap endian                                                                                        // 9907
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 9908
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 9909
                                                                                                                       // 9910
	                // Encrypt                                                                                            // 9911
	                M[offset + i] ^= S[i];                                                                                // 9912
	            }                                                                                                         // 9913
	        },                                                                                                            // 9914
                                                                                                                       // 9915
	        blockSize: 128/32,                                                                                            // 9916
                                                                                                                       // 9917
	        ivSize: 64/32                                                                                                 // 9918
	    });                                                                                                               // 9919
                                                                                                                       // 9920
	    function nextState() {                                                                                            // 9921
	        // Shortcuts                                                                                                  // 9922
	        var X = this._X;                                                                                              // 9923
	        var C = this._C;                                                                                              // 9924
                                                                                                                       // 9925
	        // Save old counter values                                                                                    // 9926
	        for (var i = 0; i < 8; i++) {                                                                                 // 9927
	            C_[i] = C[i];                                                                                             // 9928
	        }                                                                                                             // 9929
                                                                                                                       // 9930
	        // Calculate new counter values                                                                               // 9931
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 9932
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 9933
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 9934
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 9935
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 9936
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 9937
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 9938
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 9939
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 9940
                                                                                                                       // 9941
	        // Calculate the g-values                                                                                     // 9942
	        for (var i = 0; i < 8; i++) {                                                                                 // 9943
	            var gx = X[i] + C[i];                                                                                     // 9944
                                                                                                                       // 9945
	            // Construct high and low argument for squaring                                                           // 9946
	            var ga = gx & 0xffff;                                                                                     // 9947
	            var gb = gx >>> 16;                                                                                       // 9948
                                                                                                                       // 9949
	            // Calculate high and low result of squaring                                                              // 9950
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 9951
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 9952
                                                                                                                       // 9953
	            // High XOR low                                                                                           // 9954
	            G[i] = gh ^ gl;                                                                                           // 9955
	        }                                                                                                             // 9956
                                                                                                                       // 9957
	        // Calculate new state values                                                                                 // 9958
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 9959
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 9960
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 9961
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 9962
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 9963
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 9964
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 9965
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 9966
	    }                                                                                                                 // 9967
                                                                                                                       // 9968
	    /**                                                                                                               // 9969
	     * Shortcut functions to the cipher's object interface.                                                           // 9970
	     *                                                                                                                // 9971
	     * @example                                                                                                       // 9972
	     *                                                                                                                // 9973
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);                                         // 9974
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);                                      // 9975
	     */                                                                                                               // 9976
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);                                                        // 9977
	}());                                                                                                                 // 9978
                                                                                                                       // 9979
                                                                                                                       // 9980
	return CryptoJS.RabbitLegacy;                                                                                         // 9981
                                                                                                                       // 9982
}));                                                                                                                   // 9983
},{"./cipher-core":50,"./core":51,"./enc-base64":52,"./evpkdf":54,"./md5":59}],72:[function(require,module,exports){   // 9984
;(function (root, factory, undef) {                                                                                    // 9985
	if (typeof exports === "object") {                                                                                    // 9986
		// CommonJS                                                                                                          // 9987
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 9989
	else if (typeof define === "function" && define.amd) {                                                                // 9990
		// AMD                                                                                                               // 9991
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 9992
	}                                                                                                                     // 9993
	else {                                                                                                                // 9994
		// Global (browser)                                                                                                  // 9995
		factory(root.CryptoJS);                                                                                              // 9996
	}                                                                                                                     // 9997
}(this, function (CryptoJS) {                                                                                          // 9998
                                                                                                                       // 9999
	(function () {                                                                                                        // 10000
	    // Shortcuts                                                                                                      // 10001
	    var C = CryptoJS;                                                                                                 // 10002
	    var C_lib = C.lib;                                                                                                // 10003
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10004
	    var C_algo = C.algo;                                                                                              // 10005
                                                                                                                       // 10006
	    // Reusable objects                                                                                               // 10007
	    var S  = [];                                                                                                      // 10008
	    var C_ = [];                                                                                                      // 10009
	    var G  = [];                                                                                                      // 10010
                                                                                                                       // 10011
	    /**                                                                                                               // 10012
	     * Rabbit stream cipher algorithm                                                                                 // 10013
	     */                                                                                                               // 10014
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({                                                                // 10015
	        _doReset: function () {                                                                                       // 10016
	            // Shortcuts                                                                                              // 10017
	            var K = this._key.words;                                                                                  // 10018
	            var iv = this.cfg.iv;                                                                                     // 10019
                                                                                                                       // 10020
	            // Swap endian                                                                                            // 10021
	            for (var i = 0; i < 4; i++) {                                                                             // 10022
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |                                                // 10023
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);                                                 // 10024
	            }                                                                                                         // 10025
                                                                                                                       // 10026
	            // Generate initial state values                                                                          // 10027
	            var X = this._X = [                                                                                       // 10028
	                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 10029
	                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 10030
	                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 10031
	                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 10032
	            ];                                                                                                        // 10033
                                                                                                                       // 10034
	            // Generate initial counter values                                                                        // 10035
	            var C = this._C = [                                                                                       // 10036
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 10037
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 10038
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 10039
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 10040
	            ];                                                                                                        // 10041
                                                                                                                       // 10042
	            // Carry bit                                                                                              // 10043
	            this._b = 0;                                                                                              // 10044
                                                                                                                       // 10045
	            // Iterate the system four times                                                                          // 10046
	            for (var i = 0; i < 4; i++) {                                                                             // 10047
	                nextState.call(this);                                                                                 // 10048
	            }                                                                                                         // 10049
                                                                                                                       // 10050
	            // Modify the counters                                                                                    // 10051
	            for (var i = 0; i < 8; i++) {                                                                             // 10052
	                C[i] ^= X[(i + 4) & 7];                                                                               // 10053
	            }                                                                                                         // 10054
                                                                                                                       // 10055
	            // IV setup                                                                                               // 10056
	            if (iv) {                                                                                                 // 10057
	                // Shortcuts                                                                                          // 10058
	                var IV = iv.words;                                                                                    // 10059
	                var IV_0 = IV[0];                                                                                     // 10060
	                var IV_1 = IV[1];                                                                                     // 10061
                                                                                                                       // 10062
	                // Generate four subvectors                                                                           // 10063
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 10066
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 10067
                                                                                                                       // 10068
	                // Modify counter values                                                                              // 10069
	                C[0] ^= i0;                                                                                           // 10070
	                C[1] ^= i1;                                                                                           // 10071
	                C[2] ^= i2;                                                                                           // 10072
	                C[3] ^= i3;                                                                                           // 10073
	                C[4] ^= i0;                                                                                           // 10074
	                C[5] ^= i1;                                                                                           // 10075
	                C[6] ^= i2;                                                                                           // 10076
	                C[7] ^= i3;                                                                                           // 10077
                                                                                                                       // 10078
	                // Iterate the system four times                                                                      // 10079
	                for (var i = 0; i < 4; i++) {                                                                         // 10080
	                    nextState.call(this);                                                                             // 10081
	                }                                                                                                     // 10082
	            }                                                                                                         // 10083
	        },                                                                                                            // 10084
                                                                                                                       // 10085
	        _doProcessBlock: function (M, offset) {                                                                       // 10086
	            // Shortcut                                                                                               // 10087
	            var X = this._X;                                                                                          // 10088
                                                                                                                       // 10089
	            // Iterate the system                                                                                     // 10090
	            nextState.call(this);                                                                                     // 10091
                                                                                                                       // 10092
	            // Generate four keystream words                                                                          // 10093
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 10094
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 10095
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 10096
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 10097
                                                                                                                       // 10098
	            for (var i = 0; i < 4; i++) {                                                                             // 10099
	                // Swap endian                                                                                        // 10100
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 10101
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 10102
                                                                                                                       // 10103
	                // Encrypt                                                                                            // 10104
	                M[offset + i] ^= S[i];                                                                                // 10105
	            }                                                                                                         // 10106
	        },                                                                                                            // 10107
                                                                                                                       // 10108
	        blockSize: 128/32,                                                                                            // 10109
                                                                                                                       // 10110
	        ivSize: 64/32                                                                                                 // 10111
	    });                                                                                                               // 10112
                                                                                                                       // 10113
	    function nextState() {                                                                                            // 10114
	        // Shortcuts                                                                                                  // 10115
	        var X = this._X;                                                                                              // 10116
	        var C = this._C;                                                                                              // 10117
                                                                                                                       // 10118
	        // Save old counter values                                                                                    // 10119
	        for (var i = 0; i < 8; i++) {                                                                                 // 10120
	            C_[i] = C[i];                                                                                             // 10121
	        }                                                                                                             // 10122
                                                                                                                       // 10123
	        // Calculate new counter values                                                                               // 10124
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 10125
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 10126
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 10127
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 10128
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 10129
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 10130
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 10131
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 10132
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 10133
                                                                                                                       // 10134
	        // Calculate the g-values                                                                                     // 10135
	        for (var i = 0; i < 8; i++) {                                                                                 // 10136
	            var gx = X[i] + C[i];                                                                                     // 10137
                                                                                                                       // 10138
	            // Construct high and low argument for squaring                                                           // 10139
	            var ga = gx & 0xffff;                                                                                     // 10140
	            var gb = gx >>> 16;                                                                                       // 10141
                                                                                                                       // 10142
	            // Calculate high and low result of squaring                                                              // 10143
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 10144
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 10145
                                                                                                                       // 10146
	            // High XOR low                                                                                           // 10147
	            G[i] = gh ^ gl;                                                                                           // 10148
	        }                                                                                                             // 10149
                                                                                                                       // 10150
	        // Calculate new state values                                                                                 // 10151
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 10152
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 10153
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 10154
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 10155
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 10156
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 10157
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 10158
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 10159
	    }                                                                                                                 // 10160
                                                                                                                       // 10161
	    /**                                                                                                               // 10162
	     * Shortcut functions to the cipher's object interface.                                                           // 10163
	     *                                                                                                                // 10164
	     * @example                                                                                                       // 10165
	     *                                                                                                                // 10166
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);                                               // 10167
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);                                            // 10168
	     */                                                                                                               // 10169
	    C.Rabbit = StreamCipher._createHelper(Rabbit);                                                                    // 10170
	}());                                                                                                                 // 10171
                                                                                                                       // 10172
                                                                                                                       // 10173
	return CryptoJS.Rabbit;                                                                                               // 10174
                                                                                                                       // 10175
}));                                                                                                                   // 10176
},{"./cipher-core":50,"./core":51,"./enc-base64":52,"./evpkdf":54,"./md5":59}],73:[function(require,module,exports){   // 10177
;(function (root, factory, undef) {                                                                                    // 10178
	if (typeof exports === "object") {                                                                                    // 10179
		// CommonJS                                                                                                          // 10180
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10182
	else if (typeof define === "function" && define.amd) {                                                                // 10183
		// AMD                                                                                                               // 10184
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10185
	}                                                                                                                     // 10186
	else {                                                                                                                // 10187
		// Global (browser)                                                                                                  // 10188
		factory(root.CryptoJS);                                                                                              // 10189
	}                                                                                                                     // 10190
}(this, function (CryptoJS) {                                                                                          // 10191
                                                                                                                       // 10192
	(function () {                                                                                                        // 10193
	    // Shortcuts                                                                                                      // 10194
	    var C = CryptoJS;                                                                                                 // 10195
	    var C_lib = C.lib;                                                                                                // 10196
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10197
	    var C_algo = C.algo;                                                                                              // 10198
                                                                                                                       // 10199
	    /**                                                                                                               // 10200
	     * RC4 stream cipher algorithm.                                                                                   // 10201
	     */                                                                                                               // 10202
	    var RC4 = C_algo.RC4 = StreamCipher.extend({                                                                      // 10203
	        _doReset: function () {                                                                                       // 10204
	            // Shortcuts                                                                                              // 10205
	            var key = this._key;                                                                                      // 10206
	            var keyWords = key.words;                                                                                 // 10207
	            var keySigBytes = key.sigBytes;                                                                           // 10208
                                                                                                                       // 10209
	            // Init sbox                                                                                              // 10210
	            var S = this._S = [];                                                                                     // 10211
	            for (var i = 0; i < 256; i++) {                                                                           // 10212
	                S[i] = i;                                                                                             // 10213
	            }                                                                                                         // 10214
                                                                                                                       // 10215
	            // Key setup                                                                                              // 10216
	            for (var i = 0, j = 0; i < 256; i++) {                                                                    // 10217
	                var keyByteIndex = i % keySigBytes;                                                                   // 10218
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;                // 10219
                                                                                                                       // 10220
	                j = (j + S[i] + keyByte) % 256;                                                                       // 10221
                                                                                                                       // 10222
	                // Swap                                                                                               // 10223
	                var t = S[i];                                                                                         // 10224
	                S[i] = S[j];                                                                                          // 10225
	                S[j] = t;                                                                                             // 10226
	            }                                                                                                         // 10227
                                                                                                                       // 10228
	            // Counters                                                                                               // 10229
	            this._i = this._j = 0;                                                                                    // 10230
	        },                                                                                                            // 10231
                                                                                                                       // 10232
	        _doProcessBlock: function (M, offset) {                                                                       // 10233
	            M[offset] ^= generateKeystreamWord.call(this);                                                            // 10234
	        },                                                                                                            // 10235
                                                                                                                       // 10236
	        keySize: 256/32,                                                                                              // 10237
                                                                                                                       // 10238
	        ivSize: 0                                                                                                     // 10239
	    });                                                                                                               // 10240
                                                                                                                       // 10241
	    function generateKeystreamWord() {                                                                                // 10242
	        // Shortcuts                                                                                                  // 10243
	        var S = this._S;                                                                                              // 10244
	        var i = this._i;                                                                                              // 10245
	        var j = this._j;                                                                                              // 10246
                                                                                                                       // 10247
	        // Generate keystream word                                                                                    // 10248
	        var keystreamWord = 0;                                                                                        // 10249
	        for (var n = 0; n < 4; n++) {                                                                                 // 10250
	            i = (i + 1) % 256;                                                                                        // 10251
	            j = (j + S[i]) % 256;                                                                                     // 10252
                                                                                                                       // 10253
	            // Swap                                                                                                   // 10254
	            var t = S[i];                                                                                             // 10255
	            S[i] = S[j];                                                                                              // 10256
	            S[j] = t;                                                                                                 // 10257
                                                                                                                       // 10258
	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);                                                  // 10259
	        }                                                                                                             // 10260
                                                                                                                       // 10261
	        // Update counters                                                                                            // 10262
	        this._i = i;                                                                                                  // 10263
	        this._j = j;                                                                                                  // 10264
                                                                                                                       // 10265
	        return keystreamWord;                                                                                         // 10266
	    }                                                                                                                 // 10267
                                                                                                                       // 10268
	    /**                                                                                                               // 10269
	     * Shortcut functions to the cipher's object interface.                                                           // 10270
	     *                                                                                                                // 10271
	     * @example                                                                                                       // 10272
	     *                                                                                                                // 10273
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);                                                  // 10274
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);                                               // 10275
	     */                                                                                                               // 10276
	    C.RC4 = StreamCipher._createHelper(RC4);                                                                          // 10277
                                                                                                                       // 10278
	    /**                                                                                                               // 10279
	     * Modified RC4 stream cipher algorithm.                                                                          // 10280
	     */                                                                                                               // 10281
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({                                                                       // 10282
	        /**                                                                                                           // 10283
	         * Configuration options.                                                                                     // 10284
	         *                                                                                                            // 10285
	         * @property {number} drop The number of keystream words to drop. Default 192                                 // 10286
	         */                                                                                                           // 10287
	        cfg: RC4.cfg.extend({                                                                                         // 10288
	            drop: 192                                                                                                 // 10289
	        }),                                                                                                           // 10290
                                                                                                                       // 10291
	        _doReset: function () {                                                                                       // 10292
	            RC4._doReset.call(this);                                                                                  // 10293
                                                                                                                       // 10294
	            // Drop                                                                                                   // 10295
	            for (var i = this.cfg.drop; i > 0; i--) {                                                                 // 10296
	                generateKeystreamWord.call(this);                                                                     // 10297
	            }                                                                                                         // 10298
	        }                                                                                                             // 10299
	    });                                                                                                               // 10300
                                                                                                                       // 10301
	    /**                                                                                                               // 10302
	     * Shortcut functions to the cipher's object interface.                                                           // 10303
	     *                                                                                                                // 10304
	     * @example                                                                                                       // 10305
	     *                                                                                                                // 10306
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);                                              // 10307
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);                                           // 10308
	     */                                                                                                               // 10309
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);                                                                  // 10310
	}());                                                                                                                 // 10311
                                                                                                                       // 10312
                                                                                                                       // 10313
	return CryptoJS.RC4;                                                                                                  // 10314
                                                                                                                       // 10315
}));                                                                                                                   // 10316
},{"./cipher-core":50,"./core":51,"./enc-base64":52,"./evpkdf":54,"./md5":59}],74:[function(require,module,exports){   // 10317
;(function (root, factory) {                                                                                           // 10318
	if (typeof exports === "object") {                                                                                    // 10319
		// CommonJS                                                                                                          // 10320
		module.exports = exports = factory(require("./core"));                                                               // 10321
	}                                                                                                                     // 10322
	else if (typeof define === "function" && define.amd) {                                                                // 10323
		// AMD                                                                                                               // 10324
		define(["./core"], factory);                                                                                         // 10325
	}                                                                                                                     // 10326
	else {                                                                                                                // 10327
		// Global (browser)                                                                                                  // 10328
		factory(root.CryptoJS);                                                                                              // 10329
	}                                                                                                                     // 10330
}(this, function (CryptoJS) {                                                                                          // 10331
                                                                                                                       // 10332
	/** @preserve                                                                                                         // 10333
	(c) 2012 by Cédric Mesnil. All rights reserved.                                                                       // 10334
                                                                                                                       // 10335
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
                                                                                                                       // 10337
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
                                                                                                                       // 10340
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/                                                                                                                    // 10342
                                                                                                                       // 10343
	(function (Math) {                                                                                                    // 10344
	    // Shortcuts                                                                                                      // 10345
	    var C = CryptoJS;                                                                                                 // 10346
	    var C_lib = C.lib;                                                                                                // 10347
	    var WordArray = C_lib.WordArray;                                                                                  // 10348
	    var Hasher = C_lib.Hasher;                                                                                        // 10349
	    var C_algo = C.algo;                                                                                              // 10350
                                                                                                                       // 10351
	    // Constants table                                                                                                // 10352
	    var _zl = WordArray.create([                                                                                      // 10353
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,                                                // 10354
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,                                                // 10355
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,                                                // 10356
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,                                                // 10357
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);                                              // 10358
	    var _zr = WordArray.create([                                                                                      // 10359
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,                                                // 10360
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,                                                // 10361
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,                                               // 10362
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,                                                // 10363
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);                                             // 10364
	    var _sl = WordArray.create([                                                                                      // 10365
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,                                              // 10366
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,                                                // 10367
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,                                               // 10368
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,                                             // 10369
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);                                             // 10370
	    var _sr = WordArray.create([                                                                                      // 10371
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,                                                // 10372
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,                                                // 10373
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,                                                // 10374
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,                                               // 10375
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);                                             // 10376
                                                                                                                       // 10377
	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);                       // 10378
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);                       // 10379
                                                                                                                       // 10380
	    /**                                                                                                               // 10381
	     * RIPEMD160 hash algorithm.                                                                                      // 10382
	     */                                                                                                               // 10383
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({                                                                // 10384
	        _doReset: function () {                                                                                       // 10385
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);             // 10386
	        },                                                                                                            // 10387
                                                                                                                       // 10388
	        _doProcessBlock: function (M, offset) {                                                                       // 10389
                                                                                                                       // 10390
	            // Swap endian                                                                                            // 10391
	            for (var i = 0; i < 16; i++) {                                                                            // 10392
	                // Shortcuts                                                                                          // 10393
	                var offset_i = offset + i;                                                                            // 10394
	                var M_offset_i = M[offset_i];                                                                         // 10395
                                                                                                                       // 10396
	                // Swap                                                                                               // 10397
	                M[offset_i] = (                                                                                       // 10398
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 10399
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 10400
	                );                                                                                                    // 10401
	            }                                                                                                         // 10402
	            // Shortcut                                                                                               // 10403
	            var H  = this._hash.words;                                                                                // 10404
	            var hl = _hl.words;                                                                                       // 10405
	            var hr = _hr.words;                                                                                       // 10406
	            var zl = _zl.words;                                                                                       // 10407
	            var zr = _zr.words;                                                                                       // 10408
	            var sl = _sl.words;                                                                                       // 10409
	            var sr = _sr.words;                                                                                       // 10410
                                                                                                                       // 10411
	            // Working variables                                                                                      // 10412
	            var al, bl, cl, dl, el;                                                                                   // 10413
	            var ar, br, cr, dr, er;                                                                                   // 10414
                                                                                                                       // 10415
	            ar = al = H[0];                                                                                           // 10416
	            br = bl = H[1];                                                                                           // 10417
	            cr = cl = H[2];                                                                                           // 10418
	            dr = dl = H[3];                                                                                           // 10419
	            er = el = H[4];                                                                                           // 10420
	            // Computation                                                                                            // 10421
	            var t;                                                                                                    // 10422
	            for (var i = 0; i < 80; i += 1) {                                                                         // 10423
	                t = (al +  M[offset+zl[i]])|0;                                                                        // 10424
	                if (i<16){                                                                                            // 10425
		            t +=  f1(bl,cl,dl) + hl[0];                                                                              // 10426
	                } else if (i<32) {                                                                                    // 10427
		            t +=  f2(bl,cl,dl) + hl[1];                                                                              // 10428
	                } else if (i<48) {                                                                                    // 10429
		            t +=  f3(bl,cl,dl) + hl[2];                                                                              // 10430
	                } else if (i<64) {                                                                                    // 10431
		            t +=  f4(bl,cl,dl) + hl[3];                                                                              // 10432
	                } else {// if (i<80) {                                                                                // 10433
		            t +=  f5(bl,cl,dl) + hl[4];                                                                              // 10434
	                }                                                                                                     // 10435
	                t = t|0;                                                                                              // 10436
	                t =  rotl(t,sl[i]);                                                                                   // 10437
	                t = (t+el)|0;                                                                                         // 10438
	                al = el;                                                                                              // 10439
	                el = dl;                                                                                              // 10440
	                dl = rotl(cl, 10);                                                                                    // 10441
	                cl = bl;                                                                                              // 10442
	                bl = t;                                                                                               // 10443
                                                                                                                       // 10444
	                t = (ar + M[offset+zr[i]])|0;                                                                         // 10445
	                if (i<16){                                                                                            // 10446
		            t +=  f5(br,cr,dr) + hr[0];                                                                              // 10447
	                } else if (i<32) {                                                                                    // 10448
		            t +=  f4(br,cr,dr) + hr[1];                                                                              // 10449
	                } else if (i<48) {                                                                                    // 10450
		            t +=  f3(br,cr,dr) + hr[2];                                                                              // 10451
	                } else if (i<64) {                                                                                    // 10452
		            t +=  f2(br,cr,dr) + hr[3];                                                                              // 10453
	                } else {// if (i<80) {                                                                                // 10454
		            t +=  f1(br,cr,dr) + hr[4];                                                                              // 10455
	                }                                                                                                     // 10456
	                t = t|0;                                                                                              // 10457
	                t =  rotl(t,sr[i]) ;                                                                                  // 10458
	                t = (t+er)|0;                                                                                         // 10459
	                ar = er;                                                                                              // 10460
	                er = dr;                                                                                              // 10461
	                dr = rotl(cr, 10);                                                                                    // 10462
	                cr = br;                                                                                              // 10463
	                br = t;                                                                                               // 10464
	            }                                                                                                         // 10465
	            // Intermediate hash value                                                                                // 10466
	            t    = (H[1] + cl + dr)|0;                                                                                // 10467
	            H[1] = (H[2] + dl + er)|0;                                                                                // 10468
	            H[2] = (H[3] + el + ar)|0;                                                                                // 10469
	            H[3] = (H[4] + al + br)|0;                                                                                // 10470
	            H[4] = (H[0] + bl + cr)|0;                                                                                // 10471
	            H[0] =  t;                                                                                                // 10472
	        },                                                                                                            // 10473
                                                                                                                       // 10474
	        _doFinalize: function () {                                                                                    // 10475
	            // Shortcuts                                                                                              // 10476
	            var data = this._data;                                                                                    // 10477
	            var dataWords = data.words;                                                                               // 10478
                                                                                                                       // 10479
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10480
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 10481
                                                                                                                       // 10482
	            // Add padding                                                                                            // 10483
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10484
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 10485
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |                                           // 10486
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)                                             // 10487
	            );                                                                                                        // 10488
	            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 10489
                                                                                                                       // 10490
	            // Hash final blocks                                                                                      // 10491
	            this._process();                                                                                          // 10492
                                                                                                                       // 10493
	            // Shortcuts                                                                                              // 10494
	            var hash = this._hash;                                                                                    // 10495
	            var H = hash.words;                                                                                       // 10496
                                                                                                                       // 10497
	            // Swap endian                                                                                            // 10498
	            for (var i = 0; i < 5; i++) {                                                                             // 10499
	                // Shortcut                                                                                           // 10500
	                var H_i = H[i];                                                                                       // 10501
                                                                                                                       // 10502
	                // Swap                                                                                               // 10503
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 10504
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 10505
	            }                                                                                                         // 10506
                                                                                                                       // 10507
	            // Return final computed hash                                                                             // 10508
	            return hash;                                                                                              // 10509
	        },                                                                                                            // 10510
                                                                                                                       // 10511
	        clone: function () {                                                                                          // 10512
	            var clone = Hasher.clone.call(this);                                                                      // 10513
	            clone._hash = this._hash.clone();                                                                         // 10514
                                                                                                                       // 10515
	            return clone;                                                                                             // 10516
	        }                                                                                                             // 10517
	    });                                                                                                               // 10518
                                                                                                                       // 10519
                                                                                                                       // 10520
	    function f1(x, y, z) {                                                                                            // 10521
	        return ((x) ^ (y) ^ (z));                                                                                     // 10522
                                                                                                                       // 10523
	    }                                                                                                                 // 10524
                                                                                                                       // 10525
	    function f2(x, y, z) {                                                                                            // 10526
	        return (((x)&(y)) | ((~x)&(z)));                                                                              // 10527
	    }                                                                                                                 // 10528
                                                                                                                       // 10529
	    function f3(x, y, z) {                                                                                            // 10530
	        return (((x) | (~(y))) ^ (z));                                                                                // 10531
	    }                                                                                                                 // 10532
                                                                                                                       // 10533
	    function f4(x, y, z) {                                                                                            // 10534
	        return (((x) & (z)) | ((y)&(~(z))));                                                                          // 10535
	    }                                                                                                                 // 10536
                                                                                                                       // 10537
	    function f5(x, y, z) {                                                                                            // 10538
	        return ((x) ^ ((y) |(~(z))));                                                                                 // 10539
                                                                                                                       // 10540
	    }                                                                                                                 // 10541
                                                                                                                       // 10542
	    function rotl(x,n) {                                                                                              // 10543
	        return (x<<n) | (x>>>(32-n));                                                                                 // 10544
	    }                                                                                                                 // 10545
                                                                                                                       // 10546
                                                                                                                       // 10547
	    /**                                                                                                               // 10548
	     * Shortcut function to the hasher's object interface.                                                            // 10549
	     *                                                                                                                // 10550
	     * @param {WordArray|string} message The message to hash.                                                         // 10551
	     *                                                                                                                // 10552
	     * @return {WordArray} The hash.                                                                                  // 10553
	     *                                                                                                                // 10554
	     * @static                                                                                                        // 10555
	     *                                                                                                                // 10556
	     * @example                                                                                                       // 10557
	     *                                                                                                                // 10558
	     *     var hash = CryptoJS.RIPEMD160('message');                                                                  // 10559
	     *     var hash = CryptoJS.RIPEMD160(wordArray);                                                                  // 10560
	     */                                                                                                               // 10561
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);                                                                    // 10562
                                                                                                                       // 10563
	    /**                                                                                                               // 10564
	     * Shortcut function to the HMAC's object interface.                                                              // 10565
	     *                                                                                                                // 10566
	     * @param {WordArray|string} message The message to hash.                                                         // 10567
	     * @param {WordArray|string} key The secret key.                                                                  // 10568
	     *                                                                                                                // 10569
	     * @return {WordArray} The HMAC.                                                                                  // 10570
	     *                                                                                                                // 10571
	     * @static                                                                                                        // 10572
	     *                                                                                                                // 10573
	     * @example                                                                                                       // 10574
	     *                                                                                                                // 10575
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);                                                           // 10576
	     */                                                                                                               // 10577
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);                                                            // 10578
	}(Math));                                                                                                             // 10579
                                                                                                                       // 10580
                                                                                                                       // 10581
	return CryptoJS.RIPEMD160;                                                                                            // 10582
                                                                                                                       // 10583
}));                                                                                                                   // 10584
},{"./core":51}],75:[function(require,module,exports){                                                                 // 10585
;(function (root, factory) {                                                                                           // 10586
	if (typeof exports === "object") {                                                                                    // 10587
		// CommonJS                                                                                                          // 10588
		module.exports = exports = factory(require("./core"));                                                               // 10589
	}                                                                                                                     // 10590
	else if (typeof define === "function" && define.amd) {                                                                // 10591
		// AMD                                                                                                               // 10592
		define(["./core"], factory);                                                                                         // 10593
	}                                                                                                                     // 10594
	else {                                                                                                                // 10595
		// Global (browser)                                                                                                  // 10596
		factory(root.CryptoJS);                                                                                              // 10597
	}                                                                                                                     // 10598
}(this, function (CryptoJS) {                                                                                          // 10599
                                                                                                                       // 10600
	(function () {                                                                                                        // 10601
	    // Shortcuts                                                                                                      // 10602
	    var C = CryptoJS;                                                                                                 // 10603
	    var C_lib = C.lib;                                                                                                // 10604
	    var WordArray = C_lib.WordArray;                                                                                  // 10605
	    var Hasher = C_lib.Hasher;                                                                                        // 10606
	    var C_algo = C.algo;                                                                                              // 10607
                                                                                                                       // 10608
	    // Reusable object                                                                                                // 10609
	    var W = [];                                                                                                       // 10610
                                                                                                                       // 10611
	    /**                                                                                                               // 10612
	     * SHA-1 hash algorithm.                                                                                          // 10613
	     */                                                                                                               // 10614
	    var SHA1 = C_algo.SHA1 = Hasher.extend({                                                                          // 10615
	        _doReset: function () {                                                                                       // 10616
	            this._hash = new WordArray.init([                                                                         // 10617
	                0x67452301, 0xefcdab89,                                                                               // 10618
	                0x98badcfe, 0x10325476,                                                                               // 10619
	                0xc3d2e1f0                                                                                            // 10620
	            ]);                                                                                                       // 10621
	        },                                                                                                            // 10622
                                                                                                                       // 10623
	        _doProcessBlock: function (M, offset) {                                                                       // 10624
	            // Shortcut                                                                                               // 10625
	            var H = this._hash.words;                                                                                 // 10626
                                                                                                                       // 10627
	            // Working variables                                                                                      // 10628
	            var a = H[0];                                                                                             // 10629
	            var b = H[1];                                                                                             // 10630
	            var c = H[2];                                                                                             // 10631
	            var d = H[3];                                                                                             // 10632
	            var e = H[4];                                                                                             // 10633
                                                                                                                       // 10634
	            // Computation                                                                                            // 10635
	            for (var i = 0; i < 80; i++) {                                                                            // 10636
	                if (i < 16) {                                                                                         // 10637
	                    W[i] = M[offset + i] | 0;                                                                         // 10638
	                } else {                                                                                              // 10639
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];                                              // 10640
	                    W[i] = (n << 1) | (n >>> 31);                                                                     // 10641
	                }                                                                                                     // 10642
                                                                                                                       // 10643
	                var t = ((a << 5) | (a >>> 27)) + e + W[i];                                                           // 10644
	                if (i < 20) {                                                                                         // 10645
	                    t += ((b & c) | (~b & d)) + 0x5a827999;                                                           // 10646
	                } else if (i < 40) {                                                                                  // 10647
	                    t += (b ^ c ^ d) + 0x6ed9eba1;                                                                    // 10648
	                } else if (i < 60) {                                                                                  // 10649
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;                                                  // 10650
	                } else /* if (i < 80) */ {                                                                            // 10651
	                    t += (b ^ c ^ d) - 0x359d3e2a;                                                                    // 10652
	                }                                                                                                     // 10653
                                                                                                                       // 10654
	                e = d;                                                                                                // 10655
	                d = c;                                                                                                // 10656
	                c = (b << 30) | (b >>> 2);                                                                            // 10657
	                b = a;                                                                                                // 10658
	                a = t;                                                                                                // 10659
	            }                                                                                                         // 10660
                                                                                                                       // 10661
	            // Intermediate hash value                                                                                // 10662
	            H[0] = (H[0] + a) | 0;                                                                                    // 10663
	            H[1] = (H[1] + b) | 0;                                                                                    // 10664
	            H[2] = (H[2] + c) | 0;                                                                                    // 10665
	            H[3] = (H[3] + d) | 0;                                                                                    // 10666
	            H[4] = (H[4] + e) | 0;                                                                                    // 10667
	        },                                                                                                            // 10668
                                                                                                                       // 10669
	        _doFinalize: function () {                                                                                    // 10670
	            // Shortcuts                                                                                              // 10671
	            var data = this._data;                                                                                    // 10672
	            var dataWords = data.words;                                                                               // 10673
                                                                                                                       // 10674
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10675
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 10676
                                                                                                                       // 10677
	            // Add padding                                                                                            // 10678
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10679
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 10680
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 10681
	            data.sigBytes = dataWords.length * 4;                                                                     // 10682
                                                                                                                       // 10683
	            // Hash final blocks                                                                                      // 10684
	            this._process();                                                                                          // 10685
                                                                                                                       // 10686
	            // Return final computed hash                                                                             // 10687
	            return this._hash;                                                                                        // 10688
	        },                                                                                                            // 10689
                                                                                                                       // 10690
	        clone: function () {                                                                                          // 10691
	            var clone = Hasher.clone.call(this);                                                                      // 10692
	            clone._hash = this._hash.clone();                                                                         // 10693
                                                                                                                       // 10694
	            return clone;                                                                                             // 10695
	        }                                                                                                             // 10696
	    });                                                                                                               // 10697
                                                                                                                       // 10698
	    /**                                                                                                               // 10699
	     * Shortcut function to the hasher's object interface.                                                            // 10700
	     *                                                                                                                // 10701
	     * @param {WordArray|string} message The message to hash.                                                         // 10702
	     *                                                                                                                // 10703
	     * @return {WordArray} The hash.                                                                                  // 10704
	     *                                                                                                                // 10705
	     * @static                                                                                                        // 10706
	     *                                                                                                                // 10707
	     * @example                                                                                                       // 10708
	     *                                                                                                                // 10709
	     *     var hash = CryptoJS.SHA1('message');                                                                       // 10710
	     *     var hash = CryptoJS.SHA1(wordArray);                                                                       // 10711
	     */                                                                                                               // 10712
	    C.SHA1 = Hasher._createHelper(SHA1);                                                                              // 10713
                                                                                                                       // 10714
	    /**                                                                                                               // 10715
	     * Shortcut function to the HMAC's object interface.                                                              // 10716
	     *                                                                                                                // 10717
	     * @param {WordArray|string} message The message to hash.                                                         // 10718
	     * @param {WordArray|string} key The secret key.                                                                  // 10719
	     *                                                                                                                // 10720
	     * @return {WordArray} The HMAC.                                                                                  // 10721
	     *                                                                                                                // 10722
	     * @static                                                                                                        // 10723
	     *                                                                                                                // 10724
	     * @example                                                                                                       // 10725
	     *                                                                                                                // 10726
	     *     var hmac = CryptoJS.HmacSHA1(message, key);                                                                // 10727
	     */                                                                                                               // 10728
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);                                                                      // 10729
	}());                                                                                                                 // 10730
                                                                                                                       // 10731
                                                                                                                       // 10732
	return CryptoJS.SHA1;                                                                                                 // 10733
                                                                                                                       // 10734
}));                                                                                                                   // 10735
},{"./core":51}],76:[function(require,module,exports){                                                                 // 10736
;(function (root, factory, undef) {                                                                                    // 10737
	if (typeof exports === "object") {                                                                                    // 10738
		// CommonJS                                                                                                          // 10739
		module.exports = exports = factory(require("./core"), require("./sha256"));                                          // 10740
	}                                                                                                                     // 10741
	else if (typeof define === "function" && define.amd) {                                                                // 10742
		// AMD                                                                                                               // 10743
		define(["./core", "./sha256"], factory);                                                                             // 10744
	}                                                                                                                     // 10745
	else {                                                                                                                // 10746
		// Global (browser)                                                                                                  // 10747
		factory(root.CryptoJS);                                                                                              // 10748
	}                                                                                                                     // 10749
}(this, function (CryptoJS) {                                                                                          // 10750
                                                                                                                       // 10751
	(function () {                                                                                                        // 10752
	    // Shortcuts                                                                                                      // 10753
	    var C = CryptoJS;                                                                                                 // 10754
	    var C_lib = C.lib;                                                                                                // 10755
	    var WordArray = C_lib.WordArray;                                                                                  // 10756
	    var C_algo = C.algo;                                                                                              // 10757
	    var SHA256 = C_algo.SHA256;                                                                                       // 10758
                                                                                                                       // 10759
	    /**                                                                                                               // 10760
	     * SHA-224 hash algorithm.                                                                                        // 10761
	     */                                                                                                               // 10762
	    var SHA224 = C_algo.SHA224 = SHA256.extend({                                                                      // 10763
	        _doReset: function () {                                                                                       // 10764
	            this._hash = new WordArray.init([                                                                         // 10765
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,                                                       // 10766
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4                                                        // 10767
	            ]);                                                                                                       // 10768
	        },                                                                                                            // 10769
                                                                                                                       // 10770
	        _doFinalize: function () {                                                                                    // 10771
	            var hash = SHA256._doFinalize.call(this);                                                                 // 10772
                                                                                                                       // 10773
	            hash.sigBytes -= 4;                                                                                       // 10774
                                                                                                                       // 10775
	            return hash;                                                                                              // 10776
	        }                                                                                                             // 10777
	    });                                                                                                               // 10778
                                                                                                                       // 10779
	    /**                                                                                                               // 10780
	     * Shortcut function to the hasher's object interface.                                                            // 10781
	     *                                                                                                                // 10782
	     * @param {WordArray|string} message The message to hash.                                                         // 10783
	     *                                                                                                                // 10784
	     * @return {WordArray} The hash.                                                                                  // 10785
	     *                                                                                                                // 10786
	     * @static                                                                                                        // 10787
	     *                                                                                                                // 10788
	     * @example                                                                                                       // 10789
	     *                                                                                                                // 10790
	     *     var hash = CryptoJS.SHA224('message');                                                                     // 10791
	     *     var hash = CryptoJS.SHA224(wordArray);                                                                     // 10792
	     */                                                                                                               // 10793
	    C.SHA224 = SHA256._createHelper(SHA224);                                                                          // 10794
                                                                                                                       // 10795
	    /**                                                                                                               // 10796
	     * Shortcut function to the HMAC's object interface.                                                              // 10797
	     *                                                                                                                // 10798
	     * @param {WordArray|string} message The message to hash.                                                         // 10799
	     * @param {WordArray|string} key The secret key.                                                                  // 10800
	     *                                                                                                                // 10801
	     * @return {WordArray} The HMAC.                                                                                  // 10802
	     *                                                                                                                // 10803
	     * @static                                                                                                        // 10804
	     *                                                                                                                // 10805
	     * @example                                                                                                       // 10806
	     *                                                                                                                // 10807
	     *     var hmac = CryptoJS.HmacSHA224(message, key);                                                              // 10808
	     */                                                                                                               // 10809
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);                                                                  // 10810
	}());                                                                                                                 // 10811
                                                                                                                       // 10812
                                                                                                                       // 10813
	return CryptoJS.SHA224;                                                                                               // 10814
                                                                                                                       // 10815
}));                                                                                                                   // 10816
},{"./core":51,"./sha256":77}],77:[function(require,module,exports){                                                   // 10817
;(function (root, factory) {                                                                                           // 10818
	if (typeof exports === "object") {                                                                                    // 10819
		// CommonJS                                                                                                          // 10820
		module.exports = exports = factory(require("./core"));                                                               // 10821
	}                                                                                                                     // 10822
	else if (typeof define === "function" && define.amd) {                                                                // 10823
		// AMD                                                                                                               // 10824
		define(["./core"], factory);                                                                                         // 10825
	}                                                                                                                     // 10826
	else {                                                                                                                // 10827
		// Global (browser)                                                                                                  // 10828
		factory(root.CryptoJS);                                                                                              // 10829
	}                                                                                                                     // 10830
}(this, function (CryptoJS) {                                                                                          // 10831
                                                                                                                       // 10832
	(function (Math) {                                                                                                    // 10833
	    // Shortcuts                                                                                                      // 10834
	    var C = CryptoJS;                                                                                                 // 10835
	    var C_lib = C.lib;                                                                                                // 10836
	    var WordArray = C_lib.WordArray;                                                                                  // 10837
	    var Hasher = C_lib.Hasher;                                                                                        // 10838
	    var C_algo = C.algo;                                                                                              // 10839
                                                                                                                       // 10840
	    // Initialization and round constants tables                                                                      // 10841
	    var H = [];                                                                                                       // 10842
	    var K = [];                                                                                                       // 10843
                                                                                                                       // 10844
	    // Compute constants                                                                                              // 10845
	    (function () {                                                                                                    // 10846
	        function isPrime(n) {                                                                                         // 10847
	            var sqrtN = Math.sqrt(n);                                                                                 // 10848
	            for (var factor = 2; factor <= sqrtN; factor++) {                                                         // 10849
	                if (!(n % factor)) {                                                                                  // 10850
	                    return false;                                                                                     // 10851
	                }                                                                                                     // 10852
	            }                                                                                                         // 10853
                                                                                                                       // 10854
	            return true;                                                                                              // 10855
	        }                                                                                                             // 10856
                                                                                                                       // 10857
	        function getFractionalBits(n) {                                                                               // 10858
	            return ((n - (n | 0)) * 0x100000000) | 0;                                                                 // 10859
	        }                                                                                                             // 10860
                                                                                                                       // 10861
	        var n = 2;                                                                                                    // 10862
	        var nPrime = 0;                                                                                               // 10863
	        while (nPrime < 64) {                                                                                         // 10864
	            if (isPrime(n)) {                                                                                         // 10865
	                if (nPrime < 8) {                                                                                     // 10866
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));                                                // 10867
	                }                                                                                                     // 10868
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));                                                    // 10869
                                                                                                                       // 10870
	                nPrime++;                                                                                             // 10871
	            }                                                                                                         // 10872
                                                                                                                       // 10873
	            n++;                                                                                                      // 10874
	        }                                                                                                             // 10875
	    }());                                                                                                             // 10876
                                                                                                                       // 10877
	    // Reusable object                                                                                                // 10878
	    var W = [];                                                                                                       // 10879
                                                                                                                       // 10880
	    /**                                                                                                               // 10881
	     * SHA-256 hash algorithm.                                                                                        // 10882
	     */                                                                                                               // 10883
	    var SHA256 = C_algo.SHA256 = Hasher.extend({                                                                      // 10884
	        _doReset: function () {                                                                                       // 10885
	            this._hash = new WordArray.init(H.slice(0));                                                              // 10886
	        },                                                                                                            // 10887
                                                                                                                       // 10888
	        _doProcessBlock: function (M, offset) {                                                                       // 10889
	            // Shortcut                                                                                               // 10890
	            var H = this._hash.words;                                                                                 // 10891
                                                                                                                       // 10892
	            // Working variables                                                                                      // 10893
	            var a = H[0];                                                                                             // 10894
	            var b = H[1];                                                                                             // 10895
	            var c = H[2];                                                                                             // 10896
	            var d = H[3];                                                                                             // 10897
	            var e = H[4];                                                                                             // 10898
	            var f = H[5];                                                                                             // 10899
	            var g = H[6];                                                                                             // 10900
	            var h = H[7];                                                                                             // 10901
                                                                                                                       // 10902
	            // Computation                                                                                            // 10903
	            for (var i = 0; i < 64; i++) {                                                                            // 10904
	                if (i < 16) {                                                                                         // 10905
	                    W[i] = M[offset + i] | 0;                                                                         // 10906
	                } else {                                                                                              // 10907
	                    var gamma0x = W[i - 15];                                                                          // 10908
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^                                              // 10909
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^                                              // 10910
	                                   (gamma0x >>> 3);                                                                   // 10911
                                                                                                                       // 10912
	                    var gamma1x = W[i - 2];                                                                           // 10913
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^                                              // 10914
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^                                              // 10915
	                                   (gamma1x >>> 10);                                                                  // 10916
                                                                                                                       // 10917
	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];                                                    // 10918
	                }                                                                                                     // 10919
                                                                                                                       // 10920
	                var ch  = (e & f) ^ (~e & g);                                                                         // 10921
	                var maj = (a & b) ^ (a & c) ^ (b & c);                                                                // 10922
                                                                                                                       // 10923
	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));           // 10924
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));           // 10925
                                                                                                                       // 10926
	                var t1 = h + sigma1 + ch + K[i] + W[i];                                                               // 10927
	                var t2 = sigma0 + maj;                                                                                // 10928
                                                                                                                       // 10929
	                h = g;                                                                                                // 10930
	                g = f;                                                                                                // 10931
	                f = e;                                                                                                // 10932
	                e = (d + t1) | 0;                                                                                     // 10933
	                d = c;                                                                                                // 10934
	                c = b;                                                                                                // 10935
	                b = a;                                                                                                // 10936
	                a = (t1 + t2) | 0;                                                                                    // 10937
	            }                                                                                                         // 10938
                                                                                                                       // 10939
	            // Intermediate hash value                                                                                // 10940
	            H[0] = (H[0] + a) | 0;                                                                                    // 10941
	            H[1] = (H[1] + b) | 0;                                                                                    // 10942
	            H[2] = (H[2] + c) | 0;                                                                                    // 10943
	            H[3] = (H[3] + d) | 0;                                                                                    // 10944
	            H[4] = (H[4] + e) | 0;                                                                                    // 10945
	            H[5] = (H[5] + f) | 0;                                                                                    // 10946
	            H[6] = (H[6] + g) | 0;                                                                                    // 10947
	            H[7] = (H[7] + h) | 0;                                                                                    // 10948
	        },                                                                                                            // 10949
                                                                                                                       // 10950
	        _doFinalize: function () {                                                                                    // 10951
	            // Shortcuts                                                                                              // 10952
	            var data = this._data;                                                                                    // 10953
	            var dataWords = data.words;                                                                               // 10954
                                                                                                                       // 10955
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10956
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 10957
                                                                                                                       // 10958
	            // Add padding                                                                                            // 10959
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10960
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 10961
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 10962
	            data.sigBytes = dataWords.length * 4;                                                                     // 10963
                                                                                                                       // 10964
	            // Hash final blocks                                                                                      // 10965
	            this._process();                                                                                          // 10966
                                                                                                                       // 10967
	            // Return final computed hash                                                                             // 10968
	            return this._hash;                                                                                        // 10969
	        },                                                                                                            // 10970
                                                                                                                       // 10971
	        clone: function () {                                                                                          // 10972
	            var clone = Hasher.clone.call(this);                                                                      // 10973
	            clone._hash = this._hash.clone();                                                                         // 10974
                                                                                                                       // 10975
	            return clone;                                                                                             // 10976
	        }                                                                                                             // 10977
	    });                                                                                                               // 10978
                                                                                                                       // 10979
	    /**                                                                                                               // 10980
	     * Shortcut function to the hasher's object interface.                                                            // 10981
	     *                                                                                                                // 10982
	     * @param {WordArray|string} message The message to hash.                                                         // 10983
	     *                                                                                                                // 10984
	     * @return {WordArray} The hash.                                                                                  // 10985
	     *                                                                                                                // 10986
	     * @static                                                                                                        // 10987
	     *                                                                                                                // 10988
	     * @example                                                                                                       // 10989
	     *                                                                                                                // 10990
	     *     var hash = CryptoJS.SHA256('message');                                                                     // 10991
	     *     var hash = CryptoJS.SHA256(wordArray);                                                                     // 10992
	     */                                                                                                               // 10993
	    C.SHA256 = Hasher._createHelper(SHA256);                                                                          // 10994
                                                                                                                       // 10995
	    /**                                                                                                               // 10996
	     * Shortcut function to the HMAC's object interface.                                                              // 10997
	     *                                                                                                                // 10998
	     * @param {WordArray|string} message The message to hash.                                                         // 10999
	     * @param {WordArray|string} key The secret key.                                                                  // 11000
	     *                                                                                                                // 11001
	     * @return {WordArray} The HMAC.                                                                                  // 11002
	     *                                                                                                                // 11003
	     * @static                                                                                                        // 11004
	     *                                                                                                                // 11005
	     * @example                                                                                                       // 11006
	     *                                                                                                                // 11007
	     *     var hmac = CryptoJS.HmacSHA256(message, key);                                                              // 11008
	     */                                                                                                               // 11009
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);                                                                  // 11010
	}(Math));                                                                                                             // 11011
                                                                                                                       // 11012
                                                                                                                       // 11013
	return CryptoJS.SHA256;                                                                                               // 11014
                                                                                                                       // 11015
}));                                                                                                                   // 11016
},{"./core":51}],78:[function(require,module,exports){                                                                 // 11017
;(function (root, factory, undef) {                                                                                    // 11018
	if (typeof exports === "object") {                                                                                    // 11019
		// CommonJS                                                                                                          // 11020
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                        // 11021
	}                                                                                                                     // 11022
	else if (typeof define === "function" && define.amd) {                                                                // 11023
		// AMD                                                                                                               // 11024
		define(["./core", "./x64-core"], factory);                                                                           // 11025
	}                                                                                                                     // 11026
	else {                                                                                                                // 11027
		// Global (browser)                                                                                                  // 11028
		factory(root.CryptoJS);                                                                                              // 11029
	}                                                                                                                     // 11030
}(this, function (CryptoJS) {                                                                                          // 11031
                                                                                                                       // 11032
	(function (Math) {                                                                                                    // 11033
	    // Shortcuts                                                                                                      // 11034
	    var C = CryptoJS;                                                                                                 // 11035
	    var C_lib = C.lib;                                                                                                // 11036
	    var WordArray = C_lib.WordArray;                                                                                  // 11037
	    var Hasher = C_lib.Hasher;                                                                                        // 11038
	    var C_x64 = C.x64;                                                                                                // 11039
	    var X64Word = C_x64.Word;                                                                                         // 11040
	    var C_algo = C.algo;                                                                                              // 11041
                                                                                                                       // 11042
	    // Constants tables                                                                                               // 11043
	    var RHO_OFFSETS = [];                                                                                             // 11044
	    var PI_INDEXES  = [];                                                                                             // 11045
	    var ROUND_CONSTANTS = [];                                                                                         // 11046
                                                                                                                       // 11047
	    // Compute Constants                                                                                              // 11048
	    (function () {                                                                                                    // 11049
	        // Compute rho offset constants                                                                               // 11050
	        var x = 1, y = 0;                                                                                             // 11051
	        for (var t = 0; t < 24; t++) {                                                                                // 11052
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;                                                    // 11053
                                                                                                                       // 11054
	            var newX = y % 5;                                                                                         // 11055
	            var newY = (2 * x + 3 * y) % 5;                                                                           // 11056
	            x = newX;                                                                                                 // 11057
	            y = newY;                                                                                                 // 11058
	        }                                                                                                             // 11059
                                                                                                                       // 11060
	        // Compute pi index constants                                                                                 // 11061
	        for (var x = 0; x < 5; x++) {                                                                                 // 11062
	            for (var y = 0; y < 5; y++) {                                                                             // 11063
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;                                                // 11064
	            }                                                                                                         // 11065
	        }                                                                                                             // 11066
                                                                                                                       // 11067
	        // Compute round constants                                                                                    // 11068
	        var LFSR = 0x01;                                                                                              // 11069
	        for (var i = 0; i < 24; i++) {                                                                                // 11070
	            var roundConstantMsw = 0;                                                                                 // 11071
	            var roundConstantLsw = 0;                                                                                 // 11072
                                                                                                                       // 11073
	            for (var j = 0; j < 7; j++) {                                                                             // 11074
	                if (LFSR & 0x01) {                                                                                    // 11075
	                    var bitPosition = (1 << j) - 1;                                                                   // 11076
	                    if (bitPosition < 32) {                                                                           // 11077
	                        roundConstantLsw ^= 1 << bitPosition;                                                         // 11078
	                    } else /* if (bitPosition >= 32) */ {                                                             // 11079
	                        roundConstantMsw ^= 1 << (bitPosition - 32);                                                  // 11080
	                    }                                                                                                 // 11081
	                }                                                                                                     // 11082
                                                                                                                       // 11083
	                // Compute next LFSR                                                                                  // 11084
	                if (LFSR & 0x80) {                                                                                    // 11085
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1                                     // 11086
	                    LFSR = (LFSR << 1) ^ 0x71;                                                                        // 11087
	                } else {                                                                                              // 11088
	                    LFSR <<= 1;                                                                                       // 11089
	                }                                                                                                     // 11090
	            }                                                                                                         // 11091
                                                                                                                       // 11092
	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);                                  // 11093
	        }                                                                                                             // 11094
	    }());                                                                                                             // 11095
                                                                                                                       // 11096
	    // Reusable objects for temporary values                                                                          // 11097
	    var T = [];                                                                                                       // 11098
	    (function () {                                                                                                    // 11099
	        for (var i = 0; i < 25; i++) {                                                                                // 11100
	            T[i] = X64Word.create();                                                                                  // 11101
	        }                                                                                                             // 11102
	    }());                                                                                                             // 11103
                                                                                                                       // 11104
	    /**                                                                                                               // 11105
	     * SHA-3 hash algorithm.                                                                                          // 11106
	     */                                                                                                               // 11107
	    var SHA3 = C_algo.SHA3 = Hasher.extend({                                                                          // 11108
	        /**                                                                                                           // 11109
	         * Configuration options.                                                                                     // 11110
	         *                                                                                                            // 11111
	         * @property {number} outputLength                                                                            // 11112
	         *   The desired number of bits in the output hash.                                                           // 11113
	         *   Only values permitted are: 224, 256, 384, 512.                                                           // 11114
	         *   Default: 512                                                                                             // 11115
	         */                                                                                                           // 11116
	        cfg: Hasher.cfg.extend({                                                                                      // 11117
	            outputLength: 512                                                                                         // 11118
	        }),                                                                                                           // 11119
                                                                                                                       // 11120
	        _doReset: function () {                                                                                       // 11121
	            var state = this._state = []                                                                              // 11122
	            for (var i = 0; i < 25; i++) {                                                                            // 11123
	                state[i] = new X64Word.init();                                                                        // 11124
	            }                                                                                                         // 11125
                                                                                                                       // 11126
	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;                                                 // 11127
	        },                                                                                                            // 11128
                                                                                                                       // 11129
	        _doProcessBlock: function (M, offset) {                                                                       // 11130
	            // Shortcuts                                                                                              // 11131
	            var state = this._state;                                                                                  // 11132
	            var nBlockSizeLanes = this.blockSize / 2;                                                                 // 11133
                                                                                                                       // 11134
	            // Absorb                                                                                                 // 11135
	            for (var i = 0; i < nBlockSizeLanes; i++) {                                                               // 11136
	                // Shortcuts                                                                                          // 11137
	                var M2i  = M[offset + 2 * i];                                                                         // 11138
	                var M2i1 = M[offset + 2 * i + 1];                                                                     // 11139
                                                                                                                       // 11140
	                // Swap endian                                                                                        // 11141
	                M2i = (                                                                                               // 11142
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |                                                     // 11143
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)                                                       // 11144
	                );                                                                                                    // 11145
	                M2i1 = (                                                                                              // 11146
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |                                                   // 11147
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)                                                     // 11148
	                );                                                                                                    // 11149
                                                                                                                       // 11150
	                // Absorb message into state                                                                          // 11151
	                var lane = state[i];                                                                                  // 11152
	                lane.high ^= M2i1;                                                                                    // 11153
	                lane.low  ^= M2i;                                                                                     // 11154
	            }                                                                                                         // 11155
                                                                                                                       // 11156
	            // Rounds                                                                                                 // 11157
	            for (var round = 0; round < 24; round++) {                                                                // 11158
	                // Theta                                                                                              // 11159
	                for (var x = 0; x < 5; x++) {                                                                         // 11160
	                    // Mix column lanes                                                                               // 11161
	                    var tMsw = 0, tLsw = 0;                                                                           // 11162
	                    for (var y = 0; y < 5; y++) {                                                                     // 11163
	                        var lane = state[x + 5 * y];                                                                  // 11164
	                        tMsw ^= lane.high;                                                                            // 11165
	                        tLsw ^= lane.low;                                                                             // 11166
	                    }                                                                                                 // 11167
                                                                                                                       // 11168
	                    // Temporary values                                                                               // 11169
	                    var Tx = T[x];                                                                                    // 11170
	                    Tx.high = tMsw;                                                                                   // 11171
	                    Tx.low  = tLsw;                                                                                   // 11172
	                }                                                                                                     // 11173
	                for (var x = 0; x < 5; x++) {                                                                         // 11174
	                    // Shortcuts                                                                                      // 11175
	                    var Tx4 = T[(x + 4) % 5];                                                                         // 11176
	                    var Tx1 = T[(x + 1) % 5];                                                                         // 11177
	                    var Tx1Msw = Tx1.high;                                                                            // 11178
	                    var Tx1Lsw = Tx1.low;                                                                             // 11179
                                                                                                                       // 11180
	                    // Mix surrounding columns                                                                        // 11181
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));                                          // 11182
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));                                          // 11183
	                    for (var y = 0; y < 5; y++) {                                                                     // 11184
	                        var lane = state[x + 5 * y];                                                                  // 11185
	                        lane.high ^= tMsw;                                                                            // 11186
	                        lane.low  ^= tLsw;                                                                            // 11187
	                    }                                                                                                 // 11188
	                }                                                                                                     // 11189
                                                                                                                       // 11190
	                // Rho Pi                                                                                             // 11191
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {                                                // 11192
	                    // Shortcuts                                                                                      // 11193
	                    var lane = state[laneIndex];                                                                      // 11194
	                    var laneMsw = lane.high;                                                                          // 11195
	                    var laneLsw = lane.low;                                                                           // 11196
	                    var rhoOffset = RHO_OFFSETS[laneIndex];                                                           // 11197
                                                                                                                       // 11198
	                    // Rotate lanes                                                                                   // 11199
	                    if (rhoOffset < 32) {                                                                             // 11200
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));                           // 11201
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));                           // 11202
	                    } else /* if (rhoOffset >= 32) */ {                                                               // 11203
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));                    // 11204
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));                    // 11205
	                    }                                                                                                 // 11206
                                                                                                                       // 11207
	                    // Transpose lanes                                                                                // 11208
	                    var TPiLane = T[PI_INDEXES[laneIndex]];                                                           // 11209
	                    TPiLane.high = tMsw;                                                                              // 11210
	                    TPiLane.low  = tLsw;                                                                              // 11211
	                }                                                                                                     // 11212
                                                                                                                       // 11213
	                // Rho pi at x = y = 0                                                                                // 11214
	                var T0 = T[0];                                                                                        // 11215
	                var state0 = state[0];                                                                                // 11216
	                T0.high = state0.high;                                                                                // 11217
	                T0.low  = state0.low;                                                                                 // 11218
                                                                                                                       // 11219
	                // Chi                                                                                                // 11220
	                for (var x = 0; x < 5; x++) {                                                                         // 11221
	                    for (var y = 0; y < 5; y++) {                                                                     // 11222
	                        // Shortcuts                                                                                  // 11223
	                        var laneIndex = x + 5 * y;                                                                    // 11224
	                        var lane = state[laneIndex];                                                                  // 11225
	                        var TLane = T[laneIndex];                                                                     // 11226
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];                                                       // 11227
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];                                                       // 11228
                                                                                                                       // 11229
	                        // Mix rows                                                                                   // 11230
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);                                      // 11231
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);                                       // 11232
	                    }                                                                                                 // 11233
	                }                                                                                                     // 11234
                                                                                                                       // 11235
	                // Iota                                                                                               // 11236
	                var lane = state[0];                                                                                  // 11237
	                var roundConstant = ROUND_CONSTANTS[round];                                                           // 11238
	                lane.high ^= roundConstant.high;                                                                      // 11239
	                lane.low  ^= roundConstant.low;;                                                                      // 11240
	            }                                                                                                         // 11241
	        },                                                                                                            // 11242
                                                                                                                       // 11243
	        _doFinalize: function () {                                                                                    // 11244
	            // Shortcuts                                                                                              // 11245
	            var data = this._data;                                                                                    // 11246
	            var dataWords = data.words;                                                                               // 11247
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11248
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11249
	            var blockSizeBits = this.blockSize * 32;                                                                  // 11250
                                                                                                                       // 11251
	            // Add padding                                                                                            // 11252
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);                                               // 11253
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;              // 11254
	            data.sigBytes = dataWords.length * 4;                                                                     // 11255
                                                                                                                       // 11256
	            // Hash final blocks                                                                                      // 11257
	            this._process();                                                                                          // 11258
                                                                                                                       // 11259
	            // Shortcuts                                                                                              // 11260
	            var state = this._state;                                                                                  // 11261
	            var outputLengthBytes = this.cfg.outputLength / 8;                                                        // 11262
	            var outputLengthLanes = outputLengthBytes / 8;                                                            // 11263
                                                                                                                       // 11264
	            // Squeeze                                                                                                // 11265
	            var hashWords = [];                                                                                       // 11266
	            for (var i = 0; i < outputLengthLanes; i++) {                                                             // 11267
	                // Shortcuts                                                                                          // 11268
	                var lane = state[i];                                                                                  // 11269
	                var laneMsw = lane.high;                                                                              // 11270
	                var laneLsw = lane.low;                                                                               // 11271
                                                                                                                       // 11272
	                // Swap endian                                                                                        // 11273
	                laneMsw = (                                                                                           // 11274
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |                                             // 11275
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)                                               // 11276
	                );                                                                                                    // 11277
	                laneLsw = (                                                                                           // 11278
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |                                             // 11279
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)                                               // 11280
	                );                                                                                                    // 11281
                                                                                                                       // 11282
	                // Squeeze state to retrieve hash                                                                     // 11283
	                hashWords.push(laneLsw);                                                                              // 11284
	                hashWords.push(laneMsw);                                                                              // 11285
	            }                                                                                                         // 11286
                                                                                                                       // 11287
	            // Return final computed hash                                                                             // 11288
	            return new WordArray.init(hashWords, outputLengthBytes);                                                  // 11289
	        },                                                                                                            // 11290
                                                                                                                       // 11291
	        clone: function () {                                                                                          // 11292
	            var clone = Hasher.clone.call(this);                                                                      // 11293
                                                                                                                       // 11294
	            var state = clone._state = this._state.slice(0);                                                          // 11295
	            for (var i = 0; i < 25; i++) {                                                                            // 11296
	                state[i] = state[i].clone();                                                                          // 11297
	            }                                                                                                         // 11298
                                                                                                                       // 11299
	            return clone;                                                                                             // 11300
	        }                                                                                                             // 11301
	    });                                                                                                               // 11302
                                                                                                                       // 11303
	    /**                                                                                                               // 11304
	     * Shortcut function to the hasher's object interface.                                                            // 11305
	     *                                                                                                                // 11306
	     * @param {WordArray|string} message The message to hash.                                                         // 11307
	     *                                                                                                                // 11308
	     * @return {WordArray} The hash.                                                                                  // 11309
	     *                                                                                                                // 11310
	     * @static                                                                                                        // 11311
	     *                                                                                                                // 11312
	     * @example                                                                                                       // 11313
	     *                                                                                                                // 11314
	     *     var hash = CryptoJS.SHA3('message');                                                                       // 11315
	     *     var hash = CryptoJS.SHA3(wordArray);                                                                       // 11316
	     */                                                                                                               // 11317
	    C.SHA3 = Hasher._createHelper(SHA3);                                                                              // 11318
                                                                                                                       // 11319
	    /**                                                                                                               // 11320
	     * Shortcut function to the HMAC's object interface.                                                              // 11321
	     *                                                                                                                // 11322
	     * @param {WordArray|string} message The message to hash.                                                         // 11323
	     * @param {WordArray|string} key The secret key.                                                                  // 11324
	     *                                                                                                                // 11325
	     * @return {WordArray} The HMAC.                                                                                  // 11326
	     *                                                                                                                // 11327
	     * @static                                                                                                        // 11328
	     *                                                                                                                // 11329
	     * @example                                                                                                       // 11330
	     *                                                                                                                // 11331
	     *     var hmac = CryptoJS.HmacSHA3(message, key);                                                                // 11332
	     */                                                                                                               // 11333
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);                                                                      // 11334
	}(Math));                                                                                                             // 11335
                                                                                                                       // 11336
                                                                                                                       // 11337
	return CryptoJS.SHA3;                                                                                                 // 11338
                                                                                                                       // 11339
}));                                                                                                                   // 11340
},{"./core":51,"./x64-core":82}],79:[function(require,module,exports){                                                 // 11341
;(function (root, factory, undef) {                                                                                    // 11342
	if (typeof exports === "object") {                                                                                    // 11343
		// CommonJS                                                                                                          // 11344
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));                   // 11345
	}                                                                                                                     // 11346
	else if (typeof define === "function" && define.amd) {                                                                // 11347
		// AMD                                                                                                               // 11348
		define(["./core", "./x64-core", "./sha512"], factory);                                                               // 11349
	}                                                                                                                     // 11350
	else {                                                                                                                // 11351
		// Global (browser)                                                                                                  // 11352
		factory(root.CryptoJS);                                                                                              // 11353
	}                                                                                                                     // 11354
}(this, function (CryptoJS) {                                                                                          // 11355
                                                                                                                       // 11356
	(function () {                                                                                                        // 11357
	    // Shortcuts                                                                                                      // 11358
	    var C = CryptoJS;                                                                                                 // 11359
	    var C_x64 = C.x64;                                                                                                // 11360
	    var X64Word = C_x64.Word;                                                                                         // 11361
	    var X64WordArray = C_x64.WordArray;                                                                               // 11362
	    var C_algo = C.algo;                                                                                              // 11363
	    var SHA512 = C_algo.SHA512;                                                                                       // 11364
                                                                                                                       // 11365
	    /**                                                                                                               // 11366
	     * SHA-384 hash algorithm.                                                                                        // 11367
	     */                                                                                                               // 11368
	    var SHA384 = C_algo.SHA384 = SHA512.extend({                                                                      // 11369
	        _doReset: function () {                                                                                       // 11370
	            this._hash = new X64WordArray.init([                                                                      // 11371
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),                   // 11372
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),                   // 11373
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),                   // 11374
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)                    // 11375
	            ]);                                                                                                       // 11376
	        },                                                                                                            // 11377
                                                                                                                       // 11378
	        _doFinalize: function () {                                                                                    // 11379
	            var hash = SHA512._doFinalize.call(this);                                                                 // 11380
                                                                                                                       // 11381
	            hash.sigBytes -= 16;                                                                                      // 11382
                                                                                                                       // 11383
	            return hash;                                                                                              // 11384
	        }                                                                                                             // 11385
	    });                                                                                                               // 11386
                                                                                                                       // 11387
	    /**                                                                                                               // 11388
	     * Shortcut function to the hasher's object interface.                                                            // 11389
	     *                                                                                                                // 11390
	     * @param {WordArray|string} message The message to hash.                                                         // 11391
	     *                                                                                                                // 11392
	     * @return {WordArray} The hash.                                                                                  // 11393
	     *                                                                                                                // 11394
	     * @static                                                                                                        // 11395
	     *                                                                                                                // 11396
	     * @example                                                                                                       // 11397
	     *                                                                                                                // 11398
	     *     var hash = CryptoJS.SHA384('message');                                                                     // 11399
	     *     var hash = CryptoJS.SHA384(wordArray);                                                                     // 11400
	     */                                                                                                               // 11401
	    C.SHA384 = SHA512._createHelper(SHA384);                                                                          // 11402
                                                                                                                       // 11403
	    /**                                                                                                               // 11404
	     * Shortcut function to the HMAC's object interface.                                                              // 11405
	     *                                                                                                                // 11406
	     * @param {WordArray|string} message The message to hash.                                                         // 11407
	     * @param {WordArray|string} key The secret key.                                                                  // 11408
	     *                                                                                                                // 11409
	     * @return {WordArray} The HMAC.                                                                                  // 11410
	     *                                                                                                                // 11411
	     * @static                                                                                                        // 11412
	     *                                                                                                                // 11413
	     * @example                                                                                                       // 11414
	     *                                                                                                                // 11415
	     *     var hmac = CryptoJS.HmacSHA384(message, key);                                                              // 11416
	     */                                                                                                               // 11417
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);                                                                  // 11418
	}());                                                                                                                 // 11419
                                                                                                                       // 11420
                                                                                                                       // 11421
	return CryptoJS.SHA384;                                                                                               // 11422
                                                                                                                       // 11423
}));                                                                                                                   // 11424
},{"./core":51,"./sha512":80,"./x64-core":82}],80:[function(require,module,exports){                                   // 11425
;(function (root, factory, undef) {                                                                                    // 11426
	if (typeof exports === "object") {                                                                                    // 11427
		// CommonJS                                                                                                          // 11428
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                        // 11429
	}                                                                                                                     // 11430
	else if (typeof define === "function" && define.amd) {                                                                // 11431
		// AMD                                                                                                               // 11432
		define(["./core", "./x64-core"], factory);                                                                           // 11433
	}                                                                                                                     // 11434
	else {                                                                                                                // 11435
		// Global (browser)                                                                                                  // 11436
		factory(root.CryptoJS);                                                                                              // 11437
	}                                                                                                                     // 11438
}(this, function (CryptoJS) {                                                                                          // 11439
                                                                                                                       // 11440
	(function () {                                                                                                        // 11441
	    // Shortcuts                                                                                                      // 11442
	    var C = CryptoJS;                                                                                                 // 11443
	    var C_lib = C.lib;                                                                                                // 11444
	    var Hasher = C_lib.Hasher;                                                                                        // 11445
	    var C_x64 = C.x64;                                                                                                // 11446
	    var X64Word = C_x64.Word;                                                                                         // 11447
	    var X64WordArray = C_x64.WordArray;                                                                               // 11448
	    var C_algo = C.algo;                                                                                              // 11449
                                                                                                                       // 11450
	    function X64Word_create() {                                                                                       // 11451
	        return X64Word.create.apply(X64Word, arguments);                                                              // 11452
	    }                                                                                                                 // 11453
                                                                                                                       // 11454
	    // Constants                                                                                                      // 11455
	    var K = [                                                                                                         // 11456
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),                               // 11457
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),                               // 11458
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),                               // 11459
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),                               // 11460
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),                               // 11461
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),                               // 11462
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),                               // 11463
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),                               // 11464
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),                               // 11465
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),                               // 11466
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),                               // 11467
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),                               // 11468
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),                               // 11469
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),                               // 11470
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),                               // 11471
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),                               // 11472
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),                               // 11473
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),                               // 11474
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),                               // 11475
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),                               // 11476
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),                               // 11477
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),                               // 11478
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),                               // 11479
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),                               // 11480
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),                               // 11481
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),                               // 11482
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),                               // 11483
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),                               // 11484
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),                               // 11485
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),                               // 11486
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),                               // 11487
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),                               // 11488
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),                               // 11489
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),                               // 11490
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),                               // 11491
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),                               // 11492
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),                               // 11493
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),                               // 11494
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),                               // 11495
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)                                // 11496
	    ];                                                                                                                // 11497
                                                                                                                       // 11498
	    // Reusable objects                                                                                               // 11499
	    var W = [];                                                                                                       // 11500
	    (function () {                                                                                                    // 11501
	        for (var i = 0; i < 80; i++) {                                                                                // 11502
	            W[i] = X64Word_create();                                                                                  // 11503
	        }                                                                                                             // 11504
	    }());                                                                                                             // 11505
                                                                                                                       // 11506
	    /**                                                                                                               // 11507
	     * SHA-512 hash algorithm.                                                                                        // 11508
	     */                                                                                                               // 11509
	    var SHA512 = C_algo.SHA512 = Hasher.extend({                                                                      // 11510
	        _doReset: function () {                                                                                       // 11511
	            this._hash = new X64WordArray.init([                                                                      // 11512
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),                   // 11513
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),                   // 11514
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),                   // 11515
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)                    // 11516
	            ]);                                                                                                       // 11517
	        },                                                                                                            // 11518
                                                                                                                       // 11519
	        _doProcessBlock: function (M, offset) {                                                                       // 11520
	            // Shortcuts                                                                                              // 11521
	            var H = this._hash.words;                                                                                 // 11522
                                                                                                                       // 11523
	            var H0 = H[0];                                                                                            // 11524
	            var H1 = H[1];                                                                                            // 11525
	            var H2 = H[2];                                                                                            // 11526
	            var H3 = H[3];                                                                                            // 11527
	            var H4 = H[4];                                                                                            // 11528
	            var H5 = H[5];                                                                                            // 11529
	            var H6 = H[6];                                                                                            // 11530
	            var H7 = H[7];                                                                                            // 11531
                                                                                                                       // 11532
	            var H0h = H0.high;                                                                                        // 11533
	            var H0l = H0.low;                                                                                         // 11534
	            var H1h = H1.high;                                                                                        // 11535
	            var H1l = H1.low;                                                                                         // 11536
	            var H2h = H2.high;                                                                                        // 11537
	            var H2l = H2.low;                                                                                         // 11538
	            var H3h = H3.high;                                                                                        // 11539
	            var H3l = H3.low;                                                                                         // 11540
	            var H4h = H4.high;                                                                                        // 11541
	            var H4l = H4.low;                                                                                         // 11542
	            var H5h = H5.high;                                                                                        // 11543
	            var H5l = H5.low;                                                                                         // 11544
	            var H6h = H6.high;                                                                                        // 11545
	            var H6l = H6.low;                                                                                         // 11546
	            var H7h = H7.high;                                                                                        // 11547
	            var H7l = H7.low;                                                                                         // 11548
                                                                                                                       // 11549
	            // Working variables                                                                                      // 11550
	            var ah = H0h;                                                                                             // 11551
	            var al = H0l;                                                                                             // 11552
	            var bh = H1h;                                                                                             // 11553
	            var bl = H1l;                                                                                             // 11554
	            var ch = H2h;                                                                                             // 11555
	            var cl = H2l;                                                                                             // 11556
	            var dh = H3h;                                                                                             // 11557
	            var dl = H3l;                                                                                             // 11558
	            var eh = H4h;                                                                                             // 11559
	            var el = H4l;                                                                                             // 11560
	            var fh = H5h;                                                                                             // 11561
	            var fl = H5l;                                                                                             // 11562
	            var gh = H6h;                                                                                             // 11563
	            var gl = H6l;                                                                                             // 11564
	            var hh = H7h;                                                                                             // 11565
	            var hl = H7l;                                                                                             // 11566
                                                                                                                       // 11567
	            // Rounds                                                                                                 // 11568
	            for (var i = 0; i < 80; i++) {                                                                            // 11569
	                // Shortcut                                                                                           // 11570
	                var Wi = W[i];                                                                                        // 11571
                                                                                                                       // 11572
	                // Extend message                                                                                     // 11573
	                if (i < 16) {                                                                                         // 11574
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;                                                    // 11575
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;                                                    // 11576
	                } else {                                                                                              // 11577
	                    // Gamma0                                                                                         // 11578
	                    var gamma0x  = W[i - 15];                                                                         // 11579
	                    var gamma0xh = gamma0x.high;                                                                      // 11580
	                    var gamma0xl = gamma0x.low;                                                                       // 11581
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));
                                                                                                                       // 11584
	                    // Gamma1                                                                                         // 11585
	                    var gamma1x  = W[i - 2];                                                                          // 11586
	                    var gamma1xh = gamma1x.high;                                                                      // 11587
	                    var gamma1xl = gamma1x.low;                                                                       // 11588
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));
                                                                                                                       // 11591
	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]                                                  // 11592
	                    var Wi7  = W[i - 7];                                                                              // 11593
	                    var Wi7h = Wi7.high;                                                                              // 11594
	                    var Wi7l = Wi7.low;                                                                               // 11595
                                                                                                                       // 11596
	                    var Wi16  = W[i - 16];                                                                            // 11597
	                    var Wi16h = Wi16.high;                                                                            // 11598
	                    var Wi16l = Wi16.low;                                                                             // 11599
                                                                                                                       // 11600
	                    var Wil = gamma0l + Wi7l;                                                                         // 11601
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);                               // 11602
	                    var Wil = Wil + gamma1l;                                                                          // 11603
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);                                // 11604
	                    var Wil = Wil + Wi16l;                                                                            // 11605
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);                                    // 11606
                                                                                                                       // 11607
	                    Wi.high = Wih;                                                                                    // 11608
	                    Wi.low  = Wil;                                                                                    // 11609
	                }                                                                                                     // 11610
                                                                                                                       // 11611
	                var chh  = (eh & fh) ^ (~eh & gh);                                                                    // 11612
	                var chl  = (el & fl) ^ (~el & gl);                                                                    // 11613
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);                                                         // 11614
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);                                                         // 11615
                                                                                                                       // 11616
	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));    // 11617
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));    // 11618
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));    // 11619
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));    // 11620
                                                                                                                       // 11621
	                // t1 = h + sigma1 + ch + K[i] + W[i]                                                                 // 11622
	                var Ki  = K[i];                                                                                       // 11623
	                var Kih = Ki.high;                                                                                    // 11624
	                var Kil = Ki.low;                                                                                     // 11625
                                                                                                                       // 11626
	                var t1l = hl + sigma1l;                                                                               // 11627
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);                                          // 11628
	                var t1l = t1l + chl;                                                                                  // 11629
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);                                            // 11630
	                var t1l = t1l + Kil;                                                                                  // 11631
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);                                            // 11632
	                var t1l = t1l + Wil;                                                                                  // 11633
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);                                            // 11634
                                                                                                                       // 11635
	                // t2 = sigma0 + maj                                                                                  // 11636
	                var t2l = sigma0l + majl;                                                                             // 11637
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);                                   // 11638
                                                                                                                       // 11639
	                // Update working variables                                                                           // 11640
	                hh = gh;                                                                                              // 11641
	                hl = gl;                                                                                              // 11642
	                gh = fh;                                                                                              // 11643
	                gl = fl;                                                                                              // 11644
	                fh = eh;                                                                                              // 11645
	                fl = el;                                                                                              // 11646
	                el = (dl + t1l) | 0;                                                                                  // 11647
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;                                              // 11648
	                dh = ch;                                                                                              // 11649
	                dl = cl;                                                                                              // 11650
	                ch = bh;                                                                                              // 11651
	                cl = bl;                                                                                              // 11652
	                bh = ah;                                                                                              // 11653
	                bl = al;                                                                                              // 11654
	                al = (t1l + t2l) | 0;                                                                                 // 11655
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;                                            // 11656
	            }                                                                                                         // 11657
                                                                                                                       // 11658
	            // Intermediate hash value                                                                                // 11659
	            H0l = H0.low  = (H0l + al);                                                                               // 11660
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));                                                // 11661
	            H1l = H1.low  = (H1l + bl);                                                                               // 11662
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));                                                // 11663
	            H2l = H2.low  = (H2l + cl);                                                                               // 11664
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));                                                // 11665
	            H3l = H3.low  = (H3l + dl);                                                                               // 11666
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));                                                // 11667
	            H4l = H4.low  = (H4l + el);                                                                               // 11668
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));                                                // 11669
	            H5l = H5.low  = (H5l + fl);                                                                               // 11670
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));                                                // 11671
	            H6l = H6.low  = (H6l + gl);                                                                               // 11672
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));                                                // 11673
	            H7l = H7.low  = (H7l + hl);                                                                               // 11674
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));                                                // 11675
	        },                                                                                                            // 11676
                                                                                                                       // 11677
	        _doFinalize: function () {                                                                                    // 11678
	            // Shortcuts                                                                                              // 11679
	            var data = this._data;                                                                                    // 11680
	            var dataWords = data.words;                                                                               // 11681
                                                                                                                       // 11682
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11683
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11684
                                                                                                                       // 11685
	            // Add padding                                                                                            // 11686
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 11687
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);                 // 11688
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;                                           // 11689
	            data.sigBytes = dataWords.length * 4;                                                                     // 11690
                                                                                                                       // 11691
	            // Hash final blocks                                                                                      // 11692
	            this._process();                                                                                          // 11693
                                                                                                                       // 11694
	            // Convert hash to 32-bit word array before returning                                                     // 11695
	            var hash = this._hash.toX32();                                                                            // 11696
                                                                                                                       // 11697
	            // Return final computed hash                                                                             // 11698
	            return hash;                                                                                              // 11699
	        },                                                                                                            // 11700
                                                                                                                       // 11701
	        clone: function () {                                                                                          // 11702
	            var clone = Hasher.clone.call(this);                                                                      // 11703
	            clone._hash = this._hash.clone();                                                                         // 11704
                                                                                                                       // 11705
	            return clone;                                                                                             // 11706
	        },                                                                                                            // 11707
                                                                                                                       // 11708
	        blockSize: 1024/32                                                                                            // 11709
	    });                                                                                                               // 11710
                                                                                                                       // 11711
	    /**                                                                                                               // 11712
	     * Shortcut function to the hasher's object interface.                                                            // 11713
	     *                                                                                                                // 11714
	     * @param {WordArray|string} message The message to hash.                                                         // 11715
	     *                                                                                                                // 11716
	     * @return {WordArray} The hash.                                                                                  // 11717
	     *                                                                                                                // 11718
	     * @static                                                                                                        // 11719
	     *                                                                                                                // 11720
	     * @example                                                                                                       // 11721
	     *                                                                                                                // 11722
	     *     var hash = CryptoJS.SHA512('message');                                                                     // 11723
	     *     var hash = CryptoJS.SHA512(wordArray);                                                                     // 11724
	     */                                                                                                               // 11725
	    C.SHA512 = Hasher._createHelper(SHA512);                                                                          // 11726
                                                                                                                       // 11727
	    /**                                                                                                               // 11728
	     * Shortcut function to the HMAC's object interface.                                                              // 11729
	     *                                                                                                                // 11730
	     * @param {WordArray|string} message The message to hash.                                                         // 11731
	     * @param {WordArray|string} key The secret key.                                                                  // 11732
	     *                                                                                                                // 11733
	     * @return {WordArray} The HMAC.                                                                                  // 11734
	     *                                                                                                                // 11735
	     * @static                                                                                                        // 11736
	     *                                                                                                                // 11737
	     * @example                                                                                                       // 11738
	     *                                                                                                                // 11739
	     *     var hmac = CryptoJS.HmacSHA512(message, key);                                                              // 11740
	     */                                                                                                               // 11741
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);                                                                  // 11742
	}());                                                                                                                 // 11743
                                                                                                                       // 11744
                                                                                                                       // 11745
	return CryptoJS.SHA512;                                                                                               // 11746
                                                                                                                       // 11747
}));                                                                                                                   // 11748
},{"./core":51,"./x64-core":82}],81:[function(require,module,exports){                                                 // 11749
;(function (root, factory, undef) {                                                                                    // 11750
	if (typeof exports === "object") {                                                                                    // 11751
		// CommonJS                                                                                                          // 11752
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 11754
	else if (typeof define === "function" && define.amd) {                                                                // 11755
		// AMD                                                                                                               // 11756
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 11757
	}                                                                                                                     // 11758
	else {                                                                                                                // 11759
		// Global (browser)                                                                                                  // 11760
		factory(root.CryptoJS);                                                                                              // 11761
	}                                                                                                                     // 11762
}(this, function (CryptoJS) {                                                                                          // 11763
                                                                                                                       // 11764
	(function () {                                                                                                        // 11765
	    // Shortcuts                                                                                                      // 11766
	    var C = CryptoJS;                                                                                                 // 11767
	    var C_lib = C.lib;                                                                                                // 11768
	    var WordArray = C_lib.WordArray;                                                                                  // 11769
	    var BlockCipher = C_lib.BlockCipher;                                                                              // 11770
	    var C_algo = C.algo;                                                                                              // 11771
                                                                                                                       // 11772
	    // Permuted Choice 1 constants                                                                                    // 11773
	    var PC1 = [                                                                                                       // 11774
	        57, 49, 41, 33, 25, 17, 9,  1,                                                                                // 11775
	        58, 50, 42, 34, 26, 18, 10, 2,                                                                                // 11776
	        59, 51, 43, 35, 27, 19, 11, 3,                                                                                // 11777
	        60, 52, 44, 36, 63, 55, 47, 39,                                                                               // 11778
	        31, 23, 15, 7,  62, 54, 46, 38,                                                                               // 11779
	        30, 22, 14, 6,  61, 53, 45, 37,                                                                               // 11780
	        29, 21, 13, 5,  28, 20, 12, 4                                                                                 // 11781
	    ];                                                                                                                // 11782
                                                                                                                       // 11783
	    // Permuted Choice 2 constants                                                                                    // 11784
	    var PC2 = [                                                                                                       // 11785
	        14, 17, 11, 24, 1,  5,                                                                                        // 11786
	        3,  28, 15, 6,  21, 10,                                                                                       // 11787
	        23, 19, 12, 4,  26, 8,                                                                                        // 11788
	        16, 7,  27, 20, 13, 2,                                                                                        // 11789
	        41, 52, 31, 37, 47, 55,                                                                                       // 11790
	        30, 40, 51, 45, 33, 48,                                                                                       // 11791
	        44, 49, 39, 56, 34, 53,                                                                                       // 11792
	        46, 42, 50, 36, 29, 32                                                                                        // 11793
	    ];                                                                                                                // 11794
                                                                                                                       // 11795
	    // Cumulative bit shift constants                                                                                 // 11796
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];                                // 11797
                                                                                                                       // 11798
	    // SBOXes and round permutation constants                                                                         // 11799
	    var SBOX_P = [                                                                                                    // 11800
	        {                                                                                                             // 11801
	            0x0: 0x808200,                                                                                            // 11802
	            0x10000000: 0x8000,                                                                                       // 11803
	            0x20000000: 0x808002,                                                                                     // 11804
	            0x30000000: 0x2,                                                                                          // 11805
	            0x40000000: 0x200,                                                                                        // 11806
	            0x50000000: 0x808202,                                                                                     // 11807
	            0x60000000: 0x800202,                                                                                     // 11808
	            0x70000000: 0x800000,                                                                                     // 11809
	            0x80000000: 0x202,                                                                                        // 11810
	            0x90000000: 0x800200,                                                                                     // 11811
	            0xa0000000: 0x8200,                                                                                       // 11812
	            0xb0000000: 0x808000,                                                                                     // 11813
	            0xc0000000: 0x8002,                                                                                       // 11814
	            0xd0000000: 0x800002,                                                                                     // 11815
	            0xe0000000: 0x0,                                                                                          // 11816
	            0xf0000000: 0x8202,                                                                                       // 11817
	            0x8000000: 0x0,                                                                                           // 11818
	            0x18000000: 0x808202,                                                                                     // 11819
	            0x28000000: 0x8202,                                                                                       // 11820
	            0x38000000: 0x8000,                                                                                       // 11821
	            0x48000000: 0x808200,                                                                                     // 11822
	            0x58000000: 0x200,                                                                                        // 11823
	            0x68000000: 0x808002,                                                                                     // 11824
	            0x78000000: 0x2,                                                                                          // 11825
	            0x88000000: 0x800200,                                                                                     // 11826
	            0x98000000: 0x8200,                                                                                       // 11827
	            0xa8000000: 0x808000,                                                                                     // 11828
	            0xb8000000: 0x800202,                                                                                     // 11829
	            0xc8000000: 0x800002,                                                                                     // 11830
	            0xd8000000: 0x8002,                                                                                       // 11831
	            0xe8000000: 0x202,                                                                                        // 11832
	            0xf8000000: 0x800000,                                                                                     // 11833
	            0x1: 0x8000,                                                                                              // 11834
	            0x10000001: 0x2,                                                                                          // 11835
	            0x20000001: 0x808200,                                                                                     // 11836
	            0x30000001: 0x800000,                                                                                     // 11837
	            0x40000001: 0x808002,                                                                                     // 11838
	            0x50000001: 0x8200,                                                                                       // 11839
	            0x60000001: 0x200,                                                                                        // 11840
	            0x70000001: 0x800202,                                                                                     // 11841
	            0x80000001: 0x808202,                                                                                     // 11842
	            0x90000001: 0x808000,                                                                                     // 11843
	            0xa0000001: 0x800002,                                                                                     // 11844
	            0xb0000001: 0x8202,                                                                                       // 11845
	            0xc0000001: 0x202,                                                                                        // 11846
	            0xd0000001: 0x800200,                                                                                     // 11847
	            0xe0000001: 0x8002,                                                                                       // 11848
	            0xf0000001: 0x0,                                                                                          // 11849
	            0x8000001: 0x808202,                                                                                      // 11850
	            0x18000001: 0x808000,                                                                                     // 11851
	            0x28000001: 0x800000,                                                                                     // 11852
	            0x38000001: 0x200,                                                                                        // 11853
	            0x48000001: 0x8000,                                                                                       // 11854
	            0x58000001: 0x800002,                                                                                     // 11855
	            0x68000001: 0x2,                                                                                          // 11856
	            0x78000001: 0x8202,                                                                                       // 11857
	            0x88000001: 0x8002,                                                                                       // 11858
	            0x98000001: 0x800202,                                                                                     // 11859
	            0xa8000001: 0x202,                                                                                        // 11860
	            0xb8000001: 0x808200,                                                                                     // 11861
	            0xc8000001: 0x800200,                                                                                     // 11862
	            0xd8000001: 0x0,                                                                                          // 11863
	            0xe8000001: 0x8200,                                                                                       // 11864
	            0xf8000001: 0x808002                                                                                      // 11865
	        },                                                                                                            // 11866
	        {                                                                                                             // 11867
	            0x0: 0x40084010,                                                                                          // 11868
	            0x1000000: 0x4000,                                                                                        // 11869
	            0x2000000: 0x80000,                                                                                       // 11870
	            0x3000000: 0x40080010,                                                                                    // 11871
	            0x4000000: 0x40000010,                                                                                    // 11872
	            0x5000000: 0x40084000,                                                                                    // 11873
	            0x6000000: 0x40004000,                                                                                    // 11874
	            0x7000000: 0x10,                                                                                          // 11875
	            0x8000000: 0x84000,                                                                                       // 11876
	            0x9000000: 0x40004010,                                                                                    // 11877
	            0xa000000: 0x40000000,                                                                                    // 11878
	            0xb000000: 0x84010,                                                                                       // 11879
	            0xc000000: 0x80010,                                                                                       // 11880
	            0xd000000: 0x0,                                                                                           // 11881
	            0xe000000: 0x4010,                                                                                        // 11882
	            0xf000000: 0x40080000,                                                                                    // 11883
	            0x800000: 0x40004000,                                                                                     // 11884
	            0x1800000: 0x84010,                                                                                       // 11885
	            0x2800000: 0x10,                                                                                          // 11886
	            0x3800000: 0x40004010,                                                                                    // 11887
	            0x4800000: 0x40084010,                                                                                    // 11888
	            0x5800000: 0x40000000,                                                                                    // 11889
	            0x6800000: 0x80000,                                                                                       // 11890
	            0x7800000: 0x40080010,                                                                                    // 11891
	            0x8800000: 0x80010,                                                                                       // 11892
	            0x9800000: 0x0,                                                                                           // 11893
	            0xa800000: 0x4000,                                                                                        // 11894
	            0xb800000: 0x40080000,                                                                                    // 11895
	            0xc800000: 0x40000010,                                                                                    // 11896
	            0xd800000: 0x84000,                                                                                       // 11897
	            0xe800000: 0x40084000,                                                                                    // 11898
	            0xf800000: 0x4010,                                                                                        // 11899
	            0x10000000: 0x0,                                                                                          // 11900
	            0x11000000: 0x40080010,                                                                                   // 11901
	            0x12000000: 0x40004010,                                                                                   // 11902
	            0x13000000: 0x40084000,                                                                                   // 11903
	            0x14000000: 0x40080000,                                                                                   // 11904
	            0x15000000: 0x10,                                                                                         // 11905
	            0x16000000: 0x84010,                                                                                      // 11906
	            0x17000000: 0x4000,                                                                                       // 11907
	            0x18000000: 0x4010,                                                                                       // 11908
	            0x19000000: 0x80000,                                                                                      // 11909
	            0x1a000000: 0x80010,                                                                                      // 11910
	            0x1b000000: 0x40000010,                                                                                   // 11911
	            0x1c000000: 0x84000,                                                                                      // 11912
	            0x1d000000: 0x40004000,                                                                                   // 11913
	            0x1e000000: 0x40000000,                                                                                   // 11914
	            0x1f000000: 0x40084010,                                                                                   // 11915
	            0x10800000: 0x84010,                                                                                      // 11916
	            0x11800000: 0x80000,                                                                                      // 11917
	            0x12800000: 0x40080000,                                                                                   // 11918
	            0x13800000: 0x4000,                                                                                       // 11919
	            0x14800000: 0x40004000,                                                                                   // 11920
	            0x15800000: 0x40084010,                                                                                   // 11921
	            0x16800000: 0x10,                                                                                         // 11922
	            0x17800000: 0x40000000,                                                                                   // 11923
	            0x18800000: 0x40084000,                                                                                   // 11924
	            0x19800000: 0x40000010,                                                                                   // 11925
	            0x1a800000: 0x40004010,                                                                                   // 11926
	            0x1b800000: 0x80010,                                                                                      // 11927
	            0x1c800000: 0x0,                                                                                          // 11928
	            0x1d800000: 0x4010,                                                                                       // 11929
	            0x1e800000: 0x40080010,                                                                                   // 11930
	            0x1f800000: 0x84000                                                                                       // 11931
	        },                                                                                                            // 11932
	        {                                                                                                             // 11933
	            0x0: 0x104,                                                                                               // 11934
	            0x100000: 0x0,                                                                                            // 11935
	            0x200000: 0x4000100,                                                                                      // 11936
	            0x300000: 0x10104,                                                                                        // 11937
	            0x400000: 0x10004,                                                                                        // 11938
	            0x500000: 0x4000004,                                                                                      // 11939
	            0x600000: 0x4010104,                                                                                      // 11940
	            0x700000: 0x4010000,                                                                                      // 11941
	            0x800000: 0x4000000,                                                                                      // 11942
	            0x900000: 0x4010100,                                                                                      // 11943
	            0xa00000: 0x10100,                                                                                        // 11944
	            0xb00000: 0x4010004,                                                                                      // 11945
	            0xc00000: 0x4000104,                                                                                      // 11946
	            0xd00000: 0x10000,                                                                                        // 11947
	            0xe00000: 0x4,                                                                                            // 11948
	            0xf00000: 0x100,                                                                                          // 11949
	            0x80000: 0x4010100,                                                                                       // 11950
	            0x180000: 0x4010004,                                                                                      // 11951
	            0x280000: 0x0,                                                                                            // 11952
	            0x380000: 0x4000100,                                                                                      // 11953
	            0x480000: 0x4000004,                                                                                      // 11954
	            0x580000: 0x10000,                                                                                        // 11955
	            0x680000: 0x10004,                                                                                        // 11956
	            0x780000: 0x104,                                                                                          // 11957
	            0x880000: 0x4,                                                                                            // 11958
	            0x980000: 0x100,                                                                                          // 11959
	            0xa80000: 0x4010000,                                                                                      // 11960
	            0xb80000: 0x10104,                                                                                        // 11961
	            0xc80000: 0x10100,                                                                                        // 11962
	            0xd80000: 0x4000104,                                                                                      // 11963
	            0xe80000: 0x4010104,                                                                                      // 11964
	            0xf80000: 0x4000000,                                                                                      // 11965
	            0x1000000: 0x4010100,                                                                                     // 11966
	            0x1100000: 0x10004,                                                                                       // 11967
	            0x1200000: 0x10000,                                                                                       // 11968
	            0x1300000: 0x4000100,                                                                                     // 11969
	            0x1400000: 0x100,                                                                                         // 11970
	            0x1500000: 0x4010104,                                                                                     // 11971
	            0x1600000: 0x4000004,                                                                                     // 11972
	            0x1700000: 0x0,                                                                                           // 11973
	            0x1800000: 0x4000104,                                                                                     // 11974
	            0x1900000: 0x4000000,                                                                                     // 11975
	            0x1a00000: 0x4,                                                                                           // 11976
	            0x1b00000: 0x10100,                                                                                       // 11977
	            0x1c00000: 0x4010000,                                                                                     // 11978
	            0x1d00000: 0x104,                                                                                         // 11979
	            0x1e00000: 0x10104,                                                                                       // 11980
	            0x1f00000: 0x4010004,                                                                                     // 11981
	            0x1080000: 0x4000000,                                                                                     // 11982
	            0x1180000: 0x104,                                                                                         // 11983
	            0x1280000: 0x4010100,                                                                                     // 11984
	            0x1380000: 0x0,                                                                                           // 11985
	            0x1480000: 0x10004,                                                                                       // 11986
	            0x1580000: 0x4000100,                                                                                     // 11987
	            0x1680000: 0x100,                                                                                         // 11988
	            0x1780000: 0x4010004,                                                                                     // 11989
	            0x1880000: 0x10000,                                                                                       // 11990
	            0x1980000: 0x4010104,                                                                                     // 11991
	            0x1a80000: 0x10104,                                                                                       // 11992
	            0x1b80000: 0x4000004,                                                                                     // 11993
	            0x1c80000: 0x4000104,                                                                                     // 11994
	            0x1d80000: 0x4010000,                                                                                     // 11995
	            0x1e80000: 0x4,                                                                                           // 11996
	            0x1f80000: 0x10100                                                                                        // 11997
	        },                                                                                                            // 11998
	        {                                                                                                             // 11999
	            0x0: 0x80401000,                                                                                          // 12000
	            0x10000: 0x80001040,                                                                                      // 12001
	            0x20000: 0x401040,                                                                                        // 12002
	            0x30000: 0x80400000,                                                                                      // 12003
	            0x40000: 0x0,                                                                                             // 12004
	            0x50000: 0x401000,                                                                                        // 12005
	            0x60000: 0x80000040,                                                                                      // 12006
	            0x70000: 0x400040,                                                                                        // 12007
	            0x80000: 0x80000000,                                                                                      // 12008
	            0x90000: 0x400000,                                                                                        // 12009
	            0xa0000: 0x40,                                                                                            // 12010
	            0xb0000: 0x80001000,                                                                                      // 12011
	            0xc0000: 0x80400040,                                                                                      // 12012
	            0xd0000: 0x1040,                                                                                          // 12013
	            0xe0000: 0x1000,                                                                                          // 12014
	            0xf0000: 0x80401040,                                                                                      // 12015
	            0x8000: 0x80001040,                                                                                       // 12016
	            0x18000: 0x40,                                                                                            // 12017
	            0x28000: 0x80400040,                                                                                      // 12018
	            0x38000: 0x80001000,                                                                                      // 12019
	            0x48000: 0x401000,                                                                                        // 12020
	            0x58000: 0x80401040,                                                                                      // 12021
	            0x68000: 0x0,                                                                                             // 12022
	            0x78000: 0x80400000,                                                                                      // 12023
	            0x88000: 0x1000,                                                                                          // 12024
	            0x98000: 0x80401000,                                                                                      // 12025
	            0xa8000: 0x400000,                                                                                        // 12026
	            0xb8000: 0x1040,                                                                                          // 12027
	            0xc8000: 0x80000000,                                                                                      // 12028
	            0xd8000: 0x400040,                                                                                        // 12029
	            0xe8000: 0x401040,                                                                                        // 12030
	            0xf8000: 0x80000040,                                                                                      // 12031
	            0x100000: 0x400040,                                                                                       // 12032
	            0x110000: 0x401000,                                                                                       // 12033
	            0x120000: 0x80000040,                                                                                     // 12034
	            0x130000: 0x0,                                                                                            // 12035
	            0x140000: 0x1040,                                                                                         // 12036
	            0x150000: 0x80400040,                                                                                     // 12037
	            0x160000: 0x80401000,                                                                                     // 12038
	            0x170000: 0x80001040,                                                                                     // 12039
	            0x180000: 0x80401040,                                                                                     // 12040
	            0x190000: 0x80000000,                                                                                     // 12041
	            0x1a0000: 0x80400000,                                                                                     // 12042
	            0x1b0000: 0x401040,                                                                                       // 12043
	            0x1c0000: 0x80001000,                                                                                     // 12044
	            0x1d0000: 0x400000,                                                                                       // 12045
	            0x1e0000: 0x40,                                                                                           // 12046
	            0x1f0000: 0x1000,                                                                                         // 12047
	            0x108000: 0x80400000,                                                                                     // 12048
	            0x118000: 0x80401040,                                                                                     // 12049
	            0x128000: 0x0,                                                                                            // 12050
	            0x138000: 0x401000,                                                                                       // 12051
	            0x148000: 0x400040,                                                                                       // 12052
	            0x158000: 0x80000000,                                                                                     // 12053
	            0x168000: 0x80001040,                                                                                     // 12054
	            0x178000: 0x40,                                                                                           // 12055
	            0x188000: 0x80000040,                                                                                     // 12056
	            0x198000: 0x1000,                                                                                         // 12057
	            0x1a8000: 0x80001000,                                                                                     // 12058
	            0x1b8000: 0x80400040,                                                                                     // 12059
	            0x1c8000: 0x1040,                                                                                         // 12060
	            0x1d8000: 0x80401000,                                                                                     // 12061
	            0x1e8000: 0x400000,                                                                                       // 12062
	            0x1f8000: 0x401040                                                                                        // 12063
	        },                                                                                                            // 12064
	        {                                                                                                             // 12065
	            0x0: 0x80,                                                                                                // 12066
	            0x1000: 0x1040000,                                                                                        // 12067
	            0x2000: 0x40000,                                                                                          // 12068
	            0x3000: 0x20000000,                                                                                       // 12069
	            0x4000: 0x20040080,                                                                                       // 12070
	            0x5000: 0x1000080,                                                                                        // 12071
	            0x6000: 0x21000080,                                                                                       // 12072
	            0x7000: 0x40080,                                                                                          // 12073
	            0x8000: 0x1000000,                                                                                        // 12074
	            0x9000: 0x20040000,                                                                                       // 12075
	            0xa000: 0x20000080,                                                                                       // 12076
	            0xb000: 0x21040080,                                                                                       // 12077
	            0xc000: 0x21040000,                                                                                       // 12078
	            0xd000: 0x0,                                                                                              // 12079
	            0xe000: 0x1040080,                                                                                        // 12080
	            0xf000: 0x21000000,                                                                                       // 12081
	            0x800: 0x1040080,                                                                                         // 12082
	            0x1800: 0x21000080,                                                                                       // 12083
	            0x2800: 0x80,                                                                                             // 12084
	            0x3800: 0x1040000,                                                                                        // 12085
	            0x4800: 0x40000,                                                                                          // 12086
	            0x5800: 0x20040080,                                                                                       // 12087
	            0x6800: 0x21040000,                                                                                       // 12088
	            0x7800: 0x20000000,                                                                                       // 12089
	            0x8800: 0x20040000,                                                                                       // 12090
	            0x9800: 0x0,                                                                                              // 12091
	            0xa800: 0x21040080,                                                                                       // 12092
	            0xb800: 0x1000080,                                                                                        // 12093
	            0xc800: 0x20000080,                                                                                       // 12094
	            0xd800: 0x21000000,                                                                                       // 12095
	            0xe800: 0x1000000,                                                                                        // 12096
	            0xf800: 0x40080,                                                                                          // 12097
	            0x10000: 0x40000,                                                                                         // 12098
	            0x11000: 0x80,                                                                                            // 12099
	            0x12000: 0x20000000,                                                                                      // 12100
	            0x13000: 0x21000080,                                                                                      // 12101
	            0x14000: 0x1000080,                                                                                       // 12102
	            0x15000: 0x21040000,                                                                                      // 12103
	            0x16000: 0x20040080,                                                                                      // 12104
	            0x17000: 0x1000000,                                                                                       // 12105
	            0x18000: 0x21040080,                                                                                      // 12106
	            0x19000: 0x21000000,                                                                                      // 12107
	            0x1a000: 0x1040000,                                                                                       // 12108
	            0x1b000: 0x20040000,                                                                                      // 12109
	            0x1c000: 0x40080,                                                                                         // 12110
	            0x1d000: 0x20000080,                                                                                      // 12111
	            0x1e000: 0x0,                                                                                             // 12112
	            0x1f000: 0x1040080,                                                                                       // 12113
	            0x10800: 0x21000080,                                                                                      // 12114
	            0x11800: 0x1000000,                                                                                       // 12115
	            0x12800: 0x1040000,                                                                                       // 12116
	            0x13800: 0x20040080,                                                                                      // 12117
	            0x14800: 0x20000000,                                                                                      // 12118
	            0x15800: 0x1040080,                                                                                       // 12119
	            0x16800: 0x80,                                                                                            // 12120
	            0x17800: 0x21040000,                                                                                      // 12121
	            0x18800: 0x40080,                                                                                         // 12122
	            0x19800: 0x21040080,                                                                                      // 12123
	            0x1a800: 0x0,                                                                                             // 12124
	            0x1b800: 0x21000000,                                                                                      // 12125
	            0x1c800: 0x1000080,                                                                                       // 12126
	            0x1d800: 0x40000,                                                                                         // 12127
	            0x1e800: 0x20040000,                                                                                      // 12128
	            0x1f800: 0x20000080                                                                                       // 12129
	        },                                                                                                            // 12130
	        {                                                                                                             // 12131
	            0x0: 0x10000008,                                                                                          // 12132
	            0x100: 0x2000,                                                                                            // 12133
	            0x200: 0x10200000,                                                                                        // 12134
	            0x300: 0x10202008,                                                                                        // 12135
	            0x400: 0x10002000,                                                                                        // 12136
	            0x500: 0x200000,                                                                                          // 12137
	            0x600: 0x200008,                                                                                          // 12138
	            0x700: 0x10000000,                                                                                        // 12139
	            0x800: 0x0,                                                                                               // 12140
	            0x900: 0x10002008,                                                                                        // 12141
	            0xa00: 0x202000,                                                                                          // 12142
	            0xb00: 0x8,                                                                                               // 12143
	            0xc00: 0x10200008,                                                                                        // 12144
	            0xd00: 0x202008,                                                                                          // 12145
	            0xe00: 0x2008,                                                                                            // 12146
	            0xf00: 0x10202000,                                                                                        // 12147
	            0x80: 0x10200000,                                                                                         // 12148
	            0x180: 0x10202008,                                                                                        // 12149
	            0x280: 0x8,                                                                                               // 12150
	            0x380: 0x200000,                                                                                          // 12151
	            0x480: 0x202008,                                                                                          // 12152
	            0x580: 0x10000008,                                                                                        // 12153
	            0x680: 0x10002000,                                                                                        // 12154
	            0x780: 0x2008,                                                                                            // 12155
	            0x880: 0x200008,                                                                                          // 12156
	            0x980: 0x2000,                                                                                            // 12157
	            0xa80: 0x10002008,                                                                                        // 12158
	            0xb80: 0x10200008,                                                                                        // 12159
	            0xc80: 0x0,                                                                                               // 12160
	            0xd80: 0x10202000,                                                                                        // 12161
	            0xe80: 0x202000,                                                                                          // 12162
	            0xf80: 0x10000000,                                                                                        // 12163
	            0x1000: 0x10002000,                                                                                       // 12164
	            0x1100: 0x10200008,                                                                                       // 12165
	            0x1200: 0x10202008,                                                                                       // 12166
	            0x1300: 0x2008,                                                                                           // 12167
	            0x1400: 0x200000,                                                                                         // 12168
	            0x1500: 0x10000000,                                                                                       // 12169
	            0x1600: 0x10000008,                                                                                       // 12170
	            0x1700: 0x202000,                                                                                         // 12171
	            0x1800: 0x202008,                                                                                         // 12172
	            0x1900: 0x0,                                                                                              // 12173
	            0x1a00: 0x8,                                                                                              // 12174
	            0x1b00: 0x10200000,                                                                                       // 12175
	            0x1c00: 0x2000,                                                                                           // 12176
	            0x1d00: 0x10002008,                                                                                       // 12177
	            0x1e00: 0x10202000,                                                                                       // 12178
	            0x1f00: 0x200008,                                                                                         // 12179
	            0x1080: 0x8,                                                                                              // 12180
	            0x1180: 0x202000,                                                                                         // 12181
	            0x1280: 0x200000,                                                                                         // 12182
	            0x1380: 0x10000008,                                                                                       // 12183
	            0x1480: 0x10002000,                                                                                       // 12184
	            0x1580: 0x2008,                                                                                           // 12185
	            0x1680: 0x10202008,                                                                                       // 12186
	            0x1780: 0x10200000,                                                                                       // 12187
	            0x1880: 0x10202000,                                                                                       // 12188
	            0x1980: 0x10200008,                                                                                       // 12189
	            0x1a80: 0x2000,                                                                                           // 12190
	            0x1b80: 0x202008,                                                                                         // 12191
	            0x1c80: 0x200008,                                                                                         // 12192
	            0x1d80: 0x0,                                                                                              // 12193
	            0x1e80: 0x10000000,                                                                                       // 12194
	            0x1f80: 0x10002008                                                                                        // 12195
	        },                                                                                                            // 12196
	        {                                                                                                             // 12197
	            0x0: 0x100000,                                                                                            // 12198
	            0x10: 0x2000401,                                                                                          // 12199
	            0x20: 0x400,                                                                                              // 12200
	            0x30: 0x100401,                                                                                           // 12201
	            0x40: 0x2100401,                                                                                          // 12202
	            0x50: 0x0,                                                                                                // 12203
	            0x60: 0x1,                                                                                                // 12204
	            0x70: 0x2100001,                                                                                          // 12205
	            0x80: 0x2000400,                                                                                          // 12206
	            0x90: 0x100001,                                                                                           // 12207
	            0xa0: 0x2000001,                                                                                          // 12208
	            0xb0: 0x2100400,                                                                                          // 12209
	            0xc0: 0x2100000,                                                                                          // 12210
	            0xd0: 0x401,                                                                                              // 12211
	            0xe0: 0x100400,                                                                                           // 12212
	            0xf0: 0x2000000,                                                                                          // 12213
	            0x8: 0x2100001,                                                                                           // 12214
	            0x18: 0x0,                                                                                                // 12215
	            0x28: 0x2000401,                                                                                          // 12216
	            0x38: 0x2100400,                                                                                          // 12217
	            0x48: 0x100000,                                                                                           // 12218
	            0x58: 0x2000001,                                                                                          // 12219
	            0x68: 0x2000000,                                                                                          // 12220
	            0x78: 0x401,                                                                                              // 12221
	            0x88: 0x100401,                                                                                           // 12222
	            0x98: 0x2000400,                                                                                          // 12223
	            0xa8: 0x2100000,                                                                                          // 12224
	            0xb8: 0x100001,                                                                                           // 12225
	            0xc8: 0x400,                                                                                              // 12226
	            0xd8: 0x2100401,                                                                                          // 12227
	            0xe8: 0x1,                                                                                                // 12228
	            0xf8: 0x100400,                                                                                           // 12229
	            0x100: 0x2000000,                                                                                         // 12230
	            0x110: 0x100000,                                                                                          // 12231
	            0x120: 0x2000401,                                                                                         // 12232
	            0x130: 0x2100001,                                                                                         // 12233
	            0x140: 0x100001,                                                                                          // 12234
	            0x150: 0x2000400,                                                                                         // 12235
	            0x160: 0x2100400,                                                                                         // 12236
	            0x170: 0x100401,                                                                                          // 12237
	            0x180: 0x401,                                                                                             // 12238
	            0x190: 0x2100401,                                                                                         // 12239
	            0x1a0: 0x100400,                                                                                          // 12240
	            0x1b0: 0x1,                                                                                               // 12241
	            0x1c0: 0x0,                                                                                               // 12242
	            0x1d0: 0x2100000,                                                                                         // 12243
	            0x1e0: 0x2000001,                                                                                         // 12244
	            0x1f0: 0x400,                                                                                             // 12245
	            0x108: 0x100400,                                                                                          // 12246
	            0x118: 0x2000401,                                                                                         // 12247
	            0x128: 0x2100001,                                                                                         // 12248
	            0x138: 0x1,                                                                                               // 12249
	            0x148: 0x2000000,                                                                                         // 12250
	            0x158: 0x100000,                                                                                          // 12251
	            0x168: 0x401,                                                                                             // 12252
	            0x178: 0x2100400,                                                                                         // 12253
	            0x188: 0x2000001,                                                                                         // 12254
	            0x198: 0x2100000,                                                                                         // 12255
	            0x1a8: 0x0,                                                                                               // 12256
	            0x1b8: 0x2100401,                                                                                         // 12257
	            0x1c8: 0x100401,                                                                                          // 12258
	            0x1d8: 0x400,                                                                                             // 12259
	            0x1e8: 0x2000400,                                                                                         // 12260
	            0x1f8: 0x100001                                                                                           // 12261
	        },                                                                                                            // 12262
	        {                                                                                                             // 12263
	            0x0: 0x8000820,                                                                                           // 12264
	            0x1: 0x20000,                                                                                             // 12265
	            0x2: 0x8000000,                                                                                           // 12266
	            0x3: 0x20,                                                                                                // 12267
	            0x4: 0x20020,                                                                                             // 12268
	            0x5: 0x8020820,                                                                                           // 12269
	            0x6: 0x8020800,                                                                                           // 12270
	            0x7: 0x800,                                                                                               // 12271
	            0x8: 0x8020000,                                                                                           // 12272
	            0x9: 0x8000800,                                                                                           // 12273
	            0xa: 0x20800,                                                                                             // 12274
	            0xb: 0x8020020,                                                                                           // 12275
	            0xc: 0x820,                                                                                               // 12276
	            0xd: 0x0,                                                                                                 // 12277
	            0xe: 0x8000020,                                                                                           // 12278
	            0xf: 0x20820,                                                                                             // 12279
	            0x80000000: 0x800,                                                                                        // 12280
	            0x80000001: 0x8020820,                                                                                    // 12281
	            0x80000002: 0x8000820,                                                                                    // 12282
	            0x80000003: 0x8000000,                                                                                    // 12283
	            0x80000004: 0x8020000,                                                                                    // 12284
	            0x80000005: 0x20800,                                                                                      // 12285
	            0x80000006: 0x20820,                                                                                      // 12286
	            0x80000007: 0x20,                                                                                         // 12287
	            0x80000008: 0x8000020,                                                                                    // 12288
	            0x80000009: 0x820,                                                                                        // 12289
	            0x8000000a: 0x20020,                                                                                      // 12290
	            0x8000000b: 0x8020800,                                                                                    // 12291
	            0x8000000c: 0x0,                                                                                          // 12292
	            0x8000000d: 0x8020020,                                                                                    // 12293
	            0x8000000e: 0x8000800,                                                                                    // 12294
	            0x8000000f: 0x20000,                                                                                      // 12295
	            0x10: 0x20820,                                                                                            // 12296
	            0x11: 0x8020800,                                                                                          // 12297
	            0x12: 0x20,                                                                                               // 12298
	            0x13: 0x800,                                                                                              // 12299
	            0x14: 0x8000800,                                                                                          // 12300
	            0x15: 0x8000020,                                                                                          // 12301
	            0x16: 0x8020020,                                                                                          // 12302
	            0x17: 0x20000,                                                                                            // 12303
	            0x18: 0x0,                                                                                                // 12304
	            0x19: 0x20020,                                                                                            // 12305
	            0x1a: 0x8020000,                                                                                          // 12306
	            0x1b: 0x8000820,                                                                                          // 12307
	            0x1c: 0x8020820,                                                                                          // 12308
	            0x1d: 0x20800,                                                                                            // 12309
	            0x1e: 0x820,                                                                                              // 12310
	            0x1f: 0x8000000,                                                                                          // 12311
	            0x80000010: 0x20000,                                                                                      // 12312
	            0x80000011: 0x800,                                                                                        // 12313
	            0x80000012: 0x8020020,                                                                                    // 12314
	            0x80000013: 0x20820,                                                                                      // 12315
	            0x80000014: 0x20,                                                                                         // 12316
	            0x80000015: 0x8020000,                                                                                    // 12317
	            0x80000016: 0x8000000,                                                                                    // 12318
	            0x80000017: 0x8000820,                                                                                    // 12319
	            0x80000018: 0x8020820,                                                                                    // 12320
	            0x80000019: 0x8000020,                                                                                    // 12321
	            0x8000001a: 0x8000800,                                                                                    // 12322
	            0x8000001b: 0x0,                                                                                          // 12323
	            0x8000001c: 0x20800,                                                                                      // 12324
	            0x8000001d: 0x820,                                                                                        // 12325
	            0x8000001e: 0x20020,                                                                                      // 12326
	            0x8000001f: 0x8020800                                                                                     // 12327
	        }                                                                                                             // 12328
	    ];                                                                                                                // 12329
                                                                                                                       // 12330
	    // Masks that select the SBOX input                                                                               // 12331
	    var SBOX_MASK = [                                                                                                 // 12332
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,                                                               // 12333
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f                                                                // 12334
	    ];                                                                                                                // 12335
                                                                                                                       // 12336
	    /**                                                                                                               // 12337
	     * DES block cipher algorithm.                                                                                    // 12338
	     */                                                                                                               // 12339
	    var DES = C_algo.DES = BlockCipher.extend({                                                                       // 12340
	        _doReset: function () {                                                                                       // 12341
	            // Shortcuts                                                                                              // 12342
	            var key = this._key;                                                                                      // 12343
	            var keyWords = key.words;                                                                                 // 12344
                                                                                                                       // 12345
	            // Select 56 bits according to PC1                                                                        // 12346
	            var keyBits = [];                                                                                         // 12347
	            for (var i = 0; i < 56; i++) {                                                                            // 12348
	                var keyBitPos = PC1[i] - 1;                                                                           // 12349
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;                               // 12350
	            }                                                                                                         // 12351
                                                                                                                       // 12352
	            // Assemble 16 subkeys                                                                                    // 12353
	            var subKeys = this._subKeys = [];                                                                         // 12354
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {                                                          // 12355
	                // Create subkey                                                                                      // 12356
	                var subKey = subKeys[nSubKey] = [];                                                                   // 12357
                                                                                                                       // 12358
	                // Shortcut                                                                                           // 12359
	                var bitShift = BIT_SHIFTS[nSubKey];                                                                   // 12360
                                                                                                                       // 12361
	                // Select 48 bits according to PC2                                                                    // 12362
	                for (var i = 0; i < 24; i++) {                                                                        // 12363
	                    // Select from the left 28 key bits                                                               // 12364
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);                   // 12365
                                                                                                                       // 12366
	                    // Select from the right 28 key bits                                                              // 12367
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }                                                                                                     // 12369
                                                                                                                       // 12370
	                // Since each subkey is applied to an expanded 32-bit input,                                          // 12371
	                // the subkey can be broken into 8 values scaled to 32-bits,                                          // 12372
	                // which allows the key to be used without expansion                                                  // 12373
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);                                                    // 12374
	                for (var i = 1; i < 7; i++) {                                                                         // 12375
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);                                                      // 12376
	                }                                                                                                     // 12377
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);                                                    // 12378
	            }                                                                                                         // 12379
                                                                                                                       // 12380
	            // Compute inverse subkeys                                                                                // 12381
	            var invSubKeys = this._invSubKeys = [];                                                                   // 12382
	            for (var i = 0; i < 16; i++) {                                                                            // 12383
	                invSubKeys[i] = subKeys[15 - i];                                                                      // 12384
	            }                                                                                                         // 12385
	        },                                                                                                            // 12386
                                                                                                                       // 12387
	        encryptBlock: function (M, offset) {                                                                          // 12388
	            this._doCryptBlock(M, offset, this._subKeys);                                                             // 12389
	        },                                                                                                            // 12390
                                                                                                                       // 12391
	        decryptBlock: function (M, offset) {                                                                          // 12392
	            this._doCryptBlock(M, offset, this._invSubKeys);                                                          // 12393
	        },                                                                                                            // 12394
                                                                                                                       // 12395
	        _doCryptBlock: function (M, offset, subKeys) {                                                                // 12396
	            // Get input                                                                                              // 12397
	            this._lBlock = M[offset];                                                                                 // 12398
	            this._rBlock = M[offset + 1];                                                                             // 12399
                                                                                                                       // 12400
	            // Initial permutation                                                                                    // 12401
	            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12402
	            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12403
	            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12404
	            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12405
	            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12406
                                                                                                                       // 12407
	            // Rounds                                                                                                 // 12408
	            for (var round = 0; round < 16; round++) {                                                                // 12409
	                // Shortcuts                                                                                          // 12410
	                var subKey = subKeys[round];                                                                          // 12411
	                var lBlock = this._lBlock;                                                                            // 12412
	                var rBlock = this._rBlock;                                                                            // 12413
                                                                                                                       // 12414
	                // Feistel function                                                                                   // 12415
	                var f = 0;                                                                                            // 12416
	                for (var i = 0; i < 8; i++) {                                                                         // 12417
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];                                      // 12418
	                }                                                                                                     // 12419
	                this._lBlock = rBlock;                                                                                // 12420
	                this._rBlock = lBlock ^ f;                                                                            // 12421
	            }                                                                                                         // 12422
                                                                                                                       // 12423
	            // Undo swap from last round                                                                              // 12424
	            var t = this._lBlock;                                                                                     // 12425
	            this._lBlock = this._rBlock;                                                                              // 12426
	            this._rBlock = t;                                                                                         // 12427
                                                                                                                       // 12428
	            // Final permutation                                                                                      // 12429
	            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12430
	            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12431
	            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12432
	            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12433
	            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12434
                                                                                                                       // 12435
	            // Set output                                                                                             // 12436
	            M[offset] = this._lBlock;                                                                                 // 12437
	            M[offset + 1] = this._rBlock;                                                                             // 12438
	        },                                                                                                            // 12439
                                                                                                                       // 12440
	        keySize: 64/32,                                                                                               // 12441
                                                                                                                       // 12442
	        ivSize: 64/32,                                                                                                // 12443
                                                                                                                       // 12444
	        blockSize: 64/32                                                                                              // 12445
	    });                                                                                                               // 12446
                                                                                                                       // 12447
	    // Swap bits across the left and right words                                                                      // 12448
	    function exchangeLR(offset, mask) {                                                                               // 12449
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;                                                    // 12450
	        this._rBlock ^= t;                                                                                            // 12451
	        this._lBlock ^= t << offset;                                                                                  // 12452
	    }                                                                                                                 // 12453
                                                                                                                       // 12454
	    function exchangeRL(offset, mask) {                                                                               // 12455
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;                                                    // 12456
	        this._lBlock ^= t;                                                                                            // 12457
	        this._rBlock ^= t << offset;                                                                                  // 12458
	    }                                                                                                                 // 12459
                                                                                                                       // 12460
	    /**                                                                                                               // 12461
	     * Shortcut functions to the cipher's object interface.                                                           // 12462
	     *                                                                                                                // 12463
	     * @example                                                                                                       // 12464
	     *                                                                                                                // 12465
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);                                                  // 12466
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);                                               // 12467
	     */                                                                                                               // 12468
	    C.DES = BlockCipher._createHelper(DES);                                                                           // 12469
                                                                                                                       // 12470
	    /**                                                                                                               // 12471
	     * Triple-DES block cipher algorithm.                                                                             // 12472
	     */                                                                                                               // 12473
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({                                                           // 12474
	        _doReset: function () {                                                                                       // 12475
	            // Shortcuts                                                                                              // 12476
	            var key = this._key;                                                                                      // 12477
	            var keyWords = key.words;                                                                                 // 12478
                                                                                                                       // 12479
	            // Create DES instances                                                                                   // 12480
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));                                 // 12481
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));                                 // 12482
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));                                 // 12483
	        },                                                                                                            // 12484
                                                                                                                       // 12485
	        encryptBlock: function (M, offset) {                                                                          // 12486
	            this._des1.encryptBlock(M, offset);                                                                       // 12487
	            this._des2.decryptBlock(M, offset);                                                                       // 12488
	            this._des3.encryptBlock(M, offset);                                                                       // 12489
	        },                                                                                                            // 12490
                                                                                                                       // 12491
	        decryptBlock: function (M, offset) {                                                                          // 12492
	            this._des3.decryptBlock(M, offset);                                                                       // 12493
	            this._des2.encryptBlock(M, offset);                                                                       // 12494
	            this._des1.decryptBlock(M, offset);                                                                       // 12495
	        },                                                                                                            // 12496
                                                                                                                       // 12497
	        keySize: 192/32,                                                                                              // 12498
                                                                                                                       // 12499
	        ivSize: 64/32,                                                                                                // 12500
                                                                                                                       // 12501
	        blockSize: 64/32                                                                                              // 12502
	    });                                                                                                               // 12503
                                                                                                                       // 12504
	    /**                                                                                                               // 12505
	     * Shortcut functions to the cipher's object interface.                                                           // 12506
	     *                                                                                                                // 12507
	     * @example                                                                                                       // 12508
	     *                                                                                                                // 12509
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);                                            // 12510
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);                                         // 12511
	     */                                                                                                               // 12512
	    C.TripleDES = BlockCipher._createHelper(TripleDES);                                                               // 12513
	}());                                                                                                                 // 12514
                                                                                                                       // 12515
                                                                                                                       // 12516
	return CryptoJS.TripleDES;                                                                                            // 12517
                                                                                                                       // 12518
}));                                                                                                                   // 12519
},{"./cipher-core":50,"./core":51,"./enc-base64":52,"./evpkdf":54,"./md5":59}],82:[function(require,module,exports){   // 12520
;(function (root, factory) {                                                                                           // 12521
	if (typeof exports === "object") {                                                                                    // 12522
		// CommonJS                                                                                                          // 12523
		module.exports = exports = factory(require("./core"));                                                               // 12524
	}                                                                                                                     // 12525
	else if (typeof define === "function" && define.amd) {                                                                // 12526
		// AMD                                                                                                               // 12527
		define(["./core"], factory);                                                                                         // 12528
	}                                                                                                                     // 12529
	else {                                                                                                                // 12530
		// Global (browser)                                                                                                  // 12531
		factory(root.CryptoJS);                                                                                              // 12532
	}                                                                                                                     // 12533
}(this, function (CryptoJS) {                                                                                          // 12534
                                                                                                                       // 12535
	(function (undefined) {                                                                                               // 12536
	    // Shortcuts                                                                                                      // 12537
	    var C = CryptoJS;                                                                                                 // 12538
	    var C_lib = C.lib;                                                                                                // 12539
	    var Base = C_lib.Base;                                                                                            // 12540
	    var X32WordArray = C_lib.WordArray;                                                                               // 12541
                                                                                                                       // 12542
	    /**                                                                                                               // 12543
	     * x64 namespace.                                                                                                 // 12544
	     */                                                                                                               // 12545
	    var C_x64 = C.x64 = {};                                                                                           // 12546
                                                                                                                       // 12547
	    /**                                                                                                               // 12548
	     * A 64-bit word.                                                                                                 // 12549
	     */                                                                                                               // 12550
	    var X64Word = C_x64.Word = Base.extend({                                                                          // 12551
	        /**                                                                                                           // 12552
	         * Initializes a newly created 64-bit word.                                                                   // 12553
	         *                                                                                                            // 12554
	         * @param {number} high The high 32 bits.                                                                     // 12555
	         * @param {number} low The low 32 bits.                                                                       // 12556
	         *                                                                                                            // 12557
	         * @example                                                                                                   // 12558
	         *                                                                                                            // 12559
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);                                        // 12560
	         */                                                                                                           // 12561
	        init: function (high, low) {                                                                                  // 12562
	            this.high = high;                                                                                         // 12563
	            this.low = low;                                                                                           // 12564
	        }                                                                                                             // 12565
                                                                                                                       // 12566
	        /**                                                                                                           // 12567
	         * Bitwise NOTs this word.                                                                                    // 12568
	         *                                                                                                            // 12569
	         * @return {X64Word} A new x64-Word object after negating.                                                    // 12570
	         *                                                                                                            // 12571
	         * @example                                                                                                   // 12572
	         *                                                                                                            // 12573
	         *     var negated = x64Word.not();                                                                           // 12574
	         */                                                                                                           // 12575
	        // not: function () {                                                                                         // 12576
	            // var high = ~this.high;                                                                                 // 12577
	            // var low = ~this.low;                                                                                   // 12578
                                                                                                                       // 12579
	            // return X64Word.create(high, low);                                                                      // 12580
	        // },                                                                                                         // 12581
                                                                                                                       // 12582
	        /**                                                                                                           // 12583
	         * Bitwise ANDs this word with the passed word.                                                               // 12584
	         *                                                                                                            // 12585
	         * @param {X64Word} word The x64-Word to AND with this word.                                                  // 12586
	         *                                                                                                            // 12587
	         * @return {X64Word} A new x64-Word object after ANDing.                                                      // 12588
	         *                                                                                                            // 12589
	         * @example                                                                                                   // 12590
	         *                                                                                                            // 12591
	         *     var anded = x64Word.and(anotherX64Word);                                                               // 12592
	         */                                                                                                           // 12593
	        // and: function (word) {                                                                                     // 12594
	            // var high = this.high & word.high;                                                                      // 12595
	            // var low = this.low & word.low;                                                                         // 12596
                                                                                                                       // 12597
	            // return X64Word.create(high, low);                                                                      // 12598
	        // },                                                                                                         // 12599
                                                                                                                       // 12600
	        /**                                                                                                           // 12601
	         * Bitwise ORs this word with the passed word.                                                                // 12602
	         *                                                                                                            // 12603
	         * @param {X64Word} word The x64-Word to OR with this word.                                                   // 12604
	         *                                                                                                            // 12605
	         * @return {X64Word} A new x64-Word object after ORing.                                                       // 12606
	         *                                                                                                            // 12607
	         * @example                                                                                                   // 12608
	         *                                                                                                            // 12609
	         *     var ored = x64Word.or(anotherX64Word);                                                                 // 12610
	         */                                                                                                           // 12611
	        // or: function (word) {                                                                                      // 12612
	            // var high = this.high | word.high;                                                                      // 12613
	            // var low = this.low | word.low;                                                                         // 12614
                                                                                                                       // 12615
	            // return X64Word.create(high, low);                                                                      // 12616
	        // },                                                                                                         // 12617
                                                                                                                       // 12618
	        /**                                                                                                           // 12619
	         * Bitwise XORs this word with the passed word.                                                               // 12620
	         *                                                                                                            // 12621
	         * @param {X64Word} word The x64-Word to XOR with this word.                                                  // 12622
	         *                                                                                                            // 12623
	         * @return {X64Word} A new x64-Word object after XORing.                                                      // 12624
	         *                                                                                                            // 12625
	         * @example                                                                                                   // 12626
	         *                                                                                                            // 12627
	         *     var xored = x64Word.xor(anotherX64Word);                                                               // 12628
	         */                                                                                                           // 12629
	        // xor: function (word) {                                                                                     // 12630
	            // var high = this.high ^ word.high;                                                                      // 12631
	            // var low = this.low ^ word.low;                                                                         // 12632
                                                                                                                       // 12633
	            // return X64Word.create(high, low);                                                                      // 12634
	        // },                                                                                                         // 12635
                                                                                                                       // 12636
	        /**                                                                                                           // 12637
	         * Shifts this word n bits to the left.                                                                       // 12638
	         *                                                                                                            // 12639
	         * @param {number} n The number of bits to shift.                                                             // 12640
	         *                                                                                                            // 12641
	         * @return {X64Word} A new x64-Word object after shifting.                                                    // 12642
	         *                                                                                                            // 12643
	         * @example                                                                                                   // 12644
	         *                                                                                                            // 12645
	         *     var shifted = x64Word.shiftL(25);                                                                      // 12646
	         */                                                                                                           // 12647
	        // shiftL: function (n) {                                                                                     // 12648
	            // if (n < 32) {                                                                                          // 12649
	                // var high = (this.high << n) | (this.low >>> (32 - n));                                             // 12650
	                // var low = this.low << n;                                                                           // 12651
	            // } else {                                                                                               // 12652
	                // var high = this.low << (n - 32);                                                                   // 12653
	                // var low = 0;                                                                                       // 12654
	            // }                                                                                                      // 12655
                                                                                                                       // 12656
	            // return X64Word.create(high, low);                                                                      // 12657
	        // },                                                                                                         // 12658
                                                                                                                       // 12659
	        /**                                                                                                           // 12660
	         * Shifts this word n bits to the right.                                                                      // 12661
	         *                                                                                                            // 12662
	         * @param {number} n The number of bits to shift.                                                             // 12663
	         *                                                                                                            // 12664
	         * @return {X64Word} A new x64-Word object after shifting.                                                    // 12665
	         *                                                                                                            // 12666
	         * @example                                                                                                   // 12667
	         *                                                                                                            // 12668
	         *     var shifted = x64Word.shiftR(7);                                                                       // 12669
	         */                                                                                                           // 12670
	        // shiftR: function (n) {                                                                                     // 12671
	            // if (n < 32) {                                                                                          // 12672
	                // var low = (this.low >>> n) | (this.high << (32 - n));                                              // 12673
	                // var high = this.high >>> n;                                                                        // 12674
	            // } else {                                                                                               // 12675
	                // var low = this.high >>> (n - 32);                                                                  // 12676
	                // var high = 0;                                                                                      // 12677
	            // }                                                                                                      // 12678
                                                                                                                       // 12679
	            // return X64Word.create(high, low);                                                                      // 12680
	        // },                                                                                                         // 12681
                                                                                                                       // 12682
	        /**                                                                                                           // 12683
	         * Rotates this word n bits to the left.                                                                      // 12684
	         *                                                                                                            // 12685
	         * @param {number} n The number of bits to rotate.                                                            // 12686
	         *                                                                                                            // 12687
	         * @return {X64Word} A new x64-Word object after rotating.                                                    // 12688
	         *                                                                                                            // 12689
	         * @example                                                                                                   // 12690
	         *                                                                                                            // 12691
	         *     var rotated = x64Word.rotL(25);                                                                        // 12692
	         */                                                                                                           // 12693
	        // rotL: function (n) {                                                                                       // 12694
	            // return this.shiftL(n).or(this.shiftR(64 - n));                                                         // 12695
	        // },                                                                                                         // 12696
                                                                                                                       // 12697
	        /**                                                                                                           // 12698
	         * Rotates this word n bits to the right.                                                                     // 12699
	         *                                                                                                            // 12700
	         * @param {number} n The number of bits to rotate.                                                            // 12701
	         *                                                                                                            // 12702
	         * @return {X64Word} A new x64-Word object after rotating.                                                    // 12703
	         *                                                                                                            // 12704
	         * @example                                                                                                   // 12705
	         *                                                                                                            // 12706
	         *     var rotated = x64Word.rotR(7);                                                                         // 12707
	         */                                                                                                           // 12708
	        // rotR: function (n) {                                                                                       // 12709
	            // return this.shiftR(n).or(this.shiftL(64 - n));                                                         // 12710
	        // },                                                                                                         // 12711
                                                                                                                       // 12712
	        /**                                                                                                           // 12713
	         * Adds this word with the passed word.                                                                       // 12714
	         *                                                                                                            // 12715
	         * @param {X64Word} word The x64-Word to add with this word.                                                  // 12716
	         *                                                                                                            // 12717
	         * @return {X64Word} A new x64-Word object after adding.                                                      // 12718
	         *                                                                                                            // 12719
	         * @example                                                                                                   // 12720
	         *                                                                                                            // 12721
	         *     var added = x64Word.add(anotherX64Word);                                                               // 12722
	         */                                                                                                           // 12723
	        // add: function (word) {                                                                                     // 12724
	            // var low = (this.low + word.low) | 0;                                                                   // 12725
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;                                                    // 12726
	            // var high = (this.high + word.high + carry) | 0;                                                        // 12727
                                                                                                                       // 12728
	            // return X64Word.create(high, low);                                                                      // 12729
	        // }                                                                                                          // 12730
	    });                                                                                                               // 12731
                                                                                                                       // 12732
	    /**                                                                                                               // 12733
	     * An array of 64-bit words.                                                                                      // 12734
	     *                                                                                                                // 12735
	     * @property {Array} words The array of CryptoJS.x64.Word objects.                                                // 12736
	     * @property {number} sigBytes The number of significant bytes in this word array.                                // 12737
	     */                                                                                                               // 12738
	    var X64WordArray = C_x64.WordArray = Base.extend({                                                                // 12739
	        /**                                                                                                           // 12740
	         * Initializes a newly created word array.                                                                    // 12741
	         *                                                                                                            // 12742
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.                                     // 12743
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 12744
	         *                                                                                                            // 12745
	         * @example                                                                                                   // 12746
	         *                                                                                                            // 12747
	         *     var wordArray = CryptoJS.x64.WordArray.create();                                                       // 12748
	         *                                                                                                            // 12749
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 12750
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 12751
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 12752
	         *     ]);                                                                                                    // 12753
	         *                                                                                                            // 12754
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 12755
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 12756
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 12757
	         *     ], 10);                                                                                                // 12758
	         */                                                                                                           // 12759
	        init: function (words, sigBytes) {                                                                            // 12760
	            words = this.words = words || [];                                                                         // 12761
                                                                                                                       // 12762
	            if (sigBytes != undefined) {                                                                              // 12763
	                this.sigBytes = sigBytes;                                                                             // 12764
	            } else {                                                                                                  // 12765
	                this.sigBytes = words.length * 8;                                                                     // 12766
	            }                                                                                                         // 12767
	        },                                                                                                            // 12768
                                                                                                                       // 12769
	        /**                                                                                                           // 12770
	         * Converts this 64-bit word array to a 32-bit word array.                                                    // 12771
	         *                                                                                                            // 12772
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.                            // 12773
	         *                                                                                                            // 12774
	         * @example                                                                                                   // 12775
	         *                                                                                                            // 12776
	         *     var x32WordArray = x64WordArray.toX32();                                                               // 12777
	         */                                                                                                           // 12778
	        toX32: function () {                                                                                          // 12779
	            // Shortcuts                                                                                              // 12780
	            var x64Words = this.words;                                                                                // 12781
	            var x64WordsLength = x64Words.length;                                                                     // 12782
                                                                                                                       // 12783
	            // Convert                                                                                                // 12784
	            var x32Words = [];                                                                                        // 12785
	            for (var i = 0; i < x64WordsLength; i++) {                                                                // 12786
	                var x64Word = x64Words[i];                                                                            // 12787
	                x32Words.push(x64Word.high);                                                                          // 12788
	                x32Words.push(x64Word.low);                                                                           // 12789
	            }                                                                                                         // 12790
                                                                                                                       // 12791
	            return X32WordArray.create(x32Words, this.sigBytes);                                                      // 12792
	        },                                                                                                            // 12793
                                                                                                                       // 12794
	        /**                                                                                                           // 12795
	         * Creates a copy of this word array.                                                                         // 12796
	         *                                                                                                            // 12797
	         * @return {X64WordArray} The clone.                                                                          // 12798
	         *                                                                                                            // 12799
	         * @example                                                                                                   // 12800
	         *                                                                                                            // 12801
	         *     var clone = x64WordArray.clone();                                                                      // 12802
	         */                                                                                                           // 12803
	        clone: function () {                                                                                          // 12804
	            var clone = Base.clone.call(this);                                                                        // 12805
                                                                                                                       // 12806
	            // Clone "words" array                                                                                    // 12807
	            var words = clone.words = this.words.slice(0);                                                            // 12808
                                                                                                                       // 12809
	            // Clone each X64Word object                                                                              // 12810
	            var wordsLength = words.length;                                                                           // 12811
	            for (var i = 0; i < wordsLength; i++) {                                                                   // 12812
	                words[i] = words[i].clone();                                                                          // 12813
	            }                                                                                                         // 12814
                                                                                                                       // 12815
	            return clone;                                                                                             // 12816
	        }                                                                                                             // 12817
	    });                                                                                                               // 12818
	}());                                                                                                                 // 12819
                                                                                                                       // 12820
                                                                                                                       // 12821
	return CryptoJS;                                                                                                      // 12822
                                                                                                                       // 12823
}));                                                                                                                   // 12824
},{"./core":51}],83:[function(require,module,exports){                                                                 // 12825
/*! https://mths.be/utf8js v2.0.0 by @mathias */                                                                       // 12826
;(function(root) {                                                                                                     // 12827
                                                                                                                       // 12828
	// Detect free variables `exports`                                                                                    // 12829
	var freeExports = typeof exports == 'object' && exports;                                                              // 12830
                                                                                                                       // 12831
	// Detect free variable `module`                                                                                      // 12832
	var freeModule = typeof module == 'object' && module &&                                                               // 12833
		module.exports == freeExports && module;                                                                             // 12834
                                                                                                                       // 12835
	// Detect free variable `global`, from Node.js or Browserified code,                                                  // 12836
	// and use it as `root`                                                                                               // 12837
	var freeGlobal = typeof global == 'object' && global;                                                                 // 12838
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {                                           // 12839
		root = freeGlobal;                                                                                                   // 12840
	}                                                                                                                     // 12841
                                                                                                                       // 12842
	/*--------------------------------------------------------------------------*/                                        // 12843
                                                                                                                       // 12844
	var stringFromCharCode = String.fromCharCode;                                                                         // 12845
                                                                                                                       // 12846
	// Taken from https://mths.be/punycode                                                                                // 12847
	function ucs2decode(string) {                                                                                         // 12848
		var output = [];                                                                                                     // 12849
		var counter = 0;                                                                                                     // 12850
		var length = string.length;                                                                                          // 12851
		var value;                                                                                                           // 12852
		var extra;                                                                                                           // 12853
		while (counter < length) {                                                                                           // 12854
			value = string.charCodeAt(counter++);                                                                               // 12855
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {                                                       // 12856
				// high surrogate, and there is a next character                                                                   // 12857
				extra = string.charCodeAt(counter++);                                                                              // 12858
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate                                                                 // 12859
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);                                                 // 12860
				} else {                                                                                                           // 12861
					// unmatched surrogate; only append this code unit, in case the next                                              // 12862
					// code unit is the high surrogate of a surrogate pair                                                            // 12863
					output.push(value);                                                                                               // 12864
					counter--;                                                                                                        // 12865
				}                                                                                                                  // 12866
			} else {                                                                                                            // 12867
				output.push(value);                                                                                                // 12868
			}                                                                                                                   // 12869
		}                                                                                                                    // 12870
		return output;                                                                                                       // 12871
	}                                                                                                                     // 12872
                                                                                                                       // 12873
	// Taken from https://mths.be/punycode                                                                                // 12874
	function ucs2encode(array) {                                                                                          // 12875
		var length = array.length;                                                                                           // 12876
		var index = -1;                                                                                                      // 12877
		var value;                                                                                                           // 12878
		var output = '';                                                                                                     // 12879
		while (++index < length) {                                                                                           // 12880
			value = array[index];                                                                                               // 12881
			if (value > 0xFFFF) {                                                                                               // 12882
				value -= 0x10000;                                                                                                  // 12883
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);                                                       // 12884
				value = 0xDC00 | value & 0x3FF;                                                                                    // 12885
			}                                                                                                                   // 12886
			output += stringFromCharCode(value);                                                                                // 12887
		}                                                                                                                    // 12888
		return output;                                                                                                       // 12889
	}                                                                                                                     // 12890
                                                                                                                       // 12891
	function checkScalarValue(codePoint) {                                                                                // 12892
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {                                                                    // 12893
			throw Error(                                                                                                        // 12894
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +                                                       // 12895
				' is not a scalar value'                                                                                           // 12896
			);                                                                                                                  // 12897
		}                                                                                                                    // 12898
	}                                                                                                                     // 12899
	/*--------------------------------------------------------------------------*/                                        // 12900
                                                                                                                       // 12901
	function createByte(codePoint, shift) {                                                                               // 12902
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);                                                     // 12903
	}                                                                                                                     // 12904
                                                                                                                       // 12905
	function encodeCodePoint(codePoint) {                                                                                 // 12906
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence                                                              // 12907
			return stringFromCharCode(codePoint);                                                                               // 12908
		}                                                                                                                    // 12909
		var symbol = '';                                                                                                     // 12910
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence                                                              // 12911
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);                                                      // 12912
		}                                                                                                                    // 12913
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence                                                         // 12914
			checkScalarValue(codePoint);                                                                                        // 12915
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);                                                     // 12916
			symbol += createByte(codePoint, 6);                                                                                 // 12917
		}                                                                                                                    // 12918
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence                                                         // 12919
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);                                                     // 12920
			symbol += createByte(codePoint, 12);                                                                                // 12921
			symbol += createByte(codePoint, 6);                                                                                 // 12922
		}                                                                                                                    // 12923
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);                                                             // 12924
		return symbol;                                                                                                       // 12925
	}                                                                                                                     // 12926
                                                                                                                       // 12927
	function utf8encode(string) {                                                                                         // 12928
		var codePoints = ucs2decode(string);                                                                                 // 12929
		var length = codePoints.length;                                                                                      // 12930
		var index = -1;                                                                                                      // 12931
		var codePoint;                                                                                                       // 12932
		var byteString = '';                                                                                                 // 12933
		while (++index < length) {                                                                                           // 12934
			codePoint = codePoints[index];                                                                                      // 12935
			byteString += encodeCodePoint(codePoint);                                                                           // 12936
		}                                                                                                                    // 12937
		return byteString;                                                                                                   // 12938
	}                                                                                                                     // 12939
                                                                                                                       // 12940
	/*--------------------------------------------------------------------------*/                                        // 12941
                                                                                                                       // 12942
	function readContinuationByte() {                                                                                     // 12943
		if (byteIndex >= byteCount) {                                                                                        // 12944
			throw Error('Invalid byte index');                                                                                  // 12945
		}                                                                                                                    // 12946
                                                                                                                       // 12947
		var continuationByte = byteArray[byteIndex] & 0xFF;                                                                  // 12948
		byteIndex++;                                                                                                         // 12949
                                                                                                                       // 12950
		if ((continuationByte & 0xC0) == 0x80) {                                                                             // 12951
			return continuationByte & 0x3F;                                                                                     // 12952
		}                                                                                                                    // 12953
                                                                                                                       // 12954
		// If we end up here, it’s not a continuation byte                                                                   // 12955
		throw Error('Invalid continuation byte');                                                                            // 12956
	}                                                                                                                     // 12957
                                                                                                                       // 12958
	function decodeSymbol() {                                                                                             // 12959
		var byte1;                                                                                                           // 12960
		var byte2;                                                                                                           // 12961
		var byte3;                                                                                                           // 12962
		var byte4;                                                                                                           // 12963
		var codePoint;                                                                                                       // 12964
                                                                                                                       // 12965
		if (byteIndex > byteCount) {                                                                                         // 12966
			throw Error('Invalid byte index');                                                                                  // 12967
		}                                                                                                                    // 12968
                                                                                                                       // 12969
		if (byteIndex == byteCount) {                                                                                        // 12970
			return false;                                                                                                       // 12971
		}                                                                                                                    // 12972
                                                                                                                       // 12973
		// Read first byte                                                                                                   // 12974
		byte1 = byteArray[byteIndex] & 0xFF;                                                                                 // 12975
		byteIndex++;                                                                                                         // 12976
                                                                                                                       // 12977
		// 1-byte sequence (no continuation bytes)                                                                           // 12978
		if ((byte1 & 0x80) == 0) {                                                                                           // 12979
			return byte1;                                                                                                       // 12980
		}                                                                                                                    // 12981
                                                                                                                       // 12982
		// 2-byte sequence                                                                                                   // 12983
		if ((byte1 & 0xE0) == 0xC0) {                                                                                        // 12984
			var byte2 = readContinuationByte();                                                                                 // 12985
			codePoint = ((byte1 & 0x1F) << 6) | byte2;                                                                          // 12986
			if (codePoint >= 0x80) {                                                                                            // 12987
				return codePoint;                                                                                                  // 12988
			} else {                                                                                                            // 12989
				throw Error('Invalid continuation byte');                                                                          // 12990
			}                                                                                                                   // 12991
		}                                                                                                                    // 12992
                                                                                                                       // 12993
		// 3-byte sequence (may include unpaired surrogates)                                                                 // 12994
		if ((byte1 & 0xF0) == 0xE0) {                                                                                        // 12995
			byte2 = readContinuationByte();                                                                                     // 12996
			byte3 = readContinuationByte();                                                                                     // 12997
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;                                                          // 12998
			if (codePoint >= 0x0800) {                                                                                          // 12999
				checkScalarValue(codePoint);                                                                                       // 13000
				return codePoint;                                                                                                  // 13001
			} else {                                                                                                            // 13002
				throw Error('Invalid continuation byte');                                                                          // 13003
			}                                                                                                                   // 13004
		}                                                                                                                    // 13005
                                                                                                                       // 13006
		// 4-byte sequence                                                                                                   // 13007
		if ((byte1 & 0xF8) == 0xF0) {                                                                                        // 13008
			byte2 = readContinuationByte();                                                                                     // 13009
			byte3 = readContinuationByte();                                                                                     // 13010
			byte4 = readContinuationByte();                                                                                     // 13011
			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |                                                            // 13012
				(byte3 << 0x06) | byte4;                                                                                           // 13013
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {                                                               // 13014
				return codePoint;                                                                                                  // 13015
			}                                                                                                                   // 13016
		}                                                                                                                    // 13017
                                                                                                                       // 13018
		throw Error('Invalid UTF-8 detected');                                                                               // 13019
	}                                                                                                                     // 13020
                                                                                                                       // 13021
	var byteArray;                                                                                                        // 13022
	var byteCount;                                                                                                        // 13023
	var byteIndex;                                                                                                        // 13024
	function utf8decode(byteString) {                                                                                     // 13025
		byteArray = ucs2decode(byteString);                                                                                  // 13026
		byteCount = byteArray.length;                                                                                        // 13027
		byteIndex = 0;                                                                                                       // 13028
		var codePoints = [];                                                                                                 // 13029
		var tmp;                                                                                                             // 13030
		while ((tmp = decodeSymbol()) !== false) {                                                                           // 13031
			codePoints.push(tmp);                                                                                               // 13032
		}                                                                                                                    // 13033
		return ucs2encode(codePoints);                                                                                       // 13034
	}                                                                                                                     // 13035
                                                                                                                       // 13036
	/*--------------------------------------------------------------------------*/                                        // 13037
                                                                                                                       // 13038
	var utf8 = {                                                                                                          // 13039
		'version': '2.0.0',                                                                                                  // 13040
		'encode': utf8encode,                                                                                                // 13041
		'decode': utf8decode                                                                                                 // 13042
	};                                                                                                                    // 13043
                                                                                                                       // 13044
	// Some AMD build optimizers, like r.js, check for specific condition patterns                                        // 13045
	// like the following:                                                                                                // 13046
	if (                                                                                                                  // 13047
		typeof define == 'function' &&                                                                                       // 13048
		typeof define.amd == 'object' &&                                                                                     // 13049
		define.amd                                                                                                           // 13050
	) {                                                                                                                   // 13051
		define(function() {                                                                                                  // 13052
			return utf8;                                                                                                        // 13053
		});                                                                                                                  // 13054
	}	else if (freeExports && !freeExports.nodeType) {                                                                    // 13055
		if (freeModule) { // in Node.js or RingoJS v0.8.0+                                                                   // 13056
			freeModule.exports = utf8;                                                                                          // 13057
		} else { // in Narwhal or RingoJS v0.7.0-                                                                            // 13058
			var object = {};                                                                                                    // 13059
			var hasOwnProperty = object.hasOwnProperty;                                                                         // 13060
			for (var key in utf8) {                                                                                             // 13061
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);                                                  // 13062
			}                                                                                                                   // 13063
		}                                                                                                                    // 13064
	} else { // in Rhino or a web browser                                                                                 // 13065
		root.utf8 = utf8;                                                                                                    // 13066
	}                                                                                                                     // 13067
                                                                                                                       // 13068
}(this));                                                                                                              // 13069
                                                                                                                       // 13070
},{}],"bignumber.js":[function(require,module,exports){                                                                // 13071
/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */                                             // 13072
                                                                                                                       // 13073
;(function (global) {                                                                                                  // 13074
    'use strict';                                                                                                      // 13075
                                                                                                                       // 13076
    /*                                                                                                                 // 13077
      bignumber.js v2.0.7                                                                                              // 13078
      A JavaScript library for arbitrary-precision arithmetic.                                                         // 13079
      https://github.com/MikeMcl/bignumber.js                                                                          // 13080
      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>                                                        // 13081
      MIT Expat Licence                                                                                                // 13082
    */                                                                                                                 // 13083
                                                                                                                       // 13084
                                                                                                                       // 13085
    var BigNumber, crypto, parseNumeric,                                                                               // 13086
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,                                                            // 13087
        mathceil = Math.ceil,                                                                                          // 13088
        mathfloor = Math.floor,                                                                                        // 13089
        notBool = ' not a boolean or binary digit',                                                                    // 13090
        roundingMode = 'rounding mode',                                                                                // 13091
        tooManyDigits = 'number type has more than 15 significant digits',                                             // 13092
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                                 // 13093
        BASE = 1e14,                                                                                                   // 13094
        LOG_BASE = 14,                                                                                                 // 13095
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                       // 13096
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                       // 13097
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                            // 13098
        SQRT_BASE = 1e7,                                                                                               // 13099
                                                                                                                       // 13100
        /*                                                                                                             // 13101
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                     // 13102
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                         // 13103
         * exception is thrown (if ERRORS is true).                                                                    // 13104
         */                                                                                                            // 13105
        MAX = 1E9;                                   // 0 to MAX_INT32                                                 // 13106
                                                                                                                       // 13107
                                                                                                                       // 13108
    /*                                                                                                                 // 13109
     * Create and return a BigNumber constructor.                                                                      // 13110
     */                                                                                                                // 13111
    function another(configObj) {                                                                                      // 13112
        var div,                                                                                                       // 13113
                                                                                                                       // 13114
            // id tracks the caller function, so its name can be included in error messages.                           // 13115
            id = 0,                                                                                                    // 13116
            P = BigNumber.prototype,                                                                                   // 13117
            ONE = new BigNumber(1),                                                                                    // 13118
                                                                                                                       // 13119
                                                                                                                       // 13120
            /********************************* EDITABLE DEFAULTS **********************************/                   // 13121
                                                                                                                       // 13122
                                                                                                                       // 13123
            /*                                                                                                         // 13124
             * The default values below must be integers within the inclusive ranges stated.                           // 13125
             * The values can also be changed at run-time using BigNumber.config.                                      // 13126
             */                                                                                                        // 13127
                                                                                                                       // 13128
            // The maximum number of decimal places for operations involving division.                                 // 13129
            DECIMAL_PLACES = 20,                     // 0 to MAX                                                       // 13130
                                                                                                                       // 13131
            /*                                                                                                         // 13132
             * The rounding mode used when rounding to the above decimal places, and when using                        // 13133
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                            // 13134
             * UP         0 Away from zero.                                                                            // 13135
             * DOWN       1 Towards zero.                                                                              // 13136
             * CEIL       2 Towards +Infinity.                                                                         // 13137
             * FLOOR      3 Towards -Infinity.                                                                         // 13138
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                             // 13139
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                           // 13140
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                         // 13141
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                              // 13142
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                              // 13143
             */                                                                                                        // 13144
            ROUNDING_MODE = 4,                       // 0 to 8                                                         // 13145
                                                                                                                       // 13146
            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                              // 13147
                                                                                                                       // 13148
            // The exponent value at and beneath which toString returns exponential notation.                          // 13149
            // Number type: -7                                                                                         // 13150
            TO_EXP_NEG = -7,                         // 0 to -MAX                                                      // 13151
                                                                                                                       // 13152
            // The exponent value at and above which toString returns exponential notation.                            // 13153
            // Number type: 21                                                                                         // 13154
            TO_EXP_POS = 21,                         // 0 to MAX                                                       // 13155
                                                                                                                       // 13156
            // RANGE : [MIN_EXP, MAX_EXP]                                                                              // 13157
                                                                                                                       // 13158
            // The minimum exponent value, beneath which underflow to zero occurs.                                     // 13159
            // Number type: -324  (5e-324)                                                                             // 13160
            MIN_EXP = -1e7,                          // -1 to -MAX                                                     // 13161
                                                                                                                       // 13162
            // The maximum exponent value, above which overflow to Infinity occurs.                                    // 13163
            // Number type:  308  (1.7976931348623157e+308)                                                            // 13164
            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                               // 13165
            MAX_EXP = 1e7,                           // 1 to MAX                                                       // 13166
                                                                                                                       // 13167
            // Whether BigNumber Errors are ever thrown.                                                               // 13168
            ERRORS = true,                           // true or false                                                  // 13169
                                                                                                                       // 13170
            // Change to intValidatorNoErrors if ERRORS is false.                                                      // 13171
            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                    // 13172
                                                                                                                       // 13173
            // Whether to use cryptographically-secure random number generation, if available.                         // 13174
            CRYPTO = false,                          // true or false                                                  // 13175
                                                                                                                       // 13176
            /*                                                                                                         // 13177
             * The modulo mode used when calculating the modulus: a mod n.                                             // 13178
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                    // 13179
             * The remainder (r) is calculated as: r = a - n * q.                                                      // 13180
             *                                                                                                         // 13181
             * UP        0 The remainder is positive if the dividend is negative, else is negative.                    // 13182
             * DOWN      1 The remainder has the same sign as the dividend.                                            // 13183
             *             This modulo mode is commonly known as 'truncated division' and is                           // 13184
             *             equivalent to (a % n) in JavaScript.                                                        // 13185
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                  // 13186
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                                // 13187
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                        // 13188
             *             The remainder is always positive.                                                           // 13189
             *                                                                                                         // 13190
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                     // 13191
             * modes are commonly used for the modulus operation.                                                      // 13192
             * Although the other rounding modes can also be used, they may not give useful results.                   // 13193
             */                                                                                                        // 13194
            MODULO_MODE = 1,                         // 0 to 9                                                         // 13195
                                                                                                                       // 13196
            // The maximum number of significant digits of the result of the toPower operation.                        // 13197
            // If POW_PRECISION is 0, there will be unlimited significant digits.                                      // 13198
            POW_PRECISION = 100,                     // 0 to MAX                                                       // 13199
                                                                                                                       // 13200
            // The format specification used by the BigNumber.prototype.toFormat method.                               // 13201
            FORMAT = {                                                                                                 // 13202
                decimalSeparator: '.',                                                                                 // 13203
                groupSeparator: ',',                                                                                   // 13204
                groupSize: 3,                                                                                          // 13205
                secondaryGroupSize: 0,                                                                                 // 13206
                fractionGroupSeparator: '\xA0',      // non-breaking space                                             // 13207
                fractionGroupSize: 0                                                                                   // 13208
            };                                                                                                         // 13209
                                                                                                                       // 13210
                                                                                                                       // 13211
        /******************************************************************************************/                   // 13212
                                                                                                                       // 13213
                                                                                                                       // 13214
        // CONSTRUCTOR                                                                                                 // 13215
                                                                                                                       // 13216
                                                                                                                       // 13217
        /*                                                                                                             // 13218
         * The BigNumber constructor and exported function.                                                            // 13219
         * Create and return a new instance of a BigNumber object.                                                     // 13220
         *                                                                                                             // 13221
         * n {number|string|BigNumber} A numeric value.                                                                // 13222
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                     // 13223
         */                                                                                                            // 13224
        function BigNumber( n, b ) {                                                                                   // 13225
            var c, e, i, num, len, str,                                                                                // 13226
                x = this;                                                                                              // 13227
                                                                                                                       // 13228
            // Enable constructor usage without new.                                                                   // 13229
            if ( !( x instanceof BigNumber ) ) {                                                                       // 13230
                                                                                                                       // 13231
                // 'BigNumber() constructor call without new: {n}'                                                     // 13232
                if (ERRORS) raise( 26, 'constructor call without new', n );                                            // 13233
                return new BigNumber( n, b );                                                                          // 13234
            }                                                                                                          // 13235
                                                                                                                       // 13236
            // 'new BigNumber() base not an integer: {b}'                                                              // 13237
            // 'new BigNumber() base out of range: {b}'                                                                // 13238
            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                  // 13239
                                                                                                                       // 13240
                // Duplicate.                                                                                          // 13241
                if ( n instanceof BigNumber ) {                                                                        // 13242
                    x.s = n.s;                                                                                         // 13243
                    x.e = n.e;                                                                                         // 13244
                    x.c = ( n = n.c ) ? n.slice() : n;                                                                 // 13245
                    id = 0;                                                                                            // 13246
                    return;                                                                                            // 13247
                }                                                                                                      // 13248
                                                                                                                       // 13249
                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                  // 13250
                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                              // 13251
                                                                                                                       // 13252
                    // Fast path for integers.                                                                         // 13253
                    if ( n === ~~n ) {                                                                                 // 13254
                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                   // 13255
                        x.e = e;                                                                                       // 13256
                        x.c = [n];                                                                                     // 13257
                        id = 0;                                                                                        // 13258
                        return;                                                                                        // 13259
                    }                                                                                                  // 13260
                                                                                                                       // 13261
                    str = n + '';                                                                                      // 13262
                } else {                                                                                               // 13263
                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                         // 13264
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13265
                }                                                                                                      // 13266
            } else {                                                                                                   // 13267
                b = b | 0;                                                                                             // 13268
                str = n + '';                                                                                          // 13269
                                                                                                                       // 13270
                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                               // 13271
                // Allow exponential notation to be used with base 10 argument.                                        // 13272
                if ( b == 10 ) {                                                                                       // 13273
                    x = new BigNumber( n instanceof BigNumber ? n : str );                                             // 13274
                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                        // 13275
                }                                                                                                      // 13276
                                                                                                                       // 13277
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                              // 13278
                // Any number in exponential form will fail due to the [Ee][+-].                                       // 13279
                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                   // 13280
                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                                 // 13281
                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                           // 13282
                    return parseNumeric( x, str, num, b );                                                             // 13283
                }                                                                                                      // 13284
                                                                                                                       // 13285
                if (num) {                                                                                             // 13286
                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                  // 13287
                                                                                                                       // 13288
                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {                                      // 13289
                                                                                                                       // 13290
                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                      // 13291
                        raise( id, tooManyDigits, n );                                                                 // 13292
                    }                                                                                                  // 13293
                                                                                                                       // 13294
                    // Prevent later check for length on converted number.                                             // 13295
                    num = false;                                                                                       // 13296
                } else {                                                                                               // 13297
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13298
                }                                                                                                      // 13299
                                                                                                                       // 13300
                str = convertBase( str, 10, b, x.s );                                                                  // 13301
            }                                                                                                          // 13302
                                                                                                                       // 13303
            // Decimal point?                                                                                          // 13304
            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                         // 13305
                                                                                                                       // 13306
            // Exponential form?                                                                                       // 13307
            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                    // 13308
                                                                                                                       // 13309
                // Determine exponent.                                                                                 // 13310
                if ( e < 0 ) e = i;                                                                                    // 13311
                e += +str.slice( i + 1 );                                                                              // 13312
                str = str.substring( 0, i );                                                                           // 13313
            } else if ( e < 0 ) {                                                                                      // 13314
                                                                                                                       // 13315
                // Integer.                                                                                            // 13316
                e = str.length;                                                                                        // 13317
            }                                                                                                          // 13318
                                                                                                                       // 13319
            // Determine leading zeros.                                                                                // 13320
            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                              // 13321
                                                                                                                       // 13322
            // Determine trailing zeros.                                                                               // 13323
            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                   // 13324
            str = str.slice( i, len + 1 );                                                                             // 13325
                                                                                                                       // 13326
            if (str) {                                                                                                 // 13327
                len = str.length;                                                                                      // 13328
                                                                                                                       // 13329
                // Disallow numbers with over 15 significant digits if number type.                                    // 13330
                // 'new BigNumber() number type has more than 15 significant digits: {n}'                              // 13331
                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );                                  // 13332
                                                                                                                       // 13333
                e = e - i - 1;                                                                                         // 13334
                                                                                                                       // 13335
                 // Overflow?                                                                                          // 13336
                if ( e > MAX_EXP ) {                                                                                   // 13337
                                                                                                                       // 13338
                    // Infinity.                                                                                       // 13339
                    x.c = x.e = null;                                                                                  // 13340
                                                                                                                       // 13341
                // Underflow?                                                                                          // 13342
                } else if ( e < MIN_EXP ) {                                                                            // 13343
                                                                                                                       // 13344
                    // Zero.                                                                                           // 13345
                    x.c = [ x.e = 0 ];                                                                                 // 13346
                } else {                                                                                               // 13347
                    x.e = e;                                                                                           // 13348
                    x.c = [];                                                                                          // 13349
                                                                                                                       // 13350
                    // Transform base                                                                                  // 13351
                                                                                                                       // 13352
                    // e is the base 10 exponent.                                                                      // 13353
                    // i is where to slice str to get the first element of the coefficient array.                      // 13354
                    i = ( e + 1 ) % LOG_BASE;                                                                          // 13355
                    if ( e < 0 ) i += LOG_BASE;                                                                        // 13356
                                                                                                                       // 13357
                    if ( i < len ) {                                                                                   // 13358
                        if (i) x.c.push( +str.slice( 0, i ) );                                                         // 13359
                                                                                                                       // 13360
                        for ( len -= LOG_BASE; i < len; ) {                                                            // 13361
                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                                // 13362
                        }                                                                                              // 13363
                                                                                                                       // 13364
                        str = str.slice(i);                                                                            // 13365
                        i = LOG_BASE - str.length;                                                                     // 13366
                    } else {                                                                                           // 13367
                        i -= len;                                                                                      // 13368
                    }                                                                                                  // 13369
                                                                                                                       // 13370
                    for ( ; i--; str += '0' );                                                                         // 13371
                    x.c.push( +str );                                                                                  // 13372
                }                                                                                                      // 13373
            } else {                                                                                                   // 13374
                                                                                                                       // 13375
                // Zero.                                                                                               // 13376
                x.c = [ x.e = 0 ];                                                                                     // 13377
            }                                                                                                          // 13378
                                                                                                                       // 13379
            id = 0;                                                                                                    // 13380
        }                                                                                                              // 13381
                                                                                                                       // 13382
                                                                                                                       // 13383
        // CONSTRUCTOR PROPERTIES                                                                                      // 13384
                                                                                                                       // 13385
                                                                                                                       // 13386
        BigNumber.another = another;                                                                                   // 13387
                                                                                                                       // 13388
        BigNumber.ROUND_UP = 0;                                                                                        // 13389
        BigNumber.ROUND_DOWN = 1;                                                                                      // 13390
        BigNumber.ROUND_CEIL = 2;                                                                                      // 13391
        BigNumber.ROUND_FLOOR = 3;                                                                                     // 13392
        BigNumber.ROUND_HALF_UP = 4;                                                                                   // 13393
        BigNumber.ROUND_HALF_DOWN = 5;                                                                                 // 13394
        BigNumber.ROUND_HALF_EVEN = 6;                                                                                 // 13395
        BigNumber.ROUND_HALF_CEIL = 7;                                                                                 // 13396
        BigNumber.ROUND_HALF_FLOOR = 8;                                                                                // 13397
        BigNumber.EUCLID = 9;                                                                                          // 13398
                                                                                                                       // 13399
                                                                                                                       // 13400
        /*                                                                                                             // 13401
         * Configure infrequently-changing library-wide settings.                                                      // 13402
         *                                                                                                             // 13403
         * Accept an object or an argument list, with one or many of the following properties or                       // 13404
         * parameters respectively:                                                                                    // 13405
         *                                                                                                             // 13406
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                     // 13407
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                       // 13408
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                      // 13409
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                              // 13410
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                             // 13411
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                     // 13412
         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                    // 13413
         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                    // 13414
         *   MODULO_MODE     {number}           0 to 9 inclusive                                                       // 13415
         *   POW_PRECISION   {number}           0 to MAX inclusive                                                     // 13416
         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                       // 13417
         *      decimalSeparator       {string}                                                                        // 13418
         *      groupSeparator         {string}                                                                        // 13419
         *      groupSize              {number}                                                                        // 13420
         *      secondaryGroupSize     {number}                                                                        // 13421
         *      fractionGroupSeparator {string}                                                                        // 13422
         *      fractionGroupSize      {number}                                                                        // 13423
         *                                                                                                             // 13424
         * (The values assigned to the above FORMAT object properties are not checked for validity.)                   // 13425
         *                                                                                                             // 13426
         * E.g.                                                                                                        // 13427
         * BigNumber.config(20, 4) is equivalent to                                                                    // 13428
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                                // 13429
         *                                                                                                             // 13430
         * Ignore properties/parameters set to null or undefined.                                                      // 13431
         * Return an object with the properties current values.                                                        // 13432
         */                                                                                                            // 13433
        BigNumber.config = function () {                                                                               // 13434
            var v, p,                                                                                                  // 13435
                i = 0,                                                                                                 // 13436
                r = {},                                                                                                // 13437
                a = arguments,                                                                                         // 13438
                o = a[0],                                                                                              // 13439
                has = o && typeof o == 'object'                                                                        // 13440
                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                            // 13441
                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                                // 13442
                                                                                                                       // 13443
            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                    // 13444
            // 'config() DECIMAL_PLACES not an integer: {v}'                                                           // 13445
            // 'config() DECIMAL_PLACES out of range: {v}'                                                             // 13446
            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                      // 13447
                DECIMAL_PLACES = v | 0;                                                                                // 13448
            }                                                                                                          // 13449
            r[p] = DECIMAL_PLACES;                                                                                     // 13450
                                                                                                                       // 13451
            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                       // 13452
            // 'config() ROUNDING_MODE not an integer: {v}'                                                            // 13453
            // 'config() ROUNDING_MODE out of range: {v}'                                                              // 13454
            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                         // 13455
                ROUNDING_MODE = v | 0;                                                                                 // 13456
            }                                                                                                          // 13457
            r[p] = ROUNDING_MODE;                                                                                      // 13458
                                                                                                                       // 13459
            // EXPONENTIAL_AT {number|number[]}                                                                        // 13460
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                    // 13461
            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                           // 13462
            // 'config() EXPONENTIAL_AT out of range: {v}'                                                             // 13463
            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                       // 13464
                                                                                                                       // 13465
                if ( isArray(v) ) {                                                                                    // 13466
                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                     // 13467
                        TO_EXP_NEG = v[0] | 0;                                                                         // 13468
                        TO_EXP_POS = v[1] | 0;                                                                         // 13469
                    }                                                                                                  // 13470
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13471
                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                             // 13472
                }                                                                                                      // 13473
            }                                                                                                          // 13474
            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                         // 13475
                                                                                                                       // 13476
            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                      // 13477
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                             // 13478
            // 'config() RANGE not an integer: {v}'                                                                    // 13479
            // 'config() RANGE cannot be zero: {v}'                                                                    // 13480
            // 'config() RANGE out of range: {v}'                                                                      // 13481
            if ( has( p = 'RANGE' ) ) {                                                                                // 13482
                                                                                                                       // 13483
                if ( isArray(v) ) {                                                                                    // 13484
                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                    // 13485
                        MIN_EXP = v[0] | 0;                                                                            // 13486
                        MAX_EXP = v[1] | 0;                                                                            // 13487
                    }                                                                                                  // 13488
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13489
                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                      // 13490
                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                             // 13491
                }                                                                                                      // 13492
            }                                                                                                          // 13493
            r[p] = [ MIN_EXP, MAX_EXP ];                                                                               // 13494
                                                                                                                       // 13495
            // ERRORS {boolean|number} true, false, 1 or 0.                                                            // 13496
            // 'config() ERRORS not a boolean or binary digit: {v}'                                                    // 13497
            if ( has( p = 'ERRORS' ) ) {                                                                               // 13498
                                                                                                                       // 13499
                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 13500
                    id = 0;                                                                                            // 13501
                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                     // 13502
                } else if (ERRORS) {                                                                                   // 13503
                    raise( 2, p + notBool, v );                                                                        // 13504
                }                                                                                                      // 13505
            }                                                                                                          // 13506
            r[p] = ERRORS;                                                                                             // 13507
                                                                                                                       // 13508
            // CRYPTO {boolean|number} true, false, 1 or 0.                                                            // 13509
            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                    // 13510
            // 'config() crypto unavailable: {crypto}'                                                                 // 13511
            if ( has( p = 'CRYPTO' ) ) {                                                                               // 13512
                                                                                                                       // 13513
                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 13514
                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );                                           // 13515
                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );                            // 13516
                } else if (ERRORS) {                                                                                   // 13517
                    raise( 2, p + notBool, v );                                                                        // 13518
                }                                                                                                      // 13519
            }                                                                                                          // 13520
            r[p] = CRYPTO;                                                                                             // 13521
                                                                                                                       // 13522
            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                         // 13523
            // 'config() MODULO_MODE not an integer: {v}'                                                              // 13524
            // 'config() MODULO_MODE out of range: {v}'                                                                // 13525
            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                           // 13526
                MODULO_MODE = v | 0;                                                                                   // 13527
            }                                                                                                          // 13528
            r[p] = MODULO_MODE;                                                                                        // 13529
                                                                                                                       // 13530
            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                     // 13531
            // 'config() POW_PRECISION not an integer: {v}'                                                            // 13532
            // 'config() POW_PRECISION out of range: {v}'                                                              // 13533
            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                       // 13534
                POW_PRECISION = v | 0;                                                                                 // 13535
            }                                                                                                          // 13536
            r[p] = POW_PRECISION;                                                                                      // 13537
                                                                                                                       // 13538
            // FORMAT {object}                                                                                         // 13539
            // 'config() FORMAT not an object: {v}'                                                                    // 13540
            if ( has( p = 'FORMAT' ) ) {                                                                               // 13541
                                                                                                                       // 13542
                if ( typeof v == 'object' ) {                                                                          // 13543
                    FORMAT = v;                                                                                        // 13544
                } else if (ERRORS) {                                                                                   // 13545
                    raise( 2, p + ' not an object', v );                                                               // 13546
                }                                                                                                      // 13547
            }                                                                                                          // 13548
            r[p] = FORMAT;                                                                                             // 13549
                                                                                                                       // 13550
            return r;                                                                                                  // 13551
        };                                                                                                             // 13552
                                                                                                                       // 13553
                                                                                                                       // 13554
        /*                                                                                                             // 13555
         * Return a new BigNumber whose value is the maximum of the arguments.                                         // 13556
         *                                                                                                             // 13557
         * arguments {number|string|BigNumber}                                                                         // 13558
         */                                                                                                            // 13559
        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                           // 13560
                                                                                                                       // 13561
                                                                                                                       // 13562
        /*                                                                                                             // 13563
         * Return a new BigNumber whose value is the minimum of the arguments.                                         // 13564
         *                                                                                                             // 13565
         * arguments {number|string|BigNumber}                                                                         // 13566
         */                                                                                                            // 13567
        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                           // 13568
                                                                                                                       // 13569
                                                                                                                       // 13570
        /*                                                                                                             // 13571
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                      // 13572
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                        // 13573
         * zeros are produced).                                                                                        // 13574
         *                                                                                                             // 13575
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 13576
         *                                                                                                             // 13577
         * 'random() decimal places not an integer: {dp}'                                                              // 13578
         * 'random() decimal places out of range: {dp}'                                                                // 13579
         * 'random() crypto unavailable: {crypto}'                                                                     // 13580
         */                                                                                                            // 13581
        BigNumber.random = (function () {                                                                              // 13582
            var pow2_53 = 0x20000000000000;                                                                            // 13583
                                                                                                                       // 13584
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                             // 13585
            // Check if Math.random() produces more than 32 bits of randomness.                                        // 13586
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                    // 13587
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                             // 13588
            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                  // 13589
              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                           // 13590
              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                   // 13591
                  (Math.random() * 0x800000 | 0); };                                                                   // 13592
                                                                                                                       // 13593
            return function (dp) {                                                                                     // 13594
                var a, b, e, k, v,                                                                                     // 13595
                    i = 0,                                                                                             // 13596
                    c = [],                                                                                            // 13597
                    rand = new BigNumber(ONE);                                                                         // 13598
                                                                                                                       // 13599
                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                            // 13600
                k = mathceil( dp / LOG_BASE );                                                                         // 13601
                                                                                                                       // 13602
                if (CRYPTO) {                                                                                          // 13603
                                                                                                                       // 13604
                    // Browsers supporting crypto.getRandomValues.                                                     // 13605
                    if ( crypto && crypto.getRandomValues ) {                                                          // 13606
                                                                                                                       // 13607
                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                       // 13608
                                                                                                                       // 13609
                        for ( ; i < k; ) {                                                                             // 13610
                                                                                                                       // 13611
                            // 53 bits:                                                                                // 13612
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                   // 13613
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                             // 13614
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                              // 13615
                            //                                     11111 11111111 11111111                             // 13616
                            // 0x20000 is 2^21.                                                                        // 13617
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                    // 13618
                                                                                                                       // 13619
                            // Rejection sampling:                                                                     // 13620
                            // 0 <= v < 9007199254740992                                                               // 13621
                            // Probability that v >= 9e15, is                                                          // 13622
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                              // 13623
                            if ( v >= 9e15 ) {                                                                         // 13624
                                b = crypto.getRandomValues( new Uint32Array(2) );                                      // 13625
                                a[i] = b[0];                                                                           // 13626
                                a[i + 1] = b[1];                                                                       // 13627
                            } else {                                                                                   // 13628
                                                                                                                       // 13629
                                // 0 <= v <= 8999999999999999                                                          // 13630
                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 13631
                                c.push( v % 1e14 );                                                                    // 13632
                                i += 2;                                                                                // 13633
                            }                                                                                          // 13634
                        }                                                                                              // 13635
                        i = k / 2;                                                                                     // 13636
                                                                                                                       // 13637
                    // Node.js supporting crypto.randomBytes.                                                          // 13638
                    } else if ( crypto && crypto.randomBytes ) {                                                       // 13639
                                                                                                                       // 13640
                        // buffer                                                                                      // 13641
                        a = crypto.randomBytes( k *= 7 );                                                              // 13642
                                                                                                                       // 13643
                        for ( ; i < k; ) {                                                                             // 13644
                                                                                                                       // 13645
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                          // 13646
                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                  // 13647
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                             // 13648
                            // 0 <= v < 9007199254740992                                                               // 13649
                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                   // 13650
                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                              // 13651
                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                   // 13652
                                                                                                                       // 13653
                            if ( v >= 9e15 ) {                                                                         // 13654
                                crypto.randomBytes(7).copy( a, i );                                                    // 13655
                            } else {                                                                                   // 13656
                                                                                                                       // 13657
                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 13658
                                c.push( v % 1e14 );                                                                    // 13659
                                i += 7;                                                                                // 13660
                            }                                                                                          // 13661
                        }                                                                                              // 13662
                        i = k / 7;                                                                                     // 13663
                    } else if (ERRORS) {                                                                               // 13664
                        raise( 14, 'crypto unavailable', crypto );                                                     // 13665
                    }                                                                                                  // 13666
                }                                                                                                      // 13667
                                                                                                                       // 13668
                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.                      // 13669
                if (!i) {                                                                                              // 13670
                                                                                                                       // 13671
                    for ( ; i < k; ) {                                                                                 // 13672
                        v = random53bitInt();                                                                          // 13673
                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                             // 13674
                    }                                                                                                  // 13675
                }                                                                                                      // 13676
                                                                                                                       // 13677
                k = c[--i];                                                                                            // 13678
                dp %= LOG_BASE;                                                                                        // 13679
                                                                                                                       // 13680
                // Convert trailing digits to zeros according to dp.                                                   // 13681
                if ( k && dp ) {                                                                                       // 13682
                    v = POWS_TEN[LOG_BASE - dp];                                                                       // 13683
                    c[i] = mathfloor( k / v ) * v;                                                                     // 13684
                }                                                                                                      // 13685
                                                                                                                       // 13686
                // Remove trailing elements which are zero.                                                            // 13687
                for ( ; c[i] === 0; c.pop(), i-- );                                                                    // 13688
                                                                                                                       // 13689
                // Zero?                                                                                               // 13690
                if ( i < 0 ) {                                                                                         // 13691
                    c = [ e = 0 ];                                                                                     // 13692
                } else {                                                                                               // 13693
                                                                                                                       // 13694
                    // Remove leading elements which are zero and adjust exponent accordingly.                         // 13695
                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                              // 13696
                                                                                                                       // 13697
                    // Count the digits of the first element of c to determine leading zeros, and...                   // 13698
                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                     // 13699
                                                                                                                       // 13700
                    // adjust the exponent accordingly.                                                                // 13701
                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                             // 13702
                }                                                                                                      // 13703
                                                                                                                       // 13704
                rand.e = e;                                                                                            // 13705
                rand.c = c;                                                                                            // 13706
                return rand;                                                                                           // 13707
            };                                                                                                         // 13708
        })();                                                                                                          // 13709
                                                                                                                       // 13710
                                                                                                                       // 13711
        // PRIVATE FUNCTIONS                                                                                           // 13712
                                                                                                                       // 13713
                                                                                                                       // 13714
        // Convert a numeric string of baseIn to a numeric string of baseOut.                                          // 13715
        function convertBase( str, baseOut, baseIn, sign ) {                                                           // 13716
            var d, e, k, r, x, xc, y,                                                                                  // 13717
                i = str.indexOf( '.' ),                                                                                // 13718
                dp = DECIMAL_PLACES,                                                                                   // 13719
                rm = ROUNDING_MODE;                                                                                    // 13720
                                                                                                                       // 13721
            if ( baseIn < 37 ) str = str.toLowerCase();                                                                // 13722
                                                                                                                       // 13723
            // Non-integer.                                                                                            // 13724
            if ( i >= 0 ) {                                                                                            // 13725
                k = POW_PRECISION;                                                                                     // 13726
                                                                                                                       // 13727
                // Unlimited precision.                                                                                // 13728
                POW_PRECISION = 0;                                                                                     // 13729
                str = str.replace( '.', '' );                                                                          // 13730
                y = new BigNumber(baseIn);                                                                             // 13731
                x = y.pow( str.length - i );                                                                           // 13732
                POW_PRECISION = k;                                                                                     // 13733
                                                                                                                       // 13734
                // Convert str as if an integer, then restore the fraction part by dividing the                        // 13735
                // result by its base raised to a power.                                                               // 13736
                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                             // 13737
                y.e = y.c.length;                                                                                      // 13738
            }                                                                                                          // 13739
                                                                                                                       // 13740
            // Convert the number as integer.                                                                          // 13741
            xc = toBaseOut( str, baseIn, baseOut );                                                                    // 13742
            e = k = xc.length;                                                                                         // 13743
                                                                                                                       // 13744
            // Remove trailing zeros.                                                                                  // 13745
            for ( ; xc[--k] == 0; xc.pop() );                                                                          // 13746
            if ( !xc[0] ) return '0';                                                                                  // 13747
                                                                                                                       // 13748
            if ( i < 0 ) {                                                                                             // 13749
                --e;                                                                                                   // 13750
            } else {                                                                                                   // 13751
                x.c = xc;                                                                                              // 13752
                x.e = e;                                                                                               // 13753
                                                                                                                       // 13754
                // sign is needed for correct rounding.                                                                // 13755
                x.s = sign;                                                                                            // 13756
                x = div( x, y, dp, rm, baseOut );                                                                      // 13757
                xc = x.c;                                                                                              // 13758
                r = x.r;                                                                                               // 13759
                e = x.e;                                                                                               // 13760
            }                                                                                                          // 13761
                                                                                                                       // 13762
            d = e + dp + 1;                                                                                            // 13763
                                                                                                                       // 13764
            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                    // 13765
            i = xc[d];                                                                                                 // 13766
            k = baseOut / 2;                                                                                           // 13767
            r = r || d < 0 || xc[d + 1] != null;                                                                       // 13768
                                                                                                                       // 13769
            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                // 13770
                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                               // 13771
                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                  // 13772
                                                                                                                       // 13773
            if ( d < 1 || !xc[0] ) {                                                                                   // 13774
                                                                                                                       // 13775
                // 1^-dp or 0.                                                                                         // 13776
                str = r ? toFixedPoint( '1', -dp ) : '0';                                                              // 13777
            } else {                                                                                                   // 13778
                xc.length = d;                                                                                         // 13779
                                                                                                                       // 13780
                if (r) {                                                                                               // 13781
                                                                                                                       // 13782
                    // Rounding up may mean the previous digit has to be rounded up and so on.                         // 13783
                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                          // 13784
                        xc[d] = 0;                                                                                     // 13785
                                                                                                                       // 13786
                        if ( !d ) {                                                                                    // 13787
                            ++e;                                                                                       // 13788
                            xc.unshift(1);                                                                             // 13789
                        }                                                                                              // 13790
                    }                                                                                                  // 13791
                }                                                                                                      // 13792
                                                                                                                       // 13793
                // Determine trailing zeros.                                                                           // 13794
                for ( k = xc.length; !xc[--k]; );                                                                      // 13795
                                                                                                                       // 13796
                // E.g. [4, 11, 15] becomes 4bf.                                                                       // 13797
                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                    // 13798
                str = toFixedPoint( str, e );                                                                          // 13799
            }                                                                                                          // 13800
                                                                                                                       // 13801
            // The caller will add the sign.                                                                           // 13802
            return str;                                                                                                // 13803
        }                                                                                                              // 13804
                                                                                                                       // 13805
                                                                                                                       // 13806
        // Perform division in the specified base. Called by div and convertBase.                                      // 13807
        div = (function () {                                                                                           // 13808
                                                                                                                       // 13809
            // Assume non-zero x and k.                                                                                // 13810
            function multiply( x, k, base ) {                                                                          // 13811
                var m, temp, xlo, xhi,                                                                                 // 13812
                    carry = 0,                                                                                         // 13813
                    i = x.length,                                                                                      // 13814
                    klo = k % SQRT_BASE,                                                                               // 13815
                    khi = k / SQRT_BASE | 0;                                                                           // 13816
                                                                                                                       // 13817
                for ( x = x.slice(); i--; ) {                                                                          // 13818
                    xlo = x[i] % SQRT_BASE;                                                                            // 13819
                    xhi = x[i] / SQRT_BASE | 0;                                                                        // 13820
                    m = khi * xlo + xhi * klo;                                                                         // 13821
                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                      // 13822
                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                   // 13823
                    x[i] = temp % base;                                                                                // 13824
                }                                                                                                      // 13825
                                                                                                                       // 13826
                if (carry) x.unshift(carry);                                                                           // 13827
                                                                                                                       // 13828
                return x;                                                                                              // 13829
            }                                                                                                          // 13830
                                                                                                                       // 13831
            function compare( a, b, aL, bL ) {                                                                         // 13832
                var i, cmp;                                                                                            // 13833
                                                                                                                       // 13834
                if ( aL != bL ) {                                                                                      // 13835
                    cmp = aL > bL ? 1 : -1;                                                                            // 13836
                } else {                                                                                               // 13837
                                                                                                                       // 13838
                    for ( i = cmp = 0; i < aL; i++ ) {                                                                 // 13839
                                                                                                                       // 13840
                        if ( a[i] != b[i] ) {                                                                          // 13841
                            cmp = a[i] > b[i] ? 1 : -1;                                                                // 13842
                            break;                                                                                     // 13843
                        }                                                                                              // 13844
                    }                                                                                                  // 13845
                }                                                                                                      // 13846
                return cmp;                                                                                            // 13847
            }                                                                                                          // 13848
                                                                                                                       // 13849
            function subtract( a, b, aL, base ) {                                                                      // 13850
                var i = 0;                                                                                             // 13851
                                                                                                                       // 13852
                // Subtract b from a.                                                                                  // 13853
                for ( ; aL--; ) {                                                                                      // 13854
                    a[aL] -= i;                                                                                        // 13855
                    i = a[aL] < b[aL] ? 1 : 0;                                                                         // 13856
                    a[aL] = i * base + a[aL] - b[aL];                                                                  // 13857
                }                                                                                                      // 13858
                                                                                                                       // 13859
                // Remove leading zeros.                                                                               // 13860
                for ( ; !a[0] && a.length > 1; a.shift() );                                                            // 13861
            }                                                                                                          // 13862
                                                                                                                       // 13863
            // x: dividend, y: divisor.                                                                                // 13864
            return function ( x, y, dp, rm, base ) {                                                                   // 13865
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                              // 13866
                    yL, yz,                                                                                            // 13867
                    s = x.s == y.s ? 1 : -1,                                                                           // 13868
                    xc = x.c,                                                                                          // 13869
                    yc = y.c;                                                                                          // 13870
                                                                                                                       // 13871
                // Either NaN, Infinity or 0?                                                                          // 13872
                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                                // 13873
                                                                                                                       // 13874
                    return new BigNumber(                                                                              // 13875
                                                                                                                       // 13876
                      // Return NaN if either NaN, or both Infinity or 0.                                              // 13877
                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                      // 13878
                                                                                                                       // 13879
                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                     // 13880
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                        // 13881
                    );                                                                                                 // 13882
                }                                                                                                      // 13883
                                                                                                                       // 13884
                q = new BigNumber(s);                                                                                  // 13885
                qc = q.c = [];                                                                                         // 13886
                e = x.e - y.e;                                                                                         // 13887
                s = dp + e + 1;                                                                                        // 13888
                                                                                                                       // 13889
                if ( !base ) {                                                                                         // 13890
                    base = BASE;                                                                                       // 13891
                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                       // 13892
                    s = s / LOG_BASE | 0;                                                                              // 13893
                }                                                                                                      // 13894
                                                                                                                       // 13895
                // Result exponent may be one less then the current value of e.                                        // 13896
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                        // 13897
                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                           // 13898
                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                     // 13899
                                                                                                                       // 13900
                if ( s < 0 ) {                                                                                         // 13901
                    qc.push(1);                                                                                        // 13902
                    more = true;                                                                                       // 13903
                } else {                                                                                               // 13904
                    xL = xc.length;                                                                                    // 13905
                    yL = yc.length;                                                                                    // 13906
                    i = 0;                                                                                             // 13907
                    s += 2;                                                                                            // 13908
                                                                                                                       // 13909
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                                // 13910
                                                                                                                       // 13911
                    n = mathfloor( base / ( yc[0] + 1 ) );                                                             // 13912
                                                                                                                       // 13913
                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                         // 13914
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                  // 13915
                    if ( n > 1 ) {                                                                                     // 13916
                        yc = multiply( yc, n, base );                                                                  // 13917
                        xc = multiply( xc, n, base );                                                                  // 13918
                        yL = yc.length;                                                                                // 13919
                        xL = xc.length;                                                                                // 13920
                    }                                                                                                  // 13921
                                                                                                                       // 13922
                    xi = yL;                                                                                           // 13923
                    rem = xc.slice( 0, yL );                                                                           // 13924
                    remL = rem.length;                                                                                 // 13925
                                                                                                                       // 13926
                    // Add zeros to make remainder as long as divisor.                                                 // 13927
                    for ( ; remL < yL; rem[remL++] = 0 );                                                              // 13928
                    yz = yc.slice();                                                                                   // 13929
                    yz.unshift(0);                                                                                     // 13930
                    yc0 = yc[0];                                                                                       // 13931
                    if ( yc[1] >= base / 2 ) yc0++;                                                                    // 13932
                    // Not necessary, but to prevent trial digit n > base, when using base 3.                          // 13933
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                              // 13934
                                                                                                                       // 13935
                    do {                                                                                               // 13936
                        n = 0;                                                                                         // 13937
                                                                                                                       // 13938
                        // Compare divisor and remainder.                                                              // 13939
                        cmp = compare( yc, rem, yL, remL );                                                            // 13940
                                                                                                                       // 13941
                        // If divisor < remainder.                                                                     // 13942
                        if ( cmp < 0 ) {                                                                               // 13943
                                                                                                                       // 13944
                            // Calculate trial digit, n.                                                               // 13945
                                                                                                                       // 13946
                            rem0 = rem[0];                                                                             // 13947
                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                    // 13948
                                                                                                                       // 13949
                            // n is how many times the divisor goes into the current remainder.                        // 13950
                            n = mathfloor( rem0 / yc0 );                                                               // 13951
                                                                                                                       // 13952
                            //  Algorithm:                                                                             // 13953
                            //  1. product = divisor * trial digit (n)                                                 // 13954
                            //  2. if product > remainder: product -= divisor, n--                                     // 13955
                            //  3. remainder -= product                                                                // 13956
                            //  4. if product was < remainder at 2:                                                    // 13957
                            //    5. compare new remainder and divisor                                                 // 13958
                            //    6. If remainder > divisor: remainder -= divisor, n++                                 // 13959
                                                                                                                       // 13960
                            if ( n > 1 ) {                                                                             // 13961
                                                                                                                       // 13962
                                // n may be > base only when base is 3.                                                // 13963
                                if (n >= base) n = base - 1;                                                           // 13964
                                                                                                                       // 13965
                                // product = divisor * trial digit.                                                    // 13966
                                prod = multiply( yc, n, base );                                                        // 13967
                                prodL = prod.length;                                                                   // 13968
                                remL = rem.length;                                                                     // 13969
                                                                                                                       // 13970
                                // Compare product and remainder.                                                      // 13971
                                // If product > remainder.                                                             // 13972
                                // Trial digit n too high.                                                             // 13973
                                // n is 1 too high about 5% of the time, and is not known to have                      // 13974
                                // ever been more than 1 too high.                                                     // 13975
                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                     // 13976
                                    n--;                                                                               // 13977
                                                                                                                       // 13978
                                    // Subtract divisor from product.                                                  // 13979
                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                               // 13980
                                    prodL = prod.length;                                                               // 13981
                                    cmp = 1;                                                                           // 13982
                                }                                                                                      // 13983
                            } else {                                                                                   // 13984
                                                                                                                       // 13985
                                // n is 0 or 1, cmp is -1.                                                             // 13986
                                // If n is 0, there is no need to compare yc and rem again below,                      // 13987
                                // so change cmp to 1 to avoid it.                                                     // 13988
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                       // 13989
                                if ( n == 0 ) {                                                                        // 13990
                                                                                                                       // 13991
                                    // divisor < remainder, so n must be at least 1.                                   // 13992
                                    cmp = n = 1;                                                                       // 13993
                                }                                                                                      // 13994
                                                                                                                       // 13995
                                // product = divisor                                                                   // 13996
                                prod = yc.slice();                                                                     // 13997
                                prodL = prod.length;                                                                   // 13998
                            }                                                                                          // 13999
                                                                                                                       // 14000
                            if ( prodL < remL ) prod.unshift(0);                                                       // 14001
                                                                                                                       // 14002
                            // Subtract product from remainder.                                                        // 14003
                            subtract( rem, prod, remL, base );                                                         // 14004
                            remL = rem.length;                                                                         // 14005
                                                                                                                       // 14006
                             // If product was < remainder.                                                            // 14007
                            if ( cmp == -1 ) {                                                                         // 14008
                                                                                                                       // 14009
                                // Compare divisor and new remainder.                                                  // 14010
                                // If divisor < new remainder, subtract divisor from remainder.                        // 14011
                                // Trial digit n too low.                                                              // 14012
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                     // 14013
                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                           // 14014
                                    n++;                                                                               // 14015
                                                                                                                       // 14016
                                    // Subtract divisor from remainder.                                                // 14017
                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                  // 14018
                                    remL = rem.length;                                                                 // 14019
                                }                                                                                      // 14020
                            }                                                                                          // 14021
                        } else if ( cmp === 0 ) {                                                                      // 14022
                            n++;                                                                                       // 14023
                            rem = [0];                                                                                 // 14024
                        } // else cmp === 1 and n will be 0                                                            // 14025
                                                                                                                       // 14026
                        // Add the next digit, n, to the result array.                                                 // 14027
                        qc[i++] = n;                                                                                   // 14028
                                                                                                                       // 14029
                        // Update the remainder.                                                                       // 14030
                        if ( rem[0] ) {                                                                                // 14031
                            rem[remL++] = xc[xi] || 0;                                                                 // 14032
                        } else {                                                                                       // 14033
                            rem = [ xc[xi] ];                                                                          // 14034
                            remL = 1;                                                                                  // 14035
                        }                                                                                              // 14036
                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                                // 14037
                                                                                                                       // 14038
                    more = rem[0] != null;                                                                             // 14039
                                                                                                                       // 14040
                    // Leading zero?                                                                                   // 14041
                    if ( !qc[0] ) qc.shift();                                                                          // 14042
                }                                                                                                      // 14043
                                                                                                                       // 14044
                if ( base == BASE ) {                                                                                  // 14045
                                                                                                                       // 14046
                    // To calculate q.e, first get the number of digits of qc[0].                                      // 14047
                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                   // 14048
                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                     // 14049
                                                                                                                       // 14050
                // Caller is convertBase.                                                                              // 14051
                } else {                                                                                               // 14052
                    q.e = e;                                                                                           // 14053
                    q.r = +more;                                                                                       // 14054
                }                                                                                                      // 14055
                                                                                                                       // 14056
                return q;                                                                                              // 14057
            };                                                                                                         // 14058
        })();                                                                                                          // 14059
                                                                                                                       // 14060
                                                                                                                       // 14061
        /*                                                                                                             // 14062
         * Return a string representing the value of BigNumber n in fixed-point or exponential                         // 14063
         * notation rounded to the specified decimal places or significant digits.                                     // 14064
         *                                                                                                             // 14065
         * n is a BigNumber.                                                                                           // 14066
         * i is the index of the last digit required (i.e. the digit that may be rounded up).                          // 14067
         * rm is the rounding mode.                                                                                    // 14068
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                             // 14069
         */                                                                                                            // 14070
        function format( n, i, rm, caller ) {                                                                          // 14071
            var c0, e, ne, len, str;                                                                                   // 14072
                                                                                                                       // 14073
            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                            // 14074
              ? rm | 0 : ROUNDING_MODE;                                                                                // 14075
                                                                                                                       // 14076
            if ( !n.c ) return n.toString();                                                                           // 14077
            c0 = n.c[0];                                                                                               // 14078
            ne = n.e;                                                                                                  // 14079
                                                                                                                       // 14080
            if ( i == null ) {                                                                                         // 14081
                str = coeffToString( n.c );                                                                            // 14082
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                                 // 14083
                  ? toExponential( str, ne )                                                                           // 14084
                  : toFixedPoint( str, ne );                                                                           // 14085
            } else {                                                                                                   // 14086
                n = round( new BigNumber(n), i, rm );                                                                  // 14087
                                                                                                                       // 14088
                // n.e may have changed if the value was rounded up.                                                   // 14089
                e = n.e;                                                                                               // 14090
                                                                                                                       // 14091
                str = coeffToString( n.c );                                                                            // 14092
                len = str.length;                                                                                      // 14093
                                                                                                                       // 14094
                // toPrecision returns exponential notation if the number of significant digits                        // 14095
                // specified is less than the number of digits necessary to represent the integer                      // 14096
                // part of the value in fixed-point notation.                                                          // 14097
                                                                                                                       // 14098
                // Exponential notation.                                                                               // 14099
                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                                 // 14100
                                                                                                                       // 14101
                    // Append zeros?                                                                                   // 14102
                    for ( ; len < i; str += '0', len++ );                                                              // 14103
                    str = toExponential( str, e );                                                                     // 14104
                                                                                                                       // 14105
                // Fixed-point notation.                                                                               // 14106
                } else {                                                                                               // 14107
                    i -= ne;                                                                                           // 14108
                    str = toFixedPoint( str, e );                                                                      // 14109
                                                                                                                       // 14110
                    // Append zeros?                                                                                   // 14111
                    if ( e + 1 > len ) {                                                                               // 14112
                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                            // 14113
                    } else {                                                                                           // 14114
                        i += e - len;                                                                                  // 14115
                        if ( i > 0 ) {                                                                                 // 14116
                            if ( e + 1 == len ) str += '.';                                                            // 14117
                            for ( ; i--; str += '0' );                                                                 // 14118
                        }                                                                                              // 14119
                    }                                                                                                  // 14120
                }                                                                                                      // 14121
            }                                                                                                          // 14122
                                                                                                                       // 14123
            return n.s < 0 && c0 ? '-' + str : str;                                                                    // 14124
        }                                                                                                              // 14125
                                                                                                                       // 14126
                                                                                                                       // 14127
        // Handle BigNumber.max and BigNumber.min.                                                                     // 14128
        function maxOrMin( args, method ) {                                                                            // 14129
            var m, n,                                                                                                  // 14130
                i = 0;                                                                                                 // 14131
                                                                                                                       // 14132
            if ( isArray( args[0] ) ) args = args[0];                                                                  // 14133
            m = new BigNumber( args[0] );                                                                              // 14134
                                                                                                                       // 14135
            for ( ; ++i < args.length; ) {                                                                             // 14136
                n = new BigNumber( args[i] );                                                                          // 14137
                                                                                                                       // 14138
                // If any number is NaN, return NaN.                                                                   // 14139
                if ( !n.s ) {                                                                                          // 14140
                    m = n;                                                                                             // 14141
                    break;                                                                                             // 14142
                } else if ( method.call( m, n ) ) {                                                                    // 14143
                    m = n;                                                                                             // 14144
                }                                                                                                      // 14145
            }                                                                                                          // 14146
                                                                                                                       // 14147
            return m;                                                                                                  // 14148
        }                                                                                                              // 14149
                                                                                                                       // 14150
                                                                                                                       // 14151
        /*                                                                                                             // 14152
         * Return true if n is an integer in range, otherwise throw.                                                   // 14153
         * Use for argument validation when ERRORS is true.                                                            // 14154
         */                                                                                                            // 14155
        function intValidatorWithErrors( n, min, max, caller, name ) {                                                 // 14156
            if ( n < min || n > max || n != truncate(n) ) {                                                            // 14157
                raise( caller, ( name || 'decimal places' ) +                                                          // 14158
                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                   // 14159
            }                                                                                                          // 14160
                                                                                                                       // 14161
            return true;                                                                                               // 14162
        }                                                                                                              // 14163
                                                                                                                       // 14164
                                                                                                                       // 14165
        /*                                                                                                             // 14166
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                     // 14167
         * Called by minus, plus and times.                                                                            // 14168
         */                                                                                                            // 14169
        function normalise( n, c, e ) {                                                                                // 14170
            var i = 1,                                                                                                 // 14171
                j = c.length;                                                                                          // 14172
                                                                                                                       // 14173
             // Remove trailing zeros.                                                                                 // 14174
            for ( ; !c[--j]; c.pop() );                                                                                // 14175
                                                                                                                       // 14176
            // Calculate the base 10 exponent. First get the number of digits of c[0].                                 // 14177
            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                   // 14178
                                                                                                                       // 14179
            // Overflow?                                                                                               // 14180
            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                            // 14181
                                                                                                                       // 14182
                // Infinity.                                                                                           // 14183
                n.c = n.e = null;                                                                                      // 14184
                                                                                                                       // 14185
            // Underflow?                                                                                              // 14186
            } else if ( e < MIN_EXP ) {                                                                                // 14187
                                                                                                                       // 14188
                // Zero.                                                                                               // 14189
                n.c = [ n.e = 0 ];                                                                                     // 14190
            } else {                                                                                                   // 14191
                n.e = e;                                                                                               // 14192
                n.c = c;                                                                                               // 14193
            }                                                                                                          // 14194
                                                                                                                       // 14195
            return n;                                                                                                  // 14196
        }                                                                                                              // 14197
                                                                                                                       // 14198
                                                                                                                       // 14199
        // Handle values that fail the validity test in BigNumber.                                                     // 14200
        parseNumeric = (function () {                                                                                  // 14201
            var basePrefix = /^(-?)0([xbo])/i,                                                                         // 14202
                dotAfter = /^([^.]+)\.$/,                                                                              // 14203
                dotBefore = /^\.([^.]+)$/,                                                                             // 14204
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                                // 14205
                whitespaceOrPlus = /^\s*\+|^\s+|\s+$/g;                                                                // 14206
                                                                                                                       // 14207
            return function ( x, str, num, b ) {                                                                       // 14208
                var base,                                                                                              // 14209
                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                               // 14210
                                                                                                                       // 14211
                // No exception on ±Infinity or NaN.                                                                   // 14212
                if ( isInfinityOrNaN.test(s) ) {                                                                       // 14213
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                            // 14214
                } else {                                                                                               // 14215
                    if ( !num ) {                                                                                      // 14216
                                                                                                                       // 14217
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i                                                  // 14218
                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                            // 14219
                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                          // 14220
                            return !b || b == base ? p1 : m;                                                           // 14221
                        });                                                                                            // 14222
                                                                                                                       // 14223
                        if (b) {                                                                                       // 14224
                            base = b;                                                                                  // 14225
                                                                                                                       // 14226
                            // E.g. '1.' to '1', '.1' to '0.1'                                                         // 14227
                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                              // 14228
                        }                                                                                              // 14229
                                                                                                                       // 14230
                        if ( str != s ) return new BigNumber( s, base );                                               // 14231
                    }                                                                                                  // 14232
                                                                                                                       // 14233
                    // 'new BigNumber() not a number: {n}'                                                             // 14234
                    // 'new BigNumber() not a base {b} number: {n}'                                                    // 14235
                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                     // 14236
                    x.s = null;                                                                                        // 14237
                }                                                                                                      // 14238
                                                                                                                       // 14239
                x.c = x.e = null;                                                                                      // 14240
                id = 0;                                                                                                // 14241
            }                                                                                                          // 14242
        })();                                                                                                          // 14243
                                                                                                                       // 14244
                                                                                                                       // 14245
        // Throw a BigNumber Error.                                                                                    // 14246
        function raise( caller, msg, val ) {                                                                           // 14247
            var error = new Error( [                                                                                   // 14248
                'new BigNumber',     // 0                                                                              // 14249
                'cmp',               // 1                                                                              // 14250
                'config',            // 2                                                                              // 14251
                'div',               // 3                                                                              // 14252
                'divToInt',          // 4                                                                              // 14253
                'eq',                // 5                                                                              // 14254
                'gt',                // 6                                                                              // 14255
                'gte',               // 7                                                                              // 14256
                'lt',                // 8                                                                              // 14257
                'lte',               // 9                                                                              // 14258
                'minus',             // 10                                                                             // 14259
                'mod',               // 11                                                                             // 14260
                'plus',              // 12                                                                             // 14261
                'precision',         // 13                                                                             // 14262
                'random',            // 14                                                                             // 14263
                'round',             // 15                                                                             // 14264
                'shift',             // 16                                                                             // 14265
                'times',             // 17                                                                             // 14266
                'toDigits',          // 18                                                                             // 14267
                'toExponential',     // 19                                                                             // 14268
                'toFixed',           // 20                                                                             // 14269
                'toFormat',          // 21                                                                             // 14270
                'toFraction',        // 22                                                                             // 14271
                'pow',               // 23                                                                             // 14272
                'toPrecision',       // 24                                                                             // 14273
                'toString',          // 25                                                                             // 14274
                'BigNumber'          // 26                                                                             // 14275
            ][caller] + '() ' + msg + ': ' + val );                                                                    // 14276
                                                                                                                       // 14277
            error.name = 'BigNumber Error';                                                                            // 14278
            id = 0;                                                                                                    // 14279
            throw error;                                                                                               // 14280
        }                                                                                                              // 14281
                                                                                                                       // 14282
                                                                                                                       // 14283
        /*                                                                                                             // 14284
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                         // 14285
         * If r is truthy, it is known that there are more digits after the rounding digit.                            // 14286
         */                                                                                                            // 14287
        function round( x, sd, rm, r ) {                                                                               // 14288
            var d, i, j, k, n, ni, rd,                                                                                 // 14289
                xc = x.c,                                                                                              // 14290
                pows10 = POWS_TEN;                                                                                     // 14291
                                                                                                                       // 14292
            // if x is not Infinity or NaN...                                                                          // 14293
            if (xc) {                                                                                                  // 14294
                                                                                                                       // 14295
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                    // 14296
                // n is a base 1e14 number, the value of the element of array x.c containing rd.                       // 14297
                // ni is the index of n within x.c.                                                                    // 14298
                // d is the number of digits of n.                                                                     // 14299
                // i is the index of rd within n including leading zeros.                                              // 14300
                // j is the actual index of rd within n (if < 0, rd is a leading zero).                                // 14301
                out: {                                                                                                 // 14302
                                                                                                                       // 14303
                    // Get the number of digits of the first element of xc.                                            // 14304
                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                   // 14305
                    i = sd - d;                                                                                        // 14306
                                                                                                                       // 14307
                    // If the rounding digit is in the first element of xc...                                          // 14308
                    if ( i < 0 ) {                                                                                     // 14309
                        i += LOG_BASE;                                                                                 // 14310
                        j = sd;                                                                                        // 14311
                        n = xc[ ni = 0 ];                                                                              // 14312
                                                                                                                       // 14313
                        // Get the rounding digit at index j of n.                                                     // 14314
                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                         // 14315
                    } else {                                                                                           // 14316
                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                         // 14317
                                                                                                                       // 14318
                        if ( ni >= xc.length ) {                                                                       // 14319
                                                                                                                       // 14320
                            if (r) {                                                                                   // 14321
                                                                                                                       // 14322
                                // Needed by sqrt.                                                                     // 14323
                                for ( ; xc.length <= ni; xc.push(0) );                                                 // 14324
                                n = rd = 0;                                                                            // 14325
                                d = 1;                                                                                 // 14326
                                i %= LOG_BASE;                                                                         // 14327
                                j = i - LOG_BASE + 1;                                                                  // 14328
                            } else {                                                                                   // 14329
                                break out;                                                                             // 14330
                            }                                                                                          // 14331
                        } else {                                                                                       // 14332
                            n = k = xc[ni];                                                                            // 14333
                                                                                                                       // 14334
                            // Get the number of digits of n.                                                          // 14335
                            for ( d = 1; k >= 10; k /= 10, d++ );                                                      // 14336
                                                                                                                       // 14337
                            // Get the index of rd within n.                                                           // 14338
                            i %= LOG_BASE;                                                                             // 14339
                                                                                                                       // 14340
                            // Get the index of rd within n, adjusted for leading zeros.                               // 14341
                            // The number of leading zeros of n is given by LOG_BASE - d.                              // 14342
                            j = i - LOG_BASE + d;                                                                      // 14343
                                                                                                                       // 14344
                            // Get the rounding digit at index j of n.                                                 // 14345
                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                         // 14346
                        }                                                                                              // 14347
                    }                                                                                                  // 14348
                                                                                                                       // 14349
                    r = r || sd < 0 ||                                                                                 // 14350
                                                                                                                       // 14351
                    // Are there any non-zero digits after the rounding digit?                                         // 14352
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                   // 14353
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                    // 14354
                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                   // 14355
                                                                                                                       // 14356
                    r = rm < 4                                                                                         // 14357
                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                        // 14358
                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                              // 14359
                                                                                                                       // 14360
                        // Check whether the digit to the left of the rounding digit is odd.                           // 14361
                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                       // 14362
                          rm == ( x.s < 0 ? 8 : 7 ) );                                                                 // 14363
                                                                                                                       // 14364
                    if ( sd < 1 || !xc[0] ) {                                                                          // 14365
                        xc.length = 0;                                                                                 // 14366
                                                                                                                       // 14367
                        if (r) {                                                                                       // 14368
                                                                                                                       // 14369
                            // Convert sd to decimal places.                                                           // 14370
                            sd -= x.e + 1;                                                                             // 14371
                                                                                                                       // 14372
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                        // 14373
                            xc[0] = pows10[ sd % LOG_BASE ];                                                           // 14374
                            x.e = -sd || 0;                                                                            // 14375
                        } else {                                                                                       // 14376
                                                                                                                       // 14377
                            // Zero.                                                                                   // 14378
                            xc[0] = x.e = 0;                                                                           // 14379
                        }                                                                                              // 14380
                                                                                                                       // 14381
                        return x;                                                                                      // 14382
                    }                                                                                                  // 14383
                                                                                                                       // 14384
                    // Remove excess digits.                                                                           // 14385
                    if ( i == 0 ) {                                                                                    // 14386
                        xc.length = ni;                                                                                // 14387
                        k = 1;                                                                                         // 14388
                        ni--;                                                                                          // 14389
                    } else {                                                                                           // 14390
                        xc.length = ni + 1;                                                                            // 14391
                        k = pows10[ LOG_BASE - i ];                                                                    // 14392
                                                                                                                       // 14393
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                        // 14394
                        // j > 0 means i > number of leading zeros of n.                                               // 14395
                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                         // 14396
                    }                                                                                                  // 14397
                                                                                                                       // 14398
                    // Round up?                                                                                       // 14399
                    if (r) {                                                                                           // 14400
                                                                                                                       // 14401
                        for ( ; ; ) {                                                                                  // 14402
                                                                                                                       // 14403
                            // If the digit to be rounded up is in the first element of xc...                          // 14404
                            if ( ni == 0 ) {                                                                           // 14405
                                                                                                                       // 14406
                                // i will be the length of xc[0] before k is added.                                    // 14407
                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                       // 14408
                                j = xc[0] += k;                                                                        // 14409
                                for ( k = 1; j >= 10; j /= 10, k++ );                                                  // 14410
                                                                                                                       // 14411
                                // if i != k the length has increased.                                                 // 14412
                                if ( i != k ) {                                                                        // 14413
                                    x.e++;                                                                             // 14414
                                    if ( xc[0] == BASE ) xc[0] = 1;                                                    // 14415
                                }                                                                                      // 14416
                                                                                                                       // 14417
                                break;                                                                                 // 14418
                            } else {                                                                                   // 14419
                                xc[ni] += k;                                                                           // 14420
                                if ( xc[ni] != BASE ) break;                                                           // 14421
                                xc[ni--] = 0;                                                                          // 14422
                                k = 1;                                                                                 // 14423
                            }                                                                                          // 14424
                        }                                                                                              // 14425
                    }                                                                                                  // 14426
                                                                                                                       // 14427
                    // Remove trailing zeros.                                                                          // 14428
                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                    // 14429
                }                                                                                                      // 14430
                                                                                                                       // 14431
                // Overflow? Infinity.                                                                                 // 14432
                if ( x.e > MAX_EXP ) {                                                                                 // 14433
                    x.c = x.e = null;                                                                                  // 14434
                                                                                                                       // 14435
                // Underflow? Zero.                                                                                    // 14436
                } else if ( x.e < MIN_EXP ) {                                                                          // 14437
                    x.c = [ x.e = 0 ];                                                                                 // 14438
                }                                                                                                      // 14439
            }                                                                                                          // 14440
                                                                                                                       // 14441
            return x;                                                                                                  // 14442
        }                                                                                                              // 14443
                                                                                                                       // 14444
                                                                                                                       // 14445
        // PROTOTYPE/INSTANCE METHODS                                                                                  // 14446
                                                                                                                       // 14447
                                                                                                                       // 14448
        /*                                                                                                             // 14449
         * Return a new BigNumber whose value is the absolute value of this BigNumber.                                 // 14450
         */                                                                                                            // 14451
        P.absoluteValue = P.abs = function () {                                                                        // 14452
            var x = new BigNumber(this);                                                                               // 14453
            if ( x.s < 0 ) x.s = 1;                                                                                    // 14454
            return x;                                                                                                  // 14455
        };                                                                                                             // 14456
                                                                                                                       // 14457
                                                                                                                       // 14458
        /*                                                                                                             // 14459
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14460
         * number in the direction of Infinity.                                                                        // 14461
         */                                                                                                            // 14462
        P.ceil = function () {                                                                                         // 14463
            return round( new BigNumber(this), this.e + 1, 2 );                                                        // 14464
        };                                                                                                             // 14465
                                                                                                                       // 14466
                                                                                                                       // 14467
        /*                                                                                                             // 14468
         * Return                                                                                                      // 14469
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                              // 14470
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                                // 14471
         * 0 if they have the same value,                                                                              // 14472
         * or null if the value of either is NaN.                                                                      // 14473
         */                                                                                                            // 14474
        P.comparedTo = P.cmp = function ( y, b ) {                                                                     // 14475
            id = 1;                                                                                                    // 14476
            return compare( this, new BigNumber( y, b ) );                                                             // 14477
        };                                                                                                             // 14478
                                                                                                                       // 14479
                                                                                                                       // 14480
        /*                                                                                                             // 14481
         * Return the number of decimal places of the value of this BigNumber, or null if the value                    // 14482
         * of this BigNumber is ±Infinity or NaN.                                                                      // 14483
         */                                                                                                            // 14484
        P.decimalPlaces = P.dp = function () {                                                                         // 14485
            var n, v,                                                                                                  // 14486
                c = this.c;                                                                                            // 14487
                                                                                                                       // 14488
            if ( !c ) return null;                                                                                     // 14489
            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                   // 14490
                                                                                                                       // 14491
            // Subtract the number of trailing zeros of the last number.                                               // 14492
            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                       // 14493
            if ( n < 0 ) n = 0;                                                                                        // 14494
                                                                                                                       // 14495
            return n;                                                                                                  // 14496
        };                                                                                                             // 14497
                                                                                                                       // 14498
                                                                                                                       // 14499
        /*                                                                                                             // 14500
         *  n / 0 = I                                                                                                  // 14501
         *  n / N = N                                                                                                  // 14502
         *  n / I = 0                                                                                                  // 14503
         *  0 / n = 0                                                                                                  // 14504
         *  0 / 0 = N                                                                                                  // 14505
         *  0 / N = N                                                                                                  // 14506
         *  0 / I = 0                                                                                                  // 14507
         *  N / n = N                                                                                                  // 14508
         *  N / 0 = N                                                                                                  // 14509
         *  N / N = N                                                                                                  // 14510
         *  N / I = N                                                                                                  // 14511
         *  I / n = I                                                                                                  // 14512
         *  I / 0 = I                                                                                                  // 14513
         *  I / N = N                                                                                                  // 14514
         *  I / I = N                                                                                                  // 14515
         *                                                                                                             // 14516
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                   // 14517
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                     // 14518
         */                                                                                                            // 14519
        P.dividedBy = P.div = function ( y, b ) {                                                                      // 14520
            id = 3;                                                                                                    // 14521
            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                  // 14522
        };                                                                                                             // 14523
                                                                                                                       // 14524
                                                                                                                       // 14525
        /*                                                                                                             // 14526
         * Return a new BigNumber whose value is the integer part of dividing the value of this                        // 14527
         * BigNumber by the value of BigNumber(y, b).                                                                  // 14528
         */                                                                                                            // 14529
        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                        // 14530
            id = 4;                                                                                                    // 14531
            return div( this, new BigNumber( y, b ), 0, 1 );                                                           // 14532
        };                                                                                                             // 14533
                                                                                                                       // 14534
                                                                                                                       // 14535
        /*                                                                                                             // 14536
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                        // 14537
         * otherwise returns false.                                                                                    // 14538
         */                                                                                                            // 14539
        P.equals = P.eq = function ( y, b ) {                                                                          // 14540
            id = 5;                                                                                                    // 14541
            return compare( this, new BigNumber( y, b ) ) === 0;                                                       // 14542
        };                                                                                                             // 14543
                                                                                                                       // 14544
                                                                                                                       // 14545
        /*                                                                                                             // 14546
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14547
         * number in the direction of -Infinity.                                                                       // 14548
         */                                                                                                            // 14549
        P.floor = function () {                                                                                        // 14550
            return round( new BigNumber(this), this.e + 1, 3 );                                                        // 14551
        };                                                                                                             // 14552
                                                                                                                       // 14553
                                                                                                                       // 14554
        /*                                                                                                             // 14555
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                    // 14556
         * otherwise returns false.                                                                                    // 14557
         */                                                                                                            // 14558
        P.greaterThan = P.gt = function ( y, b ) {                                                                     // 14559
            id = 6;                                                                                                    // 14560
            return compare( this, new BigNumber( y, b ) ) > 0;                                                         // 14561
        };                                                                                                             // 14562
                                                                                                                       // 14563
                                                                                                                       // 14564
        /*                                                                                                             // 14565
         * Return true if the value of this BigNumber is greater than or equal to the value of                         // 14566
         * BigNumber(y, b), otherwise returns false.                                                                   // 14567
         */                                                                                                            // 14568
        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                           // 14569
            id = 7;                                                                                                    // 14570
            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                    // 14571
                                                                                                                       // 14572
        };                                                                                                             // 14573
                                                                                                                       // 14574
                                                                                                                       // 14575
        /*                                                                                                             // 14576
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                     // 14577
         */                                                                                                            // 14578
        P.isFinite = function () {                                                                                     // 14579
            return !!this.c;                                                                                           // 14580
        };                                                                                                             // 14581
                                                                                                                       // 14582
                                                                                                                       // 14583
        /*                                                                                                             // 14584
         * Return true if the value of this BigNumber is an integer, otherwise return false.                           // 14585
         */                                                                                                            // 14586
        P.isInteger = P.isInt = function () {                                                                          // 14587
            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                      // 14588
        };                                                                                                             // 14589
                                                                                                                       // 14590
                                                                                                                       // 14591
        /*                                                                                                             // 14592
         * Return true if the value of this BigNumber is NaN, otherwise returns false.                                 // 14593
         */                                                                                                            // 14594
        P.isNaN = function () {                                                                                        // 14595
            return !this.s;                                                                                            // 14596
        };                                                                                                             // 14597
                                                                                                                       // 14598
                                                                                                                       // 14599
        /*                                                                                                             // 14600
         * Return true if the value of this BigNumber is negative, otherwise returns false.                            // 14601
         */                                                                                                            // 14602
        P.isNegative = P.isNeg = function () {                                                                         // 14603
            return this.s < 0;                                                                                         // 14604
        };                                                                                                             // 14605
                                                                                                                       // 14606
                                                                                                                       // 14607
        /*                                                                                                             // 14608
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                             // 14609
         */                                                                                                            // 14610
        P.isZero = function () {                                                                                       // 14611
            return !!this.c && this.c[0] == 0;                                                                         // 14612
        };                                                                                                             // 14613
                                                                                                                       // 14614
                                                                                                                       // 14615
        /*                                                                                                             // 14616
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                       // 14617
         * otherwise returns false.                                                                                    // 14618
         */                                                                                                            // 14619
        P.lessThan = P.lt = function ( y, b ) {                                                                        // 14620
            id = 8;                                                                                                    // 14621
            return compare( this, new BigNumber( y, b ) ) < 0;                                                         // 14622
        };                                                                                                             // 14623
                                                                                                                       // 14624
                                                                                                                       // 14625
        /*                                                                                                             // 14626
         * Return true if the value of this BigNumber is less than or equal to the value of                            // 14627
         * BigNumber(y, b), otherwise returns false.                                                                   // 14628
         */                                                                                                            // 14629
        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                              // 14630
            id = 9;                                                                                                    // 14631
            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                   // 14632
        };                                                                                                             // 14633
                                                                                                                       // 14634
                                                                                                                       // 14635
        /*                                                                                                             // 14636
         *  n - 0 = n                                                                                                  // 14637
         *  n - N = N                                                                                                  // 14638
         *  n - I = -I                                                                                                 // 14639
         *  0 - n = -n                                                                                                 // 14640
         *  0 - 0 = 0                                                                                                  // 14641
         *  0 - N = N                                                                                                  // 14642
         *  0 - I = -I                                                                                                 // 14643
         *  N - n = N                                                                                                  // 14644
         *  N - 0 = N                                                                                                  // 14645
         *  N - N = N                                                                                                  // 14646
         *  N - I = N                                                                                                  // 14647
         *  I - n = I                                                                                                  // 14648
         *  I - 0 = I                                                                                                  // 14649
         *  I - N = N                                                                                                  // 14650
         *  I - I = N                                                                                                  // 14651
         *                                                                                                             // 14652
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                        // 14653
         * BigNumber(y, b).                                                                                            // 14654
         */                                                                                                            // 14655
        P.minus = P.sub = function ( y, b ) {                                                                          // 14656
            var i, j, t, xLTy,                                                                                         // 14657
                x = this,                                                                                              // 14658
                a = x.s;                                                                                               // 14659
                                                                                                                       // 14660
            id = 10;                                                                                                   // 14661
            y = new BigNumber( y, b );                                                                                 // 14662
            b = y.s;                                                                                                   // 14663
                                                                                                                       // 14664
            // Either NaN?                                                                                             // 14665
            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 14666
                                                                                                                       // 14667
            // Signs differ?                                                                                           // 14668
            if ( a != b ) {                                                                                            // 14669
                y.s = -b;                                                                                              // 14670
                return x.plus(y);                                                                                      // 14671
            }                                                                                                          // 14672
                                                                                                                       // 14673
            var xe = x.e / LOG_BASE,                                                                                   // 14674
                ye = y.e / LOG_BASE,                                                                                   // 14675
                xc = x.c,                                                                                              // 14676
                yc = y.c;                                                                                              // 14677
                                                                                                                       // 14678
            if ( !xe || !ye ) {                                                                                        // 14679
                                                                                                                       // 14680
                // Either Infinity?                                                                                    // 14681
                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                         // 14682
                                                                                                                       // 14683
                // Either zero?                                                                                        // 14684
                if ( !xc[0] || !yc[0] ) {                                                                              // 14685
                                                                                                                       // 14686
                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                        // 14687
                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                        // 14688
                                                                                                                       // 14689
                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                    // 14690
                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                   // 14691
                }                                                                                                      // 14692
            }                                                                                                          // 14693
                                                                                                                       // 14694
            xe = bitFloor(xe);                                                                                         // 14695
            ye = bitFloor(ye);                                                                                         // 14696
            xc = xc.slice();                                                                                           // 14697
                                                                                                                       // 14698
            // Determine which is the bigger number.                                                                   // 14699
            if ( a = xe - ye ) {                                                                                       // 14700
                                                                                                                       // 14701
                if ( xLTy = a < 0 ) {                                                                                  // 14702
                    a = -a;                                                                                            // 14703
                    t = xc;                                                                                            // 14704
                } else {                                                                                               // 14705
                    ye = xe;                                                                                           // 14706
                    t = yc;                                                                                            // 14707
                }                                                                                                      // 14708
                                                                                                                       // 14709
                t.reverse();                                                                                           // 14710
                                                                                                                       // 14711
                // Prepend zeros to equalise exponents.                                                                // 14712
                for ( b = a; b--; t.push(0) );                                                                         // 14713
                t.reverse();                                                                                           // 14714
            } else {                                                                                                   // 14715
                                                                                                                       // 14716
                // Exponents equal. Check digit by digit.                                                              // 14717
                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                          // 14718
                                                                                                                       // 14719
                for ( a = b = 0; b < j; b++ ) {                                                                        // 14720
                                                                                                                       // 14721
                    if ( xc[b] != yc[b] ) {                                                                            // 14722
                        xLTy = xc[b] < yc[b];                                                                          // 14723
                        break;                                                                                         // 14724
                    }                                                                                                  // 14725
                }                                                                                                      // 14726
            }                                                                                                          // 14727
                                                                                                                       // 14728
            // x < y? Point xc to the array of the bigger number.                                                      // 14729
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                             // 14730
                                                                                                                       // 14731
            b = ( j = yc.length ) - ( i = xc.length );                                                                 // 14732
                                                                                                                       // 14733
            // Append zeros to xc if shorter.                                                                          // 14734
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                     // 14735
            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                   // 14736
            b = BASE - 1;                                                                                              // 14737
                                                                                                                       // 14738
            // Subtract yc from xc.                                                                                    // 14739
            for ( ; j > a; ) {                                                                                         // 14740
                                                                                                                       // 14741
                if ( xc[--j] < yc[j] ) {                                                                               // 14742
                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                           // 14743
                    --xc[i];                                                                                           // 14744
                    xc[j] += BASE;                                                                                     // 14745
                }                                                                                                      // 14746
                                                                                                                       // 14747
                xc[j] -= yc[j];                                                                                        // 14748
            }                                                                                                          // 14749
                                                                                                                       // 14750
            // Remove leading zeros and adjust exponent accordingly.                                                   // 14751
            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                    // 14752
                                                                                                                       // 14753
            // Zero?                                                                                                   // 14754
            if ( !xc[0] ) {                                                                                            // 14755
                                                                                                                       // 14756
                // Following IEEE 754 (2008) 6.3,                                                                      // 14757
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                       // 14758
                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                     // 14759
                y.c = [ y.e = 0 ];                                                                                     // 14760
                return y;                                                                                              // 14761
            }                                                                                                          // 14762
                                                                                                                       // 14763
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                             // 14764
            // for finite x and y.                                                                                     // 14765
            return normalise( y, xc, ye );                                                                             // 14766
        };                                                                                                             // 14767
                                                                                                                       // 14768
                                                                                                                       // 14769
        /*                                                                                                             // 14770
         *   n % 0 =  N                                                                                                // 14771
         *   n % N =  N                                                                                                // 14772
         *   n % I =  n                                                                                                // 14773
         *   0 % n =  0                                                                                                // 14774
         *  -0 % n = -0                                                                                                // 14775
         *   0 % 0 =  N                                                                                                // 14776
         *   0 % N =  N                                                                                                // 14777
         *   0 % I =  0                                                                                                // 14778
         *   N % n =  N                                                                                                // 14779
         *   N % 0 =  N                                                                                                // 14780
         *   N % N =  N                                                                                                // 14781
         *   N % I =  N                                                                                                // 14782
         *   I % n =  N                                                                                                // 14783
         *   I % 0 =  N                                                                                                // 14784
         *   I % N =  N                                                                                                // 14785
         *   I % I =  N                                                                                                // 14786
         *                                                                                                             // 14787
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                       // 14788
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                            // 14789
         */                                                                                                            // 14790
        P.modulo = P.mod = function ( y, b ) {                                                                         // 14791
            var q, s,                                                                                                  // 14792
                x = this;                                                                                              // 14793
                                                                                                                       // 14794
            id = 11;                                                                                                   // 14795
            y = new BigNumber( y, b );                                                                                 // 14796
                                                                                                                       // 14797
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                                // 14798
            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                    // 14799
                return new BigNumber(NaN);                                                                             // 14800
                                                                                                                       // 14801
            // Return x if y is Infinity or x is zero.                                                                 // 14802
            } else if ( !y.c || x.c && !x.c[0] ) {                                                                     // 14803
                return new BigNumber(x);                                                                               // 14804
            }                                                                                                          // 14805
                                                                                                                       // 14806
            if ( MODULO_MODE == 9 ) {                                                                                  // 14807
                                                                                                                       // 14808
                // Euclidian division: q = sign(y) * floor(x / abs(y))                                                 // 14809
                // r = x - qy    where  0 <= r < abs(y)                                                                // 14810
                s = y.s;                                                                                               // 14811
                y.s = 1;                                                                                               // 14812
                q = div( x, y, 0, 3 );                                                                                 // 14813
                y.s = s;                                                                                               // 14814
                q.s *= s;                                                                                              // 14815
            } else {                                                                                                   // 14816
                q = div( x, y, 0, MODULO_MODE );                                                                       // 14817
            }                                                                                                          // 14818
                                                                                                                       // 14819
            return x.minus( q.times(y) );                                                                              // 14820
        };                                                                                                             // 14821
                                                                                                                       // 14822
                                                                                                                       // 14823
        /*                                                                                                             // 14824
         * Return a new BigNumber whose value is the value of this BigNumber negated,                                  // 14825
         * i.e. multiplied by -1.                                                                                      // 14826
         */                                                                                                            // 14827
        P.negated = P.neg = function () {                                                                              // 14828
            var x = new BigNumber(this);                                                                               // 14829
            x.s = -x.s || null;                                                                                        // 14830
            return x;                                                                                                  // 14831
        };                                                                                                             // 14832
                                                                                                                       // 14833
                                                                                                                       // 14834
        /*                                                                                                             // 14835
         *  n + 0 = n                                                                                                  // 14836
         *  n + N = N                                                                                                  // 14837
         *  n + I = I                                                                                                  // 14838
         *  0 + n = n                                                                                                  // 14839
         *  0 + 0 = 0                                                                                                  // 14840
         *  0 + N = N                                                                                                  // 14841
         *  0 + I = I                                                                                                  // 14842
         *  N + n = N                                                                                                  // 14843
         *  N + 0 = N                                                                                                  // 14844
         *  N + N = N                                                                                                  // 14845
         *  N + I = N                                                                                                  // 14846
         *  I + n = I                                                                                                  // 14847
         *  I + 0 = I                                                                                                  // 14848
         *  I + N = N                                                                                                  // 14849
         *  I + I = I                                                                                                  // 14850
         *                                                                                                             // 14851
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                         // 14852
         * BigNumber(y, b).                                                                                            // 14853
         */                                                                                                            // 14854
        P.plus = P.add = function ( y, b ) {                                                                           // 14855
            var t,                                                                                                     // 14856
                x = this,                                                                                              // 14857
                a = x.s;                                                                                               // 14858
                                                                                                                       // 14859
            id = 12;                                                                                                   // 14860
            y = new BigNumber( y, b );                                                                                 // 14861
            b = y.s;                                                                                                   // 14862
                                                                                                                       // 14863
            // Either NaN?                                                                                             // 14864
            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 14865
                                                                                                                       // 14866
            // Signs differ?                                                                                           // 14867
             if ( a != b ) {                                                                                           // 14868
                y.s = -b;                                                                                              // 14869
                return x.minus(y);                                                                                     // 14870
            }                                                                                                          // 14871
                                                                                                                       // 14872
            var xe = x.e / LOG_BASE,                                                                                   // 14873
                ye = y.e / LOG_BASE,                                                                                   // 14874
                xc = x.c,                                                                                              // 14875
                yc = y.c;                                                                                              // 14876
                                                                                                                       // 14877
            if ( !xe || !ye ) {                                                                                        // 14878
                                                                                                                       // 14879
                // Return ±Infinity if either ±Infinity.                                                               // 14880
                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                       // 14881
                                                                                                                       // 14882
                // Either zero?                                                                                        // 14883
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                            // 14884
                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                         // 14885
            }                                                                                                          // 14886
                                                                                                                       // 14887
            xe = bitFloor(xe);                                                                                         // 14888
            ye = bitFloor(ye);                                                                                         // 14889
            xc = xc.slice();                                                                                           // 14890
                                                                                                                       // 14891
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                            // 14892
            if ( a = xe - ye ) {                                                                                       // 14893
                if ( a > 0 ) {                                                                                         // 14894
                    ye = xe;                                                                                           // 14895
                    t = yc;                                                                                            // 14896
                } else {                                                                                               // 14897
                    a = -a;                                                                                            // 14898
                    t = xc;                                                                                            // 14899
                }                                                                                                      // 14900
                                                                                                                       // 14901
                t.reverse();                                                                                           // 14902
                for ( ; a--; t.push(0) );                                                                              // 14903
                t.reverse();                                                                                           // 14904
            }                                                                                                          // 14905
                                                                                                                       // 14906
            a = xc.length;                                                                                             // 14907
            b = yc.length;                                                                                             // 14908
                                                                                                                       // 14909
            // Point xc to the longer array, and b to the shorter length.                                              // 14910
            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                           // 14911
                                                                                                                       // 14912
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                          // 14913
            for ( a = 0; b; ) {                                                                                        // 14914
                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                        // 14915
                xc[b] %= BASE;                                                                                         // 14916
            }                                                                                                          // 14917
                                                                                                                       // 14918
            if (a) {                                                                                                   // 14919
                xc.unshift(a);                                                                                         // 14920
                ++ye;                                                                                                  // 14921
            }                                                                                                          // 14922
                                                                                                                       // 14923
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                              // 14924
            // ye = MAX_EXP + 1 possible                                                                               // 14925
            return normalise( y, xc, ye );                                                                             // 14926
        };                                                                                                             // 14927
                                                                                                                       // 14928
                                                                                                                       // 14929
        /*                                                                                                             // 14930
         * Return the number of significant digits of the value of this BigNumber.                                     // 14931
         *                                                                                                             // 14932
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                     // 14933
         */                                                                                                            // 14934
        P.precision = P.sd = function (z) {                                                                            // 14935
            var n, v,                                                                                                  // 14936
                x = this,                                                                                              // 14937
                c = x.c;                                                                                               // 14938
                                                                                                                       // 14939
            // 'precision() argument not a boolean or binary digit: {z}'                                               // 14940
            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                      // 14941
                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                      // 14942
                if ( z != !!z ) z = null;                                                                              // 14943
            }                                                                                                          // 14944
                                                                                                                       // 14945
            if ( !c ) return null;                                                                                     // 14946
            v = c.length - 1;                                                                                          // 14947
            n = v * LOG_BASE + 1;                                                                                      // 14948
                                                                                                                       // 14949
            if ( v = c[v] ) {                                                                                          // 14950
                                                                                                                       // 14951
                // Subtract the number of trailing zeros of the last element.                                          // 14952
                for ( ; v % 10 == 0; v /= 10, n-- );                                                                   // 14953
                                                                                                                       // 14954
                // Add the number of digits of the first element.                                                      // 14955
                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                               // 14956
            }                                                                                                          // 14957
                                                                                                                       // 14958
            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                       // 14959
                                                                                                                       // 14960
            return n;                                                                                                  // 14961
        };                                                                                                             // 14962
                                                                                                                       // 14963
                                                                                                                       // 14964
        /*                                                                                                             // 14965
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 14966
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                         // 14967
         * omitted.                                                                                                    // 14968
         *                                                                                                             // 14969
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 14970
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 14971
         *                                                                                                             // 14972
         * 'round() decimal places out of range: {dp}'                                                                 // 14973
         * 'round() decimal places not an integer: {dp}'                                                               // 14974
         * 'round() rounding mode not an integer: {rm}'                                                                // 14975
         * 'round() rounding mode out of range: {rm}'                                                                  // 14976
         */                                                                                                            // 14977
        P.round = function ( dp, rm ) {                                                                                // 14978
            var n = new BigNumber(this);                                                                               // 14979
                                                                                                                       // 14980
            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                        // 14981
                round( n, ~~dp + this.e + 1, rm == null ||                                                             // 14982
                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                                // 14983
            }                                                                                                          // 14984
                                                                                                                       // 14985
            return n;                                                                                                  // 14986
        };                                                                                                             // 14987
                                                                                                                       // 14988
                                                                                                                       // 14989
        /*                                                                                                             // 14990
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                       // 14991
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                      // 14992
         *                                                                                                             // 14993
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                        // 14994
         *                                                                                                             // 14995
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                      // 14996
         * otherwise.                                                                                                  // 14997
         *                                                                                                             // 14998
         * 'shift() argument not an integer: {k}'                                                                      // 14999
         * 'shift() argument out of range: {k}'                                                                        // 15000
         */                                                                                                            // 15001
        P.shift = function (k) {                                                                                       // 15002
            var n = this;                                                                                              // 15003
            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                                // 15004
                                                                                                                       // 15005
              // k < 1e+21, or truncate(k) will produce exponential notation.                                          // 15006
              ? n.times( '1e' + truncate(k) )                                                                          // 15007
              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                      // 15008
                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                          // 15009
                : n );                                                                                                 // 15010
        };                                                                                                             // 15011
                                                                                                                       // 15012
                                                                                                                       // 15013
        /*                                                                                                             // 15014
         *  sqrt(-n) =  N                                                                                              // 15015
         *  sqrt( N) =  N                                                                                              // 15016
         *  sqrt(-I) =  N                                                                                              // 15017
         *  sqrt( I) =  I                                                                                              // 15018
         *  sqrt( 0) =  0                                                                                              // 15019
         *  sqrt(-0) = -0                                                                                              // 15020
         *                                                                                                             // 15021
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                       // 15022
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                      // 15023
         */                                                                                                            // 15024
        P.squareRoot = P.sqrt = function () {                                                                          // 15025
            var m, n, r, rep, t,                                                                                       // 15026
                x = this,                                                                                              // 15027
                c = x.c,                                                                                               // 15028
                s = x.s,                                                                                               // 15029
                e = x.e,                                                                                               // 15030
                dp = DECIMAL_PLACES + 4,                                                                               // 15031
                half = new BigNumber('0.5');                                                                           // 15032
                                                                                                                       // 15033
            // Negative/NaN/Infinity/zero?                                                                             // 15034
            if ( s !== 1 || !c || !c[0] ) {                                                                            // 15035
                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                           // 15036
            }                                                                                                          // 15037
                                                                                                                       // 15038
            // Initial estimate.                                                                                       // 15039
            s = Math.sqrt( +x );                                                                                       // 15040
                                                                                                                       // 15041
            // Math.sqrt underflow/overflow?                                                                           // 15042
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                                 // 15043
            if ( s == 0 || s == 1 / 0 ) {                                                                              // 15044
                n = coeffToString(c);                                                                                  // 15045
                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                             // 15046
                s = Math.sqrt(n);                                                                                      // 15047
                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                    // 15048
                                                                                                                       // 15049
                if ( s == 1 / 0 ) {                                                                                    // 15050
                    n = '1e' + e;                                                                                      // 15051
                } else {                                                                                               // 15052
                    n = s.toExponential();                                                                             // 15053
                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                          // 15054
                }                                                                                                      // 15055
                                                                                                                       // 15056
                r = new BigNumber(n);                                                                                  // 15057
            } else {                                                                                                   // 15058
                r = new BigNumber( s + '' );                                                                           // 15059
            }                                                                                                          // 15060
                                                                                                                       // 15061
            // Check for zero.                                                                                         // 15062
            // r could be zero if MIN_EXP is changed after the this value was created.                                 // 15063
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                   // 15064
            // coeffToString to throw.                                                                                 // 15065
            if ( r.c[0] ) {                                                                                            // 15066
                e = r.e;                                                                                               // 15067
                s = e + dp;                                                                                            // 15068
                if ( s < 3 ) s = 0;                                                                                    // 15069
                                                                                                                       // 15070
                // Newton-Raphson iteration.                                                                           // 15071
                for ( ; ; ) {                                                                                          // 15072
                    t = r;                                                                                             // 15073
                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                    // 15074
                                                                                                                       // 15075
                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                                // 15076
                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                      // 15077
                                                                                                                       // 15078
                        // The exponent of r may here be one less than the final result exponent,                      // 15079
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                     // 15080
                        // are indexed correctly.                                                                      // 15081
                        if ( r.e < e ) --s;                                                                            // 15082
                        n = n.slice( s - 3, s + 1 );                                                                   // 15083
                                                                                                                       // 15084
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                    // 15085
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                        // 15086
                        // iteration.                                                                                  // 15087
                        if ( n == '9999' || !rep && n == '4999' ) {                                                    // 15088
                                                                                                                       // 15089
                            // On the first iteration only, check to see if rounding up gives the                      // 15090
                            // exact result as the nines may infinitely repeat.                                        // 15091
                            if ( !rep ) {                                                                              // 15092
                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                               // 15093
                                                                                                                       // 15094
                                if ( t.times(t).eq(x) ) {                                                              // 15095
                                    r = t;                                                                             // 15096
                                    break;                                                                             // 15097
                                }                                                                                      // 15098
                            }                                                                                          // 15099
                                                                                                                       // 15100
                            dp += 4;                                                                                   // 15101
                            s += 4;                                                                                    // 15102
                            rep = 1;                                                                                   // 15103
                        } else {                                                                                       // 15104
                                                                                                                       // 15105
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                         // 15106
                            // result. If not, then there are further digits and m will be truthy.                     // 15107
                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                         // 15108
                                                                                                                       // 15109
                                // Truncate to the first rounding digit.                                               // 15110
                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                               // 15111
                                m = !r.times(r).eq(x);                                                                 // 15112
                            }                                                                                          // 15113
                                                                                                                       // 15114
                            break;                                                                                     // 15115
                        }                                                                                              // 15116
                    }                                                                                                  // 15117
                }                                                                                                      // 15118
            }                                                                                                          // 15119
                                                                                                                       // 15120
            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                             // 15121
        };                                                                                                             // 15122
                                                                                                                       // 15123
                                                                                                                       // 15124
        /*                                                                                                             // 15125
         *  n * 0 = 0                                                                                                  // 15126
         *  n * N = N                                                                                                  // 15127
         *  n * I = I                                                                                                  // 15128
         *  0 * n = 0                                                                                                  // 15129
         *  0 * 0 = 0                                                                                                  // 15130
         *  0 * N = N                                                                                                  // 15131
         *  0 * I = N                                                                                                  // 15132
         *  N * n = N                                                                                                  // 15133
         *  N * 0 = N                                                                                                  // 15134
         *  N * N = N                                                                                                  // 15135
         *  N * I = N                                                                                                  // 15136
         *  I * n = I                                                                                                  // 15137
         *  I * 0 = N                                                                                                  // 15138
         *  I * N = N                                                                                                  // 15139
         *  I * I = I                                                                                                  // 15140
         *                                                                                                             // 15141
         * Return a new BigNumber whose value is the value of this BigNumber times the value of                        // 15142
         * BigNumber(y, b).                                                                                            // 15143
         */                                                                                                            // 15144
        P.times = P.mul = function ( y, b ) {                                                                          // 15145
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                    // 15146
                base, sqrtBase,                                                                                        // 15147
                x = this,                                                                                              // 15148
                xc = x.c,                                                                                              // 15149
                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                         // 15150
                                                                                                                       // 15151
            // Either NaN, ±Infinity or ±0?                                                                            // 15152
            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                    // 15153
                                                                                                                       // 15154
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                                 // 15155
                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                    // 15156
                    y.c = y.e = y.s = null;                                                                            // 15157
                } else {                                                                                               // 15158
                    y.s *= x.s;                                                                                        // 15159
                                                                                                                       // 15160
                    // Return ±Infinity if either is ±Infinity.                                                        // 15161
                    if ( !xc || !yc ) {                                                                                // 15162
                        y.c = y.e = null;                                                                              // 15163
                                                                                                                       // 15164
                    // Return ±0 if either is ±0.                                                                      // 15165
                    } else {                                                                                           // 15166
                        y.c = [0];                                                                                     // 15167
                        y.e = 0;                                                                                       // 15168
                    }                                                                                                  // 15169
                }                                                                                                      // 15170
                                                                                                                       // 15171
                return y;                                                                                              // 15172
            }                                                                                                          // 15173
                                                                                                                       // 15174
            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                               // 15175
            y.s *= x.s;                                                                                                // 15176
            xcL = xc.length;                                                                                           // 15177
            ycL = yc.length;                                                                                           // 15178
                                                                                                                       // 15179
            // Ensure xc points to longer array and xcL to its length.                                                 // 15180
            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                   // 15181
                                                                                                                       // 15182
            // Initialise the result array with zeros.                                                                 // 15183
            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                           // 15184
                                                                                                                       // 15185
            base = BASE;                                                                                               // 15186
            sqrtBase = SQRT_BASE;                                                                                      // 15187
                                                                                                                       // 15188
            for ( i = ycL; --i >= 0; ) {                                                                               // 15189
                c = 0;                                                                                                 // 15190
                ylo = yc[i] % sqrtBase;                                                                                // 15191
                yhi = yc[i] / sqrtBase | 0;                                                                            // 15192
                                                                                                                       // 15193
                for ( k = xcL, j = i + k; j > i; ) {                                                                   // 15194
                    xlo = xc[--k] % sqrtBase;                                                                          // 15195
                    xhi = xc[k] / sqrtBase | 0;                                                                        // 15196
                    m = yhi * xlo + xhi * ylo;                                                                         // 15197
                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                     // 15198
                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                         // 15199
                    zc[j--] = xlo % base;                                                                              // 15200
                }                                                                                                      // 15201
                                                                                                                       // 15202
                zc[j] = c;                                                                                             // 15203
            }                                                                                                          // 15204
                                                                                                                       // 15205
            if (c) {                                                                                                   // 15206
                ++e;                                                                                                   // 15207
            } else {                                                                                                   // 15208
                zc.shift();                                                                                            // 15209
            }                                                                                                          // 15210
                                                                                                                       // 15211
            return normalise( y, zc, e );                                                                              // 15212
        };                                                                                                             // 15213
                                                                                                                       // 15214
                                                                                                                       // 15215
        /*                                                                                                             // 15216
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 15217
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                            // 15218
         *                                                                                                             // 15219
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15220
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15221
         *                                                                                                             // 15222
         * 'toDigits() precision out of range: {sd}'                                                                   // 15223
         * 'toDigits() precision not an integer: {sd}'                                                                 // 15224
         * 'toDigits() rounding mode not an integer: {rm}'                                                             // 15225
         * 'toDigits() rounding mode out of range: {rm}'                                                               // 15226
         */                                                                                                            // 15227
        P.toDigits = function ( sd, rm ) {                                                                             // 15228
            var n = new BigNumber(this);                                                                               // 15229
            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                             // 15230
            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                     // 15231
            return sd ? round( n, sd, rm ) : n;                                                                        // 15232
        };                                                                                                             // 15233
                                                                                                                       // 15234
                                                                                                                       // 15235
        /*                                                                                                             // 15236
         * Return a string representing the value of this BigNumber in exponential notation and                        // 15237
         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                     // 15238
         *                                                                                                             // 15239
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15240
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15241
         *                                                                                                             // 15242
         * 'toExponential() decimal places not an integer: {dp}'                                                       // 15243
         * 'toExponential() decimal places out of range: {dp}'                                                         // 15244
         * 'toExponential() rounding mode not an integer: {rm}'                                                        // 15245
         * 'toExponential() rounding mode out of range: {rm}'                                                          // 15246
         */                                                                                                            // 15247
        P.toExponential = function ( dp, rm ) {                                                                        // 15248
            return format( this,                                                                                       // 15249
              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                  // 15250
        };                                                                                                             // 15251
                                                                                                                       // 15252
                                                                                                                       // 15253
        /*                                                                                                             // 15254
         * Return a string representing the value of this BigNumber in fixed-point notation rounding                   // 15255
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                       // 15256
         *                                                                                                             // 15257
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                             // 15258
         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                     // 15259
         *                                                                                                             // 15260
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15261
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15262
         *                                                                                                             // 15263
         * 'toFixed() decimal places not an integer: {dp}'                                                             // 15264
         * 'toFixed() decimal places out of range: {dp}'                                                               // 15265
         * 'toFixed() rounding mode not an integer: {rm}'                                                              // 15266
         * 'toFixed() rounding mode out of range: {rm}'                                                                // 15267
         */                                                                                                            // 15268
        P.toFixed = function ( dp, rm ) {                                                                              // 15269
            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                            // 15270
              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                    // 15271
        };                                                                                                             // 15272
                                                                                                                       // 15273
                                                                                                                       // 15274
        /*                                                                                                             // 15275
         * Return a string representing the value of this BigNumber in fixed-point notation rounded                    // 15276
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                   // 15277
         * of the FORMAT object (see BigNumber.config).                                                                // 15278
         *                                                                                                             // 15279
         * FORMAT = {                                                                                                  // 15280
         *      decimalSeparator : '.',                                                                                // 15281
         *      groupSeparator : ',',                                                                                  // 15282
         *      groupSize : 3,                                                                                         // 15283
         *      secondaryGroupSize : 0,                                                                                // 15284
         *      fractionGroupSeparator : '\xA0',    // non-breaking space                                              // 15285
         *      fractionGroupSize : 0                                                                                  // 15286
         * };                                                                                                          // 15287
         *                                                                                                             // 15288
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15289
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15290
         *                                                                                                             // 15291
         * 'toFormat() decimal places not an integer: {dp}'                                                            // 15292
         * 'toFormat() decimal places out of range: {dp}'                                                              // 15293
         * 'toFormat() rounding mode not an integer: {rm}'                                                             // 15294
         * 'toFormat() rounding mode out of range: {rm}'                                                               // 15295
         */                                                                                                            // 15296
        P.toFormat = function ( dp, rm ) {                                                                             // 15297
            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                         // 15298
              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                    // 15299
                                                                                                                       // 15300
            if ( this.c ) {                                                                                            // 15301
                var i,                                                                                                 // 15302
                    arr = str.split('.'),                                                                              // 15303
                    g1 = +FORMAT.groupSize,                                                                            // 15304
                    g2 = +FORMAT.secondaryGroupSize,                                                                   // 15305
                    groupSeparator = FORMAT.groupSeparator,                                                            // 15306
                    intPart = arr[0],                                                                                  // 15307
                    fractionPart = arr[1],                                                                             // 15308
                    isNeg = this.s < 0,                                                                                // 15309
                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                    // 15310
                    len = intDigits.length;                                                                            // 15311
                                                                                                                       // 15312
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                             // 15313
                                                                                                                       // 15314
                if ( g1 > 0 && len > 0 ) {                                                                             // 15315
                    i = len % g1 || g1;                                                                                // 15316
                    intPart = intDigits.substr( 0, i );                                                                // 15317
                                                                                                                       // 15318
                    for ( ; i < len; i += g1 ) {                                                                       // 15319
                        intPart += groupSeparator + intDigits.substr( i, g1 );                                         // 15320
                    }                                                                                                  // 15321
                                                                                                                       // 15322
                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                      // 15323
                    if (isNeg) intPart = '-' + intPart;                                                                // 15324
                }                                                                                                      // 15325
                                                                                                                       // 15326
                str = fractionPart                                                                                     // 15327
                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                           // 15328
                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),                                   // 15329
                      '$&' + FORMAT.fractionGroupSeparator )                                                           // 15330
                    : fractionPart )                                                                                   // 15331
                  : intPart;                                                                                           // 15332
            }                                                                                                          // 15333
                                                                                                                       // 15334
            return str;                                                                                                // 15335
        };                                                                                                             // 15336
                                                                                                                       // 15337
                                                                                                                       // 15338
        /*                                                                                                             // 15339
         * Return a string array representing the value of this BigNumber as a simple fraction with                    // 15340
         * an integer numerator and an integer denominator. The denominator will be a positive                         // 15341
         * non-zero value less than or equal to the specified maximum denominator. If a maximum                        // 15342
         * denominator is not specified, the denominator will be the lowest value necessary to                         // 15343
         * represent the number exactly.                                                                               // 15344
         *                                                                                                             // 15345
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                        // 15346
         *                                                                                                             // 15347
         * 'toFraction() max denominator not an integer: {md}'                                                         // 15348
         * 'toFraction() max denominator out of range: {md}'                                                           // 15349
         */                                                                                                            // 15350
        P.toFraction = function (md) {                                                                                 // 15351
            var arr, d0, d2, e, exp, n, n0, q, s,                                                                      // 15352
                k = ERRORS,                                                                                            // 15353
                x = this,                                                                                              // 15354
                xc = x.c,                                                                                              // 15355
                d = new BigNumber(ONE),                                                                                // 15356
                n1 = d0 = new BigNumber(ONE),                                                                          // 15357
                d1 = n0 = new BigNumber(ONE);                                                                          // 15358
                                                                                                                       // 15359
            if ( md != null ) {                                                                                        // 15360
                ERRORS = false;                                                                                        // 15361
                n = new BigNumber(md);                                                                                 // 15362
                ERRORS = k;                                                                                            // 15363
                                                                                                                       // 15364
                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                               // 15365
                                                                                                                       // 15366
                    if (ERRORS) {                                                                                      // 15367
                        raise( 22,                                                                                     // 15368
                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                        // 15369
                    }                                                                                                  // 15370
                                                                                                                       // 15371
                    // ERRORS is false:                                                                                // 15372
                    // If md is a finite non-integer >= 1, round it to an integer and use it.                          // 15373
                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                      // 15374
                }                                                                                                      // 15375
            }                                                                                                          // 15376
                                                                                                                       // 15377
            if ( !xc ) return x.toString();                                                                            // 15378
            s = coeffToString(xc);                                                                                     // 15379
                                                                                                                       // 15380
            // Determine initial denominator.                                                                          // 15381
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                    // 15382
            e = d.e = s.length - x.e - 1;                                                                              // 15383
            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                    // 15384
            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                         // 15385
                                                                                                                       // 15386
            exp = MAX_EXP;                                                                                             // 15387
            MAX_EXP = 1 / 0;                                                                                           // 15388
            n = new BigNumber(s);                                                                                      // 15389
                                                                                                                       // 15390
            // n0 = d1 = 0                                                                                             // 15391
            n0.c[0] = 0;                                                                                               // 15392
                                                                                                                       // 15393
            for ( ; ; )  {                                                                                             // 15394
                q = div( n, d, 0, 1 );                                                                                 // 15395
                d2 = d0.plus( q.times(d1) );                                                                           // 15396
                if ( d2.cmp(md) == 1 ) break;                                                                          // 15397
                d0 = d1;                                                                                               // 15398
                d1 = d2;                                                                                               // 15399
                n1 = n0.plus( q.times( d2 = n1 ) );                                                                    // 15400
                n0 = d2;                                                                                               // 15401
                d = n.minus( q.times( d2 = d ) );                                                                      // 15402
                n = d2;                                                                                                // 15403
            }                                                                                                          // 15404
                                                                                                                       // 15405
            d2 = div( md.minus(d0), d1, 0, 1 );                                                                        // 15406
            n0 = n0.plus( d2.times(n1) );                                                                              // 15407
            d0 = d0.plus( d2.times(d1) );                                                                              // 15408
            n0.s = n1.s = x.s;                                                                                         // 15409
            e *= 2;                                                                                                    // 15410
                                                                                                                       // 15411
            // Determine which fraction is closer to x, n0/d0 or n1/d1                                                 // 15412
            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                  // 15413
                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                                 // 15414
                    ? [ n1.toString(), d1.toString() ]                                                                 // 15415
                    : [ n0.toString(), d0.toString() ];                                                                // 15416
                                                                                                                       // 15417
            MAX_EXP = exp;                                                                                             // 15418
            return arr;                                                                                                // 15419
        };                                                                                                             // 15420
                                                                                                                       // 15421
                                                                                                                       // 15422
        /*                                                                                                             // 15423
         * Return the value of this BigNumber converted to a number primitive.                                         // 15424
         */                                                                                                            // 15425
        P.toNumber = function () {                                                                                     // 15426
            var x = this;                                                                                              // 15427
                                                                                                                       // 15428
            // Ensure zero has correct sign.                                                                           // 15429
            return +x || ( x.s ? x.s * 0 : NaN );                                                                      // 15430
        };                                                                                                             // 15431
                                                                                                                       // 15432
                                                                                                                       // 15433
        /*                                                                                                             // 15434
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                        // 15435
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                       // 15436
         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.                                      // 15437
         *                                                                                                             // 15438
         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.                                        // 15439
         * (Performs 54 loop iterations for n of 9007199254740992.)                                                    // 15440
         *                                                                                                             // 15441
         * 'pow() exponent not an integer: {n}'                                                                        // 15442
         * 'pow() exponent out of range: {n}'                                                                          // 15443
         */                                                                                                            // 15444
        P.toPower = P.pow = function (n) {                                                                             // 15445
            var k, y,                                                                                                  // 15446
                i = mathfloor( n < 0 ? -n : +n ),                                                                      // 15447
                x = this;                                                                                              // 15448
                                                                                                                       // 15449
            // Pass ±Infinity to Math.pow if exponent is out of range.                                                 // 15450
            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                              // 15451
              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                  // 15452
                parseFloat(n) != n && !( n = NaN ) ) ) {                                                               // 15453
                return new BigNumber( Math.pow( +x, n ) );                                                             // 15454
            }                                                                                                          // 15455
                                                                                                                       // 15456
            // Truncating each coefficient array to a length of k after each multiplication equates                    // 15457
            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a                      // 15458
            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)                     // 15459
            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;                                          // 15460
            y = new BigNumber(ONE);                                                                                    // 15461
                                                                                                                       // 15462
            for ( ; ; ) {                                                                                              // 15463
                                                                                                                       // 15464
                if ( i % 2 ) {                                                                                         // 15465
                    y = y.times(x);                                                                                    // 15466
                    if ( !y.c ) break;                                                                                 // 15467
                    if ( k && y.c.length > k ) y.c.length = k;                                                         // 15468
                }                                                                                                      // 15469
                                                                                                                       // 15470
                i = mathfloor( i / 2 );                                                                                // 15471
                if ( !i ) break;                                                                                       // 15472
                                                                                                                       // 15473
                x = x.times(x);                                                                                        // 15474
                if ( k && x.c && x.c.length > k ) x.c.length = k;                                                      // 15475
            }                                                                                                          // 15476
                                                                                                                       // 15477
            if ( n < 0 ) y = ONE.div(y);                                                                               // 15478
            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                                   // 15479
        };                                                                                                             // 15480
                                                                                                                       // 15481
                                                                                                                       // 15482
        /*                                                                                                             // 15483
         * Return a string representing the value of this BigNumber rounded to sd significant digits                   // 15484
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                            // 15485
         * necessary to represent the integer part of the value in fixed-point notation, then use                      // 15486
         * exponential notation.                                                                                       // 15487
         *                                                                                                             // 15488
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15489
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15490
         *                                                                                                             // 15491
         * 'toPrecision() precision not an integer: {sd}'                                                              // 15492
         * 'toPrecision() precision out of range: {sd}'                                                                // 15493
         * 'toPrecision() rounding mode not an integer: {rm}'                                                          // 15494
         * 'toPrecision() rounding mode out of range: {rm}'                                                            // 15495
         */                                                                                                            // 15496
        P.toPrecision = function ( sd, rm ) {                                                                          // 15497
            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                               // 15498
              ? sd | 0 : null, rm, 24 );                                                                               // 15499
        };                                                                                                             // 15500
                                                                                                                       // 15501
                                                                                                                       // 15502
        /*                                                                                                             // 15503
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                      // 15504
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                   // 15505
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                       // 15506
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                   // 15507
         * TO_EXP_NEG, return exponential notation.                                                                    // 15508
         *                                                                                                             // 15509
         * [b] {number} Integer, 2 to 64 inclusive.                                                                    // 15510
         *                                                                                                             // 15511
         * 'toString() base not an integer: {b}'                                                                       // 15512
         * 'toString() base out of range: {b}'                                                                         // 15513
         */                                                                                                            // 15514
        P.toString = function (b) {                                                                                    // 15515
            var str,                                                                                                   // 15516
                n = this,                                                                                              // 15517
                s = n.s,                                                                                               // 15518
                e = n.e;                                                                                               // 15519
                                                                                                                       // 15520
            // Infinity or NaN?                                                                                        // 15521
            if ( e === null ) {                                                                                        // 15522
                                                                                                                       // 15523
                if (s) {                                                                                               // 15524
                    str = 'Infinity';                                                                                  // 15525
                    if ( s < 0 ) str = '-' + str;                                                                      // 15526
                } else {                                                                                               // 15527
                    str = 'NaN';                                                                                       // 15528
                }                                                                                                      // 15529
            } else {                                                                                                   // 15530
                str = coeffToString( n.c );                                                                            // 15531
                                                                                                                       // 15532
                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                              // 15533
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                           // 15534
                      ? toExponential( str, e )                                                                        // 15535
                      : toFixedPoint( str, e );                                                                        // 15536
                } else {                                                                                               // 15537
                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                         // 15538
                }                                                                                                      // 15539
                                                                                                                       // 15540
                if ( s < 0 && n.c[0] ) str = '-' + str;                                                                // 15541
            }                                                                                                          // 15542
                                                                                                                       // 15543
            return str;                                                                                                // 15544
        };                                                                                                             // 15545
                                                                                                                       // 15546
                                                                                                                       // 15547
        /*                                                                                                             // 15548
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                      // 15549
         * number.                                                                                                     // 15550
         */                                                                                                            // 15551
        P.truncated = P.trunc = function () {                                                                          // 15552
            return round( new BigNumber(this), this.e + 1, 1 );                                                        // 15553
        };                                                                                                             // 15554
                                                                                                                       // 15555
                                                                                                                       // 15556
                                                                                                                       // 15557
        /*                                                                                                             // 15558
         * Return as toString, but do not accept a base argument.                                                      // 15559
         */                                                                                                            // 15560
        P.valueOf = P.toJSON = function () {                                                                           // 15561
            return this.toString();                                                                                    // 15562
        };                                                                                                             // 15563
                                                                                                                       // 15564
                                                                                                                       // 15565
        // Aliases for BigDecimal methods.                                                                             // 15566
        //P.add = P.plus;         // P.add included above                                                              // 15567
        //P.subtract = P.minus;   // P.sub included above                                                              // 15568
        //P.multiply = P.times;   // P.mul included above                                                              // 15569
        //P.divide = P.div;                                                                                            // 15570
        //P.remainder = P.mod;                                                                                         // 15571
        //P.compareTo = P.cmp;                                                                                         // 15572
        //P.negate = P.neg;                                                                                            // 15573
                                                                                                                       // 15574
                                                                                                                       // 15575
        if ( configObj != null ) BigNumber.config(configObj);                                                          // 15576
                                                                                                                       // 15577
        return BigNumber;                                                                                              // 15578
    }                                                                                                                  // 15579
                                                                                                                       // 15580
                                                                                                                       // 15581
    // PRIVATE HELPER FUNCTIONS                                                                                        // 15582
                                                                                                                       // 15583
                                                                                                                       // 15584
    function bitFloor(n) {                                                                                             // 15585
        var i = n | 0;                                                                                                 // 15586
        return n > 0 || n === i ? i : i - 1;                                                                           // 15587
    }                                                                                                                  // 15588
                                                                                                                       // 15589
                                                                                                                       // 15590
    // Return a coefficient array as a string of base 10 digits.                                                       // 15591
    function coeffToString(a) {                                                                                        // 15592
        var s, z,                                                                                                      // 15593
            i = 1,                                                                                                     // 15594
            j = a.length,                                                                                              // 15595
            r = a[0] + '';                                                                                             // 15596
                                                                                                                       // 15597
        for ( ; i < j; ) {                                                                                             // 15598
            s = a[i++] + '';                                                                                           // 15599
            z = LOG_BASE - s.length;                                                                                   // 15600
            for ( ; z--; s = '0' + s );                                                                                // 15601
            r += s;                                                                                                    // 15602
        }                                                                                                              // 15603
                                                                                                                       // 15604
        // Determine trailing zeros.                                                                                   // 15605
        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                               // 15606
        return r.slice( 0, j + 1 || 1 );                                                                               // 15607
    }                                                                                                                  // 15608
                                                                                                                       // 15609
                                                                                                                       // 15610
    // Compare the value of BigNumbers x and y.                                                                        // 15611
    function compare( x, y ) {                                                                                         // 15612
        var a, b,                                                                                                      // 15613
            xc = x.c,                                                                                                  // 15614
            yc = y.c,                                                                                                  // 15615
            i = x.s,                                                                                                   // 15616
            j = y.s,                                                                                                   // 15617
            k = x.e,                                                                                                   // 15618
            l = y.e;                                                                                                   // 15619
                                                                                                                       // 15620
        // Either NaN?                                                                                                 // 15621
        if ( !i || !j ) return null;                                                                                   // 15622
                                                                                                                       // 15623
        a = xc && !xc[0];                                                                                              // 15624
        b = yc && !yc[0];                                                                                              // 15625
                                                                                                                       // 15626
        // Either zero?                                                                                                // 15627
        if ( a || b ) return a ? b ? 0 : -j : i;                                                                       // 15628
                                                                                                                       // 15629
        // Signs differ?                                                                                               // 15630
        if ( i != j ) return i;                                                                                        // 15631
                                                                                                                       // 15632
        a = i < 0;                                                                                                     // 15633
        b = k == l;                                                                                                    // 15634
                                                                                                                       // 15635
        // Either Infinity?                                                                                            // 15636
        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                             // 15637
                                                                                                                       // 15638
        // Compare exponents.                                                                                          // 15639
        if ( !b ) return k > l ^ a ? 1 : -1;                                                                           // 15640
                                                                                                                       // 15641
        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                             // 15642
                                                                                                                       // 15643
        // Compare digit by digit.                                                                                     // 15644
        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                             // 15645
                                                                                                                       // 15646
        // Compare lengths.                                                                                            // 15647
        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                        // 15648
    }                                                                                                                  // 15649
                                                                                                                       // 15650
                                                                                                                       // 15651
    /*                                                                                                                 // 15652
     * Return true if n is a valid number in range, otherwise false.                                                   // 15653
     * Use for argument validation when ERRORS is false.                                                               // 15654
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                       // 15655
     */                                                                                                                // 15656
    function intValidatorNoErrors( n, min, max ) {                                                                     // 15657
        return ( n = truncate(n) ) >= min && n <= max;                                                                 // 15658
    }                                                                                                                  // 15659
                                                                                                                       // 15660
                                                                                                                       // 15661
    function isArray(obj) {                                                                                            // 15662
        return Object.prototype.toString.call(obj) == '[object Array]';                                                // 15663
    }                                                                                                                  // 15664
                                                                                                                       // 15665
                                                                                                                       // 15666
    /*                                                                                                                 // 15667
     * Convert string of baseIn to an array of numbers of baseOut.                                                     // 15668
     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                                // 15669
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                                // 15670
     */                                                                                                                // 15671
    function toBaseOut( str, baseIn, baseOut ) {                                                                       // 15672
        var j,                                                                                                         // 15673
            arr = [0],                                                                                                 // 15674
            arrL,                                                                                                      // 15675
            i = 0,                                                                                                     // 15676
            len = str.length;                                                                                          // 15677
                                                                                                                       // 15678
        for ( ; i < len; ) {                                                                                           // 15679
            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                    // 15680
            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                     // 15681
                                                                                                                       // 15682
            for ( ; j < arr.length; j++ ) {                                                                            // 15683
                                                                                                                       // 15684
                if ( arr[j] > baseOut - 1 ) {                                                                          // 15685
                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                          // 15686
                    arr[j + 1] += arr[j] / baseOut | 0;                                                                // 15687
                    arr[j] %= baseOut;                                                                                 // 15688
                }                                                                                                      // 15689
            }                                                                                                          // 15690
        }                                                                                                              // 15691
                                                                                                                       // 15692
        return arr.reverse();                                                                                          // 15693
    }                                                                                                                  // 15694
                                                                                                                       // 15695
                                                                                                                       // 15696
    function toExponential( str, e ) {                                                                                 // 15697
        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                         // 15698
          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                  // 15699
    }                                                                                                                  // 15700
                                                                                                                       // 15701
                                                                                                                       // 15702
    function toFixedPoint( str, e ) {                                                                                  // 15703
        var len, z;                                                                                                    // 15704
                                                                                                                       // 15705
        // Negative exponent?                                                                                          // 15706
        if ( e < 0 ) {                                                                                                 // 15707
                                                                                                                       // 15708
            // Prepend zeros.                                                                                          // 15709
            for ( z = '0.'; ++e; z += '0' );                                                                           // 15710
            str = z + str;                                                                                             // 15711
                                                                                                                       // 15712
        // Positive exponent                                                                                           // 15713
        } else {                                                                                                       // 15714
            len = str.length;                                                                                          // 15715
                                                                                                                       // 15716
            // Append zeros.                                                                                           // 15717
            if ( ++e > len ) {                                                                                         // 15718
                for ( z = '0', e -= len; --e; z += '0' );                                                              // 15719
                str += z;                                                                                              // 15720
            } else if ( e < len ) {                                                                                    // 15721
                str = str.slice( 0, e ) + '.' + str.slice(e);                                                          // 15722
            }                                                                                                          // 15723
        }                                                                                                              // 15724
                                                                                                                       // 15725
        return str;                                                                                                    // 15726
    }                                                                                                                  // 15727
                                                                                                                       // 15728
                                                                                                                       // 15729
    function truncate(n) {                                                                                             // 15730
        n = parseFloat(n);                                                                                             // 15731
        return n < 0 ? mathceil(n) : mathfloor(n);                                                                     // 15732
    }                                                                                                                  // 15733
                                                                                                                       // 15734
                                                                                                                       // 15735
    // EXPORT                                                                                                          // 15736
                                                                                                                       // 15737
                                                                                                                       // 15738
    BigNumber = another();                                                                                             // 15739
                                                                                                                       // 15740
    // AMD.                                                                                                            // 15741
    if ( typeof define == 'function' && define.amd ) {                                                                 // 15742
        define( function () { return BigNumber; } );                                                                   // 15743
                                                                                                                       // 15744
    // Node and other environments that support module.exports.                                                        // 15745
    } else if ( typeof module != 'undefined' && module.exports ) {                                                     // 15746
        module.exports = BigNumber;                                                                                    // 15747
        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}                                                // 15748
                                                                                                                       // 15749
    // Browser.                                                                                                        // 15750
    } else {                                                                                                           // 15751
        global.BigNumber = BigNumber;                                                                                  // 15752
    }                                                                                                                  // 15753
})(this);                                                                                                              // 15754
                                                                                                                       // 15755
},{"crypto":48}],"web3":[function(require,module,exports){                                                             // 15756
var Web3 = require('./lib/web3');                                                                                      // 15757
                                                                                                                       // 15758
// dont override global variable                                                                                       // 15759
if (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {                                             // 15760
    window.Web3 = Web3;                                                                                                // 15761
}                                                                                                                      // 15762
                                                                                                                       // 15763
module.exports = Web3;                                                                                                 // 15764
                                                                                                                       // 15765
},{"./lib/web3":22}]},{},["web3"])                                                                                     // 15766
//# sourceMappingURL=web3.js.map                                                                                       // 15767
                                                                                                                       // 15768
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ethereum_web3/package-init.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* jshint ignore:start */                                                                                              // 1
                                                                                                                       // 2
                                                                                                                       // 3
// Browser environment                                                                                                 // 4
if(typeof window !== 'undefined') {                                                                                    // 5
    Web3 = (typeof window.Web3 !== 'undefined') ? window.Web3 : require('web3');                                       // 6
    BigNumber = (typeof window.BigNumber !== 'undefined') ? window.BigNumber : require('bignumber.js');                // 7
}                                                                                                                      // 8
                                                                                                                       // 9
                                                                                                                       // 10
// Node environment                                                                                                    // 11
if(typeof global !== 'undefined') {                                                                                    // 12
    Web3 = (typeof global.Web3 !== 'undefined') ? global.Web3 : require('web3');                                       // 13
    BigNumber = (typeof global.BigNumber !== 'undefined') ? global.BigNumber : require('bignumber.js');                // 14
}                                                                                                                      // 15
                                                                                                                       // 16
/* jshint ignore:end */                                                                                                // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ethereum:web3'] = {
  Web3: Web3,
  BigNumber: BigNumber
};

})();

//# sourceMappingURL=ethereum_web3.js.map
